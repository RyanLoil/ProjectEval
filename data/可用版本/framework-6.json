{
    "6": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    \"\"\"\n    Todo List model\n    \"\"\"\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoList.\n        \"\"\"\n        return self.title\n\n\nclass TodoItem(models.Model):\n    \"\"\"\n    Todo Item model\n    \"\"\"\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoItem.\n        \"\"\"\n        return self.title\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item, \n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView\nfrom .models import TodoList, TodoItem\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Provides context data to the home template.\n        \"\"\"\n        pass\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def get_queryset(self):\n        \"\"\"\n        Gets the list of TodoLists, updating their completion status.\n        \"\"\"\n        pass\n\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        Handles the post request to create a new TodoList.\n        \"\"\"\n        pass\n\n\ndef delete_todo(request, pk):\n    \"\"\"\n    Deletes a TodoList based on the provided primary key.\n    \"\"\"\n    pass\n\n\ndef edit_todo(request, pk):\n    \"\"\"\n    Edits a TodoList based on the provided primary key.\n    \"\"\"\n    pass\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n\n    def get_queryset(self):\n        \"\"\"\n        Gets the list of TodoItems related to a specific TodoList.\n        \"\"\"\n        pass\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Provides context data to the tasks template.\n        \"\"\"\n        pass\n\n    def post(self, request, *args, **kwargs):\n        \"\"\"\n        Handles the post request to create a new TodoItem.\n        \"\"\"\n        pass\n\n\ndef delete_todo_item(request, pk):\n    \"\"\"\n    Deletes a TodoItem based on the provided primary key.\n    \"\"\"\n    pass\n\n\ndef edit_todo_item(request, pk):\n    \"\"\"\n    Edits a TodoItem based on the provided primary key.\n    \"\"\"\n    pass\n\n\ndef complete_todo_item(request, pk):\n    \"\"\"\n    Toggles the completion status of a TodoItem.\n    \"\"\"\n    pass\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_queryset(self):\n        \"\"\"\n        Returns all TodoItems for analysis.\n        \"\"\"\n        pass\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Prepares task completion and distribution data for the analysis view.\n        \"\"\"\n        pass\n"
        },
        {
            "file": "0001_initial.py",
            "path": "example_app/migrations/0001_initial.py",
            "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "analysis.html",
            "path": "example_app/templates/analysis.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <!-- \u5f15\u5165 Chart.js -->\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <!-- The body contains the task analysis charts and a return home link. -->\n</body>\n</html>\n"
        },
        {
            "file": "edit_todo.html",
            "path": "example_app/templates/edit_todo.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <!-- The body contains a form for editing a Todo List. -->\n</body>\n</html>\n"
        },
        {
            "file": "edit_todo_item.html",
            "path": "example_app/templates/edit_todo_item.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <!-- The body contains a form for editing a Todo Item. -->\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <!-- The body contains a welcome message and navigation links. -->\n</body>\n</html>\n"
        },
        {
            "file": "tasks.html",
            "path": "example_app/templates/tasks.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <!-- The body contains a list of tasks and a form to add new tasks. -->\n</body>\n</html>\n"
        },
        {
            "file": "todo_list.html",
            "path": "example_app/templates/todo_list.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n</head>\n<body>\n    <!-- The body contains a list of todo lists and a form to add new lists. -->\n</body>\n</html>\n"
        },
        {
            "file": "settings.py",
            "path": "project/settings.py",
            "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "project/urls.py",
            "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "project/wsgi.py",
            "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"
        }
    ]
}