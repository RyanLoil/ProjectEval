[
  {
    "project_id": "5",
    "project_type": "website",
    "nl_prompt": "Create a website for a Markdown&HTML convertor.",
    "framework_technical_stack": [
      {
        "language": "Python",
        "technical_stack": "Django"
      }
    ],
    "nl_checklist": [
      {
        "page": "Home",
        "required": true,
        "function": [
          {
            "function": "Welcome Message",
            "description": "Displays a welcome message to the users.",
            "required": true
          },
          {
            "function": "Introduction to Converter",
            "description": "Briefly explains the purpose of the Markdown to HTML converter.",
            "required": true
          },
          {
            "function": "Navigation Links",
            "description": "Links to other pages such as 'Convert' and 'About'.",
            "required": true
          }
        ]
      },
      {
        "page": "Convert",
        "required": true,
        "function": [
          {
            "function": "Markdown Input Area",
            "description": "Text area where users can input their Markdown text.",
            "required": true
          },
          {
            "function": "HTML Output Area",
            "description": "Section where the converted HTML output is displayed.",
            "required": true
          },
          {
            "function": "Convert Button",
            "description": "Button to initiate the conversion from Markdown to HTML.",
            "required": true
          },
          {
            "function": "Upload File",
            "description": "Option to upload a Markdown file for conversion.",
            "required": false
          },
          {
            "function": "Download HTML",
            "description": "Option to download the converted HTML as a file.",
            "required": false
          }
        ]
      },
      {
        "page": "About",
        "required": false,
        "function": [
          {
            "function": "Team Information",
            "description": "Details about the team or individual who developed the converter.",
            "required": false
          },
          {
            "function": "FAQ Section",
            "description": "Frequently asked questions about the converter.",
            "required": false
          }
        ]
      }
    ],
    "testcode": [
      {
        "page": "Home",
        "function": [
          {
            "function": "Welcome Message",
            "test": "def test_welcome_message(driver, test_url):\r\n\t    driver.get(test_url)\r\n\t    assert 'Welcome' in driver.page_source",
            "parameter": [
              {
                "name": "test_url",
                "description": "the url for test"
              }
            ]
          },
          {
            "function": "Introduction to Converter",
            "test": "def test_intro_to_converter(driver, test_url, introduction_id):\r\n\t    driver.get(test_url)\r\n\t    introduction = driver.find_element(By.ID, introduction_id)\r\n\t    assert 'Markdown to HTML converter' in driver.page_source",
            "parameter": [
              {
                "name": "test_url",
                "description": "the url for test"
              },
              {
                "name": "introduction_id",
                "description": "the ID of the introduction element"
              }
            ]
          },
          {
            "function": "Navigation Links",
            "test": "def test_navigation_links(driver, test_url, convert_link_id, expected_url):\r\n\t    driver.get(test_url)\r\n\t    links = driver.find_elements(By.TAG_NAME, 'a')\r\n\t    assert any('Convert' in link.text for link in links)\r\n\t    assert any('About' in link.text for link in links)\r\n\t    convert_link = driver.find_element(By.ID, convert_link_id)\r\n\t    convert_link.click()\r\n\t    assert driver.current_url == expected_url\r\n",
            "parameter": [
              {
                "name": "test_url",
                "description": "the url for test"
              },
              {
                "name": "convert_link_id",
                "description": "the ID of the convert link"
              },
              {
                "name": "expected_url",
                "description": "the expected URL after clicking the link"
              }
            ]
          }
        ]
      },
      {
        "page": "Convert",
        "function": [
          {
            "function": "Markdown Input Area",
            "test": "def test_markdown_input_area(driver, test_url, markdown_input_id):\r\n\t    driver.get(test_url)\r\n\t    markdown_input = driver.find_element(By.ID, markdown_input_id)\r\n\t    assert markdown_input.tag_name == 'textarea'\r\n\t    markdown_input.send_keys(\"# Project Eval\\n\\n## \u65b0Benchmark\\n\\n1. \u62d3\u5145\u6570\u636e\uff0c\u5b8c\u5584benchmark\")",
            "parameter": [
              {
                "name": "test_url",
                "description": "the url for test"
              },
              {
                "name": "markdown_input_id",
                "description": "the input area component id for markdown input"
              }
            ]
          },
          {
            "function": "Convert Button",
            "test": "def test_convert_button(driver, convert_button_id):\r\n\t    convert_button = driver.find_element(By.ID, convert_button_id)\r\n\t    assert convert_button.tag_name == 'button'\r\n\t    convert_button.click()",
            "parameter": [
              {
                "name": "convert_button_id",
                "description": "the button component id to start conversion"
              }
            ]
          },
          {
            "function": "HTML Output Area",
            "test": "def test_html_output_area(driver, html_output_id):\r\n\t    html_output = driver.find_element(By.ID, html_output_id)\r\n\t    assert html_output.is_displayed()\r\n",
            "parameter": [
              {
                "name": "html_output_id",
                "description": "the output area component id for HTML output"
              }
            ]
          },
          {
            "function": "Rule Check 1",
            "test": "def test_html_output_area(driver, html_output_id):\r\n\t    html_output = driver.find_element(By.ID, html_output_id).get_attribute(\"innerHTML\")\r\n\t    assert all(tag in html_output for tag in ['h1', 'h2', 'ol', 'li'])\r\n\t    assert all(text in html_output for text in ['Project Eval','\u65b0Benchmark','\u62d3\u5145\u6570\u636e\uff0c\u5b8c\u5584benchmark'])",
            "parameter": [
              {
                "name": "html_output_id",
                "description": "the output area component id for HTML output"
              }
            ]
          },
          {
            "function": "Upload File",
            "test": "def test_upload_file(driver, test_url, upload_file_id, upload_file_btn_id):\r\n\t    driver.get(test_url)\r\n\t    upload_file_path = driver.find_element(By.ID, upload_file_id)\r\n\t    assert upload_file_path.tag_name == 'input' and upload_file_path.get_attribute('type') == 'file'\r\n\t    upload_file_path.send_keys(os.getcwd()+\"\\\\data\\\\material\\\\5-markdown-test.md\")\r\n\t    upload_file_btn = driver.find_element(By.ID, upload_file_btn_id)\r\n\t    upload_file_btn.click()",
            "parameter": [
              {
                "name": "test_url",
                "description": "the url for test"
              },
              {
                "name": "upload_file_id",
                "description": "the ID of the file upload input"
              },
              {
                "name": "upload_file_btn_id",
                "description": "the ID of the file upload button"
              }
            ]
          },
          {
            "function": "Download HTML",
            "test": "def test_download_html(driver, download_html_btn_id, default_download_path):\r\n\t    download_html_btn = driver.find_element(By.ID, download_html_btn_id)\r\n\t    assert download_html_btn.is_displayed()\r\n\t    download_html_btn.click()\r\n\t    time.sleep(1)\r\n\t    expanded_download_path = os.path.expandvars(default_download_path)\r\n\t    assert os.path.getsize(expanded_download_path) > 0\r\n",
            "parameter": [
              {
                "name": "download_html_btn_id",
                "description": "the ID of the download HTML button"
              },
              {
                "name": "default_download_path",
                "description": "the default path where the file is downloaded"
              }
            ]
          },
          {
            "function": "Rule Check 2",
            "test": "def rule_check_2(driver, default_download_path):\r\n\t    driver.get(\"about:blank\")\r\n\t    expanded_download_path = os.path.expandvars(default_download_path)\r\n\t    driver.get(expanded_download_path)\r\n\t    h1 = driver.find_element(By.CSS_SELECTOR, \"h1\")\r\n\t    assert h1.text == \"Project Eval\"\r\n\t    h2 = driver.find_element(By.CSS_SELECTOR, \"h2\")\r\n\t    assert h2.text == \"\u65b0Benchmark\"\r\n\t    li = driver.find_element(By.CSS_SELECTOR, \"li\")\r\n\t    assert li.text == \"\u62d3\u5145\u6570\u636e\uff0c\u5b8c\u5584benchmark\"",
            "parameter": [
              {
                "name": "default_download_path",
                "description": "the default path where the file is downloaded"
              }
            ]
          }
        ]
      },
      {
        "page": "About",
        "function": [
          {
            "function": "Team Information",
            "test": "def test_team_information(driver, test_url):\n\t    driver.get(test_url)\n\t    assert 'Team' in driver.page_source",
            "parameter": [
              {
                "name": "test_url",
                "description": "the url for test"
              }
            ]
          },
          {
            "function": "FAQ Section",
            "test": "def test_faq_section(driver, test_url):\n\t    driver.get(test_url)\n\t    assert 'FAQ' in driver.page_source",
            "parameter": [
              {
                "name": "test_url",
                "description": "the url for test"
              }
            ]
          }
        ]
      }
    ]
  }
]