[
    {
        "project_id": "7",
        "project_type": "website",
        "nl_prompt": "Create a website for a budget control application with a chart for tracing the changing of the balance.",
        "framework_technical_stack": [
            {
                "language": "Python",
                "technical_stack": "Django"
            }
        ],
        "nl_checklist": [
            {
                "page": "Home",
                "required": true,
                "function": [
                    {
                        "function": "View Dashboard",
                        "description": "Displays an overview of current financial status including balance, recent transactions, and alerts.",
                        "required": true
                    },
                    {
                        "function": "User Login",
                        "description": "Allows users to securely log in to access their budget control data.",
                        "required": true
                    },
                    {
                        "function": "Sign Up",
                        "description": "Enables new users to create an account.",
                        "required": false
                    },
                    {
                        "function": "View Home",
                        "description": "Displays a homepage before user login. There should be login, sign up and support link.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Balance Tracker",
                "required": true,
                "function": [
                    {
                        "function": "View Balance Chart",
                        "description": "Displays a real-time chart tracking the changes in balance over time.",
                        "required": true
                    },
                    {
                        "function": "Add Transaction",
                        "description": "Allows users to input new transactions to be factored into the balance.",
                        "required": true
                    },
                    {
                        "function": "Filter Transactions",
                        "description": "Enables users to filter transactions by date, category, or amount.",
                        "required": false
                    },
                    {
                        "function": "View Balance Structure Chart",
                        "description": "Displays a real-time chart tracking the structure in balance.",
                        "required": true
                    },
                    {
                        "function": "Edit Transaction",
                        "description": "Allows users to edit an existed transaction.",
                        "required": true
                    },
                    {
                        "function": "Delete Transaction",
                        "description": "Allows users to delete transactions.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Reports",
                "required": true,
                "function": [
                    {
                        "function": "Generate Monthly Report",
                        "description": "Creates a detailed report of the user's transactions and balance changes over the month.",
                        "required": true
                    },
                    {
                        "function": "Export Data",
                        "description": "Allows users to export their financial data in CSV format.",
                        "required": false
                    }
                ]
            },
            {
                "page": "Settings 2",
                "required": true,
                "function": [
                    {
                        "function": "Update Profile",
                        "description": "Allows users to update their personal information, preferences and password.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Help",
                "required": false,
                "function": [
                    {
                        "function": "View FAQs",
                        "description": "Displays frequently asked questions to help users understand application features and resolve common issues.",
                        "required": false
                    },
                    {
                        "function": "Contact Support",
                        "description": "Provides a way for users to reach out to customer support for assistance.",
                        "required": false
                    }
                ]
            },
            {
                "page": "Settings 1",
                "required": true,
                "function": [
                    {
                        "function": "Add Category",
                        "description": "Allows users to input a new category for the transaction. The category should be customizable by the user. Examples: Travel, Management. Do NOT use a separate page to complete this function, but put it together with the list page.",
                        "required": true
                    },
                    {
                        "function": "Edit Category",
                        "description": "Allows users to edit an existed category for the transaction. The category should be customizable by the user. Examples: Travel, Management. Do NOT use a separate page to complete this function, but put it together with the list page.",
                        "required": true
                    },
                    {
                        "function": "Delete Category",
                        "description": "Allows users to delete an existed category for the transaction. Do NOT use a separate page to complete this function, but put it together with the list page.",
                        "required": true
                    },
                    {
                        "function": "List Category",
                        "description": "A page that allows users to view the existed categories for the transaction. Notice that the \"Add Category\", \"Edit Category\" and \"Delete Category\" functions are also contains in this page.",
                        "required": true
                    }
                ]
            }
        ],
        "testcode": [
            {
                "page": "Home",
                "function": [
                    {
                        "function": "View Home",
                        "test": "def test_view_dashboard(driver, test_url):\r\n\tdriver.get(test_url)\r\n\tassert \"Home\" in driver.title",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            }
                        ]
                    },
                    {
                        "function": "User Check 1",
                        "test": "def user_check(driver, test_url, username_field, password_field, login_button, invalid_message_text):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, username_field).send_keys('Test')\r\n\tdriver.find_element(By.ID, password_field).send_keys('abc12345')\r\n\tdriver.find_element(By.ID, login_button).click()\r\n\tassert \"Dashboard\" not in driver.title\r\n\tsource_code = driver.page_source\r\n\tassert invalid_message_text in source_code",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for testing user login"
                            },
                            {
                                "name": "username_field",
                                "description": "the input box component id of the username"
                            },
                            {
                                "name": "password_field",
                                "description": "the input box component id of the password"
                            },
                            {
                                "name": "login_button",
                                "description": "the component id of the login button"
                            },
                            {
                                "name": "invalid_message_text",
                                "description": "the message that notifies the user of the incorrect username or password"
                            }
                        ]
                    },
                    {
                        "function": "View Dashboard 1",
                        "test": "def test_view_dashboard(driver, test_url):\r\n\tdriver.get(test_url)\r\n\tassert \"Dashboard\" not in driver.title # Not Login",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test to view Dashboard page"
                            }
                        ]
                    },
                    {
                        "function": "View Settings",
                        "test": "def test_view_settings(driver, test_url):\r\n\tdriver.get(test_url)\r\n\tassert \"Settings\" not in driver.title # Not Login",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test to view Settings page"
                            }
                        ]
                    },
                    {
                        "function": "View Chart",
                        "test": "def test_view_chart(driver, test_url):\r\n\tdriver.get(test_url)\r\n\tassert \"Charts\" not in driver.title # Not Login",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test to view Charts page"
                            }
                        ]
                    },
                    {
                        "function": "Sign Up",
                        "test": "def test_sign_up(driver, test_url, username_field, password_field, confirm_password_field, signup_button):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, username_field).send_keys('Test')\r\n\tdriver.find_element(By.ID, password_field).send_keys('abc12345')\r\n\tdriver.find_element(By.ID, confirm_password_field).send_keys('abc12345')\r\n\tdriver.find_element(By.ID, signup_button).click()\r\n\tassert \"account created\" in driver.page_source.lower()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "username_field",
                                "description": "the input box component id of the username"
                            },
                            {
                                "name": "password_field",
                                "description": "the input box component id of the password"
                            },
                            {
                                "name": "confirm_password_field",
                                "description": "the input box component id of the confirm password"
                            },
                            {
                                "name": "signup_button",
                                "description": "the component id of the sign up button"
                            }
                        ]
                    },
                    {
                        "function": "User Login",
                        "test": "def test_user_login(driver, test_url, username_field, password_field, login_button):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, username_field).send_keys('Test')\r\n\tdriver.find_element(By.ID, password_field).send_keys('abc12345')\r\n\tdriver.find_element(By.ID, login_button).click()\r\n\tassert \"dashboard\" in driver.title.lower()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "username_field",
                                "description": "the input box component id of the username"
                            },
                            {
                                "name": "password_field",
                                "description": "the input box component id of the password"
                            },
                            {
                                "name": "login_button",
                                "description": "the component id of the login button"
                            }
                        ]
                    },
                    {
                        "function": "View Dashboard 2",
                        "test": "def test_view_dashboard(driver, test_url):\r\n\tdriver.get(test_url)\r\n\tassert \"dashboard\" in driver.title.lower()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test to view Dashboard page"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Settings 1",
                "function": [
                    {
                        "function": "Add Category",
                        "test": "def test_add_category(driver, test_url, category_name_field, add_button):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, category_name_field).send_keys('Travel-Test')\r\n\tdriver.find_element(By.ID, add_button).click()\r\n\tassert 'travel-test' in driver.page_source.lower()\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, category_name_field).send_keys('Travel')\r\n\tdriver.find_element(By.ID, add_button).click()\r\n\tassert 'travel' in driver.page_source.lower()\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, category_name_field).send_keys('Material')\r\n\tdriver.find_element(By.ID, add_button).click()\r\n\tassert 'material' in driver.page_source.lower()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "add_button",
                                "description": "the component id of the add button"
                            },
                            {
                                "name": "category_name_field",
                                "description": "the input box component id of the category name"
                            }
                        ]
                    },
                    {
                        "function": "Edit Category",
                        "test": "def test_edit_category(driver, test_url, edit_button_class_name, category_field_class_name):\r\n\tdriver.get(test_url)\r\n\ttag = driver.find_element(By.XPATH, \"//*[contains(text(),'Travel-Test') or @value='Travel-Test']\")\r\n\tfield = tag.find_element(By.CLASS_NAME, category_field_class_name)\r\n\tfield.clear()\r\n\tfield.send_keys('Travel-Delete')\r\n\tbutton = tag.find_element(By.CLASS_NAME, edit_button_class_name)\r\n\tbutton.click()\r\n\tassert 'travel-delete' in driver.page_source.lower()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "edit_button_class_name",
                                "description": "the component class name of the edit button"
                            },
                            {
                                "name": "category_field_class_name",
                                "description": "the input box component class name of the category"
                            }
                        ]
                    },
                    {
                        "function": "Delete Category",
                        "test": "def test_delete_category(driver, test_url, delete_button_class_name):\r\n\tdriver.get(test_url)\r\n\ttag = driver.find_element(By.XPATH, \"//*[contains(text(),'Travel-Delete') or @value='Travel-Delete']\")\r\n\ttag.find_element(By.CLASS_NAME, delete_button_class_name).click()\r\n\tassert 'travel-delete'  not in driver.page_source.lower()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "delete_button_class_name",
                                "description": "the component class name of the delete button"
                            }
                        ]
                    },
                    {
                        "function": "List Category",
                        "test": "def list_category_test(driver, test_url):\r\n\tdriver.get(test_url)\r\n\tassert 'travel' in driver.page_source.lower()\r\n\tassert 'material' in driver.page_source.lower()\r\n\tassert 'travel-test' not in driver.page_source.lower()\r\n\tassert 'travel-delete' not in driver.page_source.lower()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test where the categories can be listed"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Balance Tracker",
                "function": [
                    {
                        "function": "Add Transaction",
                        "test": "def test_add_transaction(driver, test_url, description_field, amount_field, category_field, date_field, submit_button):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, description_field).send_keys(\"Travel to London\")\r\n\tdriver.find_element(By.ID, amount_field).send_keys(\"12345\")\r\n\tdriver.find_element(By.ID, category_field).send_keys(\"Travel\")\r\n\tdriver.find_element(By.ID, date_field).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-01\")\r\n\tdriver.find_element(By.ID, submit_button).click()\r\n\tassert \"12345\" in driver.page_source and \"Travel to London\" in driver.page_source, \"No result detected. Notice that the test case uses yyyy-mm-dd as date format.\"\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, description_field).send_keys(\"Buy Coffee\")\r\n\tdriver.find_element(By.ID, amount_field).send_keys(\"67890\")\r\n\tdriver.find_element(By.ID, category_field).send_keys(\"Material\")\r\n\tdriver.find_element(By.ID, date_field).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-02\")\r\n\tdriver.find_element(By.ID, submit_button).click()\r\n\tassert \"67890\" in driver.page_source and \"Buy Coffee\" in driver.page_source, \"No result detected. Notice that the test case uses yyyy-mm-dd as date format.\"\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, description_field).send_keys(\"Test\")\r\n\tdriver.find_element(By.ID, amount_field).send_keys(\"5040\")\r\n\tdriver.find_element(By.ID, category_field).send_keys(\"Travel\")\r\n\tdriver.find_element(By.ID, date_field).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-03\")\r\n\tdriver.find_element(By.ID, submit_button).click()\r\n\tassert \"5040\" in driver.page_source and \"Test\" in driver.page_source, \"No result detected. Notice that the test case uses yyyy-mm-dd as date format.\"",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "amount_field",
                                "description": "the input box component id of the amount"
                            },
                            {
                                "name": "category_field",
                                "description": "the input box component id of the category"
                            },
                            {
                                "name": "submit_button",
                                "description": "the component id of the submit button"
                            },
                            {
                                "name": "date_field",
                                "description": "the input box component id of the date"
                            },
                            {
                                "name": "description_field",
                                "description": "the input box component id of the description"
                            }
                        ]
                    },
                    {
                        "function": "Edit Transaction",
                        "test": "def test_edit_transaction(driver, test_url, edit_button_class_name, category_field_class_name, description_field_name):\r\n\tdriver.get(test_url)\r\n\ttag = driver.find_element(By.XPATH, \"//*[contains(text(),'Test') or @value='Test']\")\r\n\ttag = utils.selenium_find_minimum_ancestor(driver, tag, By.CLASS_NAME, edit_button_class_name)\r\n\tfield = tag.find_element(By.CLASS_NAME, description_field_name)\r\n\tfield.clear()\r\n\tfield.send_keys('Test-Delete')\r\n\tfield = tag.find_element(By.CLASS_NAME, category_field_class_name)\r\n\tfield.send_keys('Material')\r\n\tbutton = tag.find_element(By.CLASS_NAME, edit_button_class_name)\r\n\tbutton.click()\r\n\tassert 'Test-Delete' in driver.page_source, \"No result detected.\"",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "edit_button_class_name",
                                "description": "the component class name of the edit button"
                            },
                            {
                                "name": "category_field_class_name",
                                "description": "the input box component class name of the category"
                            },
                            {
                                "name": "description_field_name",
                                "description": "the input box component class name of the description"
                            }
                        ]
                    },
                    {
                        "function": "Delete Transaction",
                        "test": "def test_delete_transaction(driver, test_url, delete_button_class_name):\r\n\tdriver.get(test_url)\r\n\ttag = driver.find_element(By.XPATH, \"//*[contains(text(),'Test-Delete') or @value='Test-Delete']\")\r\n\ttag = utils.selenium_find_minimum_ancestor(driver, tag, By.CLASS_NAME, delete_button_class_name)\r\n\ttag.find_element(By.CLASS_NAME, delete_button_class_name).click()\r\n\tassert 'test-delete'  not in driver.page_source.lower(), \"No result detected.\"",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "delete_button_class_name",
                                "description": "the component class name of the delete button"
                            }
                        ]
                    },
                    {
                        "function": "Filter Transactions",
                        "test": "def test_filter_transactions(driver, test_url, start_date_field, end_date_field, filter_category_field, filter_button):\r\n\tdriver.get(test_url)\r\n\tassert \"12345\" in driver.page_source and  \"67890\" in driver.page_source, \"Wrong filter result at initial.\"\r\n\r\n\tdriver.find_element(By.ID, start_date_field).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-01\")\r\n\tdriver.find_element(By.ID, end_date_field).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-01\")\r\n\tdriver.find_element(By.ID, filter_button).click()\r\n\tassert \"12345\" in driver.page_source and  \"67890\" not in driver.page_source, \"Wrong filter result at time filter 1.\"\r\n\r\n\tdriver.find_element(By.ID, start_date_field).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-01\")\r\n\tdriver.find_element(By.ID, end_date_field).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-02\")\r\n\tdriver.find_element(By.ID, filter_button).click()\r\n\tassert \"12345\" in driver.page_source and  \"67890\" in driver.page_source, \"Wrong filter result at time filter 2.\"\r\n\r\n\tdriver.find_element(By.ID, filter_category_field).send_keys(\"Material\")\r\n\tdriver.find_element(By.ID, filter_button).click()\r\n\tassert \"12345\" not in driver.page_source and  \"67890\" in driver.page_source, \"Wrong filter result at category filter.\"\r\n\r\n\r\n\tdriver.find_element(By.ID, start_date_field).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-02\")\r\n\tdriver.find_element(By.ID, filter_category_field).send_keys(\"Travel\")\r\n\tdriver.find_element(By.ID, filter_button).click()\r\n\tassert \"Travel to London\" not in driver.page_source and  \"Buy Coffee\" not in driver.page_source, \"Wrong filter result at mixture filter.\"",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "start_date_field",
                                "description": "the input box component id of the start date"
                            },
                            {
                                "name": "end_date_field",
                                "description": "the input box component id of the end date"
                            },
                            {
                                "name": "filter_category_field",
                                "description": "the input box component id of the filter category"
                            },
                            {
                                "name": "filter_button",
                                "description": "the component id of the filter button"
                            }
                        ]
                    },
                    {
                        "function": "View Balance Chart",
                        "test": "def test_view_balance_chart(driver, test_url, balance_chart_id):\r\n\tdriver.get(test_url)\r\n\tchart_element = driver.find_element(By.ID, balance_chart_id)\r\n\tassert chart_element.is_displayed()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "balance_chart_id",
                                "description": "the chart element id"
                            }
                        ]
                    },
                    {
                        "function": "View Balance Structure Chart",
                        "test": "def test_view_balance_structure_chart(driver, test_url, balance_structure_chart_id):\r\n\tdriver.get(test_url)\r\n\tchart_element = driver.find_element(By.ID, balance_structure_chart_id)\r\n\tassert chart_element.is_displayed()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "balance_structure_chart_id",
                                "description": "the chart element id"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Reports",
                "function": [
                    {
                        "function": "Generate Monthly Report",
                        "test": "def test_generate_monthly_report(driver, test_url, generate_button):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, generate_button).click()\r\n\tassert \"80235\" in driver.page_source, \"Summary not correct\"",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "generate_button",
                                "description": "the component id of the generate button"
                            }
                        ]
                    },
                    {
                        "function": "Export Data",
                        "test": "def test_export_data(driver, test_url, export_button, default_download_path):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, export_button).click()\r\n\texpanded_download_path = os.path.expandvars(default_download_path)\r\n\ttime.sleep(1)\r\n\tfile = open(expanded_download_path, \"r\", encoding=\"utf-8\")\r\n\ttext = file.read()\r\n\tfile.close()\r\n\tassert \"12345\" in text and \"Material\" in text and \"Buy Coffee\" in text and time.strftime(\"%Y-%m\", time.localtime())+\"-01\" in text, \"Export not correct\"\r\n",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "file_format",
                                "description": "the file format for export (CSV, PDF, etc.)"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Settings 2",
                "function": [
                    {
                        "function": "Update Profile",
                        "test": "def test_update_profile(driver, test_url, name_field, email_field, new_password_field, confirm_password_field, save_button, username_field, password_field, login_button):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, name_field).clear()\r\n\tdriver.find_element(By.ID, name_field).send_keys('Edited')\r\n\tdriver.find_element(By.ID, email_field).clear()\r\n\tdriver.find_element(By.ID, email_field).send_keys('edited@example.com')\r\n\tdriver.find_element(By.ID, new_password_field).send_keys('12345abc')\r\n\tdriver.find_element(By.ID, confirm_password_field).send_keys('12345abc')\r\n\tdriver.find_element(By.ID, save_button).click()\r\n\t# There should be a logout action and redirect\r\n\tdriver.find_element(By.ID, username_field).send_keys('Edited')\r\n\tdriver.find_element(By.ID, password_field).send_keys('12345abc')\r\n\tdriver.find_element(By.ID, login_button).click()\r\n\tassert \"Dashboard\" in driver.title, 'Failed to relogin'\r\n\tdriver.get(test_url)\r\n\tassert \"edited@example.com\" in driver.page_source, 'Failed to edit profile'",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "name_field",
                                "description": "the input box component id of the name"
                            },
                            {
                                "name": "email_field",
                                "description": "the input box component id of the email"
                            },
                            {
                                "name": "save_button",
                                "description": "the component id of the save button"
                            },
                            {
                                "name": "username_field",
                                "description": "the input box component id of the username for login in login page"
                            },
                            {
                                "name": "password_field",
                                "description": "the input box component id of the password for login in login page"
                            },
                            {
                                "name": "new_password_field",
                                "description": "the input box component id of the new password"
                            },
                            {
                                "name": "confirm_password_field",
                                "description": "the input box component id of the confirm password"
                            },
                            {
                                "name": "login_button",
                                "description": "the component id of the login button for login in login page"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Help",
                "function": [
                    {
                        "function": "View FAQs",
                        "test": "def test_view_faqs(driver, test_url, faqs_id):\r\n\tdriver.get(test_url)\r\n\tfaqs_element = driver.find_element(By.ID, faqs_id)\r\n\tassert faqs_element.is_displayed()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "faqs_id",
                                "description": "the component id of FAQs"
                            }
                        ]
                    },
                    {
                        "function": "Contact Support",
                        "test": "def test_contact_support(driver, test_url, name_field, email_field, message_field, submit_button):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, name_field).send_keys(\"Test\")\r\n\tdriver.find_element(By.ID, email_field).send_keys(\"example@email.com\")\r\n\tdriver.find_element(By.ID, message_field).send_keys(\"The test content.\")\r\n\tdriver.find_element(By.ID, submit_button).click()\r\n\tassert \"The test content.\" in driver.page_source",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the URL for test"
                            },
                            {
                                "name": "name_field",
                                "description": "the input box component id of the name"
                            },
                            {
                                "name": "email_field",
                                "description": "the input box component id of the email"
                            },
                            {
                                "name": "message_field",
                                "description": "the input box component id of the message"
                            },
                            {
                                "name": "submit_button",
                                "description": "the component id of the submit button"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]