{
    "6": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(to=TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import HomeView, TodoListView, AnalysisView, delete_todo_item, edit_todo_item, TodoItemView, \\\n    delete_todo, edit_todo, complete_todo_item\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/',complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView\nfrom .models import TodoList, TodoItem\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        return context\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def get_queryset(self):\n        queryset = TodoList.objects.all()\n        for todolist in queryset:\n            flag = True\n            for todoitem in todolist.todoitem_set.all():\n                if todoitem.completed:\n                    continue\n                flag = False\n                break\n            todolist.completed = flag\n            todolist.save()\n        return queryset\n\n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\n\ndef edit_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        todo.title = title\n        todo.description = description\n        todo.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todo': todo})\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n\n    def get_queryset(self):\n        pk = self.kwargs.get('pk')\n        todolist = get_object_or_404(TodoList, pk=pk)\n        queryset = TodoItem.objects.filter(todolist=todolist)\n        return queryset\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        pk = self.kwargs.get('pk')\n        context['todolist'] = get_object_or_404(TodoList, pk=pk)\n        return context\n\n    def post(self, request, *args, **kwargs):\n        pk = request.POST.get('pk')\n        todolist = get_object_or_404(TodoList, pk=pk)\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoItem.objects.create(todolist=todolist, title=title, description=description)\n        return redirect('view_todo_item', pk=pk)\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todolist_pk)\n\n\ndef edit_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        todo_item.title = title\n        todo_item.description = description\n        todo_item.save()\n        return redirect('view_todo_item', pk=todo_item.todolist.pk)\n    return render(request, 'edit_todo_item.html', {'todo_item': todo_item})\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todolist_pk)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_queryset(self):\n        queryset = TodoItem.objects.all()\n        return queryset\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # \u793a\u4f8b\u4efb\u52a1\u6570\u636e\uff0c\u53ef\u4ee5\u4ece\u6570\u636e\u5e93\u4e2d\u52a8\u6001\u83b7\u53d6\n        tasks = [\n            {'title': obj.title, 'completed': True, 'category': obj.todolist.title} for obj in self.get_queryset()\n        ]\n\n        # \u4efb\u52a1\u5b8c\u6210\u60c5\u51b5\u7684\u6570\u636e\uff08\u5df2\u5b8c\u6210 vs \u672a\u5b8c\u6210\uff09\n        completed_count = sum(1 for task in tasks if task['completed'])\n        not_completed_count = len(tasks) - completed_count\n        task_completion_data = {\n            'labels': ['Completed', 'Not Completed'],\n            'data': [completed_count, not_completed_count]\n        }\n\n        # \u4efb\u52a1\u7c7b\u522b\u5206\u5e03\u7684\u6570\u636e\n        category_distribution = {}\n        for task in tasks:\n            category = task['category']\n            if category not in category_distribution:\n                category_distribution[category] = 0\n            category_distribution[category] += 1\n\n        task_distribution_data = {\n            'labels': list(category_distribution.keys()),\n            'data': list(category_distribution.values())\n        }\n\n        # \u5c06\u6570\u636e\u4f20\u9012\u5230\u6a21\u677f\u4e0a\u4e0b\u6587\u4e2d\n        context['task_completion_data'] = task_completion_data\n        context['task_distribution_data'] = task_distribution_data\n\n        return context\n"
        },
        {
            "file": "0001_initial.py",
            "path": "example_app/migrations/0001_initial.py",
            "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "analysis.html",
            "path": "example_app/templates/analysis.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <!-- \u5f15\u5165 Chart.js -->\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n\n    <h1>Task Analysis</h1>\n\n    <!-- \u4efb\u52a1\u5b8c\u6210\u60c5\u51b5\u56fe\u8868 -->\n    <div>\n        <h2>Task Completion Chart</h2>\n        <canvas id=\"taskCompletionChart\"></canvas>\n    </div>\n\n    <!-- \u4efb\u52a1\u5206\u5e03\u56fe\u8868 -->\n    <div>\n        <h2>Task Distribution Chart</h2>\n        <canvas id=\"taskDistributionChart\"></canvas>\n    </div>\n\n    <script>\n        // \u4efb\u52a1\u5b8c\u6210\u60c5\u51b5\u56fe\u8868\uff08\u997c\u56fe\uff09\n        var ctx1 = document.getElementById('taskCompletionChart').getContext('2d');\n        var taskCompletionChart = new Chart(ctx1, {\n            type: 'pie',\n            data: {\n                labels: {{ task_completion_data.labels|safe }},  // \u6807\u7b7e\uff1a\u5df2\u5b8c\u6210\u548c\u672a\u5b8c\u6210\n                datasets: [{\n                    data: {{ task_completion_data.data|safe }},   // \u6570\u636e\uff1a\u4efb\u52a1\u5b8c\u6210\u60c5\u51b5\n                    backgroundColor: ['#36a2eb', '#ff6384'],      // \u989c\u8272\u8bbe\u7f6e\n                    borderColor: '#fff',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                plugins: {\n                    legend: {\n                        position: 'top',\n                    }\n                }\n            }\n        });\n\n        // \u4efb\u52a1\u5206\u5e03\u56fe\u8868\uff08\u6761\u5f62\u56fe\uff09\n        var ctx2 = document.getElementById('taskDistributionChart').getContext('2d');\n        var taskDistributionChart = new Chart(ctx2, {\n            type: 'bar',\n            data: {\n                labels: {{ task_distribution_data.labels|safe }},  // \u5404\u4efb\u52a1\u7c7b\u522b\u6807\u7b7e\n                datasets: [{\n                    label: 'Task Distribution by Category',\n                    data: {{ task_distribution_data.data|safe }},  // \u5404\u7c7b\u522b\u7684\u4efb\u52a1\u6570\u91cf\n                    backgroundColor: '#4bc0c0',                     // \u6761\u5f62\u989c\u8272\n                    borderColor: '#fff',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                }\n            }\n        });\n    </script>\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>\n"
        },
        {
            "file": "edit_todo.html",
            "path": "example_app/templates/edit_todo.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <h1>Edit Todo List</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo.title }}\" required>\n        <label for=\"description\">Description:</label>\n        <textarea id=\"description\" name=\"description\">{{ todo.description }}</textarea>\n        <button type=\"submit\" id=\"submit\">Save Changes</button>\n    </form>\n    <a href=\"{% url 'todo_list' %}\">Back</a>\n</body>\n</html>"
        },
        {
            "file": "edit_todo_item.html",
            "path": "example_app/templates/edit_todo_item.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <h1>Edit Todo Item</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo_item.title }}\" required>\n        <label for=\"description\">Description:</label>\n        <textarea id=\"description\" name=\"description\">{{ todo_item.description }}</textarea>\n        <button type=\"submit\" id=\"submit\">Save Changes</button>\n    </form>\n</body>\n</html>"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Home Page</h1>\n    <p>This is the welcome message and overview.</p>\n    <a href=\"/todos/\" id=\"navigate-todo-lists\">View Todo List</a>\n    <a href=\"/analysis/\" id=\"dashboard-link\">View Analysis</a>\n</body>\n</html>"
        },
        {
            "file": "tasks.html",
            "path": "example_app/templates/tasks.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n<h1>Todo List {{ todolist.title }}</h1>\n<ul>\n    {% for item in object_list %}\n    <li class=\"task{% if item.completed %} completed {% endif %}\">\n        {{ item.title }} - {{ item.description }}{% if item.completed %} - completed {% endif %}\n        <a href=\"{% url 'edit_todo_item' item.id %}\">\n            <button class=\"edit-todo-item\">Edit</button>\n        </a>\n        <a href=\"{% url 'delete_todo_item' item.id %}\">\n            <button class=\"delete-todo-item\">Delete</button>\n        </a>\n        <a href=\"{% url 'complete_todo_item' item.id %}\">\n           <button class=\"complete-todo-item\">Complete</button>\n        </a>\n    </li>\n    {% endfor %}\n</ul>\n<form method=\"post\">\n    {% csrf_token %}\n    <input type=\"hidden\" id=\"pk\" name=\"pk\" value=\"{{ todolist.pk }}\">\n    <label for=\"title\">Title:</label>\n    <input type=\"text\" id=\"title\" name=\"title\" required>\n    <label for=\"description\">Description:</label>\n    <textarea id=\"description\" name=\"description\"></textarea>\n    <button type=\"submit\" id=\"submit\">Add Todo</button>\n</form>\n<a href=\"{% url 'view_todo_item' todolist.pk %}\">Home</a>\n</body>\n</html>"
        },
        {
            "file": "todo_list.html",
            "path": "example_app/templates/todo_list.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n</head>\n<body>\n<h1>Todo List</h1>\n<ul>\n    {% for item in object_list %}\n    <li>\n        {{ item.title }} - {{ item.description }}\n        <a href=\"{% url 'view_todo_item' item.id %}\">\n            <button class=\"todo-list-selector\">View</button>\n        </a>\n        <a href=\"{% url 'edit_todo' item.id %}\">\n            <button class=\"todo-list-edit\">Edit</button>\n        </a>\n        <a href=\"{% url 'delete_todo' item.id %}\">\n            <button class=\"todo-list-delete\">Delete</button>\n        </a>\n    </li>\n    {% endfor %}\n</ul>\n<form method=\"post\">\n    {% csrf_token %}\n    <label for=\"title\">Title:</label>\n    <input type=\"text\" id=\"title\" name=\"title\" required>\n    <label for=\"description\">Description:</label>\n    <textarea id=\"description\" name=\"description\"></textarea>\n    <button type=\"submit\" id=\"submit\">Add Todo</button>\n</form>\n<a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"
        },
        {
            "file": "settings.py",
            "path": "project/settings.py",
            "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"
        },
        {
            "file": "urls.py",
            "path": "project/urls.py",
            "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "project/wsgi.py",
            "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"
        }
    ]
}