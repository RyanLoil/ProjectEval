{
    "7": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"transactions_user\")\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"support_request_user\")\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Support request from {self.name} ({self.email})\"\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom .views import *\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('signup/', SignupView.as_view(), name='signup'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('dashboard/', DashboardView.as_view(), name='dashboard'),\n    path('charts/', ChartsView.as_view(), name='charts'),\n    path('settings/', SettingsView.as_view(), name='settings'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('download_report/', DownloadReportView.as_view(), name='download_report'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "import csv\nfrom datetime import datetime\n\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db import models\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse, HttpRequest\nfrom django.utils.timezone import now\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, update_session_auth_hash, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\n\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    login_url = 'login'\n\n\nclass HomeView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'home.html')\n\n\nclass LoginView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'login.html')\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('dashboard')\n        else:\n            messages.error(request, 'Invalid credentials')\n            return redirect('login')\n\n\nclass SignupView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'signup.html')\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        confirm_password = request.POST.get('confirm_password')\n        if password != confirm_password:\n            messages.error(request, 'Passwords do not match')\n            return redirect('signup')\n        email = request.POST.get('email')\n        if not User.objects.filter(username=username).exists():\n            user = User.objects.create_user(username=username, password=password, email=email)\n            user.save()\n            messages.success(request, 'Account created successfully')\n            return redirect('login')\n        else:\n            messages.error(request, 'Username already exists')\n            return redirect('signup')\n\n\nclass LogoutView(LoginRequiredView):\n    def get(self, request):\n        logout(request)  # Logs out the user\n        messages.success(request, \"You have been logged out successfully.\")\n        return redirect('login')  # Redirect to login page after logging out\n\n\nclass DashboardView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        transactions = Transaction.objects.filter(user=request.user)\n        categories = Category.objects.all()\n        try:\n            # Filter\n            start_date = request.GET.get('start_date')\n            end_date = request.GET.get('end_date')\n            category = request.GET.get('filter_category')\n            try:\n                category = Category.objects.get(name=category)\n            except Category.DoesNotExist:\n                pass\n            filtered_flag = True\n            transactions_condition = {\n                'date__gte': start_date,\n                'date__lte': end_date,\n                'category': category,\n            }\n            for key in list(transactions_condition.keys()):\n                if not transactions_condition[key]:\n                    del transactions_condition[key]\n            if transactions_condition:\n                transactions = transactions.filter(**transactions_condition)\n        except:\n            # Not a filtered data\n            filtered_flag = False\n            category = None\n\n        return render(request, 'dashboard.html',\n                      {'transactions': transactions, 'categories': categories,\n                       'category': category if category else None,\n                       'filtered_flag': True if filtered_flag else False})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        action = request.POST.get('action')\n        if action == 'add':\n            # Add transaction logic\n            amount = request.POST.get('amount')\n            description = request.POST.get('description')\n            category_id = request.POST.get('category')\n            date = request.POST.get('date')\n\n            if amount and description and date:\n                category = Category.objects.get(id=category_id)\n                Transaction.objects.create(\n                    user=request.user,\n                    amount=amount,\n                    description=description,\n                    category=category,\n                    date=date  # Saving the date field\n                )\n                messages.success(request, 'Transaction added successfully')\n            else:\n                messages.error(request, 'All fields are required')\n        elif action == 'edit':\n            # Edit transaction logic\n            if 'delete_transaction' in request.POST:\n                transaction_id = request.POST.get('delete_transaction')\n                transaction = get_object_or_404(Transaction, id=transaction_id, user=request.user)\n                transaction.delete()\n                messages.success(request, 'Transaction deleted successfully')\n                return redirect('dashboard')  # \u91cd\u5b9a\u5411\u5230\u4ea4\u6613\u5217\u8868\u6216\u76f8\u5173\u9875\u9762\n\n            transaction_id = request.POST.get('edit_transaction')\n            amount = request.POST.get('amount_' + transaction_id)\n            description = request.POST.get('description_' + transaction_id)\n            category_id = request.POST.get('category_' + transaction_id)\n            date = request.POST.get('date_' + transaction_id)\n\n            try:\n                transaction = Transaction.objects.get(id=transaction_id, user=request.user)\n                transaction.amount = amount\n                transaction.description = description\n                transaction.category = Category.objects.get(id=category_id)\n                transaction.date = date  # Updating the date field\n                transaction.save()\n                messages.success(request, 'Transaction updated successfully')\n            except Transaction.DoesNotExist:\n                messages.error(request, 'Transaction not found')\n        else:\n            messages.error(request, 'Invalid action')\n\n        return redirect('dashboard')\n\n\nclass ChartsView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        # Fetch transactions for the current user\n        transactions = Transaction.objects.filter(user=request.user).order_by('date')\n\n        # Prepare data for the \"Transactions Over Time\" chart\n        time_labels = [transaction.date.strftime('%Y-%m-%d') for transaction in transactions]\n        time_data = [float(transaction.amount) for transaction in transactions]\n\n        # Prepare data for the \"Category Structure\" chart\n        categories = Category.objects.all()\n        category_totals = {category.name: 0 for category in categories}\n\n        for transaction in transactions:\n            if transaction.category:\n                category_totals[transaction.category.name] += float(transaction.amount)\n\n        structure_labels = list(category_totals.keys())\n        structure_data = list(category_totals.values())\n\n        # Pass data to the template\n        return render(request, 'charts.html', {\n            'time_labels': time_labels,\n            'time_data': time_data,\n            'structure_labels': structure_labels,\n            'structure_data': structure_data,\n        })\n\n\nclass SettingsView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        categories = Category.objects.all()  # Fetch all categories\n        return render(request, 'settings.html', {'categories': categories})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        action = request.POST.get('action')\n\n        if action == 'update_profile':\n            # Update profile logic\n            name = request.POST.get('name')\n            email = request.POST.get('email')\n            new_password = request.POST.get('new_password')\n            confirm_password = request.POST.get('confirm_password')\n            password_flag = False\n            # Validate email and name\n            if not email:\n                messages.error(request, 'Email cannot be empty')\n            else:\n                request.user.email = email\n\n            if not name:\n                messages.error(request, 'Name cannot be empty')\n            else:\n                request.user.username = name\n\n            # Validate passwords\n            if new_password and confirm_password:\n                if new_password != confirm_password:\n                    messages.error(request, 'Passwords do not match')\n                else:\n                    request.user.set_password(new_password)\n                    password_flag = True\n            elif new_password or confirm_password:\n                messages.error(request, 'Both password fields must be filled out')\n\n            # Save changes if no errors\n            if not messages.get_messages(request):  # Ensure no errors exist\n                request.user.save()\n                messages.success(request, 'Profile updated successfully')\n            if password_flag:\n                logout(request)\n                redirect('login')\n            return redirect('settings')\n\n        elif action == 'add_category':\n            # Add new category logic\n            category_name = request.POST.get('category_name')\n            if category_name:\n                Category.objects.create(name=category_name)\n                messages.success(request, f'Category \"{category_name}\" added successfully.')\n            else:\n                messages.error(request, 'Category name cannot be empty')\n\n        elif action == 'edit_category':\n            # Edit existing category logic\n            category_id = request.POST.get('category_id')\n            new_name = request.POST.get('new_category_name')\n            try:\n                category = Category.objects.get(id=category_id)\n                if new_name:\n                    category.name = new_name\n                    category.save()\n                    messages.success(request, f'Category updated to \"{new_name}\".')\n                else:\n                    messages.error(request, 'New category name cannot be empty.')\n            except Category.DoesNotExist:\n                messages.error(request, 'Category does not exist.')\n\n        elif action == 'delete_category':\n            # Delete category logic\n            category_id = request.POST.get('category_id')\n            try:\n                category = Category.objects.get(id=category_id)\n                category.delete()\n                messages.success(request, 'Category deleted successfully.')\n            except Category.DoesNotExist:\n                messages.error(request, 'Category does not exist.')\n\n        else:\n            messages.error(request, 'Invalid action')\n\n        return redirect('settings')\n\n\nclass SupportView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        records = SupportRequest.objects.filter(user=request.user)\n        return render(request, 'support.html', {'records': records})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n\n        if name and email and message:\n            support_request = SupportRequest.objects.create(user=request.user, name=name, email=email, message=message)\n            support_request.save()\n            messages.success(request, 'Support Request Sent')\n            return redirect('support')  # Redirect to support page after submission\n        else:\n            messages.error(request, 'All fields are required.')\n            return redirect('support')\n\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request: HttpRequest) -> HttpResponse:\n        report_type = request.POST.get('report_type', 'full')\n\n        # Fetch all transactions for the full report or filter for the monthly report\n        if report_type == 'monthly':\n            current_month = datetime.now().month\n            transactions = Transaction.objects.filter(user=request.user, date__month=current_month)\n            categories = Category.objects.all()\n            reports = []\n            for category in categories:\n                total_amount = transactions.filter(category=category).aggregate(total=models.Sum('amount'))[\n                                   'total'] or 0\n                reports.append({\n                    'category': category.name,\n                    'total_amount': total_amount\n                })\n            reports.append(\n                {'category': 'Total', 'total_amount': transactions.aggregate(total=models.Sum('amount'))['total']})\n            return render(request, 'dashboard.html',\n                          {'transactions': transactions, 'categories': categories, 'reports': reports})\n        else:\n            transactions = Transaction.objects.filter(user=request.user)\n            filename = \"financial_report.csv\"\n\n        # Create the HttpResponse object for the CSV file\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n\n        writer = csv.writer(response)\n        writer.writerow(['Date', 'Category', 'Description', 'Amount'])\n\n        # Write transaction data to CSV\n        for transaction in transactions:\n            writer.writerow([transaction.date, transaction.category.name, transaction.description, transaction.amount])\n\n        return response\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "charts.html",
            "path": "example_app/templates/charts.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <header>\n        <h1>Transaction Charts</h1>\n    </header>\n\n    <main>\n        <section>\n            <h2>Transactions Over Time</h2>\n            <p>This chart shows your transaction amounts over time:</p>\n            <canvas id=\"timeChart\"></canvas> <!-- Chart.js canvas for time-based chart -->\n        </section>\n\n        <section>\n            <h2>Category Structure</h2>\n            <p>This chart shows the distribution of your transactions by category:</p>\n            <canvas id=\"structureChart\"></canvas> <!-- Chart.js canvas for category structure chart -->\n        </section>\n    </main>\n\n    <footer>\n        <p>&copy; 2024 Your Company Name. All rights reserved.</p>\n    </footer>\n\n    <script>\n        // Time-based chart data\n        const timeLabels = {{ time_labels|safe }};\n        const timeData = {{ time_data|safe }};\n\n        const ctxTime = document.getElementById('timeChart').getContext('2d');\n        const timeChart = new Chart(ctxTime, {\n            type: 'line',\n            data: {\n                labels: timeLabels,\n                datasets: [{\n                    label: 'Transaction Amounts Over Time',\n                    data: timeData,\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    fill: true,\n                    tension: 0.1\n                }]\n            },\n            options: {\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Date'\n                        }\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Amount'\n                        }\n                    }\n                }\n            }\n        });\n\n        // Category structure chart data\n        const structureLabels = {{ structure_labels|safe }};\n        const structureData = {{ structure_data|safe }};\n\n        const ctxStructure = document.getElementById('structureChart').getContext('2d');\n        const structureChart = new Chart(ctxStructure, {\n            type: 'doughnut',\n            data: {\n                labels: structureLabels,\n                datasets: [{\n                    label: 'Category Distribution',\n                    data: structureData,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                plugins: {\n                    legend: {\n                        position: 'top',\n                    },\n                }\n            }\n        });\n    </script>\n    <a href=\"{% url 'dashboard' %}\"><button>Return</button></a>\n</body>\n</html>\n"
        },
        {
            "file": "dashboard.html",
            "path": "example_app/templates/dashboard.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n<header>\n    <h1>Dashboard</h1>\n    <nav>\n        <ul>\n            <li><a href=\"{% url 'charts' %}\">View Charts</a></li>\n            <li><a href=\"{% url 'settings' %}\">Settings</a></li>\n            <li><a href=\"{% url 'support' %}\">Support</a></li>\n            <li><a href=\"{% url 'logout' %}\">Logout</a></li>\n        </ul>\n    </nav>\n    {% if messages %}\n    <ul>\n        {% for message in messages %}\n        <li>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</header>\n\n<main>\n    <section>\n        <h2>Manage Your Transactions</h2>\n        <p>Use the options below to manage your transactions:</p>\n\n        <!-- Add Transaction Form -->\n        <h3>Add Transaction</h3>\n        <form method=\"post\" action=\"{% url 'dashboard' %}\">\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"action\" value=\"add\">\n            <label for=\"description\">Transaction Name:</label>\n            <input type=\"text\" id=\"description\" name=\"description\" required><br>\n\n            <label for=\"amount\">Amount:</label>\n            <input type=\"number\" id=\"amount\" name=\"amount\" required><br>\n\n            <label for=\"date\">Date:</label>\n            <input type=\"date\" id=\"date\" name=\"date\" max=\"2099-12-31\" required><br>\n\n            <label for=\"category\">Category:</label>\n            <select id=\"category\" name=\"category\" required>\n                {% for category in categories %}\n                <option value=\"{{ category.id }}\">{{ category.name }}</option>\n                {% endfor %}\n            </select><br>\n\n            <input type=\"submit\" id=\"add_translation\" value=\"Add Transaction\">\n        </form>\n    </section>\n<section>\n    <!-- Filter Form -->\n    <h3>Filter Transactions</h3>\n\n    <form method=\"get\" action=\"{% url 'dashboard' %}\">\n        {% csrf_token %}\n        {% if filtered_flag %}\n        <label for=\"start_date\">Start Date:</label>\n        <input type=\"date\" id=\"start_date\" name=\"start_date\" value=\"{{ request.GET.start_date }}\" max=\"2099-12-31\">\n\n        <label for=\"end_date\">End Date:</label>\n        <input type=\"date\" id=\"end_date\" name=\"end_date\" value=\"{{ request.GET.end_date }}\" max=\"2099-12-31\">\n\n        <label for=\"filter_category\">Category:</label>\n        <select id=\"filter_category\" name=\"filter_category\">\n            <option value=\"\">All</option>\n            {% for category in categories %}\n            <option value=\"{{ category.id }}\" {% if category.id|stringformat:\"s\" == request.GET.category %} selected {% endif %}>\n                {{ category.name }}\n            </option>\n            {% endfor %}\n        </select>\n        {% else %}\n                <label for=\"start_date\">Start Date:</label>\n        <input type=\"date\" id=\"start_date\" name=\"start_date\" max=\"2099-12-31\">\n\n        <label for=\"end_date\">End Date:</label>\n        <input type=\"date\" id=\"end_date\" name=\"end_date\" max=\"2099-12-31\">\n\n        <label for=\"filter_category\">Category:</label>\n        <select id=\"filter_category\" name=\"filter_category\">\n            <option value=\"\">All</option>\n            {% for category in categories %}\n            <option value=\"{{ category.id }}\">\n                {{ category.name }}\n            </option>\n            {% endfor %}\n        </select>\n        {% endif %}\n        <button type=\"submit\" id=\"filter\">Filter</button>\n    </form>\n</section>\n    <section>\n        <!-- Edit Transactions List -->\n        <h3>Edit Transactions</h3>\n        <form method=\"post\" action=\"{% url 'dashboard' %}\">\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"action\" value=\"edit\">\n            <table>\n                <thead>\n                <tr>\n                    <th>Description</th>\n                    <th>Amount</th>\n                    <th>Date</th>\n                    <th>Category</th>\n                    <th>Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                {% for transaction in transactions %}\n                <tr>\n                    <td><input type=\"text\" name=\"description_{{ transaction.id }}\" class=\"description-input\" value=\"{{ transaction.description }}\"\n                               required></td>\n                    <td><input type=\"number\" name=\"amount_{{ transaction.id }}\" class=\"amount-input\" value=\"{{ transaction.amount }}\"\n                               required></td>\n                    <td><input type=\"date\" name=\"date_{{ transaction.id }}\" class=\"date-input\" value=\"{{ transaction.date|date:'Y-m-d' }}\"\n                               max=\"2099-12-31\" required></td>\n                    <td>\n                        <select name=\"category_{{ transaction.id }}\" class=\"category-input\" required>\n                            {% for category in categories %}\n                            <option value=\"{{ category.id }}\" {% if category.id == transaction.category.id %} selected {% endif %}>\n                                {{ category.name }}\n                            </option>\n                            {% endfor %}\n                        </select>\n                    </td>\n                    <td>\n                        <button type=\"submit\" name=\"edit_transaction\" class=\"edit-button\" value=\"{{ transaction.id }}\">Update</button>\n                        <button type=\"submit\" name=\"delete_transaction\" class=\"delete-button\" value=\"{{ transaction.id }}\">Delete</button>\n                    </td>\n                </tr>\n                {% endfor %}\n                </tbody>\n\n            </table>\n        </form>\n    </section>\n    <section>\n        <form method=\"post\" action=\"{% url 'download_report' %}\">\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"report_type\" value=\"monthly\">\n            <input type=\"submit\" id=\"generate_monthly_report\" value=\"Generate Monthly Report\">\n        </form>\n        {% if reports %}\n        <h3>Monthly Report Summary</h3>\n        <table>\n            <thead>\n            <tr>\n                <th>Category</th>\n                <th>Total Amount</th>\n            </tr>\n            </thead>\n            <tbody>\n            {% for item in reports %}\n            <tr>\n                <td>{{ item.category }}</td>\n                <td>{{ item.total_amount }}</td>\n            </tr>\n            {% empty %}\n            <tr>\n                <td colspan=\"2\">No transactions found for this month.</td>\n            </tr>\n            {% endfor %}\n            </tbody>\n        </table>\n        {% endif %}\n    </section>\n\n    <h3>Download Full Report</h3>\n    <form method=\"post\" action=\"{% url 'download_report' %}\">\n        {% csrf_token %}\n        <input type=\"hidden\" name=\"report_type\" value=\"full\">\n        <input type=\"submit\" id=\"download_csv\" value=\"Download CSV\">\n    </form>\n</main>\n\n<footer>\n    <p>&copy; 2024 Your Company Name. All rights reserved.</p>\n</footer>\n\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n    <header>\n        <h1>Welcome to Budget Control Website</h1>\n        <nav>\n            <ul>\n                <li><a href=\"{% url 'login' %}\">Login</a></li>\n                <li><a href=\"{% url 'signup' %}\">Signup</a></li>\n                <li><a href=\"{% url 'support' %}\">Support</a></li>\n            </ul>\n        </nav>\n    </header>\n</body>\n</html>\n"
        },
        {
            "file": "login.html",
            "path": "example_app/templates/login.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <h1>Login</h1>\n    {% if messages %}\n    <ul>\n        {% for message in messages %}\n        <li>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br>\n        <button type=\"submit\" id=\"submit\">Login</button>\n    </form>\n</body>\n</html>\n"
        },
        {
            "file": "settings.html",
            "path": "example_app/templates/settings.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n\n<div class=\"container\">\n    <h1>Settings</h1>\n\n    <!-- Display Messages -->\n    {% if messages %}\n    <div class=\"messages\">\n        {% for message in messages %}\n        <div class=\"message {{ message.tags }}\">{{ message }}</div>\n        {% endfor %}\n    </div>\n    {% endif %}\n\n    <!-- Profile Update Section -->\n    <div class=\"profile-update\">\n        <h2>Update Profile</h2>\n        <form method=\"POST\">\n            {% csrf_token %}\n\n            <!-- Name Field -->\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value=\"{{ request.user.username }}\" required>\n\n            <!-- Email Field -->\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" value=\"{{ request.user.email }}\" required>\n\n            <!-- New Password Field -->\n            <label for=\"new_password\">New Password:</label>\n            <input type=\"password\" id=\"new_password\" name=\"new_password\" placeholder=\"Enter new password\">\n\n            <!-- Confirm Password Field -->\n            <label for=\"confirm_password\">Confirm Password:</label>\n            <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\" placeholder=\"Confirm new password\">\n\n            <input type=\"hidden\" name=\"action\" value=\"update_profile\">\n\n            <!-- Save Button -->\n            <button type=\"submit\" id=\"save_button\">Update</button>\n        </form>\n    </div>\n\n    <!-- Manage Categories Section -->\n    <div class=\"manage-categories\">\n        <h2>Manage Categories</h2>\n\n        <!-- Form to Add Category -->\n        <form method=\"POST\" class=\"add-category-form\">\n            {% csrf_token %}\n            <label for=\"category_name\">New Category Name:</label>\n            <input type=\"text\" id=\"category_name\" name=\"category_name\" placeholder=\"Enter new category\" required>\n            <input type=\"hidden\" name=\"action\" value=\"add_category\">\n            <button type=\"submit\" id=\"add_category_button\">Add Category</button>\n        </form>\n\n        <!-- List of Categories -->\n        <ul class=\"category-list\">\n            {% for category in categories %}\n            <li>\n                {{ category.name }}\n                <form method=\"POST\" class=\"edit-category-form\" style=\"display:inline;\">\n                    {% csrf_token %}\n                    <input type=\"hidden\" name=\"category_id\" value=\"{{ category.id }}\">\n                    <input type=\"text\" name=\"new_category_name\" placeholder=\"New Name\" class=\"category-name-input\"\n                           required>\n                    <input type=\"hidden\" name=\"action\" value=\"edit_category\">\n                    <button type=\"submit\" class=\"edit-category-button\">Edit</button>\n                </form>\n                <form method=\"POST\" class=\"delete-category-form\" style=\"display:inline;\">\n                    {% csrf_token %}\n                    <input type=\"hidden\" name=\"category_id\" value=\"{{ category.id }}\">\n                    <input type=\"hidden\" name=\"action\" value=\"delete_category\">\n                    <button type=\"submit\" class=\"delete-category-button\">Delete</button>\n                </form>\n            </li>\n            {% endfor %}\n        </ul>\n    </div>\n</div>\n<a href=\"{% url 'dashboard' %}\">\n    <button>Return</button>\n</a>\n</body>\n</html>\n"
        },
        {
            "file": "signup.html",
            "path": "example_app/templates/signup.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n    <h1>Signup</h1>\n    {% if messages %}\n    <ul>\n        {% for message in messages %}\n        <li>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br>\n        <label for=\"confirm_password\">Confirm Password:</label>\n        <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"><br>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <button type=\"submit\" id=\"submit\">Signup</button>\n    </form>\n</body>\n</html>\n"
        },
        {
            "file": "support.html",
            "path": "example_app/templates/support.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n        }\n\n        h1, h2 {\n            color: #333;\n        }\n\n        .faq {\n            margin: 20px 0;\n        }\n\n        .faq-question {\n            font-weight: bold;\n            cursor: pointer;\n            margin: 10px 0;\n        }\n\n        .faq-answer {\n            display: none;\n            margin: 5px 0 15px 0;\n            padding-left: 20px;\n            border-left: 2px solid #007bff;\n        }\n    </style>\n</head>\n<body>\n<h1>Support</h1>\n<p>Contact us for any assistance or check our FAQs.</p>\n<section class=\"faq\" id=\"faq\">\n    <h2>General Questions</h2>\n\n    <div class=\"faq-question\" onclick=\"toggleAnswer('faq1')\">\n        What is the purpose of this project?\n    </div>\n    <div id=\"faq1\" class=\"faq-answer\">\n        This project aims to provide users with a platform to manage their transactions and seek support effectively.\n    </div>\n\n    <div class=\"faq-question\" onclick=\"toggleAnswer('faq2')\">\n        How do I submit a support request?\n    </div>\n    <div id=\"faq2\" class=\"faq-answer\">\n        You can submit a support request by filling out the form on the Support page. Provide your name, email, and\n        message.\n    </div>\n\n    <div class=\"faq-question\" onclick=\"toggleAnswer('faq3')\">\n        What types of transactions can I manage?\n    </div>\n    <div id=\"faq3\" class=\"faq-answer\">\n        You can manage various types of transactions, including income and expenses, and categorize them for better\n        tracking.\n    </div>\n\n    <div class=\"faq-question\" onclick=\"toggleAnswer('faq4')\">\n        How can I view my financial reports?\n    </div>\n    <div id=\"faq4\" class=\"faq-answer\">\n        Financial reports can be viewed in the Reports section of the dashboard, where you can see insights based on\n        your transactions.\n    </div>\n    <script>\n        function toggleAnswer(id) {\n            const answer = document.getElementById(id);\n            answer.style.display = answer.style.display === 'block' ? 'none' : 'block';\n        }\n    </script>\n</section>\n<section>\n    <h2>Support Request Form</h2>\n    {% if messages %}\n    {% for message in messages %}\n    <div class=\"alert {{ message.tags }}\">{{ message }}</div>\n    {% endfor %}\n    {% endif %}\n    <form method=\"post\" action=\"{% url 'support' %}\">\n        {% csrf_token %}\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required><br>\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required><br>\n\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\" required></textarea><br>\n\n        <input type=\"submit\" value=\"Submit\" id=\"submit\">\n    </form>\n    <section>\n        <h3>Sent Requests</h3>\n        <ul>\n            {% for record in records %}\n            <li>\n                <strong>Name:</strong> {{ record.name }}<br>\n                <strong>Email:</strong> {{ record.email }}<br>\n                <strong>Message:</strong> {{ record.message }}<br>\n                <strong>Date:</strong> {{ record.submitted_at|date:\"Y-m-d H:i\" }}<br>\n            </li>\n            {% empty %}\n            <li>No requests have been sent yet.</li>\n            {% endfor %}\n        </ul>\n    </section>\n</section>\n<a href=\"{% url 'dashboard' %}\">\n    <button>Return</button>\n</a>\n</body>\n</html>\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'formatters': { #\u683c\u5f0f\u5316\u5668\n#         'standard': {\n#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'\n#             },\n#         'simple': {\n#             'format': '[%(levelname)s]> %(message)s'\n#             },\n#     },\n#     'filters': {\n#     'require_debug_true': {\n#         '()': 'django.utils.log.RequireDebugTrue',\n#         },\n#  },\n#     'handlers': {\n#         'default': {                                            # \u7528\u4e8e\u6587\u4ef6\u8f93\u51fa\n#             'level': 'DEBUG',                                    # \u8f93\u51fa\u65e5\u5fd7\u7b49\u7ea7\n#             'class': 'logging.handlers.RotatingFileHandler',    # \u65e5\u5fd7\u7c7b\u578b\n#             'filename': 'django.log',          # \u5177\u4f53\u65e5\u5fd7\u6587\u4ef6\u7684\u540d\u5b57\n#             'maxBytes': 1024 * 1024 * 2,                        # \u65e5\u5fd7\u5927\u5c0f\n#             'backupCount': 1,                                   # \u5907\u4efd\u6570\u91cf\n#             'formatter':'standard',                             # \u8f93\u51fa\u65e5\u5fd7\u683c\u5f0f\n#             'encoding': 'utf-8',                                # \u8f93\u51fa\u65e5\u5fd7\u7f16\u7801\n#         }\n#     },\n#     'loggers': {    #\u65e5\u5fd7\u5206\u914d\u5230\u54ea\u4e2ahandlers\u4e2d\n#         'django': {\n#             'handlers': ['default'],         # \u4e0a\u7ebf\u4e4b\u540e\u53ef\u4ee5\u628a'console'\u79fb\u9664\n#             'level':'DEBUG',\n#             'propagate': True,       # \u5411\u4e0d\u5411\u66f4\u9ad8\u7ea7\u522b\u7684logger\u4f20\u9012\n#         }\n#  }\n# }"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ]
}