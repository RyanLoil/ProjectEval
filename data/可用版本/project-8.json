[
    {
        "project_id": "8",
        "project_type": "website",
        "nl_prompt": "Create a website for a monthly calender application.",
        "framework_technical_stack": [
            {
                "language": "Python",
                "technical_stack": "Django"
            }
        ],
        "nl_checklist": [
            {
                "page": "Home",
                "required": true,
                "function": [
                    {
                        "function": "View Current Date",
                        "description": "Displays the current date on the homepage.",
                        "required": true
                    },
                    {
                        "function": "Quick Access to Calendar",
                        "description": "Show the calendar directly at the home page.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Calendar",
                "required": true,
                "function": [
                    {
                        "function": "View Calendar",
                        "description": "Enables viewing of the calendar in monthly format.",
                        "required": true
                    },
                    {
                        "function": "Add Event",
                        "description": "Allows users to add new events to the calendar. The page should redirect back to the home after the user adds an event.",
                        "required": true
                    },
                    {
                        "function": "Switch Month",
                        "description": "Allow users' to select the certain month of the calendar. There should be a year selector and a month selector.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Event Details",
                "required": true,
                "function": [
                    {
                        "function": "Edit Event",
                        "description": "Allows users to edit existing events.",
                        "required": true
                    },
                    {
                        "function": "Delete Event",
                        "description": "Allows users to delete events from the calendar.",
                        "required": true
                    },
                    {
                        "function": "Search Events",
                        "description": "Provides a search functionality to find specific events.",
                        "required": true
                    },
                    {
                        "function": "View Event Details",
                        "description": "Displays detailed information about a specific event.",
                        "required": true
                    },
                    {
                        "function": "List All Events",
                        "description": "A page that allow users to view all the events by a list view.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Help",
                "required": false,
                "function": [
                    {
                        "function": "FAQ",
                        "description": "Provides frequently asked questions and answers.",
                        "required": false
                    },
                    {
                        "function": "User Guide",
                        "description": "Provides a comprehensive user guide for using the calendar application.",
                        "required": false
                    }
                ]
            }
        ],
        "testcode": [
            {
                "page": "Home",
                "function": [
                    {
                        "function": "View Current Date",
                        "test": "def test_view_current_date(driver, test_url, current_date_id):\r\n\tdriver.get(test_url)\r\n\tdate = driver.find_element(By.ID, current_date_id).text\r\n\tyear = str(datetime.today().year)\r\n\tmonth = datetime.today().month\r\n\tday = str(datetime.today().day)\r\n\tassert year in date and (str(month) in date or calendar.month_name[month] in date or calendar.month_abbr[month] in date) and day in date, \"Current Date is not in the page\"",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for test"
                            },
                            {
                                "name": "current_date_id",
                                "description": "the component id of current date"
                            }
                        ]
                    },
                    {
                        "function": "Quick Access to Calendar",
                        "test": "def test_quick_access_to_calendar(driver, test_url, calendar_id):\r\n\tdriver.get(test_url)\r\n\ttry:\t\r\n\t\tdriver.find_element(By.ID, calendar_id)\r\n\texcept Exception as e:\r\n\t\traise Exception(\"Calendar not found\")",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for test"
                            },
                            {
                                "name": "calendar_id",
                                "description": "the id of calendar"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Calendar",
                "function": [
                    {
                        "function": "View Calendar",
                        "test": "def test_view_calendar(driver):\r\n\tfor i in range(7):\r\n\t\tif calendar.day_name[i] not in driver.page_source and calendar.day_abbr[i] not in driver.page_source:\r\n\t\t\traise Exception(\"Not in monthly calendar format\")",
                        "parameter": []
                    },
                    {
                        "function": "Add Event",
                        "test": "def test_add_event(driver, add_event_id, event_input_id, description_input_id, datetime_id, save_event_id):\r\n\tdriver.find_element(By.ID, add_event_id).click()\r\n\tdriver.find_element(By.ID, event_input_id).send_keys(\"Have dinner with Mike\")\r\n\tdriver.find_element(By.ID, description_input_id).send_keys(\"Take some wine too.\")\r\n\tdriver.find_element(By.ID, datetime_id).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-03-15-30\")\r\n\tdriver.find_element(By.ID, save_event_id).click()\r\n\r\n\tdriver.find_element(By.ID, add_event_id).click()\r\n\tdriver.find_element(By.ID, event_input_id).send_keys(\"Go swimming with Mary\")\r\n\tdriver.find_element(By.ID, description_input_id).send_keys(\"Don't forget the swimming suits.\")\r\n\tdriver.find_element(By.ID, datetime_id).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-07-13-00\")\r\n\tdriver.find_element(By.ID, save_event_id).click()\r\n\r\n\tdriver.find_element(By.ID, add_event_id).click()\r\n\tdriver.find_element(By.ID, event_input_id).send_keys(\"Test Event 2023\")\r\n\tdriver.find_element(By.ID, description_input_id).send_keys(\"Test\")\r\n\tdriver.find_element(By.ID, datetime_id).send_keys(time.strftime(\"2023-10-31-09-47\"))\r\n\tdriver.find_element(By.ID, save_event_id).click()\r\n\r\n\tdriver.find_element(By.ID, add_event_id).click()\r\n\tdriver.find_element(By.ID, event_input_id).send_keys(\"Test Edit\")\r\n\tdriver.find_element(By.ID, description_input_id).send_keys(\"Test 2\")\r\n\tdriver.find_element(By.ID, datetime_id).send_keys(time.strftime(\"2023-10-14-09-47\"))\r\n\tdriver.find_element(By.ID, save_event_id).click()",
                        "parameter": [
                            {
                                "name": "event_input_id",
                                "description": "the component id of the event title input"
                            },
                            {
                                "name": "add_event_id",
                                "description": "the link that on the homepage which redirect to the add event page"
                            },
                            {
                                "name": "description_input_id",
                                "description": "the component id of the event description input"
                            },
                            {
                                "name": "datetime_id",
                                "description": "the component id of the event datetime input"
                            },
                            {
                                "name": "save_event_id",
                                "description": "the component id of saving the event"
                            }
                        ]
                    },
                    {
                        "function": "Switch Month",
                        "test": "def switch_month_test(driver, year_id, month_id, switch_button_id):\r\n        year_select = ui.Select(driver.find_element(By.ID, year_id))\r\n        year_select.select_by_value(str(2023))\r\n        \r\n        month_select = ui.Select(driver.find_element(By.ID, month_id))\r\n        month_select.select_by_value(str(10))  # Convert to string for consistency\r\n\r\n        driver.find_element(By.ID, switch_button_id).click()\r\n        assert \"2023-10\" in driver.page_source and \"Test Event 2023\" in driver.page_source and \"31\" in driver.page_source, \"Wrong switch answer.\"",
                        "parameter": [
                            {
                                "name": "year_id",
                                "description": "The component id of year selector"
                            },
                            {
                                "name": "month_id",
                                "description": "The component id of month selector"
                            },
                            {
                                "name": "switch_button_id",
                                "description": "The button or component's id which can trigger the switch by click"
                            }
                        ]
                    },
                    {
                        "function": "Add Event Page Back Home",
                        "test": "def back_home_test(driver, test_url, back_button_id):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, back_button_id).click()\r\n\tassert \"Home\" in driver.title",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for the add home page"
                            },
                            {
                                "name": "back_button_id",
                                "description": "the component id of back button"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Event Details",
                "function": [
                    {
                        "function": "List All Events",
                        "test": "def list_all_events(driver, list_link_id):\r\n\tdriver.find_element(By.ID, list_link_id).click()\r\n\tassert \"Have dinner with Mike\" in driver.page_source and \"Go swimming with Mary\" in driver.page_source, \"List page worked unproperly.\"",
                        "parameter": [
                            {
                                "name": "list_link_id",
                                "description": "the link id that can go to the list event page"
                            }
                        ]
                    },
                    {
                        "function": "Edit Event",
                        "test": "def test_edit_event(driver,  edit_button_class_name, event_input_id, description_input_id, datetime_id, save_event_id):\r\n\ttry:\r\n\t\ttag = driver.find_element(By.XPATH, \"//*[contains(text(),'Test Edit') or @value='Test Edit']\")\r\n\t\ttag = utils.selenium_find_minimum_ancestor(driver, tag, By.CLASS_NAME, edit_button_class_name)\r\n\texcept Exception as e:\r\n\t\traise Exception(f\"{e}. Can't find Test Edit event, probably the Add Event test wasn't passed at all.\")\r\n\ttag.find_element(By.CLASS_NAME, edit_button_class_name).click()\r\n\ttitle = driver.find_element(By.ID, event_input_id)\r\n\ttitle.clear()\r\n\ttitle.send_keys(\"Test Delete\")\r\n\tdescription = driver.find_element(By.ID, description_input_id)\r\n\tdescription.clear()\r\n\tdescription.send_keys(\"Ready\")\r\n\tdriver.find_element(By.ID, datetime_id).send_keys(time.strftime(\"%Y-%m\", time.localtime())+\"-25 04:12\")\r\n\tdriver.find_element(By.ID, save_event_id).click()",
                        "parameter": [
                            {
                                "name": "edit_button_class_name",
                                "description": "the edit link component's class name for a certain event"
                            },
                            {
                                "name": "event_input_id",
                                "description": "the component id of the event title input"
                            },
                            {
                                "name": "description_input_id",
                                "description": "the component id of the event description input"
                            },
                            {
                                "name": "datetime_id",
                                "description": "the component id of the event datetime input"
                            },
                            {
                                "name": "save_event_id",
                                "description": "the component id of saving the event"
                            }
                        ]
                    },
                    {
                        "function": "Delete Event",
                        "test": "def test_edit_event(driver, test_url, delete_button_class_name):\r\n\tdriver.get(test_url)\r\n\ttry:\r\n\t\ttag = driver.find_element(By.XPATH, \"//*[contains(text(),'Test Delete') or @value='Test Delete']\")\r\n\t\ttag = utils.selenium_find_minimum_ancestor(driver, tag, By.CLASS_NAME, delete_button_class_name)\r\n\texcept Exception as e:\r\n\t\traise Exception(f\"{e}. Can't find Test Delete event, probably the Edit Event test wasn't passed at all.\")\r\n\ttag.find_element(By.CLASS_NAME, delete_button_class_name).click()\r\n\ttry:\r\n\t\tdriver.switch_to.alert.accept() # Preventing alart.\r\n\texcept:\r\n\t\tpass",
                        "parameter": [
                            {
                                "name": "delete_button_class_name",
                                "description": "the component class name of deleting a certain event."
                            },
                            {
                                "name": "test_url",
                                "description": "the url of list events page"
                            }
                        ]
                    },
                    {
                        "function": "Search Events",
                        "test": "def test_search_events(driver, search_input_id, search_button_id):\r\n\tsearch_box = driver.find_element(By.ID, search_input_id)\r\n\tsearch_box.send_keys(\"Test Delete\")\r\n\tsearch_button = driver.find_element(By.ID, search_button_id)\r\n\tsearch_button.click()\r\n\tassert driver.page_source.count(\"Test Delete\") < 2 and \"Ready\" not in driver.page_source, \"Delete Event test not passed, Test Delete event still in db.\"\r\n\r\n\tsearch_box = driver.find_element(By.ID, search_input_id)\r\n\tsearch_box.clear()\r\n\tsearch_box.send_keys(\"dinner\")\r\n\tsearch_button = driver.find_element(By.ID, search_button_id)\r\n\tsearch_button.click()\r\n\tassert \"Have dinner with Mike\" in driver.page_source and \"Mary\" not in driver.page_source, \"Wrong answer of searching of test 1.\"\r\n\r\n\tsearch_box = driver.find_element(By.ID, search_input_id)\r\n\tsearch_box.clear()\r\n\tsearch_box.send_keys(\"Mary\")\r\n\tsearch_button = driver.find_element(By.ID, search_button_id)\r\n\tsearch_button.click()\r\n\tassert \"Have dinner with Mike\" not in driver.page_source and \"Mary\" in driver.page_source, \"Wrong answer of searching of test 2.\"",
                        "parameter": [
                            {
                                "name": "search_input_id",
                                "description": "the component id of input box of searching function"
                            },
                            {
                                "name": "search_button_id",
                                "description": "the component id of trigger of searching function"
                            }
                        ]
                    },
                    {
                        "function": "View Event Details 1",
                        "test": "def test_view_event_details(driver, test_url, event_detail_button_class_name):\r\n\tdriver.get(test_url)\r\n\ttry:\r\n\t\tassert \"Take some wine too.\" in driver.page_source\r\n\t\treturn\r\n\texcept:\r\n\t\tpass\r\n\ttry:\r\n\t\ttag = driver.find_element(By.XPATH, \"//*[contains(text(),'Have dinner with Mike') or @value='Have dinner with Mike']\")\r\n\t\ttag = utils.selenium_find_minimum_ancestor(driver, tag, By.CLASS_NAME, event_detail_button_class_name)\r\n\texcept Exception as e:\r\n\t\traise e\r\n\ttag.find_element(By.CLASS_NAME, event_detail_button_class_name).click()\r\n\tassert \"Take some wine too.\" in driver.page_source, \"Failed to reach the detail page through list page.\"",
                        "parameter": [
                            {
                                "name": "event_detail_button_class_name",
                                "description": "the component class name of viewing details of a certain event."
                            },
                            {
                                "name": "test_url",
                                "description": "the url of list events page"
                            }
                        ]
                    },
                    {
                        "function": "View Event Details 2",
                        "test": "def test_view_event_details(driver, test_url, event_detail_button_class_name):\r\n\tdriver.get(test_url)\r\n\ttry:\r\n\t\tassert \"Take some wine too.\" in driver.page_source\r\n\t\treturn\r\n\texcept:\r\n\t\tpass\r\n\ttry:\r\n\t\ttag = driver.find_element(By.XPATH, \"//*[contains(text(),'Have dinner with Mike') or @value='Have dinner with Mike']\")\r\n\t\ttag = utils.selenium_find_minimum_ancestor(driver, tag, By.CLASS_NAME, event_detail_button_class_name)\r\n\texcept Exception as e:\r\n\t\traise e\r\n\ttag.find_element(By.CLASS_NAME, event_detail_button_class_name).click()\r\n\tassert \"Take some wine too.\" in driver.page_source, \"Failed to reach the detail page through home page.\"",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url of home"
                            },
                            {
                                "name": "event_detail_button_class_name",
                                "description": "the component class name of viewing details of a certain event."
                            }
                        ]
                    },
                    {
                        "function": "Event Detail Page Back",
                        "test": "def back_home_test(driver, test_url, back_button_id):\r\n\tdriver.get(test_url)\r\n\tdriver.find_element(By.ID, back_button_id).click()\r\n\tassert \"List\" in driver.title",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url of event details"
                            },
                            {
                                "name": "back_button_id",
                                "description": "the component id of back button"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Help",
                "function": [
                    {
                        "function": "FAQ",
                        "test": "def test_faq(driver, test_url, faq_link_id, faq_id):\r\n    driver.get(test_url)\r\n    faq_link = driver.find_element(By.ID,faq_link_id)\r\n    faq_link.click()\r\n    faq_page_title = driver.find_element(By.ID, faq_id)",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url of home"
                            },
                            {
                                "name": "faq_link_id",
                                "description": "the component id of faq in the homepage"
                            },
                            {
                                "name": "faq_id",
                                "description": "the component id of faqs"
                            }
                        ]
                    },
                    {
                        "function": "FAQs Back Home",
                        "test": "def back_home_test(driver, back_button_id):\r\n\tdriver.find_element(By.ID, back_button_id).click()\r\n\tassert \"Home\" in driver.title",
                        "parameter": [
                            {
                                "name": "back_button_id",
                                "description": "the component id of back button"
                            }
                        ]
                    },
                    {
                        "function": "User Guide",
                        "test": "def test_user_guide(driver, test_url, user_guide_link_id, user_guide_id):\r\n    driver.get(test_url)\r\n    user_guide_link = driver.find_element(By.ID, user_guide_link_id)\r\n    user_guide_link.click()\r\n    user_guide_title = driver.find_element(By.ID, user_guide_id)\r\n    assert user_guide_title is not None",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for test"
                            },
                            {
                                "name": "user_guide_link_id",
                                "description": "the component id of user guide in the homepage"
                            },
                            {
                                "name": "user_guide_id",
                                "description": "the component id of user guide"
                            }
                        ]
                    },
                    {
                        "function": "User Guide Back Home Test",
                        "test": "def back_home_test(driver, back_button_id):\r\n\tdriver.find_element(By.ID, back_button_id).click()\r\n\tassert \"Home\" in driver.title",
                        "parameter": [
                            {
                                "name": "back_button_id",
                                "description": "the component id of back button"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]