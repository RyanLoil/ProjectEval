[
    {
        "project_id": "16",
        "project_type": "console",
        "nl_prompt": "Create a batch program to read the subject list named \"Spring Semester Subjects.xlsx\", change it into a two-dimention subject table, and output into another excel file.The header of \"Spring Semester Subjects.xlsx\" is [\"#\", \"Name\", \"Weekday\", \"Time\"] which the time column have only 4 options of [\"First period\", \"Second period\", \"Third period\", \"Fourth period\"] ",
        "framework_technical_stack": [
            {
                "language": "Python",
                "technical_stack": "Openpyxl"
            }
        ],
        "nl_checklist": [
            {
                "page": "Input File Validation",
                "required": true,
                "function": [
                    {
                        "function": "CheckFileExistence",
                        "description": "Ensure that 'Spring Semester Subjects.xlsx' file exists.",
                        "required": true
                    },
                    {
                        "function": "ValidateHeaders",
                        "description": "Verify that the file headers are ['#', 'Name', 'Weekday', 'Time'].",
                        "required": true
                    },
                    {
                        "function": "ValidateTimeColumn",
                        "description": "Check if the 'Time' column contains only ['First period', 'Second period', 'Third period', 'Fourth period'].",
                        "required": true
                    },
                    {
                        "function": "ValidateDataIntegrity",
                        "description": "Ensure that all columns have the correct and complete data without any missing fields.",
                        "required": true
                    },
                    {
                        "function": "ValidateNullValue",
                        "description": "Check if there are any missing value in the table.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Data Transformation",
                "required": true,
                "function": [
                    {
                        "function": "TransformToTwoDimensionTable",
                        "description": "Convert the list of subjects into a two-dimensional table format.",
                        "required": true
                    },
                    {
                        "function": "DataMapping",
                        "description": "Map data correctly into the two-dimensional table based on weekday and time period.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Output File Creation",
                "required": true,
                "function": [
                    {
                        "function": "CreateOutputExcelFile",
                        "description": "Generate a new Excel file for the transformed two-dimensional subject table.",
                        "required": true
                    },
                    {
                        "function": "SaveTableToExcel",
                        "description": "Save the two-dimensional table data into the newly created Excel file.",
                        "required": true
                    }
                ]
            }
        ],
        "testcode": [
            {
                "page": "Input File Validation",
                "function": [
                    {
                        "function": "CheckFileExistence",
                        "test": "def test_CheckFileExistence(entry, error_message):\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tassert error_message in stdout or error_message in stderr",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when file is not exist"
                            }
                        ]
                    },
                    {
                        "function": "ValidateHeaders",
                        "test": "def test_ValidateHeaders(entry, error_message):\r\n\tsource_file_name = \"16-Spring Semester Subjects-Column Check.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Spring Semester Subjects.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Spring Semester Subjects.xlsx\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when the table's headers is not correct."
                            }
                        ]
                    },
                    {
                        "function": "ValidateNullValue",
                        "test": "def test_ValidateNullValue(entry, error_message):\r\n\tsource_file_name = \"16-Spring Semester Subjects-Data Check 1.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Spring Semester Subjects.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Spring Semester Subjects.xlsx\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when there are missing value in the table."
                            }
                        ]
                    },
                    {
                        "function": "ValidateTimeColumn",
                        "test": "def test_ValidateTimeColumn(entry, error_message):\r\n\tsource_file_name = \"16-Spring Semester Subjects-Data Check 2.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Spring Semester Subjects.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Spring Semester Subjects.xlsx\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when some values in the Time column is not correct."
                            }
                        ]
                    },
                    {
                        "function": "ValidateDataIntegrity",
                        "test": "def test_ValidateDataIntegrity(entry, error_message):\r\n\tsource_file_name = \"16-Spring Semester Subjects-Data Check 3.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Spring Semester Subjects.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Spring Semester Subjects.xlsx\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when the some values in the Weekday column is not correct."
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Data Transformation and File Output",
                "function": [
                    {
                        "function": "EmptyFileRun",
                        "test": "def test_RunEmptyProject(entry):\r\n\tsource_file_name = \"16-Spring Semester Subjects-Standard.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Spring Semester Subjects.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Spring Semester Subjects.xlsx\", source_file_name)",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            }
                        ]
                    },
                    {
                        "function": "RunProject",
                        "test": "def test_RunProject(entry):\r\n\tsource_file_name = \"16-Spring Semester Subjects-Standard.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Spring Semester Subjects.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Spring Semester Subjects.xlsx\", source_file_name)",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            }
                        ]
                    },
                    {
                        "function": "OutputFileCheck",
                        "test": "def test_OutputFileCheck():\r\n    generated_file = \"Processed Subjects Table.xlsx\"\r\n    standard_file = \"16-Processed Subjects Table-Standard.xlsx\"\r\n    try:\r\n        # Read both Excel files\r\n        generated_df = pd.read_excel(generated_file, index_col=0)\r\n        standard_df = pd.read_excel(standard_file, index_col=0)\r\n\r\n        # Ensure both DataFrames have the same shape\r\n        if generated_df.shape != standard_df.shape:\r\n            raise ValueError(f\"Error: The files have different shapes. \"\r\n                             f\"Generated: {generated_df.shape}, Standard: {standard_df.shape}\")\r\n\r\n        # Compare each cell\r\n        for row in generated_df.index:\r\n            for col in generated_df.columns:\r\n                gen_value = generated_df.at[row, col]\r\n                std_value = standard_df.at[row, col]\r\n                if pd.isna(gen_value) and pd.isna(std_value):\r\n                    continue\r\n                if gen_value != std_value:\r\n                    raise ValueError(f\"Mismatch found at cell ({row}, {col}): \"\r\n                                     f\"Generated value = '{gen_value}', Standard value = '{std_value}'\")\r\n    \r\n    except Exception as e:\r\n        raise e",
                        "parameter": []
                    }
                ]
            }
        ]
    },
    {
        "project_id": "17",
        "project_type": "console",
        "nl_prompt": "Create a batch program to read the dataset named \"Gamedata.xlsx\", and create a logistic model and output its summary in to \"Logistic.xlsx\". Notice that the dependence variable is \"result\" which should have one-period-lag process and all other columns are independence variables.",
        "framework_technical_stack": [
            {
                "language": "Python",
                "technical_stack": "Statsmodels"
            }
        ],
        "nl_checklist": [
            {
                "page": "DataPreparation",
                "required": true,
                "function": [
                    {
                        "function": "ReadDataset",
                        "description": "Load the dataset named 'Gamedata.xlsx'.",
                        "required": true
                    },
                    {
                        "function": "LagDependentVariable",
                        "description": "Apply a one-period lag to the 'result' column to use it as the dependent variable.",
                        "required": true
                    },
                    {
                        "function": "PrepareIndependentVariables",
                        "description": "Use all other columns as independent variables. Including the validation check of null value and empty table. As the user didn't mention how to deal with null value, the program should be stop when null value is found.",
                        "required": true
                    }
                ]
            },
            {
                "page": "ModelCreation",
                "required": true,
                "function": [
                    {
                        "function": "CreateLogisticModel",
                        "description": "Develop a logistic regression model using the prepared dataset.",
                        "required": true
                    },
                    {
                        "function": "GenerateModelSummary",
                        "description": "Generate a summary of the logistic model.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Output",
                "required": true,
                "function": [
                    {
                        "function": "WriteSummary",
                        "description": "Output the model summary to 'Logistic.xlsx'.",
                        "required": true
                    }
                ]
            }
        ],
        "testcode": [
            {
                "page": "Data Preparation",
                "function": [
                    {
                        "function": "CheckFileExistence",
                        "test": "def test_CheckFileExistence(entry, error_message):\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold , f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when file is not exist"
                            }
                        ]
                    },
                    {
                        "function": "ValidateNullValue",
                        "test": "def test_ValidateNullValue(entry, error_message):\r\n\tsource_file_name = \"17-Gamedata-Data Check 1.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Gamedata.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Gamedata.xlsx\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when there are missing value in the table."
                            }
                        ]
                    },
                    {
                        "function": "ValidateEmptyFile",
                        "test": "def test_ValidateEmptyFile(entry, error_message):\r\n\tsource_file_name = \"17-Gamedata-Data Check 2.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Gamedata.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Gamedata.xlsx\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when the table is empty."
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Model Creation and Output",
                "function": [
                    {
                        "function": "RunProject",
                        "test": "def test_RunProject(entry):\r\n\tsource_file_name = \"17-Gamedata-Standard.xlsx\"\r\n\tutils.rename_file(source_file_name, \"Gamedata.xlsx\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Gamedata.xlsx\", source_file_name)",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            }
                        ]
                    },
                    {
                        "function": "OutputFileCheck",
                        "test": "def test_OutputFileCheck():\r\n    file1 = \"Logistic.xlsx\"\r\n    file2 = \"17-Logistic-Standard.xlsx\" \r\n    wb1 = openpyxl.load_workbook(file1)\r\n    wb2 = openpyxl.load_workbook(file2)\r\n    \r\n    # Assuming comparison is for the first sheet in both files\r\n    sheet1 = wb1.active\r\n    sheet2 = wb2.active\r\n\r\n    # Iterate over the rows and columns of the sheets\r\n    max_row = max(sheet1.max_row, sheet2.max_row)\r\n    max_col = max(sheet1.max_column, sheet2.max_column)\r\n    counter = 0\r\n\r\n    for row in range(1, max_row + 1):\r\n        for col in range(1, max_col + 1):\r\n            cell1 = sheet1.cell(row=row, column=col).value\r\n            cell2 = sheet2.cell(row=row, column=col).value\r\n\r\n            if cell1 != cell2:\r\n                counter += 1\r\n            if counter > 5:\r\n                raise ValueError(f\"Mismatch found at cell ({row}, {col}): \"\r\n                                     f\"Generated value = '{cell1}', Standard value = '{cell2}'\")",
                        "parameter": []
                    }
                ]
            }
        ]
    },
    {
        "project_id": "18",
        "project_type": "console",
        "nl_prompt": "Create a console-base bashcrawl game using NO other third-party package but python itself.",
        "framework_technical_stack": [
            {
                "language": "Python",
                "technical_stack": "None"
            }
        ],
        "nl_checklist": [
            {
                "page": "Main Menu",
                "required": true,
                "function": [
                    {
                        "function": "Start Game",
                        "description": "Begin a new game session from the main menu.",
                        "required": true
                    },
                    {
                        "function": "Instructions",
                        "description": "Display game instructions and how to play.",
                        "required": true
                    },
                    {
                        "function": "Exit Game",
                        "description": "Exit the game from the main menu and/or in the game.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Game Environment",
                "required": true,
                "function": [
                    {
                        "function": "Move Player",
                        "description": "Move the player character into a room.",
                        "required": true
                    },
                    {
                        "function": "Look Around",
                        "description": "Inspect the current area.",
                        "required": true
                    },
                    {
                        "function": "Pick Item",
                        "description": "Pick up items found in the environment. In the bash crawl, this is automatically when the player gets into the room. Set one item in this project is enough.",
                        "required": true
                    },
                    {
                        "function": "Check Inventory",
                        "description": "Check items the player currently holds.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Game Logic",
                "required": true,
                "function": [
                    {
                        "function": "Parse Command",
                        "description": "Interpret the input commands from the player.",
                        "required": true
                    },
                    {
                        "function": "Update Game State",
                        "description": "Update the game state based on player actions and events.",
                        "required": true
                    }
                ]
            },
            {
                "page": "Help and Support",
                "required": false,
                "function": [
                    {
                        "function": "Display Help",
                        "description": "Provide in-game help and support information.",
                        "required": true
                    }
                ]
            }
        ],
        "testcode": [
            {
                "page": "Main Menu",
                "function": [
                    {
                        "function": "Welcome Message",
                        "test": "def test_help_in_main_menu(expected_output):\r\n    stdout = \"\\n\".join(_subprocess.read_output())\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player start the project."
                            }
                        ]
                    },
                    {
                        "function": "Help in Main Menu",
                        "test": "def test_help_in_main_menu(help_in_main_menu_command, expected_output):\r\n    stdout = _subprocess.send_command(help_in_main_menu_command)\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "help_in_main_menu_command",
                                "description": "the help command or selection number that at the main menu to give instructions to players."
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player input help command in the main menu"
                            }
                        ]
                    },
                    {
                        "function": "Wrong Selection Check",
                        "test": "def test_wrong_selection_check(expected_output):\r\n    # Code to test when the player input a wrong selection in the main menu\r\n    stdout = _subprocess.send_command(\"abc\")\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player input a wrong selection in the main menu"
                            }
                        ]
                    },
                    {
                        "function": "Start Game",
                        "test": "def test_start_game(start_game_command, expected_output):\r\n    # Code to test starting the game\r\n    stdout = _subprocess.send_command(start_game_command)\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "start_game_command",
                                "description": "The start game command or selection number that at the main menu to start the game."
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player start the game."
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Game",
                "function": [
                    {
                        "function": "Display Help",
                        "test": "def test_display_help(help_in_game, expected_output):\r\n    # Code to test the display help function in the game\r\n    stdout = _subprocess.send_command(help_in_game)\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "help_in_game",
                                "description": "The help command that in the main menu to give avaliable commands list to players."
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player input the help command in the game."
                            }
                        ]
                    },
                    {
                        "function": "Look Around",
                        "test": "def test_look_around(expected_output):\r\n    # Code to test the look_around function, as a Bash Crawl, the move command should be 'ls'.\r\n    stdout = _subprocess.send_command(\"ls\")\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player input the command ls"
                            }
                        ]
                    },
                    {
                        "function": "Move Player",
                        "test": "def test_move_player(direction, expected_output):\r\n    # Code to test the move_player function, as a Bash Crawl, the move command should be 'cd'.\r\n    stdout = _subprocess.send_command(\"cd \"+direction)\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "direction",
                                "description": "A destination name for moving the player into a room or someplace. Assume that the player just got into the game and did nothing."
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player input a wrong selection in the main menu"
                            }
                        ]
                    },
                    {
                        "function": "Move Back",
                        "test": "def test_move_back(expected_output):\r\n    # Code to test the move back function, as a Bash Crawl, the move command should be 'cd ..'.\r\n    stdout = _subprocess.send_command(\"cd ..\")\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player input \"cd ..\""
                            }
                        ]
                    },
                    {
                        "function": "Check Inventory 1",
                        "test": "def test_check_inventory(check_inventory_command, expected_output):\r\n    # Code to test the check_inventory function\r\n    stdout = _subprocess.send_command(check_inventory_command)\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "check_inventory_command",
                                "description": "The check-inventory command in the game."
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player does NOT get the item."
                            }
                        ]
                    },
                    {
                        "function": "Pick Item",
                        "test": "def test_pick_item(directions, expected_output):\r\n    # Code to test the pick_item function\r\n    direction_list = directions.split(\",\")\r\n    for direction in direction_list[:-1]:\r\n        _subprocess.send_command(\"cd \"+direction)\r\n    stdout = _subprocess.send_command(\"cd \"+direction_list[-1])\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "directions",
                                "description": "A path from the starting point towards the room or place which contain an item. Seperate the path by \",\". Example: \"home,living room,bedroom\""
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player picks up the item which you guide to in the parameter \"directions\"."
                            }
                        ]
                    },
                    {
                        "function": "Check Inventory 2",
                        "test": "def test_check_inventory(check_inventory_command, expected_output):\r\n    # Code to test the check_inventory function\r\n    stdout = _subprocess.send_command(check_inventory_command)\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "check_inventory_command",
                                "description": "The check-inventory command in the game."
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output AFTER the player got the item."
                            }
                        ]
                    },
                    {
                        "function": "Win the Game",
                        "test": "def test_pick_item(directions, expected_output):\r\n    # Code to test the pick_item function\r\n    direction_list = directions.split(\",\")\r\n    stdout = \"\"\r\n    for direction in direction_list:\r\n        stdout+=_subprocess.send_command(\"cd \"+direction)\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"",
                        "parameter": [
                            {
                                "name": "directions",
                                "description": "A path from the the room or place where the player just picked up an item towards victory. Seperate the path by \",\". Example: \"..,..,..,forest\""
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player wins the game."
                            }
                        ]
                    }
                ]
            },
            {
                "page": "Main Menu 2",
                "function": [
                    {
                        "function": "Exit Game",
                        "test": "def test_exit_game(exit_command, expected_output):\r\n    stdout = _subprocess.send_command(exit_command)\r\n    assert utils.string_similarity(expected_output, stdout) > threshold, f\"Answer is not matching, stdout is {expected_output}, actually out is {stdout}.\"\r\n    assert _subprocess.poll() == 0, \"The program didn't exit properly.\"",
                        "parameter": [
                            {
                                "name": "exit_command",
                                "description": "The exit game command or selection number that at the main menu to exit the game."
                            },
                            {
                                "name": "expected_output",
                                "description": "The expected output when the player exit the game."
                            }
                        ]
                    }
                ]
            }
        ]
    },
    {
        "project_id": "19",
        "project_type": "batch",
        "nl_prompt": "Create a batch program to read the dataset named \"Deathlist.csv\" and print a hitstogram depicting weekly deaths. The field name of death date is \"Date of death\".",
        "framework_technical_stack": [
            {
                "language": "Python",
                "technical_stack": "Matplotlib"
            }
        ],
        "nl_checklist": [
            {
                "page": "Batch Program",
                "required": true,
                "function": [
                    {
                        "function": "ReadDeathlistData",
                        "description": "Load and read data from the 'Deathlist.csv' file.",
                        "required": true
                    },
                    {
                        "function": "ProcessData",
                        "description": "Process the dataset to structure data appropriately for weekly analysis.",
                        "required": true
                    },
                    {
                        "function": "CalculateWeeklyDeaths",
                        "description": "Aggregate the data to calculate the number of deaths per week.",
                        "required": true
                    },
                    {
                        "function": "GenerateHistogram",
                        "description": "Create a histogram depicting the weekly deaths calculated from the dataset.",
                        "required": true
                    },
                    {
                        "function": "OutputHistogram",
                        "description": "Print or display the generated histogram to the user.",
                        "required": true
                    },
                    {
                        "function": "ValidateDataset",
                        "description": "Validate the dataset to ensure it contains the required data and format before processing.",
                        "required": false
                    }
                ]
            }
        ],
        "testcode": [
            {
                "page": "Batch Program",
                "function": [
                    {
                        "function": "CheckFileExistence",
                        "test": "def test_CheckFileExistence(entry, error_message):\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold , f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when file is not exist"
                            }
                        ]
                    },
                    {
                        "function": "ValidateHeaders",
                        "test": "def test_ValidateHeaders(entry, error_message):\r\n\tsource_file_name = \"19-Deathlist-Data Check 1.csv\"\r\n\tutils.rename_file(source_file_name, \"Deathlist.csv\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Deathlist.csv\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when file misses one or more column."
                            }
                        ]
                    },
                    {
                        "function": "ValidateEmptyFile",
                        "test": "def test_ValidateEmptyFile(entry, error_message):\r\n\tsource_file_name = \"19-Deathlist-Empty File.csv\"\r\n\tutils.rename_file(source_file_name, \"Deathlist.csv\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Deathlist.csv\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when file is empty"
                            }
                        ]
                    },
                    {
                        "function": "ValidateTimeColumn",
                        "test": "def test_ValidateTimeColumn(entry, error_message):\r\n\tsource_file_name = \"19-Deathlist-Data Check 2.csv\"\r\n\tutils.rename_file(source_file_name, \"Deathlist.csv\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Deathlist.csv\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when one or more values in the date column are not correct."
                            }
                        ]
                    },
                    {
                        "function": "ValidateNullValue",
                        "test": "def test_ValidateNullValue(entry, error_message):\r\n\tsource_file_name = \"19-Deathlist-Data Check 3.csv\"\r\n\tutils.rename_file(source_file_name, \"Deathlist.csv\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Deathlist.csv\", source_file_name)\r\n\tassert utils.string_similarity(error_message, stdout) > threshold or utils.string_similarity(error_message, stderr) > threshold, f\"Answer is not matching, stdout is {error_message}, actually out is {stdout} and {stderr}\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "error_message",
                                "description": "the error message that should be return when one or more values are missing in the file."
                            }
                        ]
                    },
                    {
                        "function": "RunProject1",
                        "test": "def test_RunProject(entry, image_name):\r\n\tsource_file_name = \"19-Deathlist-Standard 1.csv\"\r\n\treference_image_name = \"19-Standard Answer 1.png\"\r\n\tutils.rename_file(source_file_name, \"Deathlist.csv\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Deathlist.csv\", source_file_name)\r\n\tassert utils.calculate_histogram_similarity(image_name, reference_image_name), \"Image not match.\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "image_name",
                                "description": "the output image name or path"
                            }
                        ]
                    },
                    {
                        "function": "RunProject2",
                        "test": "def test_RunProject(entry, image_name):\r\n\tsource_file_name = \"19-Deathlist-Standard 2.csv\"\r\n\treference_image_name = \"19-Standard Answer 2.png\"\r\n\tutils.rename_file(source_file_name, \"Deathlist.csv\")\r\n\tstdout, stderr = utils.run_entry(entry)\r\n\tutils.rename_file(\"Deathlist.csv\", source_file_name)\r\n\tassert utils.calculate_histogram_similarity(image_name, reference_image_name), \"Image not match.\"",
                        "parameter": [
                            {
                                "name": "entry",
                                "description": "the program file's name which need to be run to achieve the target of project."
                            },
                            {
                                "name": "image_name",
                                "description": "the output image name or path"
                            }
                        ]
                    }
                ]
            }
        ]
    }
]