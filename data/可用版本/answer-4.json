{
    "4": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\n\nimport sys\n\n\n\nif __name__ == '__main__':\n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\n    try:\n\n        from django.core.management import execute_from_command_line\n\n    except ImportError as exc:\n\n        raise ImportError(\n\n            \"Couldn't import Django. Are you sure it's installed and \"\n\n            \"available on your PYTHONPATH environment variable? Did you \"\n\n            \"forget to activate a virtual environment?\"\n\n        ) from exc\n\n    execute_from_command_line(sys.argv)"
        },
        {
            "file": "apps.py",
            "path": "qr_app/apps.py",
            "code": "from django.apps import AppConfig\n\n\n\nclass QrAppConfig(AppConfig):\n\n    default_auto_field = 'django.db.models.BigAutoField'\n\n    name = 'qr_app'"
        },
        {
            "file": "tests.py",
            "path": "qr_app/tests.py",
            "code": "from django.test import TestCase\n\nfrom django.urls import reverse\n\n\n\nclass QRCodeTests(TestCase):\n\n    def test_home_page(self):\n\n        response = self.client.get(reverse('home'))\n\n        self.assertEqual(response.status_code, 200)\n\n        self.assertContains(response, 'QR Code Generator')\n\n"
        },
        {
            "file": "urls.py",
            "path": "qr_app/urls.py",
            "code": "# This file can be used to define URLs specific to the qr_app\nfrom .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "qr_app/views.py",
            "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nfrom qrcode.console_scripts import error_correction\nimport qrcode\nimport io\nimport base64\n\n\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\ndef hex_to_rgb(value):\n    \"\"\"Convert hex color to RGB tuple.\"\"\"\n    value = value.lstrip('#')  # Remove the leading '#'\n    return tuple(int(value[i:i + 2], 16) for i in (0, 2, 4))\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        try:\n            text = request.POST.get('text')\n            box_size = int(request.POST.get('box_size', 10))\n            border_size = int(request.POST.get('border_size', 1))\n            back_color = request.POST.get('back_color', '#ffffff')\n            fill_color = request.POST.get('fill_color', '#000000')\n            error_correction_rate = error_correction[request.POST.get('error_correction', \"M\")]\n\n            # Convert hex colors to RGB tuples\n            back_color_rgb = hex_to_rgb(back_color)\n            fill_color_rgb = hex_to_rgb(fill_color)\n\n            # Generate the QR code\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            # Create an image from the QR Code instance\n            img = qr.make_image(fill_color=fill_color_rgb, back_color=back_color_rgb)\n\n            # Save the image to a BytesIO object\n            img_io = io.BytesIO()\n            img.save(img_io, format='PNG')\n            img_io.seek(0)\n\n            # Encode the image to base64\n            img_base64 = base64.b64encode(img_io.getvalue()).decode()\n\n            return render(request, 'qr_app/generate.html', {'qr_code': img_base64})\n        except Exception as e:\n            return render(request, 'qr_app/generate.html', {'error_messages': [e,]})\n\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        qr_code_base64 = request.POST.get('qr_code')\n\n        # Decode the base64 QR code image\n        img_data = base64.b64decode(qr_code_base64)\n\n        # Create a response with the image\n        response = HttpResponse(img_data, content_type='image/png')\n        response['Content-Disposition'] = 'attachment; filename=\"qr_code.png\"'\n        return response\n\n    return HttpResponse(\"Invalid request\", status=400)\n\n\ndef about(request):\n    return render(request, 'qr_app/about.html')\n"
        },
        {
            "file": "__init__.py",
            "path": "qr_app/__init__.py",
            "code": ""
        },
        {
            "file": "about.html",
            "path": "qr_app/templates/qr_app/about.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n<h1>About Us</h1>\n<p class=\"description\">Welcome to our QR Code Generator application. Here you can create custom QR codes with various options.</p>\n<div id=\"common_questions\">\n    <h2>Frequently Asked Questions (FAQ)</h2>\n    <ul>\n        <li><strong>Q: What is a QR code?</strong></li>\n        <li>A: A QR code (Quick Response code) is a type of matrix barcode that can be scanned by devices to retrieve\n            information.\n        </li>\n\n        <li><strong>Q: How do I use the QR Code Generator?</strong></li>\n        <li>A: Simply enter the text or URL, adjust the settings, and click the generate button.</li>\n\n        <li><strong>Q: Can I download the QR code?</strong></li>\n        <li>A: Yes, once generated, you can download the QR code image to your device.</li>\n    </ul>\n</div>\n<div id=\"privacy_policy\">\n    <h2>Privacy Policy</h2>\n    <p>Your privacy is important to us. We do not collect or store any personal information when you use this QR Code\n        Generator. All data is processed locally on your device, and we do not track your usage. Please refrain from\n        sharing\n        sensitive information via the QR code generator.</p>\n</div>\n<div id=\"terms_of_service\">\n    <h2>Terms of Service</h2>\n    <p>By using this application, you agree to the following terms:</p>\n    <ul>\n        <li>You are responsible for the content you generate with the QR Code Generator.</li>\n        <li>We reserve the right to modify or discontinue the service at any time without notice.</li>\n        <li>This service is provided on an \"as is\" basis without warranties of any kind.</li>\n    </ul>\n</div>\n<footer>\n    <p>&copy; 2024 QR Code Generator. All rights reserved.</p>\n</footer>\n</body>\n</html>\n"
        },
        {
            "file": "generate.html",
            "path": "qr_app/templates/qr_app/generate.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n    </style>\n</head>\n<body>\n<div id=\"generator\">\n    <h1>QR Code Generator</h1>\n    {% if error_messages %}\n    <div class=\"error-messages\">\n        {% for message in error_messages %}\n        <div class=\"error-message\">{{ message }}</div>\n        {% endfor %}\n    </div>\n    {% endif %}\n    <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n        {% csrf_token %}\n\n        <label for=\"url\">Enter URL:</label>\n        <input type=\"text\" name=\"text\" id=\"text\" placeholder=\"Enter Text\">\n\n        <label for=\"box_size\">Box Size:</label>\n        <input type=\"number\" name=\"box_size\" id=\"box_size\" min=\"1\">\n\n        <label for=\"border_size\">Border Size:</label>\n        <input type=\"number\" name=\"border_size\" id=\"border_size\" min=\"0\">\n\n        <label for=\"back_color\">Background Color:</label>\n        <input type=\"color\" name=\"back_color\" id=\"back_color\" value=\"#ffffff\">\n\n        <label for=\"fill_color\">Fill Color:</label>\n        <input type=\"color\" name=\"fill_color\" id=\"fill_color\" value=\"#000000\">\n\n        <label for=\"correction_rate\">Select Error Correction Rate:</label>\n        <select name=\"correction_rate\" id=\"correction_rate\">\n            <option value=\"L\">Low (7% error correction)</option>\n            <option value=\"M\" selected>Medium (15% error correction)</option>\n            <option value=\"Q\">Quartile (25% error correction)</option>\n            <option value=\"H\">High (30% error correction)</option>\n        </select>\n\n        <button type=\"submit\" id=\"submit\">Generate QR Code</button>\n    </form>\n\n    {% if qr_code %}\n    <h2>Your QR Code:</h2>\n    <img id='qr_code' src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n\n    <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n        {% csrf_token %}\n        <input type=\"hidden\" name=\"qr_code\" value=\"{{ qr_code }}\">\n        <button type=\"submit\" id=\"download\">Download QR Code</button>\n    </form>\n    {% endif %}\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</div>\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "qr_app/templates/qr_app/home.html",
            "code": "<html>\n\n<head>\n\n    <title>QR Code Generator</title>\n\n</head>\n\n<body>\n\n<h1>Welcome to the QR Code Generator</h1>\n<p class=\"introduction\">Our QR Code Generation website provides a fast, easy, and secure way to create custom QR codes for any purpose.\n    Whether you need to link to a website, share contact information, or embed any other data, our tool generates\n    high-quality QR codes in just a few clicks. With customizable options such as size, color, and format, you can\n    tailor your QR code to fit your needs perfectly. Use it for personal or business purposes, and enjoy the simplicity\n    and flexibility of our platform, where generating QR codes is as effortless as it gets.</p>\n<a href=\"{% url 'generate_qr_code' %}\">\n    <button id=\"generate_qr_button\">Generate QR Code</button>\n</a>\n<a href=\"{% url 'about' %}\">\n    <button>About</button>\n</a>\n</body>\n\n</html>"
        },
        {
            "file": "settings.py",
            "path": "qr_code_generator/settings.py",
            "code": "import os\n\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n\n# Quick-start development settings - unsuitable for production\n\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\n\nSECRET_KEY = 'your_secret_key'\n\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\n\nDEBUG = True\n\n\n\nALLOWED_HOSTS = []\n\n\n\n# Application definition\n\nINSTALLED_APPS = [\n\n    'django.contrib.admin',\n\n    'django.contrib.auth',\n\n    'django.contrib.contenttypes',\n\n    'django.contrib.sessions',\n\n    'django.contrib.messages',\n\n    'django.contrib.staticfiles',\n\n    'qr_app',\n\n]\n\n\n\nMIDDLEWARE = [\n\n    'django.middleware.security.SecurityMiddleware',\n\n    'django.contrib.sessions.middleware.SessionMiddleware',\n\n    'django.middleware.common.CommonMiddleware',\n\n    'django.middleware.csrf.CsrfViewMiddleware',\n\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n\n    'django.contrib.messages.middleware.MessageMiddleware',\n\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n\n]\n\n\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\n\n\nTEMPLATES = [\n\n    {\n\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n\n        'DIRS': [],\n\n        'APP_DIRS': True,\n\n        'OPTIONS': {\n\n            'context_processors': [\n\n                'django.template.context_processors.debug',\n\n                'django.template.context_processors.request',\n\n                'django.contrib.auth.context_processors.auth',\n\n                'django.contrib.messages.context_processors.messages',\n\n            ],\n\n        },\n\n    },\n\n]\n\n\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n\n# Database\n\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n\n    'default': {\n\n        'ENGINE': 'django.db.backends.sqlite3',\n\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n\n    }\n\n}\n\n\n\n# Password validation\n\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n\n    {\n\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n\n    },\n\n    {\n\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n\n    },\n\n    {\n\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n\n    },\n\n    {\n\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n\n    },\n\n]\n\n\n\n# Internationalization\n\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\n\n\nTIME_ZONE = 'UTC'\n\n\n\nUSE_I18N = True\n\n\n\nUSE_L10N = True\n\n\n\nUSE_TZ = True\n\n\n\n# Static files (CSS, JavaScript, Images)\n\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n\n\n# Default primary key field type\n\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"
        },
        {
            "file": "urls.py",
            "path": "qr_code_generator/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "qr_code_generator/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\n\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"
        },
        {
            "file": "__init__.py",
            "path": "qr_code_generator/__init__.py",
            "code": ""
        }
    ]
}