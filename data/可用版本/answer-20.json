{
    "20": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "admin.py",
            "path": "example_app/admin.py",
            "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'author', 'category', 'created_at', 'updated_at', 'operations')\n    def operations(self, obj):\n        return format_html(f'<a href=\"/admin/example_app/blogpost/{obj.id}/change/\" class=\"edit-link\">Edit</a> <a href=\"/post/{obj.id}/delete/\" class=\"delete-link\">Delete</a>')\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'operations')\n    def operations(self, obj):\n        return format_html(f'<a href=\"/admin/example_app/category/{obj.id}/change/\" class=\"edit-link\">Edit</a> <a href=\"/category/{obj.id}/delete/\" class=\"delete-link\">Delete</a>')\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    list_display = ('author', 'post', 'content', 'created_at')\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']  # \u53ef\u6839\u636e\u9700\u8981\u589e\u52a0\u6216\u8c03\u6574\u5b57\u6bb5\n"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    class Meta:\n        verbose_name_plural = 'Categories'\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author}'\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return \" \".join([self.name, str(self.email), self.content])"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]\n"
        },
        {
            "file": "utils.py",
            "path": "example_app/utils.py",
            "code": "def filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, ContactUs\nfrom .forms import CommentForm\n\n\ndef home(request):\n    posts = BlogPost.objects.all().order_by('-created_at')[:3]\n    return render(request, 'blog/home.html', {'posts': posts})\n\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, id=pk)\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.post = post\n            comment.save()\n    else:\n        form = CommentForm()\n    comments = post.comments.all()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n\ndef archive(request):\n    # \u83b7\u53d6\u6240\u6709\u7684\u5f52\u6863\u6708\u4efd\u4ee5\u53ca\u5bf9\u5e94\u7684\u6587\u7ae0\u6570\u91cf\n    archives = (\n        BlogPost.objects.annotate(month=TruncMonth('created_at'))\n        .values('month')\n        .annotate(post_count=Count('id'))\n        .order_by('-month')\n    )\n\n    # \u83b7\u53d6\u7b5b\u9009\u53c2\u6570\n    year = request.GET.get('year')\n    month = request.GET.get('month')\n\n    # \u6839\u636e\u7b5b\u9009\u53c2\u6570\u8fc7\u6ee4\u6587\u7ae0\n    if year and month:\n        filtered_posts = BlogPost.objects.filter(\n            created_at__year=year, created_at__month=month\n        ).order_by('-created_at')\n    else:\n        filtered_posts = []\n\n    context = {\n        'archives': archives,  # \u6708\u4efd\u548c\u6587\u7ae0\u6570\u91cf\n        'filtered_posts': filtered_posts,  # \u7b5b\u9009\u540e\u7684\u6587\u7ae0\n        'year': year,\n        'month': month,\n    }\n    return render(request, 'blog/archive.html', context)\n\n\ndef about(request):\n    if request.method == 'POST':\n        obj = ContactUs(\n            name=request.POST.get('name'),\n            email=request.POST.get('email'),\n            message=request.POST.get('message'),\n        )\n        obj.save()\n    return render(request, 'blog/about.html')\n\n\ndef search(request):\n    search_text = request.POST.get('searchbar', '')\n    context = {\n        \"posts\": (BlogPost.objects.filter(title__contains=search_text) | BlogPost.objects.filter(\n            content__contains=search_text)).order_by('-created_at'),\n    }\n    return render(request, 'blog/home.html', context)\n\n\n@login_required\ndef post_delete(request, pk):\n    try:\n        obj = BlogPost.objects.get(id=pk)\n        title = obj.title\n        obj.delete()\n    except BlogPost.DoesNotExist:\n        raise Http404\n    messages.success(request, f'BlogPost {title} successfully deleted')\n    return HttpResponseRedirect(\"/admin/example_app/blogpost/\")\n\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, id=pk)\n    posts = BlogPost.objects.filter(category=category).order_by('-created_at')\n    return render(request, 'blog/home.html', {'posts': posts})\n\n\n@login_required\ndef category_delete(request, pk):\n    try:\n        obj = Category.objects.get(id=pk)\n        name = obj.name\n        obj.delete()\n    except Category.DoesNotExist:\n        raise Http404\n    messages.success(request, f'Category {name} successfully deleted')\n    return HttpResponseRedirect(\"/admin/example_app/category/\")\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "0001_initial.py",
            "path": "example_app/migrations/0001_initial.py",
            "code": "# Generated by Django 5.1.1 on 2025-01-21 16:36\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('slug', models.IntegerField(blank=True, null=True, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='BlogPost',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('slug', models.IntegerField(blank=True, null=True, unique=True)),\n                ('content', models.TextField()),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='example_app.category')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Comment',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('author', models.CharField(max_length=100)),\n                ('content', models.TextField()),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='example_app.blogpost')),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "0002_remove_blogpost_slug_remove_category_slug.py",
            "path": "example_app/migrations/0002_remove_blogpost_slug_remove_category_slug.py",
            "code": "# Generated by Django 5.1.1 on 2025-01-21 17:55\n\nfrom django.db import migrations\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('example_app', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.RemoveField(\n            model_name='blogpost',\n            name='slug',\n        ),\n        migrations.RemoveField(\n            model_name='category',\n            name='slug',\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "styles.css",
            "path": "example_app/static/css/styles.css",
            "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\nheader {\n    background: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\nheader nav a {\n    color: #fff;\n    margin: 0 15px;\n    text-decoration: none;\n}\n\nmain {\n    padding: 20px;\n    background: #fff;\n    margin: 20px auto;\n    max-width: 800px;\n    border: 1px solid #ddd;\n}\n\nfooter {\n    text-align: center;\n    padding: 10px 0;\n    background: #333;\n    color: #fff;\n}\n"
        },
        {
            "file": "about.html",
            "path": "example_app/templates/blog/about.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block title %}About - My Blog{% endblock %}\n\n{% block content %}\n<div class=\"about\">\n<h1>About the Author</h1>\n<p>Welcome to my blog! I am a passionate writer who loves sharing knowledge and stories.</p>\n</div>\n<h2>Contact Me</h2>\n<form method=\"post\" action=\"{% url 'about' %}\">\n    {% csrf_token %}\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" required></textarea>\n    <button type=\"submit\">Send</button>\n</form>\n{% endblock %}\n"
        },
        {
            "file": "archive.html",
            "path": "example_app/templates/blog/archive.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n<h1>Archive</h1>\n\n<!-- \u663e\u793a\u5f52\u6863\u94fe\u63a5 -->\n<h2>Browse by Month</h2>\n<ul>\n    {% for archive in archives %}\n        <li>\n            <a href=\"?year={{ archive.month.year }}&month={{ archive.month.month }}\" class=\"month-filter\">\n                {{ archive.month|date:\"F Y\" }} ({{ archive.post_count }} posts)\n            </a>\n        </li>\n    {% empty %}\n        <li>No archives available.</li>\n    {% endfor %}\n</ul>\n\n<!-- \u663e\u793a\u7b5b\u9009\u7ed3\u679c -->\n<h2>Posts from {{ year }}/{{ month }}</h2>\n<ul>\n    {% for post in filtered_posts %}\n        <li class=\"blog-post\">\n            <a href=\"{% url 'post_detail' post.id %}\">{{ post.title }}</a>\n            <span>Published on {{ post.created_at|date:\"F j, Y\" }}</span>\n        </li>\n    {% empty %}\n        <li>No posts found for this date.</li>\n    {% endfor %}\n</ul>\n\n{% endblock %}\n"
        },
        {
            "file": "base.html",
            "path": "example_app/templates/blog/base.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'styles.css' %}\">\n</head>\n<body>\n    <header>\n        <nav>\n            <a href=\"{% url 'home' %}\">Home</a>\n            <a href=\"{% url 'category' %}\">Categories</a>\n            <a href=\"{% url 'archive' %}\">Archive</a>\n            <a href=\"{% url 'about' %}\">About</a>\n\n        </nav>\n    </header>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n    <footer>\n        <p>&copy; 2024 My Blog</p>\n    </footer>\n</body>\n</html>\n"
        },
        {
            "file": "category.html",
            "path": "example_app/templates/blog/category.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block title %}Categories - My Blog{% endblock %}\n\n{% block content %}\n<h1>Blog Categories</h1>\n<ul>\n    {% for category in categories %}\n    <li>\n        <a href=\"{% url 'category_detail' category.id %}\" class=\"category-item\">{{ category.name }}</a>\n    </li>\n    {% endfor %}\n</ul>\n{% endblock %}\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/blog/home.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block title %}Home - My Blog{% endblock %}\n\n{% block content %}\n<h1>Welcome to My Blog</h1>\n<section>\n    <form action=\"{% url 'search' %}\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"searchbar\">Search:</label>\n        <input id=\"searchbar\" type=\"text\" name=\"searchbar\">\n        <input type=\"submit\">\n    </form>\n    <h2>Latest Posts</h2>\n    <ul>\n        {% for post in posts %}\n        <li class=\"blog-post\">\n            <a href=\"{% url 'post_detail' post.id %}\">{{ post.title }}</a>\n            <p>{{ post.created_at|date:\"F d, Y\" }}</p>\n        </li>\n        {% endfor %}\n    </ul>\n</section>\n{% endblock %}\n"
        },
        {
            "file": "post_detail.html",
            "path": "example_app/templates/blog/post_detail.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block title %}{{ post.title }} - My Blog{% endblock %}\n\n{% block content %}\n<article>\n    <h1>{{ post.title }}</h1>\n    <p>By {{ post.author.username }} on {{ post.created_at|date:\"F d, Y\" }}, Category: {{ post.category }}</p>\n    <div>\n        {{ post.content|linebreaks }}\n    </div>\n</article>\n<section>\n    <h2>Comments</h2>\n    <ul>\n        {% for comment in comments %}\n        <li>\n            <strong>{{ comment.author }}</strong> - {{ comment.created_at|date:\"F d, Y H:i\" }}\n            <p><b>Comment:</b>{{ comment.content }}</p>\n        </li>\n        {% empty %}\n        <li>No comments yet. Be the first to comment!</li>\n        {% endfor %}\n    </ul>\n    <h3>Leave a Comment</h3>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Submit</button>\n    </form>\n</section>\n{% endblock %}\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nLOGIN_URL = '/admin/login/'"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ]
}