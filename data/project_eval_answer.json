{
    "1": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Weight (kg)')\n    height = forms.FloatField(label='Height (m)')\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight. This may indicate that a person is not consuming enough calories or may be experiencing malnutrition or an underlying health condition. Being underweight can lead to health issues such as weakened immune function, fragile bones, and fertility problems.\",\n    \"Normal weight\": \"A BMI within this range is considered normal or healthy. This suggests that the person’s weight is appropriate for their height and is associated with a lower risk of developing weight-related health problems like heart disease, diabetes, and hypertension.\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight. While not necessarily harmful in all cases, being overweight can increase the risk of chronic health conditions such as type 2 diabetes, heart disease, and certain cancers. It may also indicate a need for lifestyle changes to achieve a healthier weight.\",\n    \"Obese\": \"A BMI of 30 or above is considered obese. Obesity significantly increases the risk of serious health problems, including cardiovascular disease, type 2 diabetes, sleep apnea, and joint issues. Individuals in this category may benefit from medical intervention, including dietary changes, exercise, and potentially medications or surgery to manage their weight.\",\n    \"Invalid height\": \"The height can't be less than 0.\"\n}\n\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\n\ndef bmi_calculator(request):\n    if request.method == 'GET':\n        form = BMICalculatorForm()\n    elif request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            bmi_category = \"\"\n            if form.cleaned_data['height'] <= 0:\n                bmi_result = \"N/A\"\n                bmi_category = \"Invalid height.\"\n            else:\n                bmi_result = form.cleaned_data['weight'] / (form.cleaned_data['height'] ** 2)\n                if bmi_result < 18.5:\n                    bmi_category = \"Underweight\"\n                elif 18.5 <= bmi_result <= 24.9:\n                    bmi_category = \"Normal weight\"\n                elif 25 <= bmi_result <= 29.9:\n                    bmi_category = \"Overweight\"\n                else:\n                    bmi_category = \"Obese\"\n        else:\n            bmi_result = \"N/A\"\n            bmi_category = \"Invalid height.\"\n        interpretation = bmi_interpretation[bmi_category]\n    return render(request, 'bmi_calculator.html', locals())\n\n\ndef advice(request):\n    return render(request, 'advice.html')\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "advice.html",
            "path": "example_app/templates/advice.html",
            "code": "<html>\n<head><title>Advice</title></head>\n<body>\n<h1>Advice Page</h1>\n<div id=\"bmi_advice\">\n    <div class=\"advice\">\n        <h2 class=\"category\">Underweight (BMI < 18.5):</h2>\n        <p>If your BMI is below 18.5, it’s important to focus on gaining weight in a healthy way. Consider the following\n            advice:</p>\n        <ul>\n            <li>Increase your intake of nutrient-dense foods, such as lean proteins, whole grains, and healthy fats.\n            </li>\n            <li>Eat small, frequent meals throughout the day to boost your calorie intake.</li>\n            <li>Incorporate strength training exercises to build muscle mass.</li>\n            <li>Consult with a healthcare provider to rule out any underlying health conditions.</li>\n        </ul>\n    </div>\n\n    <div class=\"advice\">\n        <h2 class=\"category\">Normal Weight (BMI 18.5 - 24.9):</h2>\n        <p>Maintaining a BMI in the normal range is ideal for your overall health. Here’s how you can keep up the good\n            work:</p>\n        <ul>\n            <li>Continue eating a balanced diet rich in fruits, vegetables, whole grains, and lean proteins.</li>\n            <li>Stay physically active with a mix of cardio, strength training, and flexibility exercises.</li>\n            <li>Monitor your weight regularly to ensure it remains stable.</li>\n            <li>Get regular check-ups to maintain overall health and prevent potential issues.</li>\n        </ul>\n    </div>\n\n    <div class=\"advice\">\n        <h2 class=\"category\">Overweight (BMI 25 - 29.9):</h2>\n        <p>If your BMI is in the overweight range, small lifestyle changes can make a big difference. Consider these\n            tips:</p>\n        <ul>\n            <li>Focus on portion control and choose lower-calorie, nutrient-rich foods.</li>\n            <li>Increase physical activity by incorporating more daily movement, such as walking or cycling.</li>\n            <li>Set realistic weight loss goals, aiming for a gradual reduction of 1-2 pounds per week.</li>\n            <li>Consult a healthcare provider for personalized advice, especially if you have other health conditions.\n            </li>\n        </ul>\n    </div>\n\n    <div class=\"advice\">\n        <h2 class=\"category\">Obese (BMI ≥ 30):</h2>\n        <p>A BMI of 30 or higher puts you at higher risk for serious health conditions. Here’s what you can do:</p>\n        <ul>\n            <li>Adopt a calorie-controlled diet that includes plenty of fruits, vegetables, and lean proteins.</li>\n            <li>Engage in regular physical activity, starting with moderate exercises like walking or swimming, and\n                gradually increasing intensity.\n            </li>\n            <li>Seek support from a healthcare provider, who may recommend working with a dietitian, or considering\n                weight\n                loss medications or surgery.\n            </li>\n            <li>Focus on making sustainable lifestyle changes rather than seeking quick fixes.</li>\n        </ul>\n    </div>\n\n    <div class=\"advice\">\n        <h2 class=\"category\">Severe Obesity (BMI ≥ 35):</h2>\n        <p>Severe obesity requires more intensive management due to the higher risk of health complications. Here’s how\n            you\n            can take action:</p>\n        <ul>\n            <li>Work closely with a healthcare team to create a personalized weight loss plan that may include dietary\n                changes, exercise, and possibly medical interventions.\n            </li>\n            <li>Consider counseling or support groups to address emotional or psychological factors related to weight.\n            </li>\n            <li>Explore bariatric surgery options if recommended by your healthcare provider.</li>\n            <li>Set small, achievable goals to gradually improve your health and reduce risks associated with obesity.\n            </li>\n        </ul>\n    </div>\n</div>\n</body>\n</html>\n"
        },
        {
            "file": "bmi_calculator.html",
            "path": "example_app/templates/bmi_calculator.html",
            "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body>\n<h1>BMI Calculator Page</h1>\n<div id=\"bmi_calculator\">\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit_button\">Submit</button>\n    </form>\n    <a href=\"/bmi-calculator/\">\n        <button type=\"reset\" id=\"reset_button\">Reset</button>\n    </a>\n    {% if bmi_result %}\n    <h3 id=\"bmi_result\">Your BMI is {{ bmi_result }}</h3>\n    <h3 id=\"bmi_category\">Your category is {{ bmi_category }}</h3>\n    <p id=\"interpretation\">{{ interpretation }}</p>\n    {% endif %}\n</div>\n<p><a href=\"/advice/\" id=\"link_to_health_advice\">Health Advice</a></p>\n</body>\n</html>\n"
        },
        {
            "file": "homepage.html",
            "path": "example_app/templates/homepage.html",
            "code": "<html>\n<head><title>Homepage</title></head>\n<body>\n<h1>Welcome to the Homepage</h1>\n<div id=\"introduction\">\n<h2>What is BMI?</h2>\n<p>A Body Mass Index (BMI) calculator is a simple and widely used tool that helps individuals assess their body weight\n    in relation to their height. BMI is a numerical value derived from a person's weight and height, and it serves as an\n    indicator of whether an individual has a healthy body weight for their height. By calculating BMI, individuals can\n    determine if they fall into categories such as underweight, normal weight, overweight, or obese, based on\n    standardized ranges. While BMI does not directly measure body fat, it is a useful screening tool that provides a\n    quick estimate of a person's weight status and can help identify potential health risks associated with being\n    underweight or overweight. It is important to note that while BMI is a helpful tool, it should be used in\n    conjunction with other assessments and professional advice for a comprehensive evaluation of an individual's\n    health.</p>\n</div>\n<a href=\"/bmi-calculator/\">\n    <button id=\"navigate_button\">Click me to the BMI Calculator</button>\n</a>\n</body>\n</html>\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ],
    "2": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\n\nfrom django import forms\n\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\n\nclass CurrencyConverterForm(forms.Form):\n    input_amount = forms.FloatField(label=\"Input amount\")\n    source_currency = forms.ChoiceField(label='Source Currency', choices=CURRENCY_CHOICES)\n    target_currency = forms.ChoiceField(label='Target Currency', choices=CURRENCY_CHOICES)"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    class Meta:\n        verbose_name = \"Currency Convert Rate\"\n        verbose_name_plural = \"Currency Convert Rates\"\n\n    source_currency = models.CharField(max_length=128, verbose_name=\"Source Currency\")\n    target_currency = models.CharField(max_length=128, verbose_name=\"Target Currency\")\n    rate = models.DecimalField(max_digits=32, decimal_places=16, verbose_name=\"Rate\")\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name=\"Datetime\", editable=False)\n\n    def __str__(self):\n        return f\"{str(self.datetime)} {self.source_currency}--{str(self.rate)}-->{self.target_currency}\"\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "import base64\nimport datetime\nimport io\nimport random\n\nfrom django.shortcuts import render\nfrom django.utils import timezone\nfrom django.views.generic import TemplateView\nfrom matplotlib import pyplot as plt\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated(source_currency, target_currency):\n    '''\n    Warning:\n    This function is a simulation of currency rate.\n    In the production environment, this function should be replaced with an api from professional currency exchanging market website.\n    '''\n    # random rate\n    USD_BASE = {\n        'USD': 1.00,\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'JPY': 110.00,\n        'AUD': 1.35,\n        'CNY': 7.00,\n        'CAD': 1.25,\n        'CHF': 0.92,\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\ndef get_conversion_rate(source_currency, target_currency):\n    obj = CurrencyConvertRateModel(\n        source_currency=source_currency, target_currency=target_currency,\n        rate=get_updated(source_currency, target_currency)\n    )\n    obj.save()\n    return obj.rate\n\n\nclass ConvertCurrencyView(TemplateView):\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, 'home.html', locals())\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            input_amount = form.cleaned_data['input_amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            conversion_rate = get_conversion_rate(source_currency, target_currency)\n            converted_amount = input_amount * conversion_rate\n            exchange_rate_info = f\"The exchange rate is {str(conversion_rate)} updated to {datetime.datetime.now().strftime('%Y%M%D')}. WARNING: This project is using random rate for testing.\"\n\n        else:\n            form = CurrencyConverterForm()\n            converted_amount = 'Error: invalid amount or currency.'\n            return render(request, 'home.html', locals())\n        return render(request, 'home.html', locals())\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    def get(self, request):\n        currency_info_dict = {\n            'USD': '<h3 id=\"1-us-dollar-usd\">US Dollar (USD)</strong></h3><p>The US Dollar is the official currency of the United States and its territories. It is the world\\'s primary reserve currency, used in global trade and finance. The dollar is issued by the Federal Reserve, the central bank of the United States, and is recognized by the symbol \"$\". It is one of the most widely used currencies in international transactions and is held in significant quantities by governments and institutions around the world.</p>',\n            'EUR': '<h3 id=\"2-euro-eur\"><strong>Euro (EUR)</strong></h3><p>The Euro is the official currency of the Eurozone, which consists of 19 of the 27 member states of the European Union. Introduced in 1999 for electronic transactions and in 2002 for cash transactions, the Euro is managed by the European Central Bank (ECB). It is the second most traded currency in the world after the US Dollar and is used by more than 340 million Europeans.</p>',\n            'GBP': '<h3 id=\"3-british-pound-gbp\"><strong>British Pound (GBP)</strong></h3><p>The British Pound, also known as the Pound Sterling, is the official currency of the United Kingdom. It is symbolized by \"£\" and is abbreviated as GBP. The Pound is the oldest currency in continuous use, with origins dating back to the 8th century. The Bank of England is responsible for issuing and managing the currency, which is widely recognized and traded globally.</p>',\n            'JPY': '<h3 id=\"4-japanese-yen-jpy\"><strong>Japanese Yen (JPY)</strong></h3><p>The Japanese Yen is the official currency of Japan and is symbolized by \"¥.\" It is abbreviated as JPY. The Yen is the third most traded currency in the world after the US Dollar and the Euro, and it is often used as a reserve currency. The Bank of Japan manages the currency, which plays a significant role in global foreign exchange markets.</p>',\n            'AUD': '<h3 id=\"5-australian-dollar-aud\"><strong>Australian Dollar (AUD)</strong></h3><p>The Australian Dollar is the official currency of Australia, including its external territories. It is symbolized by \"$\" or sometimes \"A$\" to distinguish it from other dollar-denominated currencies. The Reserve Bank of Australia issues the currency, which is highly traded in global markets due to Australia\\'s stable economy and the country\\'s significant natural resources.</p>',\n            'CNY': '<h3 id=\"6-chinese-yuan-cny\"><strong>Chinese Yuan (CNY)</strong></h3><p>The Chinese Yuan, also known as the Renminbi (RMB), is the official currency of the People\\'s Republic of China. The symbol for the Yuan is \"¥,\" and its abbreviation is CNY. The currency is issued and controlled by the People\\'s Bank of China. The Yuan is becoming increasingly significant in global finance and trade as China\\'s economy continues to grow rapidly.</p>',\n            'CAD': '<h3 id=\"7-canadian-dollar-cad\"><strong>Canadian Dollar (CAD)</strong></h3><p>The Canadian Dollar is the official currency of Canada and is symbolized by \"$\" or sometimes \"C$\" to differentiate it from other dollar-denominated currencies. The Bank of Canada is responsible for issuing and regulating the currency. The Canadian Dollar is known for its stability and is frequently used in global transactions, especially in commodity markets like oil and natural resources.</p>',\n            'CHF': '<h3 id=\"8-swiss-franc-chf\">s<strong>Swiss Franc (CHF)</strong></h3><p>The Swiss Franc is the official currency of Switzerland and Liechtenstein. It is symbolized by \"CHF,\" which stands for \"Confoederatio Helvetica Franc.\" The Swiss National Bank issues the currency, which is known for its stability and strength. The Swiss Franc is often considered a safe haven currency, especially during times of economic uncertainty or financial instability.</p>'\n        }\n        trend_and_info = []\n        for target_currency in currency_info_dict:\n            if target_currency == \"USD\":\n                continue\n            trend_and_info.append(\n                [target_currency, currency_info_dict[target_currency], ExchangeRateTrendsView.plot_chart(\"USD\", target_currency)])\n        return render(request, \"exchange_rate_trends.html\", locals())\n\n    @staticmethod\n    def plot_chart(source_currency, target_currency):\n        # Data\n        six_months_ago = timezone.now().date() - datetime.timedelta(days=6 * 30)\n\n        data = CurrencyConvertRateModel.objects.filter(source_currency=source_currency, target_currency=target_currency,\n                                                       datetime__gte=six_months_ago)\n        x = [_.datetime for _ in data]\n        y = [_.rate for _ in data]\n\n        # Make chart\n        plt.figure()\n        plt.plot(x, y, marker='o')\n        plt.title(f'{source_currency}-{target_currency} Exchange Rate Trends')\n        plt.xlabel('Datetime')\n        plt.ylabel('Rate')\n\n        # Save chart to Bytestream\n        buffer = io.BytesIO()\n        plt.savefig(buffer, format='png')\n        buffer.seek(0)\n        image_png = buffer.getvalue()\n        buffer.close()\n\n        # Encoding Bytestream to base64\n        graphic = base64.b64encode(image_png)\n        graphic = graphic.decode('utf-8')\n\n        return graphic\n\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "exchange_rate_trends.html",
            "path": "example_app/templates/exchange_rate_trends.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n</head>\n<body>\n    <h1>Exchange Rate Trends</h1>\n    <p>Here are the exchange rate trends. Base currency is USD.</p>\n    <div id=\"currency_info\">\n    {{ currency_info_dict.USD|safe }}\n    {% for obj in trend_and_info %}\n        <h2>USD - {{ obj.0 }}</h2>\n        {{ obj.1|safe }}\n        <h3>Trend Chart</h3>\n        <img id=\"historical_rate_{{ obj.0 }}\" src=\"data:image/png;base64,{{ obj.2 }}\" alt=\"Chart\">\n    {% endfor %}\n    </div>\n</body>\n</html>"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Home Page</h1>\n    <h2>Convert Currency</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit\" type=\"submit\">Convert</button>\n    </form>\n    {% if converted_amount %}\n        <h3 id=\"converted_amount\">Converted Amount: {{ converted_amount }}</h3>\n    {% endif %}\n    {% if exchange_rate_info %}\n        <p id=\"exchange_rate_info\">{{exchange_rate_info}}</p>\n    {% endif %}\n    <nav>\n        <ul>\n            <li><a href=\"/trends/\">Exchange Rate Trends</a></li>\n        </ul>\n    </nav>\n</body>\n</html>"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n]"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ],
    "3": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView().get, name='home'),\n    path('generator/',password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView().get, name='about_us'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True,\n                      include_symbols=True):\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    # Ensure there's at least some character set to choose from\n    if not characters:\n        return \"Please select at least one character type.\"\n\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    password = None\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = 'uppercase' in request.POST\n        include_lowercase = 'lowercase' in request.POST\n        include_numbers = 'numbers' in request.POST\n        include_symbols = 'symbols' in request.POST\n\n        password = generate_password(\n            length=length,\n            include_uppercase=include_uppercase,\n            include_lowercase=include_lowercase,\n            include_numbers=include_numbers,\n            include_symbols=include_symbols\n        )\n\n    return render(request, 'generator.html', {'password': password})\n\n\nclass HomePageView:\n    \"\"\"Renders the Home page of the password generator.\"\"\"\n\n    def get(self, request):\n        context = {}\n        return render(request, 'home.html', context)\n\n\nclass AboutUsPageView:\n    \"\"\"Renders the About Us page of the password generator.\"\"\"\n\n    def get(self, request):\n        context = {}\n        return render(request, 'about_us.html', context)\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "styles.css",
            "path": "example_app/static/css/styles.css",
            "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n"
        },
        {
            "file": "scripts.js",
            "path": "example_app/static/js/scripts.js",
            "code": "function copyToClipboard() {\n    // Placeholder function for copying password to clipboard\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        // Show a message on the page instead of using alert\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';  // Make the message visible\n        // Hide the message after 3 seconds\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        // In case of error (e.g., clipboard API not supported)\n        console.error('Could not copy text: ', err);\n    });\n}\n\n"
        },
        {
            "file": "about_us.html",
            "path": "example_app/templates/about_us.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <h1>About Us</h1>\n    <p id=\"description\">This project is generated by Large Language Model.</p>\n    <a href=\"/\"><button id=\"home\">Home</button></a>\n</body>\n</html>\n"
        },
        {
            "file": "generator.html",
            "path": "example_app/templates/generator.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n<div id=\"generator\">\n    <h1>Password Generator</h1>\n\n    <form method=\"POST\">\n        {% csrf_token %}\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" min=\"8\" max=\"128\">\n        <br>\n\n        <label for=\"uppercase\">Include Uppercase:</label>\n        <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\">\n        <br>\n\n        <label for=\"lowercase\">Include Lowercase:</label>\n        <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\">\n        <br>\n\n        <label for=\"numbers\">Include Numbers:</label>\n        <input type=\"checkbox\" id=\"numbers\" name=\"numbers\">\n        <br>\n\n        <label for=\"symbols\">Include Symbols:</label>\n        <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n        <br>\n\n        <button type=\"submit\" id=\"generate_button\">Generate Password</button>\n    </form>\n\n    {% if password %}\n    <h2>Your Generated Password:</h2>\n    <p><strong id=\"password\">{{ password }}</strong></p>\n    <button onclick=\"copyToClipboard()\" id=\"copy_button\">Copy to Clipboard</button>\n    {% endif %}\n</div>\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n<h1>Generate Password</h1>\n<div id=\"welcome_message\">In today's digital world, safeguarding your personal and professional data is more important\n    than ever. At SecurePass, we make it easy to create strong, secure passwords that protect you from online threats.\n    Simply generate a password with one click and ensure your accounts are fortified with complex combinations of\n    letters, numbers, and special characters. Ready to enhance your security? Let’s get started!\n</div>\n<a href=\"generator/\" id=\"navigate_generate\"><button>Generate Password</button></a>\n<a href=\"about-us/\" id=\"about_us_link\">About Us</a>\n</body>\n</html>\n"
        },
        {
            "file": "settings.py",
            "path": "password_generator/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"
        },
        {
            "file": "urls.py",
            "path": "password_generator/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "password_generator/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "password_generator/__init__.py",
            "code": ""
        }
    ],
    "4": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\n\nimport sys\n\n\n\nif __name__ == '__main__':\n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\n    try:\n\n        from django.core.management import execute_from_command_line\n\n    except ImportError as exc:\n\n        raise ImportError(\n\n            \"Couldn't import Django. Are you sure it's installed and \"\n\n            \"available on your PYTHONPATH environment variable? Did you \"\n\n            \"forget to activate a virtual environment?\"\n\n        ) from exc\n\n    execute_from_command_line(sys.argv)"
        },
        {
            "file": "apps.py",
            "path": "qr_app/apps.py",
            "code": "from django.apps import AppConfig\n\n\n\nclass QrAppConfig(AppConfig):\n\n    default_auto_field = 'django.db.models.BigAutoField'\n\n    name = 'qr_app'"
        },
        {
            "file": "urls.py",
            "path": "qr_app/urls.py",
            "code": "# This file can be used to define URLs specific to the qr_app\nfrom .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "qr_app/views.py",
            "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nfrom qrcode.console_scripts import error_correction\nimport qrcode\nimport io\nimport base64\n\n\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\ndef hex_to_rgb(value):\n    \"\"\"Convert hex color to RGB tuple.\"\"\"\n    value = value.lstrip('#')  # Remove the leading '#'\n    return tuple(int(value[i:i + 2], 16) for i in (0, 2, 4))\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        try:\n            text = request.POST.get('text')\n            box_size = int(request.POST.get('box_size', 10))\n            border_size = int(request.POST.get('border_size', 1))\n            back_color = request.POST.get('back_color', '#ffffff')\n            fill_color = request.POST.get('fill_color', '#000000')\n            error_correction_rate = error_correction[request.POST.get('error_correction', \"M\")]\n\n            # Convert hex colors to RGB tuples\n            back_color_rgb = hex_to_rgb(back_color)\n            fill_color_rgb = hex_to_rgb(fill_color)\n\n            # Generate the QR code\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            # Create an image from the QR Code instance\n            img = qr.make_image(fill_color=fill_color_rgb, back_color=back_color_rgb)\n\n            # Save the image to a BytesIO object\n            img_io = io.BytesIO()\n            img.save(img_io, format='PNG')\n            img_io.seek(0)\n\n            # Encode the image to base64\n            img_base64 = base64.b64encode(img_io.getvalue()).decode()\n\n            return render(request, 'qr_app/generate.html', {'qr_code': img_base64})\n        except Exception as e:\n            return render(request, 'qr_app/generate.html', {'error_messages': [e,]})\n\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        qr_code_base64 = request.POST.get('qr_code')\n\n        # Decode the base64 QR code image\n        img_data = base64.b64decode(qr_code_base64)\n\n        # Create a response with the image\n        response = HttpResponse(img_data, content_type='image/png')\n        response['Content-Disposition'] = 'attachment; filename=\"qr_code.png\"'\n        return response\n\n    return HttpResponse(\"Invalid request\", status=400)\n\n\ndef about(request):\n    return render(request, 'qr_app/about.html')\n"
        },
        {
            "file": "__init__.py",
            "path": "qr_app/__init__.py",
            "code": ""
        },
        {
            "file": "about.html",
            "path": "qr_app/templates/qr_app/about.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n<h1>About Us</h1>\n<p class=\"description\">Welcome to our QR Code Generator application. Here you can create custom QR codes with various options.</p>\n<div id=\"common_questions\">\n    <h2>Frequently Asked Questions (FAQ)</h2>\n    <ul>\n        <li><strong>Q: What is a QR code?</strong></li>\n        <li>A: A QR code (Quick Response code) is a type of matrix barcode that can be scanned by devices to retrieve\n            information.\n        </li>\n\n        <li><strong>Q: How do I use the QR Code Generator?</strong></li>\n        <li>A: Simply enter the text or URL, adjust the settings, and click the generate button.</li>\n\n        <li><strong>Q: Can I download the QR code?</strong></li>\n        <li>A: Yes, once generated, you can download the QR code image to your device.</li>\n    </ul>\n</div>\n<div id=\"privacy_policy\">\n    <h2>Privacy Policy</h2>\n    <p>Your privacy is important to us. We do not collect or store any personal information when you use this QR Code\n        Generator. All data is processed locally on your device, and we do not track your usage. Please refrain from\n        sharing\n        sensitive information via the QR code generator.</p>\n</div>\n<div id=\"terms_of_service\">\n    <h2>Terms of Service</h2>\n    <p>By using this application, you agree to the following terms:</p>\n    <ul>\n        <li>You are responsible for the content you generate with the QR Code Generator.</li>\n        <li>We reserve the right to modify or discontinue the service at any time without notice.</li>\n        <li>This service is provided on an \"as is\" basis without warranties of any kind.</li>\n    </ul>\n</div>\n<footer>\n    <p>&copy; 2024 QR Code Generator. All rights reserved.</p>\n</footer>\n</body>\n</html>\n"
        },
        {
            "file": "generate.html",
            "path": "qr_app/templates/qr_app/generate.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n    </style>\n</head>\n<body>\n<div id=\"generator\">\n    <h1>QR Code Generator</h1>\n    {% if error_messages %}\n    <div class=\"error-messages\">\n        {% for message in error_messages %}\n        <div class=\"error-message\">{{ message }}</div>\n        {% endfor %}\n    </div>\n    {% endif %}\n    <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n        {% csrf_token %}\n\n        <label for=\"url\">Enter URL:</label>\n        <input type=\"text\" name=\"text\" id=\"text\" placeholder=\"Enter Text\">\n\n        <label for=\"box_size\">Box Size:</label>\n        <input type=\"number\" name=\"box_size\" id=\"box_size\" min=\"1\">\n\n        <label for=\"border_size\">Border Size:</label>\n        <input type=\"number\" name=\"border_size\" id=\"border_size\" min=\"0\">\n\n        <label for=\"back_color\">Background Color:</label>\n        <input type=\"color\" name=\"back_color\" id=\"back_color\" value=\"#ffffff\">\n\n        <label for=\"fill_color\">Fill Color:</label>\n        <input type=\"color\" name=\"fill_color\" id=\"fill_color\" value=\"#000000\">\n\n        <label for=\"correction_rate\">Select Error Correction Rate:</label>\n        <select name=\"correction_rate\" id=\"correction_rate\">\n            <option value=\"L\">Low (7% error correction)</option>\n            <option value=\"M\" selected>Medium (15% error correction)</option>\n            <option value=\"Q\">Quartile (25% error correction)</option>\n            <option value=\"H\">High (30% error correction)</option>\n        </select>\n\n        <button type=\"submit\" id=\"submit\">Generate QR Code</button>\n    </form>\n\n    {% if qr_code %}\n    <h2>Your QR Code:</h2>\n    <img id='qr_code' src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n\n    <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n        {% csrf_token %}\n        <input type=\"hidden\" name=\"qr_code\" value=\"{{ qr_code }}\">\n        <button type=\"submit\" id=\"download\">Download QR Code</button>\n    </form>\n    {% endif %}\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</div>\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "qr_app/templates/qr_app/home.html",
            "code": "<html>\n\n<head>\n\n    <title>QR Code Generator</title>\n\n</head>\n\n<body>\n\n<h1>Welcome to the QR Code Generator</h1>\n<p class=\"introduction\">Our QR Code Generation website provides a fast, easy, and secure way to create custom QR codes for any purpose.\n    Whether you need to link to a website, share contact information, or embed any other data, our tool generates\n    high-quality QR codes in just a few clicks. With customizable options such as size, color, and format, you can\n    tailor your QR code to fit your needs perfectly. Use it for personal or business purposes, and enjoy the simplicity\n    and flexibility of our platform, where generating QR codes is as effortless as it gets.</p>\n<a href=\"{% url 'generate_qr_code' %}\">\n    <button id=\"generate_qr_button\">Generate QR Code</button>\n</a>\n<a href=\"{% url 'about' %}\">\n    <button>About</button>\n</a>\n</body>\n\n</html>"
        },
        {
            "file": "settings.py",
            "path": "qr_code_generator/settings.py",
            "code": "import os\n\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n\n# Quick-start development settings - unsuitable for production\n\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\n\nSECRET_KEY = 'your_secret_key'\n\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\n\nDEBUG = True\n\n\n\nALLOWED_HOSTS = []\n\n\n\n# Application definition\n\nINSTALLED_APPS = [\n\n    'django.contrib.admin',\n\n    'django.contrib.auth',\n\n    'django.contrib.contenttypes',\n\n    'django.contrib.sessions',\n\n    'django.contrib.messages',\n\n    'django.contrib.staticfiles',\n\n    'qr_app',\n\n]\n\n\n\nMIDDLEWARE = [\n\n    'django.middleware.security.SecurityMiddleware',\n\n    'django.contrib.sessions.middleware.SessionMiddleware',\n\n    'django.middleware.common.CommonMiddleware',\n\n    'django.middleware.csrf.CsrfViewMiddleware',\n\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n\n    'django.contrib.messages.middleware.MessageMiddleware',\n\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n\n]\n\n\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\n\n\nTEMPLATES = [\n\n    {\n\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n\n        'DIRS': [],\n\n        'APP_DIRS': True,\n\n        'OPTIONS': {\n\n            'context_processors': [\n\n                'django.template.context_processors.debug',\n\n                'django.template.context_processors.request',\n\n                'django.contrib.auth.context_processors.auth',\n\n                'django.contrib.messages.context_processors.messages',\n\n            ],\n\n        },\n\n    },\n\n]\n\n\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n\n# Database\n\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n\n    'default': {\n\n        'ENGINE': 'django.db.backends.sqlite3',\n\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n\n    }\n\n}\n\n\n\n# Password validation\n\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n\n    {\n\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n\n    },\n\n    {\n\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n\n    },\n\n    {\n\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n\n    },\n\n    {\n\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n\n    },\n\n]\n\n\n\n# Internationalization\n\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\n\n\nTIME_ZONE = 'UTC'\n\n\n\nUSE_I18N = True\n\n\n\nUSE_L10N = True\n\n\n\nUSE_TZ = True\n\n\n\n# Static files (CSS, JavaScript, Images)\n\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n\n\n# Default primary key field type\n\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"
        },
        {
            "file": "urls.py",
            "path": "qr_code_generator/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "qr_code_generator/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\n\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"
        },
        {
            "file": "__init__.py",
            "path": "qr_code_generator/__init__.py",
            "code": ""
        }
    ],
    "5": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "apps.py",
            "path": "example_app/apps.py",
            "code": "from django.apps import AppConfig\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "import markdown\nimport os\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    html_output = \"\"\n    markdown_input = \"\"\n    file_name = \"\"\n\n    if request.method == \"POST\":\n        if 'upload_file' in request.FILES:\n            # Handle file upload\n            uploaded_file = request.FILES['upload_file']\n            fs = FileSystemStorage()\n            file_name = fs.save(uploaded_file.name, uploaded_file)\n            file_path = fs.path(file_name)\n            # Read the uploaded Markdown file and convert its content\n            with open(file_path, 'r', encoding='utf-8') as f:\n                markdown_input = f.read()\n                html_output = markdown.markdown(markdown_input)\n        elif 'markdown' in request.POST and request.POST.get('markdown', ''):\n            # Convert Markdown text to HTML\n            markdown_input = request.POST.get('markdown', '')\n            if markdown_input:\n                html_output = markdown.markdown(markdown_input)\n    # Handle file download\n    if request.GET.get('download') == 'true':\n        with open(settings.MEDIA_ROOT+\"\\\\\"+request.GET.get('last_file_name'), 'r', encoding='utf-8') as f:\n            markdown_input = f.read()\n            html_output = markdown.markdown(markdown_input)\n        response = HttpResponse(html_output, content_type='text/html')\n        response['Content-Disposition'] = 'attachment; filename=\"converted.html\"'\n        return response\n\n    return render(request, 'convert.html', {\n        'markdown_input': markdown_input,\n        'html_output': html_output,\n        'file_name': file_name if file_name else None\n    })\n\ndef about(request):\n    return render(request, 'about.html')\n"
        },
        {
            "file": "about.html",
            "path": "example_app/templates/about.html",
            "code": "<h1>About the Markdown to HTML Converter</h1>\n\n<!-- Team Information Section -->\n<section id=\"team\">\n  <h2>Team Information</h2>\n  <p>This Markdown to HTML converter was developed by a passionate team of web developers.</p>\n  <ul>\n    <li><strong>AI</strong> - Lead Developer</li>\n    <li><strong>AI</strong> - Frontend Specialist</li>\n    <li><strong>AI</strong> - Backend Developer</li>\n  </ul>\n</section>\n\n<!-- FAQ Section -->\n<section id=\"faq\">\n  <h2>FAQ (Frequently Asked Questions)</h2>\n  <h3>1. What is this converter for?</h3>\n  <p>This tool allows users to convert Markdown text into HTML format, making it easier to publish styled content on the web.</p>\n\n  <h3>2. How do I upload a Markdown file for conversion?</h3>\n  <p>Navigate to the \"Convert\" page, where you can either paste Markdown text or upload a file for conversion.</p>\n\n  <h3>3. Can I download the converted HTML?</h3>\n  <p>Yes, after converting your Markdown text to HTML, you have the option to download the resulting HTML file.</p>\n</section>\n"
        },
        {
            "file": "convert.html",
            "path": "example_app/templates/convert.html",
            "code": "<h1>Convert Markdown to HTML</h1>\n\n<form method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n\n    <!-- Markdown Text Input Area -->\n    <label for=\"markdown_input\">Enter Markdown:</label>\n    <textarea id=\"markdown_input\" name=\"markdown\">{{ markdown_input }}</textarea>\n\n    <!-- Convert Button -->\n    <button id=\"convert_button\" type=\"submit\">Convert</button>\n\n    <hr/>\n\n    <!-- File Upload Input -->\n    <label for=\"upload_file\">Or upload a Markdown file:</label>\n    <input type=\"file\" id=\"upload_file\" name=\"upload_file\">\n    <button type=\"submit\" id=\"upload_file_btn\">Upload and Convert</button>\n</form>\n\n{% if html_output %}\n<!-- HTML Output Area -->-\n<div id=\"html_output\">\n    <h2>HTML Output</h2>\n    {{ html_output|safe }}\n</div>\n{% endif %}\n{% if file_name %}\n<!-- Download HTML Button -->\n<a href=\"?download=true&last_file_name={{ file_name }}\">\n    <button id=\"download_html\">Download HTML</button>\n</a>\n{% endif %}\n\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<h1>Welcome</h1>\n<p id=\"introduction\">This is the Markdown to HTML converter.</p>\n<nav>\n  <a href='/convert/' id=\"convert_link\">Convert</a>\n  <a href='/about/' id=\"about_link\">About</a>\n</nav>\n"
        },
        {
            "file": null,
            "path": "media",
            "code": ""
        },
        {
            "file": "settings.py",
            "path": "project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\n# File upload settings\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"
        },
        {
            "file": "urls.py",
            "path": "project/urls.py",
            "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n                  path('admin/', admin.site.urls),\n                  path('', include('example_app.urls')),\n              ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"
        },
        {
            "file": "wsgi.py",
            "path": "project/wsgi.py",
            "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"
        }
    ],
    "6": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(to=TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import HomeView, TodoListView, AnalysisView, delete_todo_item, edit_todo_item, TodoItemView, \\\n    delete_todo, edit_todo, complete_todo_item\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/',complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView\nfrom .models import TodoList, TodoItem\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        return context\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def get_queryset(self):\n        queryset = TodoList.objects.all()\n        for todolist in queryset:\n            flag = True\n            for todoitem in todolist.todoitem_set.all():\n                if todoitem.completed:\n                    continue\n                flag = False\n                break\n            todolist.completed = flag\n            todolist.save()\n        return queryset\n\n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\n\ndef edit_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        todo.title = title\n        todo.description = description\n        todo.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todo': todo})\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n\n    def get_queryset(self):\n        pk = self.kwargs.get('pk')\n        todolist = get_object_or_404(TodoList, pk=pk)\n        queryset = TodoItem.objects.filter(todolist=todolist)\n        return queryset\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        pk = self.kwargs.get('pk')\n        context['todolist'] = get_object_or_404(TodoList, pk=pk)\n        return context\n\n    def post(self, request, *args, **kwargs):\n        pk = request.POST.get('pk')\n        todolist = get_object_or_404(TodoList, pk=pk)\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoItem.objects.create(todolist=todolist, title=title, description=description)\n        return redirect('view_todo_item', pk=pk)\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todolist_pk)\n\n\ndef edit_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        todo_item.title = title\n        todo_item.description = description\n        todo_item.save()\n        return redirect('view_todo_item', pk=todo_item.todolist.pk)\n    return render(request, 'edit_todo_item.html', {'todo_item': todo_item})\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todolist_pk)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_queryset(self):\n        queryset = TodoItem.objects.all()\n        return queryset\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n\n        # 示例任务数据，可以从数据库中动态获取\n        tasks = [\n            {'title': obj.title, 'completed': obj.completed, 'category': obj.todolist.title} for obj in self.get_queryset()\n        ]\n\n        # 任务完成情况的数据（已完成 vs 未完成）\n        completed_count = sum(1 for task in tasks if task['completed'])\n        not_completed_count = len(tasks) - completed_count\n        task_completion_data = {\n            'labels': ['Completed', 'Not Completed'],\n            'data': [completed_count, not_completed_count]\n        }\n\n        # 任务类别分布的数据\n        category_distribution = {}\n        for task in tasks:\n            category = task['category']\n            if category not in category_distribution:\n                category_distribution[category] = 0\n            category_distribution[category] += 1\n\n        task_distribution_data = {\n            'labels': list(category_distribution.keys()),\n            'data': list(category_distribution.values())\n        }\n\n        # 将数据传递到模板上下文中\n        context['task_completion_data'] = task_completion_data\n        context['task_distribution_data'] = task_distribution_data\n\n        return context\n"
        },
        {
            "file": "0001_initial.py",
            "path": "example_app/migrations/0001_initial.py",
            "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "analysis.html",
            "path": "example_app/templates/analysis.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <!-- 引入 Chart.js -->\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n\n    <h1>Task Analysis</h1>\n\n    <!-- 任务完成情况图表 -->\n    <div>\n        <h2>Task Completion Chart</h2>\n        <canvas id=\"taskCompletionChart\"></canvas>\n    </div>\n\n    <!-- 任务分布图表 -->\n    <div>\n        <h2>Task Distribution Chart</h2>\n        <canvas id=\"taskDistributionChart\"></canvas>\n    </div>\n\n    <script>\n        // 任务完成情况图表（饼图）\n        var ctx1 = document.getElementById('taskCompletionChart').getContext('2d');\n        var taskCompletionChart = new Chart(ctx1, {\n            type: 'pie',\n            data: {\n                labels: {{ task_completion_data.labels|safe }},  // 标签：已完成和未完成\n                datasets: [{\n                    data: {{ task_completion_data.data|safe }},   // 数据：任务完成情况\n                    backgroundColor: ['#36a2eb', '#ff6384'],      // 颜色设置\n                    borderColor: '#fff',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                plugins: {\n                    legend: {\n                        position: 'top',\n                    }\n                }\n            }\n        });\n\n        // 任务分布图表（条形图）\n        var ctx2 = document.getElementById('taskDistributionChart').getContext('2d');\n        var taskDistributionChart = new Chart(ctx2, {\n            type: 'bar',\n            data: {\n                labels: {{ task_distribution_data.labels|safe }},  // 各任务类别标签\n                datasets: [{\n                    label: 'Task Distribution by Category',\n                    data: {{ task_distribution_data.data|safe }},  // 各类别的任务数量\n                    backgroundColor: '#4bc0c0',                     // 条形颜色\n                    borderColor: '#fff',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                },\n                plugins: {\n                    legend: {\n                        display: false\n                    }\n                }\n            }\n        });\n    </script>\n    <a href=\"{% url 'home' %}\" id=\"return\">Home</a>\n</body>\n</html>\n"
        },
        {
            "file": "edit_todo.html",
            "path": "example_app/templates/edit_todo.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <h1>Edit Todo List</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo.title }}\" required>\n        <label for=\"description\">Description:</label>\n        <textarea id=\"description\" name=\"description\">{{ todo.description }}</textarea>\n        <button type=\"submit\" id=\"submit\">Save Changes</button>\n    </form>\n    <a href=\"{% url 'todo_list' %}\">Back</a>\n</body>\n</html>"
        },
        {
            "file": "edit_todo_item.html",
            "path": "example_app/templates/edit_todo_item.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <h1>Edit Todo Item</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo_item.title }}\" required>\n        <label for=\"description\">Description:</label>\n        <textarea id=\"description\" name=\"description\">{{ todo_item.description }}</textarea>\n        <button type=\"submit\" id=\"submit\">Save Changes</button>\n    </form>\n</body>\n</html>"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Home Page</h1>\n    <p>This is the welcome message and overview.</p>\n    <a href=\"/todos/\" id=\"navigate-todo-lists\">View Todo List</a>\n    <a href=\"/analysis/\" id=\"dashboard-link\">View Analysis</a>\n</body>\n</html>"
        },
        {
            "file": "tasks.html",
            "path": "example_app/templates/tasks.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n<h1>Todo List {{ todolist.title }}</h1>\n<ul>\n    {% for item in object_list %}\n    <li class=\"task{% if item.completed %} completed {% endif %}\">\n        {{ item.title }} - {{ item.description }}{% if item.completed %} - completed {% endif %}\n        <a href=\"{% url 'edit_todo_item' item.id %}\">\n            <button class=\"edit-todo-item\">Edit</button>\n        </a>\n        <a href=\"{% url 'delete_todo_item' item.id %}\">\n            <button class=\"delete-todo-item\">Delete</button>\n        </a>\n        <a href=\"{% url 'complete_todo_item' item.id %}\">\n           <button class=\"complete-todo-item\">Complete</button>\n        </a>\n    </li>\n    {% endfor %}\n</ul>\n<form method=\"post\">\n    {% csrf_token %}\n    <input type=\"hidden\" id=\"pk\" name=\"pk\" value=\"{{ todolist.pk }}\">\n    <label for=\"title\">Title:</label>\n    <input type=\"text\" id=\"title\" name=\"title\" required>\n    <label for=\"description\">Description:</label>\n    <textarea id=\"description\" name=\"description\"></textarea>\n    <button type=\"submit\" id=\"submit\">Add Todo</button>\n</form>\n<a href=\"{% url 'todo_list' %}\" id=\"return\">Return</a>\n</body>\n</html>"
        },
        {
            "file": "todo_list.html",
            "path": "example_app/templates/todo_list.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n</head>\n<body>\n<h1>Todo List</h1>\n<ul>\n    {% for item in object_list %}\n    <li>\n        {{ item.title }} - {{ item.description }}\n        <a href=\"{% url 'view_todo_item' item.id %}\">\n            <button class=\"todo-list-selector\">View</button>\n        </a>\n        <a href=\"{% url 'edit_todo' item.id %}\">\n            <button class=\"todo-list-edit\">Edit</button>\n        </a>\n        <a href=\"{% url 'delete_todo' item.id %}\">\n            <button class=\"todo-list-delete\">Delete</button>\n        </a>\n    </li>\n    {% endfor %}\n</ul>\n<form method=\"post\">\n    {% csrf_token %}\n    <label for=\"title\">Title:</label>\n    <input type=\"text\" id=\"title\" name=\"title\" required>\n    <label for=\"description\">Description:</label>\n    <textarea id=\"description\" name=\"description\"></textarea>\n    <button type=\"submit\" id=\"submit\">Add Todo</button>\n</form>\n<a href=\"{% url 'home' %}\" id=\"return\">Home</a>\n</body>\n</html>"
        },
        {
            "file": "settings.py",
            "path": "project/settings.py",
            "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"
        },
        {
            "file": "urls.py",
            "path": "project/urls.py",
            "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "project/wsgi.py",
            "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"
        }
    ],
    "7": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"transactions_user\")\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name=\"support_request_user\")\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Support request from {self.name} ({self.email})\"\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom .views import *\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('signup/', SignupView.as_view(), name='signup'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('dashboard/', DashboardView.as_view(), name='dashboard'),\n    path('charts/', ChartsView.as_view(), name='charts'),\n    path('settings/', SettingsView.as_view(), name='settings'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('download_report/', DownloadReportView.as_view(), name='download_report'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "import csv\nfrom datetime import datetime\n\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db import models\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse, HttpRequest\nfrom django.utils.timezone import now\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, update_session_auth_hash, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\n\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    login_url = 'login'\n\n\nclass HomeView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'home.html')\n\n\nclass LoginView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'login.html')\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('dashboard')\n        else:\n            messages.error(request, 'Invalid credentials')\n            return redirect('login')\n\n\nclass SignupView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'signup.html')\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        confirm_password = request.POST.get('confirm_password')\n        if password != confirm_password:\n            messages.error(request, 'Passwords do not match')\n            return redirect('signup')\n        email = request.POST.get('email')\n        if not User.objects.filter(username=username).exists():\n            user = User.objects.create_user(username=username, password=password, email=email)\n            user.save()\n            messages.success(request, 'Account created successfully')\n            return redirect('login')\n        else:\n            messages.error(request, 'Username already exists')\n            return redirect('signup')\n\n\nclass LogoutView(LoginRequiredView):\n    def get(self, request):\n        logout(request)  # Logs out the user\n        messages.success(request, \"You have been logged out successfully.\")\n        return redirect('login')  # Redirect to login page after logging out\n\n\nclass DashboardView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        transactions = Transaction.objects.filter(user=request.user)\n        categories = Category.objects.all()\n        try:\n            # Filter\n            start_date = request.GET.get('start_date')\n            end_date = request.GET.get('end_date')\n            category = request.GET.get('filter_category')\n            try:\n                category = Category.objects.get(name=category)\n            except Category.DoesNotExist:\n                pass\n            filtered_flag = True\n            transactions_condition = {\n                'date__gte': start_date,\n                'date__lte': end_date,\n                'category': category,\n            }\n            for key in list(transactions_condition.keys()):\n                if not transactions_condition[key]:\n                    del transactions_condition[key]\n            if transactions_condition:\n                transactions = transactions.filter(**transactions_condition)\n        except:\n            # Not a filtered data\n            filtered_flag = False\n            category = None\n\n        return render(request, 'dashboard.html',\n                      {'transactions': transactions, 'categories': categories,\n                       'category': category if category else None,\n                       'filtered_flag': True if filtered_flag else False})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        action = request.POST.get('action')\n        if action == 'add':\n            # Add transaction logic\n            amount = request.POST.get('amount')\n            description = request.POST.get('description')\n            category_id = request.POST.get('category')\n            date = request.POST.get('date')\n\n            if amount and description and date:\n                category = Category.objects.get(id=category_id)\n                Transaction.objects.create(\n                    user=request.user,\n                    amount=amount,\n                    description=description,\n                    category=category,\n                    date=date  # Saving the date field\n                )\n                messages.success(request, 'Transaction added successfully')\n            else:\n                messages.error(request, 'All fields are required')\n        elif action == 'edit':\n            # Edit transaction logic\n            if 'delete_transaction' in request.POST:\n                transaction_id = request.POST.get('delete_transaction')\n                transaction = get_object_or_404(Transaction, id=transaction_id, user=request.user)\n                transaction.delete()\n                messages.success(request, 'Transaction deleted successfully')\n                return redirect('dashboard')  # 重定向到交易列表或相关页面\n\n            transaction_id = request.POST.get('edit_transaction')\n            amount = request.POST.get('amount_' + transaction_id)\n            description = request.POST.get('description_' + transaction_id)\n            category_id = request.POST.get('category_' + transaction_id)\n            date = request.POST.get('date_' + transaction_id)\n\n            try:\n                transaction = Transaction.objects.get(id=transaction_id, user=request.user)\n                transaction.amount = amount\n                transaction.description = description\n                transaction.category = Category.objects.get(id=category_id)\n                transaction.date = date  # Updating the date field\n                transaction.save()\n                messages.success(request, 'Transaction updated successfully')\n            except Transaction.DoesNotExist:\n                messages.error(request, 'Transaction not found')\n        else:\n            messages.error(request, 'Invalid action')\n\n        return redirect('dashboard')\n\n\nclass ChartsView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        # Fetch transactions for the current user\n        transactions = Transaction.objects.filter(user=request.user).order_by('date')\n\n        # Prepare data for the \"Transactions Over Time\" chart\n        time_labels = [transaction.date.strftime('%Y-%m-%d') for transaction in transactions]\n        time_data = [float(transaction.amount) for transaction in transactions]\n\n        # Prepare data for the \"Category Structure\" chart\n        categories = Category.objects.all()\n        category_totals = {category.name: 0 for category in categories}\n\n        for transaction in transactions:\n            if transaction.category:\n                category_totals[transaction.category.name] += float(transaction.amount)\n\n        structure_labels = list(category_totals.keys())\n        structure_data = list(category_totals.values())\n\n        # Pass data to the template\n        return render(request, 'charts.html', {\n            'time_labels': time_labels,\n            'time_data': time_data,\n            'structure_labels': structure_labels,\n            'structure_data': structure_data,\n        })\n\n\nclass SettingsView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        categories = Category.objects.all()  # Fetch all categories\n        return render(request, 'settings.html', {'categories': categories})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        action = request.POST.get('action')\n\n        if action == 'update_profile':\n            # Update profile logic\n            name = request.POST.get('name')\n            email = request.POST.get('email')\n            new_password = request.POST.get('new_password')\n            confirm_password = request.POST.get('confirm_password')\n            password_flag = False\n            # Validate email and name\n            if not email:\n                messages.error(request, 'Email cannot be empty')\n            else:\n                request.user.email = email\n\n            if not name:\n                messages.error(request, 'Name cannot be empty')\n            else:\n                request.user.username = name\n\n            # Validate passwords\n            if new_password and confirm_password:\n                if new_password != confirm_password:\n                    messages.error(request, 'Passwords do not match')\n                else:\n                    request.user.set_password(new_password)\n                    password_flag = True\n            elif new_password or confirm_password:\n                messages.error(request, 'Both password fields must be filled out')\n\n            # Save changes if no errors\n            if not messages.get_messages(request):  # Ensure no errors exist\n                request.user.save()\n                messages.success(request, 'Profile updated successfully')\n            if password_flag:\n                logout(request)\n                redirect('login')\n            return redirect('settings')\n\n        elif action == 'add_category':\n            # Add new category logic\n            category_name = request.POST.get('category_name')\n            if category_name:\n                Category.objects.create(name=category_name)\n                messages.success(request, f'Category \"{category_name}\" added successfully.')\n            else:\n                messages.error(request, 'Category name cannot be empty')\n\n        elif action == 'edit_category':\n            # Edit existing category logic\n            category_id = request.POST.get('category_id')\n            new_name = request.POST.get('new_category_name')\n            try:\n                category = Category.objects.get(id=category_id)\n                if new_name:\n                    category.name = new_name\n                    category.save()\n                    messages.success(request, f'Category updated to \"{new_name}\".')\n                else:\n                    messages.error(request, 'New category name cannot be empty.')\n            except Category.DoesNotExist:\n                messages.error(request, 'Category does not exist.')\n\n        elif action == 'delete_category':\n            # Delete category logic\n            category_id = request.POST.get('category_id')\n            try:\n                category = Category.objects.get(id=category_id)\n                category.delete()\n                messages.success(request, 'Category deleted successfully.')\n            except Category.DoesNotExist:\n                messages.error(request, 'Category does not exist.')\n\n        else:\n            messages.error(request, 'Invalid action')\n\n        return redirect('settings')\n\n\nclass SupportView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        records = SupportRequest.objects.filter(user=request.user)\n        return render(request, 'support.html', {'records': records})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n\n        if name and email and message:\n            support_request = SupportRequest.objects.create(user=request.user, name=name, email=email, message=message)\n            support_request.save()\n            messages.success(request, 'Support Request Sent')\n            return redirect('support')  # Redirect to support page after submission\n        else:\n            messages.error(request, 'All fields are required.')\n            return redirect('support')\n\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request: HttpRequest) -> HttpResponse:\n        report_type = request.POST.get('report_type', 'full')\n\n        # Fetch all transactions for the full report or filter for the monthly report\n        if report_type == 'monthly':\n            current_month = datetime.now().month\n            transactions = Transaction.objects.filter(user=request.user, date__month=current_month)\n            categories = Category.objects.all()\n            reports = []\n            for category in categories:\n                total_amount = transactions.filter(category=category).aggregate(total=models.Sum('amount'))[\n                                   'total'] or 0\n                reports.append({\n                    'category': category.name,\n                    'total_amount': total_amount\n                })\n            reports.append(\n                {'category': 'Total', 'total_amount': transactions.aggregate(total=models.Sum('amount'))['total']})\n            return render(request, 'dashboard.html',\n                          {'transactions': transactions, 'categories': categories, 'reports': reports})\n        else:\n            transactions = Transaction.objects.filter(user=request.user)\n            filename = \"financial_report.csv\"\n\n        # Create the HttpResponse object for the CSV file\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n\n        writer = csv.writer(response)\n        writer.writerow(['Date', 'Category', 'Description', 'Amount'])\n\n        # Write transaction data to CSV\n        for transaction in transactions:\n            writer.writerow([transaction.date, transaction.category.name, transaction.description, transaction.amount])\n\n        return response\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "charts.html",
            "path": "example_app/templates/charts.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <header>\n        <h1>Transaction Charts</h1>\n    </header>\n\n    <main>\n        <section>\n            <h2>Transactions Over Time</h2>\n            <p>This chart shows your transaction amounts over time:</p>\n            <canvas id=\"timeChart\"></canvas> <!-- Chart.js canvas for time-based chart -->\n        </section>\n\n        <section>\n            <h2>Category Structure</h2>\n            <p>This chart shows the distribution of your transactions by category:</p>\n            <canvas id=\"structureChart\"></canvas> <!-- Chart.js canvas for category structure chart -->\n        </section>\n    </main>\n\n    <footer>\n        <p>&copy; 2024 Your Company Name. All rights reserved.</p>\n    </footer>\n\n    <script>\n        // Time-based chart data\n        const timeLabels = {{ time_labels|safe }};\n        const timeData = {{ time_data|safe }};\n\n        const ctxTime = document.getElementById('timeChart').getContext('2d');\n        const timeChart = new Chart(ctxTime, {\n            type: 'line',\n            data: {\n                labels: timeLabels,\n                datasets: [{\n                    label: 'Transaction Amounts Over Time',\n                    data: timeData,\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    fill: true,\n                    tension: 0.1\n                }]\n            },\n            options: {\n                scales: {\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Date'\n                        }\n                    },\n                    y: {\n                        title: {\n                            display: true,\n                            text: 'Amount'\n                        }\n                    }\n                }\n            }\n        });\n\n        // Category structure chart data\n        const structureLabels = {{ structure_labels|safe }};\n        const structureData = {{ structure_data|safe }};\n\n        const ctxStructure = document.getElementById('structureChart').getContext('2d');\n        const structureChart = new Chart(ctxStructure, {\n            type: 'doughnut',\n            data: {\n                labels: structureLabels,\n                datasets: [{\n                    label: 'Category Distribution',\n                    data: structureData,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                plugins: {\n                    legend: {\n                        position: 'top',\n                    },\n                }\n            }\n        });\n    </script>\n    <a href=\"{% url 'dashboard' %}\"><button>Return</button></a>\n</body>\n</html>\n"
        },
        {
            "file": "dashboard.html",
            "path": "example_app/templates/dashboard.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n<header>\n    <h1>Dashboard</h1>\n    <nav>\n        <ul>\n            <li><a href=\"{% url 'charts' %}\">View Charts</a></li>\n            <li><a href=\"{% url 'settings' %}\">Settings</a></li>\n            <li><a href=\"{% url 'support' %}\">Support</a></li>\n            <li><a href=\"{% url 'logout' %}\">Logout</a></li>\n        </ul>\n    </nav>\n    {% if messages %}\n    <ul>\n        {% for message in messages %}\n        <li>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</header>\n\n<main>\n    <section>\n        <h2>Manage Your Transactions</h2>\n        <p>Use the options below to manage your transactions:</p>\n\n        <!-- Add Transaction Form -->\n        <h3>Add Transaction</h3>\n        <form method=\"post\" action=\"{% url 'dashboard' %}\">\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"action\" value=\"add\">\n            <label for=\"description\">Transaction Name:</label>\n            <input type=\"text\" id=\"description\" name=\"description\" required><br>\n\n            <label for=\"amount\">Amount:</label>\n            <input type=\"number\" id=\"amount\" name=\"amount\" required><br>\n\n            <label for=\"date\">Date:</label>\n            <input type=\"date\" id=\"date\" name=\"date\" max=\"2099-12-31\" required><br>\n\n            <label for=\"category\">Category:</label>\n            <select id=\"category\" name=\"category\" required>\n                {% for category in categories %}\n                <option value=\"{{ category.id }}\">{{ category.name }}</option>\n                {% endfor %}\n            </select><br>\n\n            <input type=\"submit\" id=\"add_translation\" value=\"Add Transaction\">\n        </form>\n    </section>\n<section>\n    <!-- Filter Form -->\n    <h3>Filter Transactions</h3>\n\n    <form method=\"get\" action=\"{% url 'dashboard' %}\">\n        {% csrf_token %}\n        {% if filtered_flag %}\n        <label for=\"start_date\">Start Date:</label>\n        <input type=\"date\" id=\"start_date\" name=\"start_date\" value=\"{{ request.GET.start_date }}\" max=\"2099-12-31\">\n\n        <label for=\"end_date\">End Date:</label>\n        <input type=\"date\" id=\"end_date\" name=\"end_date\" value=\"{{ request.GET.end_date }}\" max=\"2099-12-31\">\n\n        <label for=\"filter_category\">Category:</label>\n        <select id=\"filter_category\" name=\"filter_category\">\n            <option value=\"\">All</option>\n            {% for category in categories %}\n            <option value=\"{{ category.id }}\" {% if category.id|stringformat:\"s\" == request.GET.category %} selected {% endif %}>\n                {{ category.name }}\n            </option>\n            {% endfor %}\n        </select>\n        {% else %}\n                <label for=\"start_date\">Start Date:</label>\n        <input type=\"date\" id=\"start_date\" name=\"start_date\" max=\"2099-12-31\">\n\n        <label for=\"end_date\">End Date:</label>\n        <input type=\"date\" id=\"end_date\" name=\"end_date\" max=\"2099-12-31\">\n\n        <label for=\"filter_category\">Category:</label>\n        <select id=\"filter_category\" name=\"filter_category\">\n            <option value=\"\">All</option>\n            {% for category in categories %}\n            <option value=\"{{ category.id }}\">\n                {{ category.name }}\n            </option>\n            {% endfor %}\n        </select>\n        {% endif %}\n        <button type=\"submit\" id=\"filter\">Filter</button>\n    </form>\n</section>\n    <section>\n        <!-- Edit Transactions List -->\n        <h3>Edit Transactions</h3>\n        <form method=\"post\" action=\"{% url 'dashboard' %}\">\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"action\" value=\"edit\">\n            <table>\n                <thead>\n                <tr>\n                    <th>Description</th>\n                    <th>Amount</th>\n                    <th>Date</th>\n                    <th>Category</th>\n                    <th>Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                {% for transaction in transactions %}\n                <tr>\n                    <td><input type=\"text\" name=\"description_{{ transaction.id }}\" class=\"description-input\" value=\"{{ transaction.description }}\"\n                               required></td>\n                    <td><input type=\"number\" name=\"amount_{{ transaction.id }}\" class=\"amount-input\" value=\"{{ transaction.amount }}\"\n                               required></td>\n                    <td><input type=\"date\" name=\"date_{{ transaction.id }}\" class=\"date-input\" value=\"{{ transaction.date|date:'Y-m-d' }}\"\n                               max=\"2099-12-31\" required></td>\n                    <td>\n                        <select name=\"category_{{ transaction.id }}\" class=\"category-input\" required>\n                            {% for category in categories %}\n                            <option value=\"{{ category.id }}\" {% if category.id == transaction.category.id %} selected {% endif %}>\n                                {{ category.name }}\n                            </option>\n                            {% endfor %}\n                        </select>\n                    </td>\n                    <td>\n                        <button type=\"submit\" name=\"edit_transaction\" class=\"edit-button\" value=\"{{ transaction.id }}\">Update</button>\n                        <button type=\"submit\" name=\"delete_transaction\" class=\"delete-button\" value=\"{{ transaction.id }}\">Delete</button>\n                    </td>\n                </tr>\n                {% endfor %}\n                </tbody>\n\n            </table>\n        </form>\n    </section>\n    <section>\n        <form method=\"post\" action=\"{% url 'download_report' %}\">\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"report_type\" value=\"monthly\">\n            <input type=\"submit\" id=\"generate_monthly_report\" value=\"Generate Monthly Report\">\n        </form>\n        {% if reports %}\n        <h3>Monthly Report Summary</h3>\n        <table>\n            <thead>\n            <tr>\n                <th>Category</th>\n                <th>Total Amount</th>\n            </tr>\n            </thead>\n            <tbody>\n            {% for item in reports %}\n            <tr>\n                <td>{{ item.category }}</td>\n                <td>{{ item.total_amount }}</td>\n            </tr>\n            {% empty %}\n            <tr>\n                <td colspan=\"2\">No transactions found for this month.</td>\n            </tr>\n            {% endfor %}\n            </tbody>\n        </table>\n        {% endif %}\n    </section>\n\n    <h3>Download Full Report</h3>\n    <form method=\"post\" action=\"{% url 'download_report' %}\">\n        {% csrf_token %}\n        <input type=\"hidden\" name=\"report_type\" value=\"full\">\n        <input type=\"submit\" id=\"download_csv\" value=\"Download CSV\">\n    </form>\n</main>\n\n<footer>\n    <p>&copy; 2024 Your Company Name. All rights reserved.</p>\n</footer>\n\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n    <header>\n        <h1>Welcome to Budget Control Website</h1>\n        <nav>\n            <ul>\n                <li><a href=\"{% url 'login' %}\">Login</a></li>\n                <li><a href=\"{% url 'signup' %}\">Signup</a></li>\n                <li><a href=\"{% url 'support' %}\">Support</a></li>\n            </ul>\n        </nav>\n    </header>\n</body>\n</html>\n"
        },
        {
            "file": "login.html",
            "path": "example_app/templates/login.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <h1>Login</h1>\n    {% if messages %}\n    <ul>\n        {% for message in messages %}\n        <li>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br>\n        <button type=\"submit\" id=\"submit\">Login</button>\n    </form>\n</body>\n</html>\n"
        },
        {
            "file": "settings.html",
            "path": "example_app/templates/settings.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n\n<div class=\"container\">\n    <h1>Settings</h1>\n\n    <!-- Display Messages -->\n    {% if messages %}\n    <div class=\"messages\">\n        {% for message in messages %}\n        <div class=\"message {{ message.tags }}\">{{ message }}</div>\n        {% endfor %}\n    </div>\n    {% endif %}\n\n    <!-- Profile Update Section -->\n    <div class=\"profile-update\">\n        <h2>Update Profile</h2>\n        <form method=\"POST\">\n            {% csrf_token %}\n\n            <!-- Name Field -->\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\" value=\"{{ request.user.username }}\" required>\n\n            <!-- Email Field -->\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" value=\"{{ request.user.email }}\" required>\n\n            <!-- New Password Field -->\n            <label for=\"new_password\">New Password:</label>\n            <input type=\"password\" id=\"new_password\" name=\"new_password\" placeholder=\"Enter new password\">\n\n            <!-- Confirm Password Field -->\n            <label for=\"confirm_password\">Confirm Password:</label>\n            <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\" placeholder=\"Confirm new password\">\n\n            <input type=\"hidden\" name=\"action\" value=\"update_profile\">\n\n            <!-- Save Button -->\n            <button type=\"submit\" id=\"save_button\">Update</button>\n        </form>\n    </div>\n\n    <!-- Manage Categories Section -->\n    <div class=\"manage-categories\">\n        <h2>Manage Categories</h2>\n\n        <!-- Form to Add Category -->\n        <form method=\"POST\" class=\"add-category-form\">\n            {% csrf_token %}\n            <label for=\"category_name\">New Category Name:</label>\n            <input type=\"text\" id=\"category_name\" name=\"category_name\" placeholder=\"Enter new category\" required>\n            <input type=\"hidden\" name=\"action\" value=\"add_category\">\n            <button type=\"submit\" id=\"add_category_button\">Add Category</button>\n        </form>\n\n        <!-- List of Categories -->\n        <ul class=\"category-list\">\n            {% for category in categories %}\n            <li>\n                {{ category.name }}\n                <form method=\"POST\" class=\"edit-category-form\" style=\"display:inline;\">\n                    {% csrf_token %}\n                    <input type=\"hidden\" name=\"category_id\" value=\"{{ category.id }}\">\n                    <input type=\"text\" name=\"new_category_name\" placeholder=\"New Name\" class=\"category-name-input\"\n                           required>\n                    <input type=\"hidden\" name=\"action\" value=\"edit_category\">\n                    <button type=\"submit\" class=\"edit-category-button\">Edit</button>\n                </form>\n                <form method=\"POST\" class=\"delete-category-form\" style=\"display:inline;\">\n                    {% csrf_token %}\n                    <input type=\"hidden\" name=\"category_id\" value=\"{{ category.id }}\">\n                    <input type=\"hidden\" name=\"action\" value=\"delete_category\">\n                    <button type=\"submit\" class=\"delete-category-button\">Delete</button>\n                </form>\n            </li>\n            {% endfor %}\n        </ul>\n    </div>\n</div>\n<a href=\"{% url 'dashboard' %}\">\n    <button>Return</button>\n</a>\n</body>\n</html>\n"
        },
        {
            "file": "signup.html",
            "path": "example_app/templates/signup.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n    <h1>Signup</h1>\n    {% if messages %}\n    <ul>\n        {% for message in messages %}\n        <li>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"><br>\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"><br>\n        <label for=\"confirm_password\">Confirm Password:</label>\n        <input type=\"password\" id=\"confirm_password\" name=\"confirm_password\"><br>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <button type=\"submit\" id=\"submit\">Signup</button>\n    </form>\n</body>\n</html>\n"
        },
        {
            "file": "support.html",
            "path": "example_app/templates/support.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            line-height: 1.6;\n        }\n\n        h1, h2 {\n            color: #333;\n        }\n\n        .faq {\n            margin: 20px 0;\n        }\n\n        .faq-question {\n            font-weight: bold;\n            cursor: pointer;\n            margin: 10px 0;\n        }\n\n        .faq-answer {\n            display: none;\n            margin: 5px 0 15px 0;\n            padding-left: 20px;\n            border-left: 2px solid #007bff;\n        }\n    </style>\n</head>\n<body>\n<h1>Support</h1>\n<p>Contact us for any assistance or check our FAQs.</p>\n<section class=\"faq\" id=\"faq\">\n    <h2>General Questions</h2>\n\n    <div class=\"faq-question\" onclick=\"toggleAnswer('faq1')\">\n        What is the purpose of this project?\n    </div>\n    <div id=\"faq1\" class=\"faq-answer\">\n        This project aims to provide users with a platform to manage their transactions and seek support effectively.\n    </div>\n\n    <div class=\"faq-question\" onclick=\"toggleAnswer('faq2')\">\n        How do I submit a support request?\n    </div>\n    <div id=\"faq2\" class=\"faq-answer\">\n        You can submit a support request by filling out the form on the Support page. Provide your name, email, and\n        message.\n    </div>\n\n    <div class=\"faq-question\" onclick=\"toggleAnswer('faq3')\">\n        What types of transactions can I manage?\n    </div>\n    <div id=\"faq3\" class=\"faq-answer\">\n        You can manage various types of transactions, including income and expenses, and categorize them for better\n        tracking.\n    </div>\n\n    <div class=\"faq-question\" onclick=\"toggleAnswer('faq4')\">\n        How can I view my financial reports?\n    </div>\n    <div id=\"faq4\" class=\"faq-answer\">\n        Financial reports can be viewed in the Reports section of the dashboard, where you can see insights based on\n        your transactions.\n    </div>\n    <script>\n        function toggleAnswer(id) {\n            const answer = document.getElementById(id);\n            answer.style.display = answer.style.display === 'block' ? 'none' : 'block';\n        }\n    </script>\n</section>\n<section>\n    <h2>Support Request Form</h2>\n    {% if messages %}\n    {% for message in messages %}\n    <div class=\"alert {{ message.tags }}\">{{ message }}</div>\n    {% endfor %}\n    {% endif %}\n    <form method=\"post\" action=\"{% url 'support' %}\">\n        {% csrf_token %}\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required><br>\n\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required><br>\n\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\" required></textarea><br>\n\n        <input type=\"submit\" value=\"Submit\" id=\"submit\">\n    </form>\n    <section>\n        <h3>Sent Requests</h3>\n        <ul>\n            {% for record in records %}\n            <li>\n                <strong>Name:</strong> {{ record.name }}<br>\n                <strong>Email:</strong> {{ record.email }}<br>\n                <strong>Message:</strong> {{ record.message }}<br>\n                <strong>Date:</strong> {{ record.submitted_at|date:\"Y-m-d H:i\" }}<br>\n            </li>\n            {% empty %}\n            <li>No requests have been sent yet.</li>\n            {% endfor %}\n        </ul>\n    </section>\n</section>\n<a href=\"{% url 'dashboard' %}\">\n    <button>Return</button>\n</a>\n</body>\n</html>\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'formatters': { #格式化器\n#         'standard': {\n#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'\n#             },\n#         'simple': {\n#             'format': '[%(levelname)s]> %(message)s'\n#             },\n#     },\n#     'filters': {\n#     'require_debug_true': {\n#         '()': 'django.utils.log.RequireDebugTrue',\n#         },\n#  },\n#     'handlers': {\n#         'default': {                                            # 用于文件输出\n#             'level': 'DEBUG',                                    # 输出日志等级\n#             'class': 'logging.handlers.RotatingFileHandler',    # 日志类型\n#             'filename': 'django.log',          # 具体日志文件的名字\n#             'maxBytes': 1024 * 1024 * 2,                        # 日志大小\n#             'backupCount': 1,                                   # 备份数量\n#             'formatter':'standard',                             # 输出日志格式\n#             'encoding': 'utf-8',                                # 输出日志编码\n#         }\n#     },\n#     'loggers': {    #日志分配到哪个handlers中\n#         'django': {\n#             'handlers': ['default'],         # 上线之后可以把'console'移除\n#             'level':'DEBUG',\n#             'propagate': True,       # 向不向更高级别的logger传递\n#         }\n#  }\n# }"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ],
    "8": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "\n#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? \"\n            \"Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']\n\n    # Customizing the fields\n    datetime = forms.DateTimeField(\n        widget=forms.DateTimeInput(attrs={'type': 'datetime-local', 'max': '2099-12-31 23:59'}),\n    )\n"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\nfrom django.utils import timezone\n\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "\nfrom django.urls import path\nfrom .views import HomePageView, AddEventView, EditEventView, DeleteEventView, ListEventsView, EventDetailsView, HelpView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('calendar/add-event/', AddEventView.as_view(), name='add_event'),\n    path('calendar/edit-event/<int:event_id>/', EditEventView.as_view(), name='edit_event'),\n    path('calendar/delete-event/<int:event_id>/', DeleteEventView.as_view(), name='delete_event'),\n    path('calendar/view-events/', ListEventsView.as_view(), name='view_events'),\n    path('calendar/view-event-details/<int:event_id>/', EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', HelpView.faq, name='faq'),\n    path('help/user-guide/', HelpView.user_guide, name='user_guide'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.http import HttpResponse\nfrom django.contrib import messages\n\nfrom .forms import EventForm\nfrom .models import Event\n\n\nclass HomePageView(View):\n    '''Handles rendering of the home page.'''\n\n    def get(self, request):\n        '''Displays the selected month’s calendar with events.'''\n        # Get current year and month\n        today = datetime.now()\n        current_year = today.year\n        current_month = today.month\n\n        # Check if a month and year are passed as GET parameters\n        month = request.GET.get('month', current_month)\n        year = request.GET.get('year', current_year)\n\n        # Convert month and year to integers\n        month = int(month)\n        year = int(year)\n\n        # Create a calendar\n        month_calendar = calendar.monthcalendar(year, month)\n\n        # Prepare a dictionary to hold events by date\n        events_by_date = {}\n        events = Event.objects.filter(datetime__year=year, datetime__month=month)\n\n        # Organizing events by date\n        for event in events:\n            event_date = event.datetime.day\n            if event_date not in events_by_date:\n                events_by_date[event_date] = []\n            events_by_date[event_date].append(event)\n\n        # Create the calendar data structure\n        calendar_data = []\n        for week in month_calendar:\n            week_data = []\n            for day in week:\n                if day == 0:  # Empty day in the calendar\n                    week_data.append({'day': '', 'events': []})\n                else:\n                    # Prepare day data\n                    day_events = events_by_date.get(day, [])\n                    week_data.append({'day': day, 'events': day_events})\n            calendar_data.append(week_data)\n\n        # Prepare context\n        context = {\n            'calendar': calendar_data,\n            'current_year': year,\n            'current_month': month,\n            'today': today,\n            'months': list(calendar.month_name)[1:],  # Get month names for dropdown\n            'years': range(today.year - 5, today.year + 6)  # Allow selection of years\n        }\n        return render(request, 'home.html', context)\n\n\nclass AddEventView(View):\n    '''Handles calendar-related actions.'''\n\n    def get(self, request):\n        '''Displays an empty event form for adding a new event.'''\n        form = EventForm()\n        return render(request, 'add_event.html', {'form': form})\n\n    def post(self, request):\n        '''Processes form data for a new event.'''\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.info(request, 'Event added successfully.')\n            return redirect('home')\n        return render(request, 'add_event.html', {'form': form})\n\n\nclass EditEventView(View):\n    def get(self, request, event_id):\n        '''Allows users to modify existing events.'''\n        event = get_object_or_404(Event, id=event_id)\n        form = EventForm(instance=event)\n        return render(request, 'edit_event.html', {'form': form})\n\n    def post(self, request, event_id):\n        event = get_object_or_404(Event, id=event_id)\n        if request.method == 'POST':\n            form = EventForm(request.POST, instance=event)\n            if form.is_valid():\n                form.save()\n                return redirect('view_event_details', event_id=event.id)\n        else:\n            form = EventForm(instance=event)\n        return render(request, 'edit_event.html', {'form': form})\n\n\nclass DeleteEventView(View):\n    def get(self, request, event_id):\n        '''Allows users to remove events from their calendar.'''\n        event = get_object_or_404(Event, id=event_id)\n        event.delete()\n        messages.success(request, 'Event removed successfully.')\n        return redirect('view_events')\n\n\nclass ListEventsView(View):\n    def get(self, request):\n        query = request.GET.get('q', '')\n        if query:\n            events = Event.objects.filter(\n                Q(title__icontains=query) | Q(description__icontains=query)\n            ).order_by('-datetime')\n        else:\n            events = Event.objects.all().order_by('-datetime')\n\n        return render(request, 'view_events.html', {'events': events, 'query': query})\n\n\nclass EventDetailsView(View):\n    def get(self, request, event_id):\n        '''Displays detailed information about a selected event.'''\n        event = get_object_or_404(Event, id=event_id)\n        return render(request, 'view_event_details.html', {'event': event})\n\n\nclass HelpView:\n    '''Handles the help and support sections.'''\n\n    @staticmethod\n    def faq(request):\n        '''Displays frequently asked questions.'''\n        questions = [\n            {\n                'question': 'How do I add an event?',\n                'answer': 'To add an event, click on the \"Add Event\" link on the home page, fill out the form, and submit.'\n            },\n            {\n                'question': 'Can I edit an existing event?',\n                'answer': 'Yes, you can edit events by clicking on the \"Edit\" link next to the event in the event list.'\n            },\n            {\n                'question': 'How do I delete an event?',\n                'answer': 'To delete an event, go to the event details page and click the \"Delete\" button.'\n            },\n            {\n                'question': 'What should I do if I forget my password?',\n                'answer': 'If you forget your password, click on the \"Forgot Password?\" link on the login page to reset it.'\n            },\n            {\n                'question': 'Is there a mobile app available?',\n                'answer': 'Currently, we only offer a web application. However, it is mobile-friendly and can be accessed on any device.'\n            }\n        ]\n        return render(request, 'faq.html', {'questions': questions})\n\n    @staticmethod\n    def user_guide(request):\n        '''Offers a detailed guide on how to use the application.'''\n        guide = (\n            \"<h2>User Guide</h2>\"\n            \"<p>Welcome to the Calendar Application! Here are some helpful instructions to get you started:</p>\"\n            \"<h3>1. Adding Events</h3>\"\n            \"<p>To add an event, click the 'Add Event' link from the home page. Fill out the form with the event details and submit.</p>\"\n            \"<h3>2. Viewing Events</h3>\"\n            \"<p>You can view all your events on the home page. Click on an event to see more details.</p>\"\n            \"<h3>3. Editing Events</h3>\"\n            \"<p>To edit an event, click on the 'Edit' link next to the event you wish to modify. Update the details and save changes.</p>\"\n            \"<h3>4. Deleting Events</h3>\"\n            \"<p>To delete an event, navigate to the event details page and click the 'Delete' button.</p>\"\n            \"<h3>5. Frequently Asked Questions</h3>\"\n            \"<p>If you have any questions, refer to our FAQ section.</p>\"\n            \"<h3>6. Support</h3>\"\n            \"<p>If you need further assistance, please contact our support team at support@example.com.</p>\"\n        )\n        return render(request, 'user_guide.html', {'guide': guide})\n"
        },
        {
            "file": "0001_initial.py",
            "path": "example_app/migrations/0001_initial.py",
            "code": "# Generated by Django 5.1.1 on 2024-10-30 08:50\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "add_event.html",
            "path": "example_app/templates/add_event.html",
            "code": "<html>\n<head><title>Add Event</title></head>\n<body>\n<h1>Add a New Event</h1>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n<button type=\"submit\" id=\"submit\">Add Event</button>\n    <a href=\"{% url 'home' %}\" id=\"home\">Home</a>\n    <a href=\"{% url 'view_events' %}\" id=\"back_button\">Back</a>\n</form>\n</body>\n</html>"
        },
        {
            "file": "edit_event.html",
            "path": "example_app/templates/edit_event.html",
            "code": "<html>\n<head><title>Edit Event</title></head>\n<body>\n<h1>Edit Event</h1>\n<form method=\"post\">{% csrf_token %}\n{{ form.as_p }}\n<button type=\"submit\" id=\"submit\">Save Changes</button>\n    <a href=\"{% url 'view_events' %}\" id=\"back_button\">Back</a>\n</form>\n</body>\n</html>"
        },
        {
            "file": "faq.html",
            "path": "example_app/templates/faq.html",
            "code": "<html>\n<head><title>FAQ</title></head>\n<body>\n<h1>Frequently Asked Questions</h1>\n<ul id=\"faq\">\n    {% for question in questions %}\n    <li><b>{{ question.question }}</b>\n        <p>{{ question.answer }}</p></li>\n    {% endfor %}\n</ul>\n<a href=\"{% url 'home' %}\" id=\"back_button\">Back to Calendar</a>\n</body>\n</html>"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<html>\n<head>\n    <title>Home Page</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n\n        th {\n            background-color: #f2f2f2;\n        }\n\n        .calendar {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n<h1>Welcome to the Calendar Application!</h1>\n\n<!-- Navigation links -->\n<a href=\"{% url 'add_event' %}\" id=\"add_event\">Add Event</a> |\n<a href=\"{% url 'view_events' %}\" id=\"list_events\">View Events</a> |\n<a href=\"{% url 'faq' %}\" id=\"faq\">FAQ</a> |\n<a href=\"{% url 'user_guide' %}\" id=\"user_guide\">User Guide</a>\n{% if messages %}\n<ul>\n    {% for message in messages %}\n    <li>{{ message }}</li>\n    {% endfor %}\n</ul>\n{% endif %}\n<h2 id=\"today\">Today: {{ today.year }}-{{ today.month }}-{{ today.day }}</h2>\n<form method=\"get\" action=\"\">\n    <label for=\"year\">Select Year:</label>\n    <select name=\"year\" id=\"year\">\n        {% for year in years %}\n        <option value=\"{{ year }}\" {% if year == current_year %}selected{% endif %}>\n            {{ year }}\n        </option>\n        {% endfor %}\n    </select>\n    <label for=\"month\">Select Month:</label>\n    <select name=\"month\" id=\"month\">\n        {% for month in months %}\n        <option value=\"{{ forloop.counter }}\" {% if forloop.counter == current_month %}selected{% endif %}>\n            {{ month }}\n        </option>\n        {% endfor %}\n    </select>\n    <button type=\"submit\" id=\"switch_button\">View Calendar</button>\n</form>\n<!-- Basic Calendar Display -->\n<div class=\"calendar\" id=\"calendar\">\n    <h2>Monthly Calendar - {{ current_year }}-{{ current_month }}</h2>\n    <table>\n        <thead>\n        <tr>\n            <th>Sunday</th>\n            <th>Monday</th>\n            <th>Tuesday</th>\n            <th>Wednesday</th>\n            <th>Thursday</th>\n            <th>Friday</th>\n            <th>Saturday</th>\n        </tr>\n        </thead>\n        <tbody>\n        {% for week in calendar %}\n        <tr>\n            {% for day in week %}\n            <td>\n                {{ day.day }}\n                {% if day.events %}\n                <ul>\n                    {% for event in day.events %}\n                    <li><a href=\"{% url 'view_event_details' event.id %}\" class=\"details-link\">{{ event.title }}</a></li>\n                    {% endfor %}\n                </ul>\n                {% endif %}\n            </td>\n            {% endfor %}\n        </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</div>\n</body>\n</html>\n"
        },
        {
            "file": "user_guide.html",
            "path": "example_app/templates/user_guide.html",
            "code": "<html>\n<head><title>User Guide</title></head>\n<body>\n<h1>User Guide</h1>\n<p id=\"user_guide\">{{ guide|safe }}</p>\n<a href=\"{% url 'home' %}\" id=\"back_button\">Back to Calendar</a>\n</body>\n</html>"
        },
        {
            "file": "view_events.html",
            "path": "example_app/templates/view_events.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event List</title>\n</head>\n<body>\n    <h1>Event List</h1>\n    \n    <a href=\"{% url 'add_event' %}\">Add New Event</a> |\n    <a href=\"{% url 'home' %}\">Back to Calendar</a>\n    <form method=\"get\" action=\"{% url 'view_events' %}\">\n        <input type=\"text\" name=\"q\" placeholder=\"Search events\" value=\"{{ request.GET.q }}\" id=\"search_input\">\n        <button type=\"submit\" id=\"search_button\">Search</button>\n        <a href=\"{% url 'view_events' %}\"><button id=\"clear\"> Clear</button></a>\n    </form>\n    <table>\n        <thead>\n            <tr>\n                <th>Title</th>\n                <th>Description</th>\n                <th>Date</th>\n                <th>Time</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for event in events %}\n                <tr>\n                    <td>{{ event.title }}</td>\n                    <td>{{ event.description }}</td>\n                    <td>{{ event.datetime|date:\"Y-m-d\" }}</td>\n                    <td>{{ event.datetime|date:\"H:i\" }}</td>\n                    <td>\n                        <a href=\"{% url 'edit_event' event.id %}\"  class=\"edit_event\">Edit</a> |\n                        <a href=\"{% url 'delete_event' event.id %}\" class=\"delete_event\" onclick=\"return confirm('Are you sure you want to delete this event?');\">Delete</a>\n                    </td>\n                </tr>\n            {% empty %}\n                <tr>\n                    <td colspan=\"5\">No events available.</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>\n</title>\n</head>\n<body>\n\n</body>\n</html>"
        },
        {
            "file": "view_event_details.html",
            "path": "example_app/templates/view_event_details.html",
            "code": "<html>\n<head><title>Event Details</title></head>\n<body>\n<h1>Event Details</h1>\n<p>Title: {{ event.title }}</p>\n<p>Description: {{ event.description }}</p>\n<p>Event Datetime: {{ event.datetime }}</p>\n<p>Latest updated: {{ event.updated }}</p>\n<p>Created at: {{ event.created }}</p>\n<a href=\"{% url 'view_events' %}\" id=\"back_button\">Back</a>\n</body>\n</html>"
        },
        {
            "file": "asgi.py",
            "path": "project_name/asgi.py",
            "code": "\nimport os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "project_name/settings.py",
            "code": "\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_name.wsgi.application'\nASGI_APPLICATION = 'project_name.asgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"
        },
        {
            "file": "urls.py",
            "path": "project_name/urls.py",
            "code": "\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "project_name/wsgi.py",
            "code": "\nimport os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_wsgi_application()\n"
        }
    ],
    "9": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = ['name', 'email', 'company', 'message']\n\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = ['name', 'email', 'issue']"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\n\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    company = models.CharField(max_length=100, blank=True, null=True)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Contact Sales Inquiry from {self.name}\"\n\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    issue = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.name} - {self.email}\"\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.contrib import messages\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\n\nclass PricingPageView(FormView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = '/pricing/'\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, \"Thank you for reaching out! We’ll get back to you soon.\")\n        return super().form_valid(form)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['previous_requests'] = ContactSales.objects.all()\n        return context\n\n\nclass SupportView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = '/support/'  # Redirect after form submission\n\n    def form_valid(self, form):\n        # Save the form data to the SupportRequest model\n        form.save()\n\n        # Display a success message to the user\n        messages.success(self.request, \"Your support request has been submitted successfully.\")\n\n        return super().form_valid(form)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # Retrieve all previous support requests and add them to the context\n        context['previous_support_requests'] = SupportRequest.objects.all()\n        return context\n\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "about.html",
            "path": "example_app/templates/about.html",
            "code": "<html>\n<head><title>About Us</title></head>\n<body>\n    <div id=\"about_us\">\n        <h1>About Us</h1>\n        <p>Learn more about our team and company.</p>\n    </div>\n    <a href=\"{% url 'home' %}\" id=\"home\">Home</a>\n</body>\n</html>\n"
        },
        {
            "file": "features.html",
            "path": "example_app/templates/features.html",
            "code": "<html>\n<head><title>Features</title></head>\n<body>\n    <div id=\"features\">\n        <h1>Features of AI Chatbot</h1>\n        <p>Advanced NLP, Contextual Understanding, Multilingual Support, Integration Capability</p>\n    </div>\n    <a href=\"{% url 'home' %}\" id=\"home\">Home</a>\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<html>\n<head><title>Home</title></head>\n<body>\n    <h1>Welcome to the AI Chatbot!</h1>\n    <p id=\"introduction\">Our AI Chatbot offers incredible capabilities.</p>\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n    <nav>\n        <ul>\n            <li><a href=\"{% url 'features' %}\" id=\"features\">Features</a></li>\n            <li><a href=\"{% url 'pricing' %}\" id=\"pricing\">Pricing</a></li>\n            <li><a href=\"{% url 'support' %}\" id=\"support\">Support</a></li>\n            <li><a href=\"{% url 'about' %}\" id=\"about_us\">About Us</a></li>\n        </ul>\n    </nav>\n</body>\n</html>\n"
        },
        {
            "file": "pricing.html",
            "path": "example_app/templates/pricing.html",
            "code": "<html>\n<head><title>Pricing</title></head>\n<body>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n        <li\n        {% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n    <div id=\"plans\">\n        <h1>Pricing Plans</h1>\n        <table border=\"1\">\n            <thead>\n            <tr>\n                <th>Plan</th>\n                <th>Price</th>\n                <th>Features</th>\n            </tr>\n            </thead>\n            <tbody>\n            <tr>\n                <td>Free Plan</td>\n                <td>$0/month</td>\n                <td>\n                    <ul>\n                        <li>Access to basic features</li>\n                        <li>Community support</li>\n                        <li>Limited storage</li>\n                    </ul>\n                </td>\n            </tr>\n            <tr>\n                <td>Basic Plan</td>\n                <td>$9.99/month</td>\n                <td>\n                    <ul>\n                        <li>Access to all standard features</li>\n                        <li>Email support</li>\n                        <li>Increased storage</li>\n                    </ul>\n                </td>\n            </tr>\n            <tr>\n                <td>Pro Plan</td>\n                <td>$29.99/month</td>\n                <td>\n                    <ul>\n                        <li>Access to all features</li>\n                        <li>Priority support</li>\n                        <li>Unlimited storage</li>\n                        <li>Advanced analytics</li>\n                    </ul>\n                </td>\n            </tr>\n            </tbody>\n        </table>\n    </div>\n    <h1>Contact Sales</h1>\n    <form method=\"post\" id=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit\">Submit</button>\n    </form>\n\n    <h2>Your Previous Requests</h2>\n    {% if previous_requests %}\n    <ul>\n        {% for request in previous_requests %}\n        <li>{{ request.name }} - {{ request.email }} - {{ request.message }} ({{ request.created_at }})</li>\n        {% endfor %}\n    </ul>\n    {% else %}\n    <p>No previous requests found.</p>\n    {% endif %}\n    <a href=\"{% url 'pricing' %}\" id=\"back\">Back</a>\n    <a href=\"{% url 'home' %}\" id=\"home\">Home</a>\n</body>\n</html>\n"
        },
        {
            "file": "support.html",
            "path": "example_app/templates/support.html",
            "code": "<!-- templates/support.html -->\n<html>\n<head><title>Support</title></head>\n<body>\n    <h1>Support</h1>\n\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n\n    <!-- Support Form -->\n    <form method=\"post\" id=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit\">Submit</button>\n    </form>\n\n    <!-- Frequently Asked Questions -->\n    <h2>Frequently Asked Questions (FAQ)</h2>\n    <div id=\"faq\">\n        <h3>1. How do I reset my password?</h3>\n        <p>To reset your password, go to the login page and click on \"Forgot Password\". Follow the instructions to reset your password via email.</p>\n\n        <h3>2. How can I update my account information?</h3>\n        <p>To update your account information, log in and navigate to your profile settings. From there, you can edit your details and save the changes.</p>\n\n        <h3>3. What should I do if I encounter an error?</h3>\n        <p>If you encounter an error, please try refreshing the page. If the problem persists, submit a support request with details of the issue, and our team will assist you.</p>\n\n        <h3>4. How do I contact customer support?</h3>\n        <p>You can use the support form above to reach out to our support team. Fill in your details, describe your issue, and we'll get back to you as soon as possible.</p>\n\n        <h3>5. Where can I find documentation on using this service?</h3>\n        <p>Our documentation is available on the Help page, which can be accessed from the main navigation. If you have specific questions, feel free to submit a support request.</p>\n    </div>\n\n    <!-- Previous Support Requests -->\n    <h2>Previous Support Requests</h2>\n    {% if previous_support_requests %}\n        <ul>\n            {% for request in previous_support_requests %}\n                <li>{{ request.name }} - {{ request.email }} - {{ request.issue }} ({{ request.created_at }})</li>\n            {% endfor %}\n        </ul>\n    {% else %}\n        <p>No previous support requests found.</p>\n    {% endif %}\n    <a href=\"{% url 'home' %}\" id=\"home\">Home</a>\n</body>\n</html>\n"
        },
        {
            "file": "asgi.py",
            "path": "example_project/asgi.py",
            "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\n"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"example_app.urls\")),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        }
    ],
    "10": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\n# 用户注册表单\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'password1', 'password2']\nclass LoginForm(UserCreationForm):\n\n\n    class Meta:\n        model = User\n        fields = ['username', 'password1']\n# 用餐记录表单\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = ['name', 'calories', 'date', 'time', 'description']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date',\"max\":\"2099-12-31\"}),\n            'time': forms.TimeInput(attrs={'type': 'time'}),\n        }\n\n# 活动记录表单\nclass ActivityForm(forms.ModelForm):\n    class Meta:\n        model = Activity\n        fields = ['name', 'calories_burned', 'date', 'time', 'description']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date',\"max\":\"2099-12-31\"}),\n            'time': forms.TimeInput(attrs={'type': 'time'}),\n        }\n\n# 用户配置文件表单，用于更新用户偏好\nclass ProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = ['daily_calorie_goal', 'dietary_preferences']\n\n# 用户偏好表单，用于更新饮食偏好等\nclass PreferencesForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = ['dietary_preferences']\n"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.utils import timezone\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n# 用户配置文件模型，用于扩展用户的基本信息\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    daily_calorie_goal = models.IntegerField(default=2000)  # 默认每日卡路里目标\n    dietary_preferences = models.CharField(max_length=255, blank=True, null=True)  # 饮食偏好\n\n    def __str__(self):\n        return f\"{self.user.username}'s Profile\"\n\n# 用餐模型，记录每餐的相关信息\n\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    calories = models.IntegerField()\n    date = models.DateField(default=timezone.now)  # 使用 default=timezone.now 替代 auto_now_add\n    time = models.TimeField(default=timezone.now)  # 使用 default=timezone.now 替代 auto_now_add\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f\"{self.name} ({self.calories} kcal) - {self.date}\"\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    calories_burned = models.IntegerField()\n    date = models.DateField(default=timezone.now)  # 使用 default=timezone.now 替代 auto_now_add\n    time = models.TimeField(default=timezone.now)  # 使用 default=timezone.now 替代 auto_now_add\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f\"{self.name} ({self.calories_burned} kcal burned) - {self.date}\"\n\n\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Home Page\n    path('', views.home, name='home'),\n\n    # Sign Up and Login Pages\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n\n    # Dashboard\n    path('dashboard/', views.dashboard, name='dashboard'),\n\n    # Meal Search and Add\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_search, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n\n    # Activity Search and Add\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_search, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n\n    # Settings and User Preferences\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n\n    # Weekly Calorie Chart\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n\n    # Help and Support\n    path('help/', views.tutorials, name='tutorials'),\n]\n"
        },
        {
            "file": "utils.py",
            "path": "example_app/utils.py",
            "code": "import datetime\nfrom .models import Meal, Activity\n\n# 生成周卡路里图表数据\ndef get_weekly_calorie_chart(user):\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n\n        # 计算每日卡路里摄入和消耗\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n\n        # 填充图表数据\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n\n    # 将数据按时间顺序排序（从早到晚）\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n\n    return week_data\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from datetime import date\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity  # 假设我们有 Meal 和 Activity 模型\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm  # 假设我们有这些表单\nfrom .utils import get_weekly_calorie_chart  # 假设有一个生成图表的实用函数\nimport matplotlib.pyplot as plt\nimport io\nimport base64\nfrom datetime import timedelta, date\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Activity, UserProfile\n\n\n# 主页视图\ndef home(request):\n    return render(request, 'home.html')\n\n\n# 注册视图\ndef signup(request):\n    if request.method == \"POST\":\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n\n# 登录视图\ndef login_view(request):\n    if request.method == \"POST\":\n\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('dashboard')\n        else:\n\n            messages.error(request, 'Invalid username or password.')\n\n    return render(request, 'login.html')\n\n\n# 仪表盘视图\n@login_required\ndef dashboard(request):\n    faqs = [\n        {\"question\": \"How do I track a meal?\", \"answer\": \"Go to 'Meal Log' and add a new meal.\"},\n        {\"question\": \"How do I edit my profile?\", \"answer\": \"Go to 'Settings' and update your profile.\"},\n    ]\n    daily_calories = sum(meal.calories for meal in Meal.objects.filter(user=request.user, date=date.today()))\n    recent_meals = Meal.objects.filter(user=request.user).order_by('-date')[:5]\n    recent_activities = Activity.objects.filter(user=request.user).order_by('-date')[:5]\n    weekly_chart = get_weekly_calorie_chart(request.user)\n    return render(request, 'dashboard.html', {\n        'daily_calories': daily_calories,\n        'recent_meals': recent_meals,\n        'recent_activities': recent_activities,\n        'weekly_chart': weekly_chart,\n        'faqs': faqs\n    })\n\n\n# 用餐记录视图\n@login_required\ndef meal_log(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm()\n    meals = Meal.objects.filter(user=request.user)\n    return render(request, 'meal_log.html', {'meals': meals, 'form': form})\n\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm()\n    return render(request, 'add_meal.html', {'form': form})\n\n\n@login_required\ndef edit_meal(request, id):\n    meal = Meal.objects.get(id=id, user=request.user)\n\n    if request.method == 'POST':\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            form.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'edit_meal.html', {'form': form, \"meal\": meal})\n\n\n@login_required\ndef delete_meal(request, id):\n    meal = Meal.objects.get(id=id, user=request.user)\n    meal.delete()\n    return redirect('meal_log')\n\n\n# 活动记录视图\n@login_required\ndef activity_log(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False)\n            activity.user = request.user\n            activity.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm()\n    activities = Activity.objects.filter(user=request.user)\n    return render(request, 'activity_log.html', {'activities': activities, 'form': form})\n\n\n# 添加、编辑、删除活动记录\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False)\n            activity.user = request.user\n            activity.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm()\n    return render(request, 'add_activity.html', {'form': form})\n\n\n@login_required\ndef edit_activity(request, id):\n    activity = Activity.objects.get(id=id, user=request.user)\n    if request.method == 'POST':\n        form = ActivityForm(request.POST, instance=activity)\n        if form.is_valid():\n            form.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm(instance=activity)\n    return render(request, 'edit_activity.html', {'form': form, \"activity\": activity})\n\n\n@login_required\ndef delete_activity(request, id):\n    activity = Activity.objects.get(id=id, user=request.user)\n    activity.delete()\n    return redirect('activity_log')\n\n\n# 设置视图\n@login_required\ndef settings(request):\n    userprofile = UserProfile.objects.filter(user=request.user)\n    # print(\"ffg\")\n    # print(userprofile)\n    # recent_meals = Meal.objects.filter(user=request.user).order_by('-date')[:5]\n    # print(recent_meals)\n\n    return render(request, 'settings.html', {\n        'userprofile': userprofile,\n\n    })\n\n\n@login_required\ndef meal_search(request):\n    query = request.GET.get('query', '')\n    meals = Meal.objects.filter(user=request.user, name__icontains=query)\n    return render(request, 'meal_log.html', {'meals': meals, 'query': query})\n\n\n# 活动搜索\n@login_required\ndef activity_search(request):\n    query = request.GET.get('query', '')\n    activities = Activity.objects.filter(user=request.user, name__icontains=query)\n    return render(request, 'activity_log.html', {'activities': activities, 'query': query})\n\n\n# 帮助视图\n\n\n# 帮助页面视图\ndef tutorials(request):\n    return render(request, 'tutorials.html')\n\n\n@login_required\ndef update_profile(request):\n    profile_form = ProfileForm(instance=request.user.profile)\n    if request.method == 'POST':\n        profile_form = ProfileForm(request.POST, instance=request.user.profile)\n        if profile_form.is_valid():\n            profile_form.save()\n            messages.success(request, 'Profile updated successfully')\n            return redirect('settings')  # 可以跳转到仪表盘，或其他页面\n    return render(request, 'update_profile.html', {'profile_form': profile_form})\n\n\n@login_required\ndef update_preferences(request):\n    preferences_form = PreferencesForm(instance=request.user.profile)\n    if request.method == 'POST':\n        preferences_form = PreferencesForm(request.POST, instance=request.user.profile)\n        if preferences_form.is_valid():\n            preferences_form.save()\n            messages.success(request, 'Preferences updated successfully')\n            return redirect('settings')  # 或者可以跳转到其他页面\n    return render(request, 'update_preferences.html', {'preferences_form': preferences_form})\n\n\n@login_required\ndef weekly_calorie_chart(request):\n    # 获取当前日期\n    today = date.today()\n\n    # 获取过去七天的数据\n    days = [today - timedelta(days=i) for i in range(7)]\n    calorie_intake = []\n    calorie_expenditure = []\n\n    # 获取每一天的卡路里摄入数据\n    for day in days:\n        daily_meals = Meal.objects.filter(user=request.user, date=day)\n        daily_calories = sum(meal.calories for meal in daily_meals)\n        calorie_intake.append(daily_calories)\n\n        # 获取每一天的卡路里消耗数据\n        daily_activities = Activity.objects.filter(user=request.user, date=day)\n        daily_expenditure = sum(activity.calories_burned for activity in daily_activities)\n        calorie_expenditure.append(daily_expenditure)\n\n    # 使用 matplotlib 生成图表\n    fig, ax = plt.subplots()\n    ax.plot(days, calorie_intake, label='Calorie Intake', color='green', marker='o')\n    ax.plot(days, calorie_expenditure, label='Calorie Expenditure', color='red', marker='o')\n\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Calories')\n    ax.set_title('Weekly Calorie Intake vs Expenditure')\n    ax.legend()\n\n    # 将图表保存为图片并编码为base64\n    buf = io.BytesIO()\n    # plt.show()\n    plt.savefig(buf, format='png')\n    buf.seek(0)\n    image_base64 = base64.b64encode(buf.read()).decode('utf-8')\n    buf.close()\n\n    return render(request, 'weekly_calorie_chart.html', {'image_base64': image_base64})\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "activity_log.html",
            "path": "example_app/templates/activity_log.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Activity Log</title>\n</head>\n<body>\n    <h1>Activity Log</h1>\n\n    <form action=\"{% url 'activity_search' %}\" method=\"get\">\n        <input type=\"text\" name=\"query\" placeholder=\"Search for activities...\" id=\"search_activity\">\n        <button type=\"submit\" id=\"submit\">Search</button>\n    </form>\n\n    <h2>Logged Activities</h2>\n    <ul>\n        {% for activity in activities %}\n            <li>{{ activity.name }} - {{ activity.calories_burned }} kcal burned\n                <a href=\"{% url 'edit_activity' activity.id %}\">Edit</a>\n                <a href=\"{% url 'delete_activity' activity.id %}\">Delete</a>\n            </li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_activity' %}\">Add New Activity</a>\n    <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n</body>\n</html>\n"
        },
        {
            "file": "add_activity.html",
            "path": "example_app/templates/add_activity.html",
            "code": "<!-- templates/your_app/add_activity.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Add New Activity</h2>\n        <form method=\"POST\" action=\"{% url 'add_activity' %}\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"add_activity\">Add Activity</button>\n        </form>\n        <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "add_meal.html",
            "path": "example_app/templates/add_meal.html",
            "code": "<!-- templates/your_app/add_meal.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Meal - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Add New Meal</h2>\n        <form method=\"POST\" action=\"{% url 'add_meal' %}\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"add_meal\">Add Meal</button>\n        </form>\n        <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "dashboard.html",
            "path": "example_app/templates/dashboard.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Dashboard</title>\n</head>\n<body>\n    <h1>Dashboard</h1>\n    <p>Welcome, {{ user.username }}!</p>\n\n    <h2>Daily Calorie Intake</h2>\n    <p>Calories today: {{ daily_calories }}</p>\n\n    <h2>Recent Meals</h2>\n    <ul>\n        {% for meal in recent_meals %}\n            <li>{{ meal.id }}-{{ meal.date }} - {{ meal.name }} - {{ meal.calories }}- kcal</li>\n           <a href=\"{% url 'edit_meal' meal.id %}\"  class=\"btn btn-primary\">Edit</a>\n            <!-- Delete Meal Link -->\n            <a href=\"{% url 'delete_meal' meal.id %}\"  class=\"btn btn-danger\" onclick=\"return confirm('Are you sure you want to delete this meal?');\">Delete</a>\n\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_meal' %}\" id=\"add_meal\">Add New Meal</a>\n    <a href=\"{% url 'meal_log' %}\" id=\"meal_log\">All Meals</a>\n\n\n    <h2>Recent Activities</h2>\n    <ul>\n        {% for activity in recent_activities %}\n            <li>{{ activity.name }} - {{ activity.calories_burned }} kcal burned</li>\n        <a href=\"{% url 'edit_activity' activity.id %}\" class=\"btn btn-primary\">Edit</a>\n            <!-- Delete Meal Link -->\n            <a href=\"{% url 'delete_activity' activity.id %}\" class=\"btn btn-danger\" onclick=\"return confirm('Are you sure you want to delete this activity?');\">Delete</a>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_activity' %}\" id=\"add_activity\">Add New Activity</a>\n    <a href=\"{% url 'activity_log' %}\" id=\"activity_log\">All Activities</a>\n\n\n    <h2>Weekly Analysis</h2>\n    <a href=\"{% url 'weekly_calorie_chart' %}\" alt=\"Weekly Calorie Chart\" id=\"charts\">charts</a>\n\n    <a href=\"{% url 'settings' %}\" id=\"settings\">Settings</a>\n    <h1>Help</h1>\n\n    <h2>FAQ</h2>\n    <ul>\n        {% for faq in faqs %}\n            <li>{{ faq.question }} - {{ faq.answer }} </li>\n        {% endfor %}\n    </ul>\n\n    <h2>Contact Support</h2>\n    <p>If you need assistance, please contact us at support@calorietracker.com</p>\n\n    <a href=\"{% url 'tutorials' %}\" id=\"tutorials\">View Tutorials</a>\n\n</body>\n</html>\n"
        },
        {
            "file": "edit_activity.html",
            "path": "example_app/templates/edit_activity.html",
            "code": "<!-- templates/your_app/edit_activity.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Edit Activity</h2>\n        <form method=\"POST\" action=\"{% url 'edit_activity' activity.id %}\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Update Activity</button>\n        </form>\n        <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "edit_meal.html",
            "path": "example_app/templates/edit_meal.html",
            "code": "<!-- templates/your_app/edit_meal.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Meal - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Edit Meal</h2>\n\n         <form method=\"POST\" action=\"{% url 'edit_meal' meal.id %}\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Update Meal</button>\n        </form>\n\n        <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Home</title>\n</head>\n<body>\n    <h1>Welcome to Calorie Tracker!</h1>\n    <p>Track your daily calorie intake, log meals, and monitor physical activities with our app.</p>\n\n    <a href=\"{% url 'signup' %}\" id=\"signup\">Sign Up</a>\n    <a href=\"{% url 'login' %}\" id=\"login\">Log In</a>\n</body>\n</html>\n"
        },
        {
            "file": "login.html",
            "path": "example_app/templates/login.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Login</h2>\n\n        {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n\n        <form method=\"POST\" action=\"{% url 'login' %}\">\n            {% csrf_token %}\n            <div>\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required>\n            </div>\n            <div>\n                <label for=\"password\">Password:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required>\n            </div>\n            <button type=\"submit\" id=\"login\">Login</button>\n        </form>\n        <p>Don't have an account? <a href=\"{% url 'signup' %}\">Sign up here</a>.</p>\n    </div>\n</body>\n</html>\n\n"
        },
        {
            "file": "meal_log.html",
            "path": "example_app/templates/meal_log.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Meal Log</title>\n</head>\n<body>\n    <h1>Meal Log</h1>\n\n    <form action=\"{% url 'meal_search' %}\" method=\"get\">\n        <input type=\"text\" name=\"query\" placeholder=\"Search for meals...\" id=\"search_meal\">\n        <button type=\"submit\" id=\"submit\">Search</button>\n    </form>\n\n    <h2>Logged Meals</h2>\n    <ul>\n        {% for meal in meals %}\n            <li>{{ meal.name }} - {{ meal.calories }} kcal\n                <a href=\"{% url 'edit_meal' meal.id %}\">Edit</a>\n                <a href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n            </li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_meal' %}\">Add New Meal</a>\n    <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n</body>\n</html>\n"
        },
        {
            "file": "settings.html",
            "path": "example_app/templates/settings.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Settings</title>\n</head>\n<body>\n    <h1>Settings</h1>\n\n    <h2>Profile</h2>\n    <a href=\"{% url 'update_profile' %}\" id=\"update_profile\">Update Profile</a>\n     <ul>\n        {% for us in userprofile %}\n            <li>{{ us.daily_calorie_goal}} - {{ us.dietary_preferences  }} </li>\n        {% endfor %}\n    </ul>\n\n    <a href=\"{% url 'update_preferences' %}\" id=\"update_preferences\">Save Preferences</a>\n    <ul>\n        {% for us in userprofile %}\n            <li>{{ us.dietary_preferences  }} </li>\n        {% endfor %}\n    </ul>\n<!--    <form action=\"{% url 'update_profile' %}\" method=\"post\">-->\n<!--        {% csrf_token %}-->\n<!--        &lt;!&ndash; Profile form fields &ndash;&gt;-->\n<!--        <button type=\"submit\">Update Profile</button>-->\n<!--    </form>-->\n\n<!--    <h2>Preferences</h2>-->\n<!--    <form action=\"{% url 'update_preferences' %}\" method=\"post\">-->\n<!--        {% csrf_token %}-->\n<!--        &lt;!&ndash; Preferences form fields &ndash;&gt;-->\n<!--        <button type=\"submit\">Save Preferences</button>-->\n<!--    </form>-->\n\n\n</body>\n</html>\n"
        },
        {
            "file": "signup.html",
            "path": "example_app/templates/signup.html",
            "code": "<!-- templates/your_app/signup.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Sign Up</h2>\n        <p>Create a new account to start tracking your calories.</p>\n\n        <form method=\"POST\" action=\"{% url 'signup' %}\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"submit\">Sign Up</button>\n        </form>\n\n        <p>Already have an account? <a href=\"{% url 'login' %}\">Log in here</a>.</p>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "tutorials.html",
            "path": "example_app/templates/tutorials.html",
            "code": "<!-- templates/your_app/tutorials.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Tutorials - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Tutorials</h2>\n        <p>Here are some tutorials to help you get started:</p>\n        <ul>\n            <li><a href=\"#\">How to log meals</a></li>\n            <li><a href=\"#\">How to track activities</a></li>\n            <li><a href=\"#\">How to set dietary goals</a></li>\n        </ul>\n        <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "update_preferences.html",
            "path": "example_app/templates/update_preferences.html",
            "code": "<!-- templates/your_app/update_preferences.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Preferences - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Update Preferences</h2>\n        <form method=\"POST\" action=\"{% url 'update_preferences' %}\">\n            {% csrf_token %}\n            {{ preferences_form.as_p }}\n            <button type=\"submit\" id=\"submit\">Save Preferences</button>\n        </form>\n        <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "update_profile.html",
            "path": "example_app/templates/update_profile.html",
            "code": "<!-- templates/your_app/update_profile.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Profile - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Update Profile</h2>\n        <form method=\"POST\" action=\"{% url 'update_profile' %}\">\n            {% csrf_token %}\n            {{ profile_form.as_p  }}\n            <button type=\"submit\" id=\"submit\">Update Profile</button>\n        </form>\n        <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "weekly_calorie_chart.html",
            "path": "example_app/templates/weekly_calorie_chart.html",
            "code": "<!-- templates/your_app/weekly_calorie_chart.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Weekly Calorie Chart - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Weekly Calorie Chart</h2>\n        <div>\n    <img src=\"data:image/png;base64,{{ image_base64 }}\" alt=\"Weekly Calorie Chart\" id=\"chart_image\">\n  </div>\n\n        <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ],
    "11": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label=\"Select a JSON file\", help_text=\"Max size: 10MB\")\n\n    def clean_json_file(self):\n        file = self.cleaned_data['json_file']\n        if not file.name.endswith('.json'):\n            raise forms.ValidationError(\"Please upload a valid JSON file.\")\n        return file\n"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "# app/models.py\nfrom django.db import models\n\n\nclass Project(models.Model):\n    project_id = models.IntegerField(unique=True)\n    project_type = models.CharField(max_length=100)\n    nl_prompt = models.TextField()\n    framework_technical_stack = models.JSONField()\n    nl_checklist = models.JSONField()\n    testcode = models.JSONField()\n\n    def __str__(self):\n        return f'Project {self.project_id}'\n\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    page = models.CharField(max_length=100)\n    function_name = models.CharField(max_length=100)\n    notes = models.TextField()\n    status = models.BooleanField(null=True, default=None)\n\n    def __str__(self):\n        return f'Project {self.project_id} Page {self.page} Function {self.function_name} Review'"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "# app/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "# app/views.py\nimport json\nimport os\nimport time\n\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\n\nfrom .forms import JSONUploadForm\n# from .controller import JudgeController\n# from .llm import GPTTest\nfrom .models import Project, Review\nfrom django.shortcuts import render, get_object_or_404\nfrom .models import Project\n\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, project_id=project_id)\n    test_results = []\n    # 初始化测试用例数据\n    for page in project.testcode:\n        page_name = page.get(\"page\")\n        for function_test in page.get(\"function\", []):\n            test_code = function_test.get(\"test\")\n            function_name = function_test.get(\"function\")\n            try:\n                review = Review.objects.get(project=project, page=page_name, function_name=function_name)\n            except Review.DoesNotExist:\n                review = None\n            test_results.append({\n                \"page\": page_name,\n                \"function_name\": function_name,\n                \"test_code\": test_code,\n                \"status\": review.status if review else None,\n                \"notes\": review.notes if review else \"\",\n                \"last_result\": \"Review required\" if not review else review.status,  # 或其他默认值\n            })\n    status_dict = {\"pass\": True, \"fail\": False, \"select\": None}\n    print(\"C:\", time.time())\n    if request.method == \"POST\":\n        # 处理提交的人工审核数据\n        for index in range(len(test_results)):\n            notes = request.POST.get(f\"review_notes_{index+1}\", \"\")\n            status = request.POST.get(f\"review_status_{index+1}\", \"select\")\n            review, created = Review.objects.get_or_create(project=project, page=test_results[index][\"page\"],\n                                                           function_name=test_results[index][\"function_name\"])\n            review.notes = notes\n            review.status = status_dict[status]\n            review.save()\n            test_results[index][\"status\"] = status if status != \"select\" else None\n            test_results[index][\"notes\"] = notes\n        messages.success(request, \"Review submitted successfully.\")\n    print(\"B:\", time.time())\n    return render(request, 'review.html', {\n        'project': project,\n        'test_results': test_results\n    })\n\n\ndef home_view(request):\n    # 示例项目数据\n    if request.method == \"POST\":\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            json_file = request.FILES['json_file']\n            try:\n                project_data = json.load(json_file)\n                # 处理 JSON 数据 (示例打印输出)\n            except json.JSONDecodeError:\n                return HttpResponse(\"Invalid JSON format.\", status=400)\n            # 添加数据\n            project, created = Project.objects.get_or_create(\n                project_id=project_data[\"project_id\"],\n                defaults=project_data\n            )\n            messages.success(request, \"Project successfully uploaded.\")\n            form = JSONUploadForm()\n    else:\n        form = JSONUploadForm()\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'projects': projects, 'form': form})\n\n\ndef about_view(request):\n    return render(request, 'about.html')\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "about.html",
            "path": "example_app/templates/about.html",
            "code": "<!-- app/templates/about.html -->\n{% extends 'base.html' %}\n{% block content %}\n<h2>About</h2>\n<p>This website is designed to manually review projects and code.</p>\n{% endblock %}\n"
        },
        {
            "file": "base.html",
            "path": "example_app/templates/base.html",
            "code": "<!-- app/templates/base.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header>\n        <h1>Project Review Site</h1>\n        <nav>\n            <a href=\"{% url 'home' %}\" id=\"home_link\">Home</a> |\n            <a href=\"{% url 'about' %}\" id=\"about_link\">About</a>\n        </nav>\n        {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n        {% endif %}\n    </header>\n    <main>\n        {% block content %}{% endblock %}\n        <h2>Upload a JSON File</h2>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"upload\">Upload</button>\n        </form>\n    </main>\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!-- app/templates/home.html -->\n{% extends 'base.html' %}\n{% block content %}\n<h2>Home</h2>\n<ul>\n    {% for project in projects %}\n    <li>\n        <a href=\"{% url 'review' project.project_id %}\" class=\"project\">Review Project {{ project.project_id }}</a>\n    </li>\n    {% endfor %}\n</ul>\n{% endblock %}\n"
        },
        {
            "file": "review.html",
            "path": "example_app/templates/review.html",
            "code": "<!-- app/templates/review.html -->\n{% extends 'base.html' %}\n{% block content %}\n    <h2>Review Project {{ project.project_id }}</h2>\n    <p>{{ project.nl_prompt }}</p>\n\n    <h3>Test Code Review:</h3>\n    <p>Please review the test cases below, provide notes, and indicate pass/fail status.</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <table border=\"1\" cellpadding=\"10\">\n            <tr>\n                <th>Page</th>\n                <th>Function Name</th>\n                <th>Test Code</th>\n                <th>Last Result</th>\n                <th>Manual Review Notes</th>\n                <th>Pass/Fail</th>\n            </tr>\n            {% for test in test_results %}\n                <tr>\n                    <td>{{ test.page }}</td>\n                    <td>{{ test.function_name }}</td>\n                    <td>\n                        <pre>{{ test.test_code }}</pre>\n                    </td>\n                    <td>{{ test.last_result }}</td>\n                    <td>\n                        <textarea name=\"review_notes_{{ forloop.counter }}\" rows=\"3\" cols=\"40\"\n                                  class=\"notes\">{{ test.notes }}</textarea>\n                    </td>\n                    <td>\n                        <p class=\"status\"> Current Status :\n                            {% if test.status == None %} Not reviewed yet\n                            {% elif test.status %}\n                                Passed\n                            {% else %}\n                                Failed\n                                Failed\n                            {% endif %}</p>\n                        <br>\n                        <select name=\"review_status_{{ forloop.counter }}\" class=\"select\">\n                            <option value=\"pass\" {% if test.status %} selected {% endif %}>Pass</option>\n                            <option value=\"select\"{% if test.status == None %} selected {% endif %}>Select</option>\n                            <option value=\"fail\" {% if test.status == False %} selected {% endif %}>Fail</option>\n                        </select>\n                    </td>\n                </tr>\n            {% endfor %}\n        </table>\n        <button type=\"submit\" id=\"submit\">Submit Review</button>\n    </form>\n{% endblock %}"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'formatters': { #格式化器\n#         'standard': {\n#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'\n#             },\n#         'simple': {\n#             'format': '[%(levelname)s]> %(message)s'\n#             },\n#     },\n#     'filters': {\n#     'require_debug_true': {\n#         '()': 'django.utils.log.RequireDebugTrue',\n#         },\n#  },\n#     'handlers': {\n#         'default': {                                            # 用于文件输出\n#             'level': 'DEBUG',                                    # 输出日志等级\n#             'class': 'logging.handlers.RotatingFileHandler',    # 日志类型\n#             'filename': 'django.log',          # 具体日志文件的名字\n#             'maxBytes': 1024 * 1024 * 2,                        # 日志大小\n#             'backupCount': 1,                                   # 备份数量\n#             'formatter':'standard',                             # 输出日志格式\n#             'encoding': 'utf-8',                                # 输出日志编码\n#         }\n#     },\n#     'loggers': {    #日志分配到哪个handlers中\n#         'django': {\n#             'handlers': ['default'],         # 上线之后可以把'console'移除\n#             'level':'DEBUG',\n#             'propagate': True,       # 向不向更高级别的logger传递\n#         }\n#  }\n# }"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ],
    "12": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "__init__.py",
            "path": "__init__.py",
            "code": ""
        },
        {
            "file": "admin.py",
            "path": "example_app/admin.py",
            "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import Claim, Budget\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'status', 'created_at', 'operations')\n    list_filter = ('status', 'category', 'created_at')\n    search_fields = ('user__username', 'category', 'status')\n    readonly_fields = ('user', 'created_at', 'updated_at')\n    actions = ['approve_claims', 'reject_claims']\n\n    def approve_claims(self, request, queryset):\n        for claim in queryset.filter(status='pending'):\n            claim.approve()\n        self.message_user(request, f\"{queryset.count()} claim(s) approved.\")\n    approve_claims.short_description = \"Approve selected claims\"\n\n    def reject_claims(self, request, queryset):\n        for claim in queryset.filter(status='pending'):\n            claim.reject(reason='Rejected via admin')\n        self.message_user(request, f\"{queryset.count()} claim(s) rejected.\")\n    reject_claims.short_description = \"Reject selected claims\"\n\n    def operations(self, obj):\n        return format_html(\n            f'<a href=\"/admin/example_app/claim/{obj.id}/change/\" class=\"edit-link\">Edit</a> <a href=\"/post/{obj.id}/delete/\" class=\"delete-link\">Delete</a>')\n\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit', 'spent', 'remaining_balance', 'is_over_budget')\n    list_editable = ('limit',)  # 仅允许编辑预算上限\n    readonly_fields = ('spent',)  # 只读显示 spent，通过动态计算获得\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'password1', 'password2']"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\n\nclass Claim(models.Model):\n    CATEGORY_CHOICES = [\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    ]\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    ]\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def approve(self):\n        self.status = 'approved'\n        self.rejection_reason = None\n        self.save()\n        Budget.update_spent_for_category(self.category)\n\n    def reject(self, reason=''):\n        self.status = 'rejected'\n        self.rejection_reason = reason\n        self.save()\n\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=20, choices=Claim.CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n\n    @property\n    def spent(self):\n        return Claim.objects.filter(category=self.category, status='approved').aggregate(total=Sum('amount'))[\n                   'total'] or 0\n\n    @property\n    def remaining_balance(self):\n        return self.limit - self.spent\n\n    @property\n    def is_over_budget(self):\n        return self.spent > self.limit\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n# Home Page\n    path('', views.home, name='home'),\n\n    # Sign Up and Login Pages\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]\n\n"
        },
        {
            "file": "utils.py",
            "path": "example_app/utils.py",
            "code": "from .models import Budget\n\ndef check_budget_limit(category, amount):\n    budget = Budget.objects.get(category=category)\n    budget.spent += amount\n    budget.save()\n    return budget.is_over_budget()\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom openpyxl.styles.builtins import title\n\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm\nfrom django.contrib import messages\nfrom .forms import SignUpForm\nfrom django.contrib.auth import login, authenticate\ndef home(request):\n    return render(request, 'home.html')\n\n# 注册视图\ndef signup(request):\n    if request.method == \"POST\":\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('submit_claim')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n# 登录视图\ndef login_view(request):\n\n    if request.method == \"POST\":\n\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('submit_claim')\n        else:\n\n            messages.error(request, 'Invalid username or password.')\n\n    return render(request, 'login.html')\n\n\n@login_required\ndef submit_claim(request):\n    if request.method == \"POST\":\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            claim.save()\n            messages.success(request, \"Claim submitted successfully.\")\n            return redirect('claim_status')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user)\n    return render(request, 'claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, id=claim_id, user=request.user, status='pending')\n    if request.method == \"POST\":\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Claim updated successfully.\")\n            return redirect('claim_status')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form})\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, id=claim_id, user=request.user)\n    title = claim.description\n    claim.delete()\n    messages.success(request, f'Claim {title} successfully deleted')\n    return HttpResponseRedirect(\"/admin/example_app/claim/\")\n\n@login_required\ndef analysis_view(request):\n    # Aggregate total approved claims amount\n    total_approved = Claim.objects.filter(status='approved').aggregate(total=Sum('amount'))['total'] or 0\n\n    # Aggregate approved claims by category\n    claims_by_category = Claim.objects.filter(status='approved').values('category').annotate(total=Sum('amount'))\n\n    # Budget details\n    budgets = Budget.objects.all()\n    budget_data = [\n        {\n            'category': budget.category,\n            'limit': budget.limit,\n            'spent': budget.spent,\n            'remaining': budget.remaining_balance,\n            'over_budget': budget.is_over_budget\n        }\n        for budget in budgets\n    ]\n\n    context = {\n        'total_approved': total_approved,\n        'claims_by_category': claims_by_category,\n        'budget_data': budget_data,\n    }\n    return render(request, 'analysis.html', context)"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "analysis.html",
            "path": "example_app/templates/analysis.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Analysis Report</title>\n</head>\n<body>\n    <h1>Analysis Report</h1>\n\n    <h2>Total Approved Claims: ${{ total_approved }}</h2>\n\n    <h3>Claims by Category</h3>\n    <table border=\"1\">\n        <tr>\n            <th>Category</th>\n            <th>Total Amount</th>\n        </tr>\n        {% for claim in claims_by_category %}\n        <tr>\n            <td>{{ claim.category }}</td>\n            <td>${{ claim.total }}</td>\n        </tr>\n        {% endfor %}\n    </table>\n\n    <h3>Budget Utilization</h3>\n    <table border=\"1\">\n        <tr>\n            <th>Category</th>\n            <th>Budget Limit</th>\n            <th>Spent</th>\n            <th>Remaining</th>\n            <th>Over Budget</th>\n        </tr>\n        {% for budget in budget_data %}\n        <tr>\n            <td>{{ budget.category }}</td>\n            <td>${{ budget.limit }}</td>\n            <td>${{ budget.spent }}</td>\n            <td>${{ budget.remaining }}</td>\n            <td>{% if budget.over_budget %}Yes{% else %}No{% endif %}</td>\n        </tr>\n        {% endfor %}\n    </table>\n</body>\n</html>\n"
        },
        {
            "file": "base.html",
            "path": "example_app/templates/base.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Accounting System{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <nav>\n        <ul>\n            <li><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n            <li><a href=\"{% url 'claim_status' %}\">View Claims</a></li>\n            <li><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n        </ul>\n    </nav>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>\n"
        },
        {
            "file": "claim_edit.html",
            "path": "example_app/templates/claim_edit.html",
            "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n<h2>Edit Claim</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"save\">Save Changes</button>\n</form>\n{% endblock %}\n"
        },
        {
            "file": "claim_status.html",
            "path": "example_app/templates/claim_status.html",
            "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n<h2>My Claims</h2>\n<table>\n    <tr>\n        <th>Category</th>\n        <th>Amount</th>\n        <th>Status</th>\n        <th>Submitted On</th>\n        <th>Actions</th>\n    </tr>\n    {% for claim in claims %}\n    <tr>\n        <td>{{ claim.get_category_display }}</td>\n        <td>{{ claim.amount }}</td>\n        <td>{{ claim.get_status_display }}</td>\n        <td>{{ claim.created_at|date:\"Y-m-d\" }}</td>\n        <td>\n            {% if claim.status == 'approved' %}\n                <span title=\"\" class=\"status\">Approved</span>\n            {% elif claim.status == 'pending' %}\n                <a href=\"{% url 'edit_claim' claim.id %}\" class=\"edit\">Edit</a>\n            {% elif claim.status == 'rejected' %}\n                <span title=\"{{ claim.rejection_reason }}\" class=\"status\">Rejected</span>\n            {% endif %}\n        </td>\n    </tr>\n    {% empty %}\n    <tr>\n        <td colspan=\"5\">No claims submitted yet.</td>\n    </tr>\n    {% endfor %}\n</table>\n{% endblock %}\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Accounting and Cashier Management - Home</title>\n</head>\n<body>\n    <h1>Welcome to Accounting and Cashier Management!</h1>\n\n\n    <a href=\"{% url 'signup' %}\" id=\"signup\">Sign Up</a>\n    <a href=\"{% url 'login' %}\" id=\"login\">Log In</a>\n</body>\n</html>\n"
        },
        {
            "file": "login.html",
            "path": "example_app/templates/login.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Accounting and Cashier Management</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Login</h2>\n\n        {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n\n        <form method=\"POST\" action=\"{% url 'login' %}\">\n            {% csrf_token %}\n            <div>\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required>\n            </div>\n            <div>\n                <label for=\"password\">Password:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required>\n            </div>\n            <button type=\"submit\" id=\"submit\">Login</button>\n        </form>\n        <p>Don't have an account? <a href=\"{% url 'signup' %}\">Sign up here</a>.</p>\n    </div>\n</body>\n</html>\n\n"
        },
        {
            "file": "signup.html",
            "path": "example_app/templates/signup.html",
            "code": "<!-- templates/your_app/signup.html -->\n\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Accounting and Cashier Management</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Sign Up</h2>\n\n\n        <form method=\"POST\" action=\"{% url 'signup' %}\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"sign_up\">Sign Up</button>\n        </form>\n\n        <p>Already have an account? <a href=\"{% url 'login' %}\">Log in here</a>.</p>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "submit_claim.html",
            "path": "example_app/templates/submit_claim.html",
            "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n<h2>Submit Claim</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"submit\">Submit Claim</button>\n</form>\n{% endblock %}\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n\n\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ],
    "13": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\n\nclass CustomerForm(forms.ModelForm):\n    birthday = forms.DateField(\n        widget=forms.DateInput(attrs={'type': 'date',\"max\":\"2099-12-31\"}),\n        label='Birthday'\n    )\n\n    class Meta:\n        model = Customer\n        fields = ['name', 'birthday', 'age', 'sex', 'company', 'phone_number']\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = '__all__'\n\nclass PurchaseRecordForm(forms.ModelForm):\n    class Meta:\n        model = PurchaseRecord\n        exclude = ['datetime']\n\nclass PreferredProductForm(forms.ModelForm):\n    class Meta:\n        model = PreferredProduct\n        fields = ['customer', 'product']"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female')])\n    company = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=20)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f\"{self.customer.name} - {self.product.name}\"\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f\"{self.customer.name} prefers {self.product.name}\"\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Customer URLs\n    path('', views.customer_list, name='customer_list'),\n    path('customers/add/', views.add_customer, name='add_customer'),\n    path('customers/edit/<int:pk>/', views.edit_customer, name='edit_customer'),\n    path('customers/delete/<int:pk>/', views.delete_customer, name='delete_customer'),\n\n    # Product URLs\n    path('products/', views.product_list, name='product_list'),\n    path('products/add/', views.add_product, name='add_product'),\n    path('products/edit/<int:pk>/', views.edit_product, name='edit_product'),\n    path('products/delete/<int:pk>/', views.delete_product, name='delete_product'),\n\n    path('purchases/', views.purchase_record_list, name='purchase_record_list'),\n    path('purchases/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchases/edit/<int:pk>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchases/delete/<int:pk>/', views.delete_purchase_record, name='delete_purchase_record'),\n\n    path('preferred_products_list/', views.preferred_products_list, name='preferred_products_list'),\n    path('preferred-products/add/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred-products/edit/<int:pk>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred-products/delete/<int:pk>/', views.delete_preferred_product, name='delete_preferred_product'),\n\n    # Sales Analysis\n    path('sales-analysis/', views.generate_sales_report, name='generate_sales_report'),\n\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom .forms import CustomerForm, ProductForm, PurchaseRecordForm, PreferredProductForm\nfrom django.db.models import Sum\n# Customer Views\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'customers/customer_list.html', {'customers': customers})\n\n# def add_customer(request):\n#     if request.method == 'POST':\n#         form = CustomerForm(request.POST)\n#         if form.is_valid():\n#             form.save()\n#             return redirect('customer_list')\n#     else:\n#         form = CustomerForm()\n#     return render(request, 'customers/add_customer.html', {'form': form})\n\ndef add_customer(request):\n    if request.method == 'POST':\n        form = CustomerForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm()\n    return render(request, 'customers/add_customer.html', {'form': form})\n\n\ndef edit_customer(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        form = CustomerForm(request.POST, instance=customer)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm(instance=customer)\n    return render(request, 'customers/edit_customer.html', {'form': form})\n\ndef delete_customer(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    customer.delete()\n    return redirect('customer_list')\n\n\n\n# Product Views\ndef product_list(request):\n    products = Product.objects.all()\n    return render(request, 'products/product_list.html', {'products': products})\n\ndef add_product(request):\n    if request.method == 'POST':\n        form = ProductForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm()\n    return render(request, 'products/add_product.html', {'form': form})\n\ndef edit_product(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    if request.method == 'POST':\n        form = ProductForm(request.POST, instance=product)\n        if form.is_valid():\n            form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm(instance=product)\n    return render(request, 'products/edit_product.html', {'form': form, 'product': product})\ndef delete_product(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    product.delete()\n    return redirect('product_list')\n\n# Similar views for PurchaseRecords and PreferredProducts\ndef add_purchase_record(request):\n    if request.method == 'POST':\n        form = PurchaseRecordForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('purchase_record_list')\n    else:\n        form = PurchaseRecordForm()\n    return render(request, 'add_purchase_record.html', {'form': form})\n\n\ndef purchase_record_list(request):\n    records = PurchaseRecord.objects.all()\n    return render(request, 'purchase_record_list.html', {'records': records})\n\ndef edit_purchase_record(request, pk):\n    record = get_object_or_404(PurchaseRecord, pk=pk)\n    if request.method == 'POST':\n        form = PurchaseRecordForm(request.POST, instance=record)\n        if form.is_valid():\n            form.save()\n            return redirect('purchase_record_list')\n    else:\n        form = PurchaseRecordForm(instance=record)\n    return render(request, 'edit_purchase_record.html', {'form': form, 'record': record})\n\ndef delete_purchase_record(request, pk):\n    record = get_object_or_404(PurchaseRecord, pk=pk)\n    record.delete()\n    return redirect('purchase_record_list')\n\ndef add_preferred_product(request):\n    if request.method == 'POST':\n        form = PreferredProductForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('preferred_products_list')\n    else:\n        form = PreferredProductForm()\n    return render(request, 'add_preferred_product.html', {'form': form})\n\ndef preferred_products_list(request):\n    products = PreferredProduct.objects.all()\n    return render(request, 'preferred_products_list.html', {'products': products})\n\ndef edit_preferred_product(request, pk):\n    product = get_object_or_404(PreferredProduct, pk=pk)\n    if request.method == 'POST':\n        form = PreferredProductForm(request.POST, instance=product)\n        if form.is_valid():\n            form.save()\n            return redirect('preferred_products_list')\n    else:\n        form = PreferredProductForm(instance=product)\n    return render(request, 'edit_preferred_product.html', {'form': form, 'record': product})\n\ndef delete_preferred_product(request, pk):\n    product = get_object_or_404(PreferredProduct, pk=pk)\n    product.delete()\n    return redirect('preferred_products_list')\n\ndef generate_sales_report(request):\n    report = PurchaseRecord.objects.values('product__name').annotate(\n        total_sales=Sum('amount'),\n        total_quantity=Sum('quantity')\n    ).order_by('-total_sales')\n    return render(request, 'report.html', {'report': report})"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "add_preferred_product.html",
            "path": "example_app/templates/add_preferred_product.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Add Preferred Product</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"save\">Save</button>\n</form>\n<a href=\"{% url 'preferred_products_list' %}\">Back to Preferred Products</a>\n{% endblock %}\n"
        },
        {
            "file": "add_purchase_record.html",
            "path": "example_app/templates/add_purchase_record.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Add Purchase Record</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"save\">Save</button>\n</form>\n<a href=\"{% url 'purchase_record_list' %}\">Back to Purchase Records</a>\n{% endblock %}\n"
        },
        {
            "file": "base.html",
            "path": "example_app/templates/base.html",
            "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CRM System</title>\n</head>\n<body>\n    <h1>Welcome to the CRM System</h1>\n    <nav>\n        <a href=\"{% url 'customer_list' %}\" id=\"customer\">Customers</a>\n        <a href=\"{% url 'product_list' %}\" id=\"products\">Products</a>\n        <a href=\"{% url 'purchase_record_list' %}\" id=\"purchase\">Purchase Records</a>\n        <a href=\"{% url 'preferred_products_list' %}\" id=\"preferred\">Preferred_Products</a>\n        <a href=\"{% url 'generate_sales_report' %}\" id=\"analysis\">Sales Analysis</a>\n    </nav>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>\n"
        },
        {
            "file": "edit_preferred_product.html",
            "path": "example_app/templates/edit_preferred_product.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Edit Preferred Product</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"update\">Update</button>\n</form>\n<a href=\"{% url 'preferred_products_list' %}\">Back to Preferred Products</a>\n{% endblock %}\n"
        },
        {
            "file": "edit_purchase_record.html",
            "path": "example_app/templates/edit_purchase_record.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Edit Purchase Record</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"save_changes\">Save Changes</button>\n</form>\n<a href=\"{% url 'customer_list' %}\">Back to Purchase Records</a>\n{% endblock %}\n"
        },
        {
            "file": "preferred_products_list.html",
            "path": "example_app/templates/preferred_products_list.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Preferred Products</h2>\n<table>\n    <tr>\n        <th>Customer</th>\n        <th>Product</th>\n        <th>Actions</th>\n    </tr>\n    {% for preferred in products %}\n    <tr>\n        <td>{{ preferred.customer.name }}</td>\n        <td>{{ preferred.product.name }}</td>\n        <td>\n            <a href=\"{% url 'edit_preferred_product' preferred.pk %}\" class=\"edit_button\">Edit</a>\n            <a href=\"{% url 'delete_preferred_product' preferred.pk %}\" class=\"delete_button\">Delete</a>\n        </td>\n    </tr>\n    {% endfor %}\n</table>\n<a href=\"{% url 'add_preferred_product' %}\" id=\"add_preferred_product\">Add Preferred Product</a>\n{% endblock %}\n"
        },
        {
            "file": "purchase_record_list.html",
            "path": "example_app/templates/purchase_record_list.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Purchase Records</h2>\n<table>\n    <tr>\n        <th>Customer</th>\n        <th>Product</th>\n        <th>Date/Time</th>\n        <th>Quantity</th>\n        <th>Amount</th>\n        <th>Actions</th>\n    </tr>\n    {% for record in records %}\n    <tr>\n        <td>{{ record.customer.name }}</td>\n        <td>{{ record.product.name }}</td>\n        <td>{{ record.datetime }}</td>\n        <td>{{ record.quantity }}</td>\n        <td>{{ record.amount }}</td>\n        <td>\n            <a href=\"{% url 'edit_purchase_record' record.pk %}\" class=\"edit_button\">Edit</a>\n            <a href=\"{% url 'delete_purchase_record' record.pk %}\" class=\"delete_button\">Delete</a>\n        </td>\n    </tr>\n    {% endfor %}\n</table>\n<a href=\"{% url 'add_purchase_record' %}\" id=\"add_purchase_record\">Add Purchase Record</a>\n{% endblock %}\n"
        },
        {
            "file": "report.html",
            "path": "example_app/templates/report.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Sales Report</h2>\n<table>\n    <tr>\n        <th>Product</th>\n        <th>Total Quantity</th>\n        <th>Total Sales</th>\n    </tr>\n    {% for row in report %}\n    <tr>\n        <td>{{ row.product__name }}</td>\n        <td>{{ row.total_quantity }}</td>\n        <td>${{ row.total_sales }}</td>\n    </tr>\n    {% endfor %}\n</table>\n{% endblock %}\n"
        },
        {
            "file": "add_customer.html",
            "path": "example_app/templates/customers/add_customer.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Add Customer</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"save_customer\">Save Customer</button>\n</form>\n<a href=\"{% url 'customer_list' %}\" id=\"back_to_customer_list\">Back to Customer List</a>\n{% endblock %}\n"
        },
        {
            "file": "customer_detail.html",
            "path": "example_app/templates/customers/customer_detail.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Customer Details</h2>\n<p><strong>Name:</strong> {{ customer.name }}</p>\n<p><strong>Birthday:</strong> {{ customer.birthday }}</p>\n<p><strong>Age:</strong> {{ customer.age }}</p>\n<p><strong>Sex:</strong> {{ customer.sex }}</p>\n<p><strong>Company:</strong> {{ customer.company }}</p>\n<p><strong>Phone Number:</strong> {{ customer.phone_number }}</p>\n<h3>Preferred Products:</h3>\n<ul>\n    {% for preferred_product in customer.preferredproduct_set.all %}\n    <li>{{ preferred_product.product.name }}</li>\n    {% empty %}\n    <li>No preferred products.</li>\n    {% endfor %}\n</ul>\n<a href=\"{% url 'edit_customer' customer.pk %}\" id=\"edit\">Edit Customer</a>\n<a href=\"{% url 'customer_list' %}\" id=\"back\">Back to Customer List</a>\n{% endblock %}\n"
        },
        {
            "file": "customer_list.html",
            "path": "example_app/templates/customers/customer_list.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Customer List</h2>\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Phone Number</th>\n        <th>Actions</th>\n    </tr>\n    {% for customer in customers %}\n    <tr>\n        <td>{{ customer.name }}</td>\n        <td>{{ customer.phone_number }}</td>\n        <td>\n            <a href=\"{% url 'edit_customer' customer.pk %}\" class=\"edit_button\">Edit</a>\n            <a href=\"{% url 'delete_customer' customer.pk %}\" class=\"delete_button\">Delete</a>\n        </td>\n    </tr>\n    {% endfor %}\n</table>\n<a href=\"{% url 'add_customer' %}\" id=\"add_customer\">Add Customer</a>\n{% endblock %}\n"
        },
        {
            "file": "edit_customer.html",
            "path": "example_app/templates/customers/edit_customer.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Edit Customer</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"save_changes\">Save Changes</button>\n</form>\n<a href=\"{% url 'customer_list' %}\">Back to Customer List</a>\n{% endblock %}\n"
        },
        {
            "file": "add_product.html",
            "path": "example_app/templates/products/add_product.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Add Product</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"save_product\">Save Product</button>\n</form>\n<a href=\"{% url 'product_list' %}\" id=\"back\">Back to Product List</a>\n{% endblock %}\n"
        },
        {
            "file": "edit_product.html",
            "path": "example_app/templates/products/edit_product.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Edit Product</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"save_changes\">Save Changes</button>\n</form>\n<a href=\"{% url 'product_list' %}\" id=\"back\">Back to Product List</a>\n{% endblock %}\n"
        },
        {
            "file": "product_detail.html",
            "path": "example_app/templates/products/product_detail.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Product Details</h2>\n<p><strong>Name:</strong> {{ product.name }}</p>\n<p><strong>Category:</strong> {{ product.category }}</p>\n<p><strong>Recommended Price:</strong> {{ product.recommended_price }}</p>\n<h3>Purchase Records:</h3>\n<ul>\n    {% for record in product.purchaserecord_set.all %}\n    <li>{{ record.datetime }} - {{ record.customer.name }} - Quantity: {{ record.quantity }} - Amount: {{ record.amount }}</li>\n    {% empty %}\n    <li>No purchase records for this product.</li>\n    {% endfor %}\n</ul>\n<a href=\"{% url 'edit_product' product.pk %}\" id=\"edit\">Edit Product</a>\n<a href=\"{% url 'product_list' %}\" id=\"back\">Back to Product List</a>\n{% endblock %}\n"
        },
        {
            "file": "product_list.html",
            "path": "example_app/templates/products/product_list.html",
            "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Product List</h2>\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Category</th>\n        <th>Recommended Price</th>\n        <th>Actions</th>\n    </tr>\n    {% for product in products %}\n    <tr>\n        <td>{{ product.name }}</td>\n        <td>{{ product.category }}</td>\n        <td>{{ product.recommended_price }}</td>\n        <td>\n            <a href=\"{% url 'edit_product' product.pk %}\" class=\"edit_button\">Edit</a>\n            <a href=\"{% url 'delete_product' product.pk %}\" class=\"delete_button\">Delete</a>\n        </td>\n    </tr>\n    {% endfor %}\n</table>\n<a href=\"{% url 'add_product' %}\" id=\"add_product\">Add Product</a>\n{% endblock %}\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'formatters': { #格式化器\n#         'standard': {\n#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'\n#             },\n#         'simple': {\n#             'format': '[%(levelname)s]> %(message)s'\n#             },\n#     },\n#     'filters': {\n#     'require_debug_true': {\n#         '()': 'django.utils.log.RequireDebugTrue',\n#         },\n#  },\n#     'handlers': {\n#         'default': {                                            # 用于文件输出\n#             'level': 'DEBUG',                                    # 输出日志等级\n#             'class': 'logging.handlers.RotatingFileHandler',    # 日志类型\n#             'filename': 'django.log',          # 具体日志文件的名字\n#             'maxBytes': 1024 * 1024 * 2,                        # 日志大小\n#             'backupCount': 1,                                   # 备份数量\n#             'formatter':'standard',                             # 输出日志格式\n#             'encoding': 'utf-8',                                # 输出日志编码\n#         }\n#     },\n#     'loggers': {    #日志分配到哪个handlers中\n#         'django': {\n#             'handlers': ['default'],         # 上线之后可以把'console'移除\n#             'level':'DEBUG',\n#             'propagate': True,       # 向不向更高级别的logger传递\n#         }\n#  }\n# }"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ],
    "14": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "settings.py",
            "path": "myproject/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"
        },
        {
            "file": "urls.py",
            "path": "myproject/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "myproject/wsgi.py",
            "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "myproject/__init__.py",
            "code": ""
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.shortcuts import render\nfrom django.views import View\nfrom django.http import HttpResponse\n\nclass HelloWorldView(View):\n    \"\"\"Class-based view to render the Hello World page.\"\"\"\n\n    def get(self, request):\n        \"\"\"Handle GET request to display Hello World.\"\"\"\n        return render(request, 'hello_world.html')\n"
        },
        {
            "file": "__init__.py",
            "path": "myproject/example_app/__init__.py",
            "code": ""
        },
        {
            "file": "hello_world.html",
            "path": "example_app/templates/hello_world.html",
            "code": "{% load static %} <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>\n"
        },
        {
            "file": "style.css",
            "path": "example_app/static/css/style.css",
            "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\nh1 {\n    color: #333;\n}\n"
        },
        {
            "file": "__init__.py",
            "path": "__init__.py",
            "code": ""
        }
    ],
    "15": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\n"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "0001_initial.py",
            "path": "example_app/migrations/0001_initial.py",
            "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "styles.css",
            "path": "example_app/static/css/styles.css",
            "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n"
        },
        {
            "file": "helloworld.html",
            "path": "example_app/templates/helloworld.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Hello World</h1>\n        <a href=\"{% url 'home' %}\" class=\"button\">Back to Home</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/home.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n<!--        <h1>Welcome to the Home Page</h1>-->\n        <a href=\"{% url 'helloworld' %}\" class=\"button\">Go to HelloWorld</a>\n    </div>\n</body>\n</html>\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\n# STATIC_URL = '/static/'\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'formatters': { #格式化器\n#         'standard': {\n#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'\n#             },\n#         'simple': {\n#             'format': '[%(levelname)s]> %(message)s'\n#             },\n#     },\n#     'filters': {\n#     'require_debug_true': {\n#         '()': 'django.utils.log.RequireDebugTrue',\n#         },\n#  },\n#     'handlers': {\n#         'default': {                                            # 用于文件输出\n#             'level': 'DEBUG',                                    # 输出日志等级\n#             'class': 'logging.handlers.RotatingFileHandler',    # 日志类型\n#             'filename': 'django.log',          # 具体日志文件的名字\n#             'maxBytes': 1024 * 1024 * 2,                        # 日志大小\n#             'backupCount': 1,                                   # 备份数量\n#             'formatter':'standard',                             # 输出日志格式\n#             'encoding': 'utf-8',                                # 输出日志编码\n#         }\n#     },\n#     'loggers': {    #日志分配到哪个handlers中\n#         'django': {\n#             'handlers': ['default'],         # 上线之后可以把'console'移除\n#             'level':'DEBUG',\n#             'propagate': True,       # 向不向更高级别的logger传递\n#         }\n#  }\n# }"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ],
    "16": [
        {
            "file": "16-stdanswer.py",
            "path": "16-stdanswer.py",
            "code": "import os\nimport pandas as pd\n\n# File paths\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"Processed Subjects Table.xlsx\"\n\n# Function to check if the file exists\ndef check_file_exists(file_path):\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"Error: The file '{file_path}' does not exist.\")\n\n# Function to check if the file is in the correct format (Excel)\ndef check_file_format(file_path):\n    if not file_path.lower().endswith(('.xls', '.xlsx')):\n        raise ValueError(f\"Error: The file '{file_path}' is not an Excel file. Please provide a valid Excel file.\")\n\n# Function to validate the data (headers and data completeness)\ndef validate_data(df):\n    # Check if all required columns are present\n    required_columns = [\"#\", \"Name\", \"Weekday\", \"Time\"]\n    if not all(column in df.columns for column in required_columns):\n        raise ValueError(f\"Error: The input file is missing one or more required columns: {required_columns}\")\n    \n    # Check if there are any missing values in the required columns\n    if df[required_columns].isnull().any().any():\n        raise ValueError(\"Error: There are missing values in the input data. Please fill in all required fields.\")\n    \n    # Check for invalid 'Time' values\n    valid_times = [\"First period\", \"Second period\", \"Third period\", \"Fourth period\"]\n    invalid_times = df[~df['Time'].isin(valid_times)]\n    if not invalid_times.empty:\n        raise ValueError(f\"Error: Invalid time values found: {invalid_times['Time'].unique()}. Valid options are {valid_times}.\")\n\n    # Check for invalid weekdays\n    valid_weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n    invalid_weekdays = df[~df['Weekday'].isin(valid_weekdays)]\n    if not invalid_weekdays.empty:\n        raise ValueError(f\"Error: Invalid weekday values found: {invalid_weekdays['Weekday'].unique()}. Valid options are {valid_weekdays}.\")\n\n# Main program to process the file\ndef process_subjects(input_file, output_file):\n    try:\n        # Check if the file exists and is in the correct format\n        check_file_exists(input_file)\n        check_file_format(input_file)\n\n        # Read the Excel file\n        df = pd.read_excel(input_file)\n\n        # Validate the data\n        validate_data(df)\n\n        # Define the periods and weekdays\n        periods = [\"First period\", \"Second period\", \"Third period\", \"Fourth period\"]\n        weekdays = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n\n        # Create an empty dataframe for the two-dimensional subject table\n        table = pd.DataFrame(index=weekdays, columns=periods)\n\n        # Populate the table with subject names\n        for _, row in df.iterrows():\n            weekday = row[\"Weekday\"]\n            time = row[\"Time\"]\n            name = row[\"Name\"]\n            table.at[weekday, time] = name\n\n        # Save the output to a new Excel file\n        table.to_excel(output_file)\n\n        print(f\"Processed subject table saved to {output_file}\")\n    \n    except (FileNotFoundError, ValueError) as e:\n        print(str(e))\n\n# Run the process\nprocess_subjects(input_file, output_file)\n"
        }
    ],
    "17": [
        {
            "file": "17-stdanswer.py",
            "path": "17-stdanswer.py",
            "code": "import pandas as pd\nimport statsmodels.api as sm\nimport os\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Reads the dataset and ensures all columns are numeric. \n    If any missing values (NaN) are found, raises an error.\n    \"\"\"\n    # Read the dataset\n    if not os.path.exists(input_file):\n        raise FileNotFoundError(f\"Error: The file '{input_file}' does not exist.\")\n    data = pd.read_excel(input_file)\n\n    # Convert all columns to numeric, coercing invalid values to NaN\n    data = data.apply(pd.to_numeric, errors='coerce')\n\n    # Check for missing values (NaN)\n    if data.isnull().any().any():\n        raise ValueError(\"Dataset contains missing or invalid values. Please clean the data and try again.\")\n\n    return data\n\ndef add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Adds a one-period lag for the dependent variable and drops missing rows.\n    \"\"\"\n    data['lagged_result'] = data[target_column].shift(1)\n    data = data.dropna()  # Drop rows with NaN introduced by lagging\n    return data\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepares the feature matrix (X) and target vector (y).\n    \"\"\"\n    independent_vars = [col for col in data.columns if col not in [target_column, lagged_column]]\n    X = sm.add_constant(data[independent_vars])  # Add intercept term\n    y = data[lagged_column]\n    return X, y\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Builds and fits a logistic regression model.\n    \"\"\"\n    model = sm.Logit(y, X)\n    result = model.fit()\n    return result\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Saves the logistic regression summary to an Excel file.\n    \"\"\"\n    summary_text = result.summary().as_text()\n    summary_lines = [line.split() for line in summary_text.split('\\n') if line.strip()]\n\n    # Convert to DataFrame for saving to Excel\n    summary_df = pd.DataFrame(summary_lines)\n    with pd.ExcelWriter(output_file, engine='openpyxl') as writer:\n        summary_df.to_excel(writer, index=False, header=False, sheet_name=\"Logistic Model Summary\")\n\ndef main(input_file, output_file):\n    \"\"\"\n    Main function to execute all steps.\n    \"\"\"\n    data = read_and_validate_data(input_file)\n    data = add_lagged_dependent_variable(data, target_column='result')\n    X, y = prepare_features_and_target(data, target_column='result', lagged_column='lagged_result')\n    if X.empty or y.empty:\n        raise ValueError(\"Feature matrix or target vector is empty. Check your input data.\")\n\n    result = build_logistic_model(X, y)\n    save_summary_to_excel(result, output_file)\n    print(f\"Logistic regression summary saved to {output_file}.\")\n\n# Run the program\nif __name__ == \"__main__\":\n    main(input_file, output_file)\n"
        }
    ],
    "18": [
        {
            "file": "18-stdanswer.py",
            "path": "18-stdanswer.py",
            "code": "import os\nimport textwrap\n\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = os.path.sep  # Use os.path.sep for platform-specific root directory\n        self.directory_structure = {\n            os.path.sep: [\"home\", \"forest\", \"cave\"],\n            os.path.join(os.path.sep, \"home\"): [\"kitchen\", \"bedroom\"],\n            os.path.join(os.path.sep, \"forest\"): [\"clearing\", \"deep_forest\"],\n            os.path.join(os.path.sep, \"cave\"): [\"treasure_room\"],\n            os.path.join(os.path.sep, \"home\", \"kitchen\"): [],\n            os.path.join(os.path.sep, \"home\", \"bedroom\"): [],\n            os.path.join(os.path.sep, \"forest\", \"clearing\"): [],\n            os.path.join(os.path.sep, \"forest\", \"deep_forest\"): [],\n            os.path.join(os.path.sep, \"cave\", \"treasure_room\"): [],\n        }\n        self.items = {os.path.join(os.path.sep, \"cave\", \"treasure_room\"): \"golden_key\"}\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"\\n=== BashCrawl Main Menu ===\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(textwrap.dedent(f\"\"\"\n            Welcome to the BashCrawl Main Menu!\n            Here are your options:\n            1. Start Game - Begin your adventure.\n            2. Help - Learn how to play the game.\n            3. Quit - Exit the program.\n        \"\"\"))\n\n    def print_game_help(self):\n        print(textwrap.dedent(\"\"\"\n            In-game commands:\n            - ls: List the contents of the current directory.\n            - cd <dir>: Move into a directory.\n            - inventory: Check what you're carrying.\n            - help: Show this help message.\n            - quit: Exit the game.\n\n            Your goal is to find the golden key hidden in the cave and return to the root directory.\n        \"\"\"))\n\n    def list_contents(self):\n        contents = self.directory_structure.get(self.current_dir, [])\n        if contents:\n            print(\"\\n\".join(contents))\n        else:\n            print(\"This directory is empty.\")\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.normpath(os.path.join(self.current_dir, target_dir))\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n            print(f\"You are now in {self.current_dir}\")\n            # Check for items\n            if new_dir in self.items:\n                item = self.items.pop(new_dir)\n                self.inventory.append(item)\n                print(f\"You found a {item}!\")\n        else:\n            print(\"No such directory!\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"You are carrying:\")\n            print(\"\\n\".join(self.inventory))\n        else:\n            print(\"Your inventory is empty.\")\n\n    def play(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"Your goal is to find the golden key and escape the cave.\")\n        self.print_game_help()\n\n        while True:\n            print(f\"\\nCurrent location: {self.current_dir}\")\n            command = input(\"$ \").strip().split()\n\n            if not command:\n                continue\n\n            action = command[0]\n            if action not in self.commands:\n                print(\"Unknown command. Type 'help' for a list of commands.\")\n                continue\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    print(\"Usage: cd <dir>\")\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                print(\"Thanks for playing BashCrawl. Goodbye!\")\n                break\n\n            # Check win condition\n            if \"golden_key\" in self.inventory and self.current_dir == os.path.sep:\n                print(\"Congratulations! You've found the golden key and escaped!\")\n                break\n\n    def main_menu(self):\n        self.print_main_menu()\n        while True:\n            choice = input(\"Choose an option (1, 2, or 3): \").strip()\n            if choice == \"1\":\n                self.play()\n                self.print_main_menu()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                print(\"Goodbye!\")\n                break\n            else:\n                print(\"Invalid option. Please choose 1, 2, or 3.\")\n\n\nif __name__ == \"__main__\":\n    game = BashCrawl()\n    game.main_menu()\n"
        }
    ],
    "19": [
        {
            "file": "19-stdanswer.py",
            "path": "19-stdanswer.py",
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\ndef check_file_existence(file_path):\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n\ndef read_dataset(file_path):\n    try:\n        check_file_existence(file_path)\n        df = pd.read_csv(file_path)\n        if df.empty:\n            raise ValueError(\"The dataset is empty.\")\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The file '{file_path}' was not found.\")\n\ndef validate_dataset(df, required_columns):\n    missing_columns = [col for col in required_columns if col not in df.columns]\n    if missing_columns:\n        raise KeyError(f\"The dataset is missing the following required columns: {', '.join(missing_columns)}\")\n    return df\n\ndef preprocess_dataset(df):\n    non_date_entries = df[~df['Date of death'].astype(str).str.match(r'^\\\\d{4}-\\\\d{2}-\\\\d{2}$', na=False)]\n    if not non_date_entries.empty:\n        print(f\"Warning: Found {len(non_date_entries)} non-date entries. These will be ignored.\")\n    df['Date of death'] = pd.to_datetime(df['Date of death'], errors='coerce')\n    invalid_dates = df['Date of death'].isna().sum()\n    if invalid_dates > 0:\n        print(f\"Warning: {invalid_dates} invalid date entries were found and will be ignored.\")\n    df = df.dropna(subset=['Date of death'])\n    if df.empty:\n        raise ValueError(\"The dataset contains no valid 'Date of death' entries after cleaning.\")\n    df['Week'] = df['Date of death'].dt.to_period('W')\n    return df\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    plt.figure(figsize=(12, 6))\n    weekly_deaths.plot(kind='bar', color='skyblue', edgecolor='black')\n    plt.title('Weekly Deaths', fontsize=16)\n    plt.xlabel('Week', fontsize=14)\n    plt.ylabel('Number of Deaths', fontsize=14)\n    plt.xticks(rotation=45, fontsize=10)\n    plt.tight_layout()\n    plt.savefig(output_file)\n    plt.close()\n\ndef main():\n    try:\n        file_path = 'Deathlist.csv'\n        output_file = 'weekly_deaths_histogram.png'\n        required_columns = ['Date of death']\n\n        df = read_dataset(file_path)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        \n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == '__main__':\n    main()\n"
        }
    ],
    "20": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"
        },
        {
            "file": "admin.py",
            "path": "example_app/admin.py",
            "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'author', 'category', 'created_at', 'updated_at', 'operations')\n    def operations(self, obj):\n        return format_html(f'<a href=\"/admin/example_app/blogpost/{obj.id}/change/\" class=\"edit-link\">Edit</a> <a href=\"/post/{obj.id}/delete/\" class=\"delete-link\">Delete</a>')\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'operations')\n    def operations(self, obj):\n        return format_html(f'<a href=\"/admin/example_app/category/{obj.id}/change/\" class=\"edit-link\">Edit</a> <a href=\"/category/{obj.id}/delete/\" class=\"delete-link\">Delete</a>')\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    list_display = ('author', 'post', 'content', 'created_at')\n"
        },
        {
            "file": "forms.py",
            "path": "example_app/forms.py",
            "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']  # 可根据需要增加或调整字段\n"
        },
        {
            "file": "models.py",
            "path": "example_app/models.py",
            "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    class Meta:\n        verbose_name_plural = 'Categories'\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author}'\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    def __str__(self):\n        return \" \".join([self.name, str(self.email), self.content])"
        },
        {
            "file": "urls.py",
            "path": "example_app/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]\n"
        },
        {
            "file": "utils.py",
            "path": "example_app/utils.py",
            "code": "def filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n"
        },
        {
            "file": "views.py",
            "path": "example_app/views.py",
            "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, ContactUs\nfrom .forms import CommentForm\n\n\ndef home(request):\n    posts = BlogPost.objects.all().order_by('-created_at')[:3]\n    return render(request, 'blog/home.html', {'posts': posts})\n\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, id=pk)\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.post = post\n            comment.save()\n    else:\n        form = CommentForm()\n    comments = post.comments.all()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n\ndef archive(request):\n    # 获取所有的归档月份以及对应的文章数量\n    archives = (\n        BlogPost.objects.annotate(month=TruncMonth('created_at'))\n        .values('month')\n        .annotate(post_count=Count('id'))\n        .order_by('-month')\n    )\n\n    # 获取筛选参数\n    year = request.GET.get('year')\n    month = request.GET.get('month')\n\n    # 根据筛选参数过滤文章\n    if year and month:\n        filtered_posts = BlogPost.objects.filter(\n            created_at__year=year, created_at__month=month\n        ).order_by('-created_at')\n    else:\n        filtered_posts = []\n\n    context = {\n        'archives': archives,  # 月份和文章数量\n        'filtered_posts': filtered_posts,  # 筛选后的文章\n        'year': year,\n        'month': month,\n    }\n    return render(request, 'blog/archive.html', context)\n\n\ndef about(request):\n    if request.method == 'POST':\n        obj = ContactUs(\n            name=request.POST.get('name'),\n            email=request.POST.get('email'),\n            message=request.POST.get('message'),\n        )\n        obj.save()\n    return render(request, 'blog/about.html')\n\n\ndef search(request):\n    search_text = request.POST.get('searchbar', '')\n    context = {\n        \"posts\": (BlogPost.objects.filter(title__contains=search_text) | BlogPost.objects.filter(\n            content__contains=search_text)).order_by('-created_at'),\n    }\n    return render(request, 'blog/home.html', context)\n\n\n@login_required\ndef post_delete(request, pk):\n    try:\n        obj = BlogPost.objects.get(id=pk)\n        title = obj.title\n        obj.delete()\n    except BlogPost.DoesNotExist:\n        raise Http404\n    messages.success(request, f'BlogPost {title} successfully deleted')\n    return HttpResponseRedirect(\"/admin/example_app/blogpost/\")\n\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, id=pk)\n    posts = BlogPost.objects.filter(category=category).order_by('-created_at')\n    return render(request, 'blog/home.html', {'posts': posts})\n\n\n@login_required\ndef category_delete(request, pk):\n    try:\n        obj = Category.objects.get(id=pk)\n        name = obj.name\n        obj.delete()\n    except Category.DoesNotExist:\n        raise Http404\n    messages.success(request, f'Category {name} successfully deleted')\n    return HttpResponseRedirect(\"/admin/example_app/category/\")\n"
        },
        {
            "file": "__init__.py",
            "path": "example_app/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "example_app/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "styles.css",
            "path": "example_app/static/css/styles.css",
            "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\nheader {\n    background: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\nheader nav a {\n    color: #fff;\n    margin: 0 15px;\n    text-decoration: none;\n}\n\nmain {\n    padding: 20px;\n    background: #fff;\n    margin: 20px auto;\n    max-width: 800px;\n    border: 1px solid #ddd;\n}\n\nfooter {\n    text-align: center;\n    padding: 10px 0;\n    background: #333;\n    color: #fff;\n}\n"
        },
        {
            "file": "about.html",
            "path": "example_app/templates/blog/about.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block title %}About - My Blog{% endblock %}\n\n{% block content %}\n<div class=\"about\">\n<h1>About the Author</h1>\n<p>Welcome to my blog! I am a passionate writer who loves sharing knowledge and stories.</p>\n</div>\n<h2>Contact Me</h2>\n<form method=\"post\" action=\"{% url 'about' %}\">\n    {% csrf_token %}\n    <label for=\"name\">Name:</label>\n    <input type=\"text\" id=\"name\" name=\"name\" required>\n    <label for=\"email\">Email:</label>\n    <input type=\"email\" id=\"email\" name=\"email\" required>\n    <label for=\"message\">Message:</label>\n    <textarea id=\"message\" name=\"message\" required></textarea>\n    <button type=\"submit\">Send</button>\n</form>\n{% endblock %}\n"
        },
        {
            "file": "archive.html",
            "path": "example_app/templates/blog/archive.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n<h1>Archive</h1>\n\n<!-- 显示归档链接 -->\n<h2>Browse by Month</h2>\n<ul>\n    {% for archive in archives %}\n        <li>\n            <a href=\"?year={{ archive.month.year }}&month={{ archive.month.month }}\" class=\"month-filter\">\n                {{ archive.month|date:\"F Y\" }} ({{ archive.post_count }} posts)\n            </a>\n        </li>\n    {% empty %}\n        <li>No archives available.</li>\n    {% endfor %}\n</ul>\n\n<!-- 显示筛选结果 -->\n<h2>Posts from {{ year }}/{{ month }}</h2>\n<ul>\n    {% for post in filtered_posts %}\n        <li class=\"blog-post\">\n            <a href=\"{% url 'post_detail' post.id %}\">{{ post.title }}</a>\n            <span>Published on {{ post.created_at|date:\"F j, Y\" }}</span>\n        </li>\n    {% empty %}\n        <li>No posts found for this date.</li>\n    {% endfor %}\n</ul>\n\n{% endblock %}\n"
        },
        {
            "file": "base.html",
            "path": "example_app/templates/blog/base.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'styles.css' %}\">\n</head>\n<body>\n    <header>\n        <nav>\n            <a href=\"{% url 'home' %}\">Home</a>\n            <a href=\"{% url 'category' %}\">Categories</a>\n            <a href=\"{% url 'archive' %}\">Archive</a>\n            <a href=\"{% url 'about' %}\">About</a>\n\n        </nav>\n    </header>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n    <footer>\n        <p>&copy; 2024 My Blog</p>\n    </footer>\n</body>\n</html>\n"
        },
        {
            "file": "category.html",
            "path": "example_app/templates/blog/category.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block title %}Categories - My Blog{% endblock %}\n\n{% block content %}\n<h1>Blog Categories</h1>\n<ul>\n    {% for category in categories %}\n    <li>\n        <a href=\"{% url 'category_detail' category.id %}\" class=\"category-item\">{{ category.name }}</a>\n    </li>\n    {% endfor %}\n</ul>\n{% endblock %}\n"
        },
        {
            "file": "home.html",
            "path": "example_app/templates/blog/home.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block title %}Home - My Blog{% endblock %}\n\n{% block content %}\n<h1>Welcome to My Blog</h1>\n<section>\n    <form action=\"{% url 'search' %}\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"searchbar\">Search:</label>\n        <input id=\"searchbar\" type=\"text\" name=\"searchbar\">\n        <input type=\"submit\">\n    </form>\n    <h2>Latest Posts</h2>\n    <ul>\n        {% for post in posts %}\n        <li class=\"blog-post\">\n            <a href=\"{% url 'post_detail' post.id %}\">{{ post.title }}</a>\n            <p>{{ post.created_at|date:\"F d, Y\" }}</p>\n        </li>\n        {% endfor %}\n    </ul>\n</section>\n{% endblock %}\n"
        },
        {
            "file": "post_detail.html",
            "path": "example_app/templates/blog/post_detail.html",
            "code": "{% extends 'blog/base.html' %}\n\n{% block title %}{{ post.title }} - My Blog{% endblock %}\n\n{% block content %}\n<article>\n    <h1>{{ post.title }}</h1>\n    <p>By {{ post.author.username }} on {{ post.created_at|date:\"F d, Y\" }}, Category: {{ post.category }}</p>\n    <div>\n        {{ post.content|linebreaks }}\n    </div>\n</article>\n<section>\n    <h2>Comments</h2>\n    <ul>\n        {% for comment in comments %}\n        <li>\n            <strong>{{ comment.author }}</strong> - {{ comment.created_at|date:\"F d, Y H:i\" }}\n            <p><b>Comment:</b>{{ comment.content }}</p>\n        </li>\n        {% empty %}\n        <li>No comments yet. Be the first to comment!</li>\n        {% endfor %}\n    </ul>\n    <h3>Leave a Comment</h3>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Submit</button>\n    </form>\n</section>\n{% endblock %}\n"
        },
        {
            "file": "settings.py",
            "path": "example_project/settings.py",
            "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nLOGIN_URL = '/admin/login/'"
        },
        {
            "file": "urls.py",
            "path": "example_project/urls.py",
            "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "example_project/wsgi.py",
            "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "example_project/__init__.py",
            "code": ""
        }
    ]
}