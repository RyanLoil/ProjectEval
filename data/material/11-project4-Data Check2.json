{
        "project_id": "4",
        "project_type": "website",
        "nl_prompt": "Create a website for a password generator.",
        "framework_technical_stack": [
            {
                "language": "Python",
                "technical_stack": "Django"
            }
        ],
        "nl_checklist": [
            {
                "page": "Home",
                "required": true,
                "function": [
                    {
                        "function": "Display Welcome Message",
                        "description": "Show a welcome message or introduction to the password generator.",
                        "required": false
                    },
                    {
                        "function": "Navigation Button",
                        "description": "Button to the password generator page.",
                        "required": true
                    }
                ]
            },
            {
                "page": "PasswordOptions",
                "required": true,
                "function": [
                    {
                        "function": "Length Input",
                        "description": "Input field to specify the desired length of the password.",
                        "required": true
                    },
                    {
                        "function": "Include Uppercase",
                        "description": "Checkbox option to include uppercase letters in the password.",
                        "required": true
                    },
                    {
                        "function": "Include Lowercase",
                        "description": "Checkbox option to include lowercase letters in the password.",
                        "required": true
                    },
                    {
                        "function": "Include Numbers",
                        "description": "Checkbox option to include numbers in the password.",
                        "required": true
                    },
                    {
                        "function": "Include Symbols",
                        "description": "Checkbox option to include symbols in the password.",
                        "required": true
                    },
                    {
                        "function": "Generate Button",
                        "description": "Button to generate the password based on selected options.",
                        "required": true
                    }
                ]
            },
            {
                "page": "GeneratedPassword",
                "required": true,
                "function": [
                    {
                        "function": "Display Password",
                        "description": "Show the generated password to the user.",
                        "required": true
                    },
                    {
                        "function": "Copy to Clipboard",
                        "description": "Button to copy the generated password to the clipboard.",
                        "required": true
                    }
                ]
            },
            {
                "page": "About",
                "required": false,
                "function": [
                    {
                        "function": "Description",
                        "description": "Provide information about the purpose and functionality of the website.",
                        "required": false
                    }
                ]
            }
        ],
        "testcode": [
            {
                "page": "Home",
                "function": [
                    {
                        "function": "Display Welcome Message",
                        "test": "def test_display_welcome_message(driver, test_url,swelcome_message_id):\r\n    driver.get(test_url)\r\n    welcome_message = driver.find_element(By.ID,swelcome_message_id)\r\n    assert welcome_message.is_displayed()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for test"
                            },
                            {
                                "name": "swelcome_message_id",
                                "description": "the id of the welcome message element"
                            }
                        ]
                    },
                    {
                        "function": "Navigation Button",
                        "test": "def test_navigation_button(driver, test_url,navigation_button_id, generator_id):\r\n    driver.get(test_url)\r\n    generate_button = driver.find_element(By.ID,navigation_button_id)\r\n    assert generate_button.is_displayed()\r\n    generate_button.click()\r\n    time.sleep(1)\r\n    generator = driver.find_element(By.ID,generator_id)\r\n    assert generator.is_displayed()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for test"
                            },
                            {
                                "name": "navigation_button_id",
                                "description": "the button id for navigation to generator"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "PasswordOptions",
                "function": [
                    {
                        "function": "Length Input",
                        "test": "def test_length_input(driver, test_url,length_input_id):\r\n    driver.get(test_url)\r\n    length_input = driver.find_element(By.ID,length_input_id)\r\n    assert length_input.is_displayed()\r\n    length_input.send_keys('15')",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for test"
                            },
                            {
                                "name": "length_input_id",
                                "description": "the input box component id of the length"
                            }
                        ]
                    },
                    {
                        "function": "Include Uppercase",
                        "test": "def test_include_uppercase(driver, include_uppercase_id):\r\n    include_uppercase = driver.find_element(By.ID,include_uppercase_id)\r\n    assert include_uppercase.is_displayed()\r\n    include_uppercase.click()",
                        "parameter": [
                            {
                                "name": "include_uppercase_id",
                                "description": "the checkbox id of the generator option 'include uppercase'"
                            }
                        ]
                    },
                    {
                        "function": "Include Lowercase",
                        "test": "def test_include_lowercase(driver, include_lowercase_id):\r\n    include_lowercase = driver.find_element(By.ID,include_lowercase_id)\r\n    assert include_lowercase.is_displayed()\r\n    include_lowercase.click()",
                        "parameter": [
                            {
                                "name": "include_lowercase_id",
                                "description": "the checkbox id of the generator option 'include lowercase'"
                            }
                        ]
                    },
                    {
                        "function": "Include Numbers",
                        "test": "def test_include_numbers(driver, include_numbers_id):\r\n    include_numbers = driver.find_element(By.ID,include_numbers_id)\r\n    assert include_numbers.is_displayed()\r\n    include_numbers.click()",
                        "parameter": [
                            {
                                "name": "include_numbers_id",
                                "description": "the checkbox id of the generator option 'include numbers'"
                            }
                        ]
                    },
                    {
                        "function": "Include Symbols",
                        "test": "def test_include_symbols(driver, include_symbols_id):\r\n    include_symbols = driver.find_element(By.ID,include_symbols_id)\r\n    assert include_symbols.is_displayed()\r\n    include_symbols.click()",
                        "parameter": [
                            {
                                "name": "include_symbols_id",
                                "description": "the checkbox id of the generator option 'include symbols'"
                            }
                        ]
                    },
                    {
                        "function": "Generate Button",
                        "test": "def test_generate_button(driver, generate_button_id):\r\n    generate_button = driver.find_element(By.ID,generate_button_id)\r\n    assert generate_button.is_displayed()\r\n    generate_button.click()",
                        "parameter": [
                            {
                                "name": "generate_button_id",
                                "description": "the button id of submitting the \"generate password\" form"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "GeneratedPassword",
                "function": [
                    {
                        "function": "Display Password",
                        "test": "def test_display_password(driver, display_password_id):\r\n    display_password = driver.find_element(By.ID,display_password_id)\r\n    assert display_password.is_displayed()\r\n\r\n",
                        "parameter": [
                            {
                                "name": "display_password_id",
                                "description": "the id of the generated password element"
                            },
                            {
                                "name": "copy_button_id",
                                "description": "the button id of copying generated password"
                            }
                        ]
                    },
                    {
                        "function": "Rule Check 1",
                        "test": "def rule_check(driver, display_password_id):\r\n    display_password = driver.find_element(By.ID,display_password_id)\r\n    s = display_password.text\r\n    has_upper = any(c.isupper() for c in s)\r\n    has_lower = any(c.islower() for c in s)\r\n    has_digit = any(c.isdigit() for c in s)\r\n    has_special = any(c in string.punctuation for c in s)\r\n    if not (has_upper and has_lower and has_digit and has_special):\r\n        raise Exception(\"The generated result does not meet the requirements\")",
                        "parameter": [
                            {
                                "name": "display_password_id",
                                "description": "the id of the generated password element"
                            }
                        ]
                    },
                    {
                        "function": "Copy to Clipboard",
                        "test": "def test_copy_to_clipboard(driver, display_password_id, copy_button_id):\r\n    copy_button = driver.find_element(By.ID,copy_button_id)\r\n    assert copy_button.is_displayed()\r\n    copy_button.click()\r\n    time.sleep(1)\r\n    copy_text = pyperclip.paste()\r\n    display_password = driver.find_element(By.ID,display_password_id)\r\n    if copy_text != display_password.text:\r\n        raise Exception(\"Copy failed.\")",
                        "parameter": [
                            {
                                "name": "display_password_id",
                                "description": "the id of the generated password element"
                            }
                        ]
                    },
                    {
                        "function": "Generate Another Password",
                        "test": "def test_generate_another_password(driver, test_url, length_input_id, include_lowercase_id, include_numbers_id, generate_button_id, display_password_id):\r\n    driver.get(test_url)\r\n    length_input = driver.find_element(By.ID,length_input_id)\r\n    length_input.send_keys('10')\r\n    include_lowercase = driver.find_element(By.ID,include_lowercase_id)\r\n    include_lowercase.click()\r\n    include_numbers = driver.find_element(By.ID,include_numbers_id)\r\n    include_numbers.click()\r\n    generate_button = driver.find_element(By.ID,generate_button_id)\r\n    generate_button.click()\r\n    display_password = driver.find_element(By.ID,display_password_id)\r\n    assert display_password.is_displayed()\r\n",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for test"
                            },
                            {
                                "name": "length_input_id",
                                "description": "the input box component id of the length"
                            },
                            {
                                "name": "include_lowercase_id",
                                "description": "the checkbox id of the generator option 'include lowercase'"
                            },
                            {
                                "name": "include_numbers_id",
                                "description": "the checkbox id of the generator option 'include numbers'"
                            },
                            {
                                "name": "generate_button_id",
                                "description": "the button id of submitting the \"generate password\" form"
                            },
                            {
                                "name": "display_password_id",
                                "description": "the id of the generated password element"
                            }
                        ]
                    },
                    {
                        "function": "Rule Check 2",
                        "test": "def rule_check(driver, display_password_id):\r\n    display_password = driver.find_element(By.ID,display_password_id)\r\n    s = display_password.text\r\n    has_upper = any(c.isupper() for c in s)\r\n    has_lower = any(c.islower() for c in s)\r\n    has_digit = any(c.isdigit() for c in s)\r\n    has_special = any(c in string.punctuation for c in s)\r\n    if not (has_lower and has_digit) or (has_upper or has_special):\r\n        raise Exception(\"The generated result does not meet the requirements\")",
                        "parameter": [
                            {
                                "name": "display_password_id",
                                "description": "the id of the generated password element"
                            }
                        ]
                    }
                ]
            },
            {
                "page": "About",
                "function": [
                    {
                        "function": "About Link",
                        "test": "def test_about_link(driver, test_url, about_link_id):\r\n    driver.get(test_url)\r\n    about_link = driver.find_element(By.ID, about_link_id)\r\n    assert about_link.is_displayed()\r\n    about_link.click()",
                        "parameter": [
                            {
                                "name": "test_url",
                                "description": "the url for test"
                            },
                            {
                                "name": "about_link_id",
                                "description": "the hyperlink id of about page in the home page"
                            }
                        ]
                    },
                    {
                        "function": "Description",
                        "test": "def test_description(driver, description_id):\r\n    description = driver.find_element(By.ID, description_id)\r\n    assert description.is_displayed()",
                        "parameter": [
                            {
                                "name": "description_id",
                                "description": "the id of the discription element"
                            }
                        ]
                    }
                ]
            }
        ]
    }