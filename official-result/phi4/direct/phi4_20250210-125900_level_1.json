{"5": [{"file": "manage.py", "path": "markdown_html_converter/manage.py", "code": "# manage.py\nimport os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. \\n\\nAre you sure it's installed and available on your PYTHONPATH? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "markdown_html_converter/markdown_html_converter/settings.py", "code": "# Settings for Django project\n\nimport os\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.staticfiles',\n    'markdown_html_converter_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_html_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_html_converter.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / \"db.sqlite3\",\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "markdown_html_converter/markdown_html_converter/urls.py", "code": "# urls for the project\n\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('markdown_html_converter_app.urls')),\n]"}, {"file": "wsgi.py", "path": "markdown_html_converter/markdown_html_converter/wsgi.py", "code": "# wsgi for Django\n\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "markdown_html_converter/markdown_html_converter/asgi.py", "code": "# asgi for Django\n\nimport os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\napplication = get_asgi_application()"}, {"file": "views.py", "path": "markdown_html_converter/markdown_html_converter_app/views.py", "code": "# views for the markdown HTML converter app\n\nfrom django.shortcuts import render\nimport markdown2\n\ndef convert(request):\n    context = {\"markdown_text\": \"\"}\n    if request.method == 'POST':\n        text = request.POST.get('text', '')\n        html_output = markdown2.markdown(text)\n        context['html_output'] = html_output\n    return render(request, 'convert.html', context)"}, {"file": "urls.py", "path": "markdown_html_converter/markdown_html_converter_app/urls.py", "code": "# app urls\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('convert/', views.convert, name='convert'),\n]"}, {"file": "apps.py", "path": "markdown_html_converter/markdown_html_converter_app/apps.py", "code": "# apps for the app\n\nfrom django.apps import AppConfig\n\nclass MarkdownHtmlConverterAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'markdown_html_converter_app'"}, {"file": "models.py", "path": "markdown_html_converter/markdown_html_converter_app/models.py", "code": "# models file - no models needed for this application\n\n# Create your models here.\n"}, {"file": "templates/convert.html", "path": "markdown_html_converter/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown HTML Converter</title>\n</head>\n<body>\n    <h1 id=\"header\" class=\"main-header\">Markdown to HTML Converter</h1>\n    <form method=\"post\" action=\"\" class=\"convert-form\">\n        {% csrf_token %}\n        <textarea name=\"text\" rows=\"15\" cols=\"60\" id=\"markdown-input\" class=\"input-textarea\"></textarea><br>\n        <button type=\"submit\">Convert</button>\n    </form>\n    <div id=\"output\" class=\"html-output\">\n        {% if html_output %}\n            {{ html_output | safe }}\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "README.md", "path": "markdown_html_converter/README.md", "code": "# Markdown HTML Converter\n\nThis Django project is a simple web application that converts markdown text into HTML.\\n\\n## Running the Project\\n\\n1. Clone the repository.\n2. Install the dependencies using `pip install -r requirements.txt`.\\n3. Run `python manage.py runserver` to start the server.\n4. Navigate to `http://127.0.0.1:8000/convert/` in your web browser."}, {"file": "requirements.txt", "path": "markdown_html_converter/requirements.txt", "code": "# requirements for the app\\ndjango~=3.2\\nmarkdown2"}], "7": [{"file": "manage.py", "path": "budget_control/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == 'main':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. \\n\\nHINT: Make sure you have 'django' in your INSTALLED_APPS.\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "budget_control/budget_control/settings.py", "code": "# \"Database configuration\\nDATABASES = {\\n    'default': {\\n        'ENGINE': 'django.db.backends.sqlite3',\\n        'NAME': BASE_DIR / 'db.sqlite3',\\n    }\\n}\\n# \"Templates setting \\nTEMPLATES = [\n  {\n      'BACKEND': 'django.template.backends.django.DjangoTemplates',\n      'DIRS': [BASE_DIR / 'templates'],\n      'APP_DIRS': True,\n      'OPTIONS': {\n          'context_processors': [\n              'django.template.context_processors.debug',\n              'django.template.context_processors.request',\n              'django.contrib.auth.context_processors.auth',\n              'django.contrib.messages.context_processors.messages',\n          ],\n      },\n  }\n]\n# \"Static files (CSS and JavaScript) \\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "budget_control/budget_control/urls.py", "code": "# Configuring URLs for the Django project\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('home.urls')),\n]"}, {"file": "wsgi.py", "path": "budget_control/budget_control/wsgi.py", "code": "# WSGI config for budget_control project\\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "budget_control/budget_control/__init__.py", "code": ""}, {"file": "asgi.py", "path": "budget_control/budget_control/asgi.py", "code": "# ASGI config for budget_control project\\nimport os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\nasgi_app = get_asgi_application()"}, {"file": "apps.py", "path": "budget_control/home/apps.py", "code": "# Django App Config\\nfrom django.apps import AppConfig\n\nclass HomeConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'home'"}, {"file": "admin.py", "path": "budget_control/home/admin.py", "code": "# Django Admin configuration\\nfrom django.contrib import admin\n# Register your models here"}, {"file": "models.py", "path": "budget_control/home/models.py", "code": ""}, {"file": "views.py", "path": "budget_control/home/views.py", "code": "# Django Views\\nfrom django.shortcuts import render\n\ndef index(request):\n    return render(request, 'home/index.html')"}, {"file": "urls.py", "path": "budget_control/home/urls.py", "code": "# Home App URLs\\nfrom django.urls import path\nfrom .views import index\n\nurlpatterns = [\\n    path('', index, name='index')\n]"}, {"file": "home.html", "path": "templates/home/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <!-- Include Chart.js CDN -->\n    <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>\n</head>\n<body>\n    <h1 id=\"main-header\" class=\"header\">Budget Control Application</h1>\n    <canvas id=\"balanceChart\" width=\"400\" height=\"150\"></canvas>\n    <script>\n        var ctx = document.getElementById('balanceChart').getContext('2d');\n\n        var balanceOverTime = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: [\\'January\\', \\'February\\', \\'March\\'],\n                datasets: [{\n                    label: '# of visitors',\n                    data: [12, 19, 3],\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    yAxes: [{\n                        ticks: { beginAtZero: true }\n                    }]\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}], "8": [{"file": "calendar/management/commands/populate_database.py", "path": "calendar/management/commands/populate_database.py", "code": "from django.core.management.base import BaseCommand\nimport calendar\n\nclass Command(BaseCommand):\n    help = 'Populates the database with sample data'\n\n    def handle(self, *args, **kwargs):\n        for month in range(1, 13):\n            event = calendar.Event(\n                name=f'Sample Event {month}', \n                description='A recurring event',\n                date=calendar.datetime.date.today().replace(month=month)\n            )\n            event.save()\n\n        self.stdout.write(self.style.SUCCESS('Successfully added sample events for each month'))"}, {"file": "calendar/models.py", "path": "calendar/models.py", "code": "from django.db import models\n\n\nclass Event(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    date = models.DateField()\n\n    def __str__(self):\n        return self.name"}, {"file": "calendar/views.py", "path": "calendar/calendar/views.py", "code": "from django.shortcuts import render\nfrom .models import Event\nfrom calendar.views_calendar import monthly_calender\n\ndef event_list(request):\n    events = Event.objects.all()\n    return render(request, 'events.html', {'events': events})\ndef upcoming_events(request):\n    today = timezone.now().date()\n    events = Event.objects.filter(date__gte=today).order_by('date')\n    calendar_html = monthly_calender(today.year, today.month)\n    return render(request, 'upcoming.html', {'events': events, 'calendar_html': calendar_html})"}, {"file": "calendar/urls.py", "path": "calendar/calendar/urls.py", "code": "from django.urls import path\nfrom .views import event_list, upcoming_events\n\nurlpatterns = [\n    path('', event_list, name='event-list'),\n    path('upcoming/', upcoming_events, name='upcoming-events'),\n]"}, {"file": "calendar/views_calendar.py", "path": "calendar/calendar/views_calendar.py", "code": "import calendar as cal\nfrom django.utils.html import format_html\n\ndef monthly_calender(year: int=2023, month: int=1) -> str:\n    month_cal = f'{year}-{month:02d}'\n    _, num_days = cal.monthrange(int(month_cal[:4]), int(month_cal[5:]))\n\n    first_day_weekday = cal.weekday(int(year), int(month), 1)\n\n    html_table = ['<table class=\"calendar-month\">']\n\n    html_table.append('<tr>\\n<th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th>\\n</tr>')\n\n    row = '<tr>'  # first week in month might be incomplete\n    for day in range(0, first_day_weekday):\n        row += '<td class=\"empty\"></td>'   \n    \n    day = 1\n    while day <= num_days:\n        if (len(row) + len(str(day)) + 4) > 85:   # max length of a line in html table\n            html_table.append(f'{row}\\\\n')\n            row = ''                             # start new week\n        \n        row += f'<td class=\"day\" id=\"date-{year}-{month}-{day:02d}\">{day}</td>'   # fill day column with day number\n        day += 1              \n    html_table.append(f'{row}\\\\n</tr>')\n\n    html_table.append('</table>')            \n    return format_html(html_table)"}, {"file": "calendar/admin.py", "path": "calendar/calendar/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "templates/index.html", "path": "calendar/templates/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Monthly Calendar</title>\n</head>\n<body>\n    <a href=\"/\">Event List</a> | \n    <a href=\"/upcoming/\">Upcoming Events</a></br>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "templates/events.html", "path": "calendar/templates/events.html", "code": "{% extends 'index.html' %} {\n{% block content %}\n<h1>Events for the month:</h1>\n<ul class=\"events\">\n   {% for event in events %}\n   <li id='event-{{ forloop.counter }}' class='event-item'><strong>{{ event.date }}</strong>: {{ event.name }} - {{ event.description }}</li>\n   {% empty %}\n    <p>No events available.</p>  \n   {% endfor %}\n</ul>\n{% endblock %}"}, {"file": "templates/upcoming.html", "path": "calendar/templates/upcoming.html", "code": "{% extends 'index.html' %} {\n{% block content %}\n<h1>Upcoming Events:</h1>\n{{ calendar_html|safe }}</br>\n<ul class=\"upcoming-events\">\n   {% for event in events %}\n   <li id='event-{{ forloop.counter }}' class='event-item'><strong>{{ event.date }}</strong>: {{ event.name }}</li>\n   {% empty %}\n    <p>No upcoming events available.</p>  \n   {% endfor %}\n</ul>\n{% endblock %}"}], "14": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable?\" \n            ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "helloworld/__init__.py", "path": "helloworld/helloworld/__init__.py", "code": ""}, {"file": "helloworld/settings.py", "path": "helloworld/helloworld/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-some_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "helloworld/asgi.py", "path": "helloworld/helloworld/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\nsite = get_asgi_application()\n"}, {"file": "helloworld/wsgi.py", "path": "helloworld/helloworld/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\napplication = get_wsgi_application()\n"}, {"file": "helloworld/urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]\n"}, {"file": "app/__init__.py", "path": "helloworld/app/__init__.py", "code": ""}, {"file": "app/views.py", "path": "helloworld/app/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'hello-world.html')\n"}, {"file": "app/urls.py", "path": "helloworld/app/urls.py", "code": "from django.urls import path\nfrom .views import hello_world\n\nurlpatterns = [\n    path('', hello_world),\n]\n"}, {"file": "templates/hello-world.html", "path": "helloworld/templates/hello-world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"greeting\" class=\"text-center\">Hello wordl!</h1>\n</body>\n</html>\n"}], "15": [{"file": "manage.py", "path": "helloworld_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"helloworld_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise RuntimeError(\n            \"Couldn't import Django. Are you sure it's installed and \\\"\n            \"available on your PYTHONPATH environment variable? Did you forget to \\\"\\n\\\n            \"activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "helloworld_project/helloworld_project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-randomsecretkey!'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates',\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "helloworld_project/helloworld_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"helloworld_app.urls\")),\n]"}, {"file": "wsgi.py", "path": "helloworld_project/helloworld_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "helloworld_project/helloworld_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "helloworld_project/helloworld_app/admin.py", "code": "# Register your models here."}, {"file": "apps.py", "path": "helloworld_project/helloworld_app/apps.py", "code": "from django.apps import AppConfig\n\nclass HelloworldAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworld_app'"}, {"file": "models.py", "path": "helloworld_project/helloworld_app/models.py", "code": "# Create your models here."}, {"file": "views.py", "path": "helloworld_project/helloworld_app/views.py", "code": "from django.shortcuts import render\n\ndef hello_word_page(request):\n    return render(request, 'hello_world.html')"}, {"file": "urls.py", "path": "helloworld_project/helloworld_app/urls.py", "code": "from django.urls import path,\nfrom .views import hello_word_page\n\nurlpatterns = [\n    path('helloworld/', hello_word_page, name='hello-world'),\n]"}, {"file": "views.py", "path": "helloworld_project/helloworld_app/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'index.html')"}, {"file": "urls.py", "path": "helloworld_project/helloworld_app/urls.py", "code": "from django.urls import path\nfrom .views import hello_word_page, index\n\nurlpatterns = [\n    path('', index, name='index'),\n    path('helloworld/', hello_word_page, name='hello-world'),\n]"}, {"file": "index.html", "path": "helloworld_project/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Django Project</title>\n</head>\n<body>\n    <button id=\"jump-button\" class=\"btn\">Go to Hello Word Page</button>\n    <script>\n        document.getElementById('jump-button').addEventListener('click', function() {\n            window.location.href = '/helloworld/';\n        });\n    </script>\n</body>\n</html>"}, {"file": "hello_world.html", "path": "helloworld_project/templates/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World Page</title>\n</head>\n<body class=\"hello-page\">\n    <h1 id=\"greeting\">Hello, World!</h1>\n</body>\n</html>"}], "16": [{"file": "read_and_write_excel.bat", "path": "./project/read_and_write_excel.bat", "code": "# read_and_write_excel.bat\n@echo off\necho Reading the Excel file...\nnpx ts-node index.ts\n"}, {"file": "index.ts", "path": "./project/index.ts", "code": "import * as XLSX from 'xlsx';\nconst fs = require('fs');\n\nfunction readAndTransformExcel(inputFilePath: string, outputFilePath: string): void {\n  const workbook = XLSX.readFile(inputFilePath);\n  const sheetName = workbook.SheetNames[0];\n  const worksheet = workbook.Sheets[sheetName];\n  const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });\n\n  // Remove headers\n  const headers = jsonData.shift();\n  \n  // Transform data into a two-dimensional subject table\n  const transformedData = [];\n  for (let row of jsonData) {\n    const [id, name, weekday, time] = row;\n    if ([\"First period\", \"Second period\", \"Third period\", \"Fourth period\"].includes(time)) {\n      transformedData.push([name, `${weekday} ${time}`]);\n    }\n  }\n\n  // Create new workbook and sheet for output\n  const newWorkbook = XLSX.utils.book_new();\n  const newWorksheet = XLSX.utils.aoa_to_sheet(transformedData);\n  \n  XLSX.utils.book_append_sheet(newWorkbook, newWorksheet, 'Subjects');\n\n  // Write to the new Excel file\n  XLSX.writeFile(newWorkbook, outputFilePath);\n  console.log('Excel file processed and saved successfully.');\n}\n\nconst inputPath = './project/Spring Semester Subjects.xlsx';\nconst outputPath = './project/Transformed Subjects.xlsx';\nreadAndTransformExcel(inputPath, outputPath);\n"}, {"file": "package.json", "path": "./project/package.json", "code": "{\n  \"name\": \"read-and-write-excel\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A script to read and write Excel files using Node.js\",\n  \"main\": \"index.ts\",\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"start\": \"ts-node index.ts\"\n  },\n  \"type\": \"module\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"@types/node\": \"^16.11.15\", \n    \"typescript\": \"^4.5.4\",\n    \"xlsx-interfaces-package\": \"^1.0.2\",\n    \"ts-node\": \"^10.2.1\"\n  }\n}\n"}, {"file": "tsconfig.json", "path": "./project/tsconfig.json", "code": "{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./\",\n    \"rootDir\": \".\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"index.ts\"]\n}\n"}], "17": [{"file": "read_and_model.bat", "path": "project_dir/read_and_model.bat", "code": "Rscript --vanilla run_logistic.R"}, {"file": "run_logistic.R", "path": "project_dir/run_logistic.R", "code": "library(openxlsx)\nlibrary(dplyr)\nlibrary(statsmodels)\n\n# Read the dataset\nwd <- getwd()\ncsv_file_path <- paste0(wd, '/Gamedata.xlsx')\ndata <- read.csv(csv_file_path)\n\n# Create lag in 'result'\ndata <- data %>% \n  arrange(desc(date)) %>% \n  group_by(player_id) %>% \n  mutate(lagged_result = lag(result, n=1), .after=last_col()) %>% \n  ungroup()\n\ndata <- na.omit(data)\n\n# Ensure 'result' is a factor for logistic regression\ndata$result <- as.factor(data$result)\ndata$lagged_result <- as.factor(data$lagged_result)\n\n# Prepare the dataset for modeling\nindep_vars <- setdiff(names(data), c(\"result\", \"date\", \"player_id\"))\ndata_model <- data.frame(lagged_result = data$lagged_result, \n                        data[, indep_vars])\n\n# Create logistic model\nmodel <- glm(lagged_result ~ ., family=binomial(logit), data=data_model)\nsummary(model) # This captures the summary details in R console\n\n# Save summary to Excel file\nlibrary(openxlsx)\noutput_file_path <- paste0(wd, '/Logistic.xlsx')\nbasicExcelTemplate(output = output_file_path)\nsheet <- createSheet()\naddWorksheet(output_file_path, sheetName=\"Summary\")\ndata_output <- format(model_summary <- summary(model), digits=4)\nwriteData(output_file_path, sheet=\"Summary\", x=data_output)\ncloseWorkbook(output_file_path)"}], "18": [{"file": "main.py", "path": "/bashcrawl/bashcrawl/main.py", "code": "# Bashcrawl - A console-based text adventure game\nimport sys\n\nclasses Character:\n    \"\"\"Character class for the game player and NPCs.\"\"\"\n    def __init__(self, name):\n        self.name = name\n        self.inventory = []\n    \ndef load_room(description):\n    print(description)\n\ndef move(direction):\n    if direction == 'north':\n        # Logic to change room based on location goes here\n        return \"Narrow Room\"\n    else:\n        print(\"You can't go that way.\")\n        return \"Starting Room\"\n\ndef start_game():\n    player = Character('Player')\n    current_room = 'Starting Room'\n    load_room(\"This is the starting room. There are passages to the north.\")\n\n    while True:\n        command = input('>').lower().split()\n        if not command:\n            continue\n\n        action = command[0]\n        \n        if action == 'move':\n            if len(command) > 1:\n                new_room = move(command[1])\n                current_room = new_room\n                load_room(f\"You are now in the {current_room}\")\n            else:\n                print(\"Move where?\")\n        elif action == 'quit':\n            sys.exit()\n        else:\n            print(\"Unknown command. Try moving or quit.\")\n\nif __name__ == '__main__':\n    start_game()"}, {"file": "run.sh", "path": "/bashcrawl/bashcrawl/run.sh", "code": "#!/bin/bash\n# Shell script to run bashcrawl game\npython3 main.py"}], "19": [{"file": "index.html", "path": "/project-directory/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Weekly Deaths Histogram</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .chart-container { width: 80%; max-width: 600px; margin: auto; }\n    </style>\n</head>\n<body>\n    <div class=\"chart-container\">\n        <canvas id=\"deathHistogram\" class=\"chart\"></canvas>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>"}, {"file": "style.css", "path": "/project-directory/style.css", "code": ""}, {"file": "script.js", "path": "/project-directory/script.js", "code": "async function main() {\n    const data = await fetchCSV('/Deathlist.csv');\n    const weeklyDeaths = processData(data);\n    renderHistogram(weeklyDeaths);\n}\n\nfunction fetchCSV(filePath) {\n    return new Promise((resolve, reject) => {\n        const xhr = new XMLHttpRequest();\n        xhr.onreadystatechange = function() {\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(xhr.responseText);\n                } else {\n                    reject('Failed to load CSV');\n                }\n            }\n        };\n        xhr.open('GET', filePath, true);\n        xhr.send();\n    });\n}\n\nfunction processData(csvData) {\n    const rows = csvData.trim().split('\\n').slice(1); // Skip header\n    const dateRegex = /\"([0-9]{4}-[0-9]{2}-[0-9]{2})/;\n    const weeklyDeaths = {};\n    rows.forEach(row => {\n        const columns = row.split(',');\n        const match = columns[1].match(dateRegex); // \"Date of death\" is second column\n        if (match) {\n            const weekNumber = new Date(match[1]).toISOString().slice(0, 10);\n            weeklyDeaths[weekNumber] = (weeklyDeaths[weekNumber] || 0) + 1;\n        }\n    });\n    return Object.entries(weeklyDeaths).sort((a, b) => new Date(a[0]) - new Date(b[0]));\n}\n\nfunction renderHistogram(data) {\n    const ctx = document.getElementById('deathHistogram').getContext('2d');\n    new Chart(ctx, {\n        type: 'bar',\n        data: {\n            labels: data.map(entry => entry[0]),\n            datasets: [{\n                label: 'Weekly Deaths',\n                data: data.map(entry => entry[1]),\n                backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                borderColor: 'rgba(75, 192, 192, 1)',\n                borderWidth: 1\n            }]\n        },\n        options: {\n            scales: {\n                x: { title: { display: true, text: 'Week' } },\n                y: { beginAtZero: true }\n            }\n        }\n    });\n}\n\ndocument.addEventListener('DOMContentLoaded', main);"}, {"file": "Deathlist.csv", "path": "/project-directory/Deathlist.csv", "code": ""}]}