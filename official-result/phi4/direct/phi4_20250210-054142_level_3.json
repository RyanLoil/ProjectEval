{"4": [{"file": "answer_0001_settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "answer_0002_urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "answer_0003_manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    from django.core.management import execute_from_command_line\n    execute_from_command_line(sys.argv)"}, {"file": "answer_0004_wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\napplication = get_wsgi_application()"}, {"file": "answer_0005_app_init.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "answer_0006_admin_init.py", "path": "qr_app/admin.py", "code": ""}, {"file": "answer_0007_apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "answer_0008_models.py", "path": "qr_app/models.py", "code": ""}, {"file": "answer_0009_migrations_init.py", "path": "qr_app/migrations/__init__.py", "code": ""}, {"file": "answer_0010_tests.py", "path": "qr_app/tests.py", "code": ""}, {"file": "answer_0011_views.py", "path": "qr_app/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'index.html')"}, {"file": "answer_0012_urls.py", "path": "qr_app/urls.py", "code": "from django.urls import path\nfrom .views import index\n\nurlpatterns = [\n    path('', index, name='index'),\n]"}, {"file": "answer_0013_templates_index.html", "path": "qr_app/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1 id=\"app-title\">QR Code Generator</h1>\n</body>\n</html>"}, {"file": "answer_0014_index.js", "path": "static/js/index.js", "code": "// JS Code\nconsole.log('QR Code JavaScript loaded.');"}], "7": [{"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\n\n# URL route configuration in the 'example_app'\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.views.generic import TemplateView\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['message'] = 'Welcome to the Money Management App!'\n        return context\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "# Future models and ORM relationships for money management\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Security settings and key configuration\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'example_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'example_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = False\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.views.generic import TemplateView\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['message'] = 'Welcome to the Money Management App!'\n        return context\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n]"}], "10": [{"file": "example_app/views.py", "path": "example_project/example_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.models import User\nfrom .models import MealLog, ActivityLog\nfrom .forms import SignUpForm, AddLogMeal, AddActivityForm\nfrom django.core.exceptions import PermissionDenied\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.csrf import csrf_protect\nclass LoginRequiredMixin(object):\n    @method_decorator(csrf_protect)\n    def dispatch(self, request, *args, **kwargs):\n        if not request.user.is_authenticated:\n            raise PermissionDenied()\n        return super(LoginRequiredMixin, self).dispatch(request, *args, **kwargs)\nclass IndexView(LoginRequiredMixin, View):\n    template_name = 'home.html'\ndef registration_view(request):\n    form = SignUpForm(request.POST or None)\n    context = {}\n    if request.method == 'POST':\n        if form.is_valid():\n            password = form.cleaned_data.get('password1')\n            user = User.objects.create_user(username=form.cleaned_data['username'], email=form.cleaned_data['email'], password=password)\n            user.save()\n            return redirect('home')\n    else:\n        context[\"form\"] = form\n    return render(request, 'registration.html', context=context)\ndef login_view(request):\n    username = request.POST.get(\"username\")\n    password = request.POST.get(\"password\")\n    user = authenticate(username=username, password=password)\n    if user is not None:\n        login(request, user)\n        return redirect('home')\n    else:\n        context = {\"ErrorMessage\": \"Your username and/or your password are wrong.\"}\n        return render(request=request,\n                      template_name=\"login.html\",\n                      context=context)\ndef logout_view(request):\n    if request.method == 'POST':\n        logout(request)\n    return redirect(\"home\")\ndef profile(request):\n    user = request.user\n    meals = MealLog.objects.filter(owner=user.username).order_by('-id')[:7]\n    activities = ActivityLog.objects.filter(owner=user.username).order_by('-id')[:7]\n    context = {\n        \u201cmeals\u201d: meals,\n        \u201cactivities\u201d: activities\n    }\n    return render(request, 'profile.html', context=context)\ndef add_meal_log_view(request):\n    form = AddLogMeal(data=request.POST or None, user=request.user.username)\n    if form.is_valid() and request.method == \"POST\":\n        obj = form.save(commit=False)\n        obj.owner = request.user.username\n        obj.save()\n        return redirect('profile')\n    else:\n        context={\"form\":form}\n        return render(request, 'add_meal_log.html', context=context)\ndef add_activity_log_view(request):\n    form = AddActivityForm(data=request.POST or None)\n    if request.method == \"POST\" and form.is_valid():\n        obj= form.save(commit=False)\n        obj.owner = request.user.username\n        obj.save()\n        return redirect('profile')\n    else:\n        context={\"form\": form}\n        return render(request, 'add_activity_log.html', context=context)"}, {"file": "models.py", "path": "example_project/example_app/models.py", "code": "# Meal Logs\nfrom django.db import models\ndef mealType_choices():\n    return [(\"breakfast\", \"breakfast\"), (\"lunch\", \"lunch\"), (\"dinner\", \"dinner\")]\nclass MealLog(models.Model):\n    owner = models.ForeignKey(User, on_delete=models.CASCADE)\n    timestamp = models.TimeField(default=timezone.now)\n    description = models.TextField(blank=True)\n    valuePerServing = models.DecimalField(max_digits=6, decimal_places=2, default=0)\n    quantity = models.IntegerField(null=True, blank=True, default=1.00)\n    mealType = models.CharField(choices=mealType_choices(), max_length=10)\ndef activityType_choices():\n    return [(\"Aerobic Moderate\", \"aerobic light/moderate intensity exercise 3.5 METs (eg., ballroom dancing), moderate walking, slow bicycling (<10 mph)\"), \n             (\"Aerobic Intense\", (\"aerobic vigorous intensity exercise (>6 METs), brisk walking (>2.5 mph), uphill or fast bicycling (>10 mph)), running, swimming with fins (85 yards/min)\")]\nclass ActivityLog(models.Model):\n    owner = models.ForeignKey(User,on_delete=models.CASCADE)\n    timestamp = models.TimeField(default=timezone.now)\n    activityType = models.CharField(choices=activityType_choices(), max_length=50)\n    durationInMinutes = models.IntegerField(null=True, blank=True,default=1.00)"}, {"file": "forms.py", "path": "example_project/example_app/forms.py", "code": "# Meal-Logging Form\nfrom django import forms\nclass AddLogMeal(forms.Form):\n    description = forms.CharField(label=\"Food Item\", max_length=500)\n    valuePerServing = forms.DecimalField(\n        label=\"Calories per serving\",\n         widget=forms.NumberInput(attrs=\n            {\n              \"style\":'background-color: rgb(218, 255, 223); border-color: rgb(0, 128, 0)',\n                }), required=False, localize=True,\n        max_digits=6,\n        decimal_places=2\n    )\n    quantity = forms.IntegerField(\n        label=\"No. of Servings\",\n        widget=forms.NumberInput(attrs=\n            {\n              \"style\":'background-color: rgb(218, 255, 223); border-color: rgb(0, 128, 0)',\n                }), required=False\n    )\n    mealType = forms.ChoiceField(label=\"Meal Type\", choices=(\"breakfast\", \"lunch\", \"dinner\"))\n    # owner=forms.ModelChoiceField(queryset=User.objects.all())\ndef __init__(self, data=None, user=None, *args, **kwargs):\n        super(AddLogMeal, self).__init__(data=data, *args, **kwargs)\n        \n# Activity-Logging Form\nfrom django import forms\nclass AddActivityForm(forms.Form):\n    activityType = forms.ChoiceField(\n           label=\"Exercise Type\",\n                 choices=activityType_choices())\n    durationInMinutes = forms.IntegerField(label='no. of minutes spent on the exercise:')\ndef __init__(self, data=None, *args, **kwargs):\n        self.user = kwargs.pop('user', None)\n        super(AddActivityForm, self).__init__(data=data,\n                                              *args,\n                                              **kwargs)"}, {"file": "urls.py", "path": "example_project/example_app/urls.py", "code": "# urls for example app\nfrom django.urls import path\nurlpatterns = [\n     # home page\n      path('', views.IndexView.as_view(), name='home'),\n       path('registration/', views.registration_view, name=\"registration\"),\n        path('login/', views.login_view,name=\"login\") ,\n          path('logout/', views.logout_view,name=\"logout\" ),\n            path('profile/', views.profile,name='profile'),\n              path('add_meal_log/', views.add_meal_log_view,name='add-meal-log')\n               path('add_activity_log/', views.add_activity_log_view,name='add-activity-log'),\n]"}, {"file": "authapp/models.py", "path": "example_project/authapp/models.py", "code": "from django.db import models\nfrom datetime import date\nimport uuid\nclass Profile(models.Model):\n      profileID = models.UUIDField(primary_key=True, default=uuid.uuid4)\n     username = models.CharField(max_length=40)\n    gender = models.CharField(max_length=10,\n        choices=(('male', 'Male'), ('female','Female')))\n    birthdate = models.DateField(max_length=30)\n    weight_kg = models.DecimalField(decimal_places=2,max_digits=5,null=True,blank=True,help_text=\"enter your current weight\")\n    height_centimeters = models.IntegerField(null=True, blank=True, help_text='enter your height')"}, {"file": "__init__.py", "path": "example_project/example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_project/authapp/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_project/example_app/migrations/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_project/authapp/migrations/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "example_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it\u2019s installed and \\\n             available on your PYTHONPATH environment variable? Did you \\\n             forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...) \nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-7&y1c^*z^jv+(-=t)u%3w_9@k6l^q@h=2+5#f1r%j4j$0!j5t&'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "# Register your models here.\nfrom django.contrib import admin\nclass SampleAppAdmin(admin.ModelAdmin):\n    # Configure model options here if any\n    pass\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nclass ExampleModel(models.Model):\n    field_name = models.CharField(max_length=100)\n    # Additional fields here\ndef __str__(self):\n    return self.field_name\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home_view(request):\n    context = {\n        'key': 'value'\n    }\n    return render(request, 'home.html', context)\nclass SampleView:\n    def get(self, request, *args, **kwargs):\n        # Logic for Get request\n        pass\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "# ExampleApp URL Configuration\\nfrom django.urls import path\\nfrom . import views\\nurlpatterns = [\\n    path('', views.home_view, name='home'),\\n]\\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "urls.py", "path": "example_project/urls.py", "code": "# ExampleProject URL Configuration\\nfrom django.contrib import admin\\nfrom django.urls import include, path\\nurlpatterns = [\\n    path('admin/', admin.site.urls),\\n    path('app/', include('example_app.urls')),\\n]\\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "# wsgi.py\\n\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "# asgi.py\\n\nimport os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_asgi_application()\n"}], "13": [{"file": "account_management.html", "path": "example_app/templates/account_management.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Account Management</title>\n<link rel=\"stylesheet\" href=\"/static/css/style.css\">\n</head>\n<body>\n<div class=\"container\" id=\"account-management-container\">\n<h1>Manage Your Account</h1>\n<p>Welcome, <span id=\"username-display\">[Username]</span>!</p>\n<ul>\n<li><a href=\"#\" class=\"nav-link\" id=\"view-profile-link\">View Profile</a></li>\n<li><a href=\"#\" class=\"nav-link\" id=\"edit-account-link\">Edit Account</a></li>\n<li><a href=\"/logout/\" class=\"nav-link\" id=\"log-out-link\">Log Out</a></li>\n</ul>\n</div>\n<script src=\"/static/js/account_management.js\"></script>\n</body>\n</html>"}, {"file": "manage_products.html", "path": "example_app/templates/manage_products.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Manage Products</title>\n<link rel=\"stylesheet\" href=\"/static/css/style.css\">\n</head>\n<body>\n<div class=\"container\" id=\"manage-products-container\">\n<h1>Product Management</h1>\n<a href=\"/products/add/\" class=\"btn-add\">Add New Product</a>\n<ul class=\"product-list\" id=\"product-list\">\n<!-- Products will be listed here-->\n<li class=\"product-item\" id=\"item-001\">\n<h2><a href=\"/products/[id]/\" class=\"product-link\">[Product Name]</a></h2>\n<p>${{ [amount] }} - ${{ [price] }}</p>\n<a href=\"/products/edit/[id]/\" class=\"edit-product-btn\" id=\"edit-001\">Edit</a>\n<a href=\"#\" class=\"delete-product-btn\" id=\"delete-001\">Delete</a>\n</li>\n<!-- Repeat for each product -->\n</ul>\n</div>\n<script src=\"/static/js/manage_products.js\"></script>\n</body>\n</html>"}, {"file": "purchase_confirm.html", "path": "example_app/templates/purchase_confirm.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Purchase Confirmation</title>\n<link rel=\"stylesheet\" href=\"/static/css/style.css\">\n</head>\n<body>\n<div class=\"container\" id=\"purchase-confirm-container\">\n<h1>Purchase Confirmation</h1>\n<p id=\"invoice-message\">Thank you for your order.</p>\n<p>Invoice Number: <span id=\"invoice-number\">[Inv.# 1234567]</span></p>\n<a href=\"/purchases/\" class=\"back-link\" id=\"back-to-purchases\">Back to Purchases</a>\n<h2>Shipment Details</h2>\n<p class=\"shipment-info\" id=\"shipment-details\"><strong>To:</strong> [Customer Name],<br>[Address 1],<br>[City],<br>$[Country] <span class=\"postal-code\">[Postal Code]</span>.</p>\n<h2>Product Summary</h2>\n<ul class=\"summary-list\" id=\"purchase-summary\">\n<!-- Purchase entries will be listed here-->\n<li class=\"summary-item\">\n<span class=\"item-name\">[Purchased Item] x </span><span class=\"item-quantity\">[Amount]</span>\n<p>Price: ${{ [amount * price] }}</p>\n</li>\n<!-- Repeat for each purchased item -->\n</ul>\n<h2>Purchase Totals</h2>\n<ul class=\"total-list\" id=\"totals-list\">\n<li><strong>Total Purchase Amount:</strong> $[Total Purchase]</li>\n<li><strong>Tax Amount:</strong> [Tax Amt.]</li>\n<li><strong>Total Cost (w/ taxes):</strong> $[Final Payment]</li>\n</ul>\n<p class=\"note\" id=\"payment-method\">* Payment Method: [Payment Method]</p>\n<p class=\"timestamp\" id=\"confirmation-timestamp\">Date/time of confirmation: [Current Date and Time formatted like 11.22.2018 10:32 AM]</p>\n<a href=\"/home/\" class=\"main-page-link\" id=\"go-home\">Go to the main page</a>\n</div>\n<script src=\"/static/js/purchase_confirm.js\"></script>\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == 'main':\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\ntry:\n    from django.core.management import execute_from_command_line\nexcept ImportError as exc:\n    raise ImportError(\n        \"Couldn't import Django. Are you sure it's installed and\"\n        \"available on your PYTHONPATH environment variable? Did you\"\n        \"forget to activate a virtual environment?\" \n    ) from exc\nexecute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html', {'message': 'Hello, World!'})"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\nh1 {\n    color: #333; \n}"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body class=\"main-body\">\n    <!-- This section displays the Hello World message to the user. -->\n    <h1 id=\"hello-message\">Hello, {{ message }}!</h1>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app'\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'myproject.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n   {\n       'NAME':'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'\n   },\n   {\n       'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'\n   },\n   {\n       'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'\n   },\n   {\n       'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'\n   }\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "16": [{"id": 1, "file": "01-project-structure.txt", "path": "project/01-project-structure.txt", "code": "Project Structure:\n- project/\n  - src/\n    - main.py\n    - utils.py\n  - data/\n    - Spring Semester Subjects.xlsx\n  - output/\n    - Processed Subjects Table.xlsx\n"}, {"id": 2, "file": "02-main.py", "path": "project/src/main.py", "code": "import os\nimport pandas as pd\nfrom utils import check_file_exists, check_file_format, validate_data, process_subjects\n\ndef main():\n    input_file = \"data/Spring Semester Subjects.xlsx\"\n    output_file = \"output/Processed Subjects Table.xlsx\"\n    \n    if not check_file_exists(input_file):\n        print(f\"Error: File {input_file} does not exist.\")\n        return\n    \n    if not check_file_format(input_file):\n        print(f\"Error: File {input_file} is not in Excel format.\")\n        return\n    \n    df = pd.read_excel(input_file)\n    \n    if not validate_data(df):\n        print(\"Error: Data validation failed.\")\n        return\n    \n    process_subjects(df, output_file)\n    print(\"Processing complete. Output saved to Processed Subjects Table.xlsx\")\n\nif __name__ == \"__main__\":\n    main()\n"}, {"id": 3, "file": "03-utils.py", "path": "project/src/utils.py", "code": "import os\nfrom pandas import ExcelFile, NotAllowedError\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    return os.path.exists(file_path)\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format.\n    \"\"\"\n    try:\n        _ = ExcelFile(file_path)\n        return True\n    except ValueError:\n        return False\n    except FileNotFoundError:\n        return False\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    \n    Required columns: ['Subject Code', 'Course Name']\n    \"\"\"\n    required_columns = {\"Subject Code\", \"Course Name\"}\n    if not required_columns.issubset(df.columns):\n        return False\n    \n    # Additional data validation logic can be added here\n    for _, row in df.iterrows():\n        if pd.isnull(row[\"Subject Code\"]) or pd.isnull(row[\"Course Name\"]):\n            return False\n    \n    return True\n\n\ndef process_subjects(df, output_file):\n    \"\"\"\n    Process the subjects from input DataFrame and save to an Excel file.\n    \n    Example processing: Sort by 'Subject Code'\n    \"\"\"\n    result_df = df.sort_values(by=\"Subject Code\")\n    result_df.to_excel(output_file, index=False)\n"}, {"id": 4, "file": "README.md", "path": "project/README.md", "code": "# Spring Semester Subjects Processing Project\n\n## Overview\nThis project processes subject information from an Excel file and stores the processed results in another Excel file.\n\n## Files\n- **data/**: Contains input data (e.g., `Spring Semester Subjects.xlsx`).\n- **output/**: Where output files will be saved (e.g., `Processed Subjects Table.xlsx`).\n- **src/**: Python scripts for processing the data.\n  - `main.py`: Entry point script to run the program.\n  - `utils.py`: Utility functions for file checking, validation, and processing.\n\n## Setup\n1. Ensure you have the following installed:\n   - Python 3.x\n   - Pandas (`pip install pandas`)\n2. Place your input Excel file in the `data/` directory.\n3. Run the script with: \n   ```bash\n   python src/main.py\n   ```\n4. Output will be saved to the `output/Processed Subjects Table.xlsx`."}], "17": [{"file": "requirements.txt", "path": "project_folder/requirements.txt", "code": "pandas\nstatsmodels"}, {"file": "config.py", "path": "project_folder/config.py", "code": "\"\"\"\nConfiguration for file paths used in the logistic regression project.\n\"\"\"\n\nINPUT_FILE = \"Gamedata.xlsx\"\nOUTPUT_FILE = \"Logistic.xlsx\""}, {"file": "__init__.py", "path": "project_folder/__init__.py", "code": "# This is an empty __init__.py file to ensure the directory is treated as a package."}, {"file": "main.py", "path": "project_folder/main.py", "code": "\"\"\"\nMain script to execute logistic regression analysis.\n\"\"\"\n\nimport os\nfrom config import INPUT_FILE, OUTPUT_FILE\nimport pandas as pd\nimport statsmodels.api as sm\nfrom .utils import (read_and_validate_data, add_lagged_dependent_variable,\n                     prepare_features_and_target, build_logistic_model,\n                     save_summary_to_excel)\n\ndef main(input_file, output_file):\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    data = read_and_validate_data(input_file)\n    target_column = 'Goal'  # Assumed target column name based on context\n    data = add_lagged_dependent_variable(data, target_column)\n    X, y = prepare_features_and_target(data, target_column, f'{target_column}_lag_1')\n    result = build_logistic_model(X, y)\n    save_summary_to_excel(result, output_file)\n    \nif __name__ == \"__main__\":\n    main(INPUT_FILE, OUTPUT_FILE)"}, {"file": "utils.py", "path": "project_folder/utils.py", "code": "\"\"\"\nUtility functions for logistic regression analysis.\n\"\"\"\n\nimport pandas as pd\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Read the dataset and ensure all columns are numeric. Raise an error if any missing values (NaN) are found.\n    \"\"\"\n    data = pd.read_excel(input_file)\n    if not all(data.dtypes.apply(lambda dtype: np.issubdtype(dtype, np.number))):\n        raise ValueError(\"All columns must be numeric.\")\n    \n    if data.isnull().values.any():\n        raise ValueError(\"Missing values found in the dataset.\")\n\n    return data\n\ndef add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Add a one-period lag for the dependent variable and drop missing rows.\n    \"\"\"\n    data[f'{target_column}_lag_1'] = data[target_column].shift(1)\n    return data.dropna()\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepare the feature matrix (X) and target vector (y).\n    \"\"\"\n    X = data.loc[:, data.columns != target_column]\n    y = data[target_column]\n    return sm.add_constant(X), y\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Build and fit a logistic regression model.\n    \"\"\"\n    model = sm.Logit(y, X)\n    result = model.fit()\n    return result\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Save the logistic regression summary to an Excel file.\n    \"\"\"\n    with pd.ExcelWriter(output_file) as writer:\n        result.summary2().to_excel(writer, sheet_name='Logistic Summary')"}], "18": [{"file": "main.py", "path": "/usr/games/bashcrawl/main.py", "code": "\"\"\"\nBashCrawl - A terminal-based adventure game.\n\nThis module contains the main logic to run the BashCrawl game.\n\"\"\"\n\nimport os\nimport textwrap\nfrom utils import BashCrawl, print_main_menu\n\nif __name__ == \"__main__\":\n    \"\"\"Run the BashCrawl game.\"\"\"\n    game = BashCrawl()\n    play = True\n    while play:\n        command = input(f'{game.current_dir}> ').strip().lower()\n        if command in ('exit', 'quit'):\n            play = False\n        else:\n            try:\n                eval(f'game.{command}()')\n            except AttributeError as e:\n                print(\"Unknown command or invalid syntax. Type \\'help\\' for a list of commands.\")"}, {"file": "bashcrawl.py", "path": "/usr/games/bashcrawl/bashcrawl.py", "code": "\"\"\"\nBashCrawl class handles the game mechanics such as navigation and item collection.\n\"\"\"\n\nimport os\n\nclass BashCrawl:\n    \"\"\" \n    Main class for the BashCrawl terminal-based adventure game.\n    \"\"\"\n    ROOT_DIR = os.path.sep  # Start of directory structure\n\n    DIRECTORY_STRUCTURE = {\n        ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n        os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n        os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n        os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n        os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n        os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n        os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n        os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n        os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [\"golden_key\"],  # Contains a golden key\n    }\n\n    ITEM_LOCATIONS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): []}\n\n    def __init__(self):\n        self.current_dir = self.ROOT_DIR\n        self.inventory = []\n\n    def ls(self):\n        \"\"\"\n        List directories and items in the current directory.\n        \":return: list of contents in current directory (either dir or item).\"\n        \"\"\"\n        return self.DIRECTORY_STRUCTURE.get(self.current_dir, [])\n\n    def cd(self, target_dir):\n        \"\"\"\n        Change to a specified directory if it exists and is accessible from the current location.\n        \":param target_dir: The new desired directory path.\"\"\n        potential_path = os.path.join(self.current_dir, target_dir)\n        if target_dir in self.DIRECTORY_STRUCTURE[self.current_dir]:\n            self.current_dir = potential_path\n        else:\n            print(\"Cannot move to this location, please try again.\")\n\n    def find_items(self):\n        \"\"\"\n        Check and claim items in the current directory, if available.\n        \":return: Boolean representing if an item was added to inventory.\""}, {"file": "__init__.py", "path": "/usr/games/bashcrawl/__init__.py", "code": "\"\"\"\nSetup module for BashCrawl game package.\n\"\"\"\n\nfrom .bashcrawl import BashCrawl  # Importing the BashCrawl class\n"}, {"file": "utils.py", "path": "/usr/games/bashcrawl/utils.py", "code": "\"\"\"\nUtility functions and additional classes for BashCrawl game.\n\"\"\"\nimport os\n\n\ndef print_main_menu():\n    \"\"\"\n    Print the main menu options to terminal.\n    \"\"\"\n    print(\"Welcome to BashCrawl! Here's what you can do:\")\n    print(\"1. Start Game\")\n    print(\"2. Exit\")"}], "19": [{"file": "death_analysis.py", "path": "project/death_analysis.py", "code": "# Import necessary libraries\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"\n    Check if a file exists at the given file path.\n    Return True if the file exists, else raise FileNotFoundError.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n    return True\n\n\ndef read_dataset(file_path):\n    \"\"\"\n    Read the dataset from a CSV file and return a DataFrame.\n    Check for the existence of the required columns.\n    \"\"\"\n    if check_file_existence(file_path):\n        df = pd.read_csv(file_path)\n        validate_dataset(df, required_columns) # Raise error if validation fails\n        return df\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"\n    Validate that the dataset contains all required columns.\n    If not, raise a KeyError with details of the missing columns.\n    \"\"\"\n    for column in required_columns:\n        if column not in df.columns:\n            raise KeyError(f\"Required column {column} is missing from the dataset.\")\n\n\ndef preprocess_dataset(df):\n    \"\"\"\n    Preprocess the dataset, including cleaning and formatting dates to extract 'Week' information.\n    Return a DataFrame with an additional 'Week' column representing the ISO week number of each date.\n    \"\"\"\n    # Convert 'Date of death' to datetime format\n    df['Date of death'] = pd.to_datetime(df['Date of death'], errors='coerce')\n    # Drop rows where 'Date of death' is NaT (Not a Time) after conversion\n    df.dropna(subset=['Date of death'], inplace=True)\n    # Create a new column for the ISO week number\n    df['Week'] = df['Date of death'].dt.isocalendar().week\n    return df\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"\n    Plot the weekly deaths as a histogram and save the image file.\n    \"\"\"\n    plt.figure(figsize=(12, 6))\n    plt.bar(weekly_deaths.index.astype(str), weekly_deaths.values)\n    plt.xlabel('Week')\n    plt.ylabel('Number of Deaths')\n    plt.title('Weekly Deaths Histogram')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n\n    if not os.path.exists(os.path.dirname(output_file)):\n        os.makedirs(os.path.dirname(output_file), exist_ok=True)\n    \n    plt.savefig(output_file)\n    plt.close()  # Close the figure to free memory\n\n\ndef main():\n    \"\"\"\n    Main execution function to process the dataset and plot the histogram.\n    \"\"\"\n    try:\n        df = read_dataset(input_file)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f'Histogram saved as \"{output_file}\".')\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "README.md", "path": "project/README.md", "code": "# Death Analysis Project\n\n### Overview\nThis project processes a dataset containing death records and plots the number of deaths per week.\n\n### Setup\n1. Ensure Python is installed on your system.\n2. Install required libraries:\n   \n   ```shell\n   pip install pandas matplotlib\n   ```\n3. Place `Deathlist.csv` in the same directory as this script or modify the global variable `input_file` path accordingly.\n```\n```markdown\n### Usage\nRun the `death_analysis.py` script to generate a histogram image of weekly deaths:\n\n```shell\npython project/death_analysis.py\n```\n\nThe resulting image will be saved as `weekly_deaths_histogram.png` in the current directory.\n```"}, {"file": "requirements.txt", "path": "project/requirements.txt", "code": "# Python dependencies for this project\npandas\nmatplotlib"}]}