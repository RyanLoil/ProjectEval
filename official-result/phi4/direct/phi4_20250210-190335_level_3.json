{"4": [{"file": "manage.py", "path": "qr_code_generator/manage.py", "code": "#!/usr/bin/env python3\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\\nthat \\\"django\\\" is on your Python path?\\\\n\"\n            \"Did you mean to call python3 manage.py instead of python manage.py?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "asgi.py", "path": "qr_code_generator/asgi.py", "code": "# ASGI config for qr_code_generator project.\n\n# It exposes the ASGI callable as a module-level variable named \\`application\\`.\\\nThe contents of \\`module\\`, in turn, are imported and assigned to it.\\\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home/index.html')\n"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "models.py", "path": "qr_app/models.py", "code": ""}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "__pycache__", "path": "qr_app/__pycache__/apps.cpython-312.pyc", "code": "# Compiled with py_compile.py, version: 3.12.1\n"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "home/index.html", "path": "templates/home/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <p>Welcome to the Home Page!</p>\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "qr_code_generator/asgi.py", "code": "# ASGI config for qr_code_generator project.\n\n# It exposes the ASGI callable as a module-level variable named \\`application\\`.\\\nThe contents of \\`module\\`, in turn, are imported and assigned to it.\\\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "# WSGI config for qr_code_generator project.\n\n# It exposes the WSGI callable as a module-level variable named \\`application\\`.\\\nThe \\\\\\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}], "6": [{"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Todo App</title>\n</head>\n<body>\n    \n        <nav class =\"navbar navbar-expand-lg fixed-top navbar-dark bg-success shadow\" style=\"height:80px; left:0px; width:100%; position:fixed\">              </nav>\n\n    <!-- Container holding the content -->\n    <main id=\"container\">\n\n      <!-- Title of TodoApp --> \n      <div class=\"text-center p-5 mb-4\">\n        <h1 class=\"display-4 border-bottom bg-dark text-white shadow\" style=\"height:100px; top:80px; position:absolute; width:100%;\">Todo App</h1>\n\n      </div>   \n\n       <!-- Form to add items -->\n      <form  id = \"addForm\" method= \"POST\" action=\"/addItem\">\n        {% csrf_token %}\n        <input type=\"text\" name = \"task\" placeholder=\"Task description\" class=\"p-2 rounded mb-4 border shadow-sm w-25\"> \n        <input type=\"submit\" value=\"Add Item\" class=\"btn btn-info text-white p-2 mr-3\">\n      </form>\n\n          <!-- Form to mark item as done -->\n      <form  id = \"doneForm\" method= \"POST\" action=\"/markDone\">\n        {% csrf_token %}\n        <select name = \"taskDone\" class=\"p-2 rounded mb-4 border shadow-sm w-25\">\n          {% if items %} \n            {% for item in items %}\n                {% if not item.done %}\n                    <option value = \"{{item.id}}\"> {{item.title }} </option>\n                {% endif %}\n              \n            {% endfor %}\n\n        {% else %}\n          <option disabled> Nothing to list :)</option>       \n      {% endif %}   \n        </select>\n\n         <input type=\"submit\" value=\"Mark as Done\" class=\"btn btn-success text-white p-2\">\n      </form>  \n</main>"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\n\nfrom .views import (\n\tHomePage,get_all_Tasks,\n\taddItem,markDone,deleteItem,\n)\n\nurlpatterns = [\n    \tpath('', HomePage.as_view(), name='home'),\n    \tpath('getall/', get_all_Tasks,name ='getAll'),\n\n    \tpath('delete/<int:id>/', deleteItem ,name='deleteItem'),\n\n    \tpath('addItem', addItem, name='addItem'),\n    \tpath('markDone', markDone, name = 'markDone')  \n]\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "# Create your models here.\nfrom django.db import models\n\nclass Task(models.Model):\n\ttitle = models.CharField(max_length=50)\n\tdone = models.BooleanField(default=False)"}, {"file": "app.js", "path": "example_app/static/app.js", "code": "/* Get element from home.html */ \nconst addItemForm = document.querySelector('#addForm');\n\naddItemForm.addEventListener('submit',function(e){\ne.preventDefault();\ncallAPI(\"POST\",addItemForm.action,addItemForm.dataset);\n});   \nscoreCard=document.querySelectorAll('.card')[0];   \nif(scoreCard)\ngetTasks()\nfunction callAPI(methodUrl,method,data){\nel.setAttribute('data-state','loading'); // change UI to show we are getting data\nfetch(\tmethodUrl,{\n\tmethod: method,\n\tbody: data || null,\n})\n.then(function (response) {\n\tif(response.ok)\n\t    response.json()\n    .then(function(resJSON){\n\t   \tif(method==='POST')  // if post request then refresh the task list\n          getTasks(); \t       \n    })\n//    .catch(function(err){console.log(err)})\n})}\nfunction getTasks(){\nvar url=\"/getall/\";\ncallAPI(url,\"GET\",null)}\n/* Remove element*/\nconst removeItemForm = document.querySelectorAll('.delete');\nremoveItemForm.forEach(item=>{\nitem.addEventListener('click',function(e){\nel.setAttribute('data-state','loading'); // change UI to show we are getting data\nconst {id} = el.closest('.card').dataset;\ncallAPI(\"deleteItem/${ id}\" ,\"DELETE\",null);\n});});"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_demo.settings')\nfrom django.core.management import execute_from_command_line\nexecute_from_command_line(sys.argv)"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nfrom django.shortcuts import render, redirect\nfrom .models import Task, CompletedTasks\n\nclass HomePage(View):\n\tname = 'home'\n\thttp_method_names = [\"GET\", \"POST\"]\n\n\tdef get(self, request):\n\t\thome_data = {\n\t\t\t'user':request.user,\n\t        'items': Task.objects.all(),  \n\t    }\n\n\n\t\treturn render(request,'home.html', home_data)\n\n\t@method_decorator(csrf_exempt)\n\tdef dispatch(self, * args, **kwargs):\n    return super().dispatch(*args, **kwargs)\n\ndef get_all_Tasks(request):\n\tdata = {}\n\n\tif request.method == 'GET':\n\n\t\ttasks = Task.objects.all()\n\n\t\t# serialize each task to dictionary and append in a list\n\t\tres = [obj.serialize() for obj in tasks]\n\n\t\t# return this list as json data format with status code 200(o.k)\n\t\treturn JsonResponse(res,status=200)\n\n@csrf_exempt\ndef addItem(request):\n\tdata = {}\n\n\ttry:\n\n\t\tif request.method == 'POST':\n\n\t\t    # get task from post object and save in Task table \n\t\t    item = request.POST.get('task')\n\n\t\t\tif not item:\n\t\t\t    raise ValueError('Item is required!\n'\n')     \n\n\t\t\tTask.objects.create(title=item)\n\n\t\t# return json response with code 201(created)\n\t\treturn JsonResponse(data, status=201)\n\ndef markDone(request):\n\ndata = {}\n\nif request.method == 'POST':\n    # get task from post object and save \nin Completedtasks table\n    item=request.POST.get('taskDone')\n\n    try:\n        id=int(item)\n\telse:\n         raise ValueError(0)\n\n    Task.objects.filter(id=id).update(done=True)  # mark in Done\n\n# return json response with code 200(o.k)\nreturn JsonResponse(data, status=200)"}], "16": [{"file": "16-stdanswer.py", "path": "src/16-stdanswer.py", "code": "# Module: src/16-stdanswer.py\nimport os\nimport pandas as pd\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    return os.path.exists(file_path)\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format.\n    \"\"\"\n    _, ext = os.path.splitext(file_path)\n    return ext.lower() in ['.xls', '.xlsx']\n\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    Assume required columns are 'Subject Name' and 'Credits'.\n    \"\"\"\n    required_columns = {'Subject Name', 'Credits'}\n    if not set(required_columns).issubset(df.columns):\n        raise ValueError(f'Missing one or more required columns: {required_columns}')\n\n    # Example validation: check for negative credits\n    if (df['Credits'] < 0).any():\n        raise ValueError('Credits cannot be negative.')\n\n    return True\n\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    \"\"\"\n    # Read dataframe from Excel\n    df = pd.read_excel(input_file)\n\n    # Validate data\n    if validate_data(df):\n        # Example processing: add a column 'Subject ID' starting at 1\n        df['Subject ID'] = range(1, len(df) + 1)\n\n    # Write processed DataFrame to another Excel file\n    df.to_excel(output_file, index=False)\n\n\ndef main():\n    \"\"\"\n    Main execution function.\n    \"\"\"\n    input_file = \"Spring Semester Subjects.xlsx\"\n    output_file = \"Processed Subjects Table.xlsx\"\n\n    if check_file_exists(input_file) and check_file_format(input_file):\n        process_subjects(input_file, output_file)\n        print(f\"Processed data is saved in {output_file}\")\n    else:\n        raise FileNotFoundError(\"Input file does not exist or is not an Excel file.\")\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "requirements.txt", "path": "src/requirements.txt", "code": "pandas\nopenpyxl # Dependency for handling '.xlsx' files with pandas"}], "17": [{"id": 1, "file": "17-stdanswer.py", "path": "project/logistic_regression/17-stdanswer.py", "code": "# Import necessary libraries\nimport os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Read the dataset and ensure all columns are numeric.\n    Raise an error if any missing values (NaN) are found.\n    \"\"\"\n    data = pd.read_excel(input_file)\n    if not all(data.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise ValueError(\"All columns must be numeric\")\n    if data.isnull().values.any():\n        raise ValueError(\"No missing values allowed\")\n    return data\n\n\ndef add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Add a one-period lag for the dependent variable and drop missing rows.\n    \"\"\"\n    data[f'{target_column}_lag'] = data[target_column].shift(1)\n    data.dropna(inplace=True)\n    return data\n\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepare the feature matrix (X) and target vector (y).\n    \"\"\"\n    X = data.drop(columns=[target_column])\n    y = data[lagged_column]\n    return sm.add_constant(X), y\n\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Build and fit a logistic regression model.\n    \"\"\"\n    model = sm.Logit(y, X)\n    result = model.fit()\n    return result\n\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Save the logistic regression summary to an Excel file.\n    \"\"\"\n    with pd.ExcelWriter(output_file) as writer:\n        result.summary().as_text(buf=out).to_excel(writer, sheet_name=\"Summary\")\n\n\ndef main(input_file, output_file):\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    data = read_and_validate_data(input_file)\n    lagged_column = 'WinningTourneyFlag_lag'\n    data = add_lagged_dependent_variable(data, 'WinningTourneyFlag')\n    X, y = prepare_features_and_target(data, 'WinningTourneyFlag', lagged_column)\n    result = build_logistic_model(X, y)\n    save_summary_to_excel(result, output_file)\n\nif __name__ == \"__main__\":\n    main(input_file, output_file)"}, {"id": 2, "file": "requirements.txt", "path": "project/logistic_regression/requirements.txt", "code": "pandas\nstatsmodels\nnumpy"}], "20": [{"file": "example_app/urls.py", "path": "blog_project/example_app/urls.py", "code": "from django.urls import path\n\nfrom .views import HomeView, PostDetailView, AboutUsView\n\ndef index(request):\n    return render(request, 'home.html', {'title':'Home'})\n\ndef about_us(request):\n    return render(request, 'about.html', {'title': 'About Us'})\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='index'),\n    path('posts/<int:pk>/', PostDetailView.as_view(), name='post-detail'),\n    path('about/', AboutUsView.as_view(), name='about-us')\n]"}, {"file": "example_app/admin.py", "path": "blog_project/example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Blog, Comment\n\nadmin.site.register(Blog)\nadmin.site.register(Comment)"}, {"file": "example_app/migrations/0001_initial.py", "path": "blog_project/example_app/migrations/0001_initial.py", "code": "import datetime\nfrom django.db import migrations, models\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Blog',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('title', models.CharField(max_length=200)),\n                ('content', models.TextField(null=True)),\n                ('date_created', models.DateTimeField(default=datetime.datetime.now)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Comment',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('content', models.TextField()),\n                ('\u044d\u043b. \u043f\u043e\u0441\u0442\u044c', models.ForeignKey(on_delete=models.CASCADE, to='example_app.Blog')),\n            ],\n        ),\n    ]"}, {"file": "example_app/models.py", "path": "blog_project/example_app/models.py", "code": "import datetime\nfrom django.db import models\n\nclass Blog(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField(null=True)\n    date_created = models.DateTimeField(default=datetime.datetime.now)\n\nclass Comment(models.Model):\n    content = models.TextField()\n    blog_post = models.ForeignKey(Blog, on_delete=models.CASCADE)"}, {"file": "__init__.py", "path": "blog_project/example_app/__init__.py", "code": ""}, {"file": "example_app/forms.py", "path": "blog_project/example_app/forms.py", "code": "from django import forms\n\nclass CommentForm(forms.Form):\n    content = forms.CharField(widget=forms.Textarea)"}, {"file": "__init__.py", "path": "blog_project/__init__.py", "code": ""}, {"file": "example_app/views.py", "path": "blog_project/example_app/views.py", "code": "from django.utils.text import slugify\nfrom django.db.models.functions import Lower\nimport datetime as dt\nfrom django import forms\nfrom django.shortcuts import render, redirect\nfrom django.views.generic.detail import DetailView\nfrom .models import Blog, Comment\n\nclass HomeView(ListView):\n    model = Blog\n    template_name = 'home.html'\n    ordering = ['-date_created']\n\nclass AboutUsView(TemplateView):\n    template_name = 'about.html'\n\nclass PostDetailView(DetailView):\n    model = Blog\n\ndef create_post(request)\n    title = request.POST['post_title']\n    content = request.POST['content']\n    date_created = dt.datetime.now()\n    post = Blog(title=title, content=content, slugify(title.lower(), unique=True), date_created=date_created)\n    post.save()\n    return redirect('/')\n    \ndef add_comment(request, post_id):\n    blog_post = get_object_or_404(Blog, pk=post_id)\n    form = CommentForm(request.POST or None)\n    if request.method == 'POST' and form.is_valid():\n        content = form.cleaned_data['content']\n        comment = Comment(content=content, post = blog_post)\n        comment.save()\n        return redirect('post-detail', pk=post_id)\n    context = {\n        'form': form,\n        'blog_post': blog_post,\n    }\n    return render(request, 'single_post.html', context)"}, {"file": "example_app/tests.py", "path": "blog_project/example_app/tests.py", "code": "# Tests for our blog app\n"}, {"file": "__init__.py", "path": "blog_project/example_app/migrations/__init__.py", "code": ""}, {"file": "settings.py", "path": "blog_project/blog_project/settings.py", "code": "BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'example_app', # Our custom app\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n]\nROOT_URLCONF = 'blog_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'blog_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "blog_project/blog_project/urls.py", "code": "# Blog project URLS file\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]"}, {"file": "__init__.py", "path": "blog_project/blog_project/__init__.py", "code": ""}]}