{"1": [{"file": "manage.py", "path": "example_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    }\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')"}, {"file": "__init__.py", "path": "example_app/templates/__init__.py", "code": ""}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <title>Home</title>\n</head>\n<body>\n    <header id='main-header' class='page-header'>\n        <h1>Welcome to the Home Page</h1>\n    </header>\n    <section id='content-area' class='page-content'>\n        <p id='welcome-message' class='message'>This is an example Django application.</p>\n    </section>\n</body>\n</html>"}], "4": [{"file": "manage.py", "path": "qr_code_generator/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "asgi.py", "path": "qr_code_generator/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "main.py", "path": "qr_app/main.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "models.py", "path": "qr_app/models.py", "code": ""}, {"file": "views.py", "path": "qr_app/views.py", "code": "# Create your views here.\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the qr_app index.\")"}, {"file": "__init__.py", "path": "qr_app/admin/__init__.py", "code": ""}, {"file": "__init__.py", "path": "qr_app/migrations/__init__.py", "code": ""}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "models.py", "path": "qr_app/models.py", "code": ""}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "# Create your urls here\nfrom django.urls import path\nfrom .views import index\n\nurlpatterns = [\n    path('', index, name='index'),\n]"}, {"file": "_init_.py", "path": "qr_app/views/__init__.py", "code": ""}, {"file": "index.py", "path": "qr_app/views/index.py", "code": "# Create your views here.\nfrom django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse(\"Hello, world. You're at the qr_app index.\")"}, {"file": "__init__.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_app/admin/__init__.py", "code": ""}, {"file": "__init__.py", "path": "qr_app/migrations/__init__.py", "code": ""}], "6": [{"file": "models.py", "path": "example_app/models.py", "code": "# Generated by Django 5.1.2 on Sat Sep 24 08:28:18 2023\\nfrom django.db import models, migrations\\nimport datetime\\n\\nclass List(models.Model):\\n    name = models.CharField(max_length=200)\\n    description = models.TextField(default='', blank=True)\\n    created_on = models.DateTimeField(default=datetime.datetime.now())\\n\\nclass Item(models.Model):\\n    list = models.ForeignKey(List, blank=False, null=False, on_delete=models.CASCADE)\\n    text = models.CharField(max_length=1000)\\n    completed = models.BooleanField(default=False)\\n    created_on = models.DateTimeField(default=datetime.datetime.now())\\ndatetime_formats = {'medium': '%b %d, %Y @ %I:%M%p'}"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "# Generated by Django 5.1.2 on Sat Sep 24 08:28:18 2023\\nfrom django.contrib import admin\\nfrom .models import List, Item\\n\\nclass ItemInline(admin.TabularInline):\\n    model = Item\\n    extra = 3\\nclass ListAdmin(admin.ModelAdmin):\\n    fieldsets = [(None, {'fields': ['name', 'description']})]\\n    inlines = [ItemInline]\\nadmin.site.register(List, ListAdmin)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "# Generated by Django 5.1.2 on Sat Sep 24 08:28:18 2023\\nfrom django import forms\\nfrom .models import List, Item\\nclass ListForm(forms.ModelForm):\\n    class Meta:\\n        model = List\\n        fields = ['name', 'description']\\nclass ItemForm(forms.ModelForm):\\n    class Meta:\\n        model = Item\\n        fields = ['text', 'completed']"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "# Generated by Django 5.1.2 on Sat Sep 24 08:28:18 2023\\nfrom django.urls import path\\nimport example_app.views as views\\nurlpatterns = [\\npath('', views.index, name='index'),\\npath('list/', views.list_create, name='list-create'),\\npath('<uuid:id>/', views.read_update_delete_list, name='view-update-delete-list'),\\npath('<uuid:id>/item/', views.create_item, name='create-item'),\\npath('<uuid:id>/<uuid:sub_id>', views.read_update_delete_item, name='read-update-delete-item'),\\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "# Generated by Django 5.1.2 on Sat Sep 24 08:28:18 2023... \\n# Complete code goes here for view functions"}, {"file": "tests.py", "path": "example_app/tests.py", "code": "# Generated by Django 5.1.2 on Sat Sep 24 08:28:18 2023\\nfrom django.test import TestCase, Client\\nimport uuid\\nfrom .models import List, Item\\nclass ListViewTest(TestCase):\\n    def test_create_list(self): ... \\n# Complete code for various tests"}, {"file": "index.html", "path": "example_app/templates/index.html", "code": "<!DOCTYPE html>\\n<!-- HTML content here with unique id attributes and classes for elements -->"}, {"file": "list_detail.html", "path": "example_app/templates/list_detail.html", "code": "<!DOCTYPE html>\\n<!-- HTML content here with unique id attributes and classes for elements -->"}, {"file": "item_form.html", "path": "example_app/templates/item_form.html", "code": "<!DOCTYPE html>\\n<!-- HTML content here with unique id attributes and classes for elements -->"}, {"file": "todo_confirm_delete.html", "path": "example_app/templates/todo_confirm_delete.html", "code": "<!DOCTYPE html>\\n<!-- HTML content here with unique id attributes and classes for elements -->"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Complete code for Django settings..."}, {"file": "urls.py", "path": "project/urls.py", "code": "# Import and URL includes for project-level urls file..."}], "9": [{"file": "manage.py", "path": "example_project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and\n             available on your PYTHONPATH environment variable?\" \n            ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "app.py", "path": "example_project/example_app/app.py", "code": "# The app.py is included here for Django projects that need a specific entry point.\n# Typically, this isn't necessary as manage.py suffices."}, {"file": "app.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'app/templates/home.html', {})"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"example_app.urls\")),\n]"}, {"file": "app.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home\n\nurlpatterns = [\n    path('', home, name='home'),\n]"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()"}, {"file": "template.html", "path": "templates/home.html", "code": "<html>\n<head><title>Django Project</title></head>\n<body>\n<h1>Welcome to the Django Project!</h1>\n<p>This is your main page.</p>\n</body>\n</html>"}, {"file": "app.py", "path": "__init__.py", "code": "# This empty file indicates that example_app directory is a Python package."}], "10": [{"file": "models.py", "path": "example_app/example_app/models.py", "code": "# example_app/models.py\nfrom django.contrib.auth.models import User\nfrom django.db import models\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    bio = models.TextField(null=True, blank=True)\n    \n    def __str__(self):\n        return self.user.username\n\nclass Activity(models.Model):\n    name = models.CharField(max_length=255)\n    calories_burned_per_hour = models.PositiveIntegerField()\n    duration_in_minutes = models.PositiveIntegerField(default=30, blank=True, null=True)\n\n    def calories_burned(self):\n        return (self.calories_burned_per_hour / 60) * self.duration_in_minutes if self.duration_in_minutes else self.calories_burned_per_hour\n\nclass Meal(models.Model):\n    name = models.CharField(max_length=255)\n    user_meal = models.ForeignKey(User, on_delete=models.CASCADE)\n    calories_consumed = models.PositiveIntegerField()\n    \n    def __str__(self):\n        return f\"Meal: {self.name}, Calories: {self.calories_consumed}\"\n"}, {"file": "admin.py", "path": "example_app/example_app/admin.py", "code": "# example_app/admin.py\nfrom django.contrib import admin\nfrom .models import UserProfile, Activity, Meal\n\n# Register your models here.\nadmin.site.register(UserProfile)\nadmin.site.register(Activity)\nadmin.site.register(Meal)"}, {"file": "views.py", "path": "example_app/example_app/views.py", "code": "# example_app/views.py\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Activity, Meal, UserProfile\n\ndef register_profile(request):\n    return render(request, 'register_profile.html')\n\ndef add_activity(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        calories_burned_per_hour = int(request.POST.get('calories_burned_per_hour'))\n        duration_in_minutes = int(request.POST.get('duration_in_minutes', 30))\n\n        Activity.objects.create(\n            name=name,\n            calories_burned_per_hour=calories_burned_per_hour,\n            duration_in_minutes=duration_in_minutes\n        )\n    return redirect('add_activity')\n\ndef add_meal(request):\n    if request.method == 'POST':\n        user_menu=request.POST.getlist('user_meal', [])\n        menu_calories = int(request.POST.get('calories_consumed'))\n\n        meal_obj, created = Meal.objects.get_or_create(\n            name=user_menu,\n            defaults={'calories_consumed': menu_calories}\n        )\n    return redirect('add_meal')\n\ndef login_view(request):\n    # Assume template renders a simple login form\n    return render(request, 'login.html')\n\ndef logout_view(request):\n    # Logic to handle logout\n    return redirect('/')\n@login_required(login_url='/login/')\ndef register_user_profile(request):\n    if request.method == 'POST':\n        bio = request.POST.get('description', '')\n        user_profile, created = UserProfile.objects.get_or_create(user=request.user)\n        user_profile.bio = bio\n        user_profile.save()\n    return render(request, 'register_profile.html')\n@login_required(login_url='/login/')(activity)\nfrom django.urls import reverse\nimport datetime as dt\nfrom collections import defaultdict\nfrom django.shortcuts import render,\n\ndef get_calories_chart(request):\n    current_time = dt.datetime.utcnow() + dt.timedelta(hours=5, minutes=30)  # IST time adjustment\n    activities_cal = 0\n    food_cal = 0\n    weeks_calories = []\n\n    for single_date in (current_time - dt.timedelta(days=x) for x in range(7)):\n        date_str = single_date.strftime('%A') + ' (' + single_date.strftime('%d-%b') + ')'\n        weekly_activities_list = list(Activity.objects.filter(start_time__date=single_date.date())\n                                          .values('name', 'calories_burned'))\n        activities_cal_for_day = sum(\n            item['calories_burned'] for item in weekly_activities_list\n        )\n        \n        meals_consumed_day = Meal.objects.filter(date_time__date=single_date.date())\n        meals_calories_per_day = sum(item.calories_consumed for item in meals_consumed_day)\n        \n        total_cal_for_dt = activities_cal_for_day - meals_calories_per_day\n        weeks_calories.append(\n            {\"activities\": \"{} Cal\".format(activities_cal_for_day),\n             \"meals\": \"({}) - {} Cal\".format(meals_consumed_day.count(), meals_calories_per_day),\n             date_str: total_cal_for_dt}\n        )\n    activities = Activity.objects.all()\n    return render(\n        request, 'charts.html', {\n            'activity_list': [i for i in activities],\n            'week_dict': dict(weeks_calories)}\n    )"}, {"file": "urls.py", "path": "example_app/example_app/urls.py", "code": "# example_app/urls.py\nfrom django.urls import path, include\nfrom .views import register_profile, add_activity, add_meal, login_view, logout_view, register_user_profile,\nget_calories_chart\nfrom rest_framework.authtoken.views import obtain_auth_token  # Import for token-based authentication\n\nurlpatterns = [\n    path('register-profile', register_profile, name='register_profile'),\n    path('add-activity', add_activity, name='add_activity'),\n    path('logout/', logout_view, name='logout_view'),\n    path('add-meals/', add_meal, name='add_meal'),\n    path('', include('django.contrib.auth.urls')),  # Includes auth views\n    path('register-user-profile', register_user_profile, name='register_user_profile'),\n    path('calories-chart/', get_calories_chart, name='get_calories_chart'),\n    path('api-token-auth/', obtain_auth_token, name='api_token_auth')\n]\n# This last line is to include JWT authentication. You'll need a view similar to above or use existing libraries for implementation.\n# from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n#\n# urlpatterns += [\n#     path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n#     path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n# ]"}, {"file": "settings.py", "path": "example_app/example_app/settings.py", "code": "# example_app/settings.py\n# Add these settings to your Django project's settings.py file.\nINSTALLED_APPS = [\n    ...,\n    'rest_framework',\n    'corsheaders',  # CORS handling for API\n]\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    ...\n    'django.middleware.security.SecurityMiddleware', ...,\n]\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # For Heroku & similar proxy support\nCORS_ALLOWED_ORIGINS = [  # Add your frontend's domain to this list for CORS support\n    'http://localhost:3000',\n    'https://yourfrontenddomain.com'\n]\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',  # Adjust database configuration\n    }\n}\n# Add token authentication to REST Framework settings:\nREST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n        # Add other auth classes if needed, e.g., JWT\n    )\n}\n"}, {"file": "wsgi.py", "path": "example_app/example_project/wsgi.py", "code": "# example_project/wsgi.py\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/example_app/__init__.py", "code": ""}], "11": [{"file": "example_app/models.py", "path": "example_project/example_app/models.py", "code": "# example_app/models.py\nfrom django.db import models\nclass Project(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n"}, {"file": "example_app/admin.py", "path": "example_project/example_app/admin.py", "code": "# example_app/admin.py\nfrom django.contrib import admin\nfrom .models import Project\nclass ProjectAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\nadmin.site.register(Project, ProjectAdmin)\n"}, {"file": "example_app/forms.py", "path": "example_project/example_app/forms.py", "code": "# example_app/forms.py\nfrom django import forms\nfrom .models import Project\nclass ProjectForm(forms.ModelForm):\n    class Meta:\n        model = Project\n        fields = '__all__'\n"}, {"file": "example_project/setting.py", "path": "example_project/example_app/setting.py", "code": "# example_app/settings.py\ndef get_context_data(self, **kwargs):\n    context = super().get_context_data(**kwargs)\n    if self.request.method == 'POST':\n        form = ProjectForm(self.request.POST)\n        if form.is_valid():\n            project_instance = form.save()\n            return render(\n                self.request, 'example/home.html', {'form': form, 'project_list': Project.objects.all()}\n            )\n    context['form'] = ProjectForm()\n    context['project_list'] = Project.objects.all()\n    return context\n"}, {"file": "example_app/urls.py", "path": "example_project/example_app/urls.py", "code": "# example_app/urls.py\nfrom django.urls import path\nfrom .views import HomeView\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n]"}, {"file": "example_app/views.py", "path": "example_project/example_app/views.py", "code": "# example_app/views.py\nfrom django.views.generic import TemplateView\nfrom .forms import ProjectForm\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n"}, {"file": "project/home.html", "path": "example_project/example_app/templates/project/home.html", "code": "<html>\n<head><title>Project List</title></head>\n<body>\n  <div id='form-container' class='container'>\n    <h2>Add a New Project</h2>\n    <form method='post'>\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type='submit' class='btn btn-primary'>Submit</button>\n    </form>\n  </div>\n  \n  <div id='projects-container' class='container mt-4'>\n    <h2>Project List</h2>\n    {% for project in project_list %}\n      <div id='project_{{ project.id }}' class='project-item mb-3'>\n        <h3>{{ project.name }}</h3>\n        <p>{{ project.description|linebreaks }}</p>\n      </div>\n    {% empty %}\n      <p>No projects found.</p>\n    {% endfor %}\n  </div>\n</body>\n</html>"}, {"file": "example_project/urls.py", "path": "example_project/urls.py", "code": "# example_project/urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "example_app/tests.py", "path": "example_project/example_app/tests.py", "code": "# example_app/tests.py\nfrom django.test import TestCase, Client\nfrom .models import Project\nclass ProjectTestCase(TestCase):\n    def setUp(self):\n        Project.objects.create(name='Test Project', description='A test project')\n\n    def test_home_view(self):\n        client = Client()\n        response = client.get('/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_project_creation_form(self):\n        client = Client()\n        response = client.post('/', {'name': 'New Project', 'description': 'New project description'})\n        self.assertEqual(Project.objects.count(), 2)\n"}], "14": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": "**empty file**"}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": "**empty file**"}, {"file": "example_app/views.py", "path": "myproject/example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')"}, {"file": "example_app/static/css/style.css", "path": "myproject/example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\nh1 {\n    color: #333;\n}"}, {"file": "hello_world.html", "path": "myproject/example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <!-- This section displays the Hello World message to the user with added id and class attributes. -->\n    <h1 id=\"hello-message\" class=\"message\">Hello, World!</h1>\n</body>\n</html>"}, {"file": "myproject/settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Added example app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],  # Custom template directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Default SQLite DB for development\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',}\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\n# Static files (CSS, JavaScript, Images)\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'example_app/static'),  # Added custom static directory\n]\n"}, {"file": "myproject/urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}], "16": [{"file": "main.py", "path": "src/main.py", "code": "import os\nimport pandas as pd\nfrom helper import check_file_exists, check_file_format, validate_data\n\ndef process_subjects(input_file, output_file):\n    if not check_file_exists(input_file):\n        raise FileNotFoundError(f\"The file {input_file} does not exist.\")\n    \n    if not check_file_format(input_file):\n        raise ValueError(\"The input file is not in Excel format.\")\n\n    df = pd.read_excel(input_file)\n    \n    validate_data(df)\n    \n    # Process DataFrame here (e.g., cleaning, transformation)\n    processed_df = df  # Placeholder for actual processing logic\n    \n    try:\n        with pd.ExcelWriter(output_file) as writer:\n            processed_df.to_excel(writer, index=False)\n    except Exception as e:\n        raise RuntimeError(f\"Failed to write output file: {e}\")\n\ndef main():\n    input_file = \"Spring Semester Subjects.xlsx\"\n    output_file = \"Processed Subjects Table.xlsx\"\n    \n    process_subjects(input_file, output_file)\n\nif __name__ == '__main__':\n    main()"}, {"file": "helper.py", "path": "src/helper.py", "code": "import os\n\ndef check_file_exists(file_path):\n    return os.path.exists(file_path)\n\ndef check_file_format(file_path):\n    return file_path.endswith('.xlsx') or file_path.endswith('.xls')\n\ndef validate_data(df):\n    required_columns = ['Subject_ID', 'Name', 'Credits']  # Example columns\n    if not all(column in df.columns for column in required_columns):\n        raise ValueError(\"The data does not contain the required columns.\")\n    \n    # Sample validation logic, customize as needed\n    if not all(df['Credits'].apply(lambda x: x >= 0)):\n        raise ValueError('Credit values must be non-negative.')"}, {"file": "requirements.txt", "path": "src/requirements.txt", "code": "pandas == 2.0.1\nopenpyxl"}], "17": [{"file": "main.py", "path": "project/logistic_regression_analysis/main.py", "code": "# main.py\nimport os\nimport pandas as pd\nimport statsmodels.api as sm\nfrom utils import read_and_validate_data, add_lagged_dependent_variable, prepare_features_and_target, build_logistic_model, save_summary_to_excel\n\n# File paths\ndef get_file_paths(base_dir):\n    \"\"\"\n    Create file paths based on the base directory provided.\n    \"\"\"\n    input_file = os.path.join(base_dir, 'Gamedata.xlsx')\n    output_file = os.path.join(base_dir, 'Logistic.xlsx')\n    return input_file, output_file\n\ndef main():\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    base_dir = '.'  # Directory where your files are located\n    input_file, output_file = get_file_paths(base_dir)\n    \n    data = read_and_validate_data(input_file)\n    data = add_lagged_dependent_variable(data, 'target_column')\n    X, y = prepare_features_and_target(data, 'target_column', 'lagged_target_column')\n    model_results = build_logistic_model(X, y)\n    save_summary_to_excel(model_results, output_file)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "utils.py", "path": "project/logistic_regression_analysis/utils.py", "code": "# utils.py\nimport pandas as pd\n\ndef read_and_validate_data(input_file):\n    data = pd.read_excel(input_file)\n    if not data.select_dtypes(include='number').empty:\n        if data.isnull().values.any():\n            raise ValueError('Input file contains NaN values. Please clean the data.')\n    else:\n        raise TypeError('All columns must be numeric.')\n    return data\n\ndef add_lagged_dependent_variable(data, target_column):\n    data['lagged_' + target_column] = data[target_column].shift(1)\n    return data.dropna()\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    y = data[target_column]\n    X = data.drop(columns=[target_column])\n    X = sm.add_constant(X)  # Add a constant column\n    return X, y\n\ndef build_logistic_model(X, y):\n    model = sm.Logit(y, X)\n    result = model.fit()\n    return result\n\ndef save_summary_to_excel(result, output_file):\n    with pd.ExcelWriter(output_file) as writer:\n        result.summary().to_excel(writer, sheet_name='Logistic Regression Summary')\n"}, {"file": "requirements.txt", "path": "project/logistic_regression_analysis/requirements.txt", "code": "pandas==1.4.0\nstatsmodels==0.13.2\n"}, {"file": "Gamedata.xlsx", "path": "project/Gamedata.xlsx", "code": ""}]}