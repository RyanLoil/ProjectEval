{"5": [{"file": "manage.py", "path": "/myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Could not import Django.\\n\"\n            \"Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "myproject/settings.py", "path": "/myproject/myproject/settings.py", "code": "import os\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nBASE_DIR = os.path.dirname(current_dir)\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "myproject/urls.py", "path": "/myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "myproject/wsgi.py", "path": "/myproject/myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()"}, {"file": "converter/__init__.py", "path": "/myproject/converter/__init__.py", "code": ""}, {"file": "converter/views.py", "path": "/myproject/converter/views.py", "code": "from django.shortcuts import render\nfrom markdown2 import markdown\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        md_text = request.POST.get('markdown', '')\n        html_output = markdown(md_text)\n    else:\n        html_output = ''\n    return render(request, 'convert.html', {'html_output': html_output})\n"}, {"file": "converter/urls.py", "path": "/myproject/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n]"}, {"file": "templates/home.html", "path": "/myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown to HTML Converter</title>\n</head>\n<body>\n    <header id=\"header\">\n        <h1 class=\"welcome\">Welcome Message</h1>\n        <p class=\"intro\">Introduction to Converter: A tool to convert Markdown text into HTML for web publishing.</p>\n        <nav class=\"navigation\">\n            <a href=\"/convert/\" class=\"link\">Convert</a> | \n            <a href=\"/about/\" class=\"link\">About</a>\n        </nav>\n    </header>\n</body>\n</html>"}, {"file": "templates/convert.html", "path": "/myproject/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert Markdown to HTML</title>\n</head>\n<body>\n    <h1 id=\"heading\" class=\"main-heading\">Markdown to HTML Converter</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <textarea id=\"markdown-input\" name=\"markdown\" class=\"input-box\"></textarea><br>\n        <button type=\"submit\" id=\"convert-button\" class=\"btn\">Convert</button>\n    </form>\n    <div id=\"html-output\" class=\"output-box\">\n        <h2>HTML Output:</h2>\n        <pre>{{ html_output }}</pre>\n    </div>\n</body>\n</html>"}], "16": [{"file": "main.py", "path": "project_directory/main.py", "code": "# Main script to run the entire project\ndef main():\n    validate_input_file()\n    transform_data()\n    create_output_file()\n\nif __name__ == '__main__':\n    main()"}, {"file": "input_validation.py", "path": "project_directory/input_validation.py", "code": "import os\nimport pandas as pd\n\ndef CheckFileExistence(filename: str) -> bool:\n    return os.path.exists(filename)\n\ndef ValidateHeaders(df: pd.DataFrame) -> bool:\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n    return list(df.columns) == expected_headers\n\ndef ValidateTimeColumn(df: pd.DataFrame) -> bool:\n    valid_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n    return df['Time'].isin(valid_times).all()\n\ndef ValidateDataIntegrity(df: pd.DataFrame) -> bool:\n    return not df.isnull().any().any()  # Ensure no missing values\n\ndef validate_input_file(filename: str):\n    if not CheckFileExistence(filename):\n        raise FileNotFoundError(f\"{filename} does not exist.\") \n\n    df = pd.read_excel(filename)\n    if not ValidateHeaders(df) or not ValidateTimeColumn(df) or not ValidateDataIntegrity(df):\n        raise ValueError(\"Input file validation failed.\")\n"}, {"file": "data_transformation.py", "path": "project_directory/data_transformation.py", "code": "import pandas as pd\nfrom itertools import product\n\ndef TransformToTwoDimensionTable(df: pd.DataFrame) -> dict:\n    subjects = df['Name'].unique()\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n\n    table = {subject: {weekday: {period: None for period in periods} \n                    for weekday in weekdays}\n              for subject in subjects}\n\n    for _, row in df.iterrows():\n        row['Weekday']  # This handles possible validation prior setting up the data mapping.\n        table[row['Name']][row['Weekday']][row['Time']] = []  \n    return table\n\ndef DataMapping(df: pd.DataFrame, two_dim_table: dict) -> None:\n    for _, row in df.iterrows():\n        two_dim_table[row['Name']][row['Weekday']][row['Time']].append(row)\n"}, {"file": "output_creation.py", "path": "project_directory/output_creation.py", "code": "import pandas as pd\nfrom data_transformation import TransformToTwoDimensionTable, DataMapping\n\ndef CreateOutputExcelFile(filename: str) -> 'pd.ExcelWriter':\n    return pd.ExcelWriter(filename)\n\ndef SaveTableToExcel(two_dim_table: dict, writer: 'pd.ExcelWriter'):\n    for subject, weekday_data in two_dim_table.items():\n        with pd.ExcelWriter(writer.path) as writer:\n            for idx, (weekday, period_data) in enumerate(weekday_data.items(), start=1):\n                # Convert each nested dictionary to a DataFrame to save\n                temp_df = pd.DataFrame.from_dict(period_data, orient='index').transpose()\n                temp_df.to_excel(writer, sheet_name=f\"{subject} - {weekday}\", index=False)\n\ndef create_output_file(input_filename: str, output_filename: str):\n    df = pd.read_excel(input_filename)\n    table = TransformToTwoDimensionTable(df)\n    DataMapping(df, table)\n\n    writer = CreateOutputExcelFile(output_filename)\n    SaveTableToExcel(table, writer)\n    writer.save()"}], "18": [{"file": "main_menu.html", "path": "src/ui/main_menu.html", "code": "<html>\n<head><title>Main Menu</title></head>\n<body>\n  <div id=\"menu\" class=\"main-menu\">\n    <button onclick=\"startGame()\">Start Game</button>\n    <button onclick=\"showInstructions()\">Instructions</button>\n    <button onclick=\"exitGame()\">Exit Game</button>\n  </div>\n  <script src=\"scripts/main_menu.js\"></script>\n</body>\n</html>"}, {"file": "main_menu.js", "path": "src/scripts/main_menu.js", "code": "function startGame() {\n  window.location.href = 'game_environment.html';\n}\n\nfunction showInstructions() {\n  alert('Display game instructions here.');\n}\n\nfunction exitGame() {\n  if (confirm('Are you sure you want to exit?')) {\n    window.close();\n  }\n}"}, {"file": "game_environment.html", "path": "src/ui/game_environment.html", "code": "<html>\n<head><title>Game Environment</title></head>\n<body>\n  <div id=\"environment\" class=\"game-environment\">\n    <button onclick=\"movePlayer()\">Move Player</button>\n    <button onclick=\"lookAround()\">Look Around</button>\n    <button onclick=\"pickItem()\">Pick Item</button>\n    <button onclick=\"checkInventory()\">Check Inventory</button>\n  </div>\n  <script src=\"scripts/game_environment.js\"></script>\n</body>\n</html>"}, {"file": "game_environment.js", "path": "src/scripts/game_environment.js", "code": "function movePlayer() {\n  alert('Move player to a new room.');\n}\n\nfunction lookAround() {\n  alert('Inspect the current area.');\n}\n\nfunction pickItem() {\n  alert('Pick up item.');\n}\n\nfunction checkInventory() {\n  alert('Check items in inventory.');\n}"}, {"file": "game_logic.js", "path": "src/scripts/game_logic.js", "code": "function parseCommand(command) {\n  switch (command.toLowerCase()) {\n    case 'move': return movePlayer();\n    case 'look': return lookAround();\n    case 'pick': return pickItem();\n    case 'inventory': return checkInventory();\n    default: alert('Invalid command.');\n  }\n}\n\nfunction updateGameState(action) {\n  console.log(`Game state updated with action: ${action}`);\n}"}, {"file": "help_and_support.html", "path": "src/ui/help_and_support.html", "code": "<html>\n<head><title>Help and Support</title></head>\n<body>\n  <div id=\"help\" class=\"help-and-support\">\n    <button onclick=\"displayHelp()\">Display Help</button>\n  </div>\n  <script src=\"scripts/help_and_support.js\"></script>\n</body>\n</html>"}, {"file": "help_and_support.js", "path": "src/scripts/help_and_support.js", "code": "function displayHelp() {\n  alert('Provide in-game help and support information here.');\n}"}]}