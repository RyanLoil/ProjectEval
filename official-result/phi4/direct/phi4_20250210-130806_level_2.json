{"6": [{"file": "manage.py", "path": "todo_app/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django.\\n\" \\ \"Make sure you have it installed and \\\"django\\\" is added to your PYTHONPATH.\\n\") from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "todo_app/todo_app/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',  # Assuming the app's name is todo_app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Define template directory path\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_app.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # or another database backend if preferred\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "todo_app/todo_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),  # App routes are defined here\n]\n"}, {"file": "wsgi.py", "path": "todo_app/todo_app/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_app.settings')\napplication = get_wsgi_application()\n"}, {"file": "models.py", "path": "todo_app/todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=100)\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    description = models.TextField()\n    completed = models.BooleanField(default=False)\n"}, {"file": "views.py", "path": "todo_app/todo_app/views.py", "code": "from django.shortcuts import render\nfrom .models import TodoList, Task\n\ndef dashboard(request):\n    todo_lists = TodoList.objects.all()\n    context = {'todo_lists': todo_lists}\n    return render(request, 'home.html', context)\n\ndef view_todo_list(request, list_id):\n    todo_list = TodoList.objects.get(id=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    context = {'todo_list': todo_list, 'tasks': tasks}\n    return render(request, 'todo_list.html', context)\n\ndef add_task(request, list_id):\n    # Logic to handle adding a task\n    pass\n# Additional views for other functions can be defined here.\n"}, {"file": "urls.py", "path": "todo_app/todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.dashboard, name='home'),\n    path('lists/<int:list_id>/', views.view_todo_list, name='view_todo_list'),\n]"}, {"file": "admin.py", "path": "todo_app/todo_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)"}, {"file": "templates/home.html", "path": "todo_app/templates/home.html", "code": "<html>\n<head><title>Todo Dashboard</title></head>\n<body>\n  <div id=\"dashboard\" class=\"container\">\n    <h1 id=\"main-title\">Dashboard</h1>\n    {% for todo_list in todo_lists %}\n      <p id=\"list{{todo_list.id}}\" class=\"todo-list-item\">{{ todo_list.title }} - <a href=\"/lists/{{ todo_list.id }}/\">View Tasks</a></p>\n    {% endfor %}\n  </div>\n</body>\n</html>"}, {"file": "templates/todo_list.html", "path": "todo_app/templates/todo_list.html", "code": "<html>\n<head><title>{{ todo_list.title }}</title></head>\n<body>\n  <h1 id=\"list-title\" class=\"todo-list-name\">{{ todo_list.title }}</h1>\n  <ul id=\"tasks-list\" class=\"task-container\">\n    {% for task in tasks %}\n      <li id=\"task-{{ task.id }}\" class=\"task-item\">\n        {{ task.description }} -\n        Completed: <span id=\"completed-flag-{{ task.id }}\" class=\"completeness-status\">{{ task.completed }}</span>\n      </li>\n    {% endfor %}\n  </ul>\n</body>\n</html>"}], "15": [{"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\\"django\\\" is added to your PYTHONPATH?\" \\n          f\"\\\\n{exc}\"\"\n        ) from None\n    execute_from_command_line(sys.argv)\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "# Settings for my project\n# -*- coding: utf-8 -*-\nfrom pathlib import Path\nimport os\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'myapp',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n   {\n       \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n   },\n   {\n       \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\", \n   },\n   {\n       \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n   },\n   {\n       \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n   },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "# URL Configuration for my project\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "# WSGI config for my project\nimport os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": "# This file can be left empty."}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "# -*- coding: utf-8 -*-\nfrom django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "models.py", "path": "myproject/myapp/models.py", "code": "# This file can be left empty."}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "# -*- coding: utf-8 -*-\nfrom django.shortcuts import render\n# Create your views here.\ndef home_view(request):\n    return render(request, 'home.html')\ndef hello_world_view(request):\n    return render(request, 'hello_world.html')"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "# MyApp URL Configuration\nfrom django.urls import path\nfrom .views import home_view, hello_world_view\n\nurlpatterns = [\n    path('', home_view, name='home'),\n    path('helloworld/', hello_world_view, name='hello_world')\n]"}, {"file": "templates/home.html", "path": "myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Home</title>\n</head>\n<body>\n<div id=\"home-page\" class=\"page-content\">\n  <h1>Welcome to the Home Page</h1>\n  <button id=\"nav-to-hello-world\" class=\"btn-primary\">Go to 'HelloWorld' page</button>\n</div>\n</body>\n<script>\ndocument.querySelector('#nav-to-hello-world').addEventListener('click', function() {\n    window.location.href = \"/helloworld/\";\n});\n</script>\n</html>"}, {"file": "templates/hello_world.html", "path": "myproject/templates/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Hello World</title>\n</head>\n<body>\n<div id=\"hello-world-page\" class=\"page-content\">\n  <h1 class=\"display-message\">HelloWorld</h1>\n</div>\n</body>\n</html>"}], "16": [{"file": "file_validation.py", "path": "/src/file_validation.py", "code": "import os\nimport pandas as pd\n\ndef check_file_existence(filename):\n    return os.path.isfile(filename)\n\ndef validate_headers(df, expected_headers):\n    return list(df.columns) == expected_headers\n\ndef validate_time_column(df, valid_times):\n    unique_values = set(df['Time'])\n    invalid_entries = unique_values - set(valid_times)\n    return not bool(invalid_entries)\n\ndef validate_data_integrity(df):\n    null_columns = df.columns[df.isnull().any()]\n    return len(null_columns) == 0\n\ndef validate_null_value(df):\n    return not df.isnull().values.any()\n"}, {"file": "data_transformation.py", "path": "/src/data_transformation.py", "code": "import pandas as pd\n\ndef transform_to_two_dimension_table(data, weekdays, periods):\n    table = {day: {period: None for period in periods} for day in weekdays}\n    df = pd.DataFrame.from_records(data)\n    for _, row in df.iterrows():\n        weekday_time_key = (row['Weekday'], row['Time'])\n        if weekday_time_key in table:\n            table[weekday_time_key] = row['Name']  \n    return table\n"}, {"file": "output_file_creation.py", "path": "/src/output_file_creation.py", "code": "import pandas as pd\n\ndef create_output_excel_file(table, filename):\n    df_list = []\n    periods = list({sub for sublist in table.values() for sub in sublist.keys()})\n    weekdays = sorted([key[0] for key in table.keys()])\n    \n    for weekday in weekdays:\n        weekly_data = {period: table[(weekday, period)] for period in periods}\n        weekly_data['Weekday'] = weekday\n        df_list.append(weekly_data)\n    \n    output_df = pd.DataFrame(df_list)\n    output_df.to_excel(filename, index=False)\n"}, {"file": "__init__.py", "path": "/src/__init__.py", "code": ""}, {"file": "main.py", "path": "/src/main.py", "code": "from file_validation import (\n    check_file_existence,\n    validate_headers,\n    validate_time_column,\n    validate_data_integrity,\n    validate_null_value\n)\nfrom data_transformation import transform_to_two_dimension_table\nfrom output_file_creation import create_output_excel_file\nimport pandas as pd\n\ndef main():\n    file_name = 'Spring Semester Subjects.xlsx'\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n    valid_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    periods = valid_times\n    \n    if not check_file_existence(file_name):\n        raise FileNotFoundError(f'File {file_name} does not exist.')\n    \n    df = pd.read_excel(file_name)\n\n    if not validate_headers(df, expected_headers):\n        raise ValueError('Invalid file headers!')\n\n    if not validate_time_column(df, valid_times):\n        raise ValueError('Invalid values in Time column.')\n\n    if not (validate_data_integrity(df) and validate_null_value(df)):\n        raise ValueError('Data contains missing values or integrity issues.')\n    \n    table = transform_to_two_dimension_table(df.to_dict(orient='records'), weekdays, periods)\n    create_output_excel_file(table, 'Transformed_Subject_Time_Table.xlsx')\n\nif __name__ == '__main__':\n    main()"}], "18": [{"file": "index.html", "path": "project/main_menu/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Main Menu</title>\n<style>\n    .menu { display: flex; flex-direction: column; align-items: center; }\n    button { margin: 10px; padding: 10px; width: 200px; }\n</style>\n</head>\n<body>\n<div id=\"mainMenu\" class=\"menu\">\n    <h1>Main Menu</h1>\n    <button onclick=\"startGame()\">Start Game</button>\n    <button onclick=\"showInstructions()\">Instructions</button>\n    <button onclick=\"exitGame()\">Exit Game</button>\n</div>\n<script src=\"main_menu.js\"></script>\n</body>\n</html>"}, {"file": "main_menu.js", "path": "project/main_menu/main_menu.js", "code": "function startGame() {\n  // Logic to start game\n  window.location.href = 'game_environment/index.html';\n}\n\nfunction showInstructions() {\n  alert('Display instructions and how to play the game.');\n}\n\nfunction exitGame() {\n  if (confirm(\"Are you sure you want to exit?\")) {\n    window.close();\n  }\n}"}, {"file": "index.html", "path": "project/game_environment/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Game Environment</title>\n<style>\n    .controls { display: flex; justify-content: center; gap: 10px; margin-top: 20px; }\n    button { padding: 10px; width: 180px; }\n</style>\n</head>\n<body>\n<h1>Game Environment</h1>\n<div id=\"gameControls\" class=\"controls\">\n    <button onclick=\"movePlayer()\">Move Player</button>\n    <button onclick=\"lookAround()\">Look Around</button>\n    <button onclick=\"pickItem()\">Pick Item</button>\n    <button onclick=\"checkInventory()\">Check Inventory</button>\n</div>\n<script src=\"game_environment.js\"></script>\n</body>\n</html>"}, {"file": "game_environment.js", "path": "project/game_environment/game_environment.js", "code": "function movePlayer() {\n  // Logic to move player\n}\n\nfunction lookAround() {\n  alert('Inspecting the current area.');\n}\n\nfunction pickItem() {\n  // Logic to pick an item\n}\n\nfunction checkInventory() {\n  alert('Display items in inventory.');\n}"}, {"file": "index.js", "path": "project/scripts/index.js", "code": "export function parseCommand(input) {\n    // Logic for parsing commands from player input\n}\n\nexport function updateGameState() {\n    // Logic to update game state based on actions and events\n}"}, {"file": "help.html", "path": "project/help_and_support/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n<title>Help and Support</title>\n<style>\n    body { text-align: center; margin-top: 50px; }\n    button { padding: 10px; width: 180px; margin-top: 20px; }\n</style>\n</head>\n<body>\n<h1>Help and Support</h1>\n<button onclick=\"displayHelp()\">Display Help</button>\n<script src=\"help_support.js\"></script>\n</body>\n</html>"}, {"file": "help_support.js", "path": "project/help_and_support/help_support.js", "code": "function displayHelp() {\n  alert('Here is some help and support information about the game.');\n}"}]}