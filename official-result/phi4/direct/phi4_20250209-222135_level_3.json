{"5": [{"file": "manage.py", "path": "project/manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    \nexecute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    \"\"\"\n    Configuration for the Example App.\n    \"\"\"\n    name = 'example_app'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST' and request.FILES['markdown_file']:\n        markdown_file = request.FILES['markdown_file']\n        fs = FileSystemStorage()\n        filename = fs.save(markdown_file.name, markdown_file)\n        file_path = os.path.join(settings.MEDIA_ROOT, filename)\n\n        with open(file_path, 'r') as f:\n            text = f.read()\n\n        html = markdown.markdown(text)\n        return HttpResponse(html)\n    \n    return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  \n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': ' django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],    \n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n\t'default': {\n\t\t'ENGINE': 'django.db.backends.sqlite3',\n\t\t'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n\t}\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "home.html", "path": "templates/home.html", "code": "<html>\n<head>\n\t<title>Home</title>\n</head>\n<body>\n\t<h1 id='header' class='main-header'>Welcome to the Home Page!</h1>\n</body>\n</html>"}, {"file": "convert.html", "path": "templates/convert.html", "code": "<html>\n<head>\n\t<title>Convert Markdown</title>\n</head>\n<body>\n<h1 id='header' class='main-header'>Markdown to HTML Converter</h1>\n<form method='POST' enctype='multipart/form-data'>\n    {% csrf_token %}\n    <label for='markdown_file' class='file-label'>Select markdown file:</label>\n    <input type='file' name='markdown_file' id='markdown_file' class='file-input'\n           required><br><br>\n    <button type='submit' class='submit-button'>Convert</button>\n</form>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<html>\n<head>\n\t<title>About Us</title>\n</head>\n<body>\n<h1 id='header' class='main-header'>About Us!</h1>\n<p>This is a simple Django project to demonstrate converting markdown files to HTML.</p>\n</body>\n</html>"}], "7": [{"file": "admin.py", "path": "example_app/admin.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "# Forms for user input, such as login and signup\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "# Models to represent database tables\nclass User(models.Model):\n    username = models.CharField(max_length=150)\n    email = models.EmailField()\n    password = models.CharField(max_length=100)"}, {"file": "tests.py", "path": "example_app/tests.py", "code": "# Unit tests for the application\nclass ExampleTest(TestCase):\n    def test_example(self):\n        self.assertEqual(1 + 1, 2)"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import UserSignupForm\n\ndef index(request):\n    return render(request, 'main/index.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserSignupForm(request.POST)\n        if form.is_valid():\n            # Process the form data and login the user\n            pass\n    else:\n        form = UserSignupForm()\n    return render(request, 'main/signup.html', {'form': form})"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import index, signup\n\nurlpatterns = [\n    path('', index, name='index'),\n    path('signup/', signup, name='signup')\n]"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'example_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    }]\nWSGI_APPLICATION = 'example_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls'))]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()"}, {"file": "index.html", "path": "templates/main/index.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8' />\n    <meta name='viewport' content='width=device-width, initial-scale=1.0' />\n    <title>Home</title>\n<link rel='stylesheet' href='/static/styles/main.css' />\n</head>\n<body>\n<div class='container'>\n<h1>Welcome to the Home Page</h1>\n<a href='{% url 'about_page:about_us' %}' id='about-link'>About Us</a> |\n<a href='{% url 'signup' %}'>Sign Up</a> | <a href='{% url 'logout' %}'>Logout</a>\n<hr /><!-- Horizontal Rule -->\n<div class='content-area'>\n<h2>Main Content Area</h2>\n<p>This is the central content area of your home page.</p>\n</div>\n</div>\n<script src='/static/scripts/main.js'></script>\n</body>\n</html>"}, {"file": "main.css", "path": "static/styles/main.css", "code": ".container {\n  text-align: center;\n}\n.content-area {\n  padding: 20px;\n}"}, {"file": "main.js", "path": "static/scripts/main.js", "code": "// main.js"}, {"file": "__init__.py", "path": "about/views.py", "code": "from django.shortcuts import render\n\ndef about_us(request):\n    return render(request, 'main/about-us.html')"}, {"file": "urls.py", "path": "about/urls.py", "code": "from django.urls import path\nfrom .views import about_us\napp_name = 'about_page'\nurlpatterns = [\n    path('about-us/', about_us, name='about_us')]"}, {"file": "index.html", "path": "templates/main/about-us.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n<meta charset='UTF-8' />\n<meta name='viewport' content='width=device-width, initial-scale=1.0' />\n<title>About Us</title>\n<link rel='stylesheet' href='{% static 'styles/main.css' %}' />\n</head>\n<body>\n<div class='container'>\n<h1>About {{ company }}</h1>\n<p>Established in 2023, {{ company }} is a leading provider of innovative solutions.</p>\n<a href='/'>Home</a> | <a href='{% url 'signup' %}'>Sign Up</a> | <a href='logout'>Logout</a>\n<hr />\n<div class='content-area'>\n<h2>Mission Statement</h2>\n<p>To deliver outstanding service and value to our customers.</p>\n</div>\n</div>\n<script src='{% static 'script/main.js' %}'></script>\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "/myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "/myproject/__init__.py", "code": ""}, {"file": "views.py", "path": "/myproject/example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        Return a rendered HTML with unique id and classes.\n        \"\"\"\n        context = {}\n        return render(request, 'hello_world.html', context)\n"}, {"file": "style.css", "path": "/myproject/example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\nh1 {\n    color: #333;\n}"}, {"file": "hello_world.html", "path": "/myproject/example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <!-- This section displays the Hello World message to the user with an id and class for styling purposes. -->\n    <h1 id='hello-world-message' class='text-color-primary'>Hello, World!</h1>\n</body>\n</html>"}, {"file": "settings.py", "path": "/myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "/myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "/myproject/myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/myproject/myproject/example_app/__init__.py", "code": ""}], "16": [{"file": "16-stdanswer.py", "path": "16-stdanswer.py", "code": "# Import necessary libraries\nimport os\nimport pandas as pd\n\n# File paths\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"Processed Subjects Table.xlsx\"\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \n    Arguments:\n    file_path -- str : The path to the file that is being checked\n    \n    Returns:\n    bool: True if the file exists, False otherwise\n    \"\"\"\n    return os.path.exists(file_path)\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the input file is in Excel format.\n    \n    Arguments:\n    file_path -- str : The path to the file that is being checked\n    \n    Returns:\n    bool: True if the file is an Excel file, False otherwise\n    \"\"\"\n    _, file_extension = os.path.splitext(file_path)\n    return file_extension in ['.xls', '.xlsx']\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    \n    Arguments:\n    df -- pd.DataFrame: The data frame to be validated\n    \n    Returns:\n    bool: True if valid, raises ValueError otherwise\n    \"\"\"\n    required_columns = ['Subject Code', 'Course Title']\n    if not all(column in df.columns for column in required_columns):\n        raise ValueError(f\"DataFrame must contain the following columns: {required_columns}\")\n    return True\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    \n    Arguments:\n    input_file -- str : Path to the input Excel file\n    output_file -- str : Path to save the processed Excel file\n    Throws:\n    Exception: If any data validation checks fail or if reading is unsuccessful\n    \"\"\"\n    if not check_file_exists(input_file):\n        raise FileNotFoundError(f\"{input_file} does not exist.\")\n    \n    if not check_file_format(input_file):\n        raise ValueError(f\"The file {input_file} is not in Excel format.\")\n\n    df = pd.read_excel(input_file)\n\n    if validate_data(df):\n        # Perform processing here (e.g., cleaning data, sorting etc.)\n        processed_df = df.sort_values(by=['Subject Code'])  # Example operation\n        \n        processed_df.to_excel(output_file, index=False)\n\ndef main():\n    \"\"\"\n    Main execution function.\n    Runs the subject processing tasks based on provided input and output files.\n    \"\"\"\n    try:\n        process_subjects(input_file, output_file)\n        print(\"Data processed successfully and saved to\", output_file)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n"}], "17": [{"file": "17-stdanswer.py", "path": "project/src/17-stdanswer.py", "code": "# This module performs logistic regression analysis on game data.\nimport os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    df = pd.read_excel(input_file)\n    if not all(df.dtypes.apply(lambda x: np.issubdtype(x, np.number))):\n        raise ValueError(\"All columns must be numeric\")\n    if df.isnull().any().any():\n        raise ValueError(\"Data contains missing values\")\n    return df\n\n\ndef add_lagged_dependent_variable(data, target_column='Outcome'):\n    data['Lag_'+target_column] = data[target_column].shift()\n    data.dropna(inplace=True)\n    return data, f'Lag_{target_column}'\n\n\ndef prepare_features_and_target(data, target_column='Outcome', lagged_column):\n    y = data.pop(target_column)\n    X = data.copy()\n    X = sm.add_constant(X)  # Adds a constant term to the predictor set\n    return X, y\n\n\ndef build_logistic_model(X, y):\n    model = sm.Logit(y, X)\n    result = model.fit(disp=0)  # Set disp=0 to suppress fitting output\n    return result\n\n\ndef save_summary_to_excel(result, output_file=\"Logistic.xlsx\"):\n    with pd.ExcelWriter(output_file) as writer:\n        summary_df = pd.DataFrame(result.summary().tables[1])\n        summary_df.to_excel(writer, sheet_name='Summary', index=True)\n        \n        params_df = pd.DataFrame({\"Coef\": result.params}, index=result.params.index).T\n        params_df.to_excel(writer, sheet_name='Params', index=False)\n\n\ndef main(input_file=\"Gamedata.xlsx\", output_file=\"Logistic.xlsx\"):\n    data = read_and_validate_data(input_file)\n    lagged_column = 'Lag_Outcome'\n    data, lagged_column = add_lagged_dependent_variable(data)\n    X, y = prepare_features_and_target(data)\n    result = build_logistic_model(X, y)\n    save_summary_to_excel(result, output_file=output_file)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "requirements.txt", "path": "project/requirements.txt", "code": "# Minimum required versions for Python packages\npandas>=1.0.0\nstatsmodels>=0.12.2\nopenpyxl>=3.0.5 # For reading and writing Excel files\n"}], "18": [{"file": "18-stdanswer.py", "code": "import os\n\n# Directory structure and game items\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = '/'\n        self.directory_structure = {\n            '/': ['home', 'forest', 'cave'],\n            '/home': ['kitchen', 'bedroom'],\n            '/forest': ['clearing', 'deep_forest'],\n            '/cave': ['treasure_room'],\n            '/home/kitchen': [],\n            '/home/bedroom': [],\n            '/forest/clearing': [],\n            '/forest/deep_forest': [],\n            '/cave/treasure_room': []\n        }\n        self.items = {'/cave/treasure_room': 'golden_key'}\n\n    def ls(self):\n        print(self.directory_structure[self.current_dir])\n\n    def cd(self, target_dir):\n        new_path = os.path.join(self.current_dir, target_dir)\n        if target_dir in self.directory_structure.get(self.current_dir, []) or target_dir == '..':\n            if target_dir == '..':\n                parts = self.current_dir.split('/')\n                # Use all but the first and last element to handle leading/trailing slashes\n                parts = [part for part in parts[1:-1] if part]\n                self.current_dir = '/' + '/'.join(parts) or '/'\n            else:\n                self.current_dir = new_path\n        else:\n            print(f'Cannot change directory to {target_dir}')\n\n    def inventory(self):\n        print([item for item, location in self.items.items() if location == self.current_dir])\n\n    def start_game(self):\n        while True:\n            command = input('Enter a command: ').strip().split()\n            action = command[0]\n            argument = command[1] if len(command) > 1 else None\n            if action == 'ls':\n                self.ls()\n            elif action == 'cd' and argument:\n                self.cd(argument)\n            elif action == 'inventory':\n                self.inventory()\n            elif action == 'quit':\n                break\n            else:\n                print('Invalid command')\n\ndef main():\n    game = BashCrawl()\n    game.start_game()\n\nif __name__ == '__main__':\n    main()"}, {"file": "README.md", "code": "# Bash-Crawl Adventure Game\nThis is a text-based adventure game named 'Bash-Crawl'. It takes inspiration from classic command-line interactions and allows players to explore different locations like home, forest, cave, etc., and collect items such as the legendary golden key in the treasure room. \n## Features\n- **Directory Navigation:** Change directories with `cd <directory>` or go back with `cd ..`.\n- **Listing Directories:** View directory contents using `ls`.\n- **Inventory Management:** Check inventory with `inventory`. (Current path-specific)\n- **Quit Game:** Stop the game by entering `quit`.\n## Getting Started\nClone this repository and run the `18-stdanswer.py` script to play the game in your terminal or command prompt."}], "19": [{"file": "main.py", "path": "project_root/main.py", "code": "# main.py\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\ndef check_file_existence(file_path):\n    \"\"\"\n    Check if a file exists at the given file path.\n    \"\"\"\n    return os.path.isfile(file_path)\n\ndef read_dataset(file_path):\n    \"\"\"\n    Read the dataset from a CSV file and return a DataFrame.\n    \"\"\"\n    df = pd.read_csv(file_path)\n    if not check_file_existence(file_path):\n        raise FileNotFoundError(f\"File {file_path} does not exist.\")\n    return df\n\ndef validate_dataset(df, required_columns):\n    \"\"\"\n    Validate that the dataset contains all required columns.\n    \"\"\"\n    for column in required_columns:\n        if column not in df.columns:\n            raise KeyError(f\"Required column {column} is missing from the dataset.\")\n\ndef preprocess_dataset(df):\n    \"\"\"\n    Preprocess the dataset, including cleaning and formatting dates.\n    \"\"\"\n    # Ensuring 'Date of death' columns are in datetime format\n    df['Week'] = pd.to_datetime(df['Date of death'], errors='coerce').dt.isocalendar().week\n    df.dropna(subset=['Week'], inplace=True)\n    return df\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"\n    Plot the weekly deaths and save as a histogram image file.\n    \"\"\"\n    plt.figure(figsize=(12, 6))\n    plt.hist(weekly_deaths.values(), bins=len(weekly_deaths), color='skyblue', edgecolor='black')\n    plt.title('Weekly Deaths Histogram')\n    plt.xlabel('Week Number')\n    plt.ylabel('Number of Deaths')\n    plt.savefig(output_file)\n    plt.close()\n\ndef main():\n    \"\"\"\n    Main execution function to process the dataset and plot the histogram.\n    \"\"\"\n    input_file = 'Deathlist.csv'\n    output_file = 'weekly_deaths_histogram.png'\n    required_columns = ['Date of death']\n\n    try:\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == '__main__':\n    main()"}, {"file": "requirements.txt", "path": "project_root/requirements.txt", "code": "pandas==1.5.3\nmatplotlib==3.6.2\npython-dateutil==2.8.2"}]}