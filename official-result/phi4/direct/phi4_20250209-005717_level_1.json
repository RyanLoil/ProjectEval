{"8": [{"file": "calendar_project/settings.py", "path": "calendar_project/calendar_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Base directory\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key-here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',  # Our application\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "calendar_project/urls.py", "path": "calendar_project/calendar_project/urls.py", "code": "# Django imports\nfrom django.contrib import admin\nfrom django.urls import path, include\n\n# URL Patterns\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "calendar_project/calendar_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "calendar_project/manage.py", "code": "#!/usr/bin/env python3\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and\"\n            \"available on your PYTHONPATH environment variable? Did you\" \n            \"forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "app.py", "path": "calendar_app/calendar_app/__init__.py", "code": ""}, {"file": "views.py", "path": "calendar_app/calendar_app/views.py", "code": "from django.shortcuts import render\nimport datetime\n\ndef index(request):\n    current_month = datetime.date.today().replace(day=1)\n    month_calendar = current_month.strftime('%B %Y')\n    return render(request, 'index.html', {'current_month': month_calendar})"}, {"file": "urls.py", "path": "calendar_app/calendar_app/urls.py", "code": "# Django imports\nfrom django.urls import path\n\n# Import views from the application\nfrom .views import index\n\nurlpatterns = [\n    # Home page URL pattern\n    path('', index, name='index'),\n]"}, {"file": "models.py", "path": "calendar_app/calendar_app/models.py", "code": "# Django imports\nfrom django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=255)\n    date = models.DateField()\n    time_start = models.TimeField()\n    time_end = models.TimeField()\n    details = models.TextField(blank=True)\n"}, {"file": "admin.py", "path": "calendar_app/calendar_app/admin.py", "code": "# Django imports\nfrom django.contrib import admin\n# Import our event model\nfrom .models import Event\n\n# Register the model to make it manageable from Django's admin site\nadmin.site.register(Event)"}, {"file": "index.html", "path": "templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calendar Application</title>\n</head>\n<body>\n\t<div id=\"calendar-header\" class=\"header\">\n        <h1>{{ current_month }}</h1>\n    </div>\n\n    <!-- Calendar display logic here -->\n\n    <!-- For demonstration purposes only. Implement actual calendar rendering elsewhere.\n         Use Django template tags and filters to integrate Python logic with HTML. -->\n</body>\n</html>"}], "9": [{"file": "manage.py", "path": "chatbot_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"Clean-up, create an admin user, generate site maps, etc.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django\\n\\n%s\\n\\nIs the \\'django\\' package installed? Did you forget to activate a virtual environment?\" % exc) from None\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "chatbot_project/chatbot_project/settings.py", "code": "from pathlib import Path\nimport os\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add template directory here\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "chatbot_project/chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include \n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),  # Include your app's urls here\n]"}, {"file": "wsgi.py", "path": "chatbot_project/chatbot_project/wsgi.py", "code": "# WSGI config for chatbot project.\nfrom django.core.wsgi import get_wsgi_application\nimport os\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "chatbot_project/chatbot_project/__init__.py", "code": "# This file is left intentionally empty."}, {"file": "asgi.py", "path": "chatbot_project/chatbot_project/asgi.py", "code": "'ASGI config for chatbot project.\\\n\\\nIt exposes the ASGI callable as a module-level variable named ``application``.\\\n\\\nFor more information on this file, see: https://docs.djangoproject.com/en/4.0/howto/deployment/asgi/'\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\napplication = get_asgi_application()"}, {"file": "apps.py", "path": "chatbot_app/chatbot_app/apps.py", "code": "'APPS CONFIGURATION\\\n#\\\n# Django uses this file to determine \\'app ready\\' events.  It contains\\\\n#' a single class which subclasses AppConfig, and \\'ready\\' method on\\\\n\nclass ChatbotAppConfig(AppConfig):\n    name = 'chatbot_app'\n"}, {"file": "__init__.py", "path": "chatbot_app/chatbot_app/__init__.py", "code": "# This file is left intentionally empty."}, {"file": "models.py", "path": "chatbot_app/chatbot_app/models.py", "code": "'Models for the chatbot app.'\nfrom django.db import models  \nclass Chat(models.Model): # Example model\n    name = models.CharField(max_length=100)\n    description = models.TextField()\n    \n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "chatbot_app/chatbot_app/views.py", "code": "'Views for Chatbot app'\nfrom django.shortcuts import render\nfrom .models import Chat  # Import your models here\ndef home(request):\n    chats = Chat.objects.all()  # Example query\n    context = {'chats': chats}\n    return render(request, 'home.html', context)"}, {"file": "urls.py", "path": "chatbot_app/chatbot_app/urls.py", "code": "'URL dispatcher for Chatbot App'\nfrom django.urls import path\nfrom .views import home  # Import your views here\nurlpatterns = [\n    path('', home, name='home'),\n]"}, {"file": "admin.py", "path": "chatbot_app/chatbot_app/admin.py", "code": "# Register your models here.\nfrom django.contrib import admin\nfrom .models import Chat  # Import models here\nclass ChatAdmin(admin.ModelAdmin):\n    list_display = ('name', 'description')\nadmin.site.register(Chat, ChatAdmin)"}, {"file": "home.html", "path": "chatbot_project/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot Introduction</title>\n</head>\n<body>\n<h1 id=\"title\" class=\"page-title\">Welcome to Our AI Chatbot</h1>\n<div id=\"content\" class=\"main-content\">\n    {% for chat in chats %}\n        <div id=\"chat-{{ chat.id }}\" class=\"chat-info\">\n            <h2 class=\"chat-name\">{{ chat.name }}</h2>\n            <p class=\"chat-description\">{{ chat.description }}</p>\n        </div>\n    {% endfor %}\n</div>\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "mydjangoapp/manage.py", "code": "//!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mydjangoapp.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise SystemExit(exc)\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "mydjangoapp/mydjangoapp/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworldapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mydjangoapp.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mydjangoapp.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "mydjangoapp/mydjangoapp/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworldapp.urls')),\n]"}, {"file": "wsgi.py", "path": "mydjangoapp/mydjangoapp/wsgi.py", "code": "#!/usr/bin/env python\n'\"\"\"\nWSGI config for mydjangoapp project.\n'\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mydjangoapp.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "mydjangoapp/__init__.py", "code": ""}, {"file": "apps.py", "path": "helloworldapp/apps.py", "code": "'\"\"\"\nDjango module for helloworldapp.\n'\nclass HelloWorldAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworldapp'"}, {"file": "__init__.py", "path": "helloworldapp/__init__.py", "code": ""}, {"file": "models.py", "path": "helloworldapp/models.py", "code": "# This file can remain empty or include model definitions\n"}, {"file": "views.py", "path": "helloworldapp/views.py", "code": "'\"\"\"\nViews for helloworld app.\n'\nfrom django.http import HttpResponse\ndef hello_world(request):\n    return HttpResponse('<html><head></head><body><div id=\"greeting\" class=\"text\">Hello World</div></body></html>')"}, {"file": "urls.py", "path": "helloworldapp/urls.py", "code": "'\"\"\"\nDjango URLs for helloworldapp.\n'\nfrom django.urls import path\nfrom .views import hello_world\nurlpatterns = [\n    path('', hello_world, name='hello_world'),\n]"}, {"file": "admin.py", "path": "helloworldapp/admin.py", "code": "# Register your models here\n"}, {"file": "migrations/__init__.py", "path": "helloworldapp/migrations/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "/myproject/myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\u00bb\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\\n\"\\\nappeared in your PYTHONPATH environment variable? Did you \\\n\"\\\nforget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "README.md", "path": "/myproject/myproject/README.md", "code": "# Django Project with Redirect Button\nThis Django project contains a simple website with a button that redirects to the \"hello world\" page.\n- Run `python manage.py runserver` to start the development server.\n"}, {"file": "settings.py", "path": "/myproject/myproject/settings.py", "code": "# myproject/settings.py\nimport os\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-something'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "/myproject/myproject/urls.py", "code": "# myproject/urls.py\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(('myapp.urls', 'myapp'), namespace='myapp')), # Include app urls\n]\n"}, {"file": "wsgi.py", "path": "/myproject/myproject/wsgi.py", "code": "# wsgi.py\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "/myproject/myapp/__init__.py", "code": "\"\"\"\nThis file is intentionally left empty.\nIt marks the directory as a Python package directory.\n\"\"\"\n"}, {"file": "models.py", "path": "/myproject/myapp/models.py", "code": "# myapp/models.py\nfrom django.db import models\n\nclass HelloWorld(models.Model):\n    message = models.TextField()\n\n    def __str__(self):\n        return self.message\n"}, {"file": "views.py", "path": "/myproject/myapp/views.py", "code": "# myapp/views.py\nfrom django.shortcuts import render, redirect\n\ndef home_view(request):\n    # Render the homepage with a button to go to the hello world page.\n    return render(request, 'home.html')\n\ndef hello_world_view(request):\n    # View that renders the hello world message.\n    return render(request, 'hello_world.html', {'message': 'Hello World'})\n"}, {"file": "urls.py", "path": "/myproject/myapp/urls.py", "code": "# myapp/urls.py\nfrom django.urls import path\nfrom .views import home_view, hello_world_view\n\nurlpatterns = [\n    path('', home_view, name='home'),\n    path('hello/', hello_world_view, name='hello_word'),\n]\n"}, {"file": "home.html", "path": "/myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\">\n        <button class=\"redirect-button\" onclick=\"window.location.href='/hello/'\">Go to 'Hello World'</button>\n    </div>\n</body>\n</html>"}, {"file": "hello_world.html", "path": "/myproject/templates/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <div id=\"hello-world-container\">\n        <h1>{{ message }}</h1>\n    </div>\n</body>\n</html>"}], "18": [{"file": "main.py", "path": "bashcrawl_game/main.py", "code": "#!/usr/bin/env python3\n\nclass Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.exits = {}\n\n    def add_exit(self, direction, room):\n        self.exits[direction] = room\n\n    def get_details(self):\n        print(f\"{self.name}\")\n        print(self.description)\n        for direction in self.exits:\n            print(f\"The {direction} is a way to the {self.exits[direction].name}.\")\n\nclass Player:\n    def __init__(self, start_room):\n        self.current_room = start_room\n\n    def move(self, direction):\n        if direction in self.current_room.exits:\n            self.current_room = self.current_room.exits[direction]\n        else:\n            print(\"You can't go that way.\")\n\ndef main():\n    # Create rooms\n    entrance_hall = Room(\"Entrance Hall\", \"A long corridor with paintings on the walls.\")\n    treasure_chamber = Room(\"Treasure Chamber\", \"This room is filled with gold and jewels!\")\n    monster_room = Room(\"Monster Room\", \"A scary place! There's a terrifying monster here!\")\n\n    # Connect rooms\n    entrance_hall.add_exit(\"north\", treasure_chamber)\n    treasure_chamber.add_exit(\"south\", entrance_hall)\n\n    monster_room.add_exit(\"east\", treasure_chamber)\n    treasure_chamber.add_exit(\"west\", monster_room)\n\n    # Create player\n    player = Player(entrance_hall)\n\n    # Game loop\n    while True:\n        player.current_room.get_details()\n\n        command = input(\"> \").strip().lower()\n        if command in [\"north\", \"south\", \"east\", \"west\"]:\n            player.move(command)\n        elif command == \"look\":\n            player.current_room.get_details()\n        elif command == \"exit\":\n            break\n\nif __name__ == '__main__':\n    main()"}, {"file": "README.md", "path": "bashcrawl_game/README.md", "code": "# BashCrawl\nA simple text-based console game created using pure Python.\n\n## Description\nBashCrawl is a small adventure game where you can move between rooms and explore different areas. The game currently features three rooms: Entrance Hall, Treasure Chamber, and Monster Room.\n\n## How to Play\n- Start the game by running `python3 main.py` from your terminal.\n- Use commands like `north`, `south`, `east`, or `west` to move between rooms.\n- Type `look` for a description of the current room.\n- Type `exit` to end the game."}, {"file": ".gitignore", "path": "bashcrawl_game/.gitignore", "code": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so"}], "19": [{"file": "Deathlist.csv", "path": "/project/files/DeathList.csv", "code": ""}, {"file": "process_data.py", "path": "/project/scripts/process_data.py", "code": "# process_data.py\nimport pandas as pd\ngnuplotlib.pyplot as plt\n\ndef read_and_process_csv(file_path):\n\\tifmport csv\n    with open(file_path, linemode='r') as f:\n        reader = csv.DictReader(f)\n        data = [row for row in reader]\n        return date, death_count per week.\n\ndef main():\n    file_path = '...DeathList.csv'\ndata = read_and_process_csv(file_path)\ngenerate_graph(data)\n\nif __name__ == '__main__':\n    main()"}, {"file": "generate_graph.py", "path": "/project/scripts/generate_graph.py", "code": "# generate_graph.py\nimport matplotlib.pyplot as plt\n\ndef generate_graph(data):\n    weeks = [row[0] for row in data]\n    deaths = [row[1] for row in data]\n\n    plt.bar(weeks, deaths)\n    plt.xlabel('Week')\n    plt.ylabel('Deaths')\n    plt.title('Weekly Deaths Histogram')\n    plt.tight_layout()\n    plt.savefig('output/graph.png')\n"}, {"file": "run_analysis.bat", "path": "/project/scripts/run_analysis.bat", "code": "@echo off\npython ..\\scripts\\process_data.py\n"}, {"file": "graph.html", "path": "/project/output/graph.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n<title>Weekly Deaths Histogram</title>\n<style>\n#death-graph {\n    width: 80%;\n    margin: auto;\n}\n</style>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/d3/7.0.4/d3.min.js\"></script>\n<body>\n<div id=\"main-container\">\n<h1 class=\"title\" id=\"title\">Weekly Deaths Histogram</h1>\n<img src=\"graph.png\" alt=\"Histogram of weekly deaths\" class=\"histo-graph\" id=\"graph-img\"/>\n</div>\n<script>\nd3.select('#title').node().id = 'title-id';\nd3.select('.histo-graph').style('class', 'graph-class graph-h2');\n</script>\n</body>\n</html>"}, {"file": "README.md", "path": "/project/README.md", "code": "# Project Files Overview\n\nThis project includes the following files to analyze and display a histogram of weekly deaths from \"Deathlist.csv\":\n- `Deathlist.csv`: Dataset with death records.\n- `process_data.py`: Script to read and process CSV data.\n- `generate_graph.py`: Script to generate a histogram using matplotlib.\n- `run_analysis.bat`: Batch script to execute the Python analysis.\n- `graph.html`: HTML file to display the generated histogram image.\n\nEnsure that all scripts are run from this project's root directory."}]}