{"5": [{"file": "projectname/urls.py", "path": "projectname/urls.py", "code": "\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "converters/views.py", "path": "converters/views.py", "code": "\nfrom django.shortcuts import render\nimport markdown2\nfrom django.http import FileResponse\nfrom io import StringIO, BytesIO\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert_md_to_html(markdown_text):\n    html_content = markdown2.markdown(markdown_text)\n    return html_content\n\ndef convert(request):\n    context = {}\n    if request.method == 'POST':\n        md_input = request.POST.get('markdown', '')\n        html_output = convert_md_to_html(md_input)\n        context['html_output'] = html_output\n        if 'download' in request.POST:\n            response = HttpResponse(content_type='text/html')\n            response['Content-Disposition'] = 'attachment; filename=converted.html'\n            response.write(html_output)\n            return response\n    elif 'file' in request.FILES:\n        file = request.FILES['file']\n        markdown_content = file.read().decode('utf-8')\n        html_output = convert_md_to_html(markdown_content)\n        context['html_output'] = html_output\n    return render(request, 'convert.html', context=context)\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "converters/urls.py", "path": "converters/urls.py", "code": "\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "projectname/settings.py", "path": "projectname/settings.py", "code": "\n# Add 'converters' to INSTALLED_APPS\nINSTALLED_APPS = [\n    # ... other installed apps\n    'django.contrib.staticfiles',\n    'converters',\n]\n\n# Template configuration\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        # ... other settings\n    },\n]\n"}, {"file": "home.html", "path": "templates/home.html", "code": "\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home</title>\n</head>\n<body>\n    <header id=\"welcome-message\" class=\"welcome-header\">\n        <h1>Welcome to the Markdown to HTML Converter!</h1>\n        <p>This tool helps you convert your markdown formatted text into HTML with ease.</p>\n        <nav id=\"navigation-links\" class=\"nav-links\">\n            <a href=\"/convert/\">Convert</a> |\n            <a href=\"/about/\">About</a>\n        </nav>\n    </header>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "templates/convert.html", "code": "\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Convert Markdown to HTML</title>\n</head>\n<body>\n    <form method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        <textarea id=\"markdown-input\" name=\"markdown\" class=\"input-area\">{{ markdown_text|default_if_none:'' }}</textarea><br>\n        <input type=\"file\" id=\"upload-file\" name=\"file\" class=\"file-upload\"><br>\n        <button type=\"submit\" id=\"convert-button\" class=\"convert-btn\">Convert</button>\n        <label for=\"download\">\n            <input type=\"checkbox\" id=\"download\" name=\"download\" value=\"true\" style=\"display:none;\"><span class=\"download-label\">Download HTML</span>\n        </label><br>\n    </form>\n    {% if html_output %}\n        <div id=\"html-output-area\" class=\"output-area\">\n            {{ html_output|safe }}\n        </div>\n    {% endif %}\n</body>\n</html>\n"}, {"file": "about.html", "path": "templates/about.html", "code": "\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About Us</title>\n</head>\n<body>\n    <article id=\"team-info\" class=\"about-content\">\n        <h2>Team Information</h2>\n        <p>This converter was developed by the Dev Team.</p>\n    </article>\n    <section id=\"faq-section\" class=\"faq-area\">\n        <h2>Frequently Asked Questions (FAQ)</h2>\n        <!-- FAQ content goes here -->\n    </section>\n</body>\n</html>\n"}], "14": [{"file": "manage.py", "path": "/hello_world_project/hello_world_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hello_world_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django.\\n\\n\"\n            \"Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "/hello_world_project/hello_world_project/settings.py", "code": "# Django settings for hello_world_project project.\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'fake-key-for-local-development'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloapp',  # New application\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'hello_world_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages'\n            ],\n        }\n    },\n]\n\nWSGI_APPLICATION = 'hello_world_project.wsgi.application'\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\nclass Meta:\n    managed = False\n    db_table = ''"}, {"file": "urls.py", "path": "/hello_world_project/hello_world_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloapp.urls')),\n]"}, {"file": "wsgi.py", "path": "/hello_world_project/hello_world_project/wsgi.py", "code": "# WSGI config for hello_world_project project.\n\nimport os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hello_world_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/hello_world_project/helloapp/__init__.py", "code": "# Empty __init__.py file"}, {"file": "views.py", "path": "/hello_world_project/helloapp/views.py", "code": "from django.shortcuts import render\n\ndef hello_view(request):\n    return render(request, 'index.html')"}, {"file": "urls.py", "path": "/hello_world_project/helloapp/urls.py", "code": "from django.urls import path\nfrom .views import hello_view\n\nurlpatterns = [\n    path('', hello_view),\n]"}, {"file": "index.html", "path": "/hello_world_project/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f9;\n        }\n        .content {\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"hello\" class=\"content\">\n        <h1>Hello World</h1>\n    </div>\n</body>\n</html>"}], "15": [{"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\nif __name__ == '__main__':\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\nfrom django.core.management import execute_from_command_line\nexecute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\ndef get_env_variable(var_name):\n    try:\n        return os.environ[var_name]\n    except KeyError:\n        error_msg = 'Set the {} environment variable'.format(var_name)\n        raise ImproperlyConfigured(error_msg)\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = get_env_variable('DJANGO_SECRET_KEY')\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'myapp',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "# from django.contrib import admin\nfrom django.urls import include, path\nurlpatterns = [\n    # path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "# from multiprocessing.managers import BaseManager\n#from myapp.models import User\n#\nclass CustomUserMan(BaseManager):\n    pass\ncustom_user_men = CustomUserMan()\n# @register('get_all_users')\ndef get_custom_user():\n    \"\"\" Returns a list of user. \"\"\"\n    return User.objects.values('name', 'password')\n\ncustom_user_men.register('get_all_users', callable=get_custom_user)\ncustom_user_men.start()\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "models.py", "path": "myapp/models.py", "code": "# from django.contrib.auth.models import AbstractUser\n# class CustomUser(AbstractUser):\n#     pass\n\nclass mymodel():\n    def __init__(self,a1=0, a2=0):\n        \"\"\"The constructor for the MyClass class.\"\"\"\n        self.a1 = 0\n        self.a2 = 0"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "# from django.contrib import admin\n# from .models import CustomUser\n#\n# @register(CustomUser)\nclass MymodelAdmin(admin.ModelAdmin):\n    \"\"\" This class is used to customize the model's database representation. \"\"\"\n    list_display = ['__str__', 'age', ]\n    search_fields = ['name', 'password']"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n# Create your views here.\ndef home(request):\n    \"\"\" This function handles the Home page requests. \"\"\"\n    return render(request, 'home.html')\ndef hello_world(request):\n    \"\"\"This function provides HelloWorld output.\"\"\"\n    return render(request, 'hello-world.html')"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "# from django.urls import path\nfrom . import views\nurlpatterns = [\n    # path('mymodel/', views.home, name='home'),\n    path('', views.home,name='home'),\n    path('hello-world', views.hello_world, name='hello-world')\n]"}, {"file": "templates/home.html", "path": "myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>Home</title>\n</head>\n<body>\n  <h1 id=\"home\" class=\"home-heading\">Welcome to the Home Page</h1>\n  <a href=\"/hello-world\"><button class=\"btn-home\" id=\"go-to-hello-world-button\">Go to HelloWorld</button></a>\n</body>\n</html>"}, {"file": "templates/hello-world.html", "path": "myproject/templates/hello-world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n</head>\n<body class=\"hello-world-page\"> \n  <h1 id=\"hello\" class=\"hello-heading\">Hello World!</h1>\n</body>\n</html>"}], "17": [{"file": "main.py", "path": "project/data_preparation/main.py", "code": "# main.py\nimport pandas as pd\nfrom model_creation import create_and_save_model_summary\n\ndef data_preparation():\n    # Read dataset\n    df = read_dataset('Gamedata.xlsx')\n    \n    # Check for null values and empty DataFrame\n    if df.isnull().values.any() or df.empty:\n        raise ValueError(\"Dataset contains null values or is empty.\")\n\n    # Lag dependent variable 'result'\n    df['lagged_result'] = df['result'].shift(1)\n    \n    # Prepare independent variables excluding the depedendent variable and result column\n    X = df.drop(columns=['result', 'lagged_result'])\n    y = df['lagged_result']\n    \n    # Drop rows with NaN values caused by lagging\n    return X.iloc[1:], y.iloc[1:]\n\nif __name__ == '__main__':\n    X_prepared, y_prepared = data_preparation()\n    create_and_save_model_summary(X_prepared, y_prepared)\n"}, {"file": "model_creation.py", "path": "project/model_creation/model_creation.py", "code": "# model_creation.py\nimport statsmodels.api as sm\n\ndef create_logistic_model(X, y):\n    # Add constant to the independent variables\n    X_with_constant = sm.add_constant(X)\n    \n    # Create and fit logistic regression model\n    model = sm.Logit(y, X_with_constant).fit()\n    return model\n\ndef generate_model_summary(logit_model):\n    return logit_model.summary2()  # Generate detailed summary of the logistic model\n\n\ndef create_and_save_model_summary(X, y, output_file='outputs/Logistic.xlsx'):\n    # Create and obtain logistic model summary\n    model = create_logistic_model(X, y)\n    summary = generate_model_summary(model)\n    \n    # Save summary to Excel file\n    with pd.ExcelWriter(output_file) as writer:\n        summary.to_excel(writer, sheet_name='Model Summary')\n"}, {"file": "requirements.txt", "path": "project/requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl\n"}], "18": [{"file": "main.py", "path": "/project/src/main.py", "code": "\"\"\"\nMain application entry point.\n\"\"\"\n\nclass Game:\n    def main_menu(self):\n        while True:\n            print(\"\\nMain Menu\")\n            print(\"1. Start Game\")\n            print(\"2. Instructions\")\n            print(\"3. Exit Game\")\n            choice = input(\"Choose an option: \")\n\n            if choice == \"1\":\n                self.start_game()\n            elif choice == \"2\":\n                self.instructions()\n            elif choice == \"3\":\n                return\n            else:\n                print(\"Invalid choice, please try again.\")\n\n    def start_game(self):\n        # Placeholder for starting game logic\n        pass\n\n    def instructions(self):\n        print(\"\\nInstructions and how to play the game.\")\n        \ndef main():\n    game = Game()\n    game.main_menu()\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "game_environment.py", "path": "/project/src/game_environment.py", "code": "\"\"\"\nGame Environment functionalities.\n\"\"\"\nclass GameEnvironment:\n    def move_player(self, direction):\n        # Placeholder for moving player\n        pass\n\n    def look_around(self):\n        # Placeholder for looking around in the environment\n        pass\n\n    def pick_item(self):\n        # Placeholder for picking item function\n        pass\n\n    def check_inventory(self):\n        # Placeholder for checking inventory\n        pass"}, {"file": "game_logic.py", "path": "/project/src/game_logic.py", "code": "\"\"\"\nGame Logic functionalities.\n\"\"\"\nclass GameLogic:\n    def parse_command(self, command):\n        # Placeholder for parsing commands\n        pass\n\n    def update_game_state(self):\n        # Placeholder for updating game state\n        pass"}, {"file": "requirements.txt", "path": "/project/requirements.txt", "code": "# List of required dependencies (if any)\n# For this project setup, no dependencies are listed\nclass requirements:\n    pass"}, {"file": "README.md", "path": "/project/README.md", "code": "\"\"\"\n# Game Project\n\n## Overview\nThis repository contains the source code for a simple text-based game.\n\n## Structure\n- `src/`: Contains all Python script files.\n  - `main.py`: Entry point of the project.\n  - `game_environment.py`: Handles interactions with the game environment.\n  - `game_logic.py`: Manages the core logic and state of the game.\n- `requirements.txt`: Lists dependencies for the project (unused).\n\n## Running the Project\nEnsure you have Python installed, then navigate to the 'src/' directory and run:\n```\npython main.py\n```"}]}