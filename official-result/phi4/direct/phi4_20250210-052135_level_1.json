{"3": [{"file": "password_generator/settings.py", "path": "password_generator/password_generator/settings.py", "code": "ALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_gen_app,\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'password_generator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'password_generator.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "password_generator/urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_gen_app.urls')),\n]"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "# wsgi.py\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "password_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django.\\n\\n\"\n            \"Are you sure it's installed and available on your PYTHONPATH? \\n\\n\"\n            \"Did you forget to activate a virtual environment?\n        \") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "password_gen_app/views.py", "path": "password_gen_app/password_gen_app/views.py", "code": "from django.shortcuts import render, redirect\nimport random\nimport string\ndef generate_password(request):\n    password_length = int(request.GET.get('length', 12))\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for _ in range(password_length))\n    context = { 'password': password }\n    return render(request, 'index.html', context)\ndef index(request):\n    return redirect('generate_password')"}, {"file": "password_gen_app/urls.py", "path": "password_gen_app/password_gen_app/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.generate_password, name='generate_password'),\n]"}, {"file": "index.html", "path": "templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n    <style>label { margin-right: 10px; }</style>\n</head>\n<body>\n    <h1 id=\"heading\">Password Generator</h1>\n    <div class=\"form-container\">\n        <form id=\"passwordForm\" action=\"\" method=\"get\">\n            <label for=\"length\">Length:</label>\n            <input type=\"number\" name=\"length\" id=\"length\" value=\"12\" min=\"8\" max=\"128\" class=\"input-box\">\n            <button type=\"submit\" class=\"generate-btn\">Generate Password</button>\n        </form>\n    </div>\n    \n    {% if password %}\n        <p>Generated Password:</p>\n        <div id=\"resultBox\">\n            <strong><code>{{ password }}</code></strong>\n        </div>\n    {% endif %}\n</body>\n</html>"}, {"file": "__init__.py", "path": "password_gen_app/password_gen_app/__init__.py", "code": ""}], "8": [{"file": "calendar/settings.py", "path": "calendar/calendar/settings.py", "code": "BASE_DIR = BASE_DIR / 'calendar'\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-***'\n\nALLOWED_HOSTS = [\"*\"]\n\n# Application definition\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"calendar_app\",  # Adding our app here\n]\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\n"}, {"file": "calendar/urls.py", "path": "calendar/calendar/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "calendar_calendar/urls.py", "path": "calendar/calendar_calendar/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "calendar/views.py", "path": "calendar/calendar_app/views.py", "code": "from django.shortcuts import render\nimport calendar\n\n# Create your views here.\ndef index(request):\n    year = 2023\n    month = 10\n    cal = calendar.month(year, month)\n\n    html_month_cal = f\"<table class='calendarTable'>\\n<tr><th>Mo</th><th>Tu</th><th>We</th><th>Th</th><th>Fr</th><th>Sa</th><th>Su</th></tr>\\n\"\n\n    weeks = cal.split('\\\\n')\n\n    for week in weeks[1:]:  # Skip the header line\n        html_month_cal += f\"<tr>{week.replace('|', '')}</tr>\\n\"\n\n    html_month_cal += \"</table>\"\n\n    context = {'calendar': html_month_cal}\n    return render(request, 'index.html', context)"}, {"file": "calendar/index.html", "path": "calendar/calendar_app/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"{% static 'styles.css' %}\">\n    <title>Monthly Calendar</title>\n</head>\n<body>\n<div class='container' id='mainContainer'>\n    {% block content %}\n        {{{ calendar|safe }}}\n    {% endblock %}\n</div>\n</body>\n</html>"}, {"file": "calendar/styles.css", "path": "calendar/calendar_app/static/styles.css", "code": ".container {\n    max-width: 600px;\n    margin: auto;\n    border: 1px solid #ccc;\n    padding: 20px;\n    background-color: #f9f9f9;\n}\n\n.calendarTable {\n    width: 100%;\n    table-layout: fixed;\n}\n\n.calendarTable th, .calendarTable td {\n    border: 1px solid #ddd;\n    padding: 10px;\n    text-align: center;\n}\n\n.calendarTable th {\n    background-color: #f2f2f2;\n    color: #333;\n}"}, {"file": "manage.py", "path": "calendar/calendar/manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\n\"\"\"\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and\"\n            \"available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\",\n        ) from exc\n    execute_from_command_line(sys.argv)"}], "13": [{"file": "manage.py", "path": "/project/your_project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and\"\n            \"available on your PYTHONPATH environment variable? Did you\nforget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "/project/your_project/your_project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'customers',\n    'products',\n    'purchases',\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Additional settings ...\n"}, {"file": "models.py (customers)", "path": "/project/customers/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=100)\n    birthday = models.DateField()\n    age = models.IntegerField(blank=True, null=True)\n    sex = models.CharField(max_length=1, choices=(('M', 'Male'), ('F', 'Female')))\n    company = models.CharField(max_length=200)\n    phone_number = models.CharField(max_length=15)\n\n# Additional settings ...\n"}, {"file": "models.py (products)", "path": "/project/products/models.py", "code": "from django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n    category = models.CharField(max_length=50)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n# Additional settings ...\n"}, {"file": "models.py (purchases)", "path": "/project/purchases/models.py", "code": "from django.db import models\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n# Additional settings ...\n"}, {"file": "__init__.py (customers)", "path": "/project/customers/__init__.py", "code": "\"\"\"\n# Leave this file empty.\n\"\"\"\n"}, {"file": "__init__.py (products)", "path": "/project/products/__init__.py", "code": "\"\"\"\n# Leave this file empty.\n\"\"\"\n"}, {"file": "__init__.py (purchases)", "path": "/project/purchases/__init__.py", "code": "\"\"\"\n# Leave this file empty.\n\"\"\"\n"}, {"file": "admin.py (customers)", "path": "/project/customers/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer\n\n@admin.register(Customer)\nclass CustomerAdmin(admin.ModelAdmin):\n    list_display = ('name', 'birthday', 'age', 'sex', 'company', 'phone_number')\n"}, {"file": "admin.py (products)", "path": "/project/products/admin.py", "code": "from django.contrib import admin\nfrom .models import Product\n\n@admin.register(Product)\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = ('name', 'category', 'recommended_price')\n"}, {"file": "admin.py (purchases)", "path": "/project/purchases/admin.py", "code": "from django.contrib import admin\nfrom .models import PurchaseRecord\n\n@admin.register(PurchaseRecord)\nclass PurchaseRecordAdmin(admin.ModelAdmin):\n    list_display = ('datetime', 'product', 'customer', 'quantity', 'amount')\n"}, {"file": "views.py (dashboard)", "path": "/project/admin_panel/views.py", "code": "from django.shortcuts import render\nfrom products.models import Product\nfrom customers.models import Customer\nfrom purchases.models import PurchaseRecord\nfrom datetime import datetime, timedelta\n\ndef dashboard(request):\n    last_month = datetime.now() - timedelta(days=30)\n    sales_data = PurchaseRecord.objects.filter(datetime__gte=last_month)\n    context = {\n        'product_sales': sales_data.values('product__name').annotate(total_sales=models.Sum('quantity')),\n        # Additional data processing ...\n    }\n    return render(request, 'dashboard.html', context)\n"}, {"file": "urls.py (admin_panel)", "path": "/project/admin_panel/urls.py", "code": "from django.urls import path\nfrom .views import dashboard\n\ndef index(request):\n    return render(request, \"index.html\")\n\nurlpatterns = [\n    path('dashboard/', dashboard, name='dashboard'),\n]\n"}, {"file": "__init__.py (admin_panel)", "path": "/project/admin_panel/__init__.py", "code": "\"\"\"\n# Leave this file empty.\n\"\"\"\n"}, {"file": "urls.py (main_project)", "path": "/project/your_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('customers.urls')),\n    path('', include('products.urls')),\n    path('', include('purchases.urls')),\n    path('<path:url_name>/', include('admin_panel.urls')),  # Admin functionalities\n]"}, {"file": "index.html (admin)", "path": "/project/admin_panel/templates/index.html", "code": "<html>\n<head><title>Admin Dashboard</title></head>\n<body>\n<h1>Hello Admin!</h1>\n<a href=\"dashboard/\">Go to Dashboard</a>\n</body>\n</html>"}, {"file": "manage.py", "path": "/project/manage_db/commands/create_superuser.sh", "code": "#!/bin/bash\necho \"Creating a superuser...\"\ncd project_dir && ./manage.py createsuperuser"}], "15": [{"file": "manage.py", "path": "helloworld_project/helloworld_project/manage.py", "code": "\"\"\"\nDjango command line utility for administrative tasks.\n\nHandles `django-admin` and `manage.py` commands.\n(from django 1.6.2 backports compatibility)\n\"", "mode": "#!/usr/bin/env python\\nimport os\\nimport sys\\n\\nif __name__ == \"__main__\":\\nos.environ[\"DJANGO_SETTINGS_MODULE\"] = \\\"helloworld_project.settings\\\"\\nfrom django.core.management import execute_from_command_line\\nexecute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "helloworld_project/helloworld_project/settings.py", "code": "\"\"\"\nThe settings for helloworld_project project.\n\nGenerated by 'django-admin startproject' using Django 3.2.\n\"", "mode": "import os\\nfrom pathlib import Path\\n\\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\\nBASE_DIR = Path(__file__).resolve().parent.parent\\n\\nALLOWED_HOSTS = []\\n\\n\\n# Application definition\\n\nINSTALLED_APPS = [\\n    \"django.contrib.admin\",\\n    \"django.contrib.auth\",\\n    \"django.contrib.contenttypes\",\\n    \"django.contrib.sessions\",\\n    \"django.contrib.messages\",\\n    \"django.contrib.staticfiles\",\\n]\\nMIDDLEWARE = [\\n    \"django.middleware.security.SecurityMiddleware\",\\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\\n    \"django.middleware.common.CommonMiddleware\",\\n    \"django.middleware.csrf.CsrfViewMiddleware\",\\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\\n    \"django.contrib.messages.middleware.MessageMiddleware\",\\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\\n]\\nROOT_URLCONF = 'helloworld_project.urls'\\n\\nTEMPLATES = [\\n    {\\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\\n        'DIRS': [],\\n        'APP_DIRS': True,\\n        'OPTIONS': {\\n            'context_processors': [\\n                'django.template.context_processors.debug',\\n                'django.template.context_processors.request',\\n                'django.contrib.auth.context_processors.auth',\\n                'django.contrib.messages.context_processors.messages',\\n            ],\\n        },\\n    },\\n]\\n\\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\\n\\n# Database\\n\\nDATABASES = {\\n    'default': {\\n        'ENGINE': 'django.db.backends.sqlite3',\\n        'NAME': BASE_DIR / '\\\\db\\\\database.sqlite3',\\n    },\\n}\\n\\n# Password validation\\n\\nAUTH_PASSWORD_VALIDATORS = [\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\\n    },\\n]\\n\\n# Internationalization\\n\\nLANGUAGE_CODE = 'en-us'\\nTIME_ZONE = 'UTC'\\nUSE_I18N = True\\nUSE_L10N = True\\nUSE_TZ = True\\n\\n# Static files (CSS, JavaScript, Images)\\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\\n\\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "helloworld_project/helloworld_project/urls.py", "code": "'from django.contrib import admin\\nfrom django.urls import path, include\\n\\nurlpatterns = [\\n    path('admin/', admin.site.urls),\\n]\\n'", "mode": ""}, {"file": "wsgi.py", "path": "helloworld_project/helloworld_project/wsgi.py", "code": "\"\"\"\nWSGI config for helloworld_project project.\n\nIt exposes the WSGI callable as a module-level variable named '\\\\application'.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/\n\"", "mode": "import os\\nfrom django.core.wsgi import get_wsgi_application\\n\\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "helloworld_project/helloworld_project/__init__.py", "code": "", "mode": "# empty __init__.py file to mark directory as Python package"}, {"file": "views.py", "path": "helloapp/views.py", "code": "'from django.shortcuts import render\\n# Create your views here.\\ndef hello_view(request):\\n    return render(request, 'hello.html')\\n'", "mode": ""}, {"file": "models.py", "path": "helloapp/models.py", "code": "# this file can be empty unless you have models defined in your app", "mode": "# an optional __init__.py with no content"}, {"file": "__init__.py", "path": "helloapp/__init__.py", "code": "", "mode": "# To initialize the application configuration"}, {"file": "urls.py", "path": "helloapp/urls.py", "code": "'from django.urls import path\\nfrom . import views\\n\\nurlpatterns = [\\n    path('index/', views.hello_view, name='hello'),\\n]'\\n)", "mode": ""}, {"file": "hello.html", "path": "helloapp/templates/hello.html", "code": "<!DOCTYPE html>\\n<html lang=\\\"en\\\">\\n<head>\\n    <meta charset=\\\"UTF-8\\\">\\n    <title>Hello World Page</title>\\n</head>\\n<body>\\n    <h1 class=\\\"hello-header\\\" id=\\\"main-title\\\">Hello World!</h1>\\n</body>\\n</html>", "mode": ""}, {"file": "index.html", "path": "templates/index.html", "code": "<!DOCTYPE html>\\n<html lang='en'>\\n<head>\\n    <meta charset='UTF-8'>\\n    <title>Welcome</title>\\n</head>\\n<body>\\n     <div class='content' id=\"home-container\">\\n        <h1 class=\\\"welcome-header\\\" id=\\\"main-title\\\">Welcome to the Site!</h1>\\n         <button type='button' onclick='window.location.href=\"/index/\"' class=\\\"jump-button\\\" id=\\\"jump-to-hello\\\">Jump To Hello Page</button>\\n     </div>\\n</body>\\n</html>", "mode": ""}, {"file": "urls.py", "path": "helloworld_project/urls.py", "code": "'from django.contrib import admin\\nfrom django.urls import path, include\\n# Wire in our application's URLs\\nurlpatterns = [\\n    \\n    # the home page\\n    path('', include('helloapp.urls')),\\n    \\n    path('admin/', admin.site.urls),\\n]'\\n)", "mode": ""}], "16": [{"file": "read_excel.py", "path": "/project/read_excel.py", "code": "#!/usr/bin/env python3\nimport pandas as pd\ngrouped_data = {}\ninput_file_path = 'Spring Semester Subjects.xlsx'\ndf = pd.read_excel(input_file_path)\nfor _, row in df.iterrows():\n    time_period = row['Time']\n    if time_period not in grouped_data:\n        grouped_data[time_period] = []\n    grouped_data[time_period].append([row['#'], row['Name'], row['Weekday']])\noutput_file_path = 'GroupedSubjects.xlsx'\nfor period, subjects in grouped_data.items():\n    pd.DataFrame(subjects).to_excel(output_file_path, sheet_name=period, \n                                index=False, header=['#', 'Name', 'Weekday'], \n                                startrow=len(grouped_data)*2 if i else 0)\n"}, {"file": "ReadExcel.bat", "path": "/project/ReadExcel.bat", "code": "@echo off\npython3 /project/read_excel.py\n"}], "17": [{"file": "main.bat", "path": "project-root-dir/main.bat", "code": "@echo off\nsetlocal\n\necho Running R script...\nrscript.exe run_analysis.R\n"}, {"file": "run_analysis.R", "path": "project-root-dir/run_analysis.R", "code": "#!/usr/bin/env Rscript\n\n# Load necessary libraries\nggplot2 <- if (!requireNamespace('ggplot2', quietly = TRUE)) install.packages('ggplot2'); library(ggplot2)\nxlsx <- if (!requireNamespace('xlsx', quietly = TRUE)) install.packages('xlsx'); library(xlsx)\nreadxl <- if (!requireNamespace('readxl', quietly = TRUE)) install.packages('readxl'); library(readxl)\n\n# Read dataset\ngamedata <- read_excel('project-root-dir/Gamedata.xlsx')\n\n# Get lagged 'result' column\ngamedata$lag_result <- c(NA, head(gamedata$result, -1))\n\n# Remove NA rows that arise from the lagging process\nprocessed_data <- na.omit(gamedata)\n\n# Create logistic model\nlogistic_model <- glm(result ~ lag_result + ., data = processed_data, family = binomial)\n\n# Output summary to a text file for simplicity\ntext_output_file <- 'project-root-dir/Logistic.txt'\nsink(file=text_output_file)\nsummary(logistic_model)\nsink()\n\n# Optionally save the model into an Excel file using `xlsx`\nxlsx::write.xlsx(x = data.frame(LogisticSummary=readLines(text_output_file)),\n                 file = 'project-root-dir/Logistic.xlsx',\n                 sheetName='Logistic Summary',\n                 row.names = FALSE)\n"}, {"file": "Gamedata.xlsx", "path": "project-root-dir/Gamedata.xlsx", "code": ""}], "18": [{"file": "main.py", "path": "/bashcrawl/base/main.py", "code": "#!/usr/bin/env python3\n\nclass Player:\n    def __init__(self, start_room):\n        self.current_room = start_room\n        \ndef print_intro():\n    print(\"Welcome to BashCrawl!\")\n    print(\"You find yourself in a dark hallway...\")\n    \ndef move(direction, player):\n    if direction == \"forward\":\n        player.current_room += 1\n        print(f\"Moved forward. You are now in room {player.current_room}.\")\n    elif direction == \"backward\":\n        player.current_room = max(0, player.current_room - 1)\n        print(f\"Moved backward. You are now in room {player.current_room}.\")\n    else:\n        print(\"Unknown direction!\")\n    \ndef main():\n    rooms = 10\n    player = Player(0)\n    \n    print_intro()\n    while True:\n        command = input(\"Enter a move (forward/backward/exit): \").strip().lower()\n        if command == \"exit\":\n            break\n        else:\n            move(command, player)\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "README.md", "path": "/bashcrawl/base/README.md", "code": "# BashCrawl\n\n## Description\nBashCrawl is a simple text-based adventure game built using Python. Run the script and explore rooms by typing commands.\n\n## Installation\nNo installation required! Just run the main.py file with Python 3.\n\n## Usage\nStart the game by running:\n```\n$ python3 main.py\n```"}], "19": [{"file": "main.py", "path": "./death_analysis/death_analysis/main.py", "code": "# Main script to analyze death data and generate histogram\nimport pandas as pd\nfrom matplotlib import pyplot as plt\ndef plot_weekly_deaths(deaths_df):\n    deaths_df['week'] = deaths_df['Date of Death'].dt.strftime('%Y-%U')\n    weekly_counts = deaths_df.groupby('week').size()\n\n    plt.figure(figsize=(10, 6))\n    weekly_counts.plot(kind='bar', color='skyblue', edgecolor='black')\n    plt.title('Weekly Deaths From Dataset')\n    plt.xlabel('Week of the Year')\n    plt.ylabel('Number of Deaths')\n    plt.xticks(rotation=45, ha='right')\n    plt.tight_layout()\n\n    # Save plot to a file\n    output_file = 'weekly_deaths_histogram.png'\n    plt.savefig(output_file)\n    print(f\"The histogram has been saved as {output_file}.\")\n\nif __name__ == '__main__':\n    file_path = 'Deathlist.csv'\n    data = pd.read_csv(file_path, parse_dates=['Date of Death'])\n    plot_weekly_deaths(data)\n"}, {"file": "requirements.txt", "path": "./death_analysis/requirements.txt", "code": "pandas==1.3.4\nmatplotlib==3.4.3\n"}, {"file": "Deathlist.csv", "path": "./death_analysis/data/Deathlist.csv", "code": ""}, {"file": "README.md", "path": "./death_analysis/README.md", "code": "# Weekly Deaths Analysis Project\n\nThis project analyzes the weekly death rates from a dataset called `Deathlist.csv`.\n\n## How to Run\n\n1. Install Python if not installed.\n2. Navigate to the project directory:\n   ```bash\n   cd path/to/death_analysis\n   ```\n3. Create and activate a virtual environment (optional but recommended):\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   ```\n4. Install the required dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n5. Run the script to generate a histogram of weekly deaths:\n   ```bash\n   python main.py\n   ```\n\nThe output generated will be a PNG file named `weekly_deaths_histogram.png` and it will also print where this file is saved."}, {"file": "__init__.py", "path": "./death_analysis/__init__.py", "code": ""}], "20": [{"file": "blog/settings.py", "path": "blog/blog/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blogsite',  # Register the blog app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XContentOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blog.urls'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "blog/urls.py", "path": "blog/blog/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blogsite.urls')),\n]"}, {"file": "blogsite/__init__.py", "path": "blog/blogsite/__init__.py", "code": "\"\"\"\nis empty"}, {"file": "blogsite/admin.py", "path": "blog/blogsite/admin.py", "code": "from django.contrib import admin\nfrom .models import Post\n\ndefalut_permissions = [\n    'add_post',\n    'change_post',\n    'delete_post'\n]\nadmin.site.register(Post)\n"}, {"file": "blogsite/apps.py", "path": "blog/blogsite/apps.py", "code": "from django.apps import AppConfig\n\nclass BlogsiteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blogsite'\n"}, {"file": "blogsite/models.py", "path": "blog/blogsite/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title"}, {"file": "blogsite/migrations/0001_initial.py", "path": "blog/blogsite/migrations/0001_initial.py", "code": "\"\"\"\nmigration file is automatically generated"}, {"file": "blogsite/views.py", "path": "blog/blogsite/views.py", "code": "from django.shortcuts import render\nfrom .models import Post\n\ndef index(request):\n    posts = Post.objects.all().order_by('-created_at')\n    return render(request, 'blogsite/index.html', {'posts': posts})\n"}, {"file": "blogsite/urls.py", "path": "blog/blogsite/urls.py", "code": "from django.urls import path\nfrom .views import index\n\nurlpatterns = [\n    path('', index, name='index'),\n]"}, {"file": "templates/base.html", "path": "blog/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}Blog{% endblock %}</title>\n</head>\n<body>\n<nav>\n    <ul class=\"nav-links\">\n        <li><a href=\"/\">Home</a></li>\n    </ul>\n</nav>\n<div id=\"content\">\n    {% block content %}{% endblock %}\n</div>\n<footer class=\"footer-content\">\n    &copy; 2023 Blog\n</footer>\n</body>\n</html>"}, {"file": "templates/blogsite/index.html", "path": "blog/templates/blogsite/index.html", "code": "{% extends 'base.html' %}\n{% block title %}Blog Home{% endblock %}\n{% block content %}\n<h1>All Posts</h1>\n<div class=\"posts-list\">\n    {% for post in posts %}\n    <div id=\"post-{{ post.id }}\" class=\"post-item\">\n        <h2><a href=\"#\" class=\"post-title\">{{ post.title }}</a></h2>\n        <p>{{ post.content|truncatewords:30 }}</p>\n    </div>\n    {% endfor %}\n</div>\n{% endblock %}"}, {"file": "blogsite/serializers.py", "path": "blog/blogsite/serializers.py", "code": "from rest_framework import serializers\nfrom .models import Post\n\nclass PostSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Post\n        fields = ['id', 'title', 'content', 'author', 'created_at']"}, {"file": "blogsite/views.py", "path": "blog/blogsite/views.py", "code": "# ... (existing code) \nfrom rest_framework import viewsets\nfrom .models import Post\nfrom .serializers import PostSerializer\n\nclass PostViewSet(viewsets.ModelViewSet):\n    queryset = Post.objects.all()\n    serializer_class = PostSerializer\n"}, {"file": "blogsite/urls.py", "path": "blog/blogsite/urls.py", "code": "# ... (existing imports) \nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\nfrom .views import PostViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'posts', PostViewSet)\n\nurlpatterns += [\n    # ... (existing urlpatterns),\n    path('api/', include(router.urls)), # Include RESTful URLs here\n]"}]}