{"3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "# Generated by Django 3.2 on 2021-05-17\n\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django.\\n\"\n            \"Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "# Password generator project settings\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n     'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "# URL configuration for password generator app\n\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "# WSGI configuration for password generator app\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "password_generator/password_generator/asgi.py", "code": "# ASGI configuration for password generator app\n\nimport os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\napplication = get_asgi_application()"}, {"file": "views.py", "path": "password_generator/password_generator/views.py", "code": "# Views for password generator app\n\nfrom django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_password(request):\n    length = int(request.GET.get('length', 12))\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for i in range(length))\n    context = {'password': password}\n    return render(request, 'home.html', context)"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "# URL configuration for the app\n\nfrom django.contrib import admin\nfrom django.urls import path\n\nfrom . import views\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_password, name='generate_password'),\n]"}, {"file": "templates/home.html", "path": "password_generator/password_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n    <link rel='stylesheet' type='text/css' href='{% static \"style.css\" %}'/>\n</head>\n<body>\n    <div id='main-container'>\n        <h1>Generate a Password</h1>\n        <form class='password-form' method=\"get\">\n            Length: \n            <input type=\"number\" name=\"length\" value=\"12\" id=\"length-input\" min=\"8\" max=\"128\"/>\n            <button type=\"submit\">Generate</button>\n        </form>\n        {% if password %}\n            <p class='generated-password'>Generated Password: <span id='password-output' class='output'>{% autoescape off %}{{ password }}{% endautoescape %}</span></p>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "static/style.css", "path": "password_generator/password_generator/static/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f0f2f5;\n    margin: 0;\n    padding: 20px;\n}\n\n#main-container {\n    max-width: 600px;\n    margin: auto;\n    text-align: center;\n}\n\nh1 {\n    color: #333;\n}\n\n.password-form {\n    margin-top: 20px;\n}\n\n.generated-password {\n    margin-top: 20px;\n    font-size: 18px;\n}\n\n.output {\n    display: inline-block;\n    padding: 5px 10px;\n    border-radius: 3px;\n    background-color: #e1e9ff;\n}"}], "7": [{"file": "manage.py", "path": "budget_control/management/commands/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"\\nCouldn't import Django.\\n\" \"+ \" + str(exc)) from None\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "budget_control/settings/settings.py", "code": "from pathlib import Path\nimport os\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget_tracking',  # Our app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n"}, {"file": "urls.py", "path": "budget_control/urls/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget_tracking.urls')),\n]\n"}, {"file": "wsgi.py", "path": "budget_control/wsgi/wsgi.py", "code": "# WSGI config for budget_control project.\n\nimport os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "budget_control/budget_control/__init__.py", "code": "# This file can be empty or contain initialization code.\n"}, {"file": "apps.py", "path": "budget_tracking/apps/apps.py", "code": "\"\"\"\ncodemodule for the project's apps.\n\"\"\"\nfrom django.apps import AppConfig\n\nclass BudgetTrackingConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget_tracking'\n"}, {"file": "__init__.py", "path": "budget_tracking/budget_tracking/__init__.py", "code": "# This file can be empty or contain initialization code.\n"}, {"file": "models.py", "path": "budget_tracking/models/models.py", "code": "\"\"\"\nModel definitions for the application.\n\"\"\"\nfrom django.db import models\n\nclass BudgetEntry(models.Model):\n    date = models.DateField(auto_now_add=True)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.CharField(max_length=100)\n\n    def __str__(self):\n        return f\"{self.date} - {self.amount}\n"}, {"file": "views.py", "path": "budget_tracking/views/views.py", "code": "\"\"\"\nViews for the budget tracking application.\n\"\"\"\nfrom django.shortcuts import render\nfrom .models import BudgetEntry\nimport matplotlib.pyplot as plt\nimport io\nfrom django.http import FileResponse\n\ndef home(request):\n    entries = BudgetEntry.objects.all()\n    # Prepare data for chart\n    dates = [entry.date for entry in entries]\n    amounts = [float(entry.amount) for entry in entries]\n\n    fig, ax = plt.subplots()\n    ax.plot(dates, amounts)\n    ax.set(xlabel='Date', ylabel='Amount ($)', title='Budget Balance Over Time')\n    ax.grid(True)\n\n    buf = io.BytesIO()\n    plt.savefig(buf, format='png')\n    plt.close(fig)\n    buf.seek(0)\n    return FileResponse(buf, as_attachment=False, filename='balance_chart.png')\n"}, {"file": "urls.py", "path": "budget_tracking/urls/urls.py", "code": "\"\"\"\nURL configuration for the budget tracking app.\n\"\"\"\nfrom django.urls import path\nfrom .views import home\n\nurlpatterns = [\n    path('', home, name='home'),\n]\n"}, {"file": "templates/home.html", "path": "budget_tracking/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control Application</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n<div class=\"container\">\n    <h1 id=\"heading\">Budget Control Dashboard</h1>\n    <div id=\"chart-container\" class=\"row justify-content-center mt-4\">\n        <img id=\"balance-chart\" src=\"/static/balance_chart.png\">\n    </div>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>"}, {"file": "templates/base.html", "path": "budget_tracking/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Budget Control App{% endblock %}</title>\n    {% load static %}\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body class=\"bg-light\">\n<div class=\"container mt-4\">\n    {% block content %}{% endblock %}\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>"}], "8": [{"file": "calendar_app/urls.py", "path": "calendar_app/calendar_app/urls.py", "code": "from django.urls import path\nfrom .views import CalendarListView\nurlpatterns = [\n    path('', CalendarListView.as_view(), name='calendar'),\n]"}, {"file": "calendar_app/views.py", "path": "calendar_app/calendar_app/views.py", "code": "from django.views.generic.list import ListView\nfrom .models import Event\n\nclass CalendarListView(ListView):\n    model = Event\n    context_object_name = 'events'\n    template_name = 'calendar_list.html'"}, {"file": "calendar_app/models.py", "path": "calendar_app/calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    date = models.DateField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "calendar_app/admin.py", "path": "calendar_app/calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "templates/calendar_list.html", "path": "calendar_app/templates/calendar_list.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <title>Monthly Calendar</title>\n</head>\n<body>\n<div id='calendar' class='container'>\n<h1 id='header' class='text-center'>Calendar</h1>\n<ul id='event-list' class='list-group'>\n{% for event in events %}\n    <li class='list-group-item'>\n        <h2 id='{{ event.id }}-title' class='title'>{{ event.title }}</h2>\n        <p id='{{ event.id }}-date' class='date'>Date: {{ event.date }}</p>\n        <p id='{{ event.id }}-description' class='description'>{{ event.description|default:'No description provided.' }}</p>\n    </li>\n{% empty %}\n    <li>No events for this month.</li>\n{% endfor %}\n</ul>\n</div>\n</body>\n</html>"}, {"file": "calendar_app/tests.py", "path": "calendar_app/calendar_app/tests.py", "code": "from django.test import TestCase\nfrom .models import Event\n\nclass EventModelTest(TestCase):\n    def setUp(self):\n        self.event = Event.objects.create(title='Meeting', date='2023-10-15')\n\n    def test_event_creation(self):\n        eq_(self.event.title, 'Meeting')\n        eq_(str(self.event), 'Meeting')"}, {"file": "calendar_app/management/commands/loaddata.sh", "path": "calendar_app/calendar_app/management/commands/loaddata.sh", "code": "#!/bin/bash\npython manage.py makemigrations calendar_app\npython manage.py migrate\necho \"Sample event data loading...\"\n# Create a CSV or JSON file with initial data and use fixtures if needed"}, {"file": "manage.py", "path": "calendar_app/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and\\\n            available on your PYTHONPATH environment variable? Did you forget to activate a virtualenv?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "myproject/settings.py", "path": "calendar_app/myproject/settings.py", "code": "import os\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app', # Newly added\n]\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}"}], "9": [{"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Ensure it's installed and available on your PYTHONPATH environment variable.\" \n            \"If you've just installed Django, consider doing a restart of your shell session.\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'django-insecure-key-placeholder'\nDEBUG = True\nALLOWED_HOSTS = [] # Add your allowed hosts here\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot', \n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot.urls')),\n]"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": "\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/chatbot/__init__.py", "code": "\n"}, {"file": "apps.py", "path": "myproject/chatbot/apps.py", "code": "from django.apps import AppConfig\n\nclass ChatbotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot'"}, {"file": "urls.py", "path": "myproject/chatbot/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "views.py", "path": "myproject/chatbot/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'chatbot/index.html')"}, {"file": "index.html", "path": "myproject/templates/chatbot/index.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>AI Chatbot</title>\n    <link rel='stylesheet' href='{% static \"style.css\" %}'>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"main-heading\">Welcome to Our AI Chatbot</h1>\n        <p id=\"intro-paragraph\" class='description'>This chatbot can assist you with various queries.</p>\n        <!-- Include more content as needed -->\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "myproject/static/style.css", "code": ".container {\n    width: 80%;\n    margin: auto;\n    text-align: center;\n}\n\n#main-heading {\n    font-size: 2em;\n    color: #333;\n}\n\n.description {\n    margin-top: 20px;\n    font-size: 1.2em;\n    color: #666;\n}"}], "14": [{"file": "helloworld_project/settings.py", "path": "helloworld_project/settings.py", "code": "\"\"\"\nDjango settings for helloworld_project project.\n\nGenerated by 'django-admin startproject' using Django 4.2.3.\nFor more information on this file, see https://docs.djangoproject.com/en/4.2/topics/settings/\nFor the full list of settings and their values, see https://docs.djangoproject.com/en/4.2/ref/settings/\n\"\"\"\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-@examplesecretkey!replace_with_your_own_secret_key!!'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nclass EnvironmentConfig:\n    TIME_ZONE = 'UTC'\n    LANGUAGE_CODE = 'en-us'\n    USE_I18N = True\n    USE_L10N = True\n    USE_TZ = True\n\nLANGUAGE_CODE = EnvironmentConfig.LANGUAGE_CODE\nTIME_ZONE = EnvironmentConfig.TIME_ZONE\nUSE_I18N = EnvironmentConfig.USE_I18N\nUSE_L10N = EnvironmentConfig.USE_L10N\nUSE_TZ = EnvironmentConfig.USE_TZ\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "helloworld_project/asgi.py", "path": "helloworld_project/asgi.py", "code": "\"\"\"\nASGI config for helloworld_project project.\nIt exposes the ASGI callable as a module-level variable named \\`application\\`\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/asgi/\n\"\"\"\nimport os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "helloworld_project/urls.py", "path": "helloworld_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]"}, {"file": "helloworld_app/views.py", "path": "helloworld_app/views.py", "code": "\"\"\"\nView module for helloworld application.\n\"\"\"\nfrom django.http import HttpResponse\n\ndef hello_world_view(request):\n    return HttpResponse(\"<html>\\n<head><title>Hello World</title></head>\\n<body>\", \"+ <h1 id='greeting' class='main-heading'>Hello, World!</h1> + \\\"</body>\\n</html>, None)\n"}, {"file": "helloworld_app/urls.py", "path": "helloworld_app/urls.py", "code": "from django.urls import path\nfrom .views import hello_world_view\n\nurlpatterns = [\n    path('', hello_world_view, name='hello-world'),\n]"}, {"file": "helloworld_project/wsgi.py", "path": "helloworld_project/wsgi.py", "code": "\"\"\"\nwsgi.py provides WSGI-compliant servers with a WSGI application\nfor use with Django. It exposes the WSGI callable as \\`application\\`.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n\"\"\"\nimport os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "helloworld_app/__init__.py", "path": "helloworld_app/__init__.py", "code": "\"\"\"Initializes the app module.\"\"\"\n"}, {"file": "helloworld_project/manage.py", "path": "helloworld_project/manage.py", "code": "\"\"\"Django's command-line utility for administrative tasks.\n\nUsage:\n\\t$ python manage.py <command>\n\nFor a list of available commands, see:\nhttps://docs.djangoproject.com/en/4.2/ref/\n\"\"\"\nimport os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Make sure it's installed and \\\"\\n\\\neither\n  - added to your PYTHONPATH\nor\n  - added to a Python path inside the virtualenv you're using.\n\",\n            # Don't pass exception to avoid circular imports.\n            exc.__traceback__) from None\n    execute_from_command_line(sys.argv)\nif __name__ == '__main__':\n    main()\n"}, {"file": "helloworld_app/models.py", "path": "helloworld_app/models.py", "code": "\"\"\"\nModels module for helloworld application.\n\"\"\"\nfrom django.db import models\n\nclass HelloWorldModel(models.Model):\n    pass\n"}, {"file": "helloworld_project/README.md", "path": "helloworld_project/README.md", "code": "# Hello World Django Project\\nThis is a simple Django project that displays \"Hello, World!\" on the homepage."}], "17": [{"id": 1, "file": "run.bat", "path": "./scripts/run.bat", "code": "@echo off\necho Starting data processing...\n\nREM Run the R script to process the data and create models\nRscript ..\\process_data.R ..\\\\data\\\\Gamedata.xlsx ..\\\\output\\\\Logistic.xlsx\n\necho Process completed!"}, {"id": 2, "file": "process_data.R", "path": "./scripts/process_data.R", "code": "# Load required libraries\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(lmtest)\nlibrary(MASS)\n\ncreate_logistic_model <- function(input_path, output_path) {\n  # Read the Excel file into a data frame\n  df <- read_excel(input_path)\n  \n  # Create lag of 'result' variable\n  df <- df %>% mutate(lag_result = lag(result)) %>% na.omit()\n  \n  # Identify independent variables by excluding dependency and new variables created\n  dependent_var <- 'lag_result'\n  independent_vars <- setdiff(names(df), c(dependent_var, 'result', 'lag_result'))\n  \n  # Formulate the model\n  formula <- as.formula(paste(dependent_var, '~', paste(independent_vars, collapse = '+')))\n  \n  # Create logistic regression model\n  model <- glm(formula, data = df, family = binomial(link = 'logit'))\n  \n  # Write summary of the model to the output Excel file\n  write.xlsx(summary(model), output_path)  \n}\n\ndone if (exists(\"args\") && length(args) == 2) {\n  input_file <- args[1]\n  output_file <- args[2]\n  create_logistic_model(input_file, output_file)\n} else {\n  print(\"Run this script with two arguments: input file and output file.\")\n}\n"}, {"id": 3, "file": "README.md", "path": "./README.md", "code": "# Project Documentation\n\nThis project reads a dataset (`Gamedata.xlsx`), creates a logistic model with 'result' as the dependent variable in one-peril lag, and outputs the summary to `Logistic.xlsx`.\n\n## Files included:\n\n1. **run.bat** - Batch file to execute the processing script.\n2. **process_data.R** - R script that processes the data and generates the logistic model.\n3. **README.md** - This documentation file providing details about each component.\n\n## Execution Steps:\n- Ensure you have installed R, required R packages (`readxl`, `dplyr`, `lmtest`, `MASS`) and batch scripting enabled in your environment.\n- Place the input Excel file at `../data/Gamedata.xlsx`.\n- Execute the command: **run.bat** from the project root directory to run and generate output."}], "18": [{"file": "bashi_crawl.py", "path": "project/bashi_crawl.py", "code": "# Bashi Crawl\nimport sys\n\nclasses:\n    def main():\n        print(\"Welcome to Bashcrawl!\")\n        player = Player()\n        room1 = Room(\"The Entrance\", \"You are at the entrance of a dark cave. There is a path leading north.\", [\"north\"])\n        game_rooms = { 'entrance': room1 }\n        current_room = room1\n\n        while True:\n            print(current_room.description)\n            action = input(\"What do you want to do? \").strip().lower()\n\n            if action == 'exit' or action == 'quit':\n                print(\"Thanks for playing!\\n\")\n                sys.exit(0)  # Exits the program\n\n            if action in current_room.exits:\n                move_to = action\n                next_room = game_rooms.get(move_to)\n                if next_room:\n                    current_room = next_room\n                else:\n                    print(f\"There is no path leading {move_to}.\")\n            else:\n                print(\"Invalid command.\\n\") \n    def Player():\n        pass  # Implement player functionalities here\n\nclasses: Room():\n     def __init__(self, name, description, exits):\n         self.name = name\n         self.description = description\n         self.exits = exits\n\ndef __repr__(__self):\n   return self.name + '\\n' + self.description\nif __name__ == '__main__':\n    main()"}, {"file": "README.md", "path": "project/README.md", "code": "# Bashcrawl Game\nA simple text-based adventure game coded in Python.\n## Installation \nRun the script: `python3 bashi_crawl.py`\n## Gameplay Instructions \n- Navigate using directions (e.g., 'north').\n- Type 'exit' or 'quit' to end the game.\n"}], "19": [{"file": "read_deaths.bat", "path": "/batch/read_deaths/", "code": "echo off\npython analyze_deaths.py"}, {"file": "analyze_deaths.py", "path": "/batch/read_deaths/analyze_deaths.py", "code": "import csv\nfrom datetime import datetime\nfrom collections import defaultdict\nimport matplotlib.pyplot as plt\n\ndef load_data(filename):\n    weekly_deaths = defaultdict(int)\n    with open(filename, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            try:\n                date_of_death = datetime.strptime(row['Date of death'], '%Y-%m-%d')\n                week_start = date_of_death - timedelta(days=date_of_death.weekday())\n                weekly_deaths[week_start.strftime('%Y-%U')] += 1\n            except ValueError:\n                # Handle dates that do not conform to the format expectation\n                pass\n    return weekly_deaths\n\ndef plot_histogram(weekly_deaths):\n    weeks = list(weekly_deaths.keys())\n    deaths = list(weekly_deaths.values())\n    plt.bar(weeks, deaths)\n    plt.xlabel('Week')\n    plt.ylabel('Number of Deaths')\n    plt.title('Weekly Deaths Histogram')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.show()\n\nif __name__ == '__main__':\n    filepath = 'Deathlist.csv'\n    weekly_deaths_data = load_data(filepath)\n    plot_histogram(weekly_deaths_data)"}, {"file": "requirements.txt", "path": "/batch/read_deaths/requirements.txt", "code": "matplotlib==3.6.3\n"}], "20": [{"file": "manage.py", "path": "mysite/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django.\\n\\nAre you sure you've installed Django?\\nDid you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "requirements.txt", "path": "mysite/requirements.txt", "code": "Django>=3.2"}, {"file": "settings.py", "path": "mysite/mysite/settings.py", "code": "from pathlib import Path\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blogapp',  # Add your app here\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'mysite.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add the templates directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'mysite.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "mysite/mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blogapp.urls'))  # Include blog URLs\n]"}, {"file": "wsgi.py", "path": "mysite/mysite/wsgi.py", "code": "# WSGI config for mysite project.\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "mysite/mysite/__init__.py", "code": ""}, {"file": "asgi.py", "path": "mysite/mysite/asgi.py", "code": "# ASGI config for mysite project.\nimport os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\nassgi_app = get_asgi_application()"}, {"file": "models.py", "path": "blogapp/blogapp/models.py", "code": "# models.py\nfrom django.db import models\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n"}, {"file": "__init__.py", "path": "blogapp/blogapp/__init__.py", "code": ""}, {"file": "views.py", "path": "blogapp/blogapp/views.py", "code": "# views.py\nfrom django.shortcuts import render\nfrom .models import Post\ndef post_list(request):\n    posts = Post.objects.all()\n    return render(request, 'blog/list.html', {'posts': posts})"}, {"file": "urls.py", "path": "blogapp/blogapp/urls.py", "code": "# urls.py\nfrom django.urls import path\nfrom .views import post_list\nurlpatterns = [\n    path('', post_list, name='post_list'),\n]"}, {"file": "list.html", "path": "templates/blog/list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Blog</title>\n</head>\n<body>\n    <h1>Posts</h1>\n    <ul class=\"post-list\" id=\"post-list\">\n        {% for post in posts %}\n            <li class=\"post-item\" id=\"post-{{ post.id }}\">\n                <h2>{{ post.title }}</h2>\n                <p>{{ post.content }}</p>\n                <small>Posted on: {{ post.created_at }}</small>\n            </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}]}