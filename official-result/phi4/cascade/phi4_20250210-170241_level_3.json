{"11": [{"file": "app/migrations/0001_initial.py", "path": "example_project/example_app/migrations/0001_initial.py", "code": "# Generated by Django 3.2 on 2023-10-01 00:00\n\nfrom django.db import migrations, models\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Project',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('description', models.CharField(max_length=3000)),\n                ('name', models.CharField(max_length=200)),\n                ('tech_stack', models.TextField()),\n            ],\n        ),\n    ]\n"}, {"file": "models.py", "path": "example_project/example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    description = models.CharField(max_length=3000)\n    name = models.CharField(max_length=200)\n    tech_stack = models.TextField()"}, {"file": "views.py", "path": "example_project/example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import generic\nfrom .models import Project\n\nclass HomePageView(generic.ListView):\n    template_name = 'app/index.html'\n    context_object_name = 'projects'\n\n    def get_queryset(self):\n        return Project.objects.all()\n\n\nhome_view_mapping_dict = {\n    view_class: view.get_url() for view_class in [HomePageView]\n}\n\ndef home(request): \n    context = {}\n    active_page = None\n    project_list = ['Project A', 'Project B', 'Project C']\n\n    for _id, page_title in enumerate(project_list, start=1):\n        if request.path.startswith(f'/project/{_id}'):\n            active_page = view_class(request)\n            context['active_page'] = page_title\n            break\n        else: \n            _id -= 1\n    else:\n        active_page = HomePageView(request)\n    if not active_page:\n        return render(request, 'app/index.html', None)\n    return active_page.render(context)"}, {"file": "urls.py", "path": "example_project/example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom .views import home\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"app.urls\")),\n    path(home_view_mapping_dict[home], home, name=\"projects\")\n]"}, {"file": "urls.py", "path": "example_project/example_app/app/urls.py", "code": "from django.urls import path as dj_path\nfrom app import views\n\ndef set_url(view_class):\n    return dj_path(r'', view=view_class.as_view(), name='{view_name}'.format(view_name = f\"{view_class.__name__}\".lower()))  \n\ndictionary_with_urls = {set_url(cls) for cls in [views.HomePageView] }\nsite_url_patterns = [\n    p for p in dictionary_with_urls if p\n]\ndef path(r, *args, **kwargs):\n    return dj_path(r, *args, **kwargs)\n\nurlpatterns = [\n     dj_path(\"/project/<int:id>/\", views.home, name=\"home\"),\n]"}, {"file": "templates/app/index.html", "path": "example_project/example_app/templates/app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Homepage</title>\n</head>\n<body>\n  <h1 class='home-title'>Projects Home Page</h1>\n<div class='container'>\n<nav role=\"toolbar\" aria-label=\"Quick Jump\" class=\"quick-jump\">\n    <a id='main' href=\"/\">Main</a> | \n<a id='projects_a' href=\"/project/1\">Project A</a> | \n<a id='projects_b' href=\"/project/2\">Project B</a> |\n<a id='projects_c' href=\"/project/3\">Project C</a>\n  </nav>\n<hr/>\n<main role=\"main\" class=\"container\"> {%% block content %%}\n<h1>{% if active_page %}{{active_page}}.{% endif %}</h1> \n<ul>\n {% for project in projects %}\n    <li>{{project.name}}</li>\n{% endfor %}\n</ul>\n{%% endblock %%}\n</main>\n</body>\n</html>"}, {"file": "templates/base.html", "path": "example_project/example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n\n    <title>{% if title %} {{ title }} | {% endif %}Homepage</title>\n  </head>\n\n  <body>\n    {% block content %}\n    Hello Django!\n{% endblock %}\n  \n  </body>\n</html>"}, {"file": "views.py", "path": "example_project/example_app/views.py", "code": "\nfrom django.shortcuts import render\nfrom django.views.generic.list import ListView\nfrom .models import Project\nclass HomePageView(ListView):\n    context_object_name = 'projects'\n    template_name='app/index.html'\n\n# Create your views here.\ndef home(request, id=None):\n    project_list=[Project.objects.get(name=f\"Project A\"), \n                  Project.objects.create(name=f\"Project B\", description=\"Some text\",tech_stack=\"Python\"),\n                  Project.objects.create(name=f\"Project C\")]\n     context=dict(\n        projects=project_list,\n        id=id\n    )\n\n    if id:\n        title = project_list[id-1].name\n    else:\n        title = None\n    context['title'] = title\n    return render(request, 'app/index.html', context)\ndef index(request):\n    return render(\n        request,\n        template_name='app/index.html',\n        context={}\n    )"}, {"file": "__init__.py", "path": "example_project/example_app/__init__.py", "code": ""}, {"file": "manage.py", "path": "example_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \\\n'system administrators: please install Django>=1.11 before relying on \\n     this startup script.'\n            ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "example_app", "path": "example_project/example_app/", "code": "\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "example_project/settings.py", "code": "# settings.py\n\nfrom pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\"\nALLOWED_HOSTS = []\n\n# Application definition\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\\"\n            \"available on your PYTHONPATH environment variable? Did you \\\"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\nh1 {\n    color: #333;\n}"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div id=\"message\" class=\"hello-message\">\n        <!-- This section displays the Hello World message to the user. -->\n        <h1>Hello World!</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XContentOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "16": [{"id": 1, "file": "16-stdanswer.py", "path": "project_root/16-stdanswer.py", "code": "# Import necessary modules\nimport os\nimport pandas as pd\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    Returns True if it does, False otherwise.\n    \"\"\"\n    return os.path.exists(file_path)\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format (.xlsx).\n    Returns True if it is an Excel file, False otherwise.\n    \"\"\"\n    try:\n        # Using pandas to read the header, which will validate the format implicitly\n        pd.read_excel(file_path, nrows=0)\n        return True\n    except ValueError:\n        return False\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    Ensure that the DataFrame contains 'Course_Num', 'Title', and other necessary info.\n    Raise a ValueError if validation fails.\n    \"\"\"\n    required_columns = ['Course_Num', 'Title']  # Add other necessary column names here\n    if not all(column in df.columns for column in required_columns):\n        raise ValueError(f'Missing one or more required columns: {required_columns}')\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    \"\"\"\n    if not check_file_exists(input_file):\n        raise FileNotFoundError(f'The file {input_file} does not exist.')\n    \n    if not check_file_format(input_file):\n        raise ValueError('The input file is not a valid Excel file.')\n\n    # Read the Excel file into a DataFrame\n    df = pd.read_excel(input_file)\n\n    # Validate data in the DataFrame\n    validate_data(df)\n\n    # Process and possibly manipulate 'df' if needed before exporting to output_file\n    # Example: df['New Column'] = df['Course_Num'].astype(str) + '-' + df['Title']\n\n    # Export processed data to a new Excel file\n    df.to_excel(output_file, index=False)\n\ndef main():\n    \"\"\"\n    Main execution function.\n    \"\"\"\n    input_file = \"Spring Semester Subjects.xlsx\"\n    output_file = \"Processed Subjects Table.xlsx\"\n\n    try:\n        process_subjects(input_file, output_file)\n        print('Processing completed and data saved to', output_file)\n    except Exception as e:\n        print('An error occurred:', str(e))\n\nif __name__ == \"__main__\":\n    main()\n"}, {"id": 2, "file": "requirements.txt", "path": "project_root/requirements.txt", "code": "# Python package dependencies for the project\npandas>=1.1.5\nopenpyxl>=3.0.5\n"}], "17": [{"file": "17-stdanswer.py", "path": "/project/analysis_scripts/17-stdanswer.py", "code": "# Import necessary libraries\nimport os\nimport pandas as pd\nimport statsmodels.api as sm\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    data = pd.read_excel(input_file)\n    \n    # Ensure all columns are numeric and check for NaN values.\n    if not np.issubdtype(data.dtypes, np.number).all() or data.isnull().values.any():\n        raise ValueError(\"All columns must be numeric and contain no missing values\")\n\n    return data\n\n\ndef add_lagged_dependent_variable(data, target_column):\n    # Add a one-period lag for the dependent variable and drop missing rows.\n    data[target_column + '_lag1'] = data[target_column].shift(1)\n    data.dropna(inplace=True)\n    \n    return data\n\n\ndef prepare_features_and_target(data, target_column, lags=[1]):\n    # Remove the first row and use lagged variables as features and current one as target.\n    X = data[[f'{target_column}_lag{i}' for i in lags]]\n    y = data[target_column].iloc[1:]\n    \n    return X, y\n\n\ndef build_logistic_model(X, y):\n    # Add a constant to the model (intercept).\n    X_with_const = sm.add_constant(X)\n    logit_model = sm.Logit(y, X_with_const).fit()\n    \n    return logit_model\n\n\ndef save_summary_to_excel(result, output_file):\n    summary_df = pd.DataFrame({\"coef\": result.params})\n    writer = pd.ExcelWriter(output_file, engine='xlsxwriter')\n    \n    # Write the logistic regression summary to an Excel sheet.\n    summary_df.to_excel(writer, sheet_name=\"Summary\")\n\n    writer.save()\n\n\ndef main(input_file=input_file, output_file=output_file):\n    \"\"\"\n    Execute all steps for logistic regression analysis.\n    \"\"\"\n    # Step 1: Read and validate data\n    data = read_and_validate_data(input_file)\n    \n    # Step 2: Add lagged dependent variable\n    target_column = 'Target'  # Adjust the actual column name as needed.\ndata_with_lags = add_lagged_dependent_variable(data, target_column)\n\n    # Step 3: Prepare features and target\n    X, y = prepare_features_and_target(data_with_lags, target_column)\n    \n    # Build the logistic model\n    logit_model_result = build_logistic_model(X, y)\n    print(logit_model_result.summary())\n    \n    # Save summary to Excel file\n    save_summary_to_excel(logit_model_result, output_file)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "requirements.txt", "path": "/project/dependencies/requirements.txt", "code": "pandas==1.4.2\nstatsmodels==0.13.5\nscikit-learn==1.0.2\nopenpyxl\nxlsxwriter"}, {"file": "README.md", "path": "/project/docs/README.md", "code": "# Logistic Regression Analysis Project\n\nThis project involves performing logistic regression analysis on game data.\n\n## Prerequisites\n- Python 3.x\n- Install required libraries using the provided `requirements.txt` file.\n\n```shell\npip install -r requirements.txt\n```\n\n## File Structure\n- **analysis_scripts/17-stdanswer.py**: Main script for logistic regression analysis.\n- **dependencies/requirements.txt**: List of required Python packages.\n- **docs/README.md**: This documentation file.\n\n## Running the Analysis\nRun the `17-stdanswer.py` using:\n```shell\npython /project/analysis_scripts/17-stdanswer.py\n```\nThe results will be saved in `Logistic.xlsx`. Make sure `Gamedata.xlsx` is present in your working directory."}], "19": [{"file": "01-main.py", "path": "project/root/main.py", "code": "#!/usr/bin/env python3\n\"\"\nMain execution script for generating a weekly deaths histogram.\n\"\"\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom data_validator import check_file_existence, validate_dataset\nfrom data_reader import read_dataset\nfrom data_preprocessor import preprocess_dataset\nfrom plotter import plot_weekly_deaths\n\n# Configuration\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef main():\n    \"\"\"\n    Main execution function to process the dataset and plot histogram.\n    \"\"\"\n    if not check_file_existence(input_file):\n        raise FileNotFoundError(f\"Input file {input_file} does not exist\")\n\n    df = read_dataset(input_file)\n    validate_dataset(df, required_columns)\n    df = preprocess_dataset(df)\n    weekly_deaths = df.groupby(df['Date of death'].dt.isocalendar().week).size()\n    plot_weekly_deaths(weekly_deaths, output_file)\n    print(f\"Histogram saved as '{output_file}'.\")\n\nif __name__ == '__main__':\n    try:\n        main()\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")"}, {"file": "02-data_reader.py", "path": "project/root/data_reader.py", "code": "\"\"\nData reading utilities.\n\"\"\ndef read_dataset(file_path):\n    \"\"\"\n    Read the dataset from a CSV file and return a DataFrame.\n    :param file_path: Path to the input CSV file.\n    :return: Pandas DataFrame containing the data.\n    :raises FileNotFoundError: If the file does not exist.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File {file_path} was not found\")\n\n    df = pd.read_csv(file_path)\n    return df"}, {"file": "03-data_validator.py", "path": "project/root/data_validator.py", "code": "\"\"\nData validation utilities.\n\"\"\ndef check_file_existence(file_path):\n    \"\"\"\n    Check if a file exists at the given file path.\n    :param file_path: Path to the file to check.\n    :return: True if the file exists, False otherwise.\n    \"\"\"\n    return os.path.exists(file_path)\n\ndef validate_dataset(df, required_columns):\n    \"\"\"\n    Validate that the dataset contains all required columns.\n    :param df: pandas DataFrame of the dataset.\n    :param required_columns: List of strings for required column names.\n    :raises ValueError: If any required column is missing.\n    \"\"\"\n    missing_cols = [col for col in required_columns if col not in df.columns]\n    if missing_cols:\n        raise ValueError(f\"Missing columns in the dataset: {', '.join(missing_cols)}\")"}, {"file": "04-data_preprocessor.py", "path": "project/root/data_preprocessor.py", "code": "\"\"\nData preprocessing utilities.\n\"\"\ndef preprocess_dataset(df):\n    \"\"\"\n    Preprocess the dataset, including cleaning and formatting dates.\n    :param df: pandas DataFrame of the dataset.\n    :return: Processed pandas DataFrame with formatted date column.\n    \"\"\"\n    if 'Date of death' not in df.columns:\n        raise KeyError(\"Required column 'Date of death' is missing\")\n\n    # Convert 'Date of death' to datetime format, ignoring errors in conversion\n    df['Date of death'] = pd.to_datetime(df['Date of death'], errors='coerce')\n    \n    # Drop rows where 'Date of death' couldn't be parsed\n    df.dropna(subset=['Date of death'], inplace=True)\n\n    return df"}, {"file": "05-plotter.py", "path": "project/root/plotter.py", "code": "\"\"\nPlotting utilities for the dataset.\n\"\"\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"\n    Plot the weekly deaths and save as a histogram image file.\n    :param weekly_deaths: Series with weekly counts of deaths.\n    :param output_file: File path to save the plot image.\n    \"\"\"\n    plt.figure(figsize=(10, 6))\n    weekly_deaths.plot(kind='bar')\n    plt.title('Weekly Deaths Histogram')\n    plt.xlabel('Weeks')\n    plt.ylabel('Number of Deaths')\n    plt.tight_layout()\n    plt.savefig(output_file)\n    plt.close()"}]}