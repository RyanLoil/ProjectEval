{"2": [{"file": "answer.__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "answer.models.py", "path": "example_app/models.py", "code": "# Placeholder for future model definitions\n"}, {"file": "answer.admin.py", "path": "example_app/admin.py", "code": "# Registering app models with the admin site will be handled here\n"}, {"file": "answer.apps.py", "path": "example_app/apps.py", "code": "\nfrom django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'\n"}, {"file": "answer.migrations/__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "answer.0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "\n# Generated by Django on YYYY-MM-DD HH:MM\n\nfrom django.db import migrations, models\n\ndef prepare(): pass # placeholder for creating migration dependencies if needed\n\nclass Migration(migrations.Migration):\n    initial = True\n    dependencies = [('auth', '0012_alter_user_first_name_max_length'), ('contenttypes', '0002_remove_content_type_name')]\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyPairExchangeRateHistoryDay',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('currency_pair', models.CharField(max_length=7)),\n                ('average_buy_rate', models.FloatField(null=True)),\n                ('average_sale_rate', models.FloatField(null=True)),\n                ('timestamp_open_day', models.TimeField(default=datetime.datetime.now)),\n                ('is_last_day_rates', models.BooleanField(default=False))\n            ]),\n    ]"}, {"file": "answer.__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "answer.asgi.py", "path": "example_project/asgi.py", "code": "\nimport os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\nasgi_application = get_asgi_application()\n"}, {"file": "answer.contrib.auth.urls", "path": "example_project/urls.py", "code": "\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', IncludeCurrencyURLConf.as_view(), name='home'),\n    path('trends/', IncludeTrendsURLConf.as_view(), name='exchange_rate_trends'),\n]\nclass IncludeCurrencyURLConf():\n    def as_view(self):\n        # return the URL view for currency\n        from example_app.views import ConvertCurrencyView\n        return ConvertCurrencyView().as_view()\n\nclass IncludeTrendsURLConf():\n    def as_view(self):\n        # return the URL view for trends\n        from example_app.views import ExchangeRateTrendsView\n        return ExchangeRateTrendsView().as_view()"}, {"file": "answer.settings.py", "path": "example_project/settings.py", "code": "\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "answer.urls.py", "path": "example_app/urls.py", "code": "\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('', include('example_app.views'))\n]"}, {"file": "answer.management/__init__.py", "path": "example_app/management/init__.py", "code": ""}, {"file": "answer.management/commands/generate_report.py", "path": "example_app/management/commands/generate_report.py", "code": "\nfrom django.core.management.base import BaseCommand\nimport datetime\n\nclass Command(BaseCommand):\n    help = 'Generates a report on exchange rate trends'\n\n    def handle(self, *args, **options):\n        self.stdout.write('Generating report...')\n        # Logic for report generation will go here\n"}, {"file": "answer.tests.py", "path": "example_app/tests.py", "code": "\nfrom django.test import TestCase\n# Placeholder for future tests.\n"}, {"file": "answer.wsgi.py", "path": "example_project/wsgi.py", "code": "\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "answer.__init__.py", "path": "home/kirilo/.local/share/virtualenvs/duetkqP-_/lib/python3.9/site-packages/__init__.py", "code": "# Dummy content for site-package init\n"}, {"file": "answer.asgi.py", "path": "example_project/asgi.py", "code": "\nimport os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\nasgi_application = get_asgi_application()\n"}, {"file": "answer.management/__init__.py", "path": "home/kirilo/.local/share/virtualenvs/duetkqP-_/lib/python3.9/site-packages/django/core/management/init__.py", "code": "# Management utility scripts\n"}, {"file": "answer.asgi.py", "path": "example_project/asgi.py", "code": "\nimport os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\nasgi_application = get_asgi_application()\n"}, {"file": "answer.converters.py", "path": "home/kirilo/.local/share/virtualenvs/duetkqP-_/lib/python3.9/site-packages/django/core/converters.py", "code": "# Django converters\n"}], "14": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        return render(request, 'hello_world.html', {\n            'title': 'Hello World'\n        })"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\nh1 {\n    color: #333;\n}"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ title }}</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <!-- This section displays the Hello World message to the user. -->\n    <h1 id=\"hello-message\" class=\"message\">Hello World</h1>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware'\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}], "16": [{"file": "16-stdanswer.py", "path": "src/processing/main.py", "code": "# Import necessary libraries\nimport os\nimport pandas as pd\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    Args:\n        file_path (str): The path to the file to check.\n    Returns:\n        bool: True if the file exists, False otherwise.\n    \"\"\"\n    return os.path.exists(file_path)\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format by checking its extension.\n    Args:\n        file_path (str): The path to the file to check.\n    Returns:\n        bool: True if the file has an .xlsx or .xls extension, False otherwise.\n    \"\"\"\n    return file_path.endswith((.xlsx, '.xls'))\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    Args:\n        df (DataFrame): The DataFrame to validate.\n    Returns\n        bool: True if valid, raises ValueError otherwise\n    \"\"\"\n    required_columns = ['Subject Code', 'Name', 'Department']\n    if not all(column in df.columns for column in required_columns):\n        raise ValueError('Missing one or more required columns.')\n    # Add any additional validation as necessary\n    return True\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    Args:\n        input_file (str): Path to the input Excel file.\n        output_file (str): Path for saving the processed Excel file.\n    \"\"\"\n    if not check_file_exists(input_file):\n        raise FileNotFoundError(f'File {input_file} does not exist.')\n\n    if not check_file_format(input_file):\n        raise ValueError('Input file is not in a recognized Excel format.')\n\n    df = pd.read_excel(input_file)\n    validate_data(df)\n\n    # Perform your processing logic here, e.g., cleaning or transforming data\n    processed_df = df  # Example - simply returns original dataframe without modification.\n\n    processed_df.to_excel(output_file, index=False)\n\ndef main():\n    \"\"\"\n    Main execution function which sets the input and output file paths.\n    Then invokes the processing functions.\n    \"\"\"\n    input_file = os.path.join(os.getcwd(), 'Spring Semester Subjects.xlsx')\n    output_file = os.path.join(os.getcwd(), 'Processed Subjects Table.xlsx')\n\n    process_subjects(input_file, output_file)\n\nif __name__ == '__main__':\n    main()", "id": 1}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas>=1.3.4\nopenpyxl>=3.0.9\n", "id": 2}], "17": [{"file": "17-stdanswer.py", "path": "src/17-stdanswer.py", "code": "# 17-stdanswer.py\nimport os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    '''Read the dataset and ensure all columns are numeric. Raise an error if any missing values (NaN) are found.'''\n    data = pd.read_excel(input_file)\n    if not all(data.applymap(np.isreal).all()):\n        raise ValueError(\"Non-numeric data present.\")\n    if data.isnull().values.any():\n        raise ValueError(\"Missing values detected.\")\n    return data\n\n\ndef add_lagged_dependent_variable(data, target_column):\n    '''Add a one-period lag for the dependent variable and drop missing rows.'''\n    data[target_column + '_lag'] = data[target_column].shift(1)\n    return data.dropna()\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    '''Prepare the feature matrix (X) and target vector (y).' ' \n    y = data[target_column]\n    X = data.drop(columns=[target_column]).dropna()\n    return X, y[X.index]   # Align indices of X and y after dropping NA\n\n\ndef build_logistic_model(X, y):\n    '''Build and fit a logistic regression model.'''\n    X = sm.add_constant(X)  # Adds a constant term to the predictor\n    logit_model = sm.Logit(y, X)\n    result = logit_model.fit()\n    return result\n\ndef save_summary_to_excel(result, output_file):\n    '''Save the logistic regression summary to an Excel file.'''\n    writer = pd.ExcelWriter(output_file, engine='xlsxwriter')\n    result.summary().to_excel(writer, sheet_name='Logistic Regression Summary')\n    writer.save()\n\n\ndef main(input_file, output_file):\n    '''Execute all steps to run the logistic regression analysis.'''\n    data = read_and_validate_data(input_file)\n    target_column = 'YourTarget'  # Replace with the actual column name if known\n    lagged_column = target_column + '_lag'\n    data = add_lagged_dependent_variable(data, target_column)\n    X, y = prepare_features_and_target(data, target_column, lagged_column)\n    result = build_logistic_model(X, y)\n    save_summary_to_excel(result, output_file)\n\nif __name__ == \"__main__\":\n    main(input_file, output_file)"}, {"file": "README.md", "path": "docs/README.md", "code": "# Logistic Regression Analysis Project\n\nThis project contains a script to perform logistic regression analysis on a dataset stored in an Excel file. The steps executed by the script include data validation, adding lagged dependent variables, preparing features and target matrices, building the logistic model, and exporting results.\n\n## Requirements\n- Python 3.x\n- Pandas\n- Statsmodels\n- XlsxWriter (for saving to Excel)\n\n## Usage\nRun the `17-stdanswer.py` script from the `src` directory:\n```\npython src/17-stdanswer.py\n```\nMake sure that `Gamedata.xlsx` is present in the working directory."}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas==2.0.1\nstatsmodels==0.14.0\nxlsxwriter"}]}