{"4": [{"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/settings/__init__.py", "code": ""}, {"file": "base.py", "path": "qr_code_generator/settings/base.py", "code": "# Django base settings for all environments\nimport os\nfrom pathlib import Path\n\ndef get_env_variable(var_name):\n    try:\n        return os.environ[var_name]\n    except KeyError:\n        error_msg = f\"Set the {var_name} environment variable\"\n        raise ImproperlyConfigured(error_msg)\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'qr_code_generator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'}\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "development.py", "path": "qr_code_generator/settings/development.py", "code": "from .base import *\n\nDEBUG = True\nSECRET_KEY = 'your_secret_key'\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS += [\n    # Add any local apps here\n]"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "qr_app/admin.py", "code": "from django.contrib import admin\n# Register your models here"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "models.py", "path": "qr_app/models.py", "code": "from django.db import models\n# Define your models here."}, {"file": "__init__.py", "path": "qr_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "qr_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\nclass Migration(migrations.Migration):\n    initial = True\n    \ndeferoptions=[]\noperations=[migrations.CreateModel(\n        name='YourModel',\n        fields=[\n            ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n            # add model fields here\n        ],\n    )]"}, {"file": "apps.py", "path": "qr_app/migrations/apps.py", "code": "from django.apps import AppConfig\nclass QrAppConfig(AppConfig):\n    name = 'qr_app'"}, {"file": "__init__.py", "path": "qr_app/tests/__init__.py", "code": ""}, {"file": "tests.py", "path": "qr_app/tests.py", "code": "from django.test import TestCase\n# Create your tests here."}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "qr_app/admin.py", "code": "from django.contrib import admin\n# Register your models here."}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "models.py", "path": "qr_app/models.py", "code": "from django.db import models\n# Define your models here."}, {"file": "__init__.py", "path": "qr_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "qr_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\nclass Migration(migrations.Migration):\n    initial = True\n    \ndeferoptions=[]\noperations=[migrations.CreateModel(\n        name='YourModel',\n        fields=[\n            ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n            # add model fields here\n        ],\n    )]"}, {"file": "apps.py", "path": "qr_app/migrations/apps.py", "code": "from django.apps import AppConfig\nclass QrAppConfig(AppConfig):\n    name = 'qr_app'"}, {"file": "__init__.py", "path": "qr_app/tests/__init__.py", "code": ""}, {"file": "tests.py", "path": "qr_app/tests.py", "code": "from django.test import TestCase\n# Create your tests here."}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.shortcuts import render\n# Create your views here.\ndef index(request):\n    return render(request, 'index.html', {'message': 'Hello world!'})"}, {"file": "__init__.py", "path": "templates/__init__.py", "code": ""}, {"file": "index.html", "path": "qr_app/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Django App</title>\n</head>\n<body>\n    <h1 id=\"message\">{{ message }}</h1>\n    <!-- Add additional HTML as needed -->\n    <noscript>You need to enable JavaScript to use this site.</noscript>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js\" integrity=\"sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9rvrLgS3mG1JpY\u201d crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js\" integrity=\"sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13\u201d crossorigin=\"anonymous\"></script>\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        Return a response that renders the 'hello_world.html' template with a context.\n        \"\"\"\n        return render(request, 'example_app/hello_world.html', {'message': 'Hello, World!'});"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\nh1 {\n    color: #333;\n}"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <!-- This section displays the Hello World message to the user. -->\n    <h1 class=\"hello-message\" id=\"hello\">{{ message }}</h1>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "16": [{"file": "16-stdanswer.py", "path": "project_root/16-stdanswer.py", "code": "# 16-stdanswer.py\nimport os\nimport pandas as pd\n\n# File paths\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"Processed Subjects Table.xlsx\"\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    return os.path.exists(file_path)\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format (.xlsx).\n    \"\"\"\n    _, ext = os.path.splitext(file_path)\n    return ext.lower() == '.xlsx'\n\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    Assume 'Subject' and 'Credits' are essential columns.\n    \"\"\"\n    required_columns = {'Subject', 'Credits'}\n    if not required_columns.issubset(df.columns):\n        return False\n    # Example validation: Check if 'Credits' is numeric\n    if not pd.api.types.is_numeric_dtype(df['Credits']):\n        return False\n    return True\n\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    Load input Excel file using pandas and perform processing.\n    \"\"\"\n    if check_file_exists(input_file) and check_file_format(input_file):\n        try:\n            df = pd.read_excel(input_file)\n            if validate_data(df):\n                # Example of processing: Filter subjects with credits > 3\n                processed_df = df[df['Credits'] > 3]\n                processed_df.to_excel(output_file, index=False)\n            else:\n                print(\"Data validation failed. Please check the input file.\")\n        except Exception as e:\n            print(f\"Error processing file: {e}\")\n    else:\n        print(\"Invalid or non-existent input file.\")\n\n\ndef main():\n    \"\"\"\n    Main execution function.\n    Executing the process with defined files.\n    \"\"\"\n    process_subjects(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "README.md", "path": "project_root/README.md", "code": "# Project Overview\n\nThis project contains scripts to process an Excel file containing subject data.\n## Files\n- `16-stdanswer.py`: Main script for processing the subject data.\n### Requirements\n- Python 3.x\n- Pandas library (`pip install pandas`)\n\n## Usage\n1. Place the input Excel file `Spring Semester Subjects.xlsx` in the project root directory.\n2. Run the script:\n   ```bash\n   python 16-stdanswer.py\n   ```\n\nThis will create an output Excel file named `Processed Subjects Table.xlsx`, which includes processed data based on predefined criteria."}]}