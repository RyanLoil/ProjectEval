{"3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and\nthat you've added it to your PYTHONPATH environment variable?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "password_generator/settings.py", "path": "password_generator/password_generator/settings.py", "code": "from pathlib import Path\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'django-insecure-+example-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app',  # Register the newly created app\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'password_generator.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'password_generator.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "password_generator/urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "# WSGI config for password_generator project.\nimport os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\napplication = get_wsgi_application()"}, {"file": "views.py", "path": "password_generator/app/views.py", "code": "# app/views.py\nimport random\nimport string\nfrom django.shortcuts import render, redirect\nfrom .models import PasswordHistory\n\ndef home(request):\n    return render(request, \"home.html\")\n\ndef generate_password(request):\n    characters = string.ascii_letters + string.digits + string.punctuation\n    length = request.POST.get('length', 12)\n    if 'repeat' in request.POST:\n        repeat_count = int(request.POST['repeat'])\n    else:\n        repeat_count = 1\n    for _ in range(repeat_count):\n        password = ''.join(random.choice(characters) for _ in range(int(length)))\n        history_entry = PasswordHistory(password=password)\n        history_entry.save()\n    return redirect('home')\ndef view_history(request):\n    history = PasswordHistory.objects.all()\n    return render(request, \"history.html\", {'history': history})"}, {"file": "models.py", "path": "password_generator/app/models.py", "code": "# app/models.py\nfrom django.db import models\nclass PasswordHistory(models.Model):\n    password = models.CharField(max_length=128)\n\n    def __str__(self):\n        return self.password"}, {"file": "urls.py", "path": "password_generator/app/urls.py", "code": "# app/urls.py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_password, name='generate_password'),\n    path('history/', views.view_history, name='view_history'),\n]"}, {"file": "admin.py", "path": "password_generator/app/admin.py", "code": "# app/admin.py\nfrom django.contrib import admin\nfrom .models import PasswordHistory\n\n@admin.register(PasswordHistory)\nclass PasswordHistoryAdmin(admin.ModelAdmin):\n    list_display = ['password']"}, {"file": "migrations/0001_initial.py", "path": "password_generator/app/migrations/0001_initial.py", "code": "# Generated by Django 3.x on YYYY-MM-DD at HH:MM\nfrom django.db import migrations, models\nclass Migration(migrations.Migration):\n    initial = True\n    dependencies = []\n    operations = [\n        migrations.CreateModel(\n            name='PasswordHistory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('password', models.CharField(max_length=128)),\n            ],\n        ),\n    ]"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1 class='main-title'>Password Generator</h1>\n    <form method='post' action='/generate/' id='password-form'>\n        {% csrf_token %}\n        Length: <input type='number' name='length' value='12'><br>\n        Include Repeat: \n            Yes: <input type=\"radio\" class='repeat-option' name='repeat' value='5'/>\n            No:<input type=\"radio\" class='repeat-option' checked id='no-repeat' name='repeat' value='1'/><br>\n        Passwords will be displayed below.<br>\n        <button type='submit'>Generate</button>\n    </form> \n</body>\n</html>"}, {"file": "history.html", "path": "templates/history.html", "code": "<!DOCTYPE html>\nP<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" id='charset'>\n   <title>Password History</title>\n</head>\n<body>    \n<h1 class='main-title'>Password</h1>\n\n{% if history %}\n    <table id='history-table'>\n        <tr>\n            <th>Passwords</th>\n        </tr>\n        {% for password in history %}\n        <tr>\n          <td id='password-{{forloop.counter}}'>{{ password.password }}</td>\n        </tr>\n        {% endfor %}\n    </table>\n{% else %}\n    <p>No passwords found.</p>\n{% endif %}\n\n</body>\n</html>"}], "15": [{"file": "manage.py", "path": "somepath/manage.py", "code": "// manage.py content\nimport os\nimport sys\nfrom django.core.management import execute_from_command_line\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.utils.version import get_version as get_django_version\n    except ImportError:\n        print('Failed to import Django.')\n        sys.exit(1)\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "somepath/somedir/mysite/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'somedir',  # Add your app here\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Template directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "somepath/somedir/mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(('somedir.urls', 'somedir'), namespace='somedir')),  # Include your app's urls here\n]"}, {"file": "views.py", "path": "somepath/somedir/somedir/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef hello_world(request):\n    return render(request, 'helloworld.html')"}, {"file": "urls.py (app)", "path": "somepath/somedir/somedir/urls.py", "code": "from django.urls import path\nfrom .views import home, hello_world\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', hello_world, name='hello_world'),\n]"}, {"file": "templates/home.html", "path": "somepath/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head><title>Home</title></head>\n<body>\n<h1 id=\"home-title\" class=\"homepage-heading\">Welcome to the Home Page</h1>\n<a id=\"hello-link\" href='{% url 'somedir:hello_world' %}' class=\"nav-link\">Go to HelloWorld</a>\n</body>\n</html>"}, {"file": "templates/helloworld.html", "path": "somepath/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head><title>HelloWorld</title></head>\n<body>\n<h1 id=\"hello-title\" class=\"helloworld-heading\">Hello, World!</h1>\n</body>\n</html>"}, {"file": "__init__.py", "path": "somepath/somedir/__init__.py", "code": "# Empty file to indicate directory is a Python package."}, {"file": "__init__.py (app)", "path": "somepath/somedir/somedir/__init__.py", "code": "# Empty file to indicate app directory is a Python package."}, {"file": "wsgi.py", "path": "somepath/somedir/mysite/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "somepath/somedir/mysite/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\napplication = get_asgi_application()"}], "16": [{"file": "app.py", "path": "src/app.py", "code": "#!/usr/bin/env python3\nimport os\nfrom validation.input_file_validation import InputFileValidation\nfrom transformation.data_transformation import DataTransformation\nfrom output.output_file_creation import OutputFileCreation\n\ndef main():\n    validator = InputFileValidation()\n    transformer = DataTransformation()\n    output_creator = OutputFileCreation()\n    \n    # Example file path; update as necessary.\n    input_filename = 'data/input.csv'\n    filename, ext = os.path.splitext(input_filename)\n\n    if not validator.check_file_existence(input_filename):\n        raise FileNotFoundError(f\"The file {input_filename} does not exist\")\n    \n    with open(input_filename, 'r') as file_handle:\n        if not validator.validate_headers(file_handle):\n            raise ValueError(\"Invalid headers in the input file.\")\n\n    import pandas as pd\n    dataframe = pd.read_csv(input_filename)\n\n    if not validator.validate_time_column(dataframe) or \\\n       not validator.validate_data_integrity(dataframe) or \\\n       not validator.validate_null_value(dataframe):\n        raise ValueError(\"Data validation failed.\")\n\n    dataframe = transformer.data_mapping(dataframe)\n    subjects_list = list(dataframe.columns)\n    two_dimension_df = transformer.transform_to_two_dimension_table(subjects_list)\n\n    output_filename = filename + '_output.xlsx'\n    output_creator.save_table_to_excel(two_dimension_df, output_filename)\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "input_validation.py", "path": "src/validation/input_file_validation.py", "code": "import os\nimport pandas as pd\nclass InputFileValidation:\n    def check_file_existence(self, filename):\n        return os.path.exists(filename)\n    \n    def validate_headers(self, file_handle):\n        headers = file_handle.readline().strip().split(',')\n        expected_headers = ['Time', 'Value1', 'Value2']  # Define expected headers\n        return headers == expected_headers\n    \n    def validate_time_column(self, dataframe):\n        return 'Time' in dataframe.columns and pd.api.types.is_datetime64_any_dtype(dataframe['Time'])\n    \n    def validate_data_integrity(self, dataframe):\n        return not dataframe.isnull().values.any()\n    \n    def validate_null_value(self, dataframe):\n        return dataframe.notna().all().all()"}, {"file": "data_transformation.py", "path": "src/transformation/data_transformation.py", "code": "import pandas as pd\nclass DataTransformation:\n    def transform_to_two_dimension_table(self, subjects_list):\n        # Simple example transformation: pivot table\n        return pd.DataFrame(index=subjects_list)\n    \n    def data_mapping(self, dataframe):\n        # Example of a simple mapping function (e.g., changing column names)\n        dataframe.columns = [col.upper() for col in dataframe.columns]\n        return dataframe"}, {"file": "output_file_creation.py", "path": "src/output/output_file_creation.py", "code": "import pandas as pd\nclass OutputFileCreation:\n    def create_output_excel_file(self):\n        pass\n    \n    def save_table_to_excel(self, dataframe, filename):\n        dataframe.to_excel(filename, index=False)"}]}