{"11": [{"file": "project_root/manage.py", "path": "/example_project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. \\n\\n\"\n            \"Did you forget to activate a virtual environment?\n\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "project_root/example_project/__init__.py", "path": "/example_project/example_project/__init__.py", "code": ""}, {"file": "project_root/example_project/settings.py", "path": "/example_project/example_project/settings.py", "code": "# settings.py\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = ['*'] \n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Your app name here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add template directory here\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "project_root/example_project/urls.py", "path": "/example_project/example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls'))\n]"}, {"file": "project_root/example_project/wsgi.py", "path": "/example_project/example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()"}, {"file": "project_root/example_app/__init__.py", "path": "/example_project/example_app/__init__.py", "code": ""}, {"file": "project_root/example_app/views.py", "path": "/example_project/example_app/views.py", "code": "from django.views.generic import TemplateView\n\nclass IndexView(TemplateView):\n    template_name = 'index.html'\n\nclass LoginView(TemplateView):\n    template_name = 'login.html'\n\nclass RegisterView(TemplateView):\n    template_name = 'register.html'"}, {"file": "project_root/example_app/models.py", "path": "/example_project/example_app/models.py", "code": "# models.py\nfrom django.db import models\n\nclass Profile(models.Model):\n    name = models.CharField(max_length=256, null=True)\n    bio = models.TextField(null=True)\n    \n    def __str__(self):\n        return self.name or \"\""}, {"file": "project_root/example_app/urls.py", "path": "/example_project/example_app/urls.py", "code": "from django.urls import path\nfrom .views import IndexView, LoginView, RegisterView\n\nurlpatterns = [\n    path('', IndexView.as_view(), name='index'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('register/', RegisterView.as_view(), name='register')\n]"}, {"file": "project_root/example_app/migrations/__init__.py", "path": "/example_project/example_app/migrations/__init__.py", "code": ""}, {"file": "project_root/templates/index.html", "path": "/example_project/templates/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Index Page</title>\n</head>\n<body>\n    <h1 id=\"app-header\">Welcome to the index page!</h1>\n    <!-- Content goes here -->\n\n    {{ content|safe }}\n</body>\n</html>"}, {"file": "project_root/templates/login.html", "path": "/example_project/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Login Page</title>\n</head>\n<body>\n    <h1 id=\"app-header\">Welcome to the login page!</h1>\n    <!-- Content goes here -->\n\n    {{ content|safe }}\n</body>\n</html>"}, {"file": "project_root/templates/register.html", "path": "/example_project/templates/register.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Register Page</title>\n</head>\n<body>\n    <h1 id=\"app-header\">Welcome to the register page!</h1>\n    <!-- Content goes here -->\n\n    {{ content|safe }}\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "views.py", "path": "myproject/example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "myproject/example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\nh1 {\n    color: #333;\n}"}, {"file": "hello_world.html", "path": "myproject/example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <!-- This section displays the Hello World message to the user. -->\n    <h1 id=\"hello-message\" class=\"greeting\">Hello, World!</h1>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'myproject.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'myproject.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "17": [{"file": "main.py", "path": "logistic_regression_project/logistic_analysis.py", "code": "import os\nimport pandas as pd\nimport statsmodels.api as sm\nfrom .data_validation import read_and_validate_data\nfrom .feature_preparation import add_lagged_dependent_variable, prepare_features_and_target\nfrom .model_building import build_logistic_model\nfrom .output_handling import save_summary_to_excel\n\ndef main(input_file='Gamedata.xlsx', output_file='Logistic.xlsx'):\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    data = read_and_validate_data(input_file)\n    data_with_lag = add_lagged_dependent_variable(data, 'target_column_name')\n    X, y = prepare_features_and_target(data_with_lag, 'target_column_name', 'Lagged_target_column_name')\n    model_result = build_logistic_model(X, y)\n    save_summary_to_excel(model_result, output_file)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "data_validation.py", "path": "logistic_regression_project/data_validation.py", "code": "import pandas as pd\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Read the dataset and ensure all columns are numeric.\n    Raise an error if any missing values (NaN) are found.\n    \"\"\"\n    data = pd.read_excel(input_file)\n    if not data.apply(pd.to_numeric, errors='ignore').select_dtypes(include=['float64', 'int']).equals(data):\n        raise ValueError('All columns must be numeric')\n    if data.isna().any().any():\n        raise ValueError('The dataset contains missing values.')\n    return data\n"}, {"file": "feature_preparation.py", "path": "logistic_regression_project/feature_preparation.py", "code": "def add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Add a one-period lag for the dependent variable and drop missing rows.\n    \"\"\"\n    data[f'l_{target_column}'] = data[target_column].shift(1)\n    return data.dropna()\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepare the feature matrix (X) and target vector (y).\n    \"\"\"\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n    return X, y\n"}, {"file": "model_building.py", "path": "logistic_regression_project/model_building.py", "code": "import statsmodels.api as sm\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Build and fit a logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)\n    return sm.Logit(y, X).fit()\n"}, {"file": "output_handling.py", "path": "logistic_regression_project/output_handling.py", "code": "import pandas as pd\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Save the logistic regression summary to an Excel file.\n    \"\"\"\n    with pd.ExcelWriter(output_file) as writer:\n        result.summary().as_latex().to_excel(writer)\n"}, {"file": "requirements.txt", "path": "logistic_regression_project/requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl\n"}]}