{"19": [{"file": "main.py", "path": "project_root/main.py", "code": "\nimport os\nfrom data_preparation import DataPreparation\nfrom data_processing import DataProcessing\nfrom data_analysis import DataAnalysis\nfrom visualization import Visualization\n\ndef main():\n    file_path = 'data/Deathlist.csv'\n    preparation = DataPreparation(file_path)\n    if preparation.check_if_dataset_exists():\n        df = preparation.read_csv_file()\n        if not df.empty:\n            processing = DataProcessing()\n            df['Date of death'] = processing.validate_date_format(df.get('Date of death', pd.Series(dtype='object')))\n            analysis = DataAnalysis(df.dropna(subset=['Date of death']))\n            counts = analysis.count_deaths_per_week()\n            if not counts.empty:\n                visualization = Visualization(counts)\n                visualization.generate_histogram()\n    else:\n        print(f\"Dataset {file_path} does not exist.\")"}, {"file": "data_preparation.py", "path": "project_root/data_preparation.py", "code": "\nimport os\nimport pandas as pd\n\nclass DataPreparation:\n    def __init__(self, file_path):\n        self.file_path = file_path\n    \n    def check_if_dataset_exists(self):\n        # Verify presence of 'Deathlist.csv'\n        return os.path.exists(self.file_path)\n    \n    def read_csv_file(self):\n        # Load CSV data ensuring correct formatting\n        if self.check_if_dataset_exists():\n            try:\n                return pd.read_csv(self.file_path, delimiter=',' , encoding='utf-8')\n            except Exception as e:\n                print(f\"Error reading file: {e}\")"}, {"file": "data_processing.py", "path": "project_root/data_processing.py", "code": "\nfrom datetime import datetime\nimport pandas as pd\n\nclass DataProcessing:\n    def __init__(self):\n        pass\n    \n    @staticmethod\n    def validate_date_format(date_series):\n        # Ensure valid date format in 'Date of death' column\n        try:\n            return pd.to_datetime(date_series, errors='raise')\n        except ValueError as e:\n            print(f\"Invalid date format: {e}\")"}, {"file": "data_analysis.py", "path": "project_root/data_analysis.py", "code": "\nclass DataAnalysis:\n    def __init__(self, df):\n        self.df = df\n    \n    def count_deaths_per_week(self):\n        # Calculate total deaths per week\n        if 'Date of death' in self.df.columns:\n            self.df['Date of death'] = pd.to_datetime(self.df['Date of death'])\n            self.df['Week Number'] = self.df['Date of death'].dt.isocalendar().week\n            return self.df.groupby('Week Number').size()"}, {"file": "visualization.py", "path": "project_root/visualization.py", "code": "\nimport matplotlib.pyplot as plt\n\nclass Visualization:\n    def __init__(self, counts):\n        self.counts = counts\n    \n    def generate_histogram(self):\n        # Create histogram for weekly deaths\n        plt.hist(self.counts.index, weights=self.counts.values)\n        plt.xlabel('Week Number')\n        plt.ylabel('Number of Deaths')\n        plt.title('Weekly Death Distribution')\n        plt.show()"}]}