{"5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        )\nexecute_from_command_line(sys.argv)"}, {"file": "apps/__init__.py", "path": "apps/__init__.py", "code": ""}, {"file": "apps/myapp/admin.py", "path": "apps/myapp/admin.py", "code": "# -*- coding: utf-8 -*-\nfrom django.contrib import admin\n\nclass MyModelAdmin(admin.ModelAdmin):\n    pass # your code here"}, {"file": "apps/myapp/ models.py", "path": "apps/myapp/models.py", "code": "# -*- coding: utf-8 -*-\nfrom django.db import models\nfrom django.utils import timezone\n\nclass MyModel(models.Model):\n    name = models.CharField(max_length=100)\n    created_at = models.DateTimeField(default=timezone.now)"}, {"file": "apps/myapp/tests.py", "path": "apps/myapp/tests.py", "code": "# -*- coding: utf-8 -*-\nfrom django.test import TestCase\nfrom .models import MyModel\n\ndef setUp(self): # your code here\n    pass\n\ndef test_mytest(self): # your code here\n    assert True"}, {"file": "apps/myapp/views.py", "path": "apps/myapp/views.py", "code": "# -*- coding: utf-8 -*-\nfrom django.shortcuts import render\nfrom .models import MyModel\n\ndef myview(request): # your code here\n    context = {\"x\":1}\n    return render(request, \"myapp/index.html\", context)"}, {"file": "apps/utils.py", "path": "apps/utils.py", "code": "# -*- coding: utf-8 -*-\n\n# your code here"}, {"file": "settings.py", "path": "settings.py", "code": "# -*- coding: utf-8 -*-\nfrom pathlib import Path\nimport os\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"yourproject.settings\")\ndjangoprojectdir = (lambda f: os.path.splitext(os.path.basename(__file__))[0] if __file__.endswith(f) else None)('.py') or Path(__file__).resolve().parent  # noqa\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"myapp\"  # your app here\n] # noqa"}, {"file": "templates/index.html", "path": "templates/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My Project</title>\n</head>\n<body>\n\t{{ x }} # your HTML here\n</body>\n</html>"}, {"file": "urls.py", "path": "urls.py", "code": "# -*- coding: utf-8 -*-\nfrom django.urls import path, include\nfrom .views import myview  # your views here\n\nurlpatterns = [\n    \"myapp/\".format(include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "wsgi.py", "code": "# -*- coding: utf-8 -*-\nimport os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"yourproject.settings\")\napplication = get_wsgi_application()"}], "7": [{"file": "settings.py", "path": "example_project/settings.py", "code": "from pathlib import Path\\n\\nBASE_DIR = Path(__file__).resolve().parent\\n\\nSECRET_KEY = 'django-insecure-2(j&3#!z5p_0=h)9@8i%r1t3b9m6-pw==-qy+3g7lf6@$h%o4'\\n\\nDEBUG = True\\n\\nALLOWED_HOSTS = ['*']\\n\\nINSTALLED_APPS = [\\n    'django.contrib.admin',\\n    'django.contrib.auth',\\n    'django.contrib.contenttypes',\\n    'django.contrib.sessions',\\n    'django.contrib.messages',\\n    'django.contrib.staticfiles',\\n]\\n\\nMIDDLEWARE = [\\n    'django.middleware.security.SecurityMiddleware',\\n    'whitenoise.middleware.WhiteNoiseMiddleware',\\n    'django.contrib.sessions.middleware.SessionMiddleware',\\n    'django.middleware.common.CommonMiddleware',\\n    'django.middleware.csrf.CsrfViewMiddleware',\\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\\n    'django.contrib.messages.middleware.MessageMiddleware',\\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\\n]\\n\\nROOT_URLCONF = 'example_project.urls'\\n\\nTEMPLATES = [\\n    {\\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\\n        'DIRS': [],\\n        'APP_DIRS': True,\\n        'OPTIONS': {\\n            'context_processors': [\\n                'django.template.context_processors.debug',\\n                'django.template.context_processors.request',\\n                'django.contrib.auth.context_processors.auth',\\n                'django.contrib.messages.context_processors.messages',\\n            ],\\n        },\\n    },\\n]\\n\\nWSGI_APPLICATION = 'example_project.wsgi.application'\\n\\n# Database\\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\\n\\nDATABASES = {\\n    'default': {\\n        'ENGINE': 'django.db.backends.sqlite3',\\n        'NAME': BASE_DIR / 'db.sqlite3',\\n    },\\n}\\n\\n# Password validation\\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\\n\\nAUTH_PASSWORD_VALIDATORS = [\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\\n    },\\n    {\\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\\n    },\\n]\\n\\n# Internationalization\\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\\n\nLANGUAGE_CODE = 'en-us'\\n\\nTIME_ZONE = 'UTC'\\n\\nUSE_I18N = True\\n\\nUSE_L10N = True\\n\\nUSE_TZ = False\\n\\n# Static files (CSS, JavaScript, Images)\\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/example_app/urls.py", "code": "from django.urls import path, include\\n\\nurlpatterns = [\\n    # path('', HomePageView.as_view()),\\n]"}, {"file": "views.py", "path": "example_project/example_app/views.py", "code": "from django.shortcuts import render\\n\\n# Create your views here.\\r\\n"}], "10": [{"file": "__init__.py", "path": "project_name/__init__.py"}, {"file": "manage.py", "path": "project_name/manage.py"}, {"file": "settings.py", "path": "project_name/settings.py"}, {"file": "urls.py", "path": "project_name/urls.py"}, {"file": "wsgi.py", "path": "project_name/wsgi.py"}, {"file": "myapp/models.py", "path": "project_name/myapp/models.py"}, {"file": "myapp/views.py", "path": "project_name/myapp/views.py"}, {"file": "myapp/templates/index.html", "path": "project_name/myapp/templates/index.html"}, {"file": "myapp/static/css/styles.css", "path": "project_name/myapp/static/css/styles.css"}], "20": [{"file": "settings.py", "path": "config/settings/common.py", "code": "import os\nfrom django.conf import settings\nif settings.DEBUG:\nsettings.DATABASES['default'] = dj_database_url.config(conn_max_age=600, ssl_require=True)\ndjango_heroku.settings(locals()),\n\nINSTALLED_APPS = [\n'django.contrib.admin',\n'django.contrib.auth',\n'django.contrib.contenttypes',\n'django.contrib.sessions',\n'django.contrib.messages',\n'django.contrib.staticfiles',\n'blog',\n]\n\nMIDDLEWARE = [\n'django.middleware.security.SecurityMiddleware',\n'whitenoise.middleware.WhiteNoiseMiddleware',\n'django.contrib.sessions.middleware.SessionMiddleware',\n'django.middleware.common.CommonMiddleware',\n'django.middleware.csrf.CsrfViewMiddleware',\n'django.contrib.auth.middleware.AuthenticationMiddleware',\n'django.contrib.messages.middleware.MessageMiddleware',\n'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'djangoblog.urls'\n\nTEMPLATES = [\n{\n'BACKEND': 'django.template.backends.django.DjangoTemplates',\n'DIRS': [],\n'APP_DIRS': True,\n'OPTIONS': {\n'context_processors': [ \n'django.template.context_processors.debug',\n'django.template.context_processors.request',\n'django.contrib.auth.context_processors.auth',\n'django.contrib.messages.context_processors.messages',\n],\n},\n},\n]\n\nWSGI_APPLICATION = 'djangoblog.wsgi.application'\n\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path, include\ndjango from blog import views\nurlpatterns = [\n    path('blog/', include(post_list, {posts: 'Post'})\n]\n\npagination = PageNumberPagination()\n\nsame_url = 'https://stackoverflow.com/questions/48015675/heroku-django-app-cannot-find-static-assets'\nsome_list = ['apple', 'banana'\n]\ndef createview(request): same_url, some_list = request.GET.get('same_url'), request.GET.get('some_list')\nif SameUrlPostView.objects.filter(url=same_url).exist():\nsame_post = SameUrlPostView.objects.get(url=same_url)\n    context = {'form': same_post}\nelse:\nsame_post = SameUrlPostForm(request.POST)#save post to database\n\ndrawables = Drawable.objects.filter(drawing = post.drawing)\ndownloaded = DownloadedFile.objects.filter(file = DownloadFile.objects.get(name = 'some_name'))\nif not downloading.exists():\nsame_post.downloaded = downloaded\ncontext = {'form': same_post}\nelse:\nsame_post = SameUrlPostForm(request.POST)#save post to database\nreturn render(request, 'sameurl.html', context)}}\n"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render_to_response\ndef post_createview(request): same_url = request.GET.get('same_url')if SameUrlPostView.objects.filter(url=same_url).exists():\nsame_post = SameUrlPostView.objects.get(url=same_url)\n    context = {'form': same_post}\nelse:\nsame_post = post#save post to database\n    context = {'form': {'downloaded': downloaded}}  return render_to_response('sameurl.html',context) }\n"}]}