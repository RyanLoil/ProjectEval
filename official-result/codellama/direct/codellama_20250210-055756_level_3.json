{"2": [{"file": "requirements.txt", "path": "requirements/base.txt", "code": "django==3.2\npsycopg2\n"}, {"file": "settings.py", "path": "mysite/settings.py", "code": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'index.html')\n\ndef exchange_rate_trends(request):\n    return render(request, 'exchange_rate_trends.html')\n"}, {"file": "db.py", "path": "mysite/db.py", "code": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n"}, {"file": "templates/index.html", "path": "mysite/template/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n</head>\n<body>\n    <h1>Home Page</h1>\n    <p>Welcome to the home page of my website.</p>\n</body>\n</html>"}, {"file": "templates/exchange_rate_trends.html", "path": "mysite/template/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n</head>\n<body>\n    <h1>Exchange Rate Trends Page</h1>\n    <p>Welcome to the exchange rate trends page of my website.</p>\n</body>\n</html>"}, {"file": "mysite/__init__.py", "path": "mysite/__init__.py", "code": ""}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\nfrom django.core.management import execute_manager\nexecute_manager(argv=sys.argv)"}, {"file": ".gitignore", "path": "", "code": "*.pyc\n__pycache__/\n"}], "3": [{"file": "settings.py", "path": "password_generator/settings.py", "code": "from django.contrib import admin\\nfrom django.urls import path, include\\n\\nurlpatterns = [\\n    path('admin/', admin.site.urls),\\n    path('', include('example_app.urls')),\\n]"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "", "path": "password_ generator/urls.py ", " code": " from django.contrib import admin\\nfrom django.urls import path, include\\n\\nurlpatterns = [\\n    path('admin/', admin.site.urls),\\n    path('', include('example_app.urls')),\\n]"}], "9": [{"file": "settings.py", "path": "/path/to/project/settings.py", "code": "from django.conf import settings\n\nclass Development(object):\n    DEBUG = True\n    ALLOWED_HOSTS = []\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.sqlite3',\n            'NAME': os.path.join(os.path.dirname(__file__), 'db.sqlite3')\n        }\n    }\n\nclass Production(object):\n    DEBUG = False\n    ALLOWED_HOSTS = ['allowed-host']\n\n    DATABASES = {\n        'default': {\n            'ENGINE': 'django.db.backends.mysql',\n            'NAME': 'database_name',\n            'USER': 'username',\n            'PASSWORD': 'password',\n            'HOST': 'localhost',\n            'PORT': '3306'\n        }\n    }\n"}, {"file": "urls.py", "path": "/path/to/project/urls.py", "code": "from django.conf.urls import url\nfrom django.urls import path, include\nfrom .views import home_view\n\ndefault_urlpatterns = [path('', home_view, name='home')]\n"}, {"file": "views.py", "path": "/path/to/project/views.py", "code": "from django.shortcuts import render\nfrom .models import User\n\ndef home_view(request):\n    users = User.objects.all()\n    return render(request, 'home.html', {'users': users})\n"}, {"file": "urls.py", "path": "/path/to/project/templates/urls.py", "code": "from django.conf.urls import url\n\nurlpatterns = [path('', HomeView.as_view(), name='home')]\n"}, {"file": "models.py", "path": "/path/to/project/models.py", "code": "from django.db import models\n\nclass User(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n"}, {"file": "views.py", "path": "/path/to/project/templates/views.py", "code": "from django.shortcuts import render\nfrom .models import User\n\ndef home_view(request):\n    users = User.objects.all()\n    return render(request, 'home.html', {'users': users})\n"}, {"file": "templates/home.html", "path": "/path/to/project/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Home</title>\n  </head>\n  <body>\n    <h1>Home</h1>\n    <ul>\n      {% for user in users %}\n        <li><a href=\"{{ user.get_absolute_url }}\">{{ user.name }}</a></li>\n      {% empty %}\n        <li>No user found.</li>\n      {% endfor %}\n    </ul>\n  </body>\n</html>"}, {"file": ".gitignore", "path": "/path/to/.gitignore", "code": "*\n!.gitignore"}], "16": [{"file": "16-stdanswer.py", "path": "16-stdanswer.py", "code": "import os\nimport pandas as pd\n\n# File paths\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"Processed Subjects Table.xlsx\"\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    pass\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format.\n    \"\"\"\n    pass\n\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    \"\"\"\n    pass\n\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    \"\"\"\n    pass\n\n\ndef main():\n    \"\"\"\n    Main execution function.\n    \"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    main()"}], "19": [{"file": "19-stdanswer.py", "path": "19/19-stdanswer.py", "code": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"Check if a file exists at the given file path.\"\"\"\n    pass\n\n\ndef read_dataset(file_path):\n    \"\"\"Read the dataset from a CSV file and return a DataFrame.\"\"\"\n    pass\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"Validate that the dataset contains all required columns.\"\"\"\n    pass\n\n\ndef preprocess_dataset(df):\n    \"\"\"Preprocess the dataset, including cleaning and formatting dates.\"\"\"\n    pass\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"Plot the weekly deaths and save as a histogram image file.\"\"\"\n    pass\n\n\ndef main():\n    \"\"\"Main execution function to process the dataset and plot the histogram.\"\"\"\n    try:\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()"}], "20": [{"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Question(models.Model):\n    text = models.CharField(max_length=200)\n\nclass Choice(models.Model):\n    question = models.ForeignKey(Question, on_delete=models.CASCADE)\n    text = models.CharField(max_length=50)"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .models import Question, Choice\n\ndef home(request):\n    latest_question_list = Question.objects.order_by('-created_at')[:5]\n    context = {'latest_question_list': latest_question_list}\n    return render(request, 'polls/home.html', context)\n\ndef detail(request, question_id):\n    question = Question.objects.get(pk=question_id)\n    return render(request, 'polls/detail.html', {'question': question})"}, {"file": "templates", "path": "example_app/templates", "code": "<html><head></head>\n<body>\n  <h1>{% block title %}{{ latest_question_list.0.text }}{% endblock %}</h1>\n\n  {% for question in latest_question_list %}\n    <p>{{ question.text }}</p>\n\n    <a href=\"{% url 'polls:detail' question.id %}\">View Poll</a>\n  {% endfor %}\n\n</body></html>"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [path('polls/', views.home, name='home'),"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}]}