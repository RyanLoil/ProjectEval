{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# No specific models are strictly required for this simple calculator, \n# but you could add one to store calculation history if desired.\n# Example (optional):\nclass BMICalculation(models.Model):\n    weight = models.FloatField()\n    weight_unit = models.CharField(max_length=3)  # kg, lbs\n    height = models.FloatField()\n    height_unit = models.CharField(max_length=5) # cm, in, ft-in\n    bmi = models.FloatField()\n    category = models.CharField(max_length=20)\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"BMI: {self.bmi} ({self.category}) - {self.timestamp}\""}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    WEIGHT_UNIT_CHOICES = [\n        ('kg', 'Kilograms (kg)'),\n        ('lbs', 'Pounds (lbs)'),\n    ]\n    HEIGHT_UNIT_CHOICES = [\n        ('cm', 'Centimeters (cm)'),\n        ('in', 'Inches (in)'),\n        ('ft-in', 'Feet and Inches (ft-in)'),\n    ]\n\n    weight = forms.FloatField(label='Weight', widget=forms.NumberInput(attrs={'placeholder': 'Enter weight', 'id': 'weight-input', 'class': 'weight-field'}))\n    weight_unit = forms.ChoiceField(label='Weight Unit', choices=WEIGHT_UNIT_CHOICES, initial='kg', widget=forms.Select(attrs={'id': 'weight-unit-select', 'class': 'weight-unit-field'}))\n    height = forms.FloatField(label='Height (cm/in)', required=False, widget=forms.NumberInput(attrs={'placeholder': 'Enter height', 'id': 'height-input', 'class': 'height-field'}))\n    height_feet = forms.IntegerField(label='Height (feet)', required=False, widget=forms.NumberInput(attrs={'placeholder': 'Feet', 'id': 'height-feet-input', 'class': 'height-feet-field'}))\n    height_inches = forms.FloatField(label='Height (inches)', required=False,  widget=forms.NumberInput(attrs={'placeholder': 'Inches', 'id': 'height-inches-input', 'class': 'height-inches-field'}))\n    height_unit = forms.ChoiceField(label='Height Unit', choices=HEIGHT_UNIT_CHOICES, initial='cm', widget=forms.Select(attrs={'id': 'height-unit-select', 'class': 'height-unit-field'}))\n\n\n    def clean(self):\n        cleaned_data = super().clean()\n        height_unit = cleaned_data.get('height_unit')\n        height = cleaned_data.get('height')\n        height_feet = cleaned_data.get('height_feet')\n        height_inches = cleaned_data.get('height_inches')\n\n        if height_unit == 'ft-in':\n            if height_feet is None or height_inches is None:\n                raise forms.ValidationError(\"Both feet and inches are required for ft-in.\")\n            if not isinstance(height_feet, int) or height_feet < 0:\n                raise forms.ValidationError('Feet must be non-negative integer.')\n            if not (isinstance(height_inches,float) or isinstance(height_inches, int))  or height_inches < 0:\n                 raise forms.ValidationError('Inches must be a non-negative number.')\n        elif height_unit in ('cm','in'):\n            if height is None:\n                 raise forms.ValidationError(\"Height is required for cm or in.\")\n            if not (isinstance(height,float) or isinstance(height, int))  or height < 0:\n                 raise forms.ValidationError('Height must be a non-negative number.')\n\n\n        weight = cleaned_data.get('weight')\n        if not (isinstance(weight, int) or isinstance(weight, float)) or weight <=0:\n            raise forms.ValidationError(\"Weight must be a positive number.\")\n        return cleaned_data"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\nimport json\n\ndef calculate_bmi(weight, weight_unit, height, height_unit):\n    \"\"\"Calculates BMI and category.\"\"\"\n    try:\n        # Convert weight to kg\n        if weight_unit == 'lbs':\n            weight_kg = weight * 0.453592\n        else:\n            weight_kg = weight\n\n        # Convert height to meters\n        if height_unit == 'cm':\n            height_m = height / 100\n        elif height_unit == 'in':\n            height_m = height * 0.0254\n        elif height_unit == 'ft-in':\n            height_m = (height[0] * 0.3048) + (height[1] * 0.0254)  #height is a tuple (feet, inches)\n        else:\n            return None, None\n        \n        bmi = weight_kg / (height_m ** 2)\n        bmi = round(bmi,2)\n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif bmi < 25:\n            category = 'Normal weight'\n        elif bmi < 30:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n        return bmi, category\n    except (TypeError, ValueError):\n        return None, None\n\ndef bmi_calculator_view(request):\n    form = BMICalculatorForm()\n    bmi_result = None\n    bmi_category = None\n    error_message = None\n\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            weight_unit = form.cleaned_data['weight_unit']\n            height_unit = form.cleaned_data['height_unit']\n\n            if height_unit == 'ft-in':\n                height = (form.cleaned_data['height_feet'],form.cleaned_data['height_inches'])\n            else:\n                height = form.cleaned_data['height']\n\n            bmi_result, bmi_category = calculate_bmi(weight, weight_unit, height, height_unit)\n\n            if bmi_result is None:\n                 error_message = \"Invalid input values.\"\n\n    context = {\n        'form': form,\n        'bmi_result': bmi_result,\n        'bmi_category': bmi_category,\n        'error_message': error_message\n    }\n    return render(request, 'bmi_calculator/bmi_calculator.html', context)"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'bmi_calculator'\n\nurlpatterns = [\n    path('', views.bmi_calculator_view, name='bmi_calculator'),\n]"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1 id=\"main-heading\" class=\"heading\">BMI Calculator</h1>\n    <form method=\"post\" id=\"bmi-form\" class=\"bmi-form\">\n        {% csrf_token %}\n          <div id=\"weight-container\" class=\"input-group\">\n            {{ form.weight.label_tag }}\n            {{ form.weight }}\n            {{ form.weight_unit }}\n          </div>\n            {% if form.weight.errors %}\n                <div style=\"color:red\" id=\"weight-error\" class=\"error-message\">{{form.weight.errors}}</div>\n            {% endif %}\n\n        <div id=\"height-container\" class=\"input-group\">\n          <label id=\"height-label\">Height:</label>\n          {{form.height}} {{form.height_unit}}\n          <div id=\"height_ft_in\" style=\"display: none;\" class=\"height-ft-in-group\">\n             {{form.height_feet}} ft {{form.height_inches}} in\n          </div>\n           {% if form.height.errors or form.height_feet.errors or form.height_inches.errors %}\n             <div style=\"color:red\" id=\"height-error\" class=\"error-message\">\n                {% if form.height_unit.value == 'ft-in' %}\n                    {{form.height_feet.errors}}\n                    {{form.height_inches.errors}}\n                {% else %}\n                    {{form.height.errors}}\n                {% endif %}\n             </div>\n           {% endif %}\n\n        </div>\n\n        <button type=\"submit\" id=\"calculate-button\" class=\"submit-button\">Calculate BMI</button>\n    </form>\n\n    {% if bmi_result %}\n        <p id=\"bmi-result\" class=\"result\">Your BMI is: {{ bmi_result }}</p>\n        <p id=\"bmi-category\" class=\"result\">Category: {{ bmi_category }}</p>\n    {% endif %}\n\n    {% if error_message %}\n      <p style=\"color:red\" id=\"error-message\" class=\"error-message\">Error: {{ error_message }}</p>\n    {% endif %}\n\n\n<script>\n  const heightUnitSelect = document.querySelector(\"#id_height_unit\");\n  const heightFtInDiv = document.querySelector(\"#height_ft_in\");\n  const heightInput = document.querySelector(\"#id_height\");\n  const heightLabel = document.querySelector(\"#height-label\");\n\n\n  function updateHeightFields(){\n    if (heightUnitSelect.value === 'ft-in'){\n        heightFtInDiv.style.display = 'block';\n        heightInput.required = false;\n        heightLabel.textContent = 'Height:'\n    } else {\n        heightFtInDiv.style.display = 'none';\n        heightInput.required = true;\n\n       if (heightUnitSelect.value === 'cm'){\n          heightLabel.textContent = 'Height (cm)'\n       } else{\n          heightLabel.textContent = 'Height (in)'\n       }\n    }\n  }\n\n  heightUnitSelect.addEventListener('change',updateHeightFields);\n\n  // Initial setup on page load.\n  updateHeightFields();\n\n</script>\n</body>\n</html>"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('bmi/', include('bmi_calculator.urls', namespace='bmi_calculator')),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'fake-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = 'static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "\"\"\"\nWSGI config for project project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "\"\"\"\nASGI config for project project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass Currency(models.Model):\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.code\n\nclass ExchangeRate(models.Model):\n    base_currency = models.ForeignKey(Currency, related_name='base_rates', on_delete=models.CASCADE)\n    target_currency = models.ForeignKey(Currency, related_name='target_rates', on_delete=models.CASCADE)\n    rate = models.DecimalField(max_digits=15, decimal_places=6)\n    timestamp = models.DateTimeField(auto_now=True)  # Automatically updates on every save\n\n    class Meta:\n        unique_together = ('base_currency', 'target_currency', 'timestamp') #ensure we do not have duplicate at the same time\n        ordering = ['-timestamp']\n\n    def __str__(self):\n        return f'{self.base_currency}/{self.target_currency} - {self.rate}'\n\nclass HistoricalExchangeRate(models.Model):\n    base_currency = models.ForeignKey(Currency, related_name='base_historical_rates', on_delete=models.CASCADE)\n    target_currency = models.ForeignKey(Currency, related_name='target_historical_rates', on_delete=models.CASCADE)\n    rate = models.DecimalField(max_digits=15, decimal_places=6)\n    timestamp = models.DateTimeField()\n\n    class Meta:\n       unique_together = ('base_currency', 'target_currency', 'timestamp')\n       ordering = ['-timestamp']"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import JsonResponse\nfrom .models import Currency, ExchangeRate, HistoricalExchangeRate\nfrom django.core.exceptions import ValidationError\nfrom django.utils import timezone\nimport datetime\n\ndef home(request):\n    currencies = Currency.objects.all()\n    last_updated = ExchangeRate.objects.first().timestamp if ExchangeRate.objects.exists() else None\n\n    context = {\n        'currencies': currencies,\n        'last_updated': last_updated,\n    }\n    return render(request, 'currency_converter/home.html', context)\n\ndef convert_currency(request):\n    if request.method == 'POST':\n        try:\n            base_currency_code = request.POST.get('base_currency')\n            target_currency_code = request.POST.get('target_currency')\n            amount_str = request.POST.get('amount')\n\n            amount = float(amount_str)\n\n            base_currency = Currency.objects.get(code=base_currency_code)\n            target_currency = Currency.objects.get(code=target_currency_code)\n\n            exchange_rate = ExchangeRate.objects.filter(base_currency=base_currency, target_currency=target_currency).first()\n\n            if exchange_rate:\n                converted_amount = amount * exchange_rate.rate\n                return JsonResponse({'converted_amount': converted_amount, 'exchange_rate': exchange_rate.rate, 'success':True})\n            else:\n                return JsonResponse({'error': 'Exchange rate not found.', 'success':False}, status=404)\n\n        except (ValueError, TypeError):\n            return JsonResponse({'error': 'Invalid input. Please enter a valid number.', 'success':False}, status=400)\n        except Currency.DoesNotExist:\n            return JsonResponse({'error': 'Currency not found.', 'success':False}, status=404)\n        except Exception as e:\n            return JsonResponse({'error':str(e), 'success':False}, status =500)\n\n    return JsonResponse({'error': 'Invalid Request', 'success': False}, status=400)\n\ndef get_historical_data(request):\n\n    base_currency_code = request.GET.get('base_currency')\n    target_currency_code = request.GET.get('target_currency')\n    time_range = request.GET.get('time_range', '1w') # default 1 week\n\n    try:\n        base_currency = Currency.objects.get(code=base_currency_code)\n        target_currency = Currency.objects.get(code=target_currency_code)\n\n        end_date = timezone.now()\n        if time_range == '1w':\n            start_date = end_date - datetime.timedelta(weeks=1)\n        elif time_range == '1m':\n            start_date = end_date - datetime.timedelta(days=30)\n        elif time_range == '1y':\n            start_date = end_date - datetime.timedelta(days=365)\n        else:\n            return JsonResponse({'error': 'Invalid time range.'}, status=400)\n\n\n        historical_data = HistoricalExchangeRate.objects.filter(\n            base_currency=base_currency,\n            target_currency=target_currency,\n            timestamp__range=[start_date, end_date]\n        ).values('timestamp', 'rate')\n\n        # Convert Decimal to float for JSON serialization and format timestamp\n        formatted_data = [{\n            'timestamp': entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S'),\n            'rate': float(entry['rate']) #important for json serialization\n             } for entry in historical_data]\n\n        return JsonResponse({'historical_data': formatted_data})\n\n\n    except Currency.DoesNotExist:\n        return JsonResponse({'error': 'Currency not found.'}, status=404)\n    except Exception as e:\n        return JsonResponse({'error': str(e)}, status=500)\n\ndef swap_currencies(request):\n  if request.method == 'POST':\n    base_currency = request.POST.get('base_currency')\n    target_currency = request.POST.get('target_currency')\n    return JsonResponse({'base_currency': target_currency, 'target_currency': base_currency})\n  return JsonResponse({'error':'Invalid method.'}, status=400)"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert_currency, name='convert_currency'),\n    path('historical/', views.get_historical_data, name='get_historical_data'),\n    path('swap/', views.swap_currencies, name='swap_currencies')\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "# forms.py -  We will use basic HTML forms and handle in views, no need for complex Django forms.\n# This file can be kept empty or used if custom validation/form logic is *really* needed later."}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency, ExchangeRate, HistoricalExchangeRate\n\nadmin.site.register(Currency)\nadmin.site.register(ExchangeRate)\nadmin.site.register(HistoricalExchangeRate)"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Currency Converter</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1 id=\"main-heading\" class=\"main-heading\">Currency Converter</h1>\n\n    <label for=\"base_currency\">Base Currency:</label>\n    <select id=\"base_currency\" name=\"base_currency\" class=\"currency-select\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select>\n\n    <label for=\"target_currency\">Target Currency:</label>\n    <select id=\"target_currency\" name=\"target_currency\" class=\"currency-select\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select>\n\n    <button type=\"button\" id=\"swap_button\" class=\"swap-button\">Swap</button><br><br>\n\n    <label for=\"amount\">Amount:</label>\n    <input type=\"text\" id=\"amount\" name=\"amount\" value=\"1.00\" class=\"amount-input\"><br><br>\n    <div id=\"error_message\" class=\"error-message\" style=\"color:red\"></div>\n\n    <button type=\"button\" id=\"convert_button\" class=\"convert-button\">Convert</button><br><br>\n\n    <label>Converted Amount:</label>\n    <span id=\"converted_amount\" class=\"result-text\"></span><br>\n\n    <label>Exchange Rate:</label>\n    <span id=\"exchange_rate\" class=\"result-text\"></span><br><br>\n\n    <label>Last Updated:</label>\n    <span id=\"last_updated\" class=\"result-text\">{% if last_updated %}{{ last_updated }}{% else %}Never{% endif %}</span><br><br>\n    <div>\n        <label for=\"time_range\">Time Range:</label>\n        <select id=\"time_range\" class=\"time-range-select\">\n            <option value=\"1w\">1 Week</option>\n            <option value=\"1m\">1 Month</option>\n            <option value=\"1y\">1 Year</option>\n        </select>\n    </div>\n    <canvas id=\"historicalChart\" class=\"historical-chart\" width=\"400\" height=\"200\"></canvas>\n\n    <script>\n\n     function updateHistoricalChart(baseCurrency, targetCurrency, timeRange) {\n        fetch(`/historical/?base_currency=${baseCurrency}&target_currency=${targetCurrency}&time_range=${timeRange}`)\n        .then(response => {\n           if(!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n           }\n           return response.json();\n        })\n        .then(data => {\n            if(data.error) {\n              alert(data.error);\n              return\n            }\n            const ctx = document.getElementById('historicalChart').getContext('2d');\n            if (window.myChart  instanceof Chart) {\n                window.myChart.destroy();\n            }\n            window.myChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: data.historical_data.map(item => item.timestamp),\n                    datasets: [{\n                        label: 'Exchange Rate',\n                        data: data.historical_data.map(item => item.rate),\n                        borderColor: 'blue',\n                        fill: false\n                    }]\n                },\n                options: {\n                    scales:{\n                      x:{\n                        type: 'time',\n                        time:{\n                          tooltipFormat: 'll HH:mm'\n                        }\n                      }\n                    }\n                }\n            });\n        })\n        .catch(error => {\n            console.error('Error fetching historical data:', error);\n            alert('Failed to fetch historical data.');\n        });\n    }\n\n\n\n        document.getElementById('convert_button').addEventListener('click', function() {\n            const baseCurrency = document.getElementById('base_currency').value;\n            const targetCurrency = document.getElementById('target_currency').value;\n            const amount = document.getElementById('amount').value;\n            const timeRange = document.getElementById('time_range').value;\n            document.getElementById('error_message').textContent = ''; //clear error message\n\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token\n                },\n                body: `base_currency=${baseCurrency}&target_currency=${targetCurrency}&amount=${amount}`\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                   document.getElementById('converted_amount').textContent = data.converted_amount.toFixed(2);\n                   document.getElementById('exchange_rate').textContent = data.exchange_rate;\n\n                } else{\n                  document.getElementById('error_message').textContent = data.error;\n                }\n                updateHistoricalChart(baseCurrency, targetCurrency, timeRange);\n\n            });\n        });\n\n      document.getElementById('swap_button').addEventListener('click', function(){\n        const baseCurrency = document.getElementById('base_currency');\n        const targetCurrency = document.getElementById('target_currency');\n        const timeRange = document.getElementById('time_range').value;\n        const baseCurrencyValue = baseCurrency.value;\n\n        fetch('/swap/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'X-CSRFToken': getCookie('csrftoken')\n          },\n          body: `base_currency=${baseCurrency.value}&target_currency=${targetCurrency.value}`\n        })\n        .then(response => response.json())\n        .then(data => {\n          if(!data.error) {\n            baseCurrency.value = data.base_currency;\n            targetCurrency.value = data.target_currency;\n          } else {\n            alert('Swap failed.');\n          }\n             const newBase = document.getElementById('base_currency').value;\n            const newTarget = document.getElementById('target_currency').value;\n          updateHistoricalChart(newBase, newTarget, timeRange);\n\n        });\n\n\n      });\n\n    document.getElementById('time_range').addEventListener('change', function(){\n      const baseCurrency = document.getElementById('base_currency').value;\n      const targetCurrency = document.getElementById('target_currency').value;\n      const timeRange = document.getElementById('time_range').value;\n      updateHistoricalChart(baseCurrency, targetCurrency, timeRange);\n     });\n\n\n        // Function to get CSRF token from cookies\n        function getCookie(name) {\n            let cookieValue = null;\n            if (document.cookie && document.cookie !== '') {\n                const cookies = document.cookie.split(';');\n                for (let i = 0; i < cookies.length; i++) {\n                    let cookie = cookies[i].trim();\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                        break;\n                    }\n                }\n            }\n            return cookieValue;\n        }\n        //initial chart\n        document.addEventListener('DOMContentLoaded', (event) =>{\n          const baseCurrency = document.getElementById('base_currency').value;\n          const targetCurrency = document.getElementById('target_currency').value;\n          const timeRange = document.getElementById('time_range').value\n          updateHistoricalChart(baseCurrency, targetCurrency, timeRange);\n       });\n\n    </script>\n</body>\n</html>"}, {"file": "apps.py", "path": "currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "currency_converter/migrations/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "0001_initial.py", "path": "currency_converter/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-21 19:23\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Currency',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('code', models.CharField(max_length=3, unique=True)),\n                ('name', models.CharField(max_length=100)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='HistoricalExchangeRate',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('rate', models.DecimalField(decimal_places=6, max_digits=15)),\n                ('timestamp', models.DateTimeField()),\n                ('base_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_historical_rates', to='currency_converter.currency')),\n                ('target_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_historical_rates', to='currency_converter.currency')),\n            ],\n            options={\n                'ordering': ['-timestamp'],\n                'unique_together': {('base_currency', 'target_currency', 'timestamp')},\n            },\n        ),\n        migrations.CreateModel(\n            name='ExchangeRate',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('rate', models.DecimalField(decimal_places=6, max_digits=15)),\n                ('timestamp', models.DateTimeField(auto_now=True)),\n                ('base_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_rates', to='currency_converter.currency')),\n                ('target_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_rates', to='currency_converter.currency')),\n            ],\n            options={\n                'ordering': ['-timestamp'],\n                'unique_together': {('base_currency', 'target_currency', 'timestamp')},\n            },\n        ),\n    ]"}], "3": [{"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# No models are needed for this project as we won't store passwords."}, {"file": "forms.py", "path": "password_generator/forms.py", "code": "from django import forms\n\nclass PasswordGeneratorForm(forms.Form):\n    length = forms.IntegerField(label='Password Length', min_value=1, max_value=128, initial=12, widget=forms.NumberInput(attrs={'id': 'password-length', 'class': 'form-control'}))\n    include_uppercase = forms.BooleanField(label='Include Uppercase Letters', required=False, initial=True, widget=forms.CheckboxInput(attrs={'id': 'include-uppercase', 'class': 'form-check-input'}))\n    include_lowercase = forms.BooleanField(label='Include Lowercase Letters', required=False, initial=True, widget=forms.CheckboxInput(attrs={'id': 'include-lowercase', 'class': 'form-check-input'}))\n    include_numbers = forms.BooleanField(label='Include Numbers', required=False, initial=True, widget=forms.CheckboxInput(attrs={'id': 'include-numbers', 'class': 'form-check-input'}))\n    include_symbols = forms.BooleanField(label='Include Symbols', required=False, initial=False, widget=forms.CheckboxInput(attrs={'id': 'include-symbols', 'class': 'form-check-input'}))\n    exclude_similar = forms.BooleanField(label='Exclude Similar Characters', required=False, widget=forms.CheckboxInput(attrs={'id': 'exclude-similar', 'class': 'form-check-input'}))\n    exclude_ambiguous = forms.BooleanField(label='Exclude Ambiguous Characters', required=False, widget=forms.CheckboxInput(attrs={'id': 'exclude-ambiguous', 'class': 'form-check-input'}))\n\nclass SettingsForm(forms.Form):  # For the optional Settings page\n    default_length = forms.IntegerField(label='Default Password Length', min_value=1, max_value=128, initial=12, widget=forms.NumberInput(attrs={'id': 'default-length', 'class': 'form-control'}))\n    remember_uppercase = forms.BooleanField(required=False, initial=True, widget=forms.CheckboxInput(attrs={'id': 'remember-uppercase', 'class': 'form-check-input'}))\n    remember_lowercase = forms.BooleanField(required=False, initial=True, widget=forms.CheckboxInput(attrs={'id': 'remember-lowercase', 'class': 'form-check-input'}))\n    remember_numbers = forms.BooleanField(required=False, initial=True, widget=forms.CheckboxInput(attrs={'id': 'remember-numbers', 'class': 'form-check-input'}))\n    remember_symbols = forms.BooleanField(required=False, initial=False, widget=forms.CheckboxInput(attrs={'id': 'remember-symbols', 'class': 'form-check-input'}))"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render, redirect\nfrom .forms import PasswordGeneratorForm, SettingsForm\nimport secrets\nimport string\n\ndef generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols, exclude_similar, exclude_ambiguous):\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if exclude_similar:\n        characters = characters.translate(str.maketrans('', '', 'Il1O0'))\n\n    if exclude_ambiguous:\n      characters = characters.translate(str.maketrans('', '', \"{}[]()/\\\\'~,;:.<>\"))\n    \n    if not characters:\n        return \"Error: No character sets selected.\"\n\n    password = ''.join(secrets.choice(characters) for _ in range(length))\n    return password\n\ndef calculate_strength(password):\n    length = len(password)\n    if length < 8:\n        return 'Weak'\n    elif length < 12:\n        return 'Medium'\n    else:\n      char_types = 0\n      if any(c.isupper() for c in password): char_types +=1\n      if any(c.islower() for c in password): char_types +=1\n      if any(c.isdigit() for c in password): char_types +=1\n      if any(c in string.punctuation for c in password): char_types +=1\n      \n      if char_types >=3:\n        return 'Strong'\n      else:\n        return 'Medium'\n\ndef homepage(request):\n    if request.method == 'POST':\n        form = PasswordGeneratorForm(request.POST)\n        if form.is_valid():\n            length = form.cleaned_data['length']\n            include_uppercase = form.cleaned_data['include_uppercase']\n            include_lowercase = form.cleaned_data['include_lowercase']\n            include_numbers = form.cleaned_data['include_numbers']\n            include_symbols = form.cleaned_data['include_symbols']\n            exclude_similar = form.cleaned_data['exclude_similar']\n            exclude_ambiguous = form.cleaned_data['exclude_ambiguous']\n\n            password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols, exclude_similar, exclude_ambiguous)\n            strength = calculate_strength(password)\n            return render(request, 'password_generator/homepage.html', {'form': form, 'password': password, 'strength': strength})\n    else:\n        form = PasswordGeneratorForm()\n    return render(request, 'password_generator/homepage.html', {'form': form})\n\n\ndef about(request):\n    return render(request, 'password_generator/about.html')\n\n\ndef settings(request):\n    if request.method == 'POST':\n        form = SettingsForm(request.POST)\n        if form.is_valid():\n            # In a real application, you'd save these settings to user profiles (using sessions or a database).\n            # For simplicity, we'll just demonstrate the form handling.\n            \n            request.session['default_length'] = form.cleaned_data['default_length']\n            request.session['remember_uppercase'] = form.cleaned_data['remember_uppercase']\n            request.session['remember_lowercase'] = form.cleaned_data['remember_lowercase']\n            request.session['remember_numbers'] = form.cleaned_data['remember_numbers']\n            request.session['remember_symbols'] = form.cleaned_data['remember_symbols']\n\n            return redirect('settings') # Redirect back to settings page after saving\n\n    else:\n       # Load initial values from session if they exist\n        initial_data = {\n                'default_length': request.session.get('default_length', 12),\n                'remember_uppercase': request.session.get('remember_uppercase', True),\n                'remember_lowercase': request.session.get('remember_lowercase', True),\n                'remember_numbers': request.session.get('remember_numbers', True),\n                'remember_symbols': request.session.get('remember_symbols', False),\n            }\n        form = SettingsForm(initial=initial_data)\n\n    return render(request, 'password_generator/settings.html', {'form': form})\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('about/', views.about, name='about'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),\n]"}, {"file": "homepage.html", "path": "password_generator/templates/password_generator/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .form-group {\n            margin-bottom: 1rem;\n        }\n        .form-control {\n          width: 100px;\n          margin-top: 0.5rem;\n        }\n        .form-check-input{\n          margin-top: 0.5rem;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"main-heading\">Password Generator</h1>\n    <form method=\"post\" id=\"password-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"generate-button\">Generate Password</button>\n    </form>\n\n    {% if password %}\n        <h2 id=\"generated-password-heading\">Generated Password:</h2>\n        <p id=\"generated-password\">{{ password }}</p>\n        <p id=\"password-strength\">Strength: {{strength}}</p>\n        <button id=\"copyButton\">Copy to Clipboard</button>\n        <script>\n            document.getElementById('copyButton').addEventListener('click', function() {\n                navigator.clipboard.writeText('{{ password }}').then(function() {\n                    alert('Password copied to clipboard!');\n                }, function(err) {\n                    console.error('Could not copy text: ', err);\n                    alert('Failed to copy password. Please copy manually.');\n                });\n            });\n        </script>\n\n    {% endif %}\n     <p><a href=\"{% url 'settings' %}\" id=\"settings-link\">Settings</a></p>\n     <p><a href=\"{% url 'about' %}\" id=\"about-link\">About</a></p>\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator/templates/password_generator/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-heading\">About This Password Generator</h1>\n    <p id=\"about-description\">This is a simple password generator built with Django.  It allows you to create strong, random passwords based on your chosen criteria.</p>\n    <h2 id=\"security-heading\">Security Information</h2>\n    <p id=\"security-description\">This password generator does <strong>not</strong> store any generated passwords.  Passwords are created in your browser and are never sent to or saved on any server.</p>\n<p><a href=\"{% url 'homepage' %}\" id=\"back-to-generator-link\">Back to Generator</a></p>\n</body>\n</html>"}, {"file": "settings.html", "path": "password_generator/templates/password_generator/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n        <style>\n        body {\n            font-family: sans-serif;\n        }\n        .form-group {\n            margin-bottom: 1rem;\n        }\n        .form-control {\n          width: 100px;\n           margin-top: 0.5rem;\n        }\n        .form-check-input{\n          margin-top: 0.5rem;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"settings-heading\">Settings</h1>\n    <form method=\"post\" id=\"settings-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"save-settings-button\">Save Settings</button>\n    </form>\n     <p><a href=\"{% url 'homepage' %}\" id=\"back-link\">Back to Generator</a></p>\n</body>\n</html>"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "\"\"\"\nWSGI config for myproject project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "\"\"\"\nDjango settings for myproject project.\n\nGenerated by 'django-admin startproject' using Django 4.2.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/4.2/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-@h7-y@g(z+5a@h7-y@g(z+5a@h7-y@g(z+5a@h7-y@g(z+5a@h7-y@g(z+5a'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nSESSION_ENGINE = 'django.contrib.sessions.backends.signed_cookies' # Use signed cookies for session storage\nSESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "\"\"\"\nASGI config for myproject project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()\n"}], "5": [{"file": "views.py", "path": "converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse, HttpResponse\nimport markdown\nfrom bs4 import BeautifulSoup\nimport html2text\n\n\ndef homepage(request):\n    return render(request, 'converter/homepage.html')\n\n\ndef about(request):\n    return render(request, 'converter/about.html')\n\n\ndef help_faq(request):\n    return render(request, 'converter/help_faq.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        input_text = request.POST.get('input_text', '')\n        conversion_mode = request.POST.get('conversion_mode', 'md_to_html')\n\n        if conversion_mode == 'md_to_html':\n            try:\n                html = markdown.markdown(input_text)\n                return JsonResponse({'output': html, 'status': 'success'})\n            except Exception as e:\n                return JsonResponse({'error': str(e), 'status': 'error'})\n        elif conversion_mode == 'html_to_md':\n            try:\n                h = html2text.HTML2Text()\n                h.ignore_links = False  # Keep links in the Markdown output\n                markdown_text = h.handle(input_text)\n                return JsonResponse({'output': markdown_text, 'status': 'success'})\n            except Exception as e:\n                return JsonResponse({'error': str(e), 'status': 'error'})\n\n    return JsonResponse({'error': 'Invalid request method', 'status': 'error'})\n\n\ndef download_file(request):\n    if request.method == 'POST':\n        content = request.POST.get('content', '')\n        file_type = request.POST.get('file_type', 'html')\n        filename = f\"converted_file.{file_type}\"\n\n        response = HttpResponse(content,\n                                content_type=('text/html' if file_type == 'html' else 'text/markdown'))\n        response['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n        return response\n    return JsonResponse({'error': 'Invalid Request', 'status': 'error'})\n"}, {"file": "urls.py", "path": "converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('about/', views.about, name='about'),\n    path('help/', views.help_faq, name='help_faq'),\n    path('convert/', views.convert, name='convert'),\n    path('download/', views.download_file, name='download_file')\n]\n"}, {"file": "models.py", "path": "converter/models.py", "code": "# No models needed for this converter"}, {"file": "forms.py", "path": "converter/forms.py", "code": "# No Forms needed for this converter"}, {"file": "homepage.html", "path": "converter/templates/converter/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown & HTML Converter</title>\n    <style>\n        body { font-family: sans-serif; }\n        .container { width: 80%; margin: 0 auto; }\n        .controls, .examples { margin-bottom: 20px; }\n        textarea, #output_area { width: 100%; height: 200px; border: 1px solid #ccc; padding: 10px; margin-bottom: 10px; box-sizing: border-box; }\n        #output_area { overflow: auto; }\n        button { padding: 10px 15px; background-color: #4CAF50; color: white; border: none; cursor: pointer; margin-right: 5px; }\n        button:hover { opacity: 0.8; }\n        select { padding: 10px; }\n        pre { background-color: #f0f0f0; padding: 10px; overflow: auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Markdown & HTML Converter</h1>\n\n        <div class=\"controls\">\n            <select id=\"conversion_mode\" class=\"conversion-mode\">\n                <option value=\"md_to_html\">Markdown to HTML</option>\n                <option value=\"html_to_md\">HTML to Markdown</option>\n            </select>\n\n            <textarea id=\"input_text\" class=\"input-text\" placeholder=\"Enter Markdown or HTML here...\"></textarea>\n            <button id=\"convert_button\" class=\"convert-button\">Convert</button>\n            <button id=\"clear_button\" class=\"clear-button\">Clear</button>\n        </div>\n\n        <div id=\"output_area\" class=\"output-area\"></div>\n\n        <div class=\"controls\">\n            <button id=\"copy_button\" class=\"copy-button\">Copy to Clipboard</button>\n            <button id=\"download_button\" class=\"download-button\">Download</button>\n            <select id=\"download_type\" class=\"download-type\">\n                <option value=\"html\">HTML</option>\n                <option value=\"md\">Markdown</option>\n            </select>\n        </div>\n        <div class=\"examples\">\n            <h2>Example Markdown</h2>\n            <pre id=\"markdown-example\" class=\"example-pre\">\n# Heading\n**bold text**\n*italic text*\n- List item 1\n- List item 2\n            </pre>\n        </div>\n        <div class=\"examples\">\n            <h2>Example HTML</h2>\n            <pre id=\"html-example\" class=\"example-pre\">\n&lt;h1&gt;Heading&lt;/h1&gt;\n&lt;p&gt;&lt;b&gt;bold text&lt;/b&gt;&lt;/p&gt;\n&lt;p&gt;&lt;i&gt;italic text&lt;/i&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li&gt;List item 1&lt;/li&gt;\n  &lt;li&gt;List item 2&lt;/li&gt;\n&lt;/ul&gt;\n            </pre>\n        </div>\n    </div>\n\n    <script>\n        const convertButton = document.getElementById('convert_button');\n        const inputTextArea = document.getElementById('input_text');\n        const outputArea = document.getElementById('output_area');\n        const conversionModeSelect = document.getElementById('conversion_mode');\n        const clearButton = document.getElementById('clear_button');\n        const copyButton = document.getElementById('copy_button');\n        const downloadButton = document.getElementById('download_button');\n        const downloadTypeSelect = document.getElementById('download_type');\n        let currentOutput = '';\n\n        function convert() {\n            const inputText = inputTextArea.value;\n            const conversionMode = conversionModeSelect.value;\n\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': getCookie('csrftoken')\n                },\n                body: `input_text=${encodeURIComponent(inputText)}&conversion_mode=${conversionMode}`\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 'success') {\n                    currentOutput = data.output;\n                    // Use innerHTML for initial display, and escapeHtml for preformatted display.\n                    if (conversionMode === 'md_to_html'){\n                        outputArea.innerHTML = currentOutput;\n                    } else {\n                         outputArea.innerHTML = `<pre>${escapeHtml(currentOutput)}</pre>`;\n                    }\n\n                } else {\n                    outputArea.innerHTML = `<p>Error: ${data.error}</p>`;\n                }\n            });\n        }\n\n        convertButton.addEventListener('click', convert);\n\n        clearButton.addEventListener('click', () => {\n            inputTextArea.value = '';\n            outputArea.innerHTML = '';\n            currentOutput = '';\n        });\n\n        copyButton.addEventListener('click', () => {\n            navigator.clipboard.writeText(currentOutput)\n            .catch(err => {\n                console.error('Failed to copy: ', err);\n                alert('Copy to clipboard failed. Please copy manually.');\n            });\n        });\n\n        downloadButton.addEventListener('click', () => {\n            const fileType = downloadTypeSelect.value;\n\n            fetch('/download/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': getCookie('csrftoken')\n                },\n                body: `content=${encodeURIComponent(currentOutput)}&file_type=${fileType}`\n            })\n                .then(response => response.blob())\n                .then(blob => {\n                    const url = window.URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.style.display = 'none';\n                    a.href = url;\n                    a.download = `converted_file.${fileType}`;\n                    document.body.appendChild(a);\n                    a.click();\n                    window.URL.revokeObjectURL(url);\n                    document.body.removeChild(a); // Clean up\n                })\n                .catch(err => {\n                    console.error('Download failed: ', err);\n                    alert('Download failed.');\n                });\n        });\n\n\n         inputTextArea.addEventListener('input', () => {\n            if (conversionModeSelect.value === 'md_to_html') {\n               convert();\n            }\n        });\n\n        function escapeHtml(unsafe) {\n            return unsafe\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/\\'/g, \"&#039;\");\n        }\n\n        function getCookie(name) {\n            let cookieValue = null;\n            if (document.cookie && document.cookie !== '') {\n                const cookies = document.cookie.split(';');\n                for (let i = 0; i < cookies.length; i++) {\n                    const cookie = cookies[i].trim();\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                        break;\n                    }\n                }\n            }\n            return cookieValue;\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "converter/templates/converter/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About</title>\n    <style>\n      body { font-family: sans-serif; }\n    </style>\n</head>\n<body>\n    <h1>About the Converter</h1>\n    <p>This tool is designed to convert between Markdown and HTML.</p>\n    <p>Version: 1.0</p>\n    <p>Developer: [Your Name/Company Name]</p>\n    <p>Contact: [Your Email/Contact Info]</p>\n</body>\n</html>"}, {"file": "help_faq.html", "path": "converter/templates/converter/help_faq.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Help & FAQ</title>\n     <style>\n      body { font-family: sans-serif; }\n    </style>\n</head>\n<body>\n    <h1>Help & FAQ</h1>\n\n    <h2>Frequently Asked Questions</h2>\n    <dl>\n        <dt>How do I convert Markdown to HTML?</dt>\n        <dd>Select \"Markdown to HTML\", paste your Markdown, and click \"Convert\".</dd>\n\n        <dt>How do I convert HTML to Markdown</dt>\n        <dd>Select \"HTML to Markdown\", paste your HTML, and click \"Convert\".</dd>\n    </dl>\n     <h2>Troubleshooting</h2>\n     <dl>\n      <dt>Conversion Error</dt>\n      <dd>Make sure that your input is valid</dd>\n     </dl>\n    <h2>Markdown Syntax Guide</h2>\n    <p>Refer to a Markdown guide like <a href=\"https://www.markdownguide.org/basic-syntax/\" target=\"_blank\">this one</a>.</p>\n      <h2>Contact Support</h2>\n    <p>If you have any questions or need help, please feel free to contact us at [Your Email/Contact Info] </p>\n</body>\n</html>"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key' # Replace with a strong secret key\n\nDEBUG = True  # Set to False in production\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}], "8": [{"file": "models.py", "path": "calendar_project/calendar_app/models.py", "code": "from django.db import models\nfrom django.conf import settings\n\nclass Event(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)\n    title = models.CharField(max_length=255)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    all_day = models.BooleanField(default=False)\n    location = models.CharField(max_length=255, blank=True, null=True)\n    description = models.TextField(blank=True, null=True)\n    recurrence = models.CharField(max_length=50, blank=True, null=True)\n    color = models.CharField(max_length=7, default='#3a87ad')\n\n    def __str__(self):\n        return self.title\n\n\nclass Reminder(models.Model):\n    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='reminders')\n    reminder_time = models.DateTimeField()\n    # method = models.CharField(max_length=20, choices=[('email', 'Email'), ('popup', 'Popup')], default='popup') # Example\n\n    def __str__(self):\n        return f\"Reminder for {self.event.title} at {self.reminder_time}\"\n\n\nclass UserPreferences(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    time_zone = models.CharField(max_length=50, default='UTC')\n    date_format = models.CharField(max_length=50, default='%Y-%m-%d')\n    time_format = models.CharField(max_length=50, default='%H:%M')\n    start_of_week = models.IntegerField(default=0)  # 0 for Sunday, 1 for Monday\n    default_view = models.CharField(max_length=10, default='month')  # month, week, day\n    default_reminder_time = models.IntegerField(null=True, blank=True)  # e.g., minutes before event\n    dark_mode = models.BooleanField(default=False)\n\n    def __str__(self):\n        return f\"Preferences for {self.user.username}\""}, {"file": "views.py", "path": "calendar_project/calendar_app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import JsonResponse, HttpResponseBadRequest\nfrom .models import Event, Reminder, UserPreferences\nfrom django.contrib.auth.decorators import login_required\nimport json\nfrom datetime import datetime, timedelta\n\n\n@login_required\ndef calendar_view(request):\n    try:\n        user_preferences = UserPreferences.objects.get(user=request.user)\n    except UserPreferences.DoesNotExist:\n        user_preferences = UserPreferences.objects.create(user=request.user)\n\n    context = {\n        'default_view': user_preferences.default_view,\n        'preferences': user_preferences,\n    }\n    return render(request, 'calendar_app/calendar.html', context)\n\n\n@login_required\ndef get_events(request):\n    start_date_str = request.GET.get('start')\n    end_date_str = request.GET.get('end')\n\n    if not start_date_str or not end_date_str:\n        return JsonResponse({'error': 'start and end dates are required'}, status=400)\n\n    try:\n        start_date = datetime.fromisoformat(start_date_str.replace('Z', '+00:00'))\n        end_date = datetime.fromisoformat(end_date_str.replace('Z', '+00:00'))\n    except ValueError:\n        return JsonResponse({'error': 'Invalid date format'}, status=400)\n\n    events = Event.objects.filter(user=request.user, start_time__gte=start_date, end_time__lte=end_date)\n\n    event_list = []\n    for event in events:\n        event_list.append({\n            'id': event.id,\n            'title': event.title,\n            'start': event.start_time.isoformat(),\n            'end': event.end_time.isoformat(),\n            'allDay': event.all_day,\n            'color': event.color,\n            'description': event.description,\n            'location': event.location\n        })\n\n    return JsonResponse(event_list, safe=False)\n\n\n@login_required\ndef event_create(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        try:\n            start_time = datetime.fromisoformat(data.get('start').replace('Z', '+00:00'))\n            end_time = datetime.fromisoformat(data.get('end').replace('Z', '+00:00')) if data.get('end') else start_time + timedelta(hours=1)\n\n            event = Event.objects.create(\n                user=request.user,\n                title=data.get('title'),\n                start_time=start_time,\n                end_time=end_time,\n                all_day=data.get('allDay', False),\n                description=data.get('description'),\n                location=data.get('location'),\n                color=data.get('color'),\n                recurrence=data.get('recurrence'),\n            )\n            return JsonResponse({'status': 'success', 'event_id': event.id})\n        except Exception as e:\n            return JsonResponse({'status': 'error', 'message': str(e)}, status=400)\n    return JsonResponse({'status': 'error'})\n\n\n@login_required\ndef event_update(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        try:\n            event.start_time = datetime.fromisoformat(data.get('start').replace('Z', '+00:00'))\n            event.end_time = datetime.fromisoformat(data.get('end').replace('Z', '+00:00'))\n            event.title = data.get('title')\n            event.all_day = data.get('allDay', False)\n            event.description = data.get('description')\n            event.location = data.get('location')\n            event.color = data.get('color')\n            event.recurrence = data.get('recurrence')\n            event.save()\n            return JsonResponse({'status': 'success'})\n        except Exception as e:\n            return JsonResponse({'status': 'error', 'message': str(e)}, status=400)\n    return JsonResponse({'status': 'error'}, status=400)\n\n\n@login_required\ndef event_delete(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        event.delete()\n        return JsonResponse({'status': 'success'})\n    return JsonResponse({'status': 'error'}, status=400)\n\n\n@login_required\ndef event_detail(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    event_data = {\n        'id': event.id,\n        'title': event.title,\n        'start': event.start_time.isoformat(),\n        'end': event.end_time.isoformat(),\n        'allDay': event.all_day,\n        'description': event.description,\n        'location': event.location,\n        'color': event.color,\n        'recurrence': event.recurrence,\n    }\n    return JsonResponse(event_data)\n\n\n@login_required\ndef update_preferences(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        try:\n            user_preferences, created = UserPreferences.objects.get_or_create(user=request.user)\n            user_preferences.time_zone = data.get('time_zone', user_preferences.time_zone)\n            user_preferences.date_format = data.get('date_format', user_preferences.date_format)\n            user_preferences.time_format = data.get('time_format', user_preferences.time_format)\n            user_preferences.start_of_week = int(data.get('start_of_week', user_preferences.start_of_week))\n            user_preferences.default_view = data.get('default_view', user_preferences.default_view)\n            user_preferences.dark_mode = data.get('dark_mode', user_preferences.dark_mode)\n            if data.get('default_reminder_time') is not None:\n                user_preferences.default_reminder_time = int(data.get('default_reminder_time'))\n            else:\n                user_preferences.default_reminder_time = None\n            user_preferences.save()\n            return JsonResponse({'status': 'success'})\n        except Exception as e:\n            return JsonResponse({'status': 'error', 'message': str(e)}, status=400)\n    return HttpResponseBadRequest()\n\n\n@login_required\ndef search_events(request):\n    query = request.GET.get('q', '')\n    if query:\n        events = Event.objects.filter(\n            user=request.user,\n            title__icontains=query\n        ).values('id', 'title', 'start_time', 'end_time')\n        event_list = list(events)\n        for event in event_list:\n            event['start_time'] = event['start_time'].isoformat()\n            event['end_time'] = event['end_time'].isoformat()\n        return JsonResponse(event_list, safe=False)\n    else:\n        return JsonResponse([], safe=False)"}, {"file": "urls.py", "path": "calendar_project/calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar_view'),\n    path('events/', views.get_events, name='get_events'),\n    path('events/create/', views.event_create, name='event_create'),\n    path('events/<int:event_id>/update/', views.event_update, name='event_update'),\n    path('events/<int:event_id>/delete/', views.event_delete, name='event_delete'),\n    path('events/<int:event_id>/detail/', views.event_detail, name='event_detail'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('search/', views.search_events, name='search_events'),\n]"}, {"file": "forms.py", "path": "calendar_project/calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'start_time', 'end_time', 'all_day', 'location', 'description', 'recurrence', 'color']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }\n\n    def clean(self):\n        cleaned_data = super().clean()\n        start_time = cleaned_data.get('start_time')\n        end_time = cleaned_data.get('end_time')\n\n        if start_time and end_time and start_time >= end_time:\n            raise forms.ValidationError(\"End time must be after start time.\")\n        return cleaned_data"}, {"file": "admin.py", "path": "calendar_project/calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event, Reminder, UserPreferences\n\nadmin.site.register(Event)\nadmin.site.register(Reminder)\nadmin.site.register(UserPreferences)"}, {"file": "calendar.html", "path": "calendar_project/calendar_app/templates/calendar_app/calendar.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar</title>\n    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/main.min.css' rel='stylesheet' />\n    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        #calendar {\n            max-width: 900px;\n            margin: 40px auto;\n        }\n        .dark-mode {\n            background-color: #333;\n            color: #fff;\n        }\n        .dark-mode .fc-button-primary {\n            background-color: #555;\n            color: #fff;\n            border-color: #777;\n        }\n    </style>\n</head>\n<body {% if preferences.dark_mode %}class=\"dark-mode\"{% endif %}>\n\n    <div id='calendar'></div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            var calendarEl = document.getElementById('calendar');\n\n            var calendar = new FullCalendar.Calendar(calendarEl, {\n                initialView: '{{ default_view }}',\n                headerToolbar: {\n                    left: 'prev,next today',\n                    center: 'title',\n                    right: 'dayGridMonth,timeGridWeek,timeGridDay'\n                },\n                events: '/events/',\n                selectable: true,\n                select: function(info) {\n                    var title = prompt('Event Title:');\n                    if (title) {\n                        fetch('/events/create/', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'X-CSRFToken': getCookie('csrftoken')\n                            },\n                            body: JSON.stringify({\n                                title: title,\n                                start: info.startStr,\n                                end: info.endStr,\n                                allDay: info.allDay\n                            })\n                        })\n                        .then(response => response.json())\n                        .then(data => {\n                            if (data.status === 'success') {\n                                calendar.addEvent({\n                                    id: data.event_id,\n                                    title: title,\n                                    start: info.startStr,\n                                    end: info.endStr,\n                                    allDay: info.allDay\n                                });\n                                calendar.unselect();\n                            } else {\n                                alert('Error creating event: ' + data.message);\n                            }\n                        });\n                    }\n                },\n                editable: true,\n                eventDrop: function(info) {\n                    updateEvent(info);\n                },\n                eventResize: function(info) {\n                    updateEvent(info);\n                },\n                eventClick: function(info) {\n                    if (confirm(`Are you sure you want to delete \"${info.event.title}\"?`)) {\n                        fetch(`/events/${info.event.id}/delete/`, {\n                            method: 'POST',\n                            headers: {\n                                'X-CSRFToken': getCookie('csrftoken')\n                            }\n                        })\n                        .then(response => response.json())\n                        .then(data => {\n                            if (data.status === 'success') {\n                                info.event.remove();\n                            } else {\n                                alert('Error deleting event.');\n                            }\n                        });\n                    }\n                },\n                loading: function(isLoading) {\n                    // Optional loading indicator handling\n                },\n                events: function(fetchInfo, successCallback, failureCallback) {\n                    fetch(`/events/?start=${fetchInfo.startStr}&end=${fetchInfo.endStr}`)\n                        .then(response => {\n                            if (!response.ok) {\n                                throw new Error('Network response was not ok');\n                            }\n                            return response.json();\n                        })\n                        .then(data => {\n                            successCallback(data);\n                        })\n                        .catch(error => {\n                            failureCallback(error);\n                            console.error('There has been a problem with your fetch operation:', error);\n                        });\n                }\n            });\n\n            calendar.render();\n\n            function updateEvent(info) {\n                fetch(`/events/${info.event.id}/update/`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json',\n                        'X-CSRFToken': getCookie('csrftoken')\n                    },\n                    body: JSON.stringify({\n                        title: info.event.title,\n                        start: info.event.startStr,\n                        end: info.event.endStr,\n                        allDay: info.event.allDay\n                    })\n                })\n                .then(response => response.json())\n                .then(data => {\n                    if (data.status !== 'success') {\n                        alert('Error updating event');\n                        info.revert();\n                    }\n                });\n            }\n\n            function getCookie(name) {\n                let cookieValue = null;\n                if (document.cookie && document.cookie !== '') {\n                    const cookies = document.cookie.split(';');\n                    for (let i = 0; i < cookies.length; i++) {\n                        const cookie = cookies[i].trim();\n                        if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                            break;\n                        }\n                    }\n                }\n                return cookieValue;\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "urls.py", "path": "calendar_project/calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n    path('accounts/', include('django.contrib.auth.urls')), #For login/logout/password_reset\n]"}, {"file": "settings.py", "path": "calendar_project/calendar_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key' # Replace\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',  # Your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'"}, {"file": "wsgi.py", "path": "calendar_project/calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "calendar_project/calendar_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "calendar_project/manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "14": [{"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef hello_world(request):\n    return render(request, 'myapp/hello_world.html', {'title': 'Hello World!'})\n"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('helloworld/', views.hello_world, name='hello_world'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "hello_world.html", "path": "myapp/templates/myapp/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"page-title\" class=\"title\">{{ title }}</title>\n</head>\n<body>\n    <h1 id=\"main-heading\" class=\"heading\">Hello, World!</h1>\n    <p id=\"greeting-text\" class=\"content\">Welcome to my Django app.</p>\n</body>\n</html>\n"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"}, {"file": "models.py", "path": "myapp/models.py", "code": "# No models needed for this simple example\nfrom django.db import models\n"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myapp/templates/myapp/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "SECRET_KEY = 'thisisasecretkey-changemeinproduction!!'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'mydatabase',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()\n"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}], "15": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'django-insecure-7@)m@9k*n*t&p&qg3!&y*c%&j%gjt)k%c8q+1x3+d5(d+6n_c'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = 'static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.landing_page, name='landing_page'),\n    path('helloword/', views.hello_world_page, name='hello_world_page'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\n\ndef landing_page(request):\n    return render(request, 'myapp/landing_page.html')\n\n\ndef hello_world_page(request):\n    return render(request, 'myapp/hello_world_page.html')\n"}, {"file": "landing_page.html", "path": "myapp/templates/myapp/landing_page.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Landing Page</title>\n</head>\n<body>\n    <a id=\"jump-to-hello-world-link\" class=\"navigation-link\" href=\"{% url 'hello_world_page' %}\">\n        <button id=\"jump-button\" class=\"action-button\">Jump to Hello World</button>\n    </a>\n</body>\n</html>"}, {"file": "hello_world_page.html", "path": "myapp/templates/myapp/hello_world_page.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"hello-world-heading\" class=\"main-heading\">Hello World</h1>\n</body>\n</html>"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "myapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}]}