{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Weight (kg)', min_value=1.0, required=True)\n    height = forms.FloatField(label='Height (cm)', min_value=1.0, required=True)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight.\",\n    \"Normal weight\": \"A BMI within this range (18.5-24.9) is considered normal.\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight.\",\n    \"Obese\": \"A BMI of 30 or above is considered obese.\",\n    \"Invalid input\": \"Invalid weight or height. Please enter positive values.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    bmi_result = None\n    interpretation = None\n\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height_m = form.cleaned_data['height'] / 100  # Convert cm to meters\n\n            if weight > 0 and height_m > 0:\n                bmi = weight / (height_m ** 2)\n                bmi_result = round(bmi, 2)\n\n                for category, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        interpretation = bmi_interpretation[category]\n                        break\n            else:\n                 interpretation = bmi_interpretation[\"Invalid input\"]\n\n    else:\n        form = BMICalculatorForm()\n\n    return render(request, 'bmi_calculator.html', {'form': form, 'bmi_result': bmi_result, 'interpretation': interpretation})\n\n\ndef advice(request):\n    # In a real application you would get the BMI from user input or session.\n    # Here it is just a placeholder\n    bmi = 22 #example\n    interpretation = None\n    for category, threshold in bmi_category.items():\n       if bmi < threshold:\n           interpretation = bmi_interpretation[category]\n           break\n\n    return render(request, 'advice.html', { 'interpretation': interpretation})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Advice</title>\n</head>\n<body>\n    <h1 id=\"advice-title\" class=\"advice-title\">Health Advice</h1>\n    <p id=\"advice-text\" class=\"advice-text\">{{ interpretation }}</p>\n    <a id=\"back-to-calculator\" class=\"back-link\" href=\"{% url 'bmi_calculator' %}\">Back to Calculator</a>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1 id=\"calculator-title\" class=\"calculator-title\">BMI Calculator</h1>\n    <form method=\"post\" id=\"bmi-form\" class=\"bmi-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"calculate-button\" class=\"calculate-button\">Calculate BMI</button>\n    </form>\n\n    {% if bmi_result %}\n    <div id=\"result-section\" class=\"result-section\">\n        <p id=\"bmi-result\" class=\"bmi-result\">Your BMI: {{ bmi_result }}</p>\n        <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">{{ interpretation }}</p>\n    </div>\n        <a id=\"advice-link\" class=\"advice-link\" href=\"{% url 'advice' %}\">Get Advice</a>\n    {% endif %}\n    <br>\n     <a id=\"home-link\" class=\"home-link\" href=\"{% url 'homepage' %}\">Back to Homepage</a>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Homepage</title>\n</head>\n<body>\n    <h1 id=\"welcome-message\" class=\"welcome-message\">Welcome to the BMI Calculator</h1>\n    <p id=\"intro-text\" class=\"intro-text\">Calculate your Body Mass Index (BMI) to assess your weight status.</p>\n    <a id=\"calculator-link\" class=\"calculator-link\" href=\"{% url 'bmi_calculator' %}\">Go to BMI Calculator</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "currency_app/forms.py", "code": "from django import forms\n\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(max_digits=10, decimal_places=2, min_value=0, widget=forms.NumberInput(attrs={'id': 'amount-input', 'class': 'form-control'}))\n    source_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, widget=forms.Select(attrs={'id': 'source-currency-select', 'class': 'form-select'}))\n    target_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, widget=forms.Select(attrs={'id': 'target-currency-select', 'class': 'form-select'}))"}, {"file": "models.py", "path": "currency_app/models.py", "code": "from django.db import models\n\nclass CurrencyConvertRateModel(models.Model):\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=32, decimal_places=16, verbose_name='Rate')\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Datetime')\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency} - {self.rate} at {self.datetime}'\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'"}, {"file": "views.py", "path": "currency_app/views.py", "code": "import datetime\nimport io\nimport base64\nimport random\n\nfrom django.shortcuts import render\nfrom django.views.generic import TemplateView\nfrom django.utils import timezone\nfrom matplotlib import pyplot as plt\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\ndef get_updated(source_currency, target_currency):\n    USD_BASE = {\n        'USD': 1.00,\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'JPY': 110.00,\n        'AUD': 1.35,\n        'CNY': 7.00,\n        'CAD': 1.25,\n        'CHF': 0.92,\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\ndef get_conversion_rate(source_currency, target_currency):\n    try:\n        # Try to get the most recent rate from DB\n        latest_rate = CurrencyConvertRateModel.objects.filter(\n            source_currency=source_currency, target_currency=target_currency\n        ).latest('datetime')\n        return latest_rate.rate\n    except CurrencyConvertRateModel.DoesNotExist:\n        # If rate does not exist, create a new rate\n        rate = get_updated(source_currency, target_currency)\n        CurrencyConvertRateModel.objects.create(\n            source_currency=source_currency, target_currency=target_currency, rate=rate\n        )\n        return rate\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form, 'converted_amount': None})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            rate = get_conversion_rate(source_currency, target_currency)\n            converted_amount = round(amount * rate, 2)\n\n            # Save the new rate to DB.\n            CurrencyConvertRateModel.objects.create(\n                source_currency=source_currency, target_currency=target_currency, rate=rate\n            )\n\n            return render(request, self.template_name, {\n                'form': form,\n                'converted_amount': converted_amount,\n                'source_currency': source_currency,\n                'target_currency': target_currency,\n                'amount': amount\n            })\n        return render(request, self.template_name, {'form': form, 'converted_amount': None})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        source_currency = request.GET.get('source_currency', 'USD')\n        target_currency = request.GET.get('target_currency', 'EUR')\n\n        # Get historical rates for the past 30 days\n        today = timezone.now()\n        past_dates = [today - datetime.timedelta(days=i) for i in range(30)]\n        past_dates_str = [date.strftime('%Y-%m-%d') for date in past_dates]\n        rates = []\n\n        for date in past_dates:\n            try:\n                rate = CurrencyConvertRateModel.objects.filter(\n                    source_currency=source_currency,\n                    target_currency=target_currency,\n                    datetime__date=date.date()\n                ).latest('datetime').rate\n                rates.append(float(rate))\n\n            except CurrencyConvertRateModel.DoesNotExist:\n                rates.append(None) # Or a suitable placeholder\n\n        # Generate the plot\n        plt.figure(figsize=(10, 5))\n        plt.plot(past_dates_str, rates)\n        plt.xlabel('Date')\n        plt.ylabel('Exchange Rate')\n        plt.title(f'{source_currency} to {target_currency} Exchange Rate Trend')\n        plt.xticks(rotation=45)\n        plt.tight_layout()\n\n        # Convert plot to image\n        buf = io.BytesIO()\n        plt.savefig(buf, format='png')\n        plt.close()\n        buf.seek(0)\n        image_png = buf.getvalue()\n        buf.close()\n        graphic = base64.b64encode(image_png).decode('utf-8')\n\n        form = CurrencyConverterForm(initial={'source_currency': source_currency, 'target_currency': target_currency})\n        return render(request, self.template_name, {'graphic': graphic, 'form':form, 'source_currency': source_currency, 'target_currency':target_currency})\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "currency_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "currency_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-04 03:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=3, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=3, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=16, max_digits=32, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "currency_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "currency_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n     <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"trends-title\" class=\"mt-4 mb-4\">Exchange Rate Trends</h1>\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form method=\"get\" action=\"{% url 'exchange_rate_trends' %}\">\n                    <div class=\"mb-3\">\n                        <label for=\"source_currency\" class=\"form-label\">Source Currency:</label>\n                        {{ form.source_currency }}\n                    </div>\n                    <div class=\"mb-3\">\n                        <label for=\"target_currency\" class=\"form-label\">Target Currency:</label>\n                        {{ form.target_currency }}\n                    </div>\n                    <button type=\"submit\" id=\"trends-submit\" class=\"btn btn-primary\">Show Trend</button>\n                </form>\n\n                <h2 class=\"mt-3\" id=\"selected-currencies\">{{ source_currency }} to {{ target_currency }}</h2>\n            </div>\n             <div class=\"col-md-6\">\n                  <img id=\"trends-chart\" src=\"data:image/png;base64,{{ graphic }}\" alt=\"Exchange Rate Trend Chart\" class=\"img-fluid\">\n             </div>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "currency_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN\" crossorigin=\"anonymous\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"converter-title\" class=\"mt-4 mb-4\">Currency Converter</h1>\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <form method=\"post\" action=\"{% url 'home' %}\">\n                    {% csrf_token %}\n                    <div class=\"mb-3\">\n                        <label for=\"amount-input\" class=\"form-label\">Amount:</label>\n                        {{ form.amount }}\n                    </div>\n                    <div class=\"mb-3\">\n                        <label for=\"source-currency-select\" class=\"form-label\">Source Currency:</label>\n                        {{ form.source_currency }}\n                    </div>\n                    <div class=\"mb-3\">\n                        <label for=\"target-currency-select\" class=\"form-label\">Target Currency:</label>\n                        {{ form.target_currency }}\n                    </div>\n                    <button type=\"submit\" id=\"convert-button\" class=\"btn btn-primary\">Convert</button>\n                </form>\n            </div>\n            <div class=\"col-md-6\">\n                {% if converted_amount is not None %}\n                    <div id=\"result\" class=\"mt-4\">\n                        <h2 id=\"converted-amount\">Result: {{ amount }} {{ source_currency }} = {{ converted_amount }} {{ target_currency }}</h2>\n                    </div>\n                {% endif %}\n            </div>\n        </div>\n         <a id=\"trends-link\" href=\"{% url 'exchange_rate_trends' %}\" class=\"btn btn-secondary mt-3\">View Exchange Rate Trends</a>\n    </div>\n\n</body>\n</html>"}, {"file": "info.html", "path": "currency_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n <title>Info</title>\n</head>\n<body>\n <h1>Information</h1>\n <p>This is some information about the currency converter application.</p>\n</body>\n</html>"}, {"file": "settings.py", "path": "currency_converter/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom currency_app.views import ConvertCurrencyView, ExchangeRateTrendsView, InfoView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', InfoView, name='info'),\n]"}, {"file": "wsgi.py", "path": "currency_converter/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page_view, name='home'),\n    path('generator/', views.password_generator_view, name='generator'),\n    path('about-us/', views.about_us_page_view, name='about_us'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return 'No character set selected.'\n\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\ndef password_generator_view(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n        return render(request, 'generator.html', {'password': password})\n\n    return render(request, 'generator.html')\n\ndef home_page_view(request):\n    return render(request, 'home.html')\n\ndef about_us_page_view(request):\n    return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 20px;\n    background-color: #f4f4f4;\n}\n\nh1 {\n    color: #333;\n    text-align: center;\n}\n\n.container {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n    max-width: 800px;\n    margin: 20px auto;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\ninput[type=\"number\"],\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n\nbutton {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 16px;\n}\n\nbutton:hover {\n    background-color: #0056b3;\n}\n\n.password-display {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background-color: #f9f9f9;\n    word-break: break-all;\n    display: flex;\n    justify-content: space-between; \n    align-items: center;       \n}\n\n#copy-message {\n    display: none;\n    color: green;\n    margin-left: 10px;\n}\n .copy-button {\n    background-color: #28a745;\n    color: white;\n    padding: 5px 10px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 14px;\n}\n .copy-button:hover { background-color: #1f7a33 }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function() {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function() {\n            message.style.display = 'none';\n        }, 3000);\n    }).catch(function(err) {\n        console.error('Could not copy text: ', err);\n    });\n}"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"about-us-title\">About Us</h1>\n        <p id=\"about-us-content\">This is a simple password generator application built with Django. It allows you to generate strong, random passwords based on your chosen criteria, such as length and inclusion of uppercase letters, lowercase letters, numbers, and symbols.</p>\n    </div>\n</body>\n</html>"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"generator-title\">Password Generator</h1>\n        <form method=\"post\" action=\"{% url 'generator' %}\" id=\"password-form\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"length\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" value=\"12\" min=\"4\" max=\"128\" class=\"length-input\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"uppercase\">Include Uppercase Letters:</label>\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" checked class=\"checkbox-input\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"lowercase\">Include Lowercase Letters:</label>\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" checked class=\"checkbox-input\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"numbers\">Include Numbers:</label>\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" checked class=\"checkbox-input\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"symbols\">Include Symbols:</label>\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" checked class=\"checkbox-input\">\n            </div>\n            <button type=\"submit\" id=\"generate-button\">Generate Password</button>\n        </form>\n\n        {% if password %}\n        <div class=\"password-display\">\n            <span id=\"password\">{{ password }}</span>\n            <button onclick=\"copyToClipboard()\" class=\"copy-button\">Copy</button>\n            <span id=\"copy-message\"></span>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n <div class=\"container\">\n        <h1 id=\"home-title\">Welcome to the Password Generator</h1>\n        <p id=\"home-description\">Click the button below to generate a strong, random password.</p>\n        <a href=\"{% url 'generator' %}\"><button id=\"go-to-generator-button\">Go to Generator</button></a>\n        <p id=\"about-us-link\"><a href=\"{% url 'about_us' %}\">About Us</a></p>\n </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\n# Add static file directories\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'example_app/static'),\n]\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),  # Include your app's URLs\n]"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr_code, name='generate_qr_code'),\n    path('download/', views.download_qr_code, name='download_qr_code'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nimport qrcode\nfrom io import BytesIO\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color='black', back_color='white')\n\n        # Save the image to a BytesIO object\n        img_buffer = BytesIO()\n        img.save(img_buffer, format='PNG')\n        img_buffer.seek(0)  # rewind to the beginning\n        \n        # Use base64 encoding\n        import base64\n        image_base64 = base64.b64encode(img_buffer.getvalue()).decode('utf-8')\n\n\n        context = {\n            'qr_code': image_base64,\n            'data': data,\n        }\n\n        return render(request, 'qr_app/generate.html', context)\n\n    return render(request, 'qr_app/generate.html')  # Render the form for GET requests\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data_download','')\n        if not data:\n            return redirect('generate_qr_code')\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n        img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n        response = HttpResponse(content_type='image/png')\n        img.save(response, \"PNG\")\n        response['Content-Disposition'] = 'attachment; filename=\"qr_code.png\"'\n        return response\n    return redirect('generate_qr_code')\n\ndef about(request):\n    return render(request, 'qr_app/about.html')\n"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"title\">About QR Code Generator</h1>\n    <p id=\"about-description\" class=\"description\">This is a simple QR code generator built with Django.  It allows you to create QR codes from text data.</p>\n    <h2 id=\"faq-title\" class=\"subtitle\">FAQ</h2>\n    <ul id=\"faq-list\" class=\"list\">\n        <li id=\"faq-item-1\" class=\"list-item\"><strong>Q: How do I use this?</strong>  A: Go to the Generate page, enter your data, and click 'Generate'.</li>\n        <li id=\"faq-item-2\" class=\"list-item\"><strong>Q: Can I download the QR code?</strong> A: Yes, after generating, click the download button.</li>\n    </ul>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n        .qr-code-container {\n            margin-top: 20px;\n            text-align:center;\n         }\n         .hidden{\n            display:none;}\n    </style>\n</head>\n<body>\n    <h1 id=\"generator-title\" class=\"title\">Generate QR Code</h1>\n    <form method=\"post\" action=\"{% url 'generate_qr_code' %}\" id=\"qr-form\" class=\"qr-form\">\n        {% csrf_token %}\n        <label for=\"data\" id=\"data-label\" class=\"data-label\">Enter Data:</label>\n        <input type=\"text\" name=\"data\" id=\"data\" class=\"data-input\" required>\n        <button type=\"submit\" id=\"generate-button\" class=\"generate-button\">Generate</button>\n    </form>\n\n     {% if qr_code %}\n    <div class=\"qr-code-container\" id=\"qr-code-container\">\n        <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\" id=\"qr-code-image\" class=\"qr-code-image\">\n         <form method=\"post\" action=\"{% url 'download_qr_code' %}\" id=\"download-form\" >\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"data_download\" value=\"{{data}}\" id=\"hidden-data\">\n            <button type=\"submit\" id=\"download-button\" class=\"download-button\">Download QR Code</button>\n        </form>\n    </div>\n    {% endif %}\n   \n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n    body {\n        font-family: Arial, sans-serif;\n        margin: 20px;\n        text-align: center; /* Center-align the content */\n    }\n    .nav-link {\n        display: inline-block; /* Make links inline-block for horizontal layout */\n        margin: 10px;\n        padding: 8px 16px;\n        background-color: #007bff;\n        color: white;\n        text-decoration: none;\n        border-radius: 4px;\n    }\n    .nav-link:hover { /* Hover effect */\n        background-color: #0056b3;\n    }\n    </style>\n</head>\n<body>\n    <h1 id=\"main-title\" class=\"title\">Welcome to the QR Code Generator</h1>\n    <p id=\"main-description\" class=\"description\">Easily generate QR codes for your data.</p>\n\n    <nav id=\"navigation\" class=\"navigation\">\n        <a href=\"{% url 'generate_qr_code' %}\" id=\"generate-link\" class=\"nav-link\">Generate QR Code</a>\n        <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"nav-link\">About</a>\n    </nav>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',  # Add the app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "qr_app/admin.py", "code": "# from django.contrib import admin\n# Register your models here, if needed.\n"}, {"file": "models.py", "path": "qr_app/models.py", "code": "#  from django.db import models\n# Create your models here, if you need\n"}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable?\" \n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.core.files.storage import FileSystemStorage\nfrom django.conf import settings\nimport os\n\n\ndef home(request):\n    return render(request, 'example_app/home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'example_app/convert.html', {'html': html, 'markdown_text': markdown_text})\n        elif 'markdown_file' in request.FILES:\n            uploaded_file = request.FILES['markdown_file']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            file_path = os.path.join(settings.MEDIA_ROOT, filename)\n            \n            with open(file_path, 'r', encoding='utf-8') as f:\n                markdown_content = f.read()\n\n            html_content = markdown.markdown(markdown_content)\n\n            return render(request, 'example_app/convert.html', {'html': html_content})\n        return HttpResponseRedirect(request.path_info)  # Redirect back to the same page for empty submissions.\n\n    return render(request, 'example_app/convert.html')\n\n\ndef about(request):\n    return render(request, 'example_app/about.html')\n"}, {"file": "about.html", "path": "example_app/templates/example_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About the Markdown Converter</h1>\n        <p id=\"about-description\" class=\"description\">This application converts Markdown text or files to HTML. It's built using Django.</p>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "example_app/templates/example_app/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"container\">\n        <h1 id=\"converter-title\" class=\"title\">Markdown to HTML Converter</h1>\n\n        <form id=\"markdown-form\" method=\"post\" enctype=\"multipart/form-data\" class=\"form\">\n            {% csrf_token %}\n            <label for=\"markdown_text\" id=\"markdown-text-label\" class=\"label\">Enter Markdown Text:</label><br>\n            <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"50\" class=\"textarea\">{{ markdown_text }}</textarea><br><br>\n\n            <label for=\"markdown_file\" id=\"markdown-file-label\" class=\"label\">Or upload a Markdown file:</label>\n            <input type=\"file\" id=\"markdown_file\" name=\"markdown_file\" class=\"file-input\"><br><br>\n\n            <input type=\"submit\" value=\"Convert\" id=\"convert-button\" class=\"button\">\n        </form>\n\n        <div id=\"html-output\" class=\"output\">\n            <h2 id=\"output-title\" class=\"subtitle\">HTML Output:</h2>\n            <div id=\"rendered-html\" class=\"html-content\">{{ html|safe }}</div>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/example_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home</title>\n</head>\n<body>\n  <div id=\"home-container\" class=\"container\">\n    <h1 id=\"home-title\" class=\"title\">Welcome to the Markdown Converter</h1>\n    <p id=\"home-description\" class=\"description\">Convert your Markdown text to HTML easily!</p>\n    <nav id=\"home-navigation\" class=\"navigation\">\n      <ul id=\"navigation-list\" class=\"nav-list\">\n        <li id=\"convert-link-item\" class=\"nav-item\"><a href=\"{% url 'convert' %}\" id=\"convert-link\" class=\"nav-link\">Convert</a></li>\n        <li id=\"about-link-item\" class=\"nav-item\"><a href=\"{% url 'about' %}\" id=\"about-link\" class=\"nav-link\">About</a></li>\n      </ul>\n    </nav>\n  </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Add the app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item, \n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.generic import TemplateView, ListView, DetailView\nfrom .models import TodoList, TodoItem\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def get_queryset(self):\n        return TodoList.objects.all()\n\n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\ndef delete_todo(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    todo_list.delete()\n    return redirect('todo_list')\n\ndef edit_todo(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        todo_list.title = request.POST.get('title')\n        todo_list.description = request.POST.get('description')\n        todo_list.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todo_list': todo_list})\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        return context\n\n    def post(self, request, *args, **kwargs):\n        todolist_id = kwargs['pk']\n        todolist = get_object_or_404(TodoList, pk=todolist_id)\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoItem.objects.create(title=title, description=description, todolist=todolist)\n        return redirect('view_todo_item', pk=todolist_id)\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_id = todo_item.todolist.pk\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todolist_id)\n\n\ndef edit_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        todo_item.title = request.POST.get('title')\n        todo_item.description = request.POST.get('description')\n        todo_item.save()\n        return redirect('view_todo_item', pk=todo_item.todolist.pk)\n    return render(request, 'edit_todo_item.html', {'todo_item': todo_item})\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todo_item.todolist.pk)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        total_tasks = todo_items.count()\n        completed_tasks = todo_items.filter(completed=True).count()\n        incomplete_tasks = total_tasks - completed_tasks\n\n        context['total_tasks'] = total_tasks\n        context['completed_tasks'] = completed_tasks\n        context['incomplete_tasks'] = incomplete_tasks\n\n        # Data for Chart.js\n        context['task_completion_labels'] = ['Completed', 'Incomplete']\n        context['task_completion_data'] = [completed_tasks, incomplete_tasks]\n\n        # Example distribution data (you can customize this logic)\n        todo_lists = TodoList.objects.all()\n        context['task_distribution_labels'] = [todo_list.title for todo_list in todo_lists]\n        context['task_distribution_data'] = [todo_list.todoitem_set.count() for todo_list in todo_lists]\n\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1 id=\"analysis-title\" class=\"analysis-title\">Task Analysis</h1>\n\n    <div id=\"task-completion-chart-container\" class=\"chart-container\">\n        <canvas id=\"taskCompletionChart\"></canvas>\n    </div>\n\n    <div id=\"task-distribution-chart-container\" class=\"chart-container\">\n        <canvas id=\"taskDistributionChart\"></canvas>\n    </div>\n\n    <a id=\"return-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Return to Home</a>\n\n    <script>\n        const taskCompletionCtx = document.getElementById('taskCompletionChart').getContext('2d');\n        const taskCompletionChart = new Chart(taskCompletionCtx, {\n            type: 'pie',\n            data: {\n                labels: {{ task_completion_labels|safe }},\n                datasets: [{\n                    label: 'Task Completion',\n                    data: {{ task_completion_data|safe }},\n                    backgroundColor: [\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(255, 99, 132, 0.2)',\n                    ],\n                    borderColor: [\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(255, 99, 132, 1)',\n                    ],\n                    borderWidth: 1\n                }]\n            },\n        });\n\n        const taskDistributionCtx = document.getElementById('taskDistributionChart').getContext('2d');\n        const taskDistributionChart = new Chart(taskDistributionCtx, {\n            type: 'bar',\n            data: {\n                labels: {{ task_distribution_labels|safe }},\n                datasets: [{\n                    label: 'Task Distribution',\n                    data: {{ task_distribution_data|safe }},\n                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <h1 id=\"edit-todo-title\" class=\"edit-todo-title\">Edit Todo List</h1>\n    <form id=\"edit-todo-form\" class=\"edit-todo-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo_list.title }}\"><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\">{{ todo_list.description }}</textarea><br><br>\n        <button id=\"submit-edit-todo\" class=\"submit-button\" type=\"submit\">Save</button>\n    </form>\n     <a id=\"cancel-edit\" class=\"cancel-link\" href=\"{% url 'todo_list' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <h1 id=\"edit-item-title\" class=\"edit-item-title\">Edit Todo Item</h1>\n    <form id=\"edit-item-form\" class=\"edit-item-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo_item.title }}\"><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\">{{ todo_item.description }}</textarea><br><br>\n        <button id=\"submit-edit-item\" class=\"submit-button\" type=\"submit\">Save</button>\n    </form>\n    <a id=\"cancel-edit-item\" class=\"cancel-link\" href=\"{% url 'view_todo_item' pk=todo_item.todolist.pk %}\">Cancel</a>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"welcome-message\" class=\"welcome-message\">Welcome to the Todo App!</h1>\n    <nav>\n        <ul id=\"navigation-list\" class=\"navigation-list\">\n            <li id=\"nav-todo-list\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'todo_list' %}\">View Todo Lists</a></li>\n            <li id=\"nav-analysis\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'analysis' %}\">View Analysis</a></li>\n        </ul>\n    </nav>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <h1 id=\"task-list-title\" class=\"task-list-title\">Todo List: {{ todolist.title }}</h1>\n    <ul id=\"task-list\" class=\"task-list\">\n        {% for item in todoitem_list %}\n            <li id=\"task-item-{{ item.pk }}\" class=\"task-item\">\n                {% if item.completed %}\n                    <span id=\"task-title-{{ item.pk }}\" class=\"task-title completed\">{{ item.title }}</span>\n                {% else %}\n                    <span id=\"task-title-{{ item.pk }}\" class=\"task-title\">{{ item.title }}</span>\n                {% endif %}\n                <div id=\"task-actions-{{ item.pk }}\" class=\"task-actions\">\n                    <a id=\"edit-task-{{ item.pk }}\" class=\"edit-link\" href=\"{% url 'edit_todo_item' pk=item.pk %}\">Edit</a>\n                    <a id=\"delete-task-{{ item.pk }}\" class=\"delete-link\" href=\"{% url 'delete_todo_item' pk=item.pk %}\">Delete</a>\n                   <a id=\"complete-task-{{ item.pk }}\" class=\"complete-link\" href=\"{% url 'complete_todo_item' pk=item.pk %}\">{% if item.completed %}Mark Incomplete{% else %}Mark Complete{% endif %}</a>\n\n                </div>\n            </li>\n        {% empty %}\n            <li id=\"no-tasks-message\" class=\"no-tasks-message\">No tasks in this list.</li>\n        {% endfor %}\n    </ul>\n\n    <h2 id=\"add-task-title\" class=\"add-task-title\">Add a New Task</h2>\n    <form id=\"add-task-form\" class=\"add-task-form\" method=\"post\" action=\"{% url 'view_todo_item' pk=todolist.pk %}\">\n        {% csrf_token %}\n        <label for=\"new-task-title\">Title:</label><br>\n        <input type=\"text\" id=\"new-task-title\" name=\"title\"><br>\n        <label for=\"new-task-description\">Description:</label><br>\n        <textarea id=\"new-task-description\" name=\"description\"></textarea><br><br>\n        <button id=\"submit-new-task\" class=\"submit-button\" type=\"submit\">Add Task</button>\n    </form>\n     <a id=\"back-to-lists\" class=\"back-link\" href=\"{% url 'todo_list' %}\">Back to Todo Lists</a>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body>\n    <h1 id=\"todo-lists-title\" class=\"todo-lists-title\">Todo Lists</h1>\n    <ul id=\"todo-list-items\" class=\"todo-list-items\">\n        {% for list in object_list %}\n        <li id=\"todo-list-{{ list.pk }}\" class=\"todo-list-item\">\n            <a id=\"list-title-{{ list.pk }}\" class=\"list-title-link\" href=\"{% url 'view_todo_item' pk=list.pk %}\">{{ list.title }}</a>\n            <div id=\"list-actions-{{ list.pk }}\" class=\"list-actions\">\n               <a id=\"edit-list-{{ list.pk }}\" class=\"edit-link\" href=\"{% url 'edit_todo' pk=list.pk %}\">Edit</a>\n               <a id=\"delete-list-{{ list.pk }}\" class=\"delete-link\" href=\"{% url 'delete_todo' pk=list.pk %}\">Delete</a>\n            </div>\n\n        </li>\n        {% empty %}\n            <li id=\"no-lists-message\" class=\"no-lists-message\">No todo lists yet.</li>\n        {% endfor %}\n    </ul>\n\n    <h2 id=\"add-list-title\" class=\"add-list-title\">Add a New Todo List</h2>\n    <form id=\"add-list-form\" class=\"add-list-form\" method=\"post\" action=\"{% url 'todo_list' %}\">\n        {% csrf_token %}\n        <label for=\"new-list-title\">Title:</label><br>\n        <input type=\"text\" id=\"new-list-title\" name=\"title\"><br>\n        <label for=\"new-list-description\">Description:</label><br>\n        <textarea id=\"new-list-description\" name=\"description\"></textarea><br><br>\n        <button id=\"submit-new-list\" class=\"submit-button\" type=\"submit\">Add List</button>\n    </form>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "expense_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.utils import timezone\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n    class Meta:\n        verbose_name_plural = \"Categories\"\n\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n    date = models.DateField(default=timezone.now)\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=200)\n    message = models.TextField()\n    date_submitted = models.DateTimeField(default=timezone.now)\n\n    def __str__(self):\n        return f'Support request from {self.name} ({self.email})'"}, {"file": "urls.py", "path": "expense_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('signup/', views.SignupView.as_view(), name='signup'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),\n    path('charts/', views.ChartsView.as_view(), name='charts'),\n    path('settings/', views.SettingsView.as_view(), name='settings'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('download_report/', views.DownloadReportView.as_view(), name='download_report'),\n    path('add_transaction/', views.AddTransactionView.as_view(), name='add_transaction'),\n]"}, {"file": "views.py", "path": "expense_app/views.py", "code": "import csv\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib import messages\nfrom .models import Transaction, Category, SupportRequest\nfrom django.urls import reverse\nfrom django.db.models import Sum\nfrom django.utils import timezone\nfrom .forms import LoginForm, SignupForm, TransactionForm, SupportRequestForm, SettingsForm\n\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    pass\n\n\nclass HomeView(View):\n    def get(self, request):\n        if request.user.is_authenticated:\n            return redirect('dashboard')\n        return render(request, 'expense_app/home.html')\n\n\nclass LoginView(View):\n    def get(self, request):\n        form = LoginForm()\n        return render(request, 'expense_app/login.html', {'form': form})\n\n    def post(self, request):\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            password = form.cleaned_data['password']\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')\n            else:\n                messages.error(request, 'Invalid username or password.')\n        return render(request, 'expense_app/login.html', {'form': form})\n\n\nclass SignupView(View):\n    def get(self, request):\n        form = SignupForm()\n        return render(request, 'expense_app/signup.html', {'form': form})\n\n    def post(self, request):\n        form = SignupForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n        return render(request, 'expense_app/signup.html', {'form': form})\n\n\nclass LogoutView(LoginRequiredView):\n    def get(self, request):\n        logout(request)\n        return redirect('home')\n\n\nclass DashboardView(LoginRequiredView):\n    def get(self, request):\n        transactions = Transaction.objects.filter(user=request.user).order_by('-date')\n        form = TransactionForm(user=request.user)  # Pass the user to the form\n        return render(request, 'expense_app/dashboard.html', {'transactions': transactions, 'form':form})\n\n\n\nclass AddTransactionView(LoginRequiredView):\n    def post(self, request):\n        form = TransactionForm(request.user, request.POST) #pass user to form\n        if form.is_valid():\n            transaction = form.save(commit=False)\n            transaction.user = request.user\n            transaction.save()\n            messages.success(request, 'Transaction added successfully.')\n            return HttpResponseRedirect(reverse('dashboard'))\n        else:\n            messages.error(request, \"Invalid Transaction Data\")\n            transactions = Transaction.objects.filter(user=request.user).order_by('-date')\n            #return render(request, 'expense_app/dashboard.html', {'transactions': transactions, 'form': form})\n            return HttpResponseRedirect(reverse('dashboard'))\n\n\nclass ChartsView(LoginRequiredView):\n    def get(self, request):\n        transactions = Transaction.objects.filter(user=request.user)\n\n        # Aggregate data by category\n        category_data = transactions.values('category__name').annotate(total=Sum('amount')).order_by('category__name')\n\n        # Aggregate data by month\n        date_data = transactions.annotate(month=models.functions.TruncMonth('date')).values('month').annotate(total=Sum('amount')).order_by('month')\n\n        # Prepare data for Chart.js\n        category_labels = [item['category__name'] for item in category_data]\n        category_values = [float(item['total']) for item in category_data]  # Convert Decimal to float\n\n        date_labels = [item['month'].strftime('%Y-%m') for item in date_data]\n        date_values = [float(item['total']) for item in date_data]  # Convert Decimal to float\n\n\n        return render(request, 'expense_app/charts.html', {\n            'category_labels': category_labels,\n            'category_values': category_values,\n            'date_labels': date_labels,\n            'date_values': date_values,\n        })\n\n\nclass SettingsView(LoginRequiredView):\n    def get(self, request):\n        form = SettingsForm(instance=request.user)\n        return render(request, 'expense_app/settings.html', {'form': form})\n\n    def post(self, request):\n        form = SettingsForm(request.POST, instance=request.user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Settings updated successfully.')\n            return redirect('settings')\n        return render(request, 'expense_app/settings.html', {'form': form})\n\n\nclass SupportView(LoginRequiredView):\n    def get(self, request):\n        form = SupportRequestForm()\n        return render(request, 'expense_app/support.html', {'form': form})\n\n    def post(self, request):\n        form = SupportRequestForm(request.POST)\n        if form.is_valid():\n            support_request = form.save(commit=False)\n            support_request.user = request.user\n            support_request.save()\n            messages.success(request, 'Support request submitted successfully.')\n            return redirect('support')\n        return render(request, 'expense_app/support.html', {'form': form})\n\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request):\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = 'attachment; filename=\"expense_report.csv\"'\n\n        writer = csv.writer(response)\n        writer.writerow(['Date', 'Category', 'Amount', 'Description'])\n\n        transactions = Transaction.objects.filter(user=request.user).order_by('date')\n        for transaction in transactions:\n            writer.writerow([\n                transaction.date.strftime('%Y-%m-%d'),\n                transaction.category.name if transaction.category else 'N/A',\n                transaction.amount,\n                transaction.description\n            ])\n\n        return response"}, {"file": "__init__.py", "path": "expense_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "expense_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "expense_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-25 19:06\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django.utils.timezone\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n            ],\n            options={\n                'verbose_name_plural': 'Categories',\n            },\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateField(default=django.utils.timezone.now)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='expense_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('subject', models.CharField(max_length=200)),\n                ('message', models.TextField()),\n                ('date_submitted', models.DateTimeField(default=django.utils.timezone.now)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "charts.html", "path": "expense_app/templates/expense_app/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"charts-title\" class=\"mt-4 mb-3\">Transaction Charts</h1>\n\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <canvas id=\"categoryChart\" width=\"400\" height=\"400\"></canvas>\n            </div>\n            <div class=\"col-md-6\">\n                <canvas id=\"dateChart\" width=\"400\" height=\"400\"></canvas>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        // Category Chart\n        var ctxCategory = document.getElementById('categoryChart').getContext('2d');\n        var categoryChart = new Chart(ctxCategory, {\n            type: 'bar',\n            data: {\n                labels: {{ category_labels|safe }},\n                datasets: [{\n                    label: 'Total Amount by Category',\n                    data: {{ category_values|safe }},\n                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n\n        // Date Chart\n        var ctxDate = document.getElementById('dateChart').getContext('2d');\n        var dateChart = new Chart(ctxDate, {\n            type: 'line',\n            data: {\n                labels: {{ date_labels|safe }},\n                datasets: [{\n                    label: 'Total Amount by Month',\n                    data: {{ date_values|safe }},\n                    backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                    borderColor: 'rgba(255, 99, 132, 1)',\n                    borderWidth: 1\n                }]\n            },\n             options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n    <a href=\"{% url 'dashboard' %}\" id=\"back-to-dashboard\" class=\"btn btn-secondary\">Back to Dashboard</a>\n</body>\n</html>"}, {"file": "dashboard.html", "path": "expense_app/templates/expense_app/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"dashboard-title\" class=\"mt-4\">Dashboard</h1>\n\n        <div id=\"add-transaction-section\" class=\"card mb-4\">\n            <div class=\"card-header\">\n                Add Transaction\n            </div>\n            <div class=\"card-body\">\n                <form method=\"post\" action=\"{% url 'add_transaction' %}\" id=\"add-transaction-form\">\n                    {% csrf_token %}\n                    {{ form.as_p }}\n                    <button type=\"submit\" id=\"add-transaction-button\" class=\"btn btn-primary\">Add Transaction</button>\n                </form>\n            </div>\n        </div>\n\n\t<div id=\"transactions-section\" class=\"mb-4\">\n            <h2 id=\"transactions-heading\">Transactions</h2>\n        \t<table id=\"transactions-table\" class=\"table\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Category</th>\n                    <th>Amount</th>\n                    <th>Description</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for transaction in transactions %}\n                <tr id=\"transaction-{{ transaction.id }}\" class=\"transaction-row\">\n                    <td>{{ transaction.date }}</td>\n                    <td>{{ transaction.category.name|default:\"N/A\" }}</td>\n                    <td>{{ transaction.amount }}</td>\n                    <td>{{ transaction.description|default:\"-\" }}</td>\n                </tr>\n                {% empty %}\n                <tr>\n                    <td colspan=\"4\" id=\"no-transactions-message\">No transactions yet.</td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n        </div>\n\n        <form method=\"post\" action=\"{% url 'download_report' %}\" id=\"download-report-form\">\n            {% csrf_token %}\n            <button type=\"submit\" id=\"download-report-button\" class=\"btn btn-success\">Download Report</button>\n        </form>\n        <a href=\"{% url 'charts' %}\" id=\"view-charts-link\" class=\"btn btn-info\">View Charts</a>\n\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "expense_app/templates/expense_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"welcome-message\" class=\"mt-4\">Welcome to Expense Tracker</h1>\n        <p id=\"intro-text\">Track your expenses and manage your finances easily.</p>\n        <div id=\"home-buttons\" class=\"mt-4\">\n            <a href=\"{% url 'login' %}\" id=\"login-link\" class=\"btn btn-primary\">Login</a>\n            <a href=\"{% url 'signup' %}\" id=\"signup-link\" class=\"btn btn-secondary\">Signup</a>\n        </div>\n        <div id=\"support-section\" class=\"mt-4\">\n         <p><a id='support-link' href=\"{% url 'support' %}\">Contact Support</a></p>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "login.html", "path": "expense_app/templates/expense_app/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h2 id=\"login-title\">Login</h2>\n        <form method=\"post\" id=\"login-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"login-button\" class=\"btn btn-primary\">Login</button>\n        </form>\n        {% if messages %}\n            <div id=\"messages\" class=\"mt-3\">\n                {% for message in messages %}\n                    <div class=\"alert alert-danger\">{{ message }}</div>\n                {% endfor %}\n            </div>\n        {% endif %}\n        <p id=\"signup-prompt\" class=\"mt-3\">Don't have an account? <a href=\"{% url 'signup' %}\" id=\"signup-link\">Sign up</a></p>\n    </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "expense_app/templates/expense_app/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h2 id=\"settings-title\" class=\"mt-4\">Settings</h2>\n        <form method=\"post\" id=\"settings-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"save-settings-button\" class=\"btn btn-primary\">Save Settings</button>\n        </form>\n                {% if messages %}\n            <div id=\"messages\" class=\"mt-3\">\n                {% for message in messages %}\n                    <div class=\"alert alert-success\">{{ message }}</div>\n                {% endfor %}\n            </div>\n        {% endif %}\n        <a href=\"{% url 'dashboard' %}\" id=\"back-to-dashboard\" class=\"btn btn-secondary\">Back to Dashboard</a>\n    </div>\n</body>\n</html>"}, {"file": "signup.html", "path": "expense_app/templates/expense_app/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h2 id=\"signup-title\">Signup</h2>\n        <form method=\"post\" id=\"signup-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"signup-button\" class=\"btn btn-primary\">Signup</button>\n        </form>\n        <p id=\"login-prompt\" class=\"mt-3\">Already have an account? <a href=\"{% url 'login' %}\" id=\"login-link\">Login</a></p>\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "expense_app/templates/expense_app/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h2 id=\"support-title\">Support</h2>\n        <p id=\"support-info\">If you have any questions or issues, please submit a support request below.</p>\n        <form method=\"post\" id=\"support-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"submit-request-button\" class=\"btn btn-primary\">Submit Request</button>\n        </form>\n         {% if messages %}\n            <div id=\"messages\" class=\"mt-3\">\n                {% for message in messages %}\n                    <div class=\"alert alert-success\">{{ message }}</div>\n                {% endfor %}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "forms.py", "path": "expense_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\nfrom .models import Transaction, Category, SupportRequest\n\n\nclass LoginForm(forms.Form):\n    username = forms.CharField(max_length=150)\n    password = forms.CharField(widget=forms.PasswordInput)\n\n\nclass SignupForm(UserCreationForm):\n    class Meta(UserCreationForm.Meta):\n        model = User\n        fields = ('username', 'email')\n\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['amount', 'category', 'date', 'description']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}),\n        }\n\n    def __init__(self, user, *args, **kwargs):\n        super(TransactionForm, self).__init__(*args, **kwargs)\n        self.fields['category'].queryset = Category.objects.filter(transaction__user=user).distinct() | Category.objects.filter(transaction__isnull=True)\n\n\n\nclass SupportRequestForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = ['name', 'email', 'subject', 'message']\n\n\nclass SettingsForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'first_name', 'last_name']"}, {"file": "admin.py", "path": "expense_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Category, Transaction, SupportRequest\n\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name',)\n\n\n@admin.register(Transaction)\nclass TransactionAdmin(admin.ModelAdmin):\n    list_display = ('user', 'amount', 'category', 'date', 'description')\n    list_filter = ('user', 'category', 'date')\n\n\n@admin.register(SupportRequest)\nclass SupportRequestAdmin(admin.ModelAdmin):\n    list_display = ('user', 'name', 'email', 'subject', 'date_submitted')\n    list_filter = ('user', 'date_submitted')"}, {"file": "settings.py", "path": "expense_tracker/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expense_app',  # Your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'expense_tracker.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('expense_app.urls')),  # Include your app's URLs\n]"}, {"file": "wsgi.py", "path": "expense_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "expense_tracker/__init__.py", "code": ""}], "8": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main function to execute Django command line utilities.\n    \"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Ensure it's installed and available on PYTHONPATH.\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "events/forms.py", "code": "from django import forms\nfrom .models import Event\nfrom django.utils import timezone\n\nclass EventForm(forms.ModelForm):\n    \"\"\"\n    Form for the Event model with custom DateTime field.\n    \"\"\"\n    datetime = forms.DateTimeField(\n        input_formats=['%Y-%m-%dT%H:%M'],\n        widget=forms.DateTimeInput(attrs={'type': 'datetime-local'})\n    )\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']"}, {"file": "models.py", "path": "events/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\n\nclass Event(models.Model):\n    \"\"\"\n    Model representing an event with title, description, and dates.\n    \"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        String representation of the event.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "events/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AddEventView, EditEventView, DeleteEventView, ListEventsView, EventDetailsView, HelpView\n\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('add-event/', AddEventView.as_view(), name='add_event'),\n    path('edit-event/<int:pk>/', EditEventView.as_view(), name='edit_event'),\n    path('delete-event/<int:pk>/', DeleteEventView.as_view(), name='delete_event'),\n    path('view-events/', ListEventsView.as_view(), name='view_events'),\n    path('view-event-details/<int:pk>/', EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', HelpView.faq, name='faq'),\n    path('help/user-guide/', HelpView.user_guide, name='user_guide'),\n]"}, {"file": "views.py", "path": "events/views.py", "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.contrib import messages\nfrom django.urls import reverse\nfrom django.views.generic import ListView, DetailView, UpdateView, DeleteView, CreateView\n\n\nfrom .forms import EventForm\nfrom .models import Event\n\n\nclass HomePageView(View):\n    def get(self, request):\n        now = datetime.now()\n        year = now.year\n        month = now.month\n        cal = calendar.monthcalendar(year, month)\n        events_this_month = Event.objects.filter(datetime__year=year, datetime__month=month)\n\n        context = {\n            'year': year,\n            'month': month,\n            'cal': cal,\n            'events_this_month': events_this_month,\n            'month_name': calendar.month_name[month]\n        }\n        return render(request, 'home.html', context)\n\n\nclass AddEventView(CreateView):\n    model = Event\n    form_class = EventForm\n    template_name = 'add_event.html'\n\n    def get_success_url(self):\n        return reverse('view_events')\n\n\nclass EditEventView(UpdateView):\n    model = Event\n    form_class = EventForm\n    template_name = 'edit_event.html'\n    pk_url_kwarg = 'pk'\n\n    def get_success_url(self):\n        return reverse('view_events')\n\n\nclass DeleteEventView(DeleteView):\n    model = Event\n    template_name = 'delete_event.html'\n    pk_url_kwarg = 'pk'\n\n    def get_success_url(self):\n        return reverse('view_events')\n\n\nclass ListEventsView(ListView):\n    model = Event\n    template_name = 'view_events.html'\n    context_object_name = 'events'\n\n    def get_queryset(self):\n        query = self.request.GET.get('q')\n        if query:\n            return Event.objects.filter(\n                Q(title__icontains=query) | Q(description__icontains=query)\n            ).order_by('datetime')\n        return Event.objects.all().order_by('datetime')\n\n\nclass EventDetailsView(DetailView):\n    model = Event\n    template_name = 'view_event_details.html'\n    context_object_name = 'event'\n    pk_url_kwarg = 'pk'\n\n\nclass HelpView:\n    @staticmethod\n    def faq(request):\n        return render(request, 'faq.html')\n\n    @staticmethod\n    def user_guide(request):\n        return render(request, 'user_guide.html')"}, {"file": "0001_initial.py", "path": "events/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-30 14:30\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "events/migrations/__init__.py", "code": ""}, {"file": "__init__.py", "path": "events/__init__.py", "code": ""}, {"file": "add_event.html", "path": "events/templates/add_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Event</title>\n</head>\n<body>\n    <h1 id=\"add-event-title\" class=\"event-title\">Add New Event</h1>\n    <form method=\"post\" id=\"add-event-form\" class=\"event-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"add-event-submit\" class=\"submit-button\">Add Event</button>\n    </form>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "events/templates/edit_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Event</title>\n</head>\n<body>\n    <h1 id=\"edit-event-title\" class=\"event-title\">Edit Event</h1>\n    <form method=\"post\" id=\"edit-event-form\" class=\"event-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"edit-event-submit\" class=\"submit-button\">Update Event</button>\n    </form>\n</body>\n</html>"}, {"file": "faq.html", "path": "events/templates/faq.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>FAQ</title>\n</head>\n<body>\n    <h1 id=\"faq-title\" class=\"faq-title\">Frequently Asked Questions</h1>\n    <div id=\"faq-content\" class=\"faq-content\">\n        <p>Q: How do I add an event?</p>\n        <p>A: Navigate to the 'Add Event' page and fill out the form.</p>\n        <p>Q: Can I edit an event?</p>\n        <p>A: Yes you can do that.</p>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "events/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n\n        th {\n            background-color: #f2f2f2;\n        }\n\n        .calendar {\n            margin-top: 20px;\n        }\n    .event-dot{\n        height: 10px;\n        width: 10px;\n        background-color: blue;\n        border-radius: 50%;\n        display: inline-block;\n      }\n    </style>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">Welcome to the Calendar</h1>\n\n    <div id=\"calendar-container\" class=\"calendar\">\n        <h2 id=\"calendar-month-year\" class=\"calendar-month-year\">{{ month_name }} {{ year }}</h2>\n        <table id=\"calendar-table\" class=\"calendar-table\">\n            <thead>\n                <tr>\n                    {% for day in \"Mon Tue Wed Thu Fri Sat Sun\".split %}\n                        <th id=\"calendar-header-{{ day }}\" class=\"calendar-header\">{{ day }}</th>\n                    {% endfor %}\n                </tr>\n            </thead>\n            <tbody>\n                {% for week in cal %}\n                    <tr>\n                        {% for day in week %}\n                            {% if day != 0 %}\n                               <td id=\"calendar-day-{{ day }}\" class=\"calendar-day\">{{ day }}\n                                {% for event in events_this_month %}\n                                  {% if event.datetime.day == day %}\n                                    <a href=\"{% url 'view_event_details' event.pk %}\"><div class=\"event-dot\"></div></a>\n                                  {% endif %}\n                                {% endfor %}\n                               </td>\n                            {% else %}\n                                <td id=\"calendar-day-empty\" class=\"calendar-day-empty\"></td>\n                            {% endif %}\n                        {% endfor %}\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n     <a href=\"{% url 'add_event' %}\" id=\"add-event-link\" class=\"add-event-link\">Add Event</a>\n</body>\n</html>"}, {"file": "user_guide.html", "path": "events/templates/user_guide.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>User Guide</title>\n</head>\n<body>\n    <h1 id=\"user-guide-title\" class=\"user-guide-title\">User Guide</h1>\n    <div id=\"user-guide-content\" class=\"user-guide-content\">\n        <h2>Adding Events</h2>\n        <p>To add a new event, click on the \"Add Event\" link and fill in the details.</p>\n        <h2>Viewing Events</h2>\n        <p>Events are displayed on the calendar. Click on an event dot for details.</p>\n        <h2>Editing and Deleting Events</h2>\n        <p>Go to event detail view, and click the edit/delete button.</p>\n    </div>\n</body>\n</html>"}, {"file": "view_events.html", "path": "events/templates/view_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Event List</title>\n</head>\n<body>\n    <h1 id=\"event-list-title\" class=\"event-list-title\">Event List</h1>\n\n    <form method=\"get\" id=\"search-form\" class=\"search-form\">\n        <input type=\"text\" name=\"q\" id=\"search-input\" class=\"search-input\" placeholder=\"Search events\">\n        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n    </form>\n\n    <ul id=\"event-list\" class=\"event-list\">\n    {% for event in events %}\n        <li id=\"event-item-{{ event.id }}\" class=\"event-item\">\n            <a href=\"{% url 'view_event_details' event.pk %}\" id=\"event-link-{{ event.id }}\" class=\"event-link\">{{ event.title }} - {{ event.datetime|date:\"F j, Y, g:i a\" }}</a>\n        </li>\n    {% empty %}\n        <li id=\"no-events-message\" class=\"no-events-message\">No events found.</li>\n    {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "view_event_details.html", "path": "events/templates/view_event_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Event Details</title>\n</head>\n<body>\n    <h1 id=\"event-details-title\" class=\"event-details-title\">{{ event.title }}</h1>\n    <p id=\"event-details-datetime\" class=\"event-details-datetime\">Date and Time: {{ event.datetime|date:\"F j, Y, g:i a\" }}</p>\n    <p id=\"event-details-description\" class=\"event-details-description\">Description: {{ event.description }}</p>\n    <a href=\"{% url 'edit_event' event.pk %}\" id=\"edit-event-link\" class=\"edit-event-link\">Edit Event</a>\n    <a href=\"{% url 'delete_event' event.pk %}\" id=\"delete-event-link\" class=\"delete-event-link\">Delete Event</a>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "events/templates/delete_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Delete Event</title>\n</head>\n<body>\n <h1>Confirm Delete</h1>\n <p>Are you sure you want to delete \"{{ event.title }}\"?</p>\n <form method=\"post\">\n {% csrf_token %}\n <button type=\"submit\">Confirm Delete</button>\n <a href=\"{% url 'view_events' %}\">Cancel</a>\n </form>\n</body>\n</html>"}, {"file": "asgi.py", "path": "calendar_project/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "calendar_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'events',  # Changed from 'example_app'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('events.urls')),  # Changed from 'example_app'\n]"}, {"file": "wsgi.py", "path": "calendar_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calendar_project/__init__.py", "code": ""}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'\n\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__'"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    company = models.CharField(max_length=100, blank=True)\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=200)\n    message = models.TextField()\n\n    def __str__(self):\n        return self.subject"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\n\nclass PricingPageView(FormView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = '/pricing/'  # Redirect to the same page after successful submission\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Thank you for your inquiry! We will be in touch soon.')\n        return super().form_valid(form)\n\n\nclass SupportView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = '/support/'\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted.')\n        return super().form_valid(form)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['previous_requests'] = SupportRequest.objects.all().order_by('-id')[:5]  # Show last 5 requests\n        return context\n\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ContactSales',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('company', models.CharField(blank=True, max_length=100)),\n                ('message', models.TextField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('subject', models.CharField(max_length=200)),\n                ('message', models.TextField()),\n            ],\n        ),\n    ]"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n</head>\n<body>\n    <h1 id=\"about-heading\" class=\"about-title\">About Us</h1>\n    <p id=\"about-content\" class=\"about-text\">We are a team of passionate developers building an AI Chatbot.</p>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Features</title>\n</head>\n<body>\n    <h1 id=\"features-heading\" class=\"features-title\">Features</h1>\n    <ul id=\"features-list\" class=\"features-list\">\n        <li id=\"feature-1\" class=\"feature-item\">Feature 1: Natural Language Processing</li>\n        <li id=\"feature-2\" class=\"feature-item\">Feature 2: Machine Learning</li>\n        <li id=\"feature-3\" class=\"feature-item\">Feature 3: 24/7 Availability</li>\n    </ul>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-heading\" class=\"home-title\">Welcome to our AI Chatbot!</h1>\n    <p id=\"home-intro\" class=\"home-text\">Get started with our amazing AI-powered chatbot today.</p>\n    <a id=\"features-link\" class=\"nav-link\" href=\"{% url 'features' %}\">Features</a>\n    <a id=\"pricing-link\" class=\"nav-link\" href=\"{% url 'pricing' %}\">Pricing</a>\n    <a id=\"support-link\" class=\"nav-link\" href=\"{% url 'support' %}\">Support</a>\n     <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Pricing</title>\n</head>\n<body>\n    <h1 id=\"pricing-heading\" class=\"pricing-title\">Pricing Plans</h1>\n    <p id=\"pricing-intro\" class=\"pricing-text\">Choose the plan that best suits your needs.</p>\n\n    <div id=\"plan-1\" class=\"pricing-plan\">\n        <h2 id=\"plan-1-name\" class=\"plan-name\">Basic</h2>\n        <p id=\"plan-1-price\" class=\"plan-price\">$99/month</p>\n    </div>\n\n     <div id=\"plan-2\" class=\"pricing-plan\">\n        <h2 id=\"plan-2-name\" class=\"plan-name\">Pro</h2>\n        <p id=\"plan-2-price\" class=\"plan-price\">$199/month</p>\n    </div>\n\n    <h2 id=\"contact-heading\" class=\"contact-title\">Contact Sales</h2>\n    <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Submit</button>\n    </form>\n     {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n    <h1 id=\"support-heading\" class=\"support-title\">Support</h1>\n    <p id=\"support-intro\" class=\"support-text\">How can we help you?</p>\n\n    <h2 id=\"support-form-heading\" class=\"form-title\">Submit a Support Request</h2>\n    <form id=\"support-form\" class=\"support-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Submit</button>\n    </form>\n\n    {% if messages %}\n        <ul id=\"message-list\" class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n\n\n    <h2 id=\"previous-requests-heading\" class=\"previous-requests-title\">Previous Support Requests</h2>\n    {% if previous_requests %}\n    <ul id=\"request-list\" class=\"request-list\">\n        {% for request in previous_requests %}\n        <li id=\"request-{{ request.id }}\" class=\"request-item\">\n            <p id=\"request-subject-{{ request.id }}\" class=\"request-subject\">Subject: {{ request.subject }}</p>\n            <p id=\"request-message-{{ request.id }}\" class=\"request-message\">Message: {{ request.message }}</p>\n        </li>\n        {% empty %}\n          <p id=\"no-requests-message\" class=\"no-requests\">No previous support requests.</p>\n        {% endfor %}\n    </ul>\n      {% else %}\n        <p>No previous support requests.</p>\n    {% endif %}\n\n</body>\n</html>"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import ContactSales, SupportRequest\n\nadmin.site.register(ContactSales)\nadmin.site.register(SupportRequest)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n# Add this to define the directory for static files\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_review_site.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "project_review_site/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'reviews.apps.ReviewsConfig',  # Use AppConfig for better practice\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_review_site.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_review_site.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "project_review_site/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('reviews.urls')),\n]"}, {"file": "wsgi.py", "path": "project_review_site/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_review_site.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "project_review_site/__init__.py", "code": ""}, {"file": "apps.py", "path": "reviews/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ReviewsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'reviews'"}, {"file": "forms.py", "path": "reviews/forms.py", "code": "from django import forms\nfrom .models import Project, Review\n\n\nclass JSONUploadForm(forms.ModelForm):\n    json_data = forms.JSONField(label='Project JSON Data')\n\n    class Meta:\n        model = Project\n        fields = ['json_data']\n\n\nclass ReviewForm(forms.ModelForm):\n    class Meta:\n        model = Review\n        fields = ['comments', 'rating', 'status']\n        widgets = {\n            'comments': forms.Textarea(attrs={'rows': 4}),\n            'rating': forms.NumberInput(attrs={'min': 1, 'max': 5}),\n        }\n"}, {"file": "models.py", "path": "reviews/models.py", "code": "from django.db import models\nfrom django.core.validators import MinValueValidator, MaxValueValidator\n\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255, unique=True)\n    description = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    json_data = models.JSONField(null=True, blank=True) # Store JSON here\n\n    def __str__(self):\n        return self.name\n\n\nclass Review(models.Model):\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('in_progress', 'In Progress'),\n        ('completed', 'Completed'),\n        ('rejected', 'Rejected'),\n    )\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    reviewer_name = models.CharField(max_length=255, blank=True, null=True)\n    comments = models.TextField(blank=True, null=True)\n    rating = models.IntegerField(validators=[MinValueValidator(1), MaxValueValidator(5)], blank=True, null=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f\"Review for {self.project.name} - {self.status}\""}, {"file": "urls.py", "path": "reviews/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('projects/<int:project_id>/', views.project_detail_view, name='project_detail'),\n    path('projects/<int:project_id>/review/', views.review_project_view, name='review_project'),\n    path('upload/', views.upload_project_view, name='upload_project'),\n]"}, {"file": "views.py", "path": "reviews/views.py", "code": "import json\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse, HttpResponseRedirect, JsonResponse\nfrom .forms import JSONUploadForm, ReviewForm\nfrom .models import Project, Review\nfrom django.contrib import messages\n\ndef home_view(request):\n    projects = Project.objects.all().order_by('-created_at')\n    form = JSONUploadForm()\n    return render(request, 'reviews/home.html', {'projects': projects, 'form': form})\n\n\ndef about_view(request):\n    return render(request, 'reviews/about.html')\n\n\ndef project_detail_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    reviews = project.reviews.all().order_by('-created_at')\n    return render(request, 'reviews/project_detail.html', {'project': project, 'reviews': reviews})\n\n\ndef review_project_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        form = ReviewForm(request.POST)\n        if form.is_valid():\n            review = form.save(commit=False)\n            review.project = project\n            review.save()\n            messages.success(request, 'Review submitted successfully!')\n            return redirect('project_detail', project_id=project.id)\n    else:\n        form = ReviewForm()\n    return render(request, 'reviews/review_project.html', {'project': project, 'form': form})\n\n\ndef upload_project_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST)\n        if form.is_valid():\n            json_data = form.cleaned_data['json_data']\n            try:\n                # Assuming the JSON contains 'name' and optionally 'description'\n                project_name = json_data.get('name')\n                project_description = json_data.get('description', '')\n\n                if not project_name:\n                  messages.error(request, 'Project name is required in JSON data')\n                  return redirect('home')\n                # Check for duplicates\n                if Project.objects.filter(name=project_name).exists():\n                    messages.warning(request, 'A project with this name already exists.  Updating existing Project.')\n                    project = Project.objects.get(name=project_name)\n                    project.json_data = json_data  # Update existing data\n                    project.description = project_description\n                    project.save()\n\n                else:\n\n                    project = Project.objects.create(\n                        name=project_name,\n                        description=project_description,\n                        json_data=json_data\n                    )\n\n                messages.success(request, 'Project uploaded and processed successfully!')\n                return redirect('project_detail', project_id=project.id)\n\n            except Exception as e:\n                messages.error(request, f'Error processing JSON data: {e}')\n                return redirect('home') #stay on upload page\n\n    messages.error(request, \"GET method not allowed\")\n    return redirect('home')\n"}, {"file": "__init__.py", "path": "reviews/__init__.py", "code": ""}, {"file": "__init__.py", "path": "reviews/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "reviews/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-21 19:07\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Project',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255, unique=True)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('json_data', models.JSONField(blank=True, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Review',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('reviewer_name', models.CharField(blank=True, max_length=255, null=True)),\n                ('comments', models.TextField(blank=True, null=True)),\n                ('rating', models.IntegerField(blank=True, null=True)),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='reviews.project')),\n            ],\n        ),\n    ]\n"}, {"file": "0002_alter_review_rating.py", "path": "reviews/migrations/0002_alter_review_rating.py", "code": "# Generated by Django 4.2.7 on 2023-11-22 02:00\n\nimport django.core.validators.MinValueValidator, django.core.validators.MaxValueValidator\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('reviews', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='review',\n            name='rating',\n            field=models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)]),\n        ),\n    ]\n"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Project Review Site{% endblock %}</title>\n     <link rel=\"stylesheet\" href=\"{{ static_url }}\">\n    <style>\n    body { font-family: Arial, sans-serif; margin: 20px; }\n    .navbar { background-color: #f8f9fa; padding: 10px; margin-bottom: 20px; }\n    .navbar a { margin-right: 10px; text-decoration: none; color: #333; }\n    .container { max-width: 960px; margin: auto; }\n    .project-item { border: 1px solid #ddd; padding: 10px; margin-bottom: 10px; }\n    .project-item h2 { margin-top: 0; }\n    .review-item { border: 1px solid #eee; padding: 8px; margin-bottom: 8px; }\n    .btn { background-color: #007bff; color: white; padding: 10px 15px; border: none; border-radius: 5px; cursor: pointer; text-decoration: none;display: inline-block; }\n    .btn-secondary { background-color: #6c757d; }\n    .btn:hover { opacity: 0.8; }\n    .form-group { margin-bottom: 15px; }\n    .form-group label { display: block; margin-bottom: 5px; }\n    .form-control { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; }\n    textarea.form-control { height: 100px; }\n    .alert { padding: 10px; background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; margin-bottom: 15px; }\n    .alert-error { background-color: #f8d7da; color: #721c24; border-color: #f5c6cb; }\n    .upload-section{margin-bottom: 3rem}\n    </style>\n</head>\n<body>\n    <div class=\"navbar\">\n        <a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n        <a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n    </div>\n\n    <div class=\"container\">\n        {% if messages %}\n          {% for message in messages %}\n            <div class=\"alert {% if message.tags %}alert-{{ message.tags }}{% endif %}\">{{ message }}</div>\n          {% endfor %}\n        {% endif %}\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "templates/reviews/home.html", "code": "{% extends 'base.html' %}\n\n{% block title %}Home - Project Review Site{% endblock %}\n\n{% block content %}\n<h1 id=\"home-heading\">Welcome to the Project Review Site</h1>\n\n<div class=\"upload-section\">\n    <h2 id=\"upload-heading\">Upload Project (JSON)</h2>\n    <form id=\"upload-form\" method=\"post\" action=\"{% url 'upload_project' %}\" >\n        {% csrf_token %}\n        <div class=\"form-group\">\n            {{ form.json_data.label_tag }}\n            {{ form.json_data }}\n            {% if form.json_data.errors %}\n                <div class=\"errorlist\">\n                    {% for error in form.json_data.errors %}\n                        <span>{{ error }}</span>\n                    {% endfor %}\n                </div>\n            {% endif %}\n        </div>\n\n        <button id=\"upload-submit\" type=\"submit\" class=\"btn btn-primary\">Upload Project</button>\n    </form>\n</div>\n\n<h2 id=\"projects-heading\">Projects</h2>\n{% if projects %}\n    <ul>\n    {% for project in projects %}\n        <li id=\"project-{{ project.id }}\" class=\"project-item\">\n            <a id=\"project-link-{{ project.id }}\" href=\"{% url 'project_detail' project.id %}\">{{ project.name }}</a>\n             ({{ project.reviews.count }} Reviews)  <a id=\"review-link-{{ project.id }}\" class=\"btn btn-secondary\" href=\"{% url 'review_project' project.id %}\">Review</a>\n\n        </li>\n    {% endfor %}\n    </ul>\n{% else %}\n    <p id=\"no-projects\">No projects available.</p>\n{% endif %}\n{% endblock %}"}, {"file": "about.html", "path": "templates/reviews/about.html", "code": "{% extends 'base.html' %}\n\n{% block title %}About - Project Review Site{% endblock %}\n\n{% block content %}\n<h1 id=\"about-heading\">About</h1>\n<p id=\"about-text\">This is a platform for uploading, reviewing, and managing projects.  Projects are defined using JSON data.</p>\n{% endblock %}"}, {"file": "project_detail.html", "path": "templates/reviews/project_detail.html", "code": "{% extends 'base.html' %}\n\n{% block title %}{{ project.name }} - Project Review Site{% endblock %}\n\n{% block content %}\n<h1 id=\"project-name\">{{ project.name }}</h1>\n<p id=\"project-description\"><strong>Description:</strong> {{ project.description }}</p>\n<p id=\"project-created\"><strong>Created:</strong> {{ project.created_at }}</p>\n<p id=\"project-updated\"><strong>Updated:</strong> {{ project.updated_at }}</p>\n\n<div class=\"review-section\">\n  <h2 id=\"reviews-heading\">Reviews</h2>\n  <a id=\"add-review-button\" class=\"btn btn-primary\" href=\"{% url 'review_project' project.id %}\">Add Review</a>\n\n  {% if reviews %}\n      {% for review in reviews %}\n          <div id=\"review-{{ review.id }}\" class=\"review-item\">\n              <p><strong>Reviewer:</strong> {{ review.reviewer_name|default:\"Anonymous\" }}</p>\n              <p><strong>Status:</strong> {{ review.get_status_display }}</p>\n              <p><strong>Rating:</strong> {{ review.rating|default:\"N/A\" }}</p>\n              <p><strong>Comments:</strong> {{ review.comments|default:\"No comments\" }}</p>\n              <p><strong>Date:</strong> {{ review.created_at }}</p>\n          </div>\n      {% endfor %}\n  {% else %}\n      <p id=\"no-reviews\">No reviews yet.</p>\n  {% endif %}\n</div>\n{% endblock %}"}, {"file": "review_project.html", "path": "templates/reviews/review_project.html", "code": "{% extends 'base.html' %}\n\n{% block title %}Review {{ project.name }} - Project Review Site{% endblock %}\n\n{% block content %}\n<h1 id=\"review-heading\">Review Project: {{ project.name }}</h1>\n\n<form id=\"review-form\" method=\"post\" action=\"{% url 'review_project' project.id %}\">\n    {% csrf_token %}\n    <div class=\"form-group\">\n        <label for=\"{{ form.reviewer_name.id_for_label }}\">Reviewer Name:</label>\n        {{ form.reviewer_name|default:\"\" }}\n    </div>\n    <div class=\"form-group\">\n        <label for=\"{{ form.comments.id_for_label }}\">Comments:</label>\n        {{ form.comments }}\n    </div>\n    <div class=\"form-group\">\n        <label for=\"{{ form.rating.id_for_label }}\">Rating (1-5):</label>\n        {{ form.rating }}\n    </div>\n    <div class=\"form-group\">\n        <label for=\"{{ form.status.id_for_label }}\">Status:</label>\n        {{ form.status }}\n    </div>\n    <button id=\"submit-review\" type=\"submit\" class=\"btn btn-primary\">Submit Review</button>\n</form>\n{% endblock %}"}, {"file": "style.css", "path": "static/css/style.css", "code": "/* Basic styling - you'll likely want to expand on this */\nbody {\n    font-family: sans-serif;\n}\n"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom .models import Claim, Budget\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'status', 'created_at')\n    list_filter = ('status', 'category')\n    search_fields = ('user__username', 'description')\n    actions = ['approve_claims', 'reject_claims']\n\n    def operations(self, obj):\n        return format_html(\n            '<a class=\"button\" href=\"{}/change/\">Edit</a>&nbsp;'\n            '<a class=\"button\" href=\"{}/delete/\">Delete</a>',\n            obj.id, obj.id\n        )\n\n    operations.short_description = 'Operations'\n    operations.allow_tags = True\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='approved')\n        self.message_user(request, f'{queryset.count()} claims approved.')\n\n    approve_claims.short_description = 'Approve selected claims'\n\n    def reject_claims(self, request, queryset):\n        queryset.update(status='rejected')\n        self.message_user(request, f'{queryset.count()} claims rejected.')\n\n    reject_claims.short_description = 'Reject selected claims'\n\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit', 'spent')\n\n    def spent(self, obj):\n        total_spent = Claim.objects.filter(category=obj.category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        return total_spent\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 4}),\n        }\n\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'password', 'password2']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\n\n\nclass Budget(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.category\n\n\nclass Claim(models.Model):\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    )\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)  # Optional reason\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f\"Claim {self.id} by {self.user.username}\""}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget, Claim\nfrom django.db.models import Sum\n\ndef check_budget_limit(category, amount):\n    budget = Budget.objects.get(category=category)\n    approved_claims_sum = Claim.objects.filter(category=category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n    return (approved_claims_sum + amount) <= budget.limit"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login, authenticate, logout\nfrom django.contrib.auth.forms import AuthenticationForm\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom .utils import check_budget_limit\n\n\ndef home(request):\n    if request.user.is_authenticated:\n      return redirect('claim_status')\n    return render(request, 'home.html')\n\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            messages.success(request, \"Registration successful.\")\n            return redirect('home')\n        messages.error(request, \"Unsuccessful registration. Invalid information.\")\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                messages.info(request, f\"You are now logged in as {username}.\")\n                return redirect('claim_status')\n            else:\n                messages.error(request, \"Invalid username or password.\")\n        else:\n            messages.error(request, \"Invalid username or password.\")\n    form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Your claim has been submitted.')\n                return redirect('claim_status')\n\n            else:\n              messages.error(request, 'Claim exceeds budget limit.')\n\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user).order_by('-created_at')\n    return render(request, 'claim_status.html', {'claims': claims})\n\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, id=claim_id, user=request.user)\n    if claim.status != 'pending':\n        messages.warning(request, \"You can only edit pending claims.\")\n        return redirect('claim_status')\n\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n          updated_claim = form.save(commit=False)\n          if check_budget_limit(updated_claim.category, updated_claim.amount):\n            form.save()\n            messages.success(request, 'Your claim has been updated.')\n            return redirect('claim_status')\n          else:\n             messages.error(request,'Claim exceeds the budget limit.')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, id=claim_id, user=request.user)\n    if request.method == 'POST':\n        claim.delete()\n        messages.success(request, 'Claim deleted successfully.')\n        return redirect('claim_status')\n    return render(request, 'claim_status.html') # Or a dedicated confirmation page.\n\n\n@login_required\ndef analysis_view(request):\n    budgets = Budget.objects.all()\n    analysis_data = []\n\n    for budget in budgets:\n        approved_claims_sum = Claim.objects.filter(category=budget.category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        remaining_budget = budget.limit - approved_claims_sum\n        analysis_data.append({\n            'category': budget.category,\n            'limit': budget.limit,\n            'spent': approved_claims_sum,\n            'remaining': remaining_budget,\n        })\n\n    return render(request, 'analysis.html', {'analysis_data': analysis_data})\n\n\ndef logout_view(request):\n  logout(request)\n  messages.info(request, \"Logged out successfully!\")\n  return redirect('home')"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-21 19:38\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Analysis Report</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid black;\n            padding: 8px;\n            text-align: left;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"analysis-title\" class=\"analysis-title\">Analysis Report</h1>\n    <table id=\"analysis-table\" class=\"analysis-table\">\n        <thead>\n            <tr>\n                <th id=\"category-header\" class=\"category-header\">Category</th>\n                <th id=\"limit-header\" class=\"limit-header\">Budget Limit</th>\n                <th id=\"spent-header\" class=\"spent-header\">Total Spent</th>\n                <th id=\"remaining-header\" class=\"remaining-header\">Remaining Budget</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for data in analysis_data %}\n            <tr id=\"data-row-{{ forloop.counter }}\" class=\"data-row\">\n                <td id=\"category-{{ forloop.counter }}\" class=\"category-cell\">{{ data.category }}</td>\n                <td id=\"limit-{{ forloop.counter }}\" class=\"limit-cell\">{{ data.limit }}</td>\n                <td id=\"spent-{{ forloop.counter }}\" class=\"spent-cell\">{{ data.spent }}</td>\n                <td id=\"remaining-{{ forloop.counter }}\" class=\"remaining-cell\">{{ data.remaining }}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Accounting System{% endblock %}</title>\n     <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n        }\n        header {\n            background: #50b3a2;\n            color: white;\n            padding-top: 30px;\n            min-height: 70px;\n            border-bottom: #e8491d 3px solid;\n        }\n        header a {\n            color: #ffffff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-size: 16px;\n        }\n        header ul {\n            padding: 0;\n            margin: 0;\n        }\n        header li {\n            float: left;\n            display: inline;\n            padding: 0 20px 0 20px;\n        }\n        header #branding {\n            float: left;\n        }\n        header #branding h1 {\n            margin: 0;\n        }\n        header nav {\n            float: right;\n            margin-top: 10px;\n        }\n        .messages {\n          list-style: none;\n          padding: 0;\n        }\n        .messages li{\n          padding: 10px;\n          margin-bottom:5px;\n          border-radius:4px\n        }\n\n        .success {\n            background-color: #dff0d8;\n            border: 1px solid #3c763d;\n            color: #3c763d;\n        }\n\n        .error {\n            background-color: #f2dede;\n            border: 1px solid #a94442;\n            color: #a94442;\n        }\n         .warning {\n            background-color: #fcf8e3;\n            border: 1px solid #8a6d3b;\n            color: #8a6d3b;\n        }\n         .info {\n            background-color: #d9edf7;\n            border: 1px solid #31708f;\n            color: #31708f;\n        }\n\n\n    </style>\n</head>\n<body>\n    <header>\n        <div class=\"container\">\n            <div id=\"branding\">\n                <h1 id=\"site-title\"><a href=\"{% url 'home' %}\" id=\"home-link\">Accounting System</a></h1>\n            </div>\n            <nav>\n                <ul id=\"navigation-list\">\n                    {% if user.is_authenticated %}\n                    <li id=\"nav-claim-status\"><a href=\"{% url 'claim_status' %}\" id=\"claim-status-link\">Claim Status</a></li>\n                    <li id=\"nav-submit-claim\"><a href=\"{% url 'submit_claim' %}\" id=\"submit-claim-link\">Submit Claim</a></li>\n                    <li id=\"nav-analysis\"><a href=\"{% url 'analysis' %}\" id=\"analysis-link\">Analysis</a></li>\n                    <li id=\"nav-logout\"><a href=\"{% url 'logout' %}\" id=\"logout-link\">Logout</a></li>\n                    {% else %}\n                    <li id=\"nav-login\"><a href=\"{% url 'login' %}\" id=\"login-link\">Login</a></li>\n                    <li id=\"nav-signup\"><a href=\"{% url 'signup' %}\" id=\"signup-link\">Signup</a></li>\n                    {% endif %}\n                </ul>\n            </nav>\n        </div>\n    </header>\n     <div class=\"container\">\n      {% if messages %}\n        <ul class=\"messages\" id=\"message-list\">\n            {% for message in messages %}\n            <li  class=\"{{ message.tags }}\" id=\"message-{{ forloop.counter}}\">{{ message }}</li>\n            {% endfor %}\n        </ul>\n      {% endif %}\n\n      {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n<h2 id=\"edit-claim-title\">Edit Claim</h2>\n<form method=\"post\" id=\"edit-claim-form\">\n    {% csrf_token %}\n    <div id=\"form-fields\">\n      {{ form.as_p }}\n    </div>\n    <button type=\"submit\" id=\"submit-edited-claim\">Update Claim</button>\n</form>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n<h2 id=\"claim-status-title\">Claim Status</h2>\n<table id=\"claims-table\">\n    <thead>\n        <tr>\n            <th id=\"claim-id-header\">ID</th>\n            <th id=\"category-header\">Category</th>\n            <th id=\"amount-header\">Amount</th>\n            <th id=\"status-header\">Status</th>\n            <th id=\"created-at-header\">Created At</th>\n            <th id=\"actions-header\">Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        {% for claim in claims %}\n        <tr id=\"claim-row-{{ claim.id }}\">\n            <td id=\"claim-id-{{ claim.id }}\">{{ claim.id }}</td>\n            <td id=\"claim-category-{{ claim.id }}\">{{ claim.category }}</td>\n            <td id=\"claim-amount-{{ claim.id }}\">{{ claim.amount }}</td>\n            <td id=\"claim-status-{{ claim.id }}\">{{ claim.status }}</td>\n            <td id=\"claim-created-{{ claim.id }}\">{{ claim.created_at }}</td>\n            <td id=\"claim-actions-{{ claim.id }}\">\n                {% if claim.status == 'pending' %}\n                <a href=\"{% url 'edit_claim' claim.id %}\" id=\"edit-claim-{{ claim.id }}\">Edit</a>\n                <form action=\"{% url 'delete_claim' claim.id %}\" method=\"post\" style=\"display:inline;\" id=\"delete-claim-form-{{claim.id}}\">\n                  {% csrf_token %}\n                  <button type=\"submit\" id=\"delete-claim-{{claim.id}}\" onclick=\"return confirm('Are you sure you want to delete this claim?')\">Delete</button>\n                </form>\n                {% endif %}\n            </td>\n        </tr>\n        {% empty %}\n        <tr>\n            <td colspan=\"6\" id=\"no-claims\">No claims submitted yet.</td>\n        </tr>\n        {% endfor %}\n    </tbody>\n</table>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Accounting and Cashier Management - Home</title>\n</head>\n<body>\n    <h1 id=\"welcome-message\">Welcome to the Accounting and Cashier Management System</h1>\n    <p id=\"intro-paragraph\">Please <a href=\"{% url 'login' %}\" id=\"login-link\">login</a> or <a href=\"{% url 'signup' %}\" id=\"signup-link\">sign up</a> to continue.</p>\n</body>\n</html>"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Accounting and Cashier Management</title>\n</head>\n<body>\n    <h2 id=\"login-title\">Login</h2>\n    <form method=\"post\" id=\"login-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"login-button\">Login</button>\n    </form>\n</body>\n</html>"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Accounting and Cashier Management</title>\n</head>\n<body>\n    <h2 id=\"signup-title\">Sign Up</h2>\n    <form method=\"post\" id=\"signup-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"signup-button\">Sign Up</button>\n    </form>\n    <p id=\"login-prompt\">Already have an account? <a href=\"{% url 'login' %}\" id=\"login-link\">Login here</a>.</p>\n</body>\n</html>"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n<h2 id=\"submit-claim-title\">Submit Claim</h2>\n<form method=\"post\" id=\"submit-claim-form\">\n    {% csrf_token %}\n    <div id=\"form-fields\">\n    {{ form.as_p }}\n    </div>\n    <button type=\"submit\" id=\"submit-button\">Submit</button>\n</form>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'\nLOGIN_REDIRECT_URL = '/claim_status/'\nLOGOUT_REDIRECT_URL = '/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n    path('logout/', auth_views.LogoutView.as_view(), name='logout'),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Our app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')), # Include app urls\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    def get(self, request):\n        return render(request, 'hello_world.html', {'message': 'Hello, World!'})\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HelloWorldView\n\nurlpatterns = [\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <h1 id=\"message-header\" class=\"message-header\">{{ message }}</h1>\n</body>\n</html>"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\nh1 {\n    color: #333;\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    background-color: white;\n}\n"}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='transactions')\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.amount} - {self.date}'\n\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='support_requests')\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.name} - {self.email}'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-13 19:00\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_requests', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column; /* Stack items vertically */\n    justify-content: center; /* Center vertically */\n    align-items: center; /* Center horizontally */\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n    margin-bottom: 20px; /* Add some space below the heading */\n}\n\n.button {\n    display: inline-block;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    text-decoration: none;\n    border-radius: 5px;\n    margin-top: 10px; /* Add space above the button */\n}\n\n.button:hover {\n     background-color: #0056b3; /* Darker shade on hover*/\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <h1 id=\"hello-world-heading\" class=\"heading\">Hello World!</h1>\n    <a href=\"{% url 'home' %}\" id=\"back-to-home-button\" class=\"button\">Back to Home</a>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <h1 id=\"home-heading\" class=\"heading\">Welcome to the Home Page</h1>\n    <a href=\"{% url 'helloworld' %}\" id=\"go-to-helloworld-button\" class=\"button\">Go to Hello World</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n\n# This setting is only needed if you have a 'static' folder *inside* your app directory\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'example_app', 'static')\n]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),  # Include your app's URLs\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Category, Transaction, SupportRequest\n\n# Register your models here.\nadmin.site.register(Category)\nadmin.site.register(Transaction)\nadmin.site.register(SupportRequest)"}]}