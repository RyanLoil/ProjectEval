{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# No models are strictly required for this basic BMI calculator,\n# as we're not storing user data persistently.  We *could* add\n# a model to store BMI calculations if we wanted to track history.\n# For this basic framework, we'll leave it empty.\n\n# Example (if we wanted to store calculations):\n# class BMICalculation(models.Model):\n#     height_cm = models.DecimalField(max_digits=5, decimal_places=2)\n#     weight_kg = models.DecimalField(max_digits=5, decimal_places=2)\n#     bmi = models.DecimalField(max_digits=4, decimal_places=2)\n#     bmi_category = models.CharField(max_length=50)\n#     calculated_at = models.DateTimeField(auto_now_add=True)\n\n#     def __str__(self):\n#         return f\"BMI: {self.bmi} ({self.bmi_category})\""}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    HEIGHT_UNITS = (\n        ('cm', 'Centimeters'),\n        ('in', 'Inches'),\n    )\n    WEIGHT_UNITS = (\n        ('kg', 'Kilograms'),\n        ('lbs', 'Pounds'),\n    )\n\n    height = forms.DecimalField(label='Height', min_value=0, decimal_places=2, widget=forms.NumberInput(attrs={'placeholder': 'Enter height', 'id': 'height', 'class': 'form-control'}))\n    height_unit = forms.ChoiceField(label='Height Unit', choices=HEIGHT_UNITS, initial='cm', widget=forms.Select(attrs={'id': 'height_unit', 'class': 'form-control'}))\n    weight = forms.DecimalField(label='Weight', min_value=0, decimal_places=2, widget=forms.NumberInput(attrs={'placeholder': 'Enter weight', 'id': 'weight', 'class': 'form-control'}))\n    weight_unit = forms.ChoiceField(label='Weight Unit', choices=WEIGHT_UNITS, initial='kg', widget=forms.Select(attrs={'id': 'weight_unit', 'class': 'form-control'}))\n"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\ndef home_page(request):\n    context = {\n        'page_title': 'BMI Calculator Introduction'\n    }\n    return render(request, 'bmi_calculator/home.html', context)\n\n\ndef bmi_calculator_page(request):\n    bmi_result = None\n    bmi_category = None\n    interpretation = None\n\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            height = float(form.cleaned_data['height'])\n            height_unit = form.cleaned_data['height_unit']\n            weight = float(form.cleaned_data['weight'])\n            weight_unit = form.cleaned_data['weight_unit']\n\n            # Convert to metric (cm and kg)\n            if height_unit == 'in':\n                height *= 2.54  # Inches to cm\n            if weight_unit == 'lbs':\n                weight *= 0.453592  # Pounds to kg\n\n            # Calculate BMI\n            if height > 0:  # Avoid division by zero\n                height_m = height / 100  # cm to meters\n                bmi = weight / (height_m ** 2)\n                bmi_result = round(bmi, 2)\n\n                # Determine BMI category\n                if bmi < 18.5:\n                    bmi_category = 'Underweight'\n                    interpretation = \"You are in the underweight range.\"\n                elif 18.5 <= bmi < 25:\n                    bmi_category = 'Normal weight'\n                    interpretation = \"You are in the healthy weight range.\"\n                elif 25 <= bmi < 30:\n                    bmi_category = 'Overweight'\n                    interpretation = \"You are in the overweight range.\"\n                else:\n                    bmi_category = 'Obese'\n                    interpretation = \"You are in the obese range.\"\n    else:\n        form = BMICalculatorForm()\n\n    context = {\n        'form': form,\n        'bmi_result': bmi_result,\n        'bmi_category': bmi_category,\n        'interpretation': interpretation,\n        'page_title': 'BMI Calculator'\n    }\n    return render(request, 'bmi_calculator/bmi_calculator.html', context)\n"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home'),\n    path('calculator/', views.bmi_calculator_page, name='bmi_calculator'),\n]"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi_calculator.urls')),  # Include your app's URLs\n]"}, {"file": "home.html", "path": "bmi_calculator/templates/bmi_calculator/home.html", "code": "{% extends 'bmi_calculator/base.html' %}\n\n{% block content %}\n<h1 id=\"page-title\" class=\"title\">{{ page_title }}</h1>\n<p id=\"intro-text\" class=\"description\">This is a simple BMI (Body Mass Index) calculator.  BMI is a measure of body fat based on height and weight.</p>\n<p id=\"instruction-text\" class=\"description\">To use the calculator, enter your height and weight, and it will calculate your BMI and provide a corresponding category.</p>\n<a id=\"calculator-link\" href=\"{% url 'bmi_calculator' %}\" class=\"btn btn-primary\">Go to BMI Calculator</a>\n{% endblock %}"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "{% extends 'bmi_calculator/base.html' %}\n\n{% block content %}\n<h1 id=\"page-title\" class=\"title\">{{ page_title }}</h1>\n\n<form method=\"post\" id=\"bmi-form\" class=\"bmi-form\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"calculate-button\" class=\"btn btn-primary\">Calculate BMI</button>\n    <button type=\"reset\" id=\"reset-button\" class=\"btn btn-danger\">Reset</button>\n</form>\n\n{% if bmi_result %}\n    <h2 id=\"bmi-result\" class=\"result\">Your BMI: {{ bmi_result }}</h2>\n    <p id=\"bmi-category\" class=\"category\">Category: {{ bmi_category }}</p>\n    {% if interpretation %}\n    <p id=\"bmi-interpretation\" class=\"interpretation\">{{ interpretation }}</p>\n    {% endif %}\n\n{% endif %}\n{% endblock %}"}, {"file": "base.html", "path": "bmi_calculator/templates/bmi_calculator/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n   <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        .form-control {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n       .btn {\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            margin-right: 10px; /* Add some spacing between buttons */\n        }\n        .btn-primary {\n            background-color: #4CAF50;\n            color: white;\n        }\n        .btn-danger {\n            background-color: #f44336; /* Red color for reset button */\n            color: white;\n        }\n        /* Add classes for result elements */\n        .result {\n            margin-top: 20px;\n        }\n        .category, .interpretation {\n            margin-top: 10px;\n        }\n    </style>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key' # Replace with your secret key, keep it secret!\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator', # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Currency(models.Model):\n    id = models.AutoField(primary_key=True)\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.code\n\nclass ExchangeRate(models.Model):\n    id = models.AutoField(primary_key=True)\n    base_currency = models.ForeignKey(Currency, on_delete=models.CASCADE, related_name='base_rates')\n    target_currency = models.ForeignKey(Currency, on_delete=models.CASCADE, related_name='target_rates')\n    rate = models.DecimalField(max_digits=20, decimal_places=6)  # Adjust precision as needed\n    timestamp = models.DateTimeField(auto_now=True) # Automatically update the timestamp\n\n    class Meta:\n        unique_together = ('base_currency', 'target_currency')\n\n    def __str__(self):\n        return f'{self.base_currency} to {self.target_currency}: {self.rate}'\n\nclass UserPreferences(models.Model): #for Setting Page\n    id = models.AutoField(primary_key=True)\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='preferences') # Connect to Django's built in User model\n    default_base_currency = models.ForeignKey(Currency, on_delete=models.SET_NULL, null=True, blank=True, related_name='default_base_users')\n    default_target_currency = models.ForeignKey(Currency, on_delete=models.SET_NULL, null=True, blank=True, related_name='default_target_users')\n    update_frequency = models.IntegerField(default=3600)  # Default update frequency in seconds (e.g., 1 hour)\n\n    def __str__(self):\n         return f'{self.user.username} preferences'"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import JsonResponse\nfrom .models import Currency, ExchangeRate, UserPreferences\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth import login\nimport requests\nimport json\n\n@csrf_exempt\ndef convert_currency(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            base_currency_code = data.get('base_currency')\n            target_currency_code = data.get('target_currency')\n            amount = float(data.get('amount'))\n\n            base_currency = get_object_or_404(Currency, code=base_currency_code)\n            target_currency = get_object_or_404(Currency, code=target_currency_code)\n            \n            exchange_rate_obj = ExchangeRate.objects.filter(base_currency=base_currency, target_currency=target_currency).order_by('-timestamp').first()\n            if not exchange_rate_obj:\n               return JsonResponse({'error': 'Exchange rate not found'}, status=404) \n            exchange_rate = exchange_rate_obj.rate\n            \n            converted_amount = amount * exchange_rate\n            return JsonResponse({'converted_amount': converted_amount, 'exchange_rate': exchange_rate, 'timestamp': exchange_rate_obj.timestamp})\n        except (ValueError, TypeError, Currency.DoesNotExist, json.JSONDecodeError) as e:\n            return JsonResponse({'error': str(e)}, status=400)\n    return JsonResponse({'error': 'Invalid request'}, status=400)\n\n\ndef home_page(request):\n    currencies = Currency.objects.all()\n    context = {\n        'currencies': currencies,\n        'user' : request.user\n    }\n    return render(request, 'currency_converter/home.html', context)\n\n\ndef currency_details(request, currency_code):\n    currency = get_object_or_404(Currency, code=currency_code)\n    historical_rates = ExchangeRate.objects.filter(base_currency=currency).order_by('-timestamp')[:10] #last 10 rate\n    context = {'currency': currency, 'historical_rates': historical_rates}\n    return render(request, 'currency_converter/currency_details.html', context)\n\n\n@login_required\ndef settings_page(request):\n    try:\n      user_preferences = request.user.preferences\n    except UserPreferences.DoesNotExist:\n      user_preferences = UserPreferences.objects.create(user=request.user)\n\n    if request.method == 'POST':\n        base_currency_code = request.POST.get('default_base_currency')\n        target_currency_code = request.POST.get('default_target_currency')\n        update_frequency = request.POST.get('update_frequency')\n\n        if base_currency_code:\n           user_preferences.default_base_currency = get_object_or_404(Currency, code=base_currency_code)\n        if target_currency_code:\n            user_preferences.default_target_currency = get_object_or_404(Currency, code=target_currency_code)\n        if update_frequency:\n           user_preferences.update_frequency = int(update_frequency)\n\n        user_preferences.save()\n        return redirect('settings')\n\n    currencies = Currency.objects.all()\n    context = {\n        'currencies': currencies,\n        'user_preferences': user_preferences,\n    }\n    return render(request, 'currency_converter/settings.html', context)\n\ndef register(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)  # Log the user in\n            return redirect('home')  # Redirect to the home page\n    else:\n        form = UserCreationForm()\n    return render(request, 'registration/register.html', {'form': form})\n\ndef fetch_exchange_rates(api_key, base_currency_code):\n    url = f'https://open.er-api.com/v6/latest/{base_currency_code}'\n    response = requests.get(url)\n    response.raise_for_status()\n    data = response.json()\n    \n    if data['result'] == 'success':\n      base_currency = Currency.objects.get(code=base_currency_code)\n      for target_code, rate in data['rates'].items():\n            try:\n              target_currency, created = Currency.objects.get_or_create(code=target_code)\n              exchange_rate, created = ExchangeRate.objects.update_or_create(\n                base_currency=base_currency, \n                target_currency=target_currency,\n                defaults={'rate': rate}\n              )\n            except Exception as e:\n              print(f\"Error processing {target_code}: {e}\")\n\n    else:\n      raise Exception(f\"API Error: {data.get('error-type')}\")"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('', views.home_page, name='home'),\n    path('convert/', views.convert_currency, name='convert_currency'),\n    path('currency/<str:currency_code>/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings_page, name='settings'),\n    path('register/', views.register, name='register'),\n    path('login/', auth_views.LoginView.as_view(template_name='registration/login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(), name='logout'),\n]"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency, ExchangeRate, UserPreferences\n\nadmin.site.register(Currency)\nadmin.site.register(ExchangeRate)\nadmin.site.register(UserPreferences)"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\nfrom .models import Currency, UserPreferences\n\nclass SettingsForm(forms.ModelForm):\n    class Meta:\n      model = UserPreferences\n      fields = ['default_base_currency', 'default_target_currency', 'update_frequency']"}, {"file": "0001_initial.py", "path": "currency_converter/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-17 14:33\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Currency',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('code', models.CharField(max_length=3, unique=True)),\n                ('name', models.CharField(max_length=100)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='UserPreferences',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('update_frequency', models.IntegerField(default=3600)),\n                ('default_base_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_base_users', to='currency_converter.currency')),\n                ('default_target_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_target_users', to='currency_converter.currency')),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='ExchangeRate',\n            fields=[\n                ('id', models.AutoField(primary_key=True, serialize=False)),\n                ('rate', models.DecimalField(decimal_places=6, max_digits=20)),\n                ('timestamp', models.DateTimeField(auto_now=True)),\n                ('base_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_rates', to='currency_converter.currency')),\n                ('target_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_rates', to='currency_converter.currency')),\n            ],\n            options={\n                'unique_together': {('base_currency', 'target_currency')},\n            },\n        ),\n    ]\n"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n\n    <label for=\"base_currency\">Base Currency:</label>\n    <select id=\"base_currency\" class=\"currency-select\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select>\n\n    <label for=\"target_currency\">Target Currency:</label>\n    <select id=\"target_currency\" class=\"currency-select\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select>\n\n    <label for=\"amount\">Amount:</label>\n    <input type=\"number\" id=\"amount\" class=\"amount-input\" value=\"1\">\n\n    <button onclick=\"convert()\" id=\"convert-button\" class=\"convert-button\">Convert</button>\n\n    <h2 id=\"result-header\" class=\"result-header\">Result:</h2>\n    <p id=\"result\" class=\"result-text\"></p>\n    <p id=\"rate_info\" class=\"rate-info\"></p>\n\n\t{% if user.is_authenticated %}\n        <p>Logged as {{user.username}}</p>\n        <a href=\"{% url 'settings' %}\" id=\"settings-link\" class=\"settings-link\">Settings</a>\n        <a href=\"{% url 'logout' %}\" id=\"logout\" class=\"logout\">Logout</a>\n    {% else %}\n        <a href=\"{% url 'login' %}\" id=\"login-link\" class=\"login-link\">Login</a>\n        <a href=\"{% url 'register' %}\" id=\"register-link\" class=\"register-link\">Register</a>\n    {% endif %}\n\n    <script>\n        async function convert() {\n            const baseCurrency = document.getElementById('base_currency').value;\n            const targetCurrency = document.getElementById('target_currency').value;\n            const amount = document.getElementById('amount').value;\n\n            const response = await fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ base_currency: baseCurrency, target_currency: targetCurrency, amount: amount }),\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                document.getElementById('result').innerText = `Converted Amount: ${data.converted_amount.toFixed(2)}`;\n                document.getElementById('rate_info').innerText = `Exchange Rate: 1 ${baseCurrency} = ${data.exchange_rate} ${targetCurrency} (Last updated: ${data.timestamp})`;\n            } else {\n                document.getElementById('result').innerText = `Error: ${data.error}`;\n            }\n        }\n    </script>\n</body>\n</html>"}, {"file": "currency_details.html", "path": "currency_converter/templates/currency_converter/currency_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Currency Details - {{ currency.code }}</title>\n</head>\n<body>\n  <h1 id=\"currency-details-header\">Currency Details: {{ currency.name }} ({{ currency.code }})</h1>\n\n  <h2 id=\"historical-rates-header\">Historical Exchange Rates</h2>\n    {% if historical_rates %}\n    <ul id=\"historical-rates-list\">\n      {% for rate in historical_rates %}\n      <li class=\"historical-rate-item\">{{ rate.timestamp }} - 1 {{ rate.base_currency.code }} = {{ rate.rate }} {{rate.target_currency.code}}</li>\n      {% endfor %}\n    </ul>\n    {% else %}\n      <p id=\"no-rates-message\">No historical exchange rates available.</p>\n    {% endif %}\n\n  <a href=\"{% url 'home' %}\" id=\"back-to-converter-link\">Back to Converter</a>\n</body>\n</html>"}, {"file": "settings.html", "path": "currency_converter/templates/currency_converter/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n    <h1 id=\"settings-header\">Settings</h1>\n\n    <form method=\"post\" id=\"settings-form\">\n        {% csrf_token %}\n        <label for=\"default_base_currency\">Default Base Currency:</label>\n        <select id=\"default_base_currency\" name=\"default_base_currency\" class=\"currency-select\">\n            <option value=\"\">-- Select --</option>\n            {% for currency in currencies %}\n                <option value=\"{{ currency.code }}\" {% if currency == user_preferences.default_base_currency %}selected{% endif %}>{{ currency.code }} - {{ currency.name }}</option>\n            {% endfor %}\n        </select><br><br>\n\n        <label for=\"default_target_currency\">Default Target Currency:</label>\n        <select id=\"default_target_currency\" name=\"default_target_currency\" class=\"currency-select\">\n            <option value=\"\">-- Select --</option>\n            {% for currency in currencies %}\n               <option value=\"{{ currency.code }}\" {% if currency == user_preferences.default_target_currency %}selected{% endif %}>{{ currency.code }} - {{ currency.name }}</option>\n            {% endfor %}\n        </select><br><br>\n\n        <label for=\"update_frequency\">Update Frequency (seconds):</label>\n        <input type=\"number\" id=\"update_frequency\" name=\"update_frequency\" value=\"{{ user_preferences.update_frequency }}\" class=\"update-frequency-input\"><br><br>\n\n        <button type=\"submit\" id=\"save-settings-button\" class=\"save-button\">Save Settings</button>\n    </form>\n      <a href=\"{% url 'home' %}\" id=\"back-link\" class=\"back-link\">Back to Converter</a>\n</body>\n</html>"}, {"file": "register.html", "path": "currency_converter/templates/registration/register.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Register</title>\n</head>\n<body>\n    <h2>Register</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Register</button>\n    </form>\n</body>\n</html>"}, {"file": "login.html", "path": "currency_converter/templates/registration/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title>Login</title>\n</head>\n<body>\n <h2>Login</h2>\n <form method=\"post\">\n {% csrf_token %}\n {{ form.as_p }}\n <button type=\"submit\">Login</button>\n </form>\n</body>\n</html>"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "currency_converter/migrations/__init__.py", "code": ""}, {"file": "apps.py", "path": "currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'"}, {"file": "tests.py", "path": "currency_converter/tests.py", "code": "from django.test import TestCase, Client\nfrom django.urls import reverse\nfrom .models import Currency, ExchangeRate, UserPreferences\nfrom django.contrib.auth.models import User\nimport json\n\nclass CurrencyConverterTests(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.currency1 = Currency.objects.create(code='USD', name='US Dollar')\n        self.currency2 = Currency.objects.create(code='EUR', name='Euro')\n        self.exchange_rate = ExchangeRate.objects.create(base_currency=self.currency1, target_currency=self.currency2, rate=0.85)\n\n    def test_home_page(self):\n        response = self.client.get(reverse('home'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'Currency Converter')\n        self.assertContains(response, 'USD')\n        self.assertContains(response, 'EUR')\n\n    def test_convert_currency(self):\n        data = {'base_currency': 'USD', 'target_currency': 'EUR', 'amount': '100'}\n        response = self.client.post(reverse('convert_currency'), json.dumps(data), content_type='application/json')\n        self.assertEqual(response.status_code, 200)\n        result = json.loads(response.content)\n        self.assertAlmostEqual(result['converted_amount'], 85.0)  # 100 * 0.85\n        self.assertEqual(result['exchange_rate'], 0.85)\n\n    def test_convert_currency_invalid_currency(self):\n        data = {'base_currency': 'USD', 'target_currency': 'XYZ', 'amount': '100'}\n        response = self.client.post(reverse('convert_currency'), json.dumps(data), content_type='application/json')\n        self.assertEqual(response.status_code, 400)\n\n    def test_convert_currency_no_exchange_rate(self):\n        data = {'base_currency': 'EUR', 'target_currency': 'USD', 'amount': '100'}  # No reverse rate\n        response = self.client.post(reverse('convert_currency'), json.dumps(data), content_type='application/json')\n        self.assertEqual(response.status_code, 404)\n\n\n\n    def test_currency_details(self):\n        response = self.client.get(reverse('currency_details', args=['USD']))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'US Dollar')\n        self.assertContains(response, '0.85')\n\n\n    def test_settings_page_get(self):\n        self.client.login(username='testuser', password='testpassword')\n        response = self.client.get(reverse('settings'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, 'Settings')\n\n    def test_settings_page_post(self):\n        self.client.login(username='testuser', password='testpassword')\n        data = {'default_base_currency': 'EUR', 'default_target_currency': 'USD', 'update_frequency': '7200'}\n        response = self.client.post(reverse('settings'), data)\n        self.assertEqual(response.status_code, 302) #redirect\n\n        user_preferences = UserPreferences.objects.get(user=self.user)\n        self.assertEqual(user_preferences.default_base_currency, self.currency2)\n        self.assertEqual(user_preferences.default_target_currency, self.currency1)\n        self.assertEqual(user_preferences.update_frequency, 7200)\n\n\n    def test_settings_page_not_logged_in(self):\n        response = self.client.get(reverse('settings'))\n        self.assertEqual(response.status_code, 302)  # Redirect to login\n        self.assertRedirects(response, '/login/?next=/settings/')\n\n\n    def test_register_page(self):\n        response = self.client.get(reverse('register'))\n        self.assertEqual(response.status_code, 200)\n\n        data = {'username': 'newuser', 'password': 'newpassword123','password2': 'newpassword123'}\n        response = self.client.post(reverse('register'), data)\n        self.assertEqual(response.status_code, 200) #render if the password field doesn't match.\n\n        data['password2']= data['password'] #match password\n        response = self.client.post(reverse('register'), data)\n        self.assertEqual(response.status_code, 302)  #redirect\n\n\n"}, {"file": "asgi.py", "path": "currency_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_project.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "currency_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "settings.py", "path": "currency_project/settings.py", "code": "from pathlib import Path\nimport os\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'django-insecure-n@%2)79j&p9+@0&ffz@5+@%3&%^&n8=^b!_z&9+s3w5%@v7(o-'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            BASE_DIR / 'templates'\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = 'static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nLOGIN_REDIRECT_URL = 'home'  # Redirect after login\nLOGOUT_REDIRECT_URL = 'home' # Redirect after logout"}, {"file": "urls.py", "path": "currency_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}, {"file": "__init__.py", "path": "currency_project/__init__.py", "code": ""}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}], "3": [{"file": "urls.py", "path": "password_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),\n]"}, {"file": "wsgi.py", "path": "password_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "settings.py", "path": "password_generator_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'django-insecure-z65@n6&b@%&q-!*+@o7&+=y%g$f^b$r2^0@f_d&3m_b&b7%@2s'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator.apps.PasswordGeneratorConfig',  # Use the AppConfig\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = 'static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "asgi.py", "path": "password_generator_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "password_generator_project/__init__.py", "code": ""}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('options/', views.password_options, name='password_options'),\n    path('generate/', views.generate_password, name='generate_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render, redirect\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generate_password(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        use_uppercase = 'uppercase' in request.POST\n        use_lowercase = 'lowercase' in request.POST\n        use_numbers = 'numbers' in request.POST\n        use_symbols = 'symbols' in request.POST\n\n        characters = ''\n        if use_uppercase:\n            characters += string.ascii_uppercase\n        if use_lowercase:\n            characters += string.ascii_lowercase\n        if use_numbers:\n            characters += string.digits\n        if use_symbols:\n            characters += string.punctuation\n\n        if not characters:\n          password = ''  # Handle empty character set\n        else:\n          password = ''.join(random.choice(characters) for i in range(length))\n\n        return render(request, 'generated_password.html', {'password': password})\n    else:  # Handle GET requests. Redirect or show error\n      return redirect('password_options')  # Or show a proper error message on the page itself\n\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "models.py", "path": "password_generator/models.py", "code": "# No models needed for this simple application, but it's good practice to include the file.\nfrom django.db import models"}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "# No models to register, but good practice to include.\nfrom django.contrib import admin"}, {"file": "apps.py", "path": "password_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        nav ul { list-style: none; padding: 0; }\n        nav ul li { display: inline; margin-right: 10px; }\n        .container { max-width: 800px; margin: auto; }\n        .button { background-color: #4CAF50; color: white; padding: 10px 15px; text-decoration: none; border-radius: 5px; display: inline-block; border: none; cursor: pointer;}\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <nav>\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li id=\"nav-home\" class=\"nav-item\"><a href=\"{% url 'home' %}\" class=\"nav-link\">Home</a></li>\n                <li id=\"nav-generate\" class=\"nav-item\"><a href=\"{% url 'password_options' %}\" class=\"nav-link\">Generate</a></li>\n                {% if request.resolver_match.url_name != 'about' %}\n                <li id=\"nav-about\" class=\"nav-item\"><a href=\"{% url 'about' %}\" class=\"nav-link\">About</a></li>\n                {% endif %}\n            </ul>\n        </nav>\n        <hr>\n        {% block content %}\n        {% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"welcome-heading\" class=\"heading\">Welcome to the Password Generator!</h1>\n  <p id=\"welcome-message\" class=\"message\">This website helps you create strong and secure passwords.</p>  <! -- Optional Welcome Message -->\n  <a href=\"{% url 'password_options' %}\" id=\"generate-button-link\"><button id=\"generate-button\" class=\"button\">Generate Password</button></a>\n{% endblock %}"}, {"file": "password_options.html", "path": "templates/password_options.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"options-heading\" class=\"heading\">Password Options</h1>\n  <form method=\"post\" action=\"{% url 'generate_password' %}\" id=\"password-form\" class=\"password-form\">\n    {% csrf_token %}\n    <label for=\"length\" id=\"length-label\">Password Length:</label>\n    <input type=\"number\" id=\"length\" name=\"length\" min=\"1\" value=\"12\" required class=\"input-field\"><br><br>\n\n    <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" checked class=\"checkbox\">\n    <label for=\"uppercase\" id=\"uppercase-label\">Include Uppercase Letters</label><br><br>\n\n    <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" checked class=\"checkbox\">\n    <label for=\"lowercase\" id=\"lowercase-label\">Include Lowercase Letters</label><br><br>\n\n    <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" checked class=\"checkbox\">\n    <label for=\"numbers\" id=\"numbers-label\">Include Numbers</label><br><br>\n\n    <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" checked class=\"checkbox\">\n    <label for=\"symbols\" id=\"symbols-label\">Include Symbols</label><br><br>\n\n    <button type=\"submit\" id=\"generate-submit\" class=\"button\">Generate Password</button>\n  </form>\n{% endblock %}"}, {"file": "generated_password.html", "path": "templates/generated_password.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"generated-heading\" class=\"heading\">Generated Password</h1>\n  <p id=\"result-message\" class=\"message\">Your generated password is:</p>\n  <input type=\"text\" value=\"{{ password }}\" id=\"passwordField\" class=\"input-field\" readonly>\n  <button onclick=\"copyToClipboard()\" id=\"copy-button\" class=\"button\">Copy to Clipboard</button>\n\n  <script>\n    function copyToClipboard() {\n      var copyText = document.getElementById(\"passwordField\");\n      copyText.select();\n      copyText.setSelectionRange(0, 99999); /* For mobile devices */\n      navigator.clipboard.writeText(copyText.value);\n      alert(\"Copied the password: \" + copyText.value);\n    }\n  </script>\n{% endblock %}"}, {"file": "about.html", "path": "templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"about-heading\" class=\"heading\">About</h1>\n  <p id=\"about-text\" class=\"message\">This is a simple password generator website built with Django. It allows you to create strong passwords based on your specified criteria.</p>\n{% endblock %}"}], "4": [{"file": "wsgi.py", "path": "qrcode_project/wsgi.py", "code": "\"\"\"\nWSGI config for qrcode_project project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "qrcode_project/asgi.py", "code": "\"\"\"\nASGI config for qrcode_project project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_project.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "urls.py", "path": "qrcode_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrcode_app.urls'))  # Include app-level URLs\n]"}, {"file": "settings.py", "path": "qrcode_project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'django-insecure-n@g+9v8+@k!r2q3&1+o7=uwg_008-g+8n%=f_x=6t8%1=k7+r5'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcode_app',  # Your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcode_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcode_project.wsgi.application'\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n\n# Media files\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "models.py", "path": "qrcode_app/models.py", "code": "# qrcode_app/models.py\nfrom django.db import models\n\n# No models are strictly *required* for this basic functionality,\n# but you might add one later to store QR code generation history, user data, etc.\n# Example (if you wanted to store generated QR codes):\n# class GeneratedQRCode(models.Model):\n#    text = models.TextField()\n#    image = models.ImageField(upload_to='qrcodes/')\n#    created_at = models.DateTimeField(auto_now_add=True)\n"}, {"file": "views.py", "path": "qrcode_app/views.py", "code": "# qrcode_app/views.py\n\nimport qrcode\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse, HttpResponseBadRequest\nfrom io import BytesIO\nfrom django.core.files.uploadedfile import InMemoryUploadedFile\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        text = request.POST.get('text')\n        box_size = int(request.POST.get('box_size', 10))\n        border_size = int(request.POST.get('border_size', 4))\n        error_correction = request.POST.get('error_correction', 'M')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        if not text:\n          return HttpResponseBadRequest(\"Text is required.\")\n        if box_size > 128 or box_size < 1:\n          return HttpResponseBadRequest(\"Box size must be less than 128 and greater than 0.\")\n        if border_size > 10 or border_size < 0:\n          return HttpResponseBadRequest(\"Border size must be less than 10 and greater than or equal to 0.\")\n        if error_correction not in ['L', 'M', 'Q', 'H']:\n          return HttpResponseBadRequest(\"Invalid error correction rate.\")\n\n\n        try:\n          if error_correction == 'L':\n            qr_code = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=box_size,\n                border=border_size,\n            )\n          elif error_correction == 'M':\n            qr_code = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_M,\n                box_size=box_size,\n                border=border_size,\n            )\n          elif error_correction == 'Q':\n            qr_code = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_Q,\n                box_size=box_size,\n                border=border_size,\n            )\n          elif error_correction == 'H':\n             qr_code = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_H,\n                box_size=box_size,\n                border=border_size,\n            )\n\n          qr_code.add_data(text)\n          qr_code.make(fit=True)\n\n          img = qr_code.make_image(fill_color=fill_color, back_color=back_color)\n          img_buffer = BytesIO()\n          img.save(img_buffer, format='PNG')\n\n            # Create a response\n          response = HttpResponse(img_buffer.getvalue(), content_type='image/png')\n          response['Content-Disposition'] = 'attachment; filename=\"qrcode.png\"'\n          return response\n\n        except Exception as e:\n          return HttpResponseBadRequest(f\"Error generating QR code: {e}\")\n\n    return render(request, 'generate_qr_code.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "qrcode_app/urls.py", "code": "# qrcode_app/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr_code, name='generate_qr_code'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"welcome-heading\" class=\"welcome-heading\">Welcome to the QR Code Generator!</h1>\n  <p id=\"welcome-paragraph\" class=\"welcome-paragraph\">This website allows you to easily generate QR codes from text or URLs.</p>\n  <a id=\"generate-link\" href=\"{% url 'generate_qr_code' %}\" class=\"btn btn-primary\">Generate QR Code</a>\n{% endblock %}"}, {"file": "generate_qr_code.html", "path": "templates/generate_qr_code.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"generator-heading\" class=\"generator-heading\">QR Code Generator</h1>\n  <form id=\"qr-form\" method=\"post\" action=\"{% url 'generate_qr_code' %}\" class=\"qr-form\">\n    {% csrf_token %}\n    <label for=\"text\" id=\"text-label\" class=\"form-label\">Text or URL:</label><br>\n    <input type=\"text\" id=\"text\" name=\"text\" class=\"form-control\" required><br><br>\n\n    <label for=\"box_size\" id=\"box-size-label\" class=\"form-label\">Box Size (Max 128):</label><br>\n    <input type=\"number\" id=\"box_size\" name=\"box_size\" value=\"10\" min=\"1\" max=\"128\" class=\"form-control\" required><br><br>\n\n    <label for=\"border_size\" id=\"border-size-label\" class=\"form-label\">Border Size (Max 10):</label><br>\n    <input type=\"number\" id=\"border_size\" name=\"border_size\" value=\"4\" min=\"0\" max=\"10\" class=\"form-control\" required><br><br>\n\n    <label for=\"error_correction\" id=\"error-correction-label\" class=\"form-label\">Error Correction:</label><br>\n    <select id=\"error_correction\" name=\"error_correction\" class=\"form-select\">\n      <option value=\"L\">Small</option>\n      <option value=\"M\" selected>Medium</option>\n      <option value=\"Q\">Large</option>\n      <option value=\"H\">Highest</option>\n    </select><br><br>\n\n    <label for=\"fill_color\" id=\"fill-color-label\" class=\"form-label\">Fill Color:</label><br>\n    <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\" class=\"form-control\"><br><br>\n\n    <label for=\"back_color\" id=\"back-color-label\" class=\"form-label\">Background Color:</label><br>\n    <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\" class=\"form-control\"><br><br>\n\n    <button type=\"submit\" id=\"generate-button\" class=\"btn btn-primary\">Generate QR Code</button>\n  </form>\n{% endblock %}"}, {"file": "about.html", "path": "templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"about-heading\" class=\"about-heading\">About</h1>\n  <p id=\"about-paragraph\" class=\"about-paragraph\">This is a simple QR code generator website built with Django.</p>\n  <h2 id=\"privacy-policy-heading\" class=\"privacy-policy-heading\">Privacy Policy</h2>\n    <p id=\"privacy-policy-paragraph\" class=\"privacy-policy-paragraph\">We do not collect any personal data.</p>\n  <h2 id=\"terms-of-service-heading\" class=\"terms-of-service-heading\">Terms of Service</h2>\n   <p id=\"terms-of-service-paragraph\" class=\"terms-of-service-paragraph\">You can use generated qrcode freely.</p>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>QR Code Generator</title>\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            padding-top: 20px;\n            padding-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n  <div class=\"container\">\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a id=\"navbar-brand\" class=\"navbar-brand\" href=\"{% url 'home' %}\">QR Code Generator</a>\n      <button id=\"navbar-toggler\" class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item active\">\n            <a id=\"nav-link-home\" class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a>\n          </li>\n          <li class=\"nav-item\">\n            <a id=\"nav-link-generate\" class=\"nav-link\" href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n          </li>\n          <li class=\"nav-item\">\n            <a id=\"nav-link-about\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  {% block content %}{% endblock %}\n  </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}], "5": [{"file": "urls.py", "path": "markdown_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('markdown_converter.urls')),\n]"}, {"file": "settings.py", "path": "markdown_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong secret key!\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'markdown_converter',  # Add the app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = 'static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "wsgi.py", "path": "markdown_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "markdown_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_project.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\nimport markdown\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'markdown_converter/home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        context = {'html_output': html, 'markdown_text': markdown_text}\n\n        if 'download_html' in request.POST:\n            response = HttpResponse(html, content_type='text/html')\n            response['Content-Disposition'] = 'attachment; filename=\"converted.html\"'\n            return response\n\n        return render(request, 'markdown_converter/convert.html', context)\n    return render(request, 'markdown_converter/convert.html')\n\ndef about(request):\n    return render(request, 'markdown_converter/about.html')\n"}, {"file": "models.py", "path": "markdown_converter/models.py", "code": "# No models needed for this simple application"}, {"file": "admin.py", "path": "markdown_converter/admin.py", "code": "from django.contrib import admin\n\n# No models to register here."}, {"file": "apps.py", "path": "markdown_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MarkdownConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'markdown_converter'"}, {"file": "__init__.py", "path": "markdown_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "markdown_project/__init__.py", "code": ""}, {"file": "base.html", "path": "markdown_converter/templates/markdown_converter/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Converter</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        header { text-align: center; margin-bottom: 20px; }\n        nav ul { list-style: none; padding: 0; }\n        nav ul li { display: inline; margin-right: 10px; }\n        .container { max-width: 800px; margin: auto; }\n        textarea { width: 100%; padding: 10px; margin-bottom:10px; box-sizing: border-box; }\n        .button { background-color: #4CAF50; color: white; padding: 10px 15px; text-decoration: none; border: none; cursor: pointer; }\n        .output-area { border: 1px solid #ddd; padding: 10px; margin-top: 20px;  white-space: pre-wrap;}\n    </style>\n</head>\n<body>\n    <header>\n        <h1 id=\"main-title\">Markdown Converter</h1>\n    </header>\n    <main class=\"container\">\n        {% block content %}{% endblock %}\n    </main>\n    <footer>\n    </footer>\n</body>\n</html>"}, {"file": "home.html", "path": "markdown_converter/templates/markdown_converter/home.html", "code": "{% extends 'markdown_converter/base.html' %}\n\n{% block content %}\n    <h1 id=\"welcome-heading\" class=\"welcome\">Welcome to the Markdown Converter!</h1>\n    <p id=\"intro-paragraph\" class=\"intro\">This tool allows you to easily convert Markdown text into HTML.</p>\n    <nav>\n        <ul id=\"navigation-list\" class=\"nav-list\">\n            <li id=\"nav-home\" class=\"nav-item\"><a href=\"{% url 'home' %}\">Home</a></li>\n            <li id=\"nav-convert\" class=\"nav-item\"><a href=\"{% url 'convert' %}\">Convert</a></li>\n            <li id=\"nav-about\" class=\"nav-item\"><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </nav>\n{% endblock %}"}, {"file": "convert.html", "path": "markdown_converter/templates/markdown_converter/convert.html", "code": "{% extends 'markdown_converter/base.html' %}\n\n{% block content %}\n    <h1 id=\"converter-title\">Markdown to HTML Converter</h1>\n    <form method=\"post\" enctype=\"multipart/form-data\" id=\"converter-form\">\n        {% csrf_token %}\n        <label for=\"markdown_text\" id=\"markdown-label\">Markdown Input:</label><br>\n        <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"80\" class=\"markdown-input\">{{ markdown_text }}</textarea><br><br>\n\n        <input type=\"submit\" value=\"Convert\" id=\"convert-button\" class=\"button\">\n        <input type=\"submit\" name=\"download_html\" value=\"Download HTML\" id=\"download-button\" class=\"button\">\n    </form>\n\n    {% if html_output %}\n    <h2 id=\"output-heading\">HTML Output:</h2>\n        <div id=\"output-area\" class=\"output-area\">\n            <pre><code id=\"html-code\">{{ html_output|safe }}</code></pre>\n        </div>\n    {% endif %}\n\n{% endblock %}"}, {"file": "about.html", "path": "markdown_converter/templates/markdown_converter/about.html", "code": "{% extends 'markdown_converter/base.html' %}\n\n{% block content %}\n    <h1 id=\"about-title\">About</h1>\n    <p id=\"about-description\">This Markdown to HTML converter was developed by [Your Name/Team Name].</p>\n\n    <h2 id=\"faq-title\">FAQ</h2>\n    <p id=\"question-1\">Q: How do I use this converter?</p>\n    <p id=\"answer-1\">A: Simply enter your Markdown text in the input area and click 'Convert'.</p>\n\n{% endblock %}"}], "9": [{"file": "models.py", "path": "chatbot_app/models.py", "code": "from django.db import models\n\n\nclass PricingPlan(models.Model):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(max_digits=6, decimal_places=2)\n    features = models.TextField()  # Could be a JSONField in a real app\n    # Add other relevant fields (e.g., monthly/annual, limits)\n\n    def __str__(self):\n        return self.name\n\n\nclass ContactMessage(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.name} : {self.email}'"}, {"file": "views.py", "path": "chatbot_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import PricingPlan, ContactMessage\nfrom .forms import ContactForm, SupportForm\nfrom django.contrib import messages\n\n\ndef home(request):\n    context = {\n        'overview': 'Our AI Chatbot provides powerful and versatile conversational capabilities...'\n    }\n    return render(request, 'chatbot_app/home.html', context)\n\n\ndef features(request):\n    features_list = [\n        'Feature 1: Intelligent response generation',\n        'Feature 2: Customizable knowledge base',\n        'Feature 3: Multi-platform integration',\n    ]\n    context = {\n        'features': features_list\n    }\n    return render(request, 'chatbot_app/features.html', context)\n\n\ndef pricing(request):\n    plans = PricingPlan.objects.all()\n\n    if request.method == 'POST':\n        form = ContactForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Your message has been sent successfully. Our Sales Team will contact you soon.')\n            return redirect('pricing')\n    else:\n        form = ContactForm()\n\n    context = {\n        'pricing_plans': plans,\n        'form': form\n    }\n\n    return render(request, 'chatbot_app/pricing.html', context)\n\n\ndef about(request):\n    context = {\n        'company_info': 'We are a dedicated team of AI experts...'\n    }\n    return render(request, 'chatbot_app/about.html', context)\n\n\ndef support(request):\n    faq_data = [\n        {'question': 'What is an AI Chatbot?', 'answer': 'An AI Chatbot is ...'},\n        {'question': 'How do I integrate the chatbot?', 'answer': 'You can integrate ...'},\n    ]\n\n    if request.method == 'POST':\n        support_form = SupportForm(request.POST)\n        if support_form.is_valid():\n            support_form.save()\n            messages.success(request, 'Your support request has been submitted.  We will get back to you shortly.')\n            return redirect('support')\n    else:\n        support_form = SupportForm()\n\n    context = {\n        'faq': faq_data,\n        'support_form': support_form\n    }\n    return render(request, 'chatbot_app/support.html', context)\n"}, {"file": "urls.py", "path": "chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about/', views.about, name='about'),\n    path('support/', views.support, name='support'),\n]"}, {"file": "forms.py", "path": "chatbot_app/forms.py", "code": "from django import forms\nfrom .models import ContactMessage\n\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactMessage\n        fields = ['name', 'email', 'message']\n        widgets = {\n            'message': forms.Textarea(attrs={'rows': 4})\n        }\n\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = ContactMessage\n        fields = ['name', 'email', 'message']\n        widgets = {\n            'message': forms.Textarea(attrs={'rows': 4})\n        }"}, {"file": "urls.py", "path": "chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),\n]"}, {"file": "home.html", "path": "chatbot_app/templates/chatbot_app/home.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1 id=\"welcome-heading\" class=\"main-heading\">Welcome to Our AI Chatbot</h1>\n<p id=\"overview-paragraph\" class=\"overview\">{{ overview }}</p>\n{% endblock %}"}, {"file": "features.html", "path": "chatbot_app/templates/chatbot_app/features.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1 id=\"features-heading\" class=\"features-heading\">Key Features</h1>\n<ul id=\"features-list\" class=\"features-list\">\n    {% for feature in features %}\n        <li id=\"feature-{{ forloop.counter }}\" class=\"feature-item\">{{ feature }}</li>\n    {% endfor %}\n</ul>\n{% endblock %}"}, {"file": "pricing.html", "path": "chatbot_app/templates/chatbot_app/pricing.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1 id=\"pricing-heading\" class=\"pricing-heading\">Pricing Plans</h1>\n\n<div id=\"messages\" class=\"messages\">\n{% if messages %}\n    <ul class=\"messages-list\">\n        {% for message in messages %}\n            <li id=\"message-{{ forloop.counter }}\" class=\"message-item {{ message.tags }}\">{{ message }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n</div>\n\n<div id=\"pricing-table\" class=\"pricing-table\">\n  {% for plan in pricing_plans %}\n    <div id=\"plan-{{ plan.id }}\" class=\"plan\">\n      <h2 id=\"plan-name-{{ plan.id }}\" class=\"plan-name\">{{ plan.name }}</h2>\n      <p id=\"plan-price-{{ plan.id }}\" class=\"plan-price\">${{ plan.price }}</p>\n      <p id=\"plan-features-{{ plan.id }}\" class=\"plan-features\">{{ plan.features }}</p>\n    </div>\n  {% empty %}\n  <p id=\"no-plans-message\" class=\"no-plans\">No pricing plans available at the moment.</p>\n  {% endfor %}\n</div>\n\n<h2 id=\"contact-sales-heading\" class=\"contact-sales-heading\">Contact Sales</h2>\n<form id=\"contact-form\" method=\"post\" class=\"contact-form\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"submit-button\" type=\"submit\" class=\"submit-button\">Submit</button>\n</form>\n\n{% endblock %}"}, {"file": "about.html", "path": "chatbot_app/templates/chatbot_app/about.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1 id=\"about-heading\" class=\"about-heading\">About Us</h1>\n<p id=\"company-info\" class=\"company-info\">{{ company_info }}</p>\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_app/templates/chatbot_app/support.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1 id=\"support-heading\" class=\"support-heading\">Support</h1>\n<div id=\"messages-container\">\n{% if messages %}\n    <ul id=\"messages-list\" class=\"messages\">\n        {% for message in messages %}\n            <li id=\"message-{{ forloop.counter }}\" class=\"{{ message.tags }}\">{{ message }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n</div>\n<h2 id=\"faq-heading\" class=\"faq-heading\">Frequently Asked Questions</h2>\n<dl id=\"faq-list\" class=\"faq-list\">\n    {% for item in faq %}\n        <dt id=\"question-{{ forloop.counter }}\" class=\"faq-question\">{{ item.question }}</dt>\n        <dd id=\"answer-{{ forloop.counter }}\" class=\"faq-answer\">{{ item.answer }}</dd>\n    {% endfor %}\n</dl>\n\n<h2 id=\"more-help-heading\" class=\"more-help-heading\">Need More Help?</h2>\n <form id=\"support-form\" method=\"post\" class=\"support-form\">\n    {% csrf_token %}\n    {{ support_form.as_p }}\n    <button id=\"submit-button\" type=\"submit\" class=\"submit-button\">Submit</button>\n</form>\n{% endblock %}"}, {"file": "base.html", "path": "chatbot_app/templates/chatbot_app/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot</title>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a> |\n        <a id=\"nav-features\" class=\"nav-link\" href=\"{% url 'features' %}\">Features</a> |\n        <a id=\"nav-pricing\" class=\"nav-link\" href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about' %}\">About Us</a> |\n        <a id=\"nav-support\" class=\"nav-link\" href=\"{% url 'support' %}\">Support</a>\n    </nav>\n    <hr>\n    <div id=\"content-container\" class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "chatbot_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key' # Replace with an actual secret Key\n\nDEBUG = True  # Set to False in production\n\nALLOWED_HOSTS = []\n\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot_app',  # Your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "wsgi.py", "path": "chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "chatbot_project/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "chatbot_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "chatbot_project/__init__.py", "code": ""}], "11": [{"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse, JsonResponse\nfrom django.core.files.storage import FileSystemStorage\nfrom django.db import IntegrityError\nfrom .models import Review\nimport json\nimport os\n\ndef home(request):\n    if request.method == 'POST':\n        status = request.POST.get('status')\n        notes = request.POST.get('notes')\n\n        if not status or status == 'Select':\n          context = {\n            'welcome_message': 'Welcome to My Test Review Site',\n            'statuses': ['Select', 'Pass', 'Fail'],\n            'error_message': 'Please select a valid status.'\n           }\n          return render(request, 'myapp/home.html', context)\n        \n        try:\n            review = Review(status=status, notes=notes)\n            review.save()\n        except IntegrityError as e:\n            return HttpResponse(f\"Error saving data: {e}\", status=500)\n        \n\n        if 'import_file' in request.FILES:\n            uploaded_file = request.FILES['import_file']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n\n            try:\n                with open(fs.path(filename), 'r') as f:\n                    json_data = json.load(f)\n                #process data from json file and save each record individually to the database\n                if isinstance(json_data, list):\n                    for item in json_data:\n                        status_json = item.get('status')\n                        notes_json = item.get('notes')\n                        if status_json and notes_json:\n                            try:\n                                new_review = Review(status=status_json, notes=notes_json)\n                                new_review.save()\n                            except IntegrityError:  # Handle potential errors, like duplicate entries\n                                    pass # Or log the error\n                        #Handle the missing fields error\n                elif isinstance(json_data, dict):\n                    #if single object\n                    status_json = json_data.get('status')\n                    notes_json = json_data.get('notes')\n\n                    if status_json and notes_json:\n                      try:\n                          new_review = Review(status = status_json, notes = notes_json)\n                          new_review.save()\n                      except IntegrityError as e:\n                          print(\"Error saving review from json\", e)\n\n            except json.JSONDecodeError:\n                fs.delete(filename)  # Clean up invalid file\n                return HttpResponse('Invalid JSON file', status=400)\n            except Exception as e:\n                fs.delete(filename)  # Clean up in case of errors\n                return HttpResponse(f'Error processing file: {e}', status=500)\n\n        return redirect('home')\n\n    reviews = Review.objects.all().order_by('-created_at') #Get all the data to display\n    context = {\n        'welcome_message': 'Welcome to My Test Review Site',\n        'statuses': ['Select', 'Pass', 'Fail'],\n        'reviews' : reviews\n    }\n    return render(request, 'myapp/home.html', context)\n\n\ndef about(request):\n    context = {\n        'about_text': 'This website is designed for reviewing test code...'\n    }\n    return render(request, 'myapp/about.html', context)\n\n"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"}, {"file": "home.html", "path": "myapp/templates/myapp/home.html", "code": "{% extends 'myapp/base.html' %}\n\n{% block content %}\n  <h1 id=\"welcome-message\" class=\"welcome\">{{ welcome_message }}</h1>\n\n    {% if error_message %}\n        <p style=\"color: red;\">{{ error_message }}</p>\n    {% endif %}\n\n  <form method=\"post\" enctype=\"multipart/form-data\" id=\"review-form\" class=\"review-form\">\n    {% csrf_token %}\n\n    <label for=\"status\">Status:</label>\n    <select name=\"status\" id=\"status\" class=\"status-select\">\n      {% for status_option in statuses %}\n        <option value=\"{{ status_option }}\">{{ status_option }}</option>\n      {% endfor %}\n    </select><br><br>\n\n    <label for=\"notes\">Review Notes:</label><br>\n    <textarea name=\"notes\" id=\"notes\" rows=\"4\" cols=\"50\" class=\"notes-textarea\"></textarea><br><br>\n\n    <label for=\"import_file\">Import JSON File (Optional):</label>\n    <input type=\"file\" name=\"import_file\" id=\"import_file\" accept=\".json\" class=\"file-input\"><br><br>\n\n    <button type=\"submit\" id=\"submit-button\" class=\"submit-btn\">Submit Review</button>\n  </form>\n\n  <hr>\n  <h2>Previous Reviews:</h2>\n    {% for review in reviews %}\n        <div class=\"review-item\">\n           <p><strong>Status:</strong> <span id=\"review-status-{{ review.id }}\" class=\"review-status\">{{ review.status }}</span></p>\n           <p><strong>Notes:</strong> <span id=\"review-notes-{{ review.id }}\" class=\"review-notes\">{{ review.notes }}</span></p>\n            <p><strong>Created at:</strong> <span id=\"review-created-{{ review.id }}\" class=\"review-created\">{{ review.created_at }}</span></p>\n       </div>\n        <hr>\n   {% empty %}\n      <p id=\"no-reviews\" class=\"no-reviews\">No reviews yet.</p>\n    {% endfor %}\n\n{% endblock %}"}, {"file": "about.html", "path": "myapp/templates/myapp/about.html", "code": "{% extends 'myapp/base.html' %}\n\n{% block content %}\n  <h1 id=\"about-heading\" class=\"about-heading\">About</h1>\n  <p id=\"about-text\" class=\"about-text\">{{ about_text }}</p>\n{% endblock %}"}, {"file": "base.html", "path": "myapp/templates/myapp/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Test Review Site</title>\n    <style>\n        /* Basic styling -  expand upon this! */\n        body { font-family: sans-serif; }\n        nav ul { list-style: none; padding: 0; }\n        nav ul li { display: inline; margin-right: 10px; }\n        .review-item { margin-bottom: 15px; border: 1px solid #ddd; padding: 10px; }\n    </style>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <ul>\n            <li><a href=\"{% url 'home' %}\" id=\"nav-home\" class=\"nav-link\">Home</a></li>\n            <li><a href=\"{% url 'about' %}\" id=\"nav-about\" class=\"nav-link\">About</a></li>\n        </ul>\n    </nav>\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Review(models.Model):\n    STATUS_CHOICES = [\n        ('Pass', 'Pass'),\n        ('Fail', 'Fail'),\n    ]\n    status = models.CharField(max_length=4, choices=STATUS_CHOICES)\n    notes = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f\"Review - {self.status} - {self.created_at}\""}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Review\n\nadmin.site.register(Review)"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'fake-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}], "14": [{"file": "views.py", "path": "hello_world_app/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    context = {\n        'message': 'Hello World'\n    }\n    return render(request, 'hello_world_app/hello_world.html', context)"}, {"file": "urls.py", "path": "hello_world_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "my_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello_world_app.urls'))\n]"}, {"file": "apps.py", "path": "hello_world_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloWorldAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hello_world_app'"}, {"file": "__init__.py", "path": "hello_world_app/__init__.py", "code": ""}, {"file": "hello_world.html", "path": "hello_world_app/templates/hello_world_app/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"pageTitle\">Hello World</title>\n    <meta name=\"description\" content=\"A simple Hello World page\" id=\"metaDescription\">\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            font-family: sans-serif;\n            background-color: #f0f0f0;\n        }\n        h1 {\n            color: #333;\n        }\n\n        @media (max-width: 768px) {\n            h1 {\n                font-size: 1.5em;\n            }\n        }\n\n        .message-container {\n          padding: 20px;\n          border: 1px solid #ccc;\n          border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"messageContainer\" class=\"message-container\">\n      <h1 id=\"messageHeading\">{{ message }}</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "my_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-n@g&w1p*+k!v_&c9h$qj6@z7a9q6m7+y#r=^92e+r%&9#)28^g'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello_world_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'my_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'my_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "admin.py", "path": "hello_world_app/admin.py", "code": "# No models to register for this simple example, but you'd typically put them here.\nfrom django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "hello_world_app/models.py", "code": "from django.db import models\n\n# Create your models here.\n# No models are needed as there are no data requirements."}, {"file": "tests.py", "path": "hello_world_app/tests.py", "code": "from django.test import TestCase, Client\nfrom django.urls import reverse\n\n# Create your tests here.\nclass HelloWorldViewTest(TestCase):\n    def test_hello_world_view(self):\n        client = Client()\n        response = client.get(reverse('hello_world'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"Hello World\")"}, {"file": "wsgi.py", "path": "my_project/wsgi.py", "code": "\"\"\"\nWSGI config for my_project project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "my_project/asgi.py", "code": "\"\"\"\nASGI config for my_project project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/4.2/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "my_project/__init__.py", "code": ""}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.hello_world, name='hello_world'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'myapp/home.html')\n\ndef hello_world(request):\n    return render(request, 'myapp/hello_world.html')"}, {"file": "home.html", "path": "myapp/templates/myapp/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-heading\" class=\"heading\">Home Page</h1>\n    <a href=\"{% url 'hello_world' %}\">\n        <button id=\"hello-world-button\" class=\"button\">Go to HelloWorld</button>\n    </a>\n</body>\n</html>"}, {"file": "hello_world.html", "path": "myapp/templates/myapp/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1 id=\"hello-world-heading\" class=\"heading\">HelloWorld</h1>\n</body>\n</html>"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "myapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'dummy-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = 'static/'\n\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n\n# Default primary key field type\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()\n"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "16": [{"file": "input_validation.py", "path": "utils/input_validation.py", "code": "import pandas as pd\nimport os\n\nclass InputValidation:\n\n    def __init__(self, file_path):\n        self.file_path = file_path\n        self.expected_headers = ['#', 'Name', 'Weekday', 'Time']\n        self.valid_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n\n    def check_file_existence(self):\n        \"\"\"Ensure that 'Spring Semester Subjects.xlsx' file exists.\"\"\"\n        return os.path.exists(self.file_path)\n\n    def validate_headers(self):\n        \"\"\"Verify that the file headers are ['#', 'Name', 'Weekday', 'Time'].\"\"\"\n        try:\n            df = pd.read_excel(self.file_path)\n            return list(df.columns) == self.expected_headers\n        except Exception as e:\n            print(f\"Error reading Excel file or accessing headers: {e}\")\n            return False\n\n    def validate_time_column(self):\n        \"\"\"Check if the 'Time' column contains only ['First period', 'Second period', 'Third period', 'Fourth period'].\"\"\"\n        try:\n            df = pd.read_excel(self.file_path)\n            return df['Time'].isin(self.valid_times).all()\n        except Exception as e:\n            print(f\"validate_time_column error:{e}\")\n            return False\n\n    def validate_data_integrity(self):\n        \"\"\"Ensure that all columns have the correct and complete data without any missing fields.\"\"\"\n        try:\n            df = pd.read_excel(self.file_path)\n            # Check for missing values in the DataFrame\n            if df.isnull().values.any():\n                return False\n\n            # Check the type of columns\n            if not pd.api.types.is_integer_dtype(df['#']):\n                return False\n            if not pd.api.types.is_string_dtype(df['Name']):\n                return False\n            if not pd.api.types.is_string_dtype(df['Weekday']):\n                return False\n            if not pd.api.types.is_string_dtype(df['Time']):\n                return False\n\n            return True\n\n        except Exception as e:\n            print(f\"validate_data_integrity error: {e}\")\n            return False\n\n    def validate_null_value(self):\n        \"\"\"Check if there are any missing value in the table.\"\"\"\n        try:\n            df = pd.read_excel(self.file_path)\n            return not df.isnull().values.any()\n        except Exception as e:\n            print(f\"Error reading Excel file or checking for null values: {e}\")\n            return False"}, {"file": "data_transformation.py", "path": "utils/data_transformation.py", "code": "import pandas as pd\n\nclass DataTransformation:\n\n    def __init__(self, data):\n        self.data = data\n        self.weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']  # Example weekdays\n        self.time_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n        self.transformed_data = {weekday: {time_period: None for time_period in self.time_periods} for weekday in self.weekdays}\n\n    def transform_to_two_dimensional_table(self):\n        \"\"\"Convert the list of subjects into a two-dimensional table format.\"\"\"\n        # Assuming self.data is a pandas DataFrame\n        # Initialize an empty structure\n        for weekday in self.weekdays:\n            for period in self.time_periods:\n                self.transformed_data[weekday][period] = []\n\n        for index, row in self.data.iterrows():\n            subject_name = row['Name']\n            weekday = row['Weekday']\n            time_period = row['Time']\n\n            if weekday in self.weekdays and time_period in self.time_periods:\n                if self.transformed_data[weekday][time_period] is None:\n                    self.transformed_data[weekday][time_period] = [subject_name]\n                else:\n                    self.transformed_data[weekday][time_period].append(subject_name)\n\n        return self.transformed_data\n\n    def data_mapping(self):\n        \"\"\"Map data correctly into the two-dimensional table based on weekday and time period.\"\"\"\n        # This is essentially done within transform_to_two_dimensional_table\n        # So, we can just call it or ensure it's integrated\n        return self.transform_to_two_dimensional_table()\n"}, {"file": "output_creation.py", "path": "utils/output_creation.py", "code": "import pandas as pd\n\nclass OutputCreation:\n\n    def __init__(self, transformed_data, output_file_path):\n        self.transformed_data = transformed_data\n        self.output_file_path = output_file_path\n\n    def create_output_excel_file(self):\n        \"\"\"Generate a new Excel file for the transformed two-dimensional subject table.\"\"\"\n        try:\n            # Create an empty DataFrame\n            df = pd.DataFrame()\n            # Save the empty DataFrame to Excel to create the file\n            df.to_excel(self.output_file_path, index=False)\n            return True\n        except Exception as e:\n            print(f\"Error creating Excel file: {e}\")\n            return False\n\n    def save_table_to_excel(self):\n        \"\"\"Save the two-dimensional table data into the newly created Excel file.\"\"\"\n\n        try:\n            # Convert the transformed data to a format suitable for DataFrame\n            data_for_df = []\n\n            for weekday, periods in self.transformed_data.items():\n                row = {'Weekday': weekday}\n                for period, subjects in periods.items():\n                    row[period] = ', '.join(subjects) if subjects else ''  # Join subjects if list, else empty string\n\n                data_for_df.append(row)\n\n            df = pd.DataFrame(data_for_df)\n            df = df.set_index('Weekday')\n            df = df.reindex(self.transformed_data.keys())\n            df = df.reset_index()\n\n            with pd.ExcelWriter(self.output_file_path, engine='xlsxwriter') as writer:\n                df.to_excel(writer, sheet_name='Sheet1', index=False)\n            return True\n        except Exception as e:\n            print(f\"Error writing to Excel file: {e}\")\n            return False"}, {"file": "main.py", "path": "main.py", "code": "from utils.input_validation import InputValidation\nfrom utils.data_transformation import DataTransformation\nfrom utils.output_creation import OutputCreation\nimport pandas as pd\n\nif __name__ == \"__main__\":\n    input_file = 'Spring Semester Subjects.xlsx'\n    output_file = 'Transformed_Subjects.xlsx'\n\n    # Input Validation\n    validator = InputValidation(input_file)\n    if not validator.check_file_existence():\n        print(f\"Error: File '{input_file}' does not exist.\")\n        exit()\n    if not validator.validate_headers():\n        print(f\"Error: Invalid headers in '{input_file}'.\")\n        exit()\n    if not validator.validate_time_column():\n        print(f\"Error: Invalid values in 'Time' column in '{input_file}'.\")\n        exit()\n    if not validator.validate_data_integrity():\n        print(f\"Error: Data integrity check failed in '{input_file}'.  Check for missing or incorrect data types.\")\n        exit()\n\n    if not validator.validate_null_value():\n        print(f\"Error: Null values found. '{input_file}'.\")\n        exit()\n\n    print(\"Input file validation successful.\")\n\n    # Data Transformation\n    try:\n        data = pd.read_excel(input_file)\n        transformer = DataTransformation(data)\n        transformed_data = transformer.data_mapping()\n        print(\"Data transformation successful.\")\n    except Exception as e:\n        print(f\"data transform error: {e}\")\n        exit()\n\n    # Output File Creation\n    output_creator = OutputCreation(transformed_data, output_file)\n    if output_creator.create_output_excel_file():\n        if output_creator.save_table_to_excel():\n            print(f\"Output file '{output_file}' created and data saved successfully.\")\n        else:\n            print(\"save table error.\")\n    else:\n        print(\"create file error.\")"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas==1.3.5\nopenpyxl==3.0.9\nxlsxwriter==3.0.3"}, {"file": "utils/__init__.py", "path": "utils/__init__.py", "code": ""}]}