{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# No models are strictly required for this basic BMI calculator,\n# as we're not storing user data persistently.  We *could* add\n# a model to store BMI calculations if we wanted to track history.\n# For this basic framework, we'll leave it empty.\n\n# Example (if we wanted to store calculations):\n# class BMICalculation(models.Model):\n#     height_cm = models.DecimalField(max_digits=5, decimal_places=2)\n#     weight_kg = models.DecimalField(max_digits=5, decimal_places=2)\n#     bmi = models.DecimalField(max_digits=4, decimal_places=2)\n#     bmi_category = models.CharField(max_length=50)\n#     calculated_at = models.DateTimeField(auto_now_add=True)\n\n#     def __str__(self):\n#         return f\"BMI: {self.bmi} ({self.bmi_category})\""}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    HEIGHT_UNITS = (\n        ('cm', 'Centimeters'),\n        ('in', 'Inches'),\n    )\n    WEIGHT_UNITS = (\n        ('kg', 'Kilograms'),\n        ('lbs', 'Pounds'),\n    )\n\n    height = forms.DecimalField(label='Height', min_value=0, decimal_places=2, widget=forms.NumberInput(attrs={'placeholder': 'Enter height'}))\n    height_unit = forms.ChoiceField(label='Height Unit', choices=HEIGHT_UNITS, initial='cm')\n    weight = forms.DecimalField(label='Weight', min_value=0, decimal_places=2, widget=forms.NumberInput(attrs={'placeholder': 'Enter weight'}))\n    weight_unit = forms.ChoiceField(label='Weight Unit', choices=WEIGHT_UNITS, initial='kg')"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\ndef home_page(request):\n    context = {\n        'page_title': 'BMI Calculator Introduction'\n    }\n    return render(request, 'bmi_calculator/home.html', context)\n\n\ndef bmi_calculator_page(request):\n    bmi_result = None\n    bmi_category = None\n    interpretation = None\n\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            height = float(form.cleaned_data['height'])\n            height_unit = form.cleaned_data['height_unit']\n            weight = float(form.cleaned_data['weight'])\n            weight_unit = form.cleaned_data['weight_unit']\n\n            # Convert to metric (cm and kg)\n            if height_unit == 'in':\n                height *= 2.54  # Inches to cm\n            if weight_unit == 'lbs':\n                weight *= 0.453592  # Pounds to kg\n\n            # Calculate BMI\n            if height > 0:  # Avoid division by zero\n                height_m = height / 100  # cm to meters\n                bmi = weight / (height_m ** 2)\n                bmi_result = round(bmi, 2)\n\n                # Determine BMI category\n                if bmi < 18.5:\n                    bmi_category = 'Underweight'\n                    interpretation = \"You are in the underweight range.\"\n                elif 18.5 <= bmi < 25:\n                    bmi_category = 'Normal weight'\n                    interpretation = \"You are in the healthy weight range.\"\n                elif 25 <= bmi < 30:\n                    bmi_category = 'Overweight'\n                    interpretation = \"You are in the overweight range.\"\n                else:\n                    bmi_category = 'Obese'\n                    interpretation = \"You are in the obese range.\"\n    else:\n        form = BMICalculatorForm()\n\n    context = {\n        'form': form,\n        'bmi_result': bmi_result,\n        'bmi_category': bmi_category,\n        'interpretation': interpretation,\n        'page_title': 'BMI Calculator'\n    }\n    return render(request, 'bmi_calculator/bmi_calculator.html', context)\n"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home'),\n    path('calculator/', views.bmi_calculator_page, name='bmi_calculator'),\n]"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi_calculator.urls')),  # Include your app's URLs\n]"}, {"file": "home.html", "path": "bmi_calculator/templates/bmi_calculator/home.html", "code": "{% extends 'bmi_calculator/base.html' %}\n\n{% block content %}\n<h1>{{ page_title }}</h1>\n<p>This is a simple BMI (Body Mass Index) calculator.  BMI is a measure of body fat based on height and weight.</p>\n<p>To use the calculator, enter your height and weight, and it will calculate your BMI and provide a corresponding category.</p>\n<a href=\"{% url 'bmi_calculator' %}\" class=\"btn btn-primary\">Go to BMI Calculator</a>\n{% endblock %}"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "{% extends 'bmi_calculator/base.html' %}\n\n{% block content %}\n<h1>{{ page_title }}</h1>\n\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Calculate BMI</button>\n     <button type=\"reset\" >Reset</button>\n</form>\n\n{% if bmi_result %}\n    <h2>Your BMI: {{ bmi_result }}</h2>\n    <p>Category: {{ bmi_category }}</p>\n    {% if interpretation %}\n    <p>{{ interpretation }}</p>\n    {% endif %}\n\n{% endif %}\n{% endblock %}"}, {"file": "base.html", "path": "bmi_calculator/templates/bmi_calculator/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n   <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"], select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            margin-right: 10px; /* Add some spacing between buttons */\n        }\n        button[type=\"reset\"] {\n            background-color: #f44336; /* Red color for reset button */\n        }\n    </style>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass Currency(models.Model):\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.code\n\nclass ExchangeRate(models.Model):\n    base_currency = models.ForeignKey(Currency, on_delete=models.CASCADE, related_name='base_rates')\n    target_currency = models.ForeignKey(Currency, on_delete=models.CASCADE, related_name='target_rates')\n    rate = models.DecimalField(max_digits=20, decimal_places=6)  # Adjust precision as needed\n    timestamp = models.DateTimeField(auto_now=True) # Automatically update the timestamp\n\n    class Meta:\n        unique_together = ('base_currency', 'target_currency')\n\n    def __str__(self):\n        return f'{self.base_currency} to {self.target_currency}: {self.rate}'\n\nclass UserPreferences(models.Model): #for Setting Page\n    user = models.OneToOneField('auth.User', on_delete=models.CASCADE, related_name='preferences') # Connect to Django's built in User model\n    default_base_currency = models.ForeignKey(Currency, on_delete=models.SET_NULL, null=True, blank=True, related_name='default_base_users')\n    default_target_currency = models.ForeignKey(Currency, on_delete=models.SET_NULL, null=True, blank=True, related_name='default_target_users')\n    update_frequency = models.IntegerField(default=3600)  # Default update frequency in seconds (e.g., 1 hour)\n\n    def __str__(self):\n         return f'{self.user.username} preferences'"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import JsonResponse\nfrom .models import Currency, ExchangeRate, UserPreferences\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.contrib.auth.decorators import login_required  # Import login_required\nimport requests\nimport json\n\n@csrf_exempt  # Use for AJAX POST, but consider using CSRF tokens in production!\ndef convert_currency(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            base_currency_code = data.get('base_currency')\n            target_currency_code = data.get('target_currency')\n            amount = float(data.get('amount'))\n\n            base_currency = get_object_or_404(Currency, code=base_currency_code)\n            target_currency = get_object_or_404(Currency, code=target_currency_code)\n            \n            exchange_rate_obj = ExchangeRate.objects.filter(base_currency=base_currency, target_currency=target_currency).order_by('-timestamp').first()\n            if not exchange_rate_obj:\n               return JsonResponse({'error': 'Exchange rate not found'}, status=404) \n            exchange_rate = exchange_rate_obj.rate\n            \n            converted_amount = amount * exchange_rate\n            return JsonResponse({'converted_amount': converted_amount, 'exchange_rate': exchange_rate, 'timestamp': exchange_rate_obj.timestamp})\n        except (ValueError, TypeError, Currency.DoesNotExist) as e:\n            return JsonResponse({'error': str(e)}, status=400)\n    return JsonResponse({'error': 'Invalid request'}, status=400)\n\n\ndef home_page(request):\n    currencies = Currency.objects.all()\n    context = {\n        'currencies': currencies\n    }\n    return render(request, 'currency_converter/home.html', context)\n\n\ndef currency_details(request, currency_code):\n    #Add Logic of Currency Details\n    currency = get_object_or_404(Currency, code=currency_code)\n    # Get historical rates (example - adjust as needed)\n    historical_rates = ExchangeRate.objects.filter(base_currency=currency).order_by('-timestamp')[:10] #last 10 rate\n    context = {'currency': currency, 'historical_rates': historical_rates}\n    return render(request, 'currency_converter/currency_details.html', context)\n\n\n@login_required  # Require login for settings\ndef settings_page(request):\n\n    try:\n      user_preferences = request.user.preferences  # Access via related_name\n    except UserPreferences.DoesNotExist:\n      user_preferences = UserPreferences.objects.create(user=request.user)\n\n    if request.method == 'POST':\n        # Handle form submission, save user preferences\n        base_currency_code = request.POST.get('default_base_currency')\n        target_currency_code = request.POST.get('default_target_currency')\n        update_frequency = request.POST.get('update_frequency')\n\n        if base_currency_code:\n           user_preferences.default_base_currency = get_object_or_404(Currency, code=base_currency_code)\n        if target_currency_code:\n            user_preferences.default_target_currency = get_object_or_404(Currency, code=target_currency_code)\n        if update_frequency:\n           user_preferences.update_frequency = int(update_frequency)\n\n        user_preferences.save()\n        return redirect('settings')  # Redirect to the settings page after saving\n\n\n    currencies = Currency.objects.all()\n    context = {\n        'currencies': currencies,\n        'user_preferences': user_preferences,\n    }\n    return render(request, 'currency_converter/settings.html', context)\n\n\n\n#example function for fetching the exchange rate. You might need to change the url and api key.\ndef fetch_exchange_rates(api_key, base_currency_code):\n    url = f'https://open.er-api.com/v6/latest/{base_currency_code}'\n    response = requests.get(url)\n    response.raise_for_status()  # Raise an exception for bad status codes\n    data = response.json()\n    \n    if data['result'] == 'success':\n      base_currency = Currency.objects.get(code=base_currency_code)\n      for target_code, rate in data['rates'].items():\n            try:\n              target_currency, created = Currency.objects.get_or_create(code=target_code)\n              exchange_rate, created = ExchangeRate.objects.update_or_create(\n                base_currency=base_currency, \n                target_currency=target_currency,\n                defaults={'rate': rate}\n              )\n            except Exception as e: #catching error when creating currency or exchange rate instance.\n              print(f\"Error processing {target_code}: {e}\")\n\n    else:\n      raise Exception(f\"API Error: {data.get('error-type')}\")"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home'),\n    path('convert/', views.convert_currency, name='convert_currency'),\n     path('currency/<str:currency_code>/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings_page, name='settings'),\n\n]"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency, ExchangeRate, UserPreferences\n\nadmin.site.register(Currency)\nadmin.site.register(ExchangeRate)\nadmin.site.register(UserPreferences)"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "# forms.py  (Optional, but good practice for more complex forms)\nfrom django import forms\nfrom .models import Currency, UserPreferences\n\n\n# Example form for settings (you could also use model forms for more direct model interaction)\nclass SettingsForm(forms.ModelForm):\n    class Meta:\n      model = UserPreferences\n      fields = ['default_base_currency', 'default_target_currency', 'update_frequency']"}, {"file": "0001_initial.py", "path": "currency_converter/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-16 19:08\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Currency',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('code', models.CharField(max_length=3, unique=True)),\n                ('name', models.CharField(max_length=100)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='UserPreferences',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('update_frequency', models.IntegerField(default=3600)),\n                ('default_base_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_base_users', to='currency_converter.currency')),\n                ('default_target_currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_target_users', to='currency_converter.currency')),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='preferences', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='ExchangeRate',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('rate', models.DecimalField(decimal_places=6, max_digits=20)),\n                ('timestamp', models.DateTimeField(auto_now=True)),\n                ('base_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='base_rates', to='currency_converter.currency')),\n                ('target_currency', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='target_rates', to='currency_converter.currency')),\n            ],\n            options={\n                'unique_together': {('base_currency', 'target_currency')},\n            },\n        ),\n    ]\n"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n\n    <label for=\"base_currency\">Base Currency:</label>\n    <select id=\"base_currency\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select>\n\n    <label for=\"target_currency\">Target Currency:</label>\n    <select id=\"target_currency\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select>\n\n    <label for=\"amount\">Amount:</label>\n    <input type=\"number\" id=\"amount\" value=\"1\">\n\n    <button onclick=\"convert()\">Convert</button>\n\n    <h2>Result:</h2>\n    <p id=\"result\"></p>\n    <p id=\"rate_info\"></p>\n\n     <a href=\"{% url 'settings' %}\">Settings</a>\n\n    <script>\n        async function convert() {\n            const baseCurrency = document.getElementById('base_currency').value;\n            const targetCurrency = document.getElementById('target_currency').value;\n            const amount = document.getElementById('amount').value;\n\n            const response = await fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    // Add CSRF token header here if using CSRF protection\n                },\n                body: JSON.stringify({ base_currency: baseCurrency, target_currency: targetCurrency, amount: amount }),\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                document.getElementById('result').innerText = `Converted Amount: ${data.converted_amount.toFixed(2)}`;\n                document.getElementById('rate_info').innerText = `Exchange Rate: 1 ${baseCurrency} = ${data.exchange_rate} ${targetCurrency} (Last updated: ${data.timestamp})`;\n            } else {\n                document.getElementById('result').innerText = `Error: ${data.error}`;\n            }\n        }\n    </script>\n</body>\n</html>"}, {"file": "currency_details.html", "path": "currency_converter/templates/currency_converter/currency_details.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Currency Details - {{ currency.code }}</title>\n</head>\n<body>\n  <h1>Currency Details: {{ currency.name }} ({{ currency.code }})</h1>\n\n\n  <h2>Historical Exchange Rates</h2>\n    {% if historical_rates %}\n    <ul>\n      {% for rate in historical_rates %}\n      <li>{{ rate.timestamp }} - 1 {{ rate.base_currency.code }} = {{ rate.rate }} {{rate.target_currency.code}}</li>\n      {% endfor %}\n    </ul>\n    {% else %}\n      <p>No historical exchange rates available.</p>\n    {% endif %}\n\n  <a href=\"{% url 'home' %}\">Back to Converter</a>\n</body>\n</html>"}, {"file": "settings.html", "path": "currency_converter/templates/currency_converter/settings.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <h1>Settings</h1>\n\n    <form method=\"post\">\n        {% csrf_token %}  <!-- Include CSRF token for POST requests -->\n        <label for=\"default_base_currency\">Default Base Currency:</label>\n        <select id=\"default_base_currency\" name=\"default_base_currency\">\n            <option value=\"\">-- Select --</option>\n            {% for currency in currencies %}\n                <option value=\"{{ currency.code }}\" {% if currency == user_preferences.default_base_currency %}selected{% endif %}>{{ currency.code }} - {{ currency.name }}</option>\n            {% endfor %}\n        </select><br><br>\n\n        <label for=\"default_target_currency\">Default Target Currency:</label>\n        <select id=\"default_target_currency\" name=\"default_target_currency\">\n            <option value=\"\">-- Select --</option>\n            {% for currency in currencies %}\n               <option value=\"{{ currency.code }}\" {% if currency == user_preferences.default_target_currency %}selected{% endif %}>{{ currency.code }} - {{ currency.name }}</option>\n            {% endfor %}\n        </select><br><br>\n\n        <label for=\"update_frequency\">Update Frequency (seconds):</label>\n        <input type=\"number\" id=\"update_frequency\" name=\"update_frequency\" value=\"{{ user_preferences.update_frequency }}\"><br><br>\n\n        <button type=\"submit\">Save Settings</button>\n    </form>\n      <a href=\"{% url 'home' %}\">Back to Converter</a>\n</body>\n</html>"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('options/', views.password_options, name='password_options'),\n    path('generate/', views.generate_password, name='generate_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render, redirect\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generate_password(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        use_uppercase = 'uppercase' in request.POST\n        use_lowercase = 'lowercase' in request.POST\n        use_numbers = 'numbers' in request.POST\n        use_symbols = 'symbols' in request.POST\n\n        characters = ''\n        if use_uppercase:\n            characters += string.ascii_uppercase\n        if use_lowercase:\n            characters += string.ascii_lowercase\n        if use_numbers:\n            characters += string.digits\n        if use_symbols:\n            characters += string.punctuation\n\n        if not characters:\n          password = '' #Handle empty character set\n        else:\n          password = ''.join(random.choice(characters) for i in range(length))\n\n\n        return render(request, 'generated_password.html', {'password': password})\n    else: #Handle GET requests. Redirect or show error\n      return redirect('password_options') #Or show a proper error message on the page itself\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Welcome to the Password Generator!</h1>\n  <p>This website helps you create strong and secure passwords.</p>  <! -- Optional Welcome Message -->\n  <a href=\"{% url 'password_options' %}\"><button>Generate Password</button></a>\n{% endblock %}"}, {"file": "password_options.html", "path": "templates/password_options.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Password Options</h1>\n  <form method=\"post\" action=\"{% url 'generate_password' %}\">\n    {% csrf_token %}\n    <label for=\"length\">Password Length:</label>\n    <input type=\"number\" id=\"length\" name=\"length\" min=\"1\" value=\"12\" required><br><br>\n\n    <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" checked>\n    <label for=\"uppercase\">Include Uppercase Letters</label><br><br>\n\n    <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" checked>\n    <label for=\"lowercase\">Include Lowercase Letters</label><br><br>\n\n    <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" checked>\n    <label for=\"numbers\">Include Numbers</label><br><br>\n\n    <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" checked>\n    <label for=\"symbols\">Include Symbols</label><br><br>\n\n    <button type=\"submit\">Generate Password</button>\n  </form>\n{% endblock %}"}, {"file": "generated_password.html", "path": "templates/generated_password.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Generated Password</h1>\n  <p>Your generated password is:</p>\n  <input type=\"text\" value=\"{{ password }}\" id=\"passwordField\" readonly>\n  <button onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n  <script>\n    function copyToClipboard() {\n      var copyText = document.getElementById(\"passwordField\");\n      copyText.select();\n      copyText.setSelectionRange(0, 99999); /* For mobile devices */\n      navigator.clipboard.writeText(copyText.value);\n      alert(\"Copied the password: \" + copyText.value);\n    }\n  </script>\n{% endblock %}"}, {"file": "about.html", "path": "templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>About</h1>\n  <p>This is a simple password generator website built with Django.  It allows you to create strong passwords based on your specified criteria.</p>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n</head>\n<body>\n    <nav>\n      <ul>\n        <li><a href=\"{% url 'home' %}\">Home</a></li>\n        <li><a href=\"{% url 'password_options' %}\">Generate</a></li>\n        {% if request.resolver_match.url_name != 'about' %}\n          <li><a href=\"{% url 'about' %}\">About</a></li>\n        {% endif %}\n      </ul>\n    </nav>\n    <hr>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}, {"file": "models.py", "path": "password_generator/models.py", "code": "# No models needed for this simple application, but it's good practice to include the file.\nfrom django.db import models"}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "# No models to register, but good practice to include.\nfrom django.contrib import admin"}, {"file": "apps.py", "path": "password_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'"}], "4": [{"file": "urls.py", "path": "qrcode_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrcode_app.urls'))  # Include app-level URLs\n]"}, {"file": "settings.py", "path": "qrcode_project/settings.py", "code": "# qrcode_project/settings.py (Relevant Snippets - NOT the entire file)\n\nINSTALLED_APPS = [\n    ...\n    'qrcode_app',  # Your app name\n    ...\n]\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'], # Add a project-level templates directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                ...\n            ],\n        },\n    },\n]\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / 'static',\n]\n\n# Add media URL and media root, very important\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'"}, {"file": "models.py", "path": "qrcode_app/models.py", "code": "# qrcode_app/models.py\nfrom django.db import models\n\n# No models are strictly *required* for this basic functionality,\n# but you might add one later to store QR code generation history, user data, etc.\n# Example (if you wanted to store generated QR codes):\n# class GeneratedQRCode(models.Model):\n#    text = models.TextField()\n#    image = models.ImageField(upload_to='qrcodes/')\n#    created_at = models.DateTimeField(auto_now_add=True)\n"}, {"file": "views.py", "path": "qrcode_app/views.py", "code": "# qrcode_app/views.py\n\nimport qrcode\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse, HttpResponseBadRequest\nfrom io import BytesIO\nfrom django.core.files.uploadedfile import InMemoryUploadedFile\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        text = request.POST.get('text')\n        box_size = int(request.POST.get('box_size', 10))  # Default box size\n        border_size = int(request.POST.get('border_size', 4)) # Default border size\n        error_correction = request.POST.get('error_correction', 'M')  # Default error correction\n        fill_color = request.POST.get('fill_color', 'black') # Default fill color\n        back_color = request.POST.get('back_color', 'white') # Default back color\n\n        if not text:\n          return HttpResponseBadRequest(\"Text is required.\")\n        if box_size > 128 or box_size < 1:\n          return HttpResponseBadRequest(\"Box size must be less than 128 and greater than 0.\")\n        if border_size > 10 or border_size < 0:\n          return HttpResponseBadRequest(\"Border size must be less than 10 and greater than or equal to 0.\")\n        if error_correction not in ['L', 'M', 'Q', 'H']:\n          return HttpResponseBadRequest(\"Invalid error correction rate.\")\n\n\n        try:\n          if error_correction == 'L':\n            qr_code = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=box_size,\n                border=border_size,\n            )\n          elif error_correction == 'M':\n            qr_code = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_M,\n                box_size=box_size,\n                border=border_size,\n            )\n          elif error_correction == 'Q':\n            qr_code = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_Q,\n                box_size=box_size,\n                border=border_size,\n            )\n          elif error_correction == 'H':\n             qr_code = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_H,\n                box_size=box_size,\n                border=border_size,\n            )\n\n          qr_code.add_data(text)\n          qr_code.make(fit=True)\n\n          img = qr_code.make_image(fill_color=fill_color, back_color=back_color)\n          img_buffer = BytesIO()\n          img.save(img_buffer, format='PNG')\n\n            # Create a response\n          response = HttpResponse(img_buffer.getvalue(), content_type='image/png')\n          response['Content-Disposition'] = 'attachment; filename=\"qrcode.png\"'\n          return response\n\n        except Exception as e:\n          return HttpResponseBadRequest(f\"Error generating QR code: {e}\")\n\n    return render(request, 'generate_qr_code.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "urls.py", "path": "qrcode_app/urls.py", "code": "# qrcode_app/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr_code, name='generate_qr_code'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Welcome to the QR Code Generator!</h1>\n  <p>This website allows you to easily generate QR codes from text or URLs.</p>\n  <a href=\"{% url 'generate_qr_code' %}\" class=\"btn btn-primary\">Generate QR Code</a>\n{% endblock %}"}, {"file": "generate_qr_code.html", "path": "templates/generate_qr_code.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>QR Code Generator</h1>\n  <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n    {% csrf_token %}\n    <label for=\"text\">Text or URL:</label><br>\n    <input type=\"text\" id=\"text\" name=\"text\" required><br><br>\n\n    <label for=\"box_size\">Box Size (Max 128):</label><br>\n    <input type=\"number\" id=\"box_size\" name=\"box_size\" value=\"10\" min=\"1\" max=\"128\" required><br><br>\n\n    <label for=\"border_size\">Border Size (Max 10):</label><br>\n    <input type=\"number\" id=\"border_size\" name=\"border_size\" value=\"4\" min=\"0\" max=\"10\" required><br><br>\n   <label for=\"error_correction\">Error Correction:</label><br>\n    <select id=\"error_correction\" name=\"error_correction\">\n      <option value=\"L\">Small</option>\n      <option value=\"M\" selected>Medium</option>\n      <option value=\"Q\">Large</option>\n      <option value=\"H\">Highest</option>\n    </select><br><br>\n    <label for=\"fill_color\">Fill Color:</label><br>\n        <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\"><br><br>\n\n    <label for=\"back_color\">Background Color:</label><br>\n        <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\"><br><br>\n\n    <button type=\"submit\">Generate QR Code</button>\n  </form>\n\n{% endblock %}"}, {"file": "about.html", "path": "templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>About</h1>\n  <p>This is a simple QR code generator website built with Django.</p>\n  <h2>Privacy Policy</h2>\n    <p>We do not collect any personal data.</p>\n  <h2>Terms of Service</h2>\n   <p>You can use generated qrcode freely.</p>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>QR Code Generator</title>\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            padding-top: 20px;\n            padding-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n  <div class=\"container\">\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a class=\"navbar-brand\" href=\"{% url 'home' %}\">QR Code Generator</a>\n      <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul class=\"navbar-nav\">\n          <li class=\"nav-item active\">\n            <a class=\"nav-link\" href=\"{% url 'home' %}\">Home <span class=\"sr-only\">(current)</span></a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n          </li>\n          <li class=\"nav-item\">\n            <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  {% block content %}{% endblock %}\n  </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}], "5": [{"file": "urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\nimport markdown\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'markdown_converter/home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        context = {'html_output': html, 'markdown_text':markdown_text}\n\n        if 'download_html' in request.POST:\n          response = HttpResponse(html, content_type='text/html')\n          response['Content-Disposition'] = 'attachment; filename=\"converted.html\"'\n          return response\n\n        return render(request, 'markdown_converter/convert.html', context)\n    return render(request, 'markdown_converter/convert.html')\n\ndef about(request):\n    return render(request, 'markdown_converter/about.html')"}, {"file": "home.html", "path": "markdown_converter/templates/markdown_converter/home.html", "code": "{% extends 'markdown_converter/base.html' %}\n\n{% block content %}\n    <h1>Welcome to the Markdown Converter!</h1>\n    <p>This tool allows you to easily convert Markdown text into HTML.</p>\n    <nav>\n        <ul>\n            <li><a href=\"{% url 'home' %}\">Home</a></li>\n            <li><a href=\"{% url 'convert' %}\">Convert</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </nav>\n{% endblock %}"}, {"file": "convert.html", "path": "markdown_converter/templates/markdown_converter/convert.html", "code": "{% extends 'markdown_converter/base.html' %}\n\n{% block content %}\n    <h1>Markdown to HTML Converter</h1>\n    <form method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        <label for=\"markdown_text\">Markdown Input:</label><br>\n        <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"80\">{{ markdown_text }}</textarea><br><br>\n\n        <input type=\"submit\" value=\"Convert\">\n        <input type=\"submit\" name=\"download_html\" value=\"Download HTML\">\n        <input type=\"file\" id=\"markdown_file\" name=\"markdown_file\">\n\n    </form>\n\n  {% if html_output %}\n    <h2>HTML Output:</h2>\n        <pre><code>{{ html_output|safe }}</code></pre>\n  {% endif %}\n\n{% endblock %}"}, {"file": "about.html", "path": "markdown_converter/templates/markdown_converter/about.html", "code": "{% extends 'markdown_converter/base.html' %}\n\n{% block content %}\n    <h1>About</h1>\n    <p>This Markdown to HTML converter was developed by [Your Name/Team Name].</p>\n    <h2>FAQ</h2>\n    <p>Q: How do I use this converter?</p>\n    <p>A: Simply enter your Markdown text in the input area and click 'Convert'.</p>\n    \n{% endblock %}"}, {"file": "base.html", "path": "markdown_converter/templates/markdown_converter/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown Converter</title>\n</head>\n<body>\n    <header>\n    </header>\n    <main>\n        {% block content %}\n        {% endblock %}\n    </main>\n    <footer>\n    </footer>\n</body>\n</html>"}, {"file": "models.py", "path": "markdown_converter/models.py", "code": "# No models needed for this simple application"}, {"file": "settings.py", "path": "markdown_project/settings.py", "code": "#Add 'markdown_converter', to INSTALLED_APPS\n#Add these lines:\n#TEMPLATES = [\n# {\n#        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n#        'DIRS': [BASE_DIR / 'templates'],  # Add this line if not exists!\n#        'APP_DIRS': True,\n#...}\n"}], "6": [{"file": "urls.py", "path": "todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),  # Assuming 'todo_app' is your app name\n]"}, {"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('lists/', views.todo_list_list_view, name='todo_list_list'),\n    path('lists/create/', views.todo_list_create_view, name='todo_list_create'),\n    path('lists/<int:list_id>/', views.todo_list_detail_view, name='todo_list_detail'),\n    path('lists/<int:list_id>/tasks/create/', views.task_create_view, name='task_create'),\n    path('tasks/<int:task_id>/edit/', views.task_edit_view, name='task_edit'),\n    path('tasks/<int:task_id>/delete/', views.task_delete_view, name='task_delete'),\n    path('tasks/<int:task_id>/complete/', views.task_complete_view, name='task_complete'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    description = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.description"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import TodoList, Task\nfrom .forms import TodoListForm, TaskForm  # Import the forms\n\n\ndef home_view(request):\n    # Displays an overview of all Todo lists and tasks (Dashboard)\n    all_lists = TodoList.objects.all()\n    total_tasks = Task.objects.count()\n    completed_tasks = Task.objects.filter(completed=True).count()\n    context = {'all_lists': all_lists, 'total_tasks': total_tasks, 'completed_tasks': completed_tasks}\n    return render(request, 'todo_app/home.html', context)\n\n\ndef todo_list_list_view(request):\n    #  View for listing all todo lists.\n    lists = TodoList.objects.all()\n    return render(request, 'todo_app/todo_list_list.html', {'lists': lists})\n\n\ndef todo_list_create_view(request):\n    # View for creating a new todo list.\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list_list')\n    else:\n        form = TodoListForm()\n    return render(request, 'todo_app/todo_list_form.html', {'form': form})\n\n\ndef todo_list_detail_view(request, list_id):\n    # Displays all tasks under a selected list\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todo_app/todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\n\ndef task_create_view(request, list_id):\n    # View for adding a new task to a specific Todo List.\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.todo_list = todo_list\n            task.save()\n            return redirect('todo_list_detail', list_id=list_id)\n    else:\n        form = TaskForm()\n    return render(request, 'todo_app/task_form.html', {'form': form, 'todo_list': todo_list})\n\n\ndef task_edit_view(request, task_id):\n    # View for editing an existing task.\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list_detail', list_id=task.todo_list.id)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'todo_app/task_form.html', {'form': form, 'task':task})\n\n\ndef task_delete_view(request, task_id):\n    # View for deleting an existing task.\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    if request.method == 'POST':\n        task.delete()\n        return redirect('todo_list_detail', list_id=list_id)\n    return render(request, 'todo_app/task_confirm_delete.html', {'task': task})\n\n\ndef task_complete_view(request, task_id):\n     # View to mark a task as completed.\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = not task.completed  # Toggle the completed status\n    task.save()\n    return redirect('todo_list_detail', list_id=task.todo_list.id)\n\n\ndef analysis_view(request):\n    # View for displaying task analysis (charts).\n    # Example (you'll need a charting library like Chart.js or similar):\n    total_tasks = Task.objects.count()\n    completed_tasks = Task.objects.filter(completed=True).count()\n    incomplete_tasks = total_tasks - completed_tasks\n\n     #Data for task distribution across lists (example):\n    lists = TodoList.objects.all()\n    task_distribution = []\n    for lst in lists:\n      task_distribution.append({'list_name': lst.name, 'task_count': Task.objects.filter(todo_list=lst).count()})\n\n\n    context = {\n        'total_tasks': total_tasks,\n        'completed_tasks': completed_tasks,\n        'incomplete_tasks': incomplete_tasks,\n        'task_distribution': task_distribution,\n    }\n    return render(request, 'todo_app/analysis.html', context)"}, {"file": "forms.py", "path": "todo_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, Task\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['name']\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['description']"}, {"file": "admin.py", "path": "todo_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)"}, {"file": "home.html", "path": "todo_app/templates/todo_app/home.html", "code": "{% extends 'todo_app/base.html' %}\n\n{% block content %}\n<h1>Dashboard</h1>\n<p>Total Lists: {{ all_lists|length }}</p>\n<p>Total Tasks: {{ total_tasks }}</p>\n<p>Completed Tasks: {{ completed_tasks }}</p>\n\n<h2>Todo Lists</h2>\n<ul>\n    {% for list in all_lists %}\n        <li><a href=\"{% url 'todo_list_detail' list.id %}\">{{ list.name }}</a></li>\n    {% empty %}\n        <li>No lists yet.</li>\n    {% endfor %}\n</ul>\n<a href=\"{% url 'todo_list_create' %}\">Create New List</a>\n{% endblock %}"}, {"file": "todo_list_list.html", "path": "todo_app/templates/todo_app/todo_list_list.html", "code": "{% extends 'todo_app/base.html' %}\n\n{% block content %}\n  <h2>Todo Lists</h2>\n  <ul>\n    {% for list in lists %}\n      <li><a href=\"{% url 'todo_list_detail' list.id %}\">{{ list.name }}</a></li>\n    {% empty %}\n      <li>No lists found.</li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'todo_list_create' %}\">Create New List</a>\n{% endblock %}"}, {"file": "todo_list_form.html", "path": "todo_app/templates/todo_app/todo_list_form.html", "code": "{% extends 'todo_app/base.html' %}\n\n{% block content %}\n<h2>Create/Edit Todo List</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n</form>\n{% endblock %}"}, {"file": "todo_list_detail.html", "path": "todo_app/templates/todo_app/todo_list_detail.html", "code": "{% extends 'todo_app/base.html' %}\n\n{% block content %}\n<h2>{{ todo_list.name }}</h2>\n\n<ul>\n    {% for task in tasks %}\n        <li>\n            <input type=\"checkbox\" {% if task.completed %}checked{% endif %} disabled>\n             <a href=\"{% url 'task_edit' task.id %}\">{{ task.description }}</a>\n             [<a href=\"{% url 'task_complete' task.id %}\">Toggle Complete</a>]\n            [<a href=\"{% url 'task_delete' task.id %}\">Delete</a>]\n\n        </li>\n    {% empty %}\n        <li>No tasks in this list yet.</li>\n    {% endfor %}\n</ul>\n\n<a href=\"{% url 'task_create' todo_list.id %}\">Add Task</a>\n{% endblock %}"}, {"file": "task_form.html", "path": "todo_app/templates/todo_app/task_form.html", "code": "{% extends 'todo_app/base.html' %}\n\n{% block content %}\n<h2>Create/Edit Task</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n</form>\n  {% if task %}\n    <p><a href=\"{% url 'todo_list_detail' task.todo_list.id %}\">Back to List</a></p>\n  {% else%}\n     <p><a href=\"{% url 'todo_list_detail' todo_list.id %}\">Back to List</a></p>\n  {% endif %}\n{% endblock %}"}, {"file": "task_confirm_delete.html", "path": "todo_app/templates/todo_app/task_confirm_delete.html", "code": "{% extends 'todo_app/base.html' %}\n\n{% block content %}\n<h2>Confirm Delete</h2>\n<p>Are you sure you want to delete the task: \"{{ task.description }}\"?</p>\n<form method=\"post\">\n    {% csrf_token %}\n    <button type=\"submit\">Delete</button>\n    <a href=\"{% url 'todo_list_detail' task.todo_list.id %}\">Cancel</a>\n</form>\n{% endblock %}"}, {"file": "analysis.html", "path": "todo_app/templates/todo_app/analysis.html", "code": "{% extends 'todo_app/base.html' %}\n\n{% block content %}\n<h1>Task Analysis</h1>\n\n<h2>Completion Chart</h2>\n<p>Total Tasks: {{ total_tasks }}</p>\n<p>Completed Tasks: {{ completed_tasks }}</p>\n<p>Incomplete Tasks: {{ incomplete_tasks }}</p>\n\n<!-- Example using placeholders.  You would replace these with actual chart rendering -->\n<div>\n <p> Completion Chart (Placeholder) </p>\n    <canvas id=\"completionChart\" width=\"400\" height=\"200\"></canvas>\n</div>\n\n\n<h2>Task Distribution</h2>\n<!-- Example using placeholders. You would replace these with actual chart rendering -->\n\n<div>\n <p> Distribution Chart (Placeholder) </p>\n  <canvas id=\"distributionChart\" width=\"400\" height=\"200\"></canvas>\n</div>\n\n<script>\n // Completion Chart (Example using Chart.js - you'd need to include Chart.js)\n  var ctx = document.getElementById('completionChart').getContext('2d');\n  var myChart = new Chart(ctx, {\n      type: 'pie',\n      data: {\n          labels: ['Completed', 'Incomplete'],\n          datasets: [{\n              data: [{{ completed_tasks }}, {{ incomplete_tasks }}],\n              backgroundColor: ['green', 'red'],\n          }]\n      },\n  });\n\n\n   // Distribution Chart (Example using Chart.js)\n    var ctx2 = document.getElementById('distributionChart').getContext('2d');\n    var myChart2 = new Chart(ctx2, {\n      type: 'bar',  // Or 'horizontalBar' for horizontal bars\n       data: {\n            labels: [{% for item in task_distribution %}'{{ item.list_name }}',{% endfor %}],\n            datasets: [{\n                label: 'Number of Tasks',\n                 data: [{% for item in task_distribution %}{{ item.task_count }},{% endfor %}],\n                backgroundColor: 'blue',\n            }]\n        },\n        options: {\n            scales: {\n                y: {\n                    beginAtZero: true\n                }\n            }\n        }\n    });\n</script>\n\n\n\n{% endblock %}"}, {"file": "base.html", "path": "todo_app/templates/todo_app/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App</title>\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <nav>\n        <ul>\n            <li><a href=\"{% url 'home' %}\">Home</a></li>\n            <li><a href=\"{% url 'todo_list_list' %}\">Todo Lists</a></li>\n            <li><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n        </ul>\n    </nav>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}], "7": [{"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateField()\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n    description = models.CharField(max_length=255, blank=True)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.amount} on {self.date}'\n\nclass UserProfile(models.Model):\n  user = models.OneToOneField(User, on_delete=models.CASCADE)\n\n  def __str__(self):\n      return self.user.username"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.http import JsonResponse, HttpResponse\nfrom .models import Transaction, Category, UserProfile\nfrom .forms import TransactionForm, CategoryForm, UserProfileForm\nimport csv\nfrom datetime import datetime, timedelta\n\n\ndef home(request):\n    if request.user.is_authenticated:\n        #View Dashboard\n        transactions = Transaction.objects.filter(user=request.user).order_by('-date')[:5]  # Recent transactions\n        balance = sum(t.amount for t in Transaction.objects.filter(user=request.user))\n        alerts = [] # Example alert, can be expanded\n        if balance < 0:\n            alerts.append({'message':'Your balance is negative!'})\n        return render(request, 'budget_control/dashboard.html', {'transactions': transactions, 'balance': balance, 'alerts':alerts})\n\n    #View Home\n    return render(request, 'budget_control/home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            UserProfile.objects.create(user=user)\n            login(request, user)\n            return redirect('home')\n    else:\n        form = UserCreationForm()\n    return render(request, 'budget_control/signup.html', {'form': form})\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'budget_control/login.html', {'form': form})\n\n@login_required\ndef user_logout(request):\n    logout(request)\n    return redirect('home')\n\n@login_required\ndef balance_tracker(request):\n    #View Balance Structure Chart & #View Balance Chart\n    transactions = Transaction.objects.filter(user=request.user).order_by('date')\n    balance_data = []\n    balance = 0\n    for transaction in transactions:\n        balance += transaction.amount\n        balance_data.append({'date': transaction.date.strftime('%Y-%m-%d'), 'balance': balance})\n\n    category_data = []\n    categories_balance = {}\n    for c in Category.objects.filter(user=request.user):\n      categories_balance[c.name] = 0\n    \n    for t in transactions:\n      if t.category:\n        categories_balance[t.category.name] += float(t.amount)\n\n    for name, amount in categories_balance.items():\n      category_data.append({'name': name, 'amount': amount})\n\n    return render(request, 'budget_control/balance_tracker.html', {'balance_data': balance_data, 'category_data': category_data})\n\n\n@login_required\ndef add_transaction(request):\n    if request.method == 'POST':\n        form = TransactionForm(request.POST, user=request.user)\n        if form.is_valid():\n            transaction = form.save(commit=False)\n            transaction.user = request.user\n            transaction.save()\n            return JsonResponse({'status': 'success'})\n        else:\n            return JsonResponse({'status': 'error', 'errors': form.errors}, status=400)\n    else:\n        form = TransactionForm(user=request.user) # Pass the user to the form\n        return render(request, 'budget_control/add_transaction.html', {'form': form})\n\n\n@login_required\ndef edit_transaction(request, transaction_id):\n    transaction = get_object_or_404(Transaction, id=transaction_id, user=request.user)\n    if request.method == 'POST':\n        form = TransactionForm(request.POST, instance=transaction, user=request.user)\n        if form.is_valid():\n            form.save()\n            return JsonResponse({'status': 'success'})\n        return JsonResponse({'status':'error', 'errors':form.errors}, status=400)\n    else:\n        form = TransactionForm(instance=transaction, user=request.user)\n        return render(request, 'budget_control/edit_transaction.html', {'form': form, 'transaction_id': transaction_id})\n\n\n@login_required\ndef delete_transaction(request, transaction_id):\n    transaction = get_object_or_404(Transaction, id=transaction_id, user=request.user)\n    if request.method == 'POST':\n        transaction.delete()\n        return JsonResponse({'status': 'success'})\n    return JsonResponse({'status': 'error'}, status=400)\n\n@login_required\ndef filter_transactions(request):\n    transactions = Transaction.objects.filter(user=request.user)\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    category_id = request.GET.get('category_id')\n    min_amount = request.GET.get('min_amount')\n    max_amount = request.GET.get('max_amount')\n\n    if start_date:\n        transactions = transactions.filter(date__gte=start_date)\n    if end_date:\n        transactions = transactions.filter(date__lte=end_date)\n    if category_id:\n      try:\n        transactions = transactions.filter(category_id=category_id)\n      except ValueError:\n        pass\n    if min_amount:\n      try:\n        transactions = transactions.filter(amount__gte=min_amount)\n      except ValueError:\n        pass\n\n    if max_amount:\n      try:\n        transactions = transactions.filter(amount__lte=max_amount)\n      except ValueError:\n        pass\n    \n    transaction_list = [{'amount': str(t.amount), 'date': t.date.strftime('%Y-%m-%d'), 'category': t.category.name if t.category else '', 'description': t.description} for t in transactions]\n    return JsonResponse(transaction_list, safe=False)\n\n\n@login_required\ndef reports(request):\n  #Generate Monthly Report\n    today = datetime.today()\n    first_day_of_month = today.replace(day=1)\n    transactions = Transaction.objects.filter(user = request.user, date__gte=first_day_of_month)\n    report_data = []\n    balance = 0\n\n    for t in transactions:\n      balance += t.amount\n      report_data.append({\n          'date': t.date.strftime('%Y-%m-%d'),\n          'amount': str(t.amount),\n          'category': t.category.name if t.category else '',\n          'description': t.description,\n          'balance': str(balance)\n      })\n\n    return render(request, 'budget_control/reports.html', {'report_data': report_data})\n\n\n@login_required\ndef export_data(request):\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"financial_data.csv\"'\n\n    writer = csv.writer(response)\n    writer.writerow(['Date', 'Amount', 'Category', 'Description'])\n\n    transactions = Transaction.objects.filter(user=request.user).order_by('date')\n    for transaction in transactions:\n        writer.writerow([transaction.date, transaction.amount, transaction.category, transaction.description])\n\n    return response\n\n@login_required\ndef settings(request):\n    #Update Profile\n    user_profile = UserProfile.objects.get(user=request.user)\n    if request.method == 'POST':\n        form = UserProfileForm(request.POST, instance=user_profile)\n        if form.is_valid():\n            form.save()\n            return redirect('settings')\n    else:\n        form = UserProfileForm(instance=user_profile)\n\n    return render(request, 'budget_control/settings.html', {'form': form})\n\n@login_required\ndef list_categories(request):\n  #List Category\n    categories = Category.objects.filter(user=request.user)\n    return render(request, 'budget_control/list_categories.html', {'categories': categories})\n\n@login_required\ndef add_category(request):\n    # Add Category\n    if request.method == 'POST':\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            category = form.save(commit=False)\n            category.user = request.user\n            category.save()\n            return JsonResponse({'status': 'success'})\n        return JsonResponse({'status':'error', 'errors':form.errors}, status = 400)\n    return JsonResponse({'status': 'error'}, status=400)\n\n\n@login_required\ndef edit_category(request, category_id):\n    # Edit Category\n    category = get_object_or_404(Category, id=category_id, user=request.user)\n    if request.method == 'POST':\n        form = CategoryForm(request.POST, instance=category)\n        if form.is_valid():\n            form.save()\n            return JsonResponse({'status': 'success'})\n        return JsonResponse({'status':'error', 'errors':form.errors}, status = 400)\n    return JsonResponse({'status': 'error'}, status=400)\n\n\n@login_required\ndef delete_category(request, category_id):\n    # Delete Category\n    category = get_object_or_404(Category, id=category_id, user=request.user)\n    if request.method == 'POST':\n        category.delete()\n        return JsonResponse({'status': 'success'})\n    return JsonResponse({'status': 'error'}, status=400)\n\ndef help_page(request):\n    #View FAQs & Contact Support\n    faqs = [\n        {'question': 'How to add a transaction?', 'answer': 'Go to Balance Tracker...'},\n        {'question': 'How can I see reports?', 'answer': 'Click on the Reports tab...'}\n    ]\n    return render(request, 'budget_control/help.html', {'faqs': faqs})\n"}, {"file": "forms.py", "path": "budget_control/forms.py", "code": "from django import forms\nfrom .models import Transaction, Category, UserProfile\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['amount', 'date', 'category', 'description']\n\n    def __init__(self, *args, **kwargs):\n        user = kwargs.pop('user', None)  # Get the user from kwargs\n        super().__init__(*args, **kwargs)\n        if user:\n            self.fields['category'].queryset = Category.objects.filter(user=user)\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']\n\nclass UserProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = []"}, {"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('balance/', views.balance_tracker, name='balance_tracker'),\n    path('transactions/add/', views.add_transaction, name='add_transaction'),\n    path('transactions/<int:transaction_id>/edit/', views.edit_transaction, name='edit_transaction'),\n    path('transactions/<int:transaction_id>/delete/', views.delete_transaction, name='delete_transaction'),\n    path('transactions/filter/', views.filter_transactions, name='filter_transactions'),\n    path('reports/', views.reports, name='reports'),\n    path('export/', views.export_data, name='export_data'),\n    path('settings/', views.settings, name='settings'),\n    path('categories/', views.list_categories, name='list_categories'),\n    path('categories/add/', views.add_category, name='add_category'),\n    path('categories/<int:category_id>/edit/', views.edit_category, name='edit_category'),\n    path('categories/<int:category_id>/delete/', views.delete_category, name='delete_category'),\n    path('help/', views.help_page, name='help'),\n\n]"}, {"file": "admin.py", "path": "budget_control/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction, Category, UserProfile\n\nadmin.site.register(Transaction)\nadmin.site.register(Category)\nadmin.site.register(UserProfile)"}, {"file": "dashboard.html", "path": "budget_control/templates/budget_control/dashboard.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n<h1>Dashboard</h1>\n\n<h2>Current Balance: ${{ balance }}</h2>\n\n{% if alerts %}\n    <div class=\"alerts\">\n    <h3>Alerts:</h3>\n        <ul>\n            {% for alert in alerts %}\n                <li>{{ alert.message }}</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endif %}\n\n<h2>Recent Transactions</h2>\n<table>\n    <thead>\n        <tr>\n            <th>Date</th>\n            <th>Amount</th>\n            <th>Category</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        {% for transaction in transactions %}\n        <tr>\n            <td>{{ transaction.date }}</td>\n            <td>{{ transaction.amount }}</td>\n            <td>{{ transaction.category }}</td>\n            <td>{{ transaction.description }}</td>\n        </tr>\n        {% endfor %}\n    </tbody>\n</table>\n\n{% endblock %}"}, {"file": "home.html", "path": "budget_control/templates/budget_control/home.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n<h1>Welcome to Budget Control</h1>\n<p>This is the homepage. Please <a href=\"{% url 'login' %}\">login</a> or <a href=\"{% url 'signup' %}\">sign up</a>.</p>\n<a href=\"{% url 'help' %}\">Support</a>\n{% endblock %}"}, {"file": "signup.html", "path": "budget_control/templates/budget_control/signup.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n  <h2>Sign Up</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Sign Up</button>\n  </form>\n{% endblock %}"}, {"file": "login.html", "path": "budget_control/templates/budget_control/login.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n  <h2>Login</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Login</button>\n  </form>\n{% endblock %}"}, {"file": "balance_tracker.html", "path": "budget_control/templates/budget_control/balance_tracker.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n<h1>Balance Tracker</h1>\n\n<h2>Balance Chart</h2>\n<canvas id=\"balanceChart\"></canvas>\n\n<h2>Category Chart</h2>\n<canvas id=\"categoryChart\"></canvas>\n\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n<script>\nconst balanceCtx = document.getElementById('balanceChart').getContext('2d');\nconst balanceChart = new Chart(balanceCtx, {\n    type: 'line',\n    data: {\n        labels: [{% for item in balance_data %}'{{ item.date }}',{% endfor %}],\n        datasets: [{\n            label: 'Balance Over Time',\n            data: [{% for item in balance_data %}{{ item.balance }},{% endfor %}],\n            borderColor: 'rgb(75, 192, 192)',\n            tension: 0.1\n        }]\n    },\n});\n\nconst categoryCtx = document.getElementById('categoryChart').getContext('2d');\nconst categoryChart = new Chart(categoryCtx, {\n type: 'pie',\n    data: {\n        labels: [{% for item in category_data %}'{{ item.name }}',{% endfor %}],\n        datasets: [{\n            label: 'Category Structure',\n            data: [{% for item in category_data %}{{ item.amount }},{% endfor %}],\n            backgroundColor: [\n                'rgb(255, 99, 132)',\n                'rgb(54, 162, 235)',\n                'rgb(255, 205, 86)',\n                'rgb(75, 192, 192)',\n                'rgb(153, 102, 255)',\n                'rgb(255, 159, 64)'\n            ],\n            hoverOffset: 4\n        }]\n    }\n});\n</script>\n\n{% endblock %}"}, {"file": "add_transaction.html", "path": "budget_control/templates/budget_control/add_transaction.html", "code": "<form id=\"addTransactionForm\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Add Transaction</button>\n</form>\n\n<script>\nconst transactionForm = document.getElementById('addTransactionForm');\ntransactionForm.addEventListener('submit', function(e) {\n    e.preventDefault();\n\n    fetch('{% url 'add_transaction' %}', {\n        method: 'POST',\n        body: new FormData(transactionForm),\n        headers: {\n            'X-CSRFToken': '{{ csrf_token }}',\n        },\n    })\n    .then(response => {\n       if (!response.ok) {\n           return response.json().then(data => { throw data; });\n        }\n      return response.json();\n    })\n    .then(data => {\n        alert('Transaction added successfully!');\n\t\twindow.location.href = \"{% url 'balance_tracker' %}\";\n    })\n    .catch((error) => {\n     let error_message = \"\";\n      for (let field in error.errors) {\n          error_message += `${field}: ${error.errors[field].join(', ')}\\n`;\n      }\n      alert(\"Error: \" + error_message);\n    });\n});\n</script>"}, {"file": "edit_transaction.html", "path": "budget_control/templates/budget_control/edit_transaction.html", "code": "<form id=\"editTransactionForm\" method=\"post\">\n {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Update Transaction</button>\n</form>\n<script>\nconst editForm = document.getElementById('editTransactionForm');\n\neditForm.addEventListener('submit', function(e) {\n    e.preventDefault();\n    fetch(`/transactions/{{ transaction_id }}/edit/`, {\n        method: 'POST',\n        body: new FormData(editForm),\n        headers: {\n            'X-CSRFToken': '{{ csrf_token }}',\n        },\n    })\n     .then(response => {\n       if (!response.ok) {\n           return response.json().then(data => { throw data; });\n        }\n      return response.json();\n    })\n    .then(data => {\n        alert('Transaction updated successfully!');\n        window.location.href = \"{% url 'balance_tracker' %}\";\n    })\n .catch((error) => {\n     let error_message = \"\";\n      for (let field in error.errors) {\n          error_message += `${field}: ${error.errors[field].join(', ')}\\n`;\n      }\n      alert(\"Error: \" + error_message);\n    });\n});\n</script>"}, {"file": "reports.html", "path": "budget_control/templates/budget_control/reports.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n<h1>Monthly Report</h1>\n\n<table>\n <thead>\n        <tr>\n            <th>Date</th>\n            <th>Amount</th>\n            <th>Category</th>\n            <th>Description</th>\n   <th>Balance</th>\n        </tr>\n    </thead>\n <tbody>\n        {% for transaction in report_data %}\n            <tr>\n                <td>{{ transaction.date }}</td>\n                <td>{{ transaction.amount }}</td>\n                <td>{{ transaction.category }}</td>\n                <td>{{ transaction.description }}</td>\n    <td>{{ transaction.balance }}</td>\n            </tr>\n        {% endfor %}\n    </tbody>\n</table>\n\n<a href=\"{% url 'export_data' %}\">Export Data (CSV)</a>\n{% endblock %}"}, {"file": "settings.html", "path": "budget_control/templates/budget_control/settings.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n  <h1>Settings</h1>\n\n  <h2>Update Profile</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Update Profile</button>\n  </form>\n\n{% endblock %}"}, {"file": "list_categories.html", "path": "budget_control/templates/budget_control/list_categories.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n<h1>Categories</h1>\n\n<table id=\"categoryTable\">\n    <thead>\n        <tr>\n            <th>Name</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        {% for category in categories %}\n        <tr data-id=\"{{ category.id }}\">\n            <td class=\"category-name\">{{ category.name }}</td>\n            <td>\n                <button class=\"edit-category\">Edit</button>\n                <button class=\"delete-category\">Delete</button>\n            </td>\n        </tr>\n        {% endfor %}\n    </tbody>\n</table>\n\n<h2>Add Category</h2>\n<input type=\"text\" id=\"newCategoryName\" placeholder=\"New Category Name\">\n<button id=\"addCategory\">Add</button>\n\n<script>\n    document.getElementById('addCategory').addEventListener('click', function() {\n        const categoryName = document.getElementById('newCategoryName').value;\n\n        fetch('{% url 'add_category' %}', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                'X-CSRFToken': '{{ csrf_token }}',\n            },\n            body: 'name=' + encodeURIComponent(categoryName)\n        })\n       .then(response => {\n       if (!response.ok) {\n           return response.json().then(data => { throw data; });\n        }\n      return response.json();\n    })\n        .then(data => {\n            if (data.status === 'success') {\n                alert('Category added successfully!');\n                location.reload();\n            }\n        })\n     .catch((error) => {\n     let error_message = \"\";\n      for (let field in error.errors) {\n          error_message += `${field}: ${error.errors[field].join(', ')}\\n`;\n      }\n      alert(\"Error: \" + error_message);\n    });\n    });\n\n    const categoryTable = document.getElementById('categoryTable');\n    categoryTable.addEventListener('click', function(e) {\n     if (e.target.classList.contains('edit-category')) {\n            const row = e.target.closest('tr');\n            const categoryId = row.dataset.id;\n            const currentName = row.querySelector('.category-name').textContent;\n            const newName = prompt('Enter new category name:', currentName);\n            if (newName !== null && newName !== currentName) {\n                fetch(`/categories/${categoryId}/edit/`, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'X-CSRFToken': '{{ csrf_token }}',\n                    },\n                     body: 'name=' + encodeURIComponent(newName)\n                })\n               .then(response => {\n       if (!response.ok) {\n           return response.json().then(data => { throw data; });\n        }\n      return response.json();\n    })\n                .then(data => {\n                    if (data.status === 'success') {\n                       alert('Category updated successfully!');\n                       location.reload();\n                    }\n                })\n             .catch((error) => {\n     let error_message = \"\";\n      for (let field in error.errors) {\n          error_message += `${field}: ${error.errors[field].join(', ')}\\n`;\n      }\n      alert(\"Error: \" + error_message);\n    });\n            }\n        } else if (e.target.classList.contains('delete-category')){\n            const categoryId = e.target.closest('tr').dataset.id;\n            if(confirm('Are you sure to delete this category?')){\n             fetch(`/categories/${categoryId}/delete/`, {\n              method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'X-CSRFToken': '{{ csrf_token }}',\n                    },\n             })\n            .then(response => response.json())\n            .then(data => {\n             if(data.status === 'success'){\n              alert('Category deleted successfully!');\n              location.reload();\n             }\n            })\n            }\n        }\n    });\n\n\n</script>\n\n{% endblock %}"}, {"file": "help.html", "path": "budget_control/templates/budget_control/help.html", "code": "{% extends 'budget_control/base.html' %}\n\n{% block content %}\n<h1>Help</h1>\n\n<h2>Frequently Asked Questions</h2>\n<ul>\n    {% for faq in faqs %}\n    <li>\n        <strong>{{ faq.question }}</strong><br>\n        {{ faq.answer }}\n    </li>\n    {% endfor %}\n</ul>\n\n<h2>Contact Support</h2>\n<p>If you need further assistance, please contact us at support@example.com.</p>\n{% endblock %}"}, {"file": "base.html", "path": "budget_control/templates/budget_control/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Budget Control</title>\n</head>\n<body>\n    <nav>\n        <ul>\n            <li><a href=\"{% url 'home' %}\">Home</a></li>\n            {% if user.is_authenticated %}\n                <li><a href=\"{% url 'balance_tracker' %}\">Balance Tracker</a></li>\n                <li><a href=\"{% url 'reports' %}\">Reports</a></li>\n                <li><a href=\"{% url 'settings' %}\">Settings</a></li>\n                <li><a href=\"{% url 'list_categories' %}\">Categories</a></li>\n                <li><a href=\"{% url 'logout' %}\">Logout</a></li>\n            {% else %}\n                <li><a href=\"{% url 'login' %}\">Login</a></li>\n                <li><a href=\"{% url 'signup' %}\">Sign Up</a></li>\n            {% endif %}\n   <li><a href=\"{% url 'help' %}\">Help</a></li>\n        </ul>\n    </nav>\n    <div class=\"content\">\n        {% block content %}\n        {% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "0001_initial.py", "path": "budget_control/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-29 14:00\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateField()),\n                ('description', models.CharField(blank=True, max_length=255)),\n                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='budget_control.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}], "8": "```json\n[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"calendar_app/models.py\",\n    \"code\":\n      \"\"\"from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title\n\"\"\"\n  },\n  {\n    \"file\": \"forms.py\",\n    \"path\": \"calendar_app/forms.py\",\n    \"code\":\n      \"\"\"from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}, format='%Y-%m-%dT%H:%M'),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}, format='%Y-%m-%dT%H:%M'),\n        }\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['start_time'].input_formats = ('%Y-%m-%dT%H:%M',)\n        self.fields['end_time'].input_formats = ('%Y-%m-%dT%H:%M',)\n\"\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"calendar_app/views.py\",\n    \"code\":\n      \"\"\"from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse, JsonResponse\nfrom .models import Event\nfrom .forms import EventForm\nfrom django.views.decorators.http import require_http_methods\nimport calendar\nfrom datetime import datetime, date, timedelta\n\n\ndef home(request):\n    today = date.today()\n    # Quick calendar\n    current_year = today.year\n    current_month = today.month\n    cal = calendar.HTMLCalendar().formatmonth(current_year, current_month)\n    \n    context = {\n        'current_date': today.strftime('%Y-%m-%d'),  # Format the date as needed\n        'calendar' : cal\n    }\n    return render(request, 'calendar_app/home.html', context)\n\ndef calendar_view(request):\n    year = request.GET.get('year')\n    month = request.GET.get('month')\n    \n    if year and month:\n      try:\n        year = int(year)\n        month = int(month)\n      except:\n        return HttpResponse(\"invalid year or month\",status = 400)\n      cal = calendar.HTMLCalendar().formatmonth(year, month)      \n      return render(request, 'calendar_app/calendar.html', {'calendar': cal, 'year': year, 'month':month})\n\n    today = date.today()    \n    cal = calendar.HTMLCalendar().formatmonth(today.year, today.month)      \n    return render(request, 'calendar_app/calendar.html', {'calendar': cal, 'year': today.year, 'month':today.month})\n\n@require_http_methods([\"GET\", \"POST\"])\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/add_event.html', {'form': form})\n\n@require_http_methods([\"GET\", \"POST\"])\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n\n    if request.method == 'POST':\n      if 'delete_event' in request.POST:\n          event.delete()\n          return redirect('all_events')\n\n      form = EventForm(request.POST, instance=event)\n      if form.is_valid():\n          form.save()\n          return redirect('all_events')\n\n    else:\n        form = EventForm(instance=event)\n\n    return render(request, 'calendar_app/event_details.html', {'event': event, 'form': form})\n\ndef search_events(request):\n    query = request.GET.get('q')\n    if query:\n      events = Event.objects.filter(title__icontains=query)    \n      return render(request, 'calendar_app/search_events.html', {'events': events, 'query':query})\n    return render(request, 'calendar_app/search_events.html', {'events':[], 'query': \"\"})\n\ndef all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/all_events.html', {'events': events})\n\ndef help_page(request):\n    #This is a placeholder.  Replace with actual FAQ/User Guide logic.\n    faq_data = [\n        {'question': 'How do I add an event?', 'answer': 'Click the \"Add Event\" button and fill out the form.'},\n        {'question': 'How to search the event?', 'answer': 'Find the search bar in the events page.'}\n    ]\n    user_guide_data = \"Detailed instructions on how to use the application will go here.\"\n\n    context = {\n        'faq': faq_data,\n        'user_guide': user_guide_data\n    }\n    return render(request, 'calendar_app/help.html', context)\n\n\"\"\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"calendar_app/urls.py\",\n    \"code\":\n      \"\"\"from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar_view'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('events/search/', views.search_events, name='search_events'),\n    path('events/all/', views.all_events, name='all_events'),\n    path('help/', views.help_page, name='help_page')\n]\n\"\"\"\n  },\n    {\n    \"file\": \"urls.py\",\n    \"path\": \"my_calendar_project/urls.py\",\n    \"code\":\n      \"\"\"from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]\n\"\"\"\n  },\n  {\n    \"file\": \"home.html\",\n    \"path\": \"calendar_app/templates/calendar_app/home.html\",\n    \"code\":\n      \"\"\"<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Calendar App</h1>\n    <p>Current Date: {{ current_date }}</p>\n    <h2>Quick Calendar Access</h2>\n        {{calendar|safe}}\n     <p><a href=\"{% url 'add_event' %}\">Add Event</a></p>\n     <p><a href=\"{% url 'all_events' %}\">View All Events</a></p>\n      <p><a href=\"{% url 'calendar_view' %}\">View Calendar By Month</a></p>\n\n</body>\n</html>\n\"\"\"\n  },\n  {\n    \"file\": \"calendar.html\",\n    \"path\": \"calendar_app/templates/calendar_app/calendar.html\",\n    \"code\":\n      \"\"\"<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar</title>\n</head>\n<body>\n    <h1>Calendar</h1>\n    <form method=\"get\">\n        <label for=\"year\">Year:</label>\n        <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\">\n        <label for=\"month\">Month:</label>\n        <input type=\"number\" id=\"month\" name=\"month\" value=\"{{ month }}\" min=\"1\" max=\"12\">\n        <button type=\"submit\">Go</button>\n    </form>\n\n    {{ calendar|safe }}\n   <p><a href=\"{% url 'home' %}\">Back to Home</a></p>\n</body>\n</html>\n\"\"\"\n  },\n  {\n    \"file\": \"add_event.html\",\n    \"path\": \"calendar_app/templates/calendar_app/add_event.html\",\n    \"code\":\n      \"\"\"<!DOCTYPE html>\n<html>\n<head>\n    <title>Add Event</title>\n</head>\n<body>\n    <h1>Add Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Add Event</button>\n    </form>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>\n\"\"\"\n  },\n  {\n    \"file\": \"event_details.html\",\n    \"path\": \"calendar_app/templates/calendar_app/event_details.html\",\n    \"code\":\n      \"\"\"<!DOCTYPE html>\n<html>\n<head>\n    <title>Event Details</title>\n</head>\n<body>\n    <h1>{{ event.title }}</h1>\n    <p>Description: {{ event.description }}</p>\n    <p>Start Time: {{ event.start_time }}</p>\n    <p>End Time: {{ event.end_time }}</p>\n\n    <h2>Edit Event</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save Changes</button>\n    </form>\n\n    <h2>Delete Event</h2>\n    <form method=\"post\">\n      {% csrf_token %}\n      <input type=\"hidden\" name=\"delete_event\" value=\"true\">\n      <button type=\"submit\" onclick=\"return confirm('Are you sure you want to delete this event?');\">Delete Event</button>\n    </form>\n\n     <a href=\"{% url 'all_events' %}\">Back to All Events</a>\n</body>\n</html>\n\"\"\"\n  },\n    {\n    \"file\": \"search_events.html\",\n    \"path\": \"calendar_app/templates/calendar_app/search_events.html\",\n    \"code\":\n      \"\"\"<!DOCTYPE html>\n<html>\n<head>\n    <title>Search Events</title>\n</head>\n<body>\n  <h1>Search Events</h1>\n    <form method=\"get\" action=\"{% url 'search_events' %}\">\n      <input type=\"text\" name=\"q\" value=\"{{query}}\" placeholder=\"Search events...\">\n      <button type=\"submit\">Search</button>\n    </form>\n\n  {% if events %}\n    <h2>Search Results:</h2>\n    <ul>\n      {% for event in events %}\n        <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }} - {{ event.start_time }}</a></li>\n      {% endfor %}\n    </ul>\n    {% else %}\n        {% if query %}\n          <p>No events found matching \"{{ query }}\".</p>\n        {% endif %}\n    {% endif %}\n  <a href=\"{% url 'all_events' %}\">View All Events</a>\n</body>\n</html>\n\"\"\"\n  },\n  {\n    \"file\": \"all_events.html\",\n    \"path\": \"calendar_app/templates/calendar_app/all_events.html\",\n    \"code\":\n      \"\"\"<!DOCTYPE html>\n<html>\n<head>\n    <title>All Events</title>\n</head>\n<body>\n    <h1>All Events</h1>\n    <a href=\"{% url 'add_event' %}\">Add New Event</a>\n     <p></p>\n    <ul>\n    {% for event in events %}\n        <li>\n            <a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}\n        </li>\n    {% empty %}\n        <li>No events yet.</li>\n    {% endfor %}\n    </ul>\n\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n     <p></p>\n    <a href=\"{% url 'search_events' %}\">Search Events</a>\n\n</body>\n</html>\n\"\"\"\n  },\n  {\n    \"file\": \"help.html\",\n    \"path\": \"calendar_app/templates/calendar_app/help.html\",\n    \"code\":\n      \"\"\"<!DOCTYPE html>\n<html>\n<head>\n    <title>Help</title>\n</head>\n<body>\n    <h1>Help</h1>\n\n    <h2>Frequently Asked Questions</h2>\n    {% for item in faq %}\n        <h3>{{ item.question }}</h3>\n        <p>{{ item.answer }}</p>\n    {% empty %}\n        <p>No FAQs available.</p>\n    {% endfor %}\n\n    <h2>User Guide</h2>\n    <p>{{ user_guide }}</p>\n     <p><a href=\"{% url 'home' %}\">Back to Home</a></p>\n</body>\n</html>\n\"\"\"\n  },\n    {\n     \"file\": \"admin.py\",\n     \"path\": \"calendar_app/admin.py\",\n     \"code\":\n      \"\"\"from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)\n\"\"\"\n  }\n]\n```\n", "9": [{"file": "models.py", "path": "chatbot_app/models.py", "code": "from django.db import models\n\n# No specific models are strictly required by the checklist,\n# but you might add models for pricing plans, user accounts, etc. later.\n\nclass PricingPlan(models.Model):\n    name = models.CharField(max_length=100)\n    price = models.DecimalField(max_digits=6, decimal_places=2)\n    features = models.TextField() # Could be a JSONField in a real app\n    # Add other relevant fields (e.g., monthly/annual, limits)\n\n    def __str__(self):\n        return self.name\n\nclass ContactMessage(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    def __str__(self): return f'{self.name} : {self.email}'"}, {"file": "views.py", "path": "chatbot_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import PricingPlan, ContactMessage\nfrom .forms import ContactForm, SupportForm\nfrom django.contrib import messages\n\ndef home(request):\n    # Logic for product overview\n    context = {\n        'overview': 'Our AI Chatbot provides powerful and versatile conversational capabilities...'  # Replace with actual overview\n    }\n    return render(request, 'chatbot_app/home.html', context)\n\ndef features(request):\n    # Logic for listing key features\n    features_list = [\n        'Feature 1: Intelligent response generation',\n        'Feature 2: Customizable knowledge base',\n        'Feature 3: Multi-platform integration',\n    ]  # Replace with actual feature descriptions\n    context = {\n        'features': features_list\n    }\n    return render(request, 'chatbot_app/features.html', context)\n\ndef pricing(request):\n    plans = PricingPlan.objects.all() # Fetch Pricing Plan Data\n\n    if request.method == 'POST':\n      form = ContactForm(request.POST)\n      if form.is_valid():\n        form.save()\n        messages.success(request, 'Your message has been sent successfully. Our Sales Team will contact you soon.')\n        return redirect('pricing')\n    else:\n      form = ContactForm()\n\n    context = {\n      'pricing_plans': plans, 'form':form\n    }\n\n    return render(request, 'chatbot_app/pricing.html', context)\n\ndef about(request):\n    # Logic for company background\n    context = {\n        'company_info': 'We are a dedicated team of AI experts...'  # Replace with actual company information\n    }\n    return render(request, 'chatbot_app/about.html', context)\n\n\ndef support(request):\n    # Logic for FAQ and support form\n    faq_data = [\n        {'question': 'What is an AI Chatbot?', 'answer': 'An AI Chatbot is ...'},\n        {'question': 'How do I integrate the chatbot?', 'answer': 'You can integrate ...'},\n        # Add more FAQ entries\n    ]\n\n    if request.method == 'POST':\n        support_form = SupportForm(request.POST)\n        if support_form.is_valid():\n            support_form.save()\n            messages.success(request, 'Your support request has been submitted.  We will get back to you shortly.')\n            return redirect('support') # Redirect after successful form submission\n    else:\n        support_form = SupportForm()\n\n    context = {\n        'faq': faq_data,\n        'support_form': support_form\n    }\n    return render(request, 'chatbot_app/support.html', context)"}, {"file": "urls.py", "path": "chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about/', views.about, name='about'),\n    path('support/', views.support, name='support'),\n]"}, {"file": "forms.py", "path": "chatbot_app/forms.py", "code": "from django import forms\nfrom .models import ContactMessage\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactMessage\n        fields = ['name', 'email', 'message']\n        widgets = {\n          'message': forms.Textarea(attrs={'rows':4})\n        }\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = ContactMessage\n        fields = ['name', 'email', 'message']\n        widgets = {\n          'message': forms.Textarea(attrs={'rows':4})\n        }"}, {"file": "urls.py", "path": "chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),  # Include your app's URLs\n]"}, {"file": "home.html", "path": "chatbot_app/templates/chatbot_app/home.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1>Welcome to Our AI Chatbot</h1>\n<p>{{ overview }}</p>\n{# Add more detailed content here, images, etc. #}\n{% endblock %}"}, {"file": "features.html", "path": "chatbot_app/templates/chatbot_app/features.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1>Key Features</h1>\n<ul>\n    {% for feature in features %}\n        <li>{{ feature }}</li>\n    {% endfor %}\n</ul>\n{% endblock %}"}, {"file": "pricing.html", "path": "chatbot_app/templates/chatbot_app/pricing.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1>Pricing Plans</h1>\n{% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n\n<div class=\"pricing-table\">\n  {% for plan in pricing_plans %}\n    <div class=\"plan\">\n      <h2>{{ plan.name }}</h2>\n      <p class=\"price\">${{ plan.price }}</p>\n      <p>{{ plan.features }}</p>\n    </div>\n  {% empty %}\n  <p>No pricing plans available at the moment</p>\n  {% endfor %}\n</div>\n\n<h2>Contact Sales</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit</button>\n</form>\n\n{% endblock %}"}, {"file": "about.html", "path": "chatbot_app/templates/chatbot_app/about.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1>About Us</h1>\n<p>{{ company_info }}</p>\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_app/templates/chatbot_app/support.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n<h1>Support</h1>\n{% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n<h2>Frequently Asked Questions</h2>\n<dl>\n    {% for item in faq %}\n        <dt>{{ item.question }}</dt>\n        <dd>{{ item.answer }}</dd>\n    {% endfor %}\n</dl>\n\n<h2>Need More Help?</h2>\n <form method=\"post\">\n    {% csrf_token %}\n    {{ support_form.as_p }}\n    <button type=\"submit\">Submit</button>\n</form>\n{% endblock %}"}, {"file": "base.html", "path": "chatbot_app/templates/chatbot_app/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'features' %}\">Features</a> |\n        <a href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a href=\"{% url 'about' %}\">About Us</a> |\n        <a href=\"{% url 'support' %}\">Support</a>\n    </nav>\n    <hr>\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}], "10": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    # Add other profile fields (e.g., dietary preferences, goals)\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    date = models.DateField()\n    # Add other meal details (e.g., description, time)\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories_burned = models.IntegerField()\n    date = models.DateField()\n    duration = models.IntegerField(null=True, blank=True)  # In minutes\n    # Add other activity details\n"}, {"file": "forms.py", "path": "myapp/forms.py", "code": "from django import forms\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    # Add custom fields if needed\n    class Meta(UserCreationForm.Meta):\n        fields = UserCreationForm.Meta.fields + ('email',)\n\n\nclass LoginForm(AuthenticationForm):\n    pass # Django's built-in AuthenticationForm is often sufficient\n\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = ['name', 'calories', 'date']\n\nclass ActivityForm(forms.ModelForm):\n    class Meta:\n        model = Activity\n        fields = ['name', 'calories_burned', 'date', 'duration']\n\nclass UserProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = '__all__'  # Or specify the fields you want to include\n        exclude = ['user']"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth import login, authenticate, logout\nfrom django.contrib.auth.decorators import login_required\nfrom .forms import SignUpForm, LoginForm, MealForm, ActivityForm, UserProfileForm\nfrom .models import Meal, Activity, UserProfile\nfrom django.http import JsonResponse\nfrom django.db.models import Sum\nimport datetime\n\ndef home(request):\n    if request.user.is_authenticated:\n        return redirect('dashboard')\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = LoginForm(request, data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n@login_required\ndef dashboard(request):\n    today = datetime.date.today()\n    total_calories = Meal.objects.filter(user=request.user, date=today).aggregate(Sum('calories'))['calories__sum'] or 0\n    recent_meals = Meal.objects.filter(user=request.user).order_by('-date')[:5]\n    recent_activities = Activity.objects.filter(user=request.user).order_by('-date')[:5]\n    context = {\n        'total_calories': total_calories,\n        'recent_meals': recent_meals,\n        'recent_activities': recent_activities,\n    }\n    return render(request, 'dashboard.html', context)\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm()\n    return render(request, 'add_meal.html', {'form': form})\n\n\n@login_required\ndef meal_log(request):\n    meals = Meal.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'meal_log.html', {'meals': meals})\n\n@login_required\ndef edit_meal(request, meal_id):\n    meal = get_object_or_404(Meal, pk=meal_id, user=request.user)\n    if request.method == 'POST':\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            form.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'edit_meal.html', {'form': form, 'meal': meal})\n\n\n@login_required\ndef delete_meal(request, meal_id):\n    meal = get_object_or_404(Meal, pk=meal_id, user=request.user)\n    if request.method == 'POST':\n        meal.delete()\n        return redirect('meal_log')\n    return render(request, 'delete_meal.html', {'meal': meal})\n\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False)\n            activity.user = request.user\n            activity.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm()\n    return render(request, 'add_activity.html', {'form': form})\n\n\n@login_required\ndef activity_log(request):\n    activities = Activity.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'activity_log.html', {'activities': activities})\n\n@login_required\ndef edit_activity(request, activity_id):\n      activity = get_object_or_404(Activity, pk=activity_id, user=request.user)\n      if request.method == 'POST':\n          form = ActivityForm(request.POST, instance=activity)\n          if form.is_valid():\n              form.save()\n              return redirect('activity_log')\n      else:\n          form = ActivityForm(instance=activity)\n      return render(request, 'edit_activity.html', {'form':form, 'activity':activity})\n\n@login_required\ndef delete_activity(request, activity_id):\n    activity = get_object_or_404(Activity, pk=activity_id, user=request.user)\n    if request.method == 'POST':\n        activity.delete()\n        return redirect('activity_log')\n    return render(request, 'delete_activity.html', {'activity': activity})\n\n@login_required\ndef analysis(request):\n  # Add logic to query data for weekly calorie chart (example below)\n    today = datetime.date.today()\n    weekly_data = []\n    for i in range(7):\n        date = today - datetime.timedelta(days=i)\n        calories_in = Meal.objects.filter(user=request.user, date=date).aggregate(Sum('calories'))['calories__sum'] or 0\n        calories_out = Activity.objects.filter(user=request.user, date=date).aggregate(Sum('calories_burned'))['calories_burned__sum'] or 0\n        weekly_data.append({'date': date, 'calories_in': calories_in, 'calories_out': calories_out})\n    return render(request, 'analysis.html', {'weekly_data': weekly_data})\n\n\n@login_required\ndef settings(request):\n    user_profile, created = UserProfile.objects.get_or_create(user=request.user)\n    if request.method == 'POST':\n          form = UserProfileForm(request.POST, instance=user_profile)\n          if form.is_valid():\n              form.save()\n              return redirect('settings')\n    else:\n        form = UserProfileForm(instance=user_profile)\n    return render(request, 'settings.html', {'form': form})\n\n\ndef help_page(request):\n    # You can add context data here for FAQ, contact, etc.\n    return render(request, 'help.html')\n\ndef user_logout(request):\n    logout(request)\n    return redirect('home')"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/log/', views.meal_log, name='meal_log'),\n    path('meal/<int:meal_id>/edit/', views.edit_meal, name='edit_meal'),\n    path('meal/<int:meal_id>/delete/', views.delete_meal, name='delete_meal'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/log/', views.activity_log, name='activity_log'),\n    path('activity/<int:activity_id>/edit/', views.edit_activity, name='edit_activity'),\n    path('activity/<int:activity_id>/delete/', views.delete_activity, name='delete_activity'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help_page, name='help'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),  # Include your app's URLs\n]"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Meal, Activity, UserProfile\n\nadmin.site.register(Meal)\nadmin.site.register(Activity)\nadmin.site.register(UserProfile)"}, {"file": "home.html", "path": "myapp/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Welcome to Calorie Tracker!</h1>\n  <p>Track your daily calorie intake and expenditure.</p>\n  <a href=\"{% url 'signup' %}\">Sign Up</a>\n  <a href=\"{% url 'login' %}\">Log In</a>\n{% endblock %}"}, {"file": "signup.html", "path": "myapp/templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Sign Up</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Sign Up</button>\n    </form>\n{% endblock %}"}, {"file": "login.html", "path": "myapp/templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Log In</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Log In</button>\n    </form>\n{% endblock %}"}, {"file": "dashboard.html", "path": "myapp/templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Dashboard</h2>\n  <p>Today's Total Calories: {{ total_calories }}</p>\n    <h3>Recent Meals</h3>\n    <ul>\n        {% for meal in recent_meals %}\n        <li>{{ meal.name }} ({{ meal.calories }} calories) - {{ meal.date }} </li>\n         {% empty %}\n          <li>No meals logged yet.</li>\n        {% endfor %}\n    </ul>\n  <h3>Recent Activities</h3>\n\n    <ul>\n    {% for activity in recent_activities %}\n      <li>{{activity.name}} ({{ activity.calories_burned }} calories) -  {{activity.date}}</li>\n    {% empty %}\n      <li>No activities logged yet.</li>\n    {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "add_meal.html", "path": "myapp/templates/add_meal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Add Meal</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Add Meal</button>\n  </form>\n{% endblock %}"}, {"file": "meal_log.html", "path": "myapp/templates/meal_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Meal Log</h2>\n  <ul>\n    {% for meal in meals %}\n      <li>\n        {{ meal.name }} ({{ meal.calories }} calories) - {{ meal.date }}\n        <a href=\"{% url 'edit_meal' meal.id %}\">Edit</a>\n        <a href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n      </li>\n       {% empty %}\n        <li>No meals logged.</li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'add_meal' %}\">Add Meal</a>\n{% endblock %}"}, {"file": "edit_meal.html", "path": "myapp/templates/edit_meal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Edit Meal</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save Changes</button>\n  </form>\n{% endblock %}"}, {"file": "delete_meal.html", "path": "myapp/templates/delete_meal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Delete Meal</h2>\n  <p>Are you sure you want to delete \"{{ meal.name }}\"?</p>\n  <form method=\"post\">\n    {% csrf_token %}\n    <button type=\"submit\">Confirm Delete</button>\n      <a href=\"{% url 'meal_log' %}\">Cancel</a>\n  </form>\n{% endblock %}"}, {"file": "add_activity.html", "path": "myapp/templates/add_activity.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h2>Add Activity</h2>\n<form method=\"post\">\n  {% csrf_token %}\n  {{ form.as_p }}\n  <button type=\"submit\">Add Activity</button>\n</form>\n{% endblock %}"}, {"file": "activity_log.html", "path": "myapp/templates/activity_log.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h2>Activity Log</h2>\n<ul>\n{% for activity in activities %}\n <li>{{ activity.name }} ({{ activity.calories_burned }} calories) - {{ activity.date }}\n  <a href=\"{% url 'edit_activity' activity.id %}\">Edit</a>\n        <a href=\"{% url 'delete_activity' activity.id %}\">Delete</a>\n </li>\n{% empty %}\n <li>No activities logged.</li>\n{% endfor %}\n</ul>\n<a href=\"{% url 'add_activity' %}\">Add Activity</a>\n{% endblock %}"}, {"file": "edit_activity.html", "path": "myapp/templates/edit_activity.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Edit Activity</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save Changes</button>\n  </form>\n{% endblock %}"}, {"file": "delete_activity.html", "path": "myapp/templates/delete_activity.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Delete Activity</h2>\n  <p>Are you sure you want to delete \"{{ activity.name }}\"?</p>\n  <form method=\"post\">\n    {% csrf_token %}\n    <button type=\"submit\">Confirm Delete</button>\n        <a href=\"{% url 'activity_log' %}\">Cancel</a>\n  </form>\n{% endblock %}"}, {"file": "analysis.html", "path": "myapp/templates/analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Weekly Calorie Analysis</h2>\n  <table>\n    <thead>\n      <tr>\n        <th>Date</th>\n        <th>Calories In</th>\n        <th>Calories Out</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for data in weekly_data %}\n        <tr>\n          <td>{{ data.date|date:'Y-m-d' }}</td>\n          <td>{{ data.calories_in }}</td>\n          <td>{{ data.calories_out }}</td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n{% endblock %}"}, {"file": "settings.html", "path": "myapp/templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Settings</h2>\n  <form method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\">Save Settings</button>\n  </form>\n{% endblock %}"}, {"file": "help.html", "path": "myapp/templates/help.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h2>Help</h2>\n<p>FAQ, Contact Support, and Tutorials will go here.</p>\n{# Add more content as needed #}\n{% endblock %}"}, {"file": "base.html", "path": "myapp/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calorie Tracker</title>\n</head>\n<body>\n    <header>\n        <nav>\n            <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                {% if user.is_authenticated %}\n                    <li><a href=\"{% url 'dashboard' %}\">Dashboard</a></li>\n                    <li><a href=\"{% url 'meal_log' %}\">Meal Log</a></li>\n                    <li><a href=\"{% url 'activity_log' %}\">Activity Log</a></li>\n                    <li><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n                    <li><a href=\"{% url 'settings' %}\">Settings</a></li>\n                    <li><a href=\"{% url 'help' %}\">Help</a></li>\n                    <li><a href=\"{% url 'logout' %}\">Logout</a></li>\n                {% else %}\n                    <li><a href=\"{% url 'login' %}\">Login</a></li>\n                    <li><a href=\"{% url 'signup' %}\">Signup</a></li>\n                {% endif %}\n            </ul>\n        </nav>\n    </header>\n\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n\n    <footer>\n        <p>&copy; 2023 Calorie Tracker</p>\n    </footer>\n</body>\n</html>"}], "11": [{"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse, JsonResponse\nfrom django.core.files.storage import FileSystemStorage\nimport json\n\n\ndef home(request):\n    if request.method == 'POST':\n        status = request.POST.get('status')\n        notes = request.POST.get('notes')\n        \n        # Process the status and notes (e.g., save to database)\n        print(f'Status: {status}, Notes: {notes}') #replace with DB save \n\n        #Handle file upload (optional)\n        if 'import_file' in request.FILES:\n            uploaded_file = request.FILES['import_file']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n           \n\n            try:\n                with open(fs.path(filename), 'r') as f:\n                    json_data = json.load(f)\n                    # Process your JSON data here\n                print(json_data)\n                # Example: Store json_data in session or DB\n            except json.JSONDecodeError:\n                 return HttpResponse('Invalid JSON file', status=400)\n            except Exception as e:\n                return HttpResponse(f'Error processing file: {e}', status=500)\n\n        return redirect('home')  # Redirect after processing\n\n    context = {\n        'welcome_message': 'Welcome to My Test Review Site',\n        'statuses': ['Select', 'Pass', 'Fail']  # For the select box\n    }\n    return render(request, 'myapp/home.html', context)\n\n\ndef about(request):\n    context = {\n        'about_text': 'This website is designed for reviewing test code...'\n    }\n    return render(request, 'myapp/about.html', context)"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),  # Include your app's URLs\n]"}, {"file": "home.html", "path": "myapp/templates/myapp/home.html", "code": "{% extends 'myapp/base.html' %}\n\n{% block content %}\n  <h1>{{ welcome_message }}</h1>\n\n  <form method=\"post\" enctype=\"multipart/form-data\">  \n    {% csrf_token %}\n\n      <label for=\"status\">Status:</label>\n    <select name=\"status\" id=\"status\">\n      {% for status_option in statuses %}\n        <option value=\"{{ status_option }}\">{{ status_option }}</option>\n      {% endfor %}\n    </select><br><br>\n\n\n     <label for=\"notes\">Review Notes:</label><br>\n    <textarea name=\"notes\" id=\"notes\" rows=\"4\" cols=\"50\"></textarea><br><br>\n\n   <label for=\"import_file\">Import JSON File (Optional):</label>\n    <input type=\"file\" name=\"import_file\" id=\"import_file\" accept=\".json\"><br><br>\n\n    <button type=\"submit\">Submit Review</button>\n  </form>\n{% endblock %}"}, {"file": "about.html", "path": "myapp/templates/myapp/about.html", "code": "{% extends 'myapp/base.html' %}\n\n{% block content %}\n  <h1>About</h1>\n  <p>{{ about_text }}</p>\n{% endblock %}"}, {"file": "base.html", "path": "myapp/templates/myapp/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Test Review Site</title>\n</head>\n<body>\n    <nav>\n        <ul>\n            <li><a href=\"{% url 'home' %}\">Home</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </nav>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "models.py", "path": "myapp/models.py", "code": "# from django.db import models\n\n# Create your models here if needed. \n# Example:\n# class Review(models.Model):\n#    testcode_id = models.IntegerField()  # Or ForeignKey to a TestCode model\n#   status = models.CharField(max_length=10)\n#    notes = models.TextField()\n#    created_at = models.DateTimeField(auto_now_add=True)\n#    updated_at = models.DateTimeField(auto_now=True)\n"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "# from django.contrib import admin\n# from .models import Review  # Import your models\n\n# Register your models here.\n# admin.site.register(Review) #Uncomment when you have models."}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# settings.py (Important settings - add myapp to INSTALLED_APPS, and configure MEDIA_ROOT/URL)\n...\nINSTALLED_APPS = [\n    ...\n    'myapp',\n]\n...\n# Add these lines for file uploads:\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n..."}], "12": "```json\n[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"expenses/models.py\",\n    \"code\":\n      \"\"\"\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ValidationError\n\nclass ExpenseCategory(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n    budget_limit = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n\n    def __str__(self):\n        return self.name\n\nclass Claim(models.Model):\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    )\n\n    employee = models.ForeignKey(User, on_delete=models.CASCADE, related_name='claims')\n    category = models.ForeignKey(ExpenseCategory, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submission_date = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    processed_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='processed_claims')\n    processed_date = models.DateTimeField(null=True, blank=True)\n\n\n    def __str__(self):\n        return f\"Claim #{self.pk} - {self.employee.username} - {self.category.name} - {self.amount}\"\n\n    def clean(self):\n        if self.status == 'rejected' and not self.rejection_reason:\n            raise ValidationError(\"Rejection reason is required when rejecting a claim.\")\n        if self.status != 'rejected' and self.rejection_reason:\n          raise ValidationError(\"Rejection Reason should be blank if status is not rejected\")\n      \"\"\"\n  },\n  {\n    \"file\": \"forms.py\",\n    \"path\": \"expenses/forms.py\",\n    \"code\":\n      \"\"\"\nfrom django import forms\nfrom .models import Claim, ExpenseCategory\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\nclass ClaimEditForm(forms.ModelForm):\n     class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\nclass ClaimApprovalForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['status', 'rejection_reason']\n\nclass BudgetLimitForm(forms.ModelForm):\n    class Meta:\n        model = ExpenseCategory\n        fields = ['budget_limit']\n      \"\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"expenses/views.py\",\n    \"code\":\n      \"\"\"\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Claim, ExpenseCategory\nfrom .forms import ClaimForm, ClaimApprovalForm, ClaimEditForm, BudgetLimitForm\nfrom django.contrib import messages\nfrom django.db.models import Sum\nfrom django.http import HttpResponseForbidden, HttpResponse\nfrom django.contrib.auth.mixins import LoginRequiredMixin, UserPassesTestMixin\nfrom django.views import View\nimport json\nfrom django.core.serializers.json import DjangoJSONEncoder\nfrom django.utils import timezone\nfrom django.db.models.functions import TruncMonth\n\n\n# Home Page\ndef home(request):\n    return render(request, 'expenses/home.html')\n\n# --- Employee Views ---\nclass EmployeeRequiredMixin(LoginRequiredMixin, UserPassesTestMixin):\n    def test_func(self):\n        return not self.request.user.is_staff  # Only non-staff (employees) can access\n\nclass SubmitClaimView(EmployeeRequiredMixin, View):\n    def get(self, request):\n        form = ClaimForm()\n        return render(request, 'expenses/submit_claim.html', {'form': form})\n\n    def post(self, request):\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            messages.success(request, 'Claim submitted successfully!')\n            return redirect('view_claim_status')\n        return render(request, 'expenses/submit_claim.html', {'form': form})\n\nclass ViewClaimStatusView(EmployeeRequiredMixin,View):\n    def get(self,request):\n      claims = Claim.objects.filter(employee=request.user).order_by('-submission_date')\n      return render(request, 'expenses/view_claim_status.html', {'claims': claims})\n\nclass EditClaimView(EmployeeRequiredMixin,View):\n    def get(self,request, claim_id):\n        claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n        if claim.status != 'pending':\n            messages.error(request, \"You can only edit pending claims.\")\n            return redirect('view_claim_status')\n        form = ClaimEditForm(instance=claim)\n        return render(request, 'expenses/edit_claim.html', {'form': form, 'claim': claim})\n\n    def post(self, request, claim_id):\n      claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n      if claim.status != 'pending':\n            return HttpResponseForbidden(\"You cannot edit a non-pending claim.\")\n      form = ClaimEditForm(request.POST, instance=claim)\n      if form.is_valid():\n        form.save()\n        messages.success(request, \"Claim Updated Successfully\")\n        return redirect('view_claim_status')\n      return render(request, 'expenses/edit_claim.html', {'form':form, 'claim':claim})\n\n# --- Admin Views ---\n\nclass AdminRequiredMixin(LoginRequiredMixin, UserPassesTestMixin):\n    def test_func(self):\n        return self.request.user.is_staff\n\nclass ApproveClaimView(AdminRequiredMixin, View):\n  def get(self,request, claim_id):\n      claim = get_object_or_404(Claim, pk=claim_id)\n      if claim.status != 'pending':\n        messages.error(request,\"This Claim is not in pending status\")\n        return redirect('admin_view_claims')\n      form = ClaimApprovalForm(instance=claim)\n      return render(request, 'expenses/approve_claim.html', {'form': form, 'claim': claim})\n  def post(self, request, claim_id):\n      claim = get_object_or_404(Claim, pk=claim_id)\n      if claim.status != 'pending':\n            return HttpResponseForbidden(\"You cannot process a claim that is not pending.\")\n\n      form = ClaimApprovalForm(request.POST, instance=claim)\n      if form.is_valid():\n          claim = form.save(commit=False)\n          claim.processed_by = request.user\n          claim.processed_date = timezone.now()\n          claim.save()\n          if(claim.status == 'approved'):\n            messages.success(request, f'Claim #{claim_id} approved successfully.')\n          else:\n             messages.success(request, f'Claim #{claim_id} rejected.')\n\n          return redirect('admin_view_claims')  # Redirect to claim list\n      return render(request, 'expenses/approve_claim.html', {'form': form, 'claim': claim})\n\n\nclass AdminViewClaimsView(AdminRequiredMixin, View):\n    def get(self, request):\n        claims = Claim.objects.all().order_by('-submission_date')\n        # Filtering\n        status_filter = request.GET.get('status')\n        category_filter = request.GET.get('category')\n        employee_filter = request.GET.get('employee')\n\n\n        if status_filter:\n            claims = claims.filter(status=status_filter)\n        if category_filter:\n            claims = claims.filter(category__id=category_filter)\n        if employee_filter:\n            claims = claims.filter(employee__username__icontains=employee_filter)\n\n        categories = ExpenseCategory.objects.all()\n\n        return render(request, 'expenses/admin_view_claims.html', {'claims': claims, 'categories':categories, 'selected_status':status_filter, 'selected_category': int(category_filter) if category_filter else None, 'selected_employee': employee_filter})\n\nclass ViewClaimDetailsView(AdminRequiredMixin, View):\n    def get(self, request, claim_id):\n        claim = get_object_or_404(Claim, pk=claim_id)\n        return render(request, 'expenses/view_claim_details.html', {'claim': claim})\n\n\n# --- Budget Control Views ---\nclass AnalyzeExpenseBalancesView(AdminRequiredMixin, View):\n    def get(self, request):\n        categories = ExpenseCategory.objects.all()\n        data = []\n\n        for category in categories:\n            total_spent = Claim.objects.filter(category=category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n            remaining_budget = category.budget_limit - total_spent\n            data.append({\n                'category': category.name,\n                'budget_limit': category.budget_limit,\n                'total_spent': total_spent,\n                'remaining_budget': remaining_budget,\n            })\n        return render(request, 'expenses/analyze_expense_balances.html', {'data': data})\n\nclass GenerateReportsView(AdminRequiredMixin,View):\n  def get(self,request):\n    # Aggregate expenses by month and category\n    report_data = Claim.objects.filter(status='approved').annotate(\n        month=TruncMonth('submission_date')\n    ).values('month', 'category__name').annotate(\n        total_amount=Sum('amount')\n    ).order_by('month', 'category__name')\n    return render(request, 'expenses/generate_reports.html',{'report_data':report_data})\n\n\nclass SetBudgetLimitsView(AdminRequiredMixin, View):\n    def get(self, request):\n        categories = ExpenseCategory.objects.all()\n        forms = {category.id: BudgetLimitForm(instance=category) for category in categories}\n        return render(request, 'expenses/set_budget_limits.html', {'forms': forms, 'categories':categories})\n\n    def post(self, request):\n        category_id = request.POST.get('category_id')\n        category = get_object_or_404(ExpenseCategory, pk=category_id)\n        form = BudgetLimitForm(request.POST, instance=category)\n\n        if form.is_valid():\n            form.save()\n            messages.success(request, f\"Budget limit for {category.name} updated successfully.\")\n            return redirect('set_budget_limits')\n        else:\n            # If form is invalid, re-render the page with errors\n            categories = ExpenseCategory.objects.all()\n            forms = {c.id: BudgetLimitForm(instance=c) for c in categories}  # Rebuild all forms\n            forms[category.id] = form  # Replace the invalid form\n            return render(request, 'expenses/set_budget_limits.html', {'forms': forms, 'categories': categories})\n\nclass BudgetAlertsView(AdminRequiredMixin,View):\n    def get(self, request):\n          categories = ExpenseCategory.objects.all()\n          alerts = []\n\n          for category in categories:\n            total_spent = Claim.objects.filter(category=category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n            remaining_budget = category.budget_limit - total_spent\n            if remaining_budget < (category.budget_limit* 0.1):\n              alerts.append({\n                'category':category.name,\n                'message':f'Warning: {category.name} budget is low.  Remaining budget: {remaining_budget:.2f}'\n              })\n\n          return render(request, 'expenses/budget_alerts.html',{'alerts':alerts})\n      \"\"\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"expenses/urls.py\",\n    \"code\":\n      \"\"\"\nfrom django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('login/', auth_views.LoginView.as_view(template_name='expenses/login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(), name='logout'),\n    path('signup/', views.home, name='signup'),  # Placeholder, replace with actual signup view\n\n\n    # Employee URLs\n    path('employee/submit_claim/', views.SubmitClaimView.as_view(), name='submit_claim'),\n    path('employee/view_claim_status/', views.ViewClaimStatusView.as_view(), name='view_claim_status'),\n    path('employee/edit_claim/<int:claim_id>/', views.EditClaimView.as_view(), name='edit_claim'),\n\n    # Admin URLs\n    path('admin/approve_claim/<int:claim_id>/', views.ApproveClaimView.as_view(), name='approve_claim'),\n    path('admin/view_claims/', views.AdminViewClaimsView.as_view(), name='admin_view_claims'),\n    path('admin/view_claim_details/<int:claim_id>/', views.ViewClaimDetailsView.as_view(), name='view_claim_details'),\n    path('admin/analyze_expense_balances/', views.AnalyzeExpenseBalancesView.as_view(), name='analyze_expense_balances'),\n    path('admin/generate_reports/', views.GenerateReportsView.as_view(), name='generate_reports'),\n    path('admin/set_budget_limits/', views.SetBudgetLimitsView.as_view(), name='set_budget_limits'),\n    path('admin/budget_alerts/', views.BudgetAlertsView.as_view(), name='budget_alerts')\n]\n      \"\"\"\n  },\n  {\n      \"file\":\"admin.py\",\n      \"path\":\"expenses/admin.py\",\n      \"code\":\n      \"\"\"\nfrom django.contrib import admin\nfrom .models import Claim, ExpenseCategory\n\nadmin.site.register(Claim)\nadmin.site.register(ExpenseCategory)\n      \"\"\"\n  },\n    {\n    \"file\": \"home.html\",\n    \"path\": \"expenses/templates/expenses/home.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n\n{% block content %}\n  <h1>Welcome to the Expense Management System</h1>\n  <p>Please <a href=\"{% url 'login' %}\">log in</a> or <a href=\"{% url 'signup' %}\">sign up</a> to continue.</p>\n{% endblock %}\n      \"\"\"\n  },\n    {\n    \"file\": \"login.html\",\n    \"path\": \"expenses/templates/expenses/login.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n\n{% block content %}\n<h2>Login</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Login</button>\n</form>\n{% endblock %}\n\"\"\"\n  },\n\n {\n    \"file\": \"submit_claim.html\",\n    \"path\": \"expenses/templates/expenses/submit_claim.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n\n{% block content %}\n<h2>Submit Claim</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit Claim</button>\n</form>\n{% endblock %}\n      \"\"\"\n  },\n  {\n    \"file\": \"view_claim_status.html\",\n    \"path\": \"expenses/templates/expenses/view_claim_status.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n\n{% block content %}\n<h2>Your Submitted Claims</h2>\n<table>\n    <thead>\n        <tr>\n            <th>Category</th>\n            <th>Amount</th>\n            <th>Submission Date</th>\n            <th>Status</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n    {% for claim in claims %}\n        <tr>\n            <td>{{ claim.category.name }}</td>\n            <td>{{ claim.amount }}</td>\n            <td>{{ claim.submission_date }}</td>\n            <td>{{ claim.status }}</td>\n          <td>\n              {% if claim.status == 'pending' %}\n                  <a href=\"{% url 'edit_claim' claim.id %}\">Edit</a>\n              {% else %}\n                -\n              {% endif %}\n          </td>\n\n        </tr>\n    {% empty %}\n        <tr><td colspan=\"4\">You have not submitted any claims yet.</td></tr>\n    {% endfor %}\n    </tbody>\n</table>\n    <a href=\"{% url 'submit_claim' %}\">Submit a new claim</a>\n{% endblock %}\n      \"\"\"\n  },\n    {\n    \"file\": \"edit_claim.html\",\n    \"path\": \"expenses/templates/expenses/edit_claim.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n{% block content %}\n<h2>Edit Claim - {{claim.id}}</h2>\n<form method = \"post\">\n  {% csrf_token %}\n  {{form.as_p}}\n  <button type=\"submit\">Update Claim</button>\n</form>\n{% endblock %}\n      \"\"\"\n  },\n\n  {\n    \"file\": \"approve_claim.html\",\n    \"path\": \"expenses/templates/expenses/approve_claim.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n\n{% block content %}\n<h2>Approve/Reject Claim - {{ claim.id }}</h2>\n<p>Employee: {{ claim.employee.username }}</p>\n<p>Category: {{ claim.category.name }}</p>\n<p>Amount: {{ claim.amount }}</p>\n<p>Description: {{ claim.description }}</p>\n\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Process Claim</button>\n</form>\n    <a href=\"{% url 'admin_view_claims' %}\">Back to Claim List</a>\n{% endblock %}\n      \"\"\"\n  },\n{\n    \"file\": \"admin_view_claims.html\",\n    \"path\": \"expenses/templates/expenses/admin_view_claims.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n\n{% block content %}\n<h2>All Submitted Claims</h2>\n<div>\n  <form method=\"get\">\n          <label for=\"status\">Status:</label>\n          <select name=\"status\" id=\"status\">\n            <option value=\"\">All</option>\n            <option value=\"pending\" {% if selected_status == 'pending' %}selected{% endif %}>Pending</option>\n            <option value=\"approved\" {% if selected_status == 'approved' %}selected{% endif %}>Approved</option>\n            <option value=\"rejected\" {% if selected_status == 'rejected' %}selected{% endif %}>Rejected</option>\n        </select>\n\n        <label for=\"category\">Category:</label>\n        <select name=\"category\" id=\"category\">\n          <option value=\"\">All</option>\n          {% for category in categories %}\n              <option value=\"{{category.id}}\" {% if selected_category == category.id %} selected {% endif %}> {{category.name}}</option>\n          {% endfor %}\n        </select>\n        <label for=\"employee\">Employee:</label>\n        <input type=\"text\" name=\"employee\" id=\"employee\" value=\"{{ selected_employee|default:'' }}\">\n\n        <button type=\"submit\">Filter</button>\n        <a href=\"{% url 'admin_view_claims' %}\"><button type = \"button\">Clear Filters</button></a>\n  </form>\n</div>\n\n<table>\n    <thead>\n        <tr>\n            <th>ID</th>\n            <th>Employee</th>\n            <th>Category</th>\n            <th>Amount</th>\n            <th>Submission Date</th>\n            <th>Status</th>\n          <th>Processed By</th>\n          <th>Action</th>\n        </tr>\n    </thead>\n    <tbody>\n    {% for claim in claims %}\n        <tr>\n            <td>{{ claim.id }}</td>\n            <td>{{ claim.employee.username }}</td>\n            <td>{{ claim.category.name }}</td>\n            <td>{{ claim.amount }}</td>\n            <td>{{ claim.submission_date }}</td>\n            <td>{{ claim.status }}</td>\n            <td>{% if claim.processed_by %}{{ claim.processed_by.username }}{% else %}N/A{% endif %}</td>\n            <td>\n\n              {% if claim.status == 'pending' %}\n                <a href=\"{% url 'approve_claim' claim.id %}\">Process</a>\n                    {% else %}\n                <a href=\"{% url 'view_claim_details' claim.id %}\">View Details</a>\n              {% endif %}\n            </td>\n        </tr>\n    {% empty %}\n        <tr><td colspan=\"7\">No claims found.</td></tr>\n    {% endfor %}\n    </tbody>\n</table>\n{% endblock %}\n      \"\"\"\n  },\n{\n  \"file\":\"view_claim_details.html\",\n  \"path\":\"expenses/templates/expenses/view_claim_details.html\",\n  \"code\":\n  \"\"\"\n  {% extends 'expenses/base.html' %}\n  {% block content %}\n  <h2>Claim Details - {{claim.id}}</h2>\n  <p>Employee: {{ claim.employee.username }}</p>\n    <p>Category: {{ claim.category.name }}</p>\n    <p>Amount: {{ claim.amount }}</p>\n    <p>Description: {{ claim.description }}</p>\n    <p>Status: {{claim.status}}</p>\n    <p>Submission Date: {{claim.submission_date}}</p>\n    {% if claim.status == 'rejected' %}\n      <p>Rejection Reason: {{claim.rejection_reason}}</p>\n    {% endif %}\n    {% if claim.processed_by %}\n      <p>Processed By: {{claim.processed_by.username}}</p>\n      <p> Processed Date: {{claim.processed_date}}</p>\n    {% endif %}\n\n  <a href=\"{% url 'admin_view_claims' %}\">Back to Claim List</a>\n  {% endblock %}\n  \"\"\"\n},\n{\n    \"file\": \"analyze_expense_balances.html\",\n    \"path\": \"expenses/templates/expenses/analyze_expense_balances.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n\n{% block content %}\n<h2>Expense Balances</h2>\n<table>\n    <thead>\n        <tr>\n            <th>Category</th>\n            <th>Budget Limit</th>\n            <th>Total Spent</th>\n            <th>Remaining Budget</th>\n        </tr>\n    </thead>\n    <tbody>\n    {% for item in data %}\n        <tr>\n            <td>{{ item.category }}</td>\n            <td>{{ item.budget_limit }}</td>\n            <td>{{ item.total_spent }}</td>\n            <td>{{ item.remaining_budget }}</td>\n        </tr>\n    {% endfor %}\n    </tbody>\n</table>\n{% endblock %}\n      \"\"\"\n  },\n  {\n    \"file\":\"generate_reports.html\",\n    \"path\":\"expenses/templates/expenses/generate_reports.html\",\n    \"code\":\n    \"\"\"\n    {% extends 'expenses/base.html' %}\n    {% block content %}\n    <h1>Expense Report</h1>\n        <table>\n        <thead>\n            <tr>\n                <th>Month</th>\n                <th>Category</th>\n                <th>Total Amount</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for row in report_data %}\n                <tr>\n                    <td>{{ row.month|date:\"F Y\" }}</td>\n                    <td>{{ row.category__name }}</td>\n                    <td>{{ row.total_amount }}</td>\n                </tr>\n            {% empty %}\n                <tr>\n                    <td colspan=\"3\">No data available.</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n    {% endblock %}\n    \"\"\"\n  },\n\n  {\n    \"file\": \"set_budget_limits.html\",\n    \"path\": \"expenses/templates/expenses/set_budget_limits.html\",\n    \"code\":\n      \"\"\"\n{% extends 'expenses/base.html' %}\n\n{% block content %}\n<h2>Set Budget Limits</h2>\n{% for category in categories %}\n  <form method=\"post\">\n      {% csrf_token %}\n    <h3>{{category.name}}</h3>\n      {{ forms|get_item:category.id }}\n\n      <input type=\"hidden\" name=\"category_id\" value=\"{{ category.id }}\">\n      <button type=\"submit\">Update Limit</button>\n  </form>\n{% endfor %}\n{% endblock %}\n      \"\"\"\n  },\n{\n    \"file\": \"budget_alerts.html\",\n    \"path\": \"expenses/templates/expenses/budget_alerts.html\",\n    \"code\":\n    \"\"\"\n{% extends 'expenses/base.html' %}\n{% block content %}\n  <h1>Budget Alert</h1>\n  {% if alerts %}\n    <ul>\n    {% for alert in alerts %}\n    <li>{{alert.message}}</li>\n    {% endfor %}\n    </ul>\n  {% else %}\n  <p>There is no budget alerts.</p>\n  {% endif %}\n{% endblock %}\n    \"\"\"\n},\n{\n  \"file\":\"base.html\",\n  \"path\":\"expenses/templates/expenses/base.html\",\n  \"code\":\n  \"\"\"\n  <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Expense Management System</title>\n    </head>\n    <body>\n        <header>\n          <h1>Expense Management</h1>\n              <nav>\n        <ul>\n          {% if user.is_authenticated %}\n              <li><a href=\"{% url 'home' %}\">Home</a></li>\n              {% if user.is_staff %}\n                <li><a href =\"{% url 'admin_view_claims' %}\">View Claims</a></li>\n                <li><a href=\"{% url 'analyze_expense_balances' %}\">Analyze Expense Balances</a></li>\n                <li><a href=\"{% url 'generate_reports' %}\">Generate Reports</a></li>\n                <li><a href=\"{% url 'set_budget_limits' %}\">Set Budget Limits</a></li>\n                <li><a href=\"{% url 'budget_alerts' %}\">Budget Alerts</a></li>\n\n\n              {% else %}\n                <li><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n                <li><a href=\"{% url 'view_claim_status' %}\">View Claim Status</a></li>\n              {% endif %}\n              <li><a href=\"{% url 'logout' %}\">Logout</a></li>\n          {% else %}\n\n              <li><a href=\"{% url 'login' %}\">Login</a></li>\n              <li><a href=\"{% url 'signup' %}\">Sign Up</a></li>\n\n          {% endif %}\n        </ul>\n    </nav>\n        </header>\n        <main>\n            {% block content %}\n            {% endblock %}\n        </main>\n    </body>\n    </html>\n  \"\"\"\n},\n{\n    \"file\": \"get_item.py\",  # Custom template filter\n    \"path\": \"expenses/templatetags/get_item.py\",\n    \"code\":\n      \"\"\"\nfrom django import template\n\nregister = template.Library()\n\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)\n      \"\"\"\n}\n]\n```", "13": "```json\n[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"customers/models.py\",\n    \"code\": \"from django.db import models\\\\n\\\\nclass Customer(models.Model):\\\\n    name = models.CharField(max_length=255)\\\\n    birthday = models.DateField()\\\\n    age = models.IntegerField()\\\\n    SEX_CHOICES = (\\\\n        ('M', 'Male'),\\\\n        ('F', 'Female'),\\\\n        ('O', 'Other'),\\\\n    )\\\\n    sex = models.CharField(max_length=1, choices=SEX_CHOICES)\\\\n    company = models.CharField(max_length=255, blank=True, null=True)\\\\n    phone_number = models.CharField(max_length=20)\\\\n\\\\n    def __str__(self):\\\\n        return self.name\"\n  },\n  {\n    \"file\": \"forms.py\",\n    \"path\": \"customers/forms.py\",\n    \"code\": \"from django import forms\\\\nfrom .models import Customer\\\\n\\\\nclass CustomerForm(forms.ModelForm):\\\\n    class Meta:\\\\n        model = Customer\\\\n        fields = '__all__'\"\n  },\n    {\n    \"file\": \"views.py\",\n    \"path\": \"customers/views.py\",\n    \"code\": \"from django.shortcuts import render, get_object_or_404, redirect\\\\nfrom .models import Customer\\\\nfrom .forms import CustomerForm\\\\nfrom django.views import View\\\\n\\\\nclass CustomerListView(View):\\\\n    def get(self, request):\\\\n        customers = Customer.objects.all()\\\\n        return render(request, 'customers/customer_list.html', {'customers': customers})\\\\n\\\\nclass CustomerCreateView(View):\\\\n    def get(self, request):\\\\n        form = CustomerForm()\\\\n        return render(request, 'customers/customer_form.html', {'form': form})\\\\n\\\\n    def post(self, request):\\\\n        form = CustomerForm(request.POST)\\\\n        if form.is_valid():\\\\n            form.save()\\\\n            return redirect('customer_list')  # Replace with your URL name\\\\n        return render(request, 'customers/customer_form.html', {'form': form})\\\\n\\\\nclass CustomerUpdateView(View):\\\\n    def get(self, request, pk):\\\\n        customer = get_object_or_404(Customer, pk=pk)\\\\n        form = CustomerForm(instance=customer)\\\\n        return render(request, 'customers/customer_form.html', {'form': form})\\\\n\\\\n    def post(self, request, pk):\\\\n        customer = get_object_or_404(Customer, pk=pk)\\\\n        form = CustomerForm(request.POST, instance=customer)\\\\n        if form.is_valid():\\\\n            form.save()\\\\n            return redirect('customer_list')  # Replace with your URL name\\\\n        return render(request, 'customers/customer_form.html', {'form': form})\\\\n\\\\n\\\\nclass CustomerDeleteView(View):\\\\n    def get(self, request, pk):\\\\n        customer = get_object_or_404(Customer, pk=pk)\\\\n        return render(request, 'customers/customer_confirm_delete.html', {'customer': customer})\\\\n\\\\n    def post(self, request, pk):\\\\n         customer = get_object_or_404(Customer, pk=pk)\\\\n         customer.delete()\\\\n         return redirect('customer_list')\\\\n\\\\nclass CustomerDetailView(View):\\\\n    def get(self, request, pk):\\\\n        customer = get_object_or_404(Customer, pk=pk)\\\\n        return render(request, 'customers/customer_detail.html', {'customer': customer})\\\\n\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"customers/urls.py\",\n    \"code\": \"from django.urls import path\\\\nfrom . import views\\\\n\\\\nurlpatterns = [\\\\n    path('', views.CustomerListView.as_view(), name='customer_list'),\\\\n    path('add/', views.CustomerCreateView.as_view(), name='customer_add'),\\\\n    path('<int:pk>/edit/', views.CustomerUpdateView.as_view(), name='customer_edit'),\\\\n    path('<int:pk>/delete/', views.CustomerDeleteView.as_view(), name='customer_delete'),\\\\n    path('<int:pk>/', views.CustomerDetailView.as_view(), name='customer_detail'),\\\\n]\"\n  },\n  {\n      \"file\": \"customer_list.html\",\n      \"path\": \"customers/templates/customers/customer_list.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>Customers</h2>\\\\n  <ul>\\\\n    {% for customer in customers %}\\\\n      <li><a href=\\\\\"{% url 'customer_detail' customer.pk %}\\\\\">{{ customer.name }}</a> - <a href=\\\\\"{% url 'customer_edit' customer.pk %}\\\\\">Edit</a> - <a href=\\\\\"{% url 'customer_delete' customer.pk %}\\\\\">Delete</a></li>\\\\n    {% endfor %}\\\\n  </ul>\\\\n  <a href=\\\\\"{% url 'customer_add' %}\\\\\">Add Customer</a>\\\\n{% endblock %}\"\n  },\n  {\n      \"file\": \"customer_form.html\",\n      \"path\": \"customers/templates/customers/customer_form.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Customer</h2>\\\\n  <form method=\\\\\"post\\\\\">\\\\n    {% csrf_token %}\\\\n    {{ form.as_p }}\\\\n    <button type=\\\\\"submit\\\\\">Save</button>\\\\n  </form>\\\\n{% endblock %}\"\n  },\n    {\n      \"file\": \"customer_confirm_delete.html\",\n      \"path\": \"customers/templates/customers/customer_confirm_delete.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>Confirm Delete</h2>\\\\n  <p>Are you sure you want to delete \\\\\"{{ customer.name }}\\\\\"?</p>\\\\n  <form method=\\\\\"post\\\\\">\\\\n    {% csrf_token %}\\\\n    <button type=\\\\\"submit\\\\\">Delete</button>\\\\n    <a href=\\\\\"{% url 'customer_list' %}\\\\\">Cancel</a>\\\\n  </form>\\\\n{% endblock %}\"\n  },\n  {\n      \"file\": \"customer_detail.html\",\n      \"path\": \"customers/templates/customers/customer_detail.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>{{ customer.name }}</h2>\\\\n  <p>Birthday: {{ customer.birthday }}</p>\\\\n  <p>Age: {{ customer.age }}</p>\\\\n  <p>Sex: {{ customer.get_sex_display }}</p>\\\\n  <p>Company: {{ customer.company }}</p>\\\\n  <p>Phone Number: {{ customer.phone_number }}</p>\\\\n\\\\n  <a href=\\\\\"{% url 'customer_list' %}\\\\\">Back to List</a>\\\\n{% endblock %}\"\n  },\n  {\n    \"file\": \"models.py\",\n    \"path\": \"products/models.py\",\n    \"code\": \"from django.db import models\\\\n\\\\nclass Product(models.Model):\\\\n    name = models.CharField(max_length=255)\\\\n    category = models.CharField(max_length=255)\\\\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\\\\n\\\\n    def __str__(self):\\\\n        return self.name\"\n  },\n    {\n    \"file\": \"forms.py\",\n    \"path\": \"products/forms.py\",\n    \"code\": \"from django import forms\\\\nfrom .models import Product\\\\n\\\\nclass ProductForm(forms.ModelForm):\\\\n    class Meta:\\\\n        model = Product\\\\n        fields = '__all__'\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"products/views.py\",\n    \"code\": \"from django.shortcuts import render, get_object_or_404, redirect\\\\nfrom .models import Product\\\\nfrom .forms import ProductForm\\\\nfrom django.views import View\\\\n\\\\nclass ProductListView(View):\\\\n    def get(self, request):\\\\n        products = Product.objects.all()\\\\n        return render(request, 'products/product_list.html', {'products': products})\\\\n\\\\nclass ProductCreateView(View):\\\\n      def get(self, request):\\\\n          form = ProductForm()\\\\n          return render(request, 'products/product_form.html', {'form': form})\\\\n\\\\n      def post(self, request):\\\\n          form = ProductForm(request.POST)\\\\n          if form.is_valid():\\\\n              form.save()\\\\n              return redirect('product_list')\\\\n          return render(request, 'products/product_form.html', {'form': form})\\\\n\\\\nclass ProductUpdateView(View):\\\\n    def get(self, request, pk):\\\\n        product = get_object_or_404(Product, pk=pk)\\\\n        form = ProductForm(instance=product)\\\\n        return render(request, 'products/product_form.html', {'form': form})\\\\n\\\\n    def post(self, request, pk):\\\\n        product = get_object_or_404(Product, pk=pk)\\\\n        form = ProductForm(request.POST, instance=product)\\\\n        if form.is_valid():\\\\n            form.save()\\\\n            return redirect('product_list')\\\\n        return render(request, 'products/product_form.html', {'form': form})\\\\n\\\\n\\\\nclass ProductDeleteView(View):\\\\n    def get(self, request, pk):\\\\n        product = get_object_or_404(Product, pk=pk)\\\\n        return render(request, 'products/product_confirm_delete.html', {'product': product})\\\\n\\\\n    def post(self, request, pk):\\\\n         product = get_object_or_404(Product, pk=pk)\\\\n         product.delete()\\\\n         return redirect('product_list')\\\\n\\\\nclass ProductDetailView(View):\\\\n    def get(self, request, pk):\\\\n        product = get_object_or_404(Product, pk=pk)\\\\n        return render(request, 'products/product_detail.html', {'product': product})\\\\n\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"products/urls.py\",\n    \"code\": \"from django.urls import path\\\\nfrom . import views\\\\n\\\\nurlpatterns = [\\\\n    path('', views.ProductListView.as_view(), name='product_list'),\\\\n    path('add/', views.ProductCreateView.as_view(), name='product_add'),\\\\n    path('<int:pk>/edit/', views.ProductUpdateView.as_view(), name='product_edit'),\\\\n    path('<int:pk>/delete/', views.ProductDeleteView.as_view(), name='product_delete'),\\\\n    path('<int:pk>/', views.ProductDetailView.as_view(), name='product_detail'),\\\\n]\"\n  },\n    {\n      \"file\": \"product_list.html\",\n      \"path\": \"products/templates/products/product_list.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>Products</h2>\\\\n  <ul>\\\\n    {% for product in products %}\\\\n      <li><a href=\\\\\"{% url 'product_detail' product.pk %}\\\\\">{{ product.name }}</a> - <a href=\\\\\"{% url 'product_edit' product.pk %}\\\\\">Edit</a> - <a href=\\\\\"{% url 'product_delete' product.pk %}\\\\\">Delete</a></li>\\\\n    {% endfor %}\\\\n  </ul>\\\\n  <a href=\\\\\"{% url 'product_add' %}\\\\\">Add Product</a>\\\\n{% endblock %}\"\n  },\n  {\n      \"file\": \"product_form.html\",\n      \"path\": \"products/templates/products/product_form.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Product</h2>\\\\n  <form method=\\\\\"post\\\\\">\\\\n    {% csrf_token %}\\\\n    {{ form.as_p }}\\\\n    <button type=\\\\\"submit\\\\\">Save</button>\\\\n  </form>\\\\n{% endblock %}\"\n  },\n  {\n      \"file\": \"product_confirm_delete.html\",\n      \"path\": \"products/templates/products/product_confirm_delete.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>Confirm Delete</h2>\\\\n  <p>Are you sure you want to delete \\\\\"{{ product.name }}\\\\\"?</p>\\\\n    <form method=\\\\\"post\\\\\">\\\\n    {% csrf_token %}\\\\n    <button type=\\\\\"submit\\\\\">Delete</button>\\\\n    <a href=\\\\\"{% url 'product_list' %}\\\\\">Cancel</a>\\\\n  </form>\\\\n{% endblock %}\"\n  },\n  {\n    \"file\": \"product_detail.html\",\n      \"path\": \"products/templates/products/product_detail.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>{{ product.name }}</h2>\\\\n  <p>Category: {{ product.category }}</p>\\\\n  <p>Recommended Price: {{ product.recommended_price }}</p>\\\\n\\\\n  <a href=\\\\\"{% url 'product_list' %}\\\\\">Back to List</a>\\\\n{% endblock %}\"\n\n  },\n  {\n    \"file\": \"models.py\",\n    \"path\": \"purchases/models.py\",\n    \"code\": \"from django.db import models\\\\nfrom customers.models import Customer\\\\nfrom products.models import Product\\\\n\\\\nclass PurchaseRecord(models.Model):\\\\n    datetime = models.DateTimeField()\\\\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\\\\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\\\\n    quantity = models.IntegerField()\\\\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\\\\n\\\\n    def __str__(self):\\\\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\"\n  },\n   {\n    \"file\": \"forms.py\",\n    \"path\": \"purchases/forms.py\",\n    \"code\": \"from django import forms\\\\nfrom .models import PurchaseRecord\\\\n\\\\nclass PurchaseRecordForm(forms.ModelForm):\\\\n    class Meta:\\\\n        model = PurchaseRecord\\\\n        fields = '__all__'\\\\n        widgets = {\\\\n            'datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\\\\n        }\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"purchases/views.py\",\n    \"code\": \"from django.shortcuts import render, get_object_or_404, redirect\\\\nfrom .models import PurchaseRecord\\\\nfrom .forms import PurchaseRecordForm\\\\nfrom django.views import View\\\\n\\\\nclass PurchaseRecordListView(View):\\\\n    def get(self, request):\\\\n        purchase_records = PurchaseRecord.objects.all()\\\\n        return render(request, 'purchases/purchase_record_list.html', {'purchase_records': purchase_records})\\\\n\\\\nclass PurchaseRecordCreateView(View):\\\\n    def get(self, request):\\\\n        form = PurchaseRecordForm()\\\\n        return render(request, 'purchases/purchase_record_form.html', {'form': form})\\\\n\\\\n    def post(self, request):\\\\n        form = PurchaseRecordForm(request.POST)\\\\n        if form.is_valid():\\\\n            form.save()\\\\n            return redirect('purchase_record_list')\\\\n        return render(request, 'purchases/purchase_record_form.html', {'form': form})\\\\n\\\\nclass PurchaseRecordUpdateView(View):\\\\n    def get(self, request, pk):\\\\n        purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\\\\n        form = PurchaseRecordForm(instance=purchase_record)\\\\n        return render(request, 'purchases/purchase_record_form.html', {'form': form})\\\\n\\\\n    def post(self, request, pk):\\\\n        purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\\\\n        form = PurchaseRecordForm(request.POST, instance=purchase_record)\\\\n        if form.is_valid():\\\\n            form.save()\\\\n            return redirect('purchase_record_list')\\\\n        return render(request, 'purchases/purchase_record_form.html', {'form': form})\\\\n\\\\n\\\\nclass PurchaseRecordDeleteView(View):\\\\n     def get(self, request, pk):\\\\n        purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\\\\n        return render(request, 'purchases/purchase_record_confirm_delete.html', {'purchase_record': purchase_record})\\\\n\\\\n     def post(self, request, pk):\\\\n        purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\\\\n        purchase_record.delete()\\\\n        return redirect('purchase_record_list')\\\\n\\\\n\\\\nclass PurchaseRecordDetailView(View):\\\\n    def get(self, request, pk):\\\\n        purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\\\\n        return render(request, 'purchases/purchase_record_detail.html', {'purchase_record': purchase_record})\\\\n\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"purchases/urls.py\",\n    \"code\": \"from django.urls import path\\\\nfrom . import views\\\\n\\\\nurlpatterns = [\\\\n    path('', views.PurchaseRecordListView.as_view(), name='purchase_record_list'),\\\\n    path('add/', views.PurchaseRecordCreateView.as_view(), name='purchase_record_add'),\\\\n    path('<int:pk>/edit/', views.PurchaseRecordUpdateView.as_view(), name='purchase_record_edit'),\\\\n    path('<int:pk>/delete/', views.PurchaseRecordDeleteView.as_view(), name='purchase_record_delete'),\\\\n    path('<int:pk>/', views.PurchaseRecordDetailView.as_view(), name='purchase_record_detail'),\\\\n]\"\n  },\n    {\n      \"file\": \"purchase_record_list.html\",\n      \"path\": \"purchases/templates/purchases/purchase_record_list.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>Purchase Records</h2>\\\\n  <ul>\\\\n    {% for record in purchase_records %}\\\\n      <li><a href=\\\\\"{% url 'purchase_record_detail' record.pk %}\\\\\">{{ record.customer.name }} - {{record.product.name}} - {{ record.datetime }}</a> - <a href=\\\\\"{% url 'purchase_record_edit' record.pk %}\\\\\">Edit</a> - <a href=\\\\\"{% url 'purchase_record_delete' record.pk %}\\\\\">Delete</a></li>\\\\n    {% endfor %}\\\\n  </ul>\\\\n  <a href=\\\\\"{% url 'purchase_record_add' %}\\\\\">Add Purchase Record</a>\\\\n{% endblock %}\"\n  },\n  {\n      \"file\": \"purchase_record_form.html\",\n      \"path\": \"purchases/templates/purchases/purchase_record_form.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Purchase Record</h2>\\\\n  <form method=\\\\\"post\\\\\">\\\\n    {% csrf_token %}\\\\n    {{ form.as_p }}\\\\n    <button type=\\\\\"submit\\\\\">Save</button>\\\\n  </form>\\\\n{% endblock %}\"\n  },\n   {\n      \"file\": \"purchase_record_confirm_delete.html\",\n      \"path\": \"purchases/templates/purchases/purchase_record_confirm_delete.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>Confirm Delete</h2>\\\\n  <p>Are you sure you want to delete this purchase record?</p>\\\\n   <form method=\\\\\"post\\\\\">\\\\n    {% csrf_token %}\\\\n    <button type=\\\\\"submit\\\\\">Delete</button>\\\\n    <a href=\\\\\"{% url 'purchase_record_list' %}\\\\\">Cancel</a>\\\\n  </form>\\\\n{% endblock %}\"\n  },\n    {\n    \"file\": \"purchase_record_detail.html\",\n      \"path\": \"purchases/templates/purchases/purchase_record_detail.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>Purchase Record Details</h2>\\\\n    <p><strong>Customer:</strong> {{ purchase_record.customer.name }}</p>\\\\n    <p><strong>Product:</strong> {{ purchase_record.product.name }}</p>\\\\n    <p><strong>Date and Time:</strong> {{ purchase_record.datetime }}</p>\\\\n    <p><strong>Quantity:</strong> {{ purchase_record.quantity }}</p>\\\\n    <p><strong>Amount:</strong> {{ purchase_record.amount }}</p>\\\\n\\\\n\\\\n  <a href=\\\\\"{% url 'purchase_record_list' %}\\\\\">Back to List</a>\\\\n{% endblock %}\"\n  },\n  {\n    \"file\": \"models.py\",\n    \"path\": \"preferred_products/models.py\",\n    \"code\": \"from django.db import models\\\\nfrom customers.models import Customer\\\\nfrom products.models import Product\\\\n\\\\nclass PreferredProduct(models.Model):\\\\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\\\\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\\\\n\\\\n    class Meta:\\\\n        unique_together = ('customer', 'product')\\\\n\\\\n    def __str__(self):\\\\n        return f'{self.customer.name} - {self.product.name}'\"\n  },\n  {\n    \"file\": \"forms.py\",\n    \"path\": \"preferred_products/forms.py\",\n    \"code\": \"from django import forms\\\\nfrom .models import PreferredProduct\\\\n\\\\nclass PreferredProductForm(forms.ModelForm):\\\\n    class Meta:\\\\n        model = PreferredProduct\\\\n        fields = ['customer', 'product'] # Explicitly list fields\\\\n\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"preferred_products/views.py\",\n    \"code\": \"from django.shortcuts import render, get_object_or_404, redirect\\\\nfrom .models import PreferredProduct\\\\nfrom .forms import PreferredProductForm\\\\nfrom customers.models import Customer\\\\nfrom django.views import View\\\\nfrom django.contrib import messages\\\\n\\\\n\\\\nclass PreferredProductListView(View):\\\\n    def get(self, request, customer_id):\\\\n        customer = get_object_or_404(Customer, pk=customer_id)\\\\n        preferred_products = PreferredProduct.objects.filter(customer=customer)\\\\n        return render(request, 'preferred_products/preferredproduct_list.html', {'preferred_products': preferred_products, 'customer': customer})\\\\n\\\\n\\\\nclass PreferredProductCreateView(View):\\\\n    def get(self, request, customer_id):\\\\n        customer = get_object_or_404(Customer, pk=customer_id) # Retrieve customer\\\\n        form = PreferredProductForm(initial={'customer': customer})\\\\n        form.fields['customer'].widget = forms.HiddenInput() # Hide the customer field\\\\n\\\\n        return render(request, 'preferred_products/preferredproduct_form.html', {'form': form, 'customer':customer})\\\\n\\\\n    def post(self, request, customer_id):\\\\n        customer = get_object_or_404(Customer, pk=customer_id)\\\\n        form = PreferredProductForm(request.POST)\\\\n        form.fields['customer'].widget = forms.HiddenInput()\\\\n\\\\n        if form.is_valid():\\\\n            #Check for duplicate entry before saving\\\\n            if PreferredProduct.objects.filter(customer=customer, product=form.cleaned_data['product']).exists():\\\\n                messages.error(request, 'This product is already in the preferred list.')\\\\n                return render(request, 'preferred_products/preferredproduct_form.html', {'form': form, 'customer': customer})\\\\n            preferred_product = form.save(commit=False) # Create, but don't save to DB yet\\\\n            preferred_product.customer = customer # Manually set the customer\\\\n            preferred_product.save()\\\\n            return redirect('preferred_product_list', customer_id=customer.pk)\\\\n        return render(request, 'preferred_products/preferredproduct_form.html', {'form': form, 'customer': customer})\\\\n\\\\n\\\\n\\\\nclass PreferredProductUpdateView(View):\\\\n    def get(self, request, pk):\\\\n        preferred_product = get_object_or_404(PreferredProduct, pk=pk)\\\\n        form = PreferredProductForm(instance=preferred_product)\\\\n        form.fields['customer'].widget = forms.HiddenInput()\\\\n        return render(request, 'preferred_products/preferredproduct_form.html', {'form': form, 'customer': preferred_product.customer})\\\\n\\\\n    def post(self, request, pk):\\\\n        preferred_product = get_object_or_404(PreferredProduct, pk=pk)\\\\n        form = PreferredProductForm(request.POST, instance=preferred_product)\\\\n         # Hide Customer\\\\n        form.fields['customer'].widget = forms.HiddenInput()\\\\n\\\\n        if form.is_valid():\\\\n            if PreferredProduct.objects.filter(customer=form.cleaned_data['customer'], product=form.cleaned_data['product']).exclude(pk=pk).exists():\\\\n                messages.error(request, 'This product is already in the preferred list.')\\\\n                return render(request, 'preferred_products/preferredproduct_form.html', {'form': form, 'customer': preferred_product.customer})\\\\n\\\\n            form.save()\\\\n            return redirect('preferred_product_list', customer_id=preferred_product.customer.pk)\\\\n        return render(request, 'preferred_products/preferredproduct_form.html', {'form': form, 'customer': preferred_product.customer})\\\\n\\\\n\\\\nclass PreferredProductDeleteView(View):\\\\n    def get(self, request, pk):\\\\n        preferred_product = get_object_or_404(PreferredProduct, pk=pk)\\\\n        return render(request, 'preferred_products/preferredproduct_confirm_delete.html', {'preferred_product': preferred_product})\\\\n    def post(self, request, pk):\\\\n        preferred_product = get_object_or_404(PreferredProduct, pk=pk)\\\\n        customer_id = preferred_product.customer.pk\\\\n        preferred_product.delete()\\\\n        return redirect('preferred_product_list', customer_id=customer_id)\\\\n\\\\n\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"preferred_products/urls.py\",\n    \"code\": \"from django.urls import path\\\\nfrom . import views\\\\n\\\\nurlpatterns = [\\\\n    path('customer/<int:customer_id>/', views.PreferredProductListView.as_view(), name='preferred_product_list'),\\\\n    path('customer/<int:customer_id>/add/', views.PreferredProductCreateView.as_view(), name='preferred_product_add'),\\\\n    path('<int:pk>/edit/', views.PreferredProductUpdateView.as_view(), name='preferred_product_edit'),\\\\n    path('<int:pk>/delete/', views.PreferredProductDeleteView.as_view(), name='preferred_product_delete'),\\\\n\\\\n]\"\n  },\n  {\n    \"file\": \"preferredproduct_list.html\",\n    \"path\": \"preferred_products/templates/preferred_products/preferredproduct_list.html\",\n    \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n<h2>Preferred Products for {{ customer.name }}</h2>\\\\n\\\\n<ul>\\\\n{% for preferred_product in preferred_products %}\\\\n  <li>\\\\n      {{ preferred_product.product.name }} -\\\\n      <a href=\\\\\"{% url 'preferred_product_edit' preferred_product.pk %}\\\\\">Edit</a> -\\\\n      <a href=\\\\\"{% url 'preferred_product_delete' preferred_product.pk %}\\\\\">Delete</a>\\\\n  </li>\\\\n{% empty %}\\\\n    <li>No preferred products found.</li>\\\\n\\\\n{% endfor %}\\\\n</ul>\\\\n<a href=\\\\\"{% url 'preferred_product_add' customer_id=customer.pk %}\\\\\">Add Preferred Product</a>\\\\n{% endblock %}\\\\n\"\n  },\n  {\n    \"file\": \"preferredproduct_form.html\",\n    \"path\": \"preferred_products/templates/preferred_products/preferredproduct_form.html\",\n    \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n<h2>{% if form.instance.pk %}Edit{% else %}Add{% endif %} Preferred Product for {{customer.name}}</h2>\\\\n  {% if messages %}\\\\n    <ul class=\\\\\"messages\\\\\">\\\\n        {% for message in messages %}\\\\n            <li{% if message.tags %} class=\\\\\"{{ message.tags }}\\\\\"{% endif %}>{{ message }}</li>\\\\n        {% endfor %}\\\\n    </ul>\\\\n{% endif %}\\\\n<form method=\\\\\"post\\\\\">\\\\n  {% csrf_token %}\\\\n  {{ form.as_p }}\\\\n  <button type=\\\\\"submit\\\\\">Save</button>\\\\n</form>\\\\n{% endblock %}\\\\n\"\n  },\n  {\n      \"file\": \"preferredproduct_confirm_delete.html\",\n      \"path\": \"preferred_products/templates/preferred_products/preferredproduct_confirm_delete.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n  <h2>Confirm Delete</h2>\\\\n  <p>Are you sure you want to remove \\\\\"{{ preferred_product.product.name }}\\\\\" from {{preferred_product.customer.name}}'s preferred products?</p>\\\\n   <form method=\\\\\"post\\\\\">\\\\n    {% csrf_token %}\\\\n    <button type=\\\\\"submit\\\\\">Delete</button>\\\\n    <a href=\\\\\"{% url 'preferred_product_list' customer_id=preferred_product.customer.pk%}\\\\\">Cancel</a>\\\\n  </form>\\\\n{% endblock %}\\\\n\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"sales_analysis/views.py\",\n    \"code\": \"from django.shortcuts import render\\\\nfrom purchases.models import PurchaseRecord\\\\nfrom django.db.models import Sum, Count, F\\\\nfrom django.db.models.functions import TruncMonth\\\\nfrom django.views import View\\\\nfrom django.http import JsonResponse\\\\nimport json\\\\n\\\\n\\\\nclass SalesReportView(View):\\\\n    def get(self, request):\\\\n        # Total sales amount\\\\n        total_sales = PurchaseRecord.objects.aggregate(total_sales=Sum('amount'))['total_sales'] or 0\\\\n\\\\n        # Sales by month\\\\n        sales_by_month = PurchaseRecord.objects.annotate(\\\\n            month=TruncMonth('datetime')\\\\n        ).values('month').annotate(\\\\n            total_amount=Sum('amount'),\\\\n            total_quantity=Sum('quantity')\\\\n        ).order_by('month')\\\\n\\\\n         # Convert sales_by_month to a list of dictionaries\\\\n        sales_by_month_list = list(sales_by_month)\\\\n\\\\n        # Convert month (datetime objects) to strings\\\\n        for item in sales_by_month_list:\\\\n          if 'month' in item:\\\\n            item['month'] = item['month'].strftime('%Y-%m')\\\\n\\\\n        # Product Performance\\\\n        product_performance = PurchaseRecord.objects.values(\\\\n            'product__name'\\\\n        ).annotate(\\\\n            total_quantity=Sum('quantity'),\\\\n            total_revenue=Sum('amount')\\\\n        ).order_by('-total_revenue')\\\\n\\\\n\\\\n        context = {\\\\n            'total_sales': total_sales,\\\\n            'sales_by_month': json.dumps(sales_by_month_list),  # Serialize to JSON\\\\n            'product_performance': product_performance,\\\\n\\\\n        }\\\\n\\\\n        return render(request, 'sales_analysis/sales_report.html', context)\\\\n\\\\n\"\n  },\n  {\n      \"file\":\"sales_report.html\",\n      \"path\": \"sales_analysis/templates/sales_analysis/sales_report.html\",\n      \"code\":\"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n<h2>Sales Report</h2>\\\\n\\\\n<h3>Total Sales: {{ total_sales }}</h3>\\\\n\\\\n<h3>Sales by Month</h3>\\\\n<pre id=\\\\\"salesByMonthData\\\\\" style=\\\\\"display: none;\\\\\">{{ sales_by_month|safe }}</pre>\\\\n<canvas id=\\\\\"salesByMonthChart\\\\\" width=\\\\\"400\\\\\" height=\\\\\"200\\\\\"></canvas>\\\\n\\\\n\\\\n<h3>Product Performance</h3>\\\\n<table>\\\\n  <thead>\\\\n    <tr>\\\\n      <th>Product</th>\\\\n      <th>Total Quantity Sold</th>\\\\n      <th>Total Revenue</th>\\\\n    </tr>\\\\n  </thead>\\\\n  <tbody>\\\\n    {% for product in product_performance %}\\\\n    <tr>\\\\n      <td>{{ product.product__name }}</td>\\\\n      <td>{{ product.total_quantity }}</td>\\\\n      <td>{{ product.total_revenue }}</td>\\\\n    </tr>\\\\n    {% endfor %}\\\\n  </tbody>\\\\n</table>\\\\n\\\\n<script src=\\\\\"https://cdn.jsdelivr.net/npm/chart.js\\\\\"></script>\\\\n<script>\\\\n  // Parse JSON data\\\\n  var salesByMonthData = JSON.parse(document.getElementById('salesByMonthData').textContent);\\\\n\\\\n// Extract labels (months) and data (total_amount)\\\\n  var labels = salesByMonthData.map(function(item) { return item.month; });\\\\n  var data = salesByMonthData.map(function(item) { return item.total_amount; });\\\\n\\\\n  var ctx = document.getElementById('salesByMonthChart').getContext('2d');\\\\nvar myChart = new Chart(ctx, {\\\\n    type: 'bar',\\\\n    data: {\\\\n        labels: labels,\\\\n        datasets: [{\\\\n            label: 'Total Sales Amount',\\\\n            ", "14": [{"file": "views.py", "path": "hello_world_app/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    context = {\n        'message': 'Hello World'\n    }\n    return render(request, 'hello_world_app/hello_world.html', context)"}, {"file": "urls.py", "path": "hello_world_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "my_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello_world_app.urls')),  # Include your app's URLs\n]"}, {"file": "apps.py", "path": "hello_world_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloWorldAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hello_world_app'"}, {"file": "__init__.py", "path": "hello_world_app/__init__.py", "code": ""}, {"file": "hello_world.html", "path": "hello_world_app/templates/hello_world_app/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>  <!-- PageTitle -->\n     <meta name=\"description\" content=\"A simple Hello World page\"> <!-- MetaTags -->\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;  /* Ensure full viewport height */\n            margin: 0;\n            font-family: sans-serif; /* BasicStyling */\n            background-color: #f0f0f0; /* BasicStyling*/\n        }\n        h1 {\n            color: #333;  /* BasicStyling */\n        }\n\n       /* ResponsiveDesign (Basic)*/\n        @media (max-width: 768px) {\n             h1{ font-size: 1.5em;}\n         }\n\n    </style>\n</head>\n<body>\n    <h1>{{ message }}</h1>  <!-- DisplayText -->\n</body>\n</html>"}, {"file": "settings.py", "path": "my_project/settings.py", "code": "# settings.py - (Relevant Snippets, Not Full File)\n...\nINSTALLED_APPS = [\n    ...\n    'hello_world_app',  # Add your app here\n    ...\n]\n...\nTEMPLATES = [\n    {\n        ...\n        'DIRS': [BASE_DIR / 'templates'], #add global template\n        'APP_DIRS': True,\n        ...\n    },\n]\n...\n#add static files (optional)\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]"}, {"file": "admin.py", "path": "hello_world_app/admin.py", "code": "# No models to register for this simple example, but you'd typically put them here.\nfrom django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "hello_world_app/models.py", "code": "from django.db import models\n\n# Create your models here.\n# No models are needed as there are no data requirements."}, {"file": "tests.py", "path": "hello_world_app/tests.py", "code": "from django.test import TestCase, Client\nfrom django.urls import reverse\n\n# Create your tests here.\nclass HelloWorldViewTest(TestCase):\n    def test_hello_world_view(self):\n        client = Client()\n        response = client.get(reverse('hello_world')) # Assuming 'hello_world' is the name\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"Hello World\")"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),  # Include app-level URLs\n]"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.hello_world, name='hello_world'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'myapp/home.html')\n\ndef hello_world(request):\n    return render(request, 'myapp/hello_world.html')"}, {"file": "home.html", "path": "myapp/templates/myapp/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Home Page</h1>\n    <a href=\"{% url 'hello_world' %}\"><button>Go to HelloWorld</button></a>\n</body>\n</html>"}, {"file": "hello_world.html", "path": "myapp/templates/myapp/hello_world.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1>HelloWorld</h1>\n</body>\n</html>"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "myapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "...\nINSTALLED_APPS = [\n    ...\n    'myapp',\n]\n...\nTEMPLATES = [\n    {\n        ...\n        'DIRS': [BASE_DIR / 'templates'],\n        ...\n    },\n]\n...\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n..."}], "16": [{"file": "input_validation.py", "path": "utils/input_validation.py", "code": "import pandas as pd\nimport os\n\nclass InputValidation:\n\n    def __init__(self, file_path):\n        self.file_path = file_path\n        self.expected_headers = ['#', 'Name', 'Weekday', 'Time']\n        self.valid_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n\n    def check_file_existence(self):\n        \"\"\"Ensure that 'Spring Semester Subjects.xlsx' file exists.\"\"\"\n        return os.path.exists(self.file_path)\n\n    def validate_headers(self):\n        \"\"\"Verify that the file headers are ['#', 'Name', 'Weekday', 'Time'].\"\"\"\n        try:\n            df = pd.read_excel(self.file_path)\n            return list(df.columns) == self.expected_headers\n        except Exception as e:\n            print(f\"Error reading Excel file or accessing headers: {e}\")\n            return False\n\n    def validate_time_column(self):\n        \"\"\"Check if the 'Time' column contains only ['First period', 'Second period', 'Third period', 'Fourth period'].\"\"\"\n        try:\n            df = pd.read_excel(self.file_path)\n            return df['Time'].isin(self.valid_times).all()\n        except Exception as e:\n          print(f\"validate_time_column error:{e}\")\n          return False\n\n\n    def validate_data_integrity(self):\n        \"\"\"Ensure that all columns have the correct and complete data without any missing fields.\"\"\"\n        try:\n          df = pd.read_excel(self.file_path)\n          # Check for missing values in the DataFrame\n          if df.isnull().values.any():\n            return False\n            \n          #Check the type of columns\n          if not pd.api.types.is_integer_dtype(df['#']):\n            return False\n          if not pd.api.types.is_string_dtype(df['Name']):\n            return False\n          if not pd.api.types.is_string_dtype(df['Weekday']):\n            return False\n          if not pd.api.types.is_string_dtype(df['Time']):\n              return False\n\n          return True\n\n        except Exception as e:\n          print(f\"validate_data_integrity error: {e}\")\n          return False\n\n    def validate_null_value(self):\n        \"\"\"Check if there are any missing value in the table.\"\"\"\n        try:\n            df = pd.read_excel(self.file_path)\n            return not df.isnull().values.any()\n        except Exception as e:\n            print(f\"Error reading Excel file or checking for null values: {e}\")\n            return False"}, {"file": "data_transformation.py", "path": "utils/data_transformation.py", "code": "import pandas as pd\n\nclass DataTransformation:\n\n    def __init__(self, data):\n        self.data = data\n        self.weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']  # Example weekdays\n        self.time_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n        self.transformed_data = {weekday: {time_period: None for time_period in self.time_periods} for weekday in self.weekdays}\n\n    def transform_to_two_dimensional_table(self):\n        \"\"\"Convert the list of subjects into a two-dimensional table format.\"\"\"\n        # Assuming self.data is a pandas DataFrame\n        # Initialize an empty structure\n        for weekday in self.weekdays:\n          for period in self.time_periods:\n            self.transformed_data[weekday][period] = []\n\n        for index, row in self.data.iterrows():\n          subject_name = row['Name']\n          weekday = row['Weekday']\n          time_period = row['Time']\n\n          if weekday in self.weekdays and time_period in self.time_periods:\n            if  self.transformed_data[weekday][time_period] is None:\n              self.transformed_data[weekday][time_period] = [subject_name]\n            else:\n              self.transformed_data[weekday][time_period].append(subject_name)\n\n\n        return self.transformed_data\n\n    def data_mapping(self):\n        \"\"\"Map data correctly into the two-dimensional table based on weekday and time period.\"\"\"\n        # This is essentially done within transform_to_two_dimensional_table\n        # So, we can just call it or ensure it's integrated\n        return self.transform_to_two_dimensional_table()\n"}, {"file": "output_creation.py", "path": "utils/output_creation.py", "code": "import pandas as pd\n\nclass OutputCreation:\n\n    def __init__(self, transformed_data, output_file_path):\n        self.transformed_data = transformed_data\n        self.output_file_path = output_file_path\n\n    def create_output_excel_file(self):\n        \"\"\"Generate a new Excel file for the transformed two-dimensional subject table.\"\"\"\n        try:\n            # Create an empty DataFrame\n            df = pd.DataFrame()\n            # Save the empty DataFrame to Excel to create the file\n            df.to_excel(self.output_file_path, index=False)\n            return True\n        except Exception as e:\n            print(f\"Error creating Excel file: {e}\")\n            return False\n\n    def save_table_to_excel(self):\n        \"\"\"Save the two-dimensional table data into the newly created Excel file.\"\"\"\n\n        try:\n          # Convert the transformed data to a format suitable for DataFrame\n          data_for_df = []\n\n          for weekday, periods in self.transformed_data.items():\n            row = {'Weekday': weekday}\n            for period, subjects in periods.items():\n                row[period] = ', '.join(subjects) if subjects else ''  # Join subjects if list, else empty string\n\n            data_for_df.append(row)\n\n          df = pd.DataFrame(data_for_df)\n          df = df.set_index('Weekday')\n          df = df.reindex(self.transformed_data.keys())\n          df = df.reset_index()\n\n          with pd.ExcelWriter(self.output_file_path, engine='xlsxwriter') as writer:\n            df.to_excel(writer, sheet_name='Sheet1', index=False)\n          return True\n        except Exception as e:\n            print(f\"Error writing to Excel file: {e}\")\n            return False"}, {"file": "main.py", "path": "main.py", "code": "from utils.input_validation import InputValidation\nfrom utils.data_transformation import DataTransformation\nfrom utils.output_creation import OutputCreation\nimport pandas as pd\n\nif __name__ == \"__main__\":\n    input_file = 'Spring Semester Subjects.xlsx'\n    output_file = 'Transformed_Subjects.xlsx'\n\n    # Input Validation\n    validator = InputValidation(input_file)\n    if not validator.check_file_existence():\n        print(f\"Error: File '{input_file}' does not exist.\")\n        exit()\n    if not validator.validate_headers():\n        print(f\"Error: Invalid headers in '{input_file}'.\")\n        exit()\n    if not validator.validate_time_column():\n        print(f\"Error: Invalid values in 'Time' column in '{input_file}'.\")\n        exit()\n    if not validator.validate_data_integrity():\n        print(f\"Error: Data integrity check failed in '{input_file}'.  Check for missing or incorrect data types.\")\n        exit()\n\n    if not validator.validate_null_value():\n        print(f\"Error: Null values found. '{input_file}'.\")\n        exit()\n\n      \n    print(\"Input file validation successful.\")\n\n    # Data Transformation\n    try:\n      data = pd.read_excel(input_file)\n      transformer = DataTransformation(data)\n      transformed_data = transformer.data_mapping()\n      print(\"Data transformation successful.\")\n    except Exception as e:\n      print(f\"data transform error: {e}\")\n      exit()\n\n\n    # Output File Creation\n    output_creator = OutputCreation(transformed_data, output_file)\n    if output_creator.create_output_excel_file():\n      if output_creator.save_table_to_excel():\n        print(f\"Output file '{output_file}' created and data saved successfully.\")\n      else:\n         print(\"save table error.\")\n    else:\n      print(\"create file error.\")"}]}