{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# No specific models are strictly required for this simple calculator, \n# but you could add one to store calculation history if desired.\n# Example (optional):\n# class BMICalculation(models.Model):\n#     weight = models.FloatField()\n#     weight_unit = models.CharField(max_length=3)  # kg, lbs\n#     height = models.FloatField()\n#     height_unit = models.CharField(max_length=5) # cm, in, ft-in\n#     bmi = models.FloatField()\n#     category = models.CharField(max_length=20)\n#     timestamp = models.DateTimeField(auto_now_add=True)\n\n#     def __str__(self):\n#         return f\"BMI: {self.bmi} ({self.category}) - {self.timestamp}\""}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    WEIGHT_UNIT_CHOICES = [\n        ('kg', 'Kilograms (kg)'),\n        ('lbs', 'Pounds (lbs)'),\n    ]\n    HEIGHT_UNIT_CHOICES = [\n        ('cm', 'Centimeters (cm)'),\n        ('in', 'Inches (in)'),\n        ('ft-in', 'Feet and Inches (ft-in)'),\n    ]\n\n    weight = forms.FloatField(label='Weight', widget=forms.NumberInput(attrs={'placeholder': 'Enter weight'}))\n    weight_unit = forms.ChoiceField(label='Weight Unit', choices=WEIGHT_UNIT_CHOICES, initial='kg')\n    height = forms.FloatField(label='Height (cm/in)', required=False, widget=forms.NumberInput(attrs={'placeholder': 'Enter height'}))\n    height_feet = forms.IntegerField(label='Height (feet)', required=False, widget=forms.NumberInput(attrs={'placeholder': 'Feet'}))\n    height_inches = forms.FloatField(label='Height (inches)', required=False,  widget=forms.NumberInput(attrs={'placeholder': 'Inches'}))\n    height_unit = forms.ChoiceField(label='Height Unit', choices=HEIGHT_UNIT_CHOICES, initial='cm')\n\n\n    def clean(self):\n        cleaned_data = super().clean()\n        height_unit = cleaned_data.get('height_unit')\n        height = cleaned_data.get('height')\n        height_feet = cleaned_data.get('height_feet')\n        height_inches = cleaned_data.get('height_inches')\n\n        if height_unit == 'ft-in':\n            if height_feet is None or height_inches is None:\n                raise forms.ValidationError(\"Both feet and inches are required for ft-in.\")\n            if not isinstance(height_feet, int) or height_feet < 0:\n                raise forms.ValidationError('Feet must be non-negative integer.')\n            if not (isinstance(height_inches,float) or isinstance(height_inches, int))  or height_inches < 0:\n                 raise forms.ValidationError('Inches must be a non-negative number.')\n        elif height_unit in ('cm','in'):\n            if height is None:\n                 raise forms.ValidationError(\"Height is required for cm or in.\")\n            if not (isinstance(height,float) or isinstance(height, int))  or height < 0:\n                 raise forms.ValidationError('Height must be a non-negative number.')\n\n\n        weight = cleaned_data.get('weight')\n        if not (isinstance(weight, int) or isinstance(weight, float)) or weight <=0:\n            raise forms.ValidationError(\"Weight must be a positive number.\")\n        return cleaned_data"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\nimport json\n\ndef calculate_bmi(weight, weight_unit, height, height_unit):\n    \"\"\"Calculates BMI and category.\"\"\"\n    try:\n        # Convert weight to kg\n        if weight_unit == 'lbs':\n            weight_kg = weight * 0.453592\n        else:\n            weight_kg = weight\n\n        # Convert height to meters\n        if height_unit == 'cm':\n            height_m = height / 100\n        elif height_unit == 'in':\n            height_m = height * 0.0254\n        elif height_unit == 'ft-in':\n            height_m = (height[0] * 0.3048) + (height[1] * 0.0254)  #height is a tuple (feet, inches)\n        else:\n            return None, None\n        \n        bmi = weight_kg / (height_m ** 2)\n        bmi = round(bmi,2)\n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif bmi < 25:\n            category = 'Normal weight'\n        elif bmi < 30:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n        return bmi, category\n    except (TypeError, ValueError):\n        return None, None\n\ndef bmi_calculator_view(request):\n    form = BMICalculatorForm()\n    bmi_result = None\n    bmi_category = None\n    error_message = None\n\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            weight_unit = form.cleaned_data['weight_unit']\n            height_unit = form.cleaned_data['height_unit']\n\n            if height_unit == 'ft-in':\n                height = (form.cleaned_data['height_feet'],form.cleaned_data['height_inches'])\n            else:\n                height = form.cleaned_data['height']\n\n            bmi_result, bmi_category = calculate_bmi(weight, weight_unit, height, height_unit)\n\n            if bmi_result is None:\n                 error_message = \"Invalid input values.\"\n\n    context = {\n        'form': form,\n        'bmi_result': bmi_result,\n        'bmi_category': bmi_category,\n        'error_message': error_message\n    }\n    return render(request, 'bmi_calculator/bmi_calculator.html', context)"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'bmi_calculator'\n\nurlpatterns = [\n    path('', views.bmi_calculator_view, name='bmi_calculator'),\n]"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1>BMI Calculator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n          <div>\n            {{ form.weight.label_tag }}\n            {{ form.weight }}\n            {{ form.weight_unit }}\n          </div>\n            {% if form.weight.errors %}\n                <div style=\"color:red\">{{form.weight.errors}}</div>\n            {% endif %}\n\n        <div>\n          <label>Height:</label>\n          {{form.height}} {{form.height_unit}}\n          <div id=\"height_ft_in\" style=\"display: none;\">\n             {{form.height_feet}} ft {{form.height_inches}} in\n          </div>\n           {% if form.height.errors or form.height_feet.errors or form.height_inches.errors %}\n             <div style=\"color:red\">\n                {% if form.height_unit.value == 'ft-in' %}\n                    {{form.height_feet.errors}}\n                    {{form.height_inches.errors}}\n                {% else %}\n                    {{form.height.errors}}\n                {% endif %}\n             </div>\n           {% endif %}\n\n        </div>\n\n        <button type=\"submit\">Calculate BMI</button>\n    </form>\n\n    {% if bmi_result %}\n        <p>Your BMI is: {{ bmi_result }}</p>\n        <p>Category: {{ bmi_category }}</p>\n    {% endif %}\n\n    {% if error_message %}\n      <p style=\"color:red\">Error: {{ error_message }}</p>\n    {% endif %}\n\n\n<script>\n  const heightUnitSelect = document.querySelector(\"#id_height_unit\");\n  const heightFtInDiv = document.querySelector(\"#height_ft_in\");\n  const heightInput = document.querySelector(\"#id_height\");\n\n\n\n  function updateHeightFields(){\n    if (heightUnitSelect.value === 'ft-in'){\n        heightFtInDiv.style.display = 'block';\n        heightInput.required = false;\n        heightInput.parentElement.querySelector('label').textContent = 'Height (cm/in)'\n    } else {\n        heightFtInDiv.style.display = 'none';\n        heightInput.required = true;\n\n       if (heightUnitSelect.value === 'cm'){\n          heightInput.parentElement.querySelector('label').textContent = 'Height (cm)'\n       } else{\n          heightInput.parentElement.querySelector('label').textContent = 'Height (in)'\n       }\n    }\n  }\n\n  heightUnitSelect.addEventListener('change',updateHeightFields);\n\n  // Initial setup on page load.\n  updateHeightFields();\n\n</script>\n</body>\n</html>"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('bmi/', include('bmi_calculator.urls', namespace='bmi_calculator')),\n]"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass Currency(models.Model):\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.code\n\nclass ExchangeRate(models.Model):\n    base_currency = models.ForeignKey(Currency, related_name='base_rates', on_delete=models.CASCADE)\n    target_currency = models.ForeignKey(Currency, related_name='target_rates', on_delete=models.CASCADE)\n    rate = models.DecimalField(max_digits=15, decimal_places=6)\n    timestamp = models.DateTimeField(auto_now=True)  # Automatically updates on every save\n\n    class Meta:\n        unique_together = ('base_currency', 'target_currency', 'timestamp') #ensure we do not have duplicate at the same time\n        ordering = ['-timestamp']\n\n    def __str__(self):\n        return f'{self.base_currency}/{self.target_currency} - {self.rate}'\n\nclass HistoricalExchangeRate(models.Model):\n    base_currency = models.ForeignKey(Currency, related_name='base_historical_rates', on_delete=models.CASCADE)\n    target_currency = models.ForeignKey(Currency, related_name='target_historical_rates', on_delete=models.CASCADE)\n    rate = models.DecimalField(max_digits=15, decimal_places=6)\n    timestamp = models.DateTimeField()\n\n    class Meta:\n       unique_together = ('base_currency', 'target_currency', 'timestamp')\n       ordering = ['-timestamp']"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import JsonResponse\nfrom .models import Currency, ExchangeRate, HistoricalExchangeRate\nfrom django.core.exceptions import ValidationError\nfrom django.utils import timezone\nimport datetime\n\ndef home(request):\n    currencies = Currency.objects.all()\n    last_updated = ExchangeRate.objects.first().timestamp if ExchangeRate.objects.exists() else None\n\n    context = {\n        'currencies': currencies,\n        'last_updated': last_updated,\n    }\n    return render(request, 'currency_converter/home.html', context)\n\ndef convert_currency(request):\n    if request.method == 'POST':\n        try:\n            base_currency_code = request.POST.get('base_currency')\n            target_currency_code = request.POST.get('target_currency')\n            amount_str = request.POST.get('amount')\n\n            amount = float(amount_str)\n\n            base_currency = Currency.objects.get(code=base_currency_code)\n            target_currency = Currency.objects.get(code=target_currency_code)\n\n            exchange_rate = ExchangeRate.objects.filter(base_currency=base_currency, target_currency=target_currency).first()\n\n            if exchange_rate:\n                converted_amount = amount * exchange_rate.rate\n                return JsonResponse({'converted_amount': converted_amount, 'exchange_rate': exchange_rate.rate, 'success':True})\n            else:\n                return JsonResponse({'error': 'Exchange rate not found.', 'success':False}, status=404)\n\n        except (ValueError, TypeError):\n            return JsonResponse({'error': 'Invalid input. Please enter a valid number.', 'success':False}, status=400)\n        except Currency.DoesNotExist:\n            return JsonResponse({'error': 'Currency not found.', 'success':False}, status=404)\n        except Exception as e:\n            return JsonResponse({'error':str(e), 'success':False}, status =500)\n\n    return JsonResponse({'error': 'Invalid Request', 'success': False}, status=400)\n\ndef get_historical_data(request):\n\n    base_currency_code = request.GET.get('base_currency')\n    target_currency_code = request.GET.get('target_currency')\n    time_range = request.GET.get('time_range', '1w') # default 1 week\n\n    try:\n        base_currency = Currency.objects.get(code=base_currency_code)\n        target_currency = Currency.objects.get(code=target_currency_code)\n\n        end_date = timezone.now()\n        if time_range == '1w':\n            start_date = end_date - datetime.timedelta(weeks=1)\n        elif time_range == '1m':\n            start_date = end_date - datetime.timedelta(days=30)\n        elif time_range == '1y':\n            start_date = end_date - datetime.timedelta(days=365)\n        else:\n            return JsonResponse({'error': 'Invalid time range.'}, status=400)\n\n\n        historical_data = HistoricalExchangeRate.objects.filter(\n            base_currency=base_currency,\n            target_currency=target_currency,\n            timestamp__range=[start_date, end_date]\n        ).values('timestamp', 'rate')\n\n        # Convert Decimal to float for JSON serialization and format timestamp\n        formatted_data = [{\n            'timestamp': entry['timestamp'].strftime('%Y-%m-%d %H:%M:%S'),\n            'rate': float(entry['rate']) #important for json serialization\n             } for entry in historical_data]\n\n        return JsonResponse({'historical_data': formatted_data})\n\n\n    except Currency.DoesNotExist:\n        return JsonResponse({'error': 'Currency not found.'}, status=404)\n    except Exception as e:\n        return JsonResponse({'error': str(e)}, status=500)\n\ndef swap_currencies(request):\n  if request.method == 'POST':\n    base_currency = request.POST.get('base_currency')\n    target_currency = request.POST.get('target_currency')\n    return JsonResponse({'base_currency': target_currency, 'target_currency': base_currency})\n  return JsonResponse({'error':'Invalid method.'}, status=400)"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert_currency, name='convert_currency'),\n    path('historical/', views.get_historical_data, name='get_historical_data'),\n    path('swap/', views.swap_currencies, name='swap_currencies')\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "# forms.py -  We will use basic HTML forms and handle in views, no need for complex Django forms.\n# This file can be kept empty or used if custom validation/form logic is *really* needed later."}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency, ExchangeRate, HistoricalExchangeRate\n\nadmin.site.register(Currency)\nadmin.site.register(ExchangeRate)\nadmin.site.register(HistoricalExchangeRate)"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n     <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n\n    <label for=\"base_currency\">Base Currency:</label>\n    <select id=\"base_currency\" name=\"base_currency\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select>\n\n    <label for=\"target_currency\">Target Currency:</label>\n    <select id=\"target_currency\" name=\"target_currency\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select>\n\n     <button type=\"button\" id=\"swap_button\">Swap</button><br><br>\n\n    <label for=\"amount\">Amount:</label>\n    <input type=\"text\" id=\"amount\" name=\"amount\" value=\"1.00\"><br><br>\n    <div id=\"error_message\" style=\"color:red\"></div>\n\n    <button type=\"button\" id=\"convert_button\">Convert</button><br><br>\n\n    <label>Converted Amount:</label>\n    <span id=\"converted_amount\"></span><br>\n\n    <label>Exchange Rate:</label>\n    <span id=\"exchange_rate\"></span><br><br>\n\n    <label>Last Updated:</label>\n    <span id=\"last_updated\">{% if last_updated %}{{ last_updated }}{% else %}Never{% endif %}</span><br><br>\n    <div>\n        <label for=\"time_range\">Time Range:</label>\n        <select id=\"time_range\">\n            <option value=\"1w\">1 Week</option>\n            <option value=\"1m\">1 Month</option>\n            <option value=\"1y\">1 Year</option>\n        </select>\n    </div>\n    <canvas id=\"historicalChart\" width=\"400\" height=\"200\"></canvas>\n\n    <script>\n\n     function updateHistoricalChart(baseCurrency, targetCurrency, timeRange) {\n        fetch(`/historical/?base_currency=${baseCurrency}&target_currency=${targetCurrency}&time_range=${timeRange}`)\n        .then(response => {\n           if(!response.ok) {\n              throw new Error(`HTTP error! status: ${response.status}`);\n           }\n           return response.json();\n        })\n        .then(data => {\n            if(data.error) {\n              alert(data.error);\n              return\n            }\n            const ctx = document.getElementById('historicalChart').getContext('2d');\n            if (window.myChart  instanceof Chart) {\n                window.myChart.destroy();\n            }\n            window.myChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: data.historical_data.map(item => item.timestamp),\n                    datasets: [{\n                        label: 'Exchange Rate',\n                        data: data.historical_data.map(item => item.rate),\n                        borderColor: 'blue',\n                        fill: false\n                    }]\n                },\n                options: {\n                    scales:{\n                      x:{\n                        type: 'time',\n                        time:{\n                          tooltipFormat: 'll HH:mm'\n                        }\n                      }\n                    }\n                }\n            });\n        })\n        .catch(error => {\n            console.error('Error fetching historical data:', error);\n            alert('Failed to fetch historical data.');\n        });\n    }\n\n\n\n        document.getElementById('convert_button').addEventListener('click', function() {\n            const baseCurrency = document.getElementById('base_currency').value;\n            const targetCurrency = document.getElementById('target_currency').value;\n            const amount = document.getElementById('amount').value;\n            const timeRange = document.getElementById('time_range').value;\n            document.getElementById('error_message').textContent = ''; //clear error message\n\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': getCookie('csrftoken')  // Include CSRF token\n                },\n                body: `base_currency=${baseCurrency}&target_currency=${targetCurrency}&amount=${amount}`\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.success) {\n                   document.getElementById('converted_amount').textContent = data.converted_amount.toFixed(2);\n                   document.getElementById('exchange_rate').textContent = data.exchange_rate;\n\n                } else{\n                  document.getElementById('error_message').textContent = data.error;\n                }\n                updateHistoricalChart(baseCurrency, targetCurrency, timeRange);\n\n            });\n        });\n\n      document.getElementById('swap_button').addEventListener('click', function(){\n        const baseCurrency = document.getElementById('base_currency');\n        const targetCurrency = document.getElementById('target_currency');\n        const timeRange = document.getElementById('time_range').value;\n        const baseCurrencyValue = baseCurrency.value;\n\n        fetch('/swap/', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'X-CSRFToken': getCookie('csrftoken')\n          },\n          body: `base_currency=${baseCurrency.value}&target_currency=${targetCurrency.value}`\n        })\n        .then(response => response.json())\n        .then(data => {\n          if(!data.error) {\n            baseCurrency.value = data.base_currency;\n            targetCurrency.value = data.target_currency;\n          } else {\n            alert('Swap failed.');\n          }\n             const newBase = document.getElementById('base_currency').value;\n            const newTarget = document.getElementById('target_currency').value;\n          updateHistoricalChart(newBase, newTarget, timeRange);\n\n        });\n\n\n      });\n\n    document.getElementById('time_range').addEventListener('change', function(){\n      const baseCurrency = document.getElementById('base_currency').value;\n      const targetCurrency = document.getElementById('target_currency').value;\n      const timeRange = document.getElementById('time_range').value;\n      updateHistoricalChart(baseCurrency, targetCurrency, timeRange);\n     });\n\n\n        // Function to get CSRF token from cookies\n        function getCookie(name) {\n            let cookieValue = null;\n            if (document.cookie && document.cookie !== '') {\n                const cookies = document.cookie.split(';');\n                for (let i = 0; i < cookies.length; i++) {\n                    let cookie = cookies[i].trim();\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                        break;\n                    }\n                }\n            }\n            return cookieValue;\n        }\n        //initial chart\n        document.addEventListener('DOMContentLoaded', (event) =>{\n          const baseCurrency = document.getElementById('base_currency').value;\n          const targetCurrency = document.getElementById('target_currency').value;\n          const timeRange = document.getElementById('time_range').value\n          updateHistoricalChart(baseCurrency, targetCurrency, timeRange);\n       });\n\n    </script>\n</body>\n</html>"}, {"file": "apps.py", "path": "currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "currency_converter/migrations/__init__.py", "code": ""}], "3": [{"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# No models are needed for this project as we won't store passwords."}, {"file": "forms.py", "path": "password_generator/forms.py", "code": "from django import forms\n\nclass PasswordGeneratorForm(forms.Form):\n    length = forms.IntegerField(label='Password Length', min_value=1, max_value=128, initial=12)\n    include_uppercase = forms.BooleanField(label='Include Uppercase Letters', required=False, initial=True)\n    include_lowercase = forms.BooleanField(label='Include Lowercase Letters', required=False, initial=True)\n    include_numbers = forms.BooleanField(label='Include Numbers', required=False, initial=True)\n    include_symbols = forms.BooleanField(label='Include Symbols', required=False, initial=False)\n    exclude_similar = forms.BooleanField(label='Exclude Similar Characters', required=False)\n    exclude_ambiguous = forms.BooleanField(label='Exclude Ambiguous Characters', required=False)\n\nclass SettingsForm(forms.Form):  # For the optional Settings page\n    default_length = forms.IntegerField(label='Default Password Length', min_value=1, max_value=128, initial=12)\n    remember_uppercase = forms.BooleanField(required=False, initial=True)\n    remember_lowercase = forms.BooleanField(required=False, initial=True)\n    remember_numbers = forms.BooleanField(required=False, initial=True)\n    remember_symbols = forms.BooleanField(required=False, initial=False)"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render, redirect\nfrom .forms import PasswordGeneratorForm, SettingsForm\nimport secrets\nimport string\n\ndef generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols, exclude_similar, exclude_ambiguous):\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if exclude_similar:\n        characters = characters.translate(str.maketrans('', '', 'Il1O0'))\n\n    if exclude_ambiguous:\n      characters = characters.translate(str.maketrans('', '', \"{}[]()/\\'`~,;:.<>\"))\n    \n    if not characters:\n        return \"Error: No character sets selected.\"\n\n    password = ''.join(secrets.choice(characters) for _ in range(length))\n    return password\n\ndef calculate_strength(password):\n    length = len(password)\n    if length < 8:\n        return 'Weak'\n    elif length < 12:\n        return 'Medium'\n    else:\n      char_types = 0\n      if any(c.isupper() for c in password): char_types +=1\n      if any(c.islower() for c in password): char_types +=1\n      if any(c.isdigit() for c in password): char_types +=1\n      if any(c in string.punctuation for c in password): char_types +=1\n      \n      if char_types >=3:\n        return 'Strong'\n      else:\n        return 'Medium'\n\ndef homepage(request):\n    if request.method == 'POST':\n        form = PasswordGeneratorForm(request.POST)\n        if form.is_valid():\n            length = form.cleaned_data['length']\n            include_uppercase = form.cleaned_data['include_uppercase']\n            include_lowercase = form.cleaned_data['include_lowercase']\n            include_numbers = form.cleaned_data['include_numbers']\n            include_symbols = form.cleaned_data['include_symbols']\n            exclude_similar = form.cleaned_data['exclude_similar']\n            exclude_ambiguous = form.cleaned_data['exclude_ambiguous']\n\n            password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols, exclude_similar, exclude_ambiguous)\n            strength = calculate_strength(password)\n            return render(request, 'password_generator/homepage.html', {'form': form, 'password': password, 'strength': strength})\n    else:\n        form = PasswordGeneratorForm()\n    return render(request, 'password_generator/homepage.html', {'form': form})\n\ndef about(request):\n    return render(request, 'password_generator/about.html')\n\ndef settings(request):\n    if request.method == 'POST':\n        form = SettingsForm(request.POST)\n        if form.is_valid():\n            # In a real application, you'd save these settings to user profiles (using sessions or a database).\n            # For simplicity, we'll just demonstrate the form handling.\n            \n            request.session['default_length'] = form.cleaned_data['default_length']\n            request.session['remember_uppercase'] = form.cleaned_data['remember_uppercase']\n            request.session['remember_lowercase'] = form.cleaned_data['remember_lowercase']\n            request.session['remember_numbers'] = form.cleaned_data['remember_numbers']\n            request.session['remember_symbols'] = form.cleaned_data['remember_symbols']\n\n            return redirect('settings') # Redirect back to settings page after saving\n\n    else:\n       # Load initial values from session if they exist\n        initial_data = {\n                'default_length': request.session.get('default_length', 12),\n                'remember_uppercase': request.session.get('remember_uppercase', True),\n                'remember_lowercase': request.session.get('remember_lowercase', True),\n                'remember_numbers': request.session.get('remember_numbers', True),\n                'remember_symbols': request.session.get('remember_symbols', False),\n            }\n        form = SettingsForm(initial=initial_data)\n\n    return render(request, 'password_generator/settings.html', {'form': form})\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('about/', views.about, name='about'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),\n]"}, {"file": "homepage.html", "path": "password_generator/templates/password_generator/homepage.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1>Password Generator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Generate Password</button>\n    </form>\n\n    {% if password %}\n        <h2>Generated Password:</h2>\n        <p>{{ password }}</p>\n        <p>Strength: {{strength}}</p>\n        <button id=\"copyButton\">Copy to Clipboard</button>\n        <script>\n            document.getElementById('copyButton').addEventListener('click', function() {\n                navigator.clipboard.writeText('{{ password }}').then(function() {\n                    alert('Password copied to clipboard!');\n                }, function(err) {\n                    console.error('Could not copy text: ', err);\n                    alert('Failed to copy password. Please copy manually.');\n                });\n            });\n        </script>\n\n    {% endif %}\n     <p><a href=\"{% url 'settings' %}\">Settings</a></p>\n     <p><a href=\"{% url 'about' %}\">About</a></p>\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator/templates/password_generator/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Password Generator</h1>\n    <p>This is a simple password generator built with Django.  It allows you to create strong, random passwords based on your chosen criteria.</p>\n    <h2>Security Information</h2>\n    <p>This password generator does <strong>not</strong> store any generated passwords.  Passwords are created in your browser and are never sent to or saved on any server.</p>\n<p><a href=\"{% url 'homepage' %}\">Back to Generator</a></p>\n</body>\n</html>"}, {"file": "settings.html", "path": "password_generator/templates/password_generator/settings.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <h1>Settings</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save Settings</button>\n    </form>\n     <p><a href=\"{% url 'homepage' %}\">Back to Generator</a></p>\n</body>\n</html>"}], "4": [{"file": "models.py", "path": "qr_generator/models.py", "code": "from django.db import models\n\n# No specific models are strictly required for this basic QR generator,\n# as we're primarily dealing with user input and generating images.\n# However, if you wanted to store generated QR codes or user data,\n# you would define models here.  For example:\n\n# class GeneratedQRCode(models.Model):\n#     data = models.TextField()  # The data encoded in the QR code\n#     qr_code_image = models.ImageField(upload_to='qr_codes/') # Store generated image\n#     created_at = models.DateTimeField(auto_now_add=True)\n#     user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True) #if user is logged in\n#     type = models.CharField(max_length=20) # e.g., 'text', 'url', 'vcard'\n#     # Add other fields as needed (e.g., error correction level, download format, etc.)\n"}, {"file": "forms.py", "path": "qr_generator/forms.py", "code": "from django import forms\n\nclass QRCodeDataForm(forms.Form):\n    TYPE_CHOICES = (\n        ('text', 'Plain Text'),\n        ('url', 'URL'),\n        ('vcard', 'vCard'),\n        ('email', 'Email'),\n        ('sms', 'SMS'),\n        ('wifi', 'WiFi'),\n        ('geo', 'Geolocation'),\n        ('event', 'Calendar Event'),\n    )\n    qr_type = forms.ChoiceField(choices=TYPE_CHOICES, initial='text', widget=forms.RadioSelect)\n    text_data = forms.CharField(required=False, widget=forms.Textarea)\n    url_data = forms.URLField(required=False)\n    #vcard fields\n    vcard_first_name = forms.CharField(required=False, label='First Name')\n    vcard_last_name = forms.CharField(required=False, label='Last Name')\n    vcard_organization = forms.CharField(required=False, label='Organization')\n    vcard_title = forms.CharField(required=False, label='Title')\n    vcard_phone = forms.CharField(required=False, label='Phone')\n    vcard_email = forms.EmailField(required=False, label='Email')\n    vcard_website = forms.URLField(required=False, label='Website')\n    vcard_street = forms.CharField(required=False, label='Street')\n    vcard_city = forms.CharField(required=False, label='City')\n    vcard_region = forms.CharField(required=False, label='Region')\n    vcard_zip = forms.CharField(required=False, label='ZIP Code')\n    vcard_country = forms.CharField(required=False, label='Country')\n\n    email_data = forms.EmailField(required=False)\n    email_subject = forms.CharField(required=False)\n    email_body = forms.CharField(required=False, widget=forms.Textarea)\n    sms_number = forms.CharField(required=False)\n    sms_message = forms.CharField(required=False, widget=forms.Textarea)\n    wifi_ssid = forms.CharField(required=False)\n    wifi_password = forms.CharField(required=False)\n    wifi_encryption = forms.ChoiceField(choices=[('nopass', 'No Encryption'),('WEP', 'WEP'), ('WPA', 'WPA/WPA2/WPA3')], required=False, initial='nopass')\n    geo_latitude = forms.FloatField(required=False)\n    geo_longitude = forms.FloatField(required=False)\n    event_summary = forms.CharField(required=False)\n    event_start = forms.DateTimeField(required=False, input_formats=['%Y-%m-%dT%H:%M', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M', '%Y-%m-%d'], widget=forms.DateTimeInput(attrs={'type': 'datetime-local'}))\n    event_end = forms.DateTimeField(required=False, input_formats=['%Y-%m-%dT%H:%M', '%Y-%m-%d %H:%M:%S', '%Y-%m-%d %H:%M', '%Y-%m-%d'], widget=forms.DateTimeInput(attrs={'type': 'datetime-local'}))\n    event_location = forms.CharField(required=False)\n    event_description = forms.CharField(required=False)\n\n\n\n    ERROR_CORRECTION_CHOICES = (\n        ('L', 'L (7%)'),\n        ('M', 'M (15%)'),\n        ('Q', 'Q (25%)'),\n        ('H', 'H (30%)'),\n    )\n    error_correction = forms.ChoiceField(choices=ERROR_CORRECTION_CHOICES, initial='M')\n    download_format = forms.ChoiceField(choices=[('png', 'PNG'), ('svg', 'SVG'), ('jpeg', 'JPEG')], initial='png')\n    box_size = forms.IntegerField(initial=10, min_value=1, max_value=50, label='Pixel Size') #for size\n    border_size = forms.IntegerField(initial=4, min_value=0, max_value=10, label='Border Size')\n    fg_color = forms.CharField(initial='#000000', widget=forms.TextInput(attrs={'type': 'color'}), label='Foreground Color')\n    bg_color = forms.CharField(initial='#ffffff', widget=forms.TextInput(attrs={'type': 'color'}), label='Background Color')\n\n"}, {"file": "views.py", "path": "qr_generator/views.py", "code": "import io\nimport qrcode\nimport qrcode.image.svg\nfrom django.shortcuts import render\nfrom django.http import HttpResponse, HttpResponseBadRequest\nfrom .forms import QRCodeDataForm\nfrom urllib.parse import quote\n\ndef home(request):\n    qr_code_image = None\n    form = QRCodeDataForm(request.POST or None)\n\n    if request.method == 'POST' and form.is_valid():\n        data = ''\n        qr_type = form.cleaned_data['qr_type']\n\n        if qr_type == 'text':\n            data = form.cleaned_data['text_data']\n        elif qr_type == 'url':\n            data = form.cleaned_data['url_data']\n        elif qr_type == 'vcard':\n            vcard_data = f\"\"\"BEGIN:VCARD\nVERSION:3.0\nN:{form.cleaned_data['vcard_last_name']};{form.cleaned_data['vcard_first_name']}\nFN:{form.cleaned_data['vcard_first_name']} {form.cleaned_data['vcard_last_name']}\nORG:{form.cleaned_data['vcard_organization']}\nTITLE:{form.cleaned_data['vcard_title']}\nTEL;TYPE=work,voice:{form.cleaned_data['vcard_phone']}\nEMAIL:{form.cleaned_data['vcard_email']}\nURL:{form.cleaned_data['vcard_website']}\nADR;TYPE=work:;;{form.cleaned_data['vcard_street']};{form.cleaned_data['vcard_city']};{form.cleaned_data['vcard_region']};{form.cleaned_data['vcard_zip']};{form.cleaned_data['vcard_country']}\nEND:VCARD\"\"\"\n            data = vcard_data\n\n        elif qr_type == 'email':\n            email = form.cleaned_data['email_data']\n            subject = form.cleaned_data['email_subject']\n            body = form.cleaned_data['email_body']\n            data = f\"mailto:{email}?subject={quote(subject)}&body={quote(body)}\"\n        elif qr_type == 'sms':\n            number = form.cleaned_data['sms_number']\n            message = form.cleaned_data['sms_message']\n            data = f\"smsto:{number}:{message}\" if message else f\"smsto:{number}\"\n        elif qr_type == 'wifi':\n            ssid = form.cleaned_data['wifi_ssid']\n            password = form.cleaned_data['wifi_password']\n            encryption = form.cleaned_data['wifi_encryption']\n            data = f\"WIFI:T:{encryption};S:{ssid};P:{password};;\"\n        elif qr_type == 'geo':\n            latitude = form.cleaned_data['geo_latitude']\n            longitude = form.cleaned_data['geo_longitude']\n            data = f\"geo:{latitude},{longitude}\"\n        elif qr_type == 'event':\n             summary = form.cleaned_data['event_summary']\n             start = form.cleaned_data['event_start'].strftime('%Y%m%dT%H%M%S')\n             end = form.cleaned_data['event_end'].strftime('%Y%m%dT%H%M%S')\n             location = form.cleaned_data['event_location']\n             description = form.cleaned_data['event_description']\n             data = f\"\"\"BEGIN:VEVENT\nSUMMARY:{summary}\nDTSTART:{start}\nDTEND:{end}\nLOCATION:{location}\nDESCRIPTION:{description}\nEND:VEVENT\"\"\"\n\n        if data:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction={\n                    'L': qrcode.constants.ERROR_CORRECT_L,\n                    'M': qrcode.constants.ERROR_CORRECT_M,\n                    'Q': qrcode.constants.ERROR_CORRECT_Q,\n                    'H': qrcode.constants.ERROR_CORRECT_H,\n                }[form.cleaned_data['error_correction']],\n                box_size=form.cleaned_data['box_size'],\n                border=form.cleaned_data['border_size'],\n            )\n            qr.add_data(data)\n            qr.make(fit=True)\n\n            if form.cleaned_data['download_format'] == 'svg':\n                img = qrcode.image.svg.SvgImage(border=form.cleaned_data['border_size'])\n                img_buffer = io.BytesIO()\n                qr.make_image(image_factory=qrcode.image.svg.SvgPathImage, fill_color=form.cleaned_data['fg_color'], back_color=form.cleaned_data['bg_color']).save(img_buffer)\n                img_buffer.seek(0)\n                response = HttpResponse(img_buffer.getvalue(), content_type='image/svg+xml')\n                response['Content-Disposition'] = 'attachment; filename=\"qr_code.svg\"'\n                return response\n\n            else:\n                img = qr.make_image(fill_color=form.cleaned_data['fg_color'], back_color=form.cleaned_data['bg_color'])\n                img_buffer = io.BytesIO()\n                img.save(img_buffer, format=form.cleaned_data['download_format'].upper())\n                img_buffer.seek(0)\n                qr_code_image = img_buffer.getvalue()\n\n            if 'download' in request.POST:\n\n                if form.cleaned_data['download_format'] == 'jpeg':\n                    content_type = 'image/jpeg'\n                    filename = 'qr_code.jpeg'\n                else:\n                    content_type = 'image/png'\n                    filename = 'qr_code.png'\n\n                response = HttpResponse(qr_code_image, content_type=content_type)\n                response['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n                return response\n\n    return render(request, 'qr_generator/home.html', {'form': form, 'qr_code_image': qr_code_image})\n\ndef about(request):\n    return render(request, 'qr_generator/about.html')\n\ndef faq(request):\n    return render(request, 'qr_generator/faq.html')\n"}, {"file": "urls.py", "path": "qr_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('faq/', views.faq, name='faq'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path,include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator.urls')),\n\n]\n"}, {"file": "home.html", "path": "qr_generator/templates/qr_generator/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n    <style>\n        /* Add some basic styling for responsiveness */\n        body { font-family: sans-serif; }\n        .container { display: flex; flex-direction: column; align-items: center; }\n        .form-section { margin-bottom: 20px; width: 80%; max-width: 600px; }\n        .form-section h2 {border-bottom: 1px solid #ccc; padding-bottom:5px;}\n        .input-group { margin-bottom: 10px; display: flex; flex-direction:column;}\n        .input-group label { display: block; margin-bottom: 5px; }\n\t\t.qr_image_container { margin-top: 20px;}\n        input[type=\"text\"], input[type=\"url\"], input[type=\"email\"], textarea, select, input[type=\"number\"], input[type=\"color\"], input[type=\"datetime-local\"] { width: 95%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; }\n        button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        .hidden { display: none; } /* Class to hide elements */\n\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>QR Code Generator</h1>\n        <form method=\"post\" action=\"\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n             <div class=\"form-section\">\n                <h2>Select QR Code Type</h2>\n                {{ form.qr_type }}<br>\n            </div>\n\n            <div class=\"form-section\" id=\"text-section\">\n                <h2>Plain Text</h2>\n                <div class=\"input-group\">\n                {{ form.text_data.label_tag }}\n                {{ form.text_data }}\n                </div>\n            </div>\n\n             <div class=\"form-section\" id=\"url-section\">\n                <h2>URL</h2>\n                <div class=\"input-group\">\n                {{ form.url_data.label_tag }}\n                {{ form.url_data }}\n                </div>\n            </div>\n\n\t\t\t<div class=\"form-section\" id=\"vcard-section\">\n\t\t\t\t<h2>vCard</h2>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_first_name.label_tag }} {{ form.vcard_first_name }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_last_name.label_tag }} {{ form.vcard_last_name }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_organization.label_tag }} {{ form.vcard_organization }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_title.label_tag }} {{ form.vcard_title }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_phone.label_tag }} {{ form.vcard_phone }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_email.label_tag }} {{ form.vcard_email }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_website.label_tag }} {{ form.vcard_website }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_street.label_tag }} {{ form.vcard_street }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_city.label_tag }} {{ form.vcard_city }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_region.label_tag }} {{ form.vcard_region }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_zip.label_tag }} {{ form.vcard_zip }}</div>\n\t\t\t\t<div class=\"input-group\">{{ form.vcard_country.label_tag }} {{ form.vcard_country }}</div>\n            </div>\n\n            <div class=\"form-section\" id=\"email-section\">\n                <h2>Email</h2>\n                <div class=\"input-group\">{{ form.email_data.label_tag }} {{ form.email_data }}</div>\n                <div class=\"input-group\">{{ form.email_subject.label_tag }} {{ form.email_subject }}</div>\n                <div class=\"input-group\">{{ form.email_body.label_tag }} {{ form.email_body }}</div>\n            </div>\n\n            <div class=\"form-section\" id=\"sms-section\">\n                <h2>SMS</h2>\n                 <div class=\"input-group\">{{ form.sms_number.label_tag }} {{ form.sms_number }}</div>\n                 <div class=\"input-group\">{{ form.sms_message.label_tag }} {{ form.sms_message }}</div>\n            </div>\n\n            <div class=\"form-section\" id=\"wifi-section\">\n                <h2>WiFi</h2>\n                <div class=\"input-group\">{{ form.wifi_ssid.label_tag }} {{ form.wifi_ssid }}</div>\n                <div class=\"input-group\">{{ form.wifi_password.label_tag }}{{ form.wifi_password }}</div>\n                <div class=\"input-group\">{{ form.wifi_encryption.label_tag }} {{ form.wifi_encryption }}</div>\n            </div>\n\n            <div class=\"form-section\" id=\"geo-section\">\n                <h2>Geolocation</h2>\n                <div class=\"input-group\">{{ form.geo_latitude.label_tag }} {{ form.geo_latitude }}</div>\n                <div class=\"input-group\">{{ form.geo_longitude.label_tag }} {{ form.geo_longitude }}</div>\n            </div>\n\n            <div class=\"form-section\" id=\"event-section\">\n                <h2>Calendar Event</h2>\n                <div class=\"input-group\">{{ form.event_summary.label_tag }} {{ form.event_summary }}</div>\n                <div class=\"input-group\">{{ form.event_start.label_tag }} {{ form.event_start }}</div>\n                <div class=\"input-group\">{{ form.event_end.label_tag }} {{ form.event_end }}</div>\n                <div class=\"input-group\">{{ form.event_location.label_tag }} {{ form.event_location }}</div>\n                <div class=\"input-group\">{{ form.event_description.label_tag }} {{ form.event_description }}</div>\n            </div>\n\n            <div class=\"form-section\">\n            <h2>Customization</h2>\n                <div class=\"input-group\">\n                    {{ form.error_correction.label_tag }}\n                    {{ form.error_correction }}\n                </div>\n                <div class=\"input-group\">\n                    {{ form.download_format.label_tag }}\n                    {{ form.download_format }}\n                </div>\n\n                <div class=\"input-group\">\n                    {{ form.box_size.label_tag }}\n                    {{ form.box_size }}\n                </div>\n\n                <div class=\"input-group\">\n                    {{ form.border_size.label_tag }}\n                    {{ form.border_size }}\n                </div>\n                <div class=\"input-group\">\n                    {{ form.fg_color.label_tag }}\n                    {{ form.fg_color }}\n                </div>\n                 <div class=\"input-group\">\n                    {{ form.bg_color.label_tag }}\n                    {{ form.bg_color }}\n                </div>\n            </div>\n\n            <button type=\"submit\">Generate QR Code</button>\n            <button type=\"submit\" name=\"download\">Download QR Code</button>\n        </form>\n\n        {% if qr_code_image %}\n        <div class=\"qr_image_container\">\n        <h2>Generated QR Code</h2>\n            <img src=\"data:image/png;base64,{{ qr_code_image|safe }}\" alt=\"QR Code\">\n        </div>\n        {% endif %}\n    </div>\n\n<script>\n    // Get all section elements\n    const sections = {\n        text: document.getElementById('text-section'),\n        url: document.getElementById('url-section'),\n        vcard: document.getElementById('vcard-section'),\n        email: document.getElementById('email-section'),\n        sms: document.getElementById('sms-section'),\n        wifi: document.getElementById('wifi-section'),\n        geo: document.getElementById('geo-section'),\n        event: document.getElementById('event-section'),\n    };\n\n    // Function to hide all sections\n    function hideAllSections() {\n        for (const key in sections) {\n            sections[key].classList.add('hidden');\n        }\n    }\n    // Initial hide\n    hideAllSections();\n     // Show the text input section by default.\n    sections.text.classList.remove('hidden');\n\n    // Get the QR type radio buttons\n    const qrTypeRadios = document.querySelectorAll('input[name=\"qr_type\"]');\n\n    // Add event listener to each radio button\n    qrTypeRadios.forEach(radio => {\n        radio.addEventListener('change', function() {\n            hideAllSections(); // Hide all sections\n            sections[this.value].classList.remove('hidden'); // Show selected section\n        });\n    });\n\n</script>\n</body>\n</html>"}, {"file": "about.html", "path": "qr_generator/templates/qr_generator/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About QR Codes</title>\n    <style>\n        body { font-family: sans-serif; margin: 20px; }\n        .container { max-width: 800px; margin: 0 auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>About QR Codes</h1>\n        <p>QR codes (Quick Response codes) are two-dimensional barcodes that can store various types of data, such as text, URLs, contact information, and more.  They can be scanned by smartphones and other devices with QR code readers, providing a quick and easy way to access information.</p>\n\n        <h2>About this Generator</h2>\n        <p>This QR code generator allows you to create QR codes for various purposes, including:</p>\n        <ul>\n            <li>Plain Text</li>\n            <li>URLs</li>\n            <li>Contact Information (vCards)</li>\n            <li>Email Addresses</li>\n            <li>SMS Messages</li>\n            <li>WiFi Network Credentials</li>\n            <li>Geolocation Coordinates</li>\n\t    <li>Calendar Events</li>\n        </ul>\n        <p>You can customize the generated QR codes by selecting different error correction levels, download formats, colors, and sizes.</p>\n\n        <h2>Contact Information</h2>\n        <p>For support or inquiries, please contact [Your Name/Company] at [Your Email Address] or [Your Phone Number].</p>\n    </div>\n</body>\n</html>"}, {"file": "faq.html", "path": "qr_generator/templates/qr_generator/faq.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Frequently Asked Questions</title>\n        <style>\n        body { font-family: sans-serif; margin: 20px; }\n        .container { max-width: 800px; margin: 0 auto; }\n        .question { font-weight: bold; margin-top: 1em; }\n        .answer { margin-bottom: 1em; }\n    </style>\n</head>\n<body>\n<div class=\"container\">\n    <h1>Frequently Asked Questions</h1>\n\n    <div class=\"question\">\n        Q: What is a QR code?\n    </div>\n    <div class=\"answer\">\n        A: A QR code (Quick Response code) is a type of two-dimensional barcode that can be read by smartphones and other devices with QR code readers. It can store various types of data, such as text, URLs, and contact information.\n    </div>\n\n    <div class=\"question\">\n        Q: How do I scan a QR code?\n    </div>\n    <div class=\"answer\">\n        A: Most smartphones have built-in QR code scanners in their camera apps. Open the camera app and point it at the QR code.  A notification should appear, allowing you to open the linked content.\n    </div>\n\n <div class=\"question\">\n        Q:  What are error correction levels?\n    </div>\n    <div class=\"answer\">\n      A: Error correction levels allow the QR code to be scanned even if it's partially damaged or obscured.  Higher levels provide more error correction but result in a larger QR code. L (7%), M (15%), Q (25%), H (30%).\n    </div>\n\n    <div class=\"question\">\n        Q: What image formats can I download the QR code in?\n    </div>\n    <div class=\"answer\">\n        A: This generator supports downloading QR codes in PNG, SVG, and JPEG formats.\n    </div>\n\n    <div class=\"question\">\n        Q: Can I customize the colors of the QR code?\n    </div>\n    <div class=\"answer\">\n        A: Yes, you can customize both the foreground (the dark squares) and background colors of the QR code.\n    </div>\n</div>\n</body>\n</html>"}, {"file": "admin.py", "path": "qr_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n#from .models import GeneratedQRCode\n\n#admin.site.register(GeneratedQRCode)\n"}, {"file": "apps.py", "path": "qr_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_generator'\n"}, {"file": "__init__.py", "path": "qr_generator/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'your secret key' #replace \nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_generator', # Add the app\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'myproject.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'myproject.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "5": [{"file": "views.py", "path": "converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse, HttpResponse\nimport markdown\nfrom bs4 import BeautifulSoup\n\n\ndef homepage(request):\n    return render(request, 'converter/homepage.html')\n\n\ndef about(request):\n    return render(request, 'converter/about.html')\n\n\ndef help_faq(request):\n    return render(request, 'converter/help_faq.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        input_text = request.POST.get('input_text', '')\n        conversion_mode = request.POST.get('conversion_mode', 'md_to_html')  # Default to md_to_html\n\n        if conversion_mode == 'md_to_html':\n            try:\n                html = markdown.markdown(input_text)\n                return JsonResponse({'output': html, 'status': 'success'})\n            except Exception as e:\n                return JsonResponse({'error': str(e), 'status': 'error'})\n        elif conversion_mode == 'html_to_md':\n            try:\n                soup = BeautifulSoup(input_text, 'html.parser')\n                # Basic HTML to Markdown (consider a more robust library like html2text)\n                markdown_text = soup.get_text(separator='\\n')\n               \n                return JsonResponse({'output': markdown_text, 'status': 'success'})\n            except Exception as e:\n                return JsonResponse({'error': str(e), 'status': 'error'})\n\n    return JsonResponse({'error': 'Invalid request method', 'status': 'error'})\n\n\ndef download_file(request):\n    if request.method == 'POST':\n        content = request.POST.get('content', '')\n        file_type = request.POST.get('file_type', 'html') # html or md\n        filename = f\"converted_file.{file_type}\"\n\n        response = HttpResponse(content, content_type=('text/html' if file_type == 'html' else 'text/markdown')) # Set content type\n        response['Content-Disposition'] = f'attachment; filename=\"{filename}\"'\n        return response\n    return JsonResponse({'error': 'Invalid Request', 'status':'error'})\n\n"}, {"file": "urls.py", "path": "converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('about/', views.about, name='about'),\n    path('help/', views.help_faq, name='help_faq'),\n    path('convert/', views.convert, name='convert'),\n    path('download/', views.download_file, name='download_file')\n]\n"}, {"file": "models.py", "path": "converter/models.py", "code": "# No models needed for this simple converter\n"}, {"file": "forms.py", "path": "converter/forms.py", "code": "# No Forms needed for this simple converter\n"}, {"file": "homepage.html", "path": "converter/templates/converter/homepage.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown & HTML Converter</title>\n</head>\n<body>\n    <h1>Markdown & HTML Converter</h1>\n\n    <select id=\"conversion_mode\">\n        <option value=\"md_to_html\">Markdown to HTML</option>\n        <option value=\"html_to_md\">HTML to Markdown</option>\n    </select>\n\n    <textarea id=\"input_text\" placeholder=\"Enter Markdown or HTML here...\"></textarea>\n    <button id=\"convert_button\">Convert</button>\n     <button id=\"clear_button\">Clear</button>\n    <div id=\"output_area\"></div>\n   <div>\n         <button id=\"copy_button\">Copy to Clipboard</button>\n          <button id=\"download_button\">Download</button>\n         <select id=\"download_type\">\n           <option value=\"html\">HTML</option>\n           <option value=\"md\">Markdown</option>\n        </select>\n    </div>\n    <div>\n     <h2>Example Markdown</h2>\n     <pre>\n# Heading\n**bold text**\n*italic text*\n     </pre>\n    </div>\n     <div>\n     <h2>Example HTML</h2>\n     <pre>\n&lth1&gtHeading&lt/h1&gt\n&ltb&gtbold text&lt/b&gt\n&lti&gtitalic text&lt/i&gt\n     </pre>\n    </div>\n\n\n    <script>\n        const convertButton = document.getElementById('convert_button');\n        const inputTextArea = document.getElementById('input_text');\n        const outputArea = document.getElementById('output_area');\n        const conversionModeSelect = document.getElementById('conversion_mode');\n         const clearButton = document.getElementById('clear_button');\n        const copyButton = document.getElementById('copy_button');\n        const downloadButton = document.getElementById('download_button');\n        const downloadTypeSelect = document.getElementById('download_type');\n        let currentOutput = '';\n\n       \n\n        convertButton.addEventListener('click', () => {\n            const inputText = inputTextArea.value;\n            const conversionMode = conversionModeSelect.value;\n\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': getCookie('csrftoken')  // Fetch CSRF token\n                },\n                body: `input_text=${encodeURIComponent(inputText)}&conversion_mode=${conversionMode}`\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.status === 'success') {\n                    outputArea.innerHTML = `<pre>${escapeHtml(data.output)}</pre>`; // Display as preformatted text\n                     currentOutput = data.output\n                } else {\n                    outputArea.innerHTML = `<p>Error: ${data.error}</p>`;\n                }\n            });\n        });\n\n       clearButton.addEventListener('click', () =>{\n           inputTextArea.value = '';\n           outputArea.innerHTML = '';\n           currentOutput = '';\n       });\n       copyButton.addEventListener('click', () => {\n            navigator.clipboard.writeText(currentOutput);\n\n        });\n\n        downloadButton.addEventListener('click', () =>{\n             const fileType = downloadTypeSelect.value;\n\n              fetch('/download/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': getCookie('csrftoken')\n                },\n                body: `content=${encodeURIComponent(currentOutput)}&file_type=${fileType}`\n            })\n            .then(response => response.blob())\n                .then(blob => {\n                    const url = window.URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.style.display = 'none';\n                    a.href = url;\n                    a.download = `converted_file.${fileType}`;\n                    document.body.appendChild(a);\n                    a.click();\n                    window.URL.revokeObjectURL(url);\n                });\n        });\n\n\n\n        // Real-time conversion (optional, can be resource-intensive)\n        inputTextArea.addEventListener('input', () => {\n            if (conversionModeSelect.value === 'md_to_html') { // Only for md_to_html for performance\n               convertButton.click(); // Trigger conversion on input change\n            }\n\n        });\n\n         // Function to escape HTML entities\n         function escapeHtml(unsafe) {\n            return unsafe\n                .replace(/&/g, \"&amp;\")\n                .replace(/</g, \"&lt;\")\n                .replace(/>/g, \"&gt;\")\n                .replace(/\"/g, \"&quot;\")\n                .replace(/'/g, \"&#039;\");\n        }\n\n\n        // Helper function to get CSRF token from cookies\n        function getCookie(name) {\n            let cookieValue = null;\n            if (document.cookie && document.cookie !== '') {\n                const cookies = document.cookie.split(';');\n                for (let i = 0; i < cookies.length; i++) {\n                    const cookie = cookies[i].trim();\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                        break;\n                    }\n                }\n            }\n            return cookieValue;\n        }\n    </script>\n</body>\n</html>\n"}, {"file": "about.html", "path": "converter/templates/converter/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About the Converter</h1>\n    <p>This tool is designed to convert between Markdown and HTML.</p>\n    <p>Version: 1.0</p>\n    <p>Developer: [Your Name/Company Name]</p>\n    <p>Contact: [Your Email/Contact Info]</p>\n</body>\n</html>"}, {"file": "help_faq.html", "path": "converter/templates/converter/help_faq.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Help & FAQ</title>\n</head>\n<body>\n    <h1>Help & FAQ</h1>\n\n    <h2>Frequently Asked Questions</h2>\n    <dl>\n        <dt>How do I convert Markdown to HTML?</dt>\n        <dd>Select \"Markdown to HTML\", paste your Markdown, and click \"Convert\".</dd>\n\n        <dt>How do I convert HTML to Markdown</dt>\n        <dd>Select \"HTML to Markdown\", paste your HTML, and click \"Convert\".</dd>\n    </dl>\n     <h2>Troubleshooting</h2>\n     <dl>\n      <dt>Conversion Error</dt>\n      <dd>Make sure that your input is valid</dd>\n     </dl>\n    <h2>Markdown Syntax Guide</h2>\n    <p>Refer to a Markdown guide like <a href=\"https://www.markdownguide.org/basic-syntax/\" target=\"_blank\">this one</a>.</p>\n      <h2>Contact Support</h2>\n    <p>If you have any questions or need help, please feel free to contact us at [Your Email/Contact Info] </p>\n</body>\n</html>"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),  # Include your app's URLs\n]\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "# settings.py\n# ... (other settings) ...\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',  # Add your app here\n]\n\n# ... (other settings) ...\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# ... (other settings) ...\n\nSTATIC_URL = '/static/'\n"}], "6": "```json\n[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"tasks/models.py\",\n    \"code\": \"from django.db import models\\\\nfrom django.contrib.auth.models import User\\\\n\\\\nclass Task(models.Model):\\\\n    PRIORITY_CHOICES = (\\\\n        ('H', 'High'),\\\\n        ('M', 'Medium'),\\\\n        ('L', 'Low'),\\\\n    )\\\\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\\\\n    title = models.CharField(max_length=200)\\\\n    description = models.TextField(blank=True, null=True)\\\\n    due_date = models.DateTimeField(blank=True, null=True)\\\\n    priority = models.CharField(max_length=1, choices=PRIORITY_CHOICES, default='M')\\\\n    completed = models.BooleanField(default=False)\\\\n    created_at = models.DateTimeField(auto_now_add=True)\\\\n    updated_at = models.DateTimeField(auto_now=True)\\\\n\\\\n    def __str__(self):\\\\n        return self.title\\\\n\\\\nclass Subtask(models.Model):\\\\n    task = models.ForeignKey(Task, on_delete=models.CASCADE, related_name='subtasks')\\\\n    title = models.CharField(max_length=200)\\\\n    completed = models.BooleanField(default=False)\\\\n\\\\n    def __str__(self):\\\\n        return self.title\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"tasks/views.py\",\n    \"code\": \"from django.shortcuts import render, get_object_or_404, redirect\\\\nfrom django.contrib.auth.decorators import login_required\\\\nfrom .models import Task, Subtask\\\\nfrom .forms import TaskForm, SubtaskForm\\\\nfrom django.http import JsonResponse, HttpResponse\\\\nfrom django.core.serializers import serialize\\\\nimport json\\\\nfrom datetime import datetime, date\\\\nfrom django.db.models import Q, Count\\\\n\\\\n\\\\n@login_required\\\\ndef task_list(request):\\\\n    #Main Task View\\\\n    tasks = Task.objects.filter(user=request.user)\\\\n    \\\\n    # Filtering\\\\n    status_filter = request.GET.get('status')\\\\n    priority_filter = request.GET.get('priority')\\\\n    due_date_filter = request.GET.get('due_date')\\\\n    search_query = request.GET.get('search')\\\\n    \\\\n\\\\n    if status_filter:\\\\n        if status_filter == 'completed':\\\\n            tasks = tasks.filter(completed=True)\\\\n        elif status_filter == 'incomplete':\\\\n            tasks = tasks.filter(completed=False)\\\\n\\\\n    if priority_filter:\\\\n        tasks = tasks.filter(priority=priority_filter)\\\\n    \\\\n    if due_date_filter:\\\\n      try:\\\\n        if due_date_filter == 'today':\\\\n          today = date.today()\\\\n          tasks = tasks.filter(due_date__date=today)\\\\n        elif due_date_filter == 'this_week':\\\\n             today = date.today()\\\\n             start_of_week = today - timedelta(days=today.weekday())\\\\n             end_of_week = start_of_week + timedelta(days=6)\\\\n             tasks = tasks.filter(due_date__date__range=[start_of_week, end_of_week])\\\\n        else:\\\\n            #Assuming YYYY-MM-DD format.\\\\n             due_date = datetime.strptime(due_date_filter, '%Y-%m-%d').date()\\\\n             tasks = tasks.filter(due_date__date=due_date)\\\\n      except (ValueError, TypeError):\\\\n        pass\\\\n\\\\n    if search_query:\\\\n        tasks = tasks.filter(Q(title__icontains=search_query) | Q(description__icontains=search_query))\\\\n\\\\n    # Sorting\\\\n    sort_by = request.GET.get('sort')\\\\n    if sort_by == 'due_date':\\\\n        tasks = tasks.order_by('due_date')\\\\n    elif sort_by == 'priority':\\\\n        tasks = tasks.order_by('priority')\\\\n    elif sort_by == 'created_at':\\\\n        tasks = tasks.order_by('created_at')\\\\n    elif sort_by == 'title':\\\\n        tasks = tasks.order_by('title')\\\\n\\\\n    return render(request, 'tasks/task_list.html', {'tasks': tasks})\\\\n\\\\n\\\\n@login_required\\\\ndef task_detail(request, pk):\\\\n    # Task Detail View\\\\n    task = get_object_or_404(Task, pk=pk, user=request.user)\\\\n    subtasks = task.subtasks.all()\\\\n    return render(request, 'tasks/task_detail.html', {'task': task, 'subtasks': subtasks})\\\\n\\\\n@login_required\\\\ndef task_create(request):\\\\n    if request.method == 'POST':\\\\n        form = TaskForm(request.POST)\\\\n        if form.is_valid():\\\\n            task = form.save(commit=False)\\\\n            task.user = request.user\\\\n            task.save()\\\\n            return redirect('task_list')\\\\n    else:\\\\n        form = TaskForm()\\\\n    return render(request, 'tasks/task_form.html', {'form': form, 'action':'Create'})\\\\n\\\\n@login_required\\\\ndef task_edit(request, pk):\\\\n    task = get_object_or_404(Task, pk=pk, user=request.user)\\\\n    if request.method == 'POST':\\\\n        form = TaskForm(request.POST, instance=task)\\\\n        if form.is_valid():\\\\n            form.save()\\\\n            return redirect('task_list')\\\\n    else:\\\\n        form = TaskForm(instance=task)\\\\n    return render(request, 'tasks/task_form.html', {'form': form, 'action':'Edit'})\\\\n\\\\n@login_required\\\\ndef task_delete(request, pk):\\\\n    task = get_object_or_404(Task, pk=pk, user=request.user)\\\\n    if request.method == 'POST':\\\\n        task.delete()\\\\n        return redirect('task_list')\\\\n    return render(request, 'tasks/task_confirm_delete.html', {'task': task})\\\\n\\\\n@login_required\\\\ndef task_mark_complete(request, pk):\\\\n   task = get_object_or_404(Task, pk=pk, user=request.user)\\\\n   task.completed = True\\\\n   task.save()\\\\n   return redirect('task_list')\\\\n\\\\n@login_required\\\\ndef task_mark_incomplete(request, pk):\\\\n   task = get_object_or_404(Task, pk=pk, user=request.user)\\\\n   task.completed = False\\\\n   task.save()\\\\n   return redirect('task_list')\\\\n\\\\n@login_required\\\\ndef subtask_create(request, task_id):\\\\n    task = get_object_or_404(Task, pk=task_id, user=request.user)\\\\n    if request.method == 'POST':\\\\n        form = SubtaskForm(request.POST)\\\\n        if form.is_valid():\\\\n            subtask = form.save(commit=False)\\\\n            subtask.task = task\\\\n            subtask.save()\\\\n            return redirect('task_detail', pk=task_id)\\\\n    else:\\\\n        form = SubtaskForm()\\\\n    return render(request, 'tasks/subtask_form.html', {'form': form, 'task':task, 'action':'Create'})\\\\n\\\\n\\\\n@login_required\\\\ndef subtask_edit(request, task_id, subtask_id):\\\\n    task = get_object_or_404(Task, pk=task_id, user=request.user)\\\\n    subtask = get_object_or_404(Subtask, pk=subtask_id, task=task)\\\\n    if request.method == 'POST':\\\\n        form = SubtaskForm(request.POST, instance=subtask)\\\\n        if form.is_valid():\\\\n          form.save()\\\\n          return redirect('task_detail', pk=task_id)\\\\n    else:\\\\n        form = SubtaskForm(instance=subtask)\\\\n    return render(request, 'tasks/subtask_form.html', {'form': form, 'task':task, 'action': 'Edit'})\\\\n\\\\n@login_required\\\\ndef subtask_delete(request, task_id, subtask_id):\\\\n    task = get_object_or_404(Task, pk=task_id, user=request.user)\\\\n    subtask = get_object_or_404(Subtask, pk=subtask_id, task=task)\\\\n\\\\n    if request.method == 'POST':\\\\n      subtask.delete()\\\\n      return redirect('task_detail', pk=task_id)\\\\n    return render(request, 'tasks/subtask_confirm_delete.html', {'subtask':subtask, 'task':task})\\\\n\\\\n\\\\n@login_required\\\\ndef subtask_mark_complete(request, task_id, subtask_id):\\\\n    task = get_object_or_404(Task, pk=task_id, user=request.user)\\\\n    subtask = get_object_or_404(Subtask, pk=subtask_id, task=task)\\\\n    subtask.completed = True\\\\n    subtask.save()\\\\n    return redirect('task_detail', pk=task_id)\\\\n\\\\n@login_required\\\\ndef subtask_mark_incomplete(request, task_id, subtask_id):\\\\n    task = get_object_or_404(Task, pk=task_id, user=request.user)\\\\n    subtask = get_object_or_404(Subtask, pk=subtask_id, task=task)\\\\n    subtask.completed = False\\\\n    subtask.save()\\\\n    return redirect('task_detail', pk=task_id)\\\\n\\\\n\\\\n@login_required\\\\ndef analytics_view(request):\\\\n    # Analytics/Chart View.\\\\n    tasks = Task.objects.filter(user=request.user)\\\\n\\\\n    # Date Range filter.\\\\n    start_date_str = request.GET.get('start_date')\\\\n    end_date_str = request.GET.get('end_date')\\\\n\\\\n    try:\\\\n        if start_date_str:\\\\n          start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date()\\\\n          tasks = tasks.filter(created_at__date__gte=start_date)\\\\n        if end_date_str:\\\\n          end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date()\\\\n          tasks = tasks.filter(created_at__date__lte=end_date)\\\\n    except (ValueError, TypeError):\\\\n        pass\\\\n\\\\n    completed_count = tasks.filter(completed=True).count()\\\\n    incomplete_count = tasks.filter(completed=False).count()\\\\n    total_count = tasks.count()\\\\n\\\\n    priority_counts = tasks.values('priority').annotate(count=Count('priority'))\\\\n\\\\n    # Prepare data for completion trend chart.  Example: daily.\\\\n    # Get tasks grouped by creation date\\\\n    tasks_by_date = tasks.extra({'date_created' : \\\\\\\\\"date(created_at)\\\\\\\\\"}).values('date_created').annotate(created_count=Count('id')).order_by('date_created')\\\\n\\\\n    # Then, for each date, calculate completed tasks.\\\\n    completion_trend_data = []\\\\n    for item in tasks_by_date:\\\\n      completed_on_date = Task.objects.filter(user=request.user, created_at__date=item['date_created'], completed=True).count()\\\\n\\\\n      try:\\\\n        completion_rate = (completed_on_date / item['created_count']) * 100 if item['created_count'] >0 else 0\\\\n      except ZeroDivisionError:\\\\n        completion_rate = 0\\\\n\\\\n      completion_trend_data.append({\\\\n          'date': item['date_created'].strftime('%Y-%m-%d'), #format for chart.\\\\n          'created_count': item['created_count'],\\\\n          'completed_count': completed_on_date, # Number of tasks completed on this day\\\\n          'completion_rate': completion_rate\\\\n      })\\\\n\\\\n\\\\n    context = {\\\\n        'completed_count': completed_count,\\\\n        'incomplete_count': incomplete_count,\\\\n        'total_count' : total_count,\\\\n        'priority_counts': list(priority_counts),  # Convert QuerySet to list for JSON\\\\n        'completion_trend_data': completion_trend_data\\\\n    }\\\\n    return render(request, 'tasks/analytics.html', context)\\\\n\\\\n@login_required\\\\ndef settings_view(request):\\\\n  #Setting Page\\\\n  if request.method == 'POST':\\\\n      #process setting update.\\\\n      pass\\\\n  return render(request, 'tasks/settings.html')\\\\n\\\\n@login_required\\\\ndef export_chart_data(request):\\\\n    #Example of exporting the completion trend data.\\\\n    tasks = Task.objects.filter(user=request.user)\\\\n\\\\n    tasks_by_date = tasks.extra({'date_created' : \\\\\\\\\"date(created_at)\\\\\\\\\"}).values('date_created').annotate(created_count=Count('id')).order_by('date_created')\\\\n    completion_trend_data = []\\\\n    for item in tasks_by_date:\\\\n        completed_on_date = tasks.filter(created_at__date=item['date_created'], completed=True).count()\\\\n        completion_trend_data.append({\\\\n          'date': item['date_created'].strftime('%Y-%m-%d'),\\\\n          'created_count': item['created_count'],\\\\n          'completed_count': completed_on_date\\\\n      })\\\\n\\\\n    # Convert the data to JSON\\\\n    data_json = json.dumps(completion_trend_data)\\\\n\\\\n    # Create the HttpResponse object with the appropriate header\\\\n    response = HttpResponse(data_json, content_type='application/json')\\\\n    response['Content-Disposition'] = 'attachment; filename=\\\\\"completion_data.json\\\\\"'\\\\n    return response\"\n  },\n  {\n    \"file\": \"forms.py\",\n    \"path\": \"tasks/forms.py\",\n    \"code\": \"from django import forms\\\\nfrom .models import Task, Subtask\\\\n\\\\nclass TaskForm(forms.ModelForm):\\\\n    class Meta:\\\\n        model = Task\\\\n        fields = ['title', 'description', 'due_date', 'priority']\\\\n        widgets = {\\\\n            'due_date': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\\\\n        }\\\\n\\\\n\\\\nclass SubtaskForm(forms.ModelForm):\\\\n    class Meta:\\\\n        model = Subtask\\\\n        fields = ['title']\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"tasks/urls.py\",\n    \"code\": \"from django.urls import path\\\\nfrom . import views\\\\n\\\\nurlpatterns = [\\\\n    path('', views.task_list, name='task_list'),\\\\n    path('task/<int:pk>/', views.task_detail, name='task_detail'),\\\\n    path('task/create/', views.task_create, name='task_create'),\\\\n    path('task/<int:pk>/edit/', views.task_edit, name='task_edit'),\\\\n    path('task/<int:pk>/delete/', views.task_delete, name='task_delete'),\\\\n    path('task/<int:pk>/complete', views.task_mark_complete, name='task_mark_complete'),\\\\n    path('task/<int:pk>/incomplete', views.task_mark_incomplete, name='task_mark_incomplete'),\\\\n\\\\n    path('task/<int:task_id>/subtask/create/', views.subtask_create, name='subtask_create'),\\\\n    path('task/<int:task_id>/subtask/<int:subtask_id>/edit/', views.subtask_edit, name='subtask_edit'),\\\\n    path('task/<int:task_id>/subtask/<int:subtask_id>/delete/', views.subtask_delete, name='subtask_delete'),\\\\n     path('task/<int:task_id>/subtask/<int:subtask_id>/complete/', views.subtask_mark_complete, name='subtask_mark_complete'),\\\\n    path('task/<int:task_id>/subtask/<int:subtask_id>/incomplete/', views.subtask_mark_incomplete, name='subtask_mark_incomplete'),\\\\n    path('analytics/', views.analytics_view, name='analytics_view'),\\\\n     path('settings/', views.settings_view, name='settings_view'),\\\\n    path('export_chart_data/', views.export_chart_data, name='export_chart_data'),\\\\n]\"\n  },\n    {\n    \"file\": \"admin.py\",\n    \"path\": \"tasks/admin.py\",\n    \"code\": \"from django.contrib import admin\\\\nfrom .models import Task, Subtask\\\\n\\\\nadmin.site.register(Task)\\\\nadmin.site.register(Subtask)\"\n  },\n  {\n    \"file\": \"task_list.html\",\n    \"path\": \"tasks/templates/tasks/task_list.html\",\n    \"code\": \"{% extends 'base.html' %}\\\\\\\\n\\\\\\\\n{% block content %}\\\\\\\\n  <h2>Task List</h2>\\\\\\\\n <a href=\\\\\"{% url 'task_create' %}\\\\\">Add Task</a>\\\\\\\\n  \\\\\\\\n  {# Filtering Form #}\\\\\\\\n<form method=\\\\\"get\\\\\" action=\\\\\"{% url 'task_list' %}\\\\\">\\\\\\\\n    <label for=\\\\\"status\\\\\">Status:</label>\\\\\\\\n    <select name=\\\\\"status\\\\\" id=\\\\\"status\\\\\">\\\\\\\\n        <option value=\\\\\"\\\\\">All</option>\\\\\\\\n        <option value=\\\\\"completed\\\\\">Completed</option>\\\\\\\\n        <option value=\\\\\"incomplete\\\\\">Incomplete</option>\\\\\\\\n    </select>\\\\\\\\n\\\\\\\\n    <label for=\\\\\"priority\\\\\">Priority:</label>\\\\\\\\n    <select name=\\\\\"priority\\\\\" id=\\\\\"priority\\\\\">\\\\\\\\n        <option value=\\\\\"\\\\\">All</option>\\\\\\\\n        <option value=\\\\\"H\\\\\">High</option>\\\\\\\\n        <option value=\\\\\"M\\\\\">Medium</option>\\\\\\\\n        <option value=\\\\\"L\\\\\">Low</option>\\\\\\\\n    </select>\\\\\\\\n\\\\\\\\n     <label for=\\\\\"due_date\\\\\">Due Date:</label>\\\\\\\\n        <input type=\\\\\"date\\\\\" name=\\\\\"due_date\\\\\" id=\\\\\"due_date\\\\\">\\\\\\\\n\\\\\\\\n    <input type=\\\\\"text\\\\\" name=\\\\\"search\\\\\" placeholder=\\\\\"Search...\\\\\">\\\\\\\\n    <button type=\\\\\"submit\\\\\">Filter</button>\\\\\\\\n</form>\\\\\\\\n\\\\\\\\n{# Sorting Links #}\\\\\\\\n<div>\\\\\\\\n    Sort by:\\\\\\\\n    <a href=\\\\\"{% url 'task_list' %}?sort=due_date\\\\\">Due Date</a> |\\\\\\\\n    <a href=\\\\\"{% url 'task_list' %}?sort=priority\\\\\">Priority</a> |\\\\\\\\n    <a href=\\\\\"{% url 'task_list' %}?sort=created_at\\\\\">Creation Date</a>|\\\\\\\\n     <a href=\\\\\"{% url 'task_list' %}?sort=title\\\\\">Title</a>\\\\\\\\n</div>\\\\\\\\n\\\\\\\\n  <ul>\\\\\\\\n    {% for task in tasks %}\\\\\\\\n      <li>\\\\\\\\n        {% if task.completed %}\\\\\\\\n          <del><a href=\\\\\"{% url 'task_detail' pk=task.pk %}\\\\\">{{ task.title }}</a></del>\\\\\\\\n        {% else %}\\\\\\\\n          <a href=\\\\\"{% url 'task_detail' pk=task.pk %}\\\\\">{{ task.title }}</a>\\\\\\\\n        {% endif %}\\\\\\\\n        - Priority: {{ task.get_priority_display }} \\\\\\\\n        - Due: {{ task.due_date|date:'Y-m-d H:i' }} \\\\\\\\n        -  <a href=\\\\\"{% url 'task_edit' pk=task.pk %}\\\\\">Edit</a>\\\\\\\\n        - <a href=\\\\\"{% url 'task_delete' pk=task.pk %}\\\\\">Delete</a>\\\\\\\\n\\\\\\\\n        {% if task.completed %}\\\\\\\\n           - <a href=\\\\\"{% url 'task_mark_incomplete' pk=task.pk %}\\\\\">Mark Incomplete</a>\\\\\\\\n        {% else %} \\\\\\\\n          - <a href=\\\\\"{% url 'task_mark_complete' pk=task.pk %}\\\\\">Mark Complete</a>\\\\\\\\n        {% endif %}\\\\\\\\n      </li>\\\\\\\\n    {% empty %}\\\\\\\\n      <li>No tasks found.</li>\\\\\\\\n    {% endfor %}\\\\\\\\n  </ul>\\\\\\\\n{% endblock %}\"\n  },\n  {\n    \"file\": \"task_detail.html\",\n    \"path\": \"tasks/templates/tasks/task_detail.html\",\n    \"code\": \"{% extends 'base.html' %}\\\\\\\\n\\\\\\\\n{% block content %}\\\\\\\\n  <h2>{{ task.title }}</h2>\\\\\\\\n  <p>Description: {{ task.description|default:\\\\\"No description\\\\\" }}</p>\\\\\\\\n  <p>Priority: {{ task.get_priority_display }}</p>\\\\\\\\n  <p>Due Date: {{ task.due_date|date:'Y-m-d H:i' }}</p>\\\\\\\\n  <p>Status: {% if task.completed %}Completed{% else %}Incomplete{% endif %}</p>\\\\\\\\n\\\\\\\\n   <a href=\\\\\"{% url 'task_edit' pk=task.pk %}\\\\\">Edit Task</a>\\\\\\\\n\\\\\\\\n  <h3>Subtasks</h3>\\\\\\\\n  <a href=\\\\\"{% url 'subtask_create' task_id=task.pk %}\\\\\">Add Subtask</a>\\\\\\\\n  <ul>\\\\\\\\n      {% for subtask in subtasks %}\\\\\\\\n          <li>\\\\\\\\n              {% if subtask.completed %}\\\\\\\\n                  <del>{{ subtask.title }}</del>\\\\\\\\n              {% else %}\\\\\\\\n                  {{ subtask.title }}\\\\\\\\n              {% endif %}\\\\\\\\n                - <a href=\\\\\"{% url 'subtask_edit' task_id=task.pk subtask_id=subtask.pk %}\\\\\">Edit</a>\\\\\\\\n                - <a href=\\\\\"{% url 'subtask_delete' task_id=task.pk subtask_id=subtask.pk%}\\\\\">Delete</a>\\\\\\\\n\\\\\\\\n               {% if subtask.completed %}\\\\\\\\n                  - <a href=\\\\\"{% url 'subtask_mark_incomplete' task_id=task.pk subtask_id=subtask.pk %}\\\\\">Mark Incomplete</a>\\\\\\\\n              {% else %}\\\\\\\\n                  - <a href=\\\\\"{% url 'subtask_mark_complete' task_id=task.pk subtask_id=subtask.pk %}\\\\\">Mark Complete</a>\\\\\\\\n              {% endif %}\\\\\\\\n          </li>\\\\\\\\n      {% empty %}\\\\\\\\n          <li>No subtasks yet.</li>\\\\\\\\n      {% endfor %}\\\\\\\\n  </ul>\\\\\\\\n\\\\\\\\n  <a href=\\\\\"{% url 'task_list' %}\\\\\">Back to Task List</a>\\\\\\\\n{% endblock %}\"\n  },\n  {\n    \"file\": \"task_form.html\",\n    \"path\": \"tasks/templates/tasks/task_form.html\",\n    \"code\": \"{% extends 'base.html' %}\\\\\\\\n\\\\\\\\n{% block content %}\\\\\\\\n  <h2>{{action}} Task</h2>\\\\\\\\n  <form method=\\\\\"post\\\\\">\\\\\\\\n    {% csrf_token %}\\\\\\\\n    {{ form.as_p %}}\\\\\\\\n    <button type=\\\\\"submit\\\\\">Save</button>\\\\\\\\n  </form>\\\\\\\\n{% endblock %}\"\n  },\n    {\n    \"file\": \"subtask_form.html\",\n    \"path\": \"tasks/templates/tasks/subtask_form.html\",\n    \"code\": \"{% extends 'base.html' %}\\\\\\\\n\\\\\\\\n{% block content %}\\\\\\\\n  <h2>{{ action }} Subtask for {{task.title}}</h2>\\\\\\\\n  <form method=\\\\\"post\\\\\">\\\\\\\\n    {% csrf_token %}\\\\\\\\n    {{ form.as_p %}}\\\\\\\\n    <button type=\\\\\"submit\\\\\">Save</button>\\\\\\\\n  </form>\\\\\\\\n{% endblock %}\"\n  },\n  {\n      \"file\": \"task_confirm_delete.html\",\n      \"path\": \"tasks/templates/tasks/task_confirm_delete.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\\\\\n\\\\\\\\n{% block content %}\\\\\\\\n  <h2>Confirm Delete</h2>\\\\\\\\n  <p>Are you sure you want to delete the task \\\\\"{{ task.title }}\\\\\"?</p>\\\\\\\\n  <form method=\\\\\"post\\\\\">\\\\\\\\n    {% csrf_token %}\\\\\\\\n    <button type=\\\\\"submit\\\\\">Delete</button>\\\\\\\\n    <a href=\\\\\"{% url 'task_list' %}\\\\\">Cancel</a>\\\\\\\\n  </form>\\\\\\\\n{% endblock %}\"\n  },\n   {\n      \"file\": \"subtask_confirm_delete.html\",\n      \"path\": \"tasks/templates/tasks/subtask_confirm_delete.html\",\n      \"code\": \"{% extends 'base.html' %}\\\\\\\\n\\\\\\\\n{% block content %}\\\\\\\\n  <h2>Confirm Delete</h2>\\\\\\\\n  <p>Are you sure you want to delete the subtask \\\\\"{{ subtask.title }}\\\\\" from task \\\\\"{{task.title}}\\\\\"?</p>\\\\\\\\n  <form method=\\\\\"post\\\\\">\\\\\\\\n    {% csrf_token %}\\\\\\\\n    <button type=\\\\\"submit\\\\\">Delete</button>\\\\\\\\n    <a href=\\\\\"{% url 'task_detail' pk=task.pk %}\\\\\">Cancel</a>\\\\\\\\n  </form>\\\\\\\\n{% endblock %}\"\n  },\n  {\n    \"file\": \"analytics.html\",\n    \"path\": \"tasks/templates/tasks/analytics.html\",\n    \"code\": \"{% extends 'base.html' %}\\\\\\\\n\\\\\\\\n{% block content %}\\\\\\\\n  <h2>Analytics</h2>\\\\\\\\n\\\\\\\\n  <form method=\\\\\"get\\\\\" action=\\\\\"{% url 'analytics_view' %}\\\\\">\\\\\\\\n    <label for=\\\\\"start_date\\\\\">Start Date:</label>\\\\\\\\n    <input type=\\\\\"date\\\\\" name=\\\\\"start_date\\\\\" id=\\\\\"start_date\\\\\">\\\\\\\\n    <label for=\\\\\"end_date\\\\\">End Date:</label>\\\\\\\\n    <input type=\\\\\"date\\\\\" name=\\\\\"end_date\\\\\" id=\\\\\"end_date\\\\\">\\\\\\\\n    <button type=\\\\\"submit\\\\\">Filter</button>\\\\\\\\n  </form>\\\\\\\\n\\\\\\\\n <a href=\\\\\"{% url 'export_chart_data' %}\\\\\">Export Chart Data</a>\\\\\\\\n\\\\\\\\n  <h3>Completion Rate</h3>\\\\\\\\n  <p>Completed: {{ completed_count }}</p>\\\\\\\\n  <p>Incomplete: {{ incomplete_count }}</p>\\\\\\\\n  <p>Total: {{ total_count }}</p>\\\\\\\\n\\\\\\\\n  <h3>Tasks by Priority</h3>\\\\\\\\n  <ul>\\\\\\\\n    {% for priority in priority_counts %}\\\\\\\\n      <li>{{ priority.priority }}: {{ priority.count }}</li>\\\\\\\\n    {% endfor %}\\\\\\\\n  </ul>\\\\\\\\n\\\\\\\\n   <h3>Completion Trend</h3>\\\\\\\\n    <div id=\\\\\"completionChart\\\\\"></div>\\\\\\\\n\\\\\\\\n\\\\\\\\n  <script src=\\\\\"https://cdn.jsdelivr.net/npm/chart.js\\\\\"></script>\\\\\\\\n\\\\\\\\n <script>\\\\\\\\n        const ctx = document.getElementById('completionChart').getContext('2d');\\\\\\\\n        const completionTrendData = {{ completion_trend_data|safe }};\\\\\\\\n\\\\\\\\n        const labels = completionTrendData.map(item => item.date);\\\\\\\\n        const createdCounts = completionTrendData.map(item => item.created_count);\\\\\\\\n        const completedCounts = completionTrendData.map(item => item.completed_count);\\\\\\\\n        const completionRates = completionTrendData.map(item => item.completion_rate);\\\\\\\\n\\\\\\\\n        const chart = new Chart(ctx, {\\\\\\\\n            type: 'line',\\\\\\\\n            data: {\\\\\\\\n                labels: labels,\\\\\\\\n                datasets: [\\\\\\\\n                    {\\\\\\\\n                        label: 'Created Tasks',\\\\\\\\n                        data: createdCounts,\\\\\\\\n                        borderColor: 'blue',\\\\\\\\n                        fill: false\\\\\\\\n                    },\\\\\\\\n                  {\\\\\\\\n                        label: 'Completed Tasks',\\\\\\\\n                        data: completedCounts,\\\\\\\\n                        borderColor: 'green',\\\\\\\\n                        fill: false\\\\\\\\n                    },\\\\\\\\n                     {\\\\\\\\n                        label: 'Completion Rate (%)',\\\\\\\\n                        data: completionRates,\\\\\\\\n                        borderColor: 'red',\\\\\\\\n                        fill: false\\\\\\\\n                    }\\\\\\\\n                ]\\\\\\\\n            },\\\\\\\\n            options: {\\\\\\\\n                scales: {\\\\\\\\n                    y: {\\\\\\\\n                        beginAtZero: true\\\\\\\\n                    }\\\\\\\\n                }\\\\\\\\n            }\\\\\\\\n        });\\\\\\\\n    </script>\\\\\\\\n{% endblock %}\"\n  },\n  {\n    \"file\": \"settings.html\",\n    \"path\": \"tasks/templates/tasks/settings.html\",\n    \"code\": \"{% extends 'base.html' %}\\\\\\\\n\\\\\\\\n{% block content %}\\\\\\\\n <h2>Settings</h2>\\\\\\\\n\\\\\\\\n{# Example: Theme Selection #}\\\\\\\\n <form method=\\\\\"post\\\\\">\\\\\\\\n    {% csrf_token %}\\\\\\\\n    <label for=\\\\\"theme\\\\\">Theme:</label>\\\\\\\\n    <select name=\\\\\"theme\\\\\" id=\\\\\"theme\\\\\">\\\\\\\\n      <option value=\\\\\"light\\\\\">Light</option>\\\\\\\\n      <option value=\\\\\"dark\\\\\">Dark</option>\\\\\\\\n    </select>\\\\\\\\n    <button type=\\\\\"submit\\\\\">Save</button>\\\\\\\\n </form>\\\\\\\\n\\\\\\\\n\\\\\\\\n\\\\\\\\n{% endblock %}\"\n  },\n  {\n    \"file\": \"base.html\",\n    \"path\": \"tasks/templates/base.html\",\n    \"code\": \"<!DOCTYPE html>\\\\\\\\n<html>\\\\\\\\n<head>\\\\\\\\n  <title>Task Manager</title>\\\\\\\\n</head>\\\\\\\\n<body>\\\\\\\\n  <header>\\\\\\\\n    <h1>Task Manager</h1>\\\\\\\\n     <nav>\\\\\\\\n            <ul>\\\\\\\\n                <li><a href=\\\\\"{% url 'task_list' %}\\\\\">Task List</a></li>\\\\\\\\n                <li><a href=\\\\\"{% url 'analytics_view' %}\\\\\">Analytics</a></li>\\\\\\\\n                 <li><a href=\\\\\"{% url 'settings_view' %}\\\\\">Settings</a></li>\\\\\\\\n            </ul>\\\\\\\\n        </nav>\\\\\\\\n  </header>\\\\\\\\n  <main>\\\\\\\\n    {% block content %}{% endblock %}\\\\\\\\n  </main>\\\\\\\\n  <footer>\\\\\\\\n    <p>&copy; 2023 Task Manager</p>\\\\\\\\n  </footer>\\\\\\\\n</body>\\\\\\\\n</html>\"\n  }\n]\n```\n", "7": "```json\n[\n    {\n        \"file\": \"models.py\",\n        \"path\": \"budget_app/models.py\",\n        \"code\":\n            \"\"\"\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom django.core.validators import MinValueValidator\nfrom django.utils.timezone import now\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='categories', null=True, blank=True) # Allow categories to be user-specific, or null for default categories\n\n    def __str__(self):\n        return self.name\n\nclass Budget(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='budgets')\n    category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name='budgets')\n    amount = models.DecimalField(max_digits=19, decimal_places=2, validators=[MinValueValidator(0)])\n    start_date = models.DateField()\n    end_date = models.DateField()\n    rollover = models.BooleanField(default=False)\n\n    def __str__(self):\n        return f\"{self.category.name} Budget ({self.start_date} - {self.end_date})\"\n\nclass Transaction(models.Model):\n    TRANSACTION_TYPES = [\n        ('income', 'Income'),\n        ('expense', 'Expense'),\n    ]\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='transactions')\n    amount = models.DecimalField(max_digits=19, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True, related_name='transactions')\n    date = models.DateField(default=now)\n    description = models.CharField(max_length=255, blank=True)\n    transaction_type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)\n\n    def __str__(self):\n        return f\"{self.transaction_type.capitalize()}: {self.amount} ({self.date})\"\n    \n    class Meta:\n        ordering = ['-date']\n\nclass UserProfile(models.Model):  # Extend User model for extra settings\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    currency = models.CharField(max_length=3, default='USD')\n    date_format = models.CharField(max_length=20, default='%Y-%m-%d')  # Store format string\n    # Add other settings as needed\n    def __str__(self):\n      return f\"{self.user.username}'s Profile\"\n\nclass Report(models.Model):\n    #Placeholder for a more advanced report model (optional, could start simple with views)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    report_type = models.CharField(max_length=50) # e.g., 'spending', 'income', 'net_worth'\n    start_date = models.DateField()\n    end_date = models.DateField()\n    # Could store serialized JSON data for custom report configurations.\n    parameters = models.JSONField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n\"\"\"\n    },\n    {\n        \"file\": \"forms.py\",\n        \"path\": \"budget_app/forms.py\",\n        \"code\":\n            \"\"\"\nfrom django import forms\nfrom .models import Transaction, Budget, Category, UserProfile\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm, PasswordChangeForm\nfrom django.contrib.auth.models import User\n\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['amount', 'category', 'date', 'description', 'transaction_type']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}), # Use HTML5 date picker\n        }\n\n    def __init__(self, *args, **kwargs):\n        user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n        if user:\n            self.fields['category'].queryset = Category.objects.filter(user=user) | Category.objects.filter(user__isnull=True)\n\n\nclass BudgetForm(forms.ModelForm):\n    class Meta:\n        model = Budget\n        fields = ['category', 'amount', 'start_date', 'end_date', 'rollover']\n        widgets = {\n            'start_date': forms.DateInput(attrs={'type': 'date'}),\n            'end_date': forms.DateInput(attrs={'type': 'date'}),\n        }\n    def __init__(self, *args, **kwargs):\n        user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n        if user:\n           self.fields['category'].queryset = Category.objects.filter(user=user) | Category.objects.filter(user__isnull=True)\n\n\n\nclass CategoryForm(forms.ModelForm):\n  class Meta:\n    model = Category\n    fields = ['name']\n\nclass CustomUserCreationForm(UserCreationForm):\n    class Meta(UserCreationForm.Meta):\n        model = User\n        fields = UserCreationForm.Meta.fields + ('email',)\n\nclass CustomAuthenticationForm(AuthenticationForm):\n    pass  # Can customize further if needed\n\n\nclass CustomPasswordChangeForm(PasswordChangeForm):\n  pass\n\nclass UserProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = ['currency', 'date_format']\n\n\"\"\"\n    },\n    {\n        \"file\": \"views.py\",\n        \"path\": \"budget_app/views.py\",\n        \"code\":\n            \"\"\"\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Transaction, Budget, Category, UserProfile\nfrom .forms import TransactionForm, BudgetForm, CategoryForm, CustomUserCreationForm, CustomAuthenticationForm, CustomPasswordChangeForm, UserProfileForm\nfrom django.contrib.auth import login, authenticate, logout, update_session_auth_hash\nfrom django.db.models import Sum, Q\nfrom django.db.models.functions import TruncMonth\nfrom django.http import JsonResponse\nfrom django.core.serializers import serialize\nimport json\nfrom datetime import datetime, timedelta, date\nfrom dateutil.relativedelta import relativedelta\nfrom django.contrib import messages\n\n@login_required\ndef dashboard(request):\n    user = request.user\n\n    # Current Balance\n    total_income = Transaction.objects.filter(user=user, transaction_type='income').aggregate(Sum('amount'))['amount__sum'] or 0\n    total_expense = Transaction.objects.filter(user=user, transaction_type='expense').aggregate(Sum('amount'))['amount__sum'] or 0\n    current_balance = total_income - total_expense\n\n    # Recent Transactions\n    recent_transactions = Transaction.objects.filter(user=user).order_by('-date')[:5]  # Limit to 5 most recent\n\n    # Budget Summaries (for current month)\n    today = date.today()\n    start_of_month = today.replace(day=1)\n    end_of_month = (start_of_month + relativedelta(months=1)) - timedelta(days=1)\n\n    budgets = Budget.objects.filter(user=user, start_date__lte=end_of_month, end_date__gte=start_of_month)\n    budget_summaries = []\n    for budget in budgets:\n        spent = Transaction.objects.filter(user=user, category=budget.category, date__gte=budget.start_date, date__lte=budget.end_date, transaction_type='expense').aggregate(Sum('amount'))['amount__sum'] or 0\n        budget_summaries.append({\n            'category': budget.category.name,\n            'amount': budget.amount,\n            'spent': spent,\n            'remaining': budget.amount - spent,\n        })\n\n\n    context = {\n        'current_balance': current_balance,\n        'recent_transactions': recent_transactions,\n        'budget_summaries': budget_summaries,\n    }\n    return render(request, 'budget_app/dashboard.html', context)\n\n@login_required\ndef balance_history_chart(request):\n    user = request.user\n    # Default to last 30 days\n    end_date = date.today()\n    start_date = end_date - timedelta(days=30)\n\n    # Allow user to select time range\n    if request.GET.get('start_date') and request.GET.get('end_date'):\n        try:\n            start_date = datetime.strptime(request.GET.get('start_date'), '%Y-%m-%d').date()\n            end_date = datetime.strptime(request.GET.get('end_date'), '%Y-%m-%d').date()\n        except ValueError:\n          messages.error(request, \"Invalid date format. Please use YYYY-MM-DD.\")\n          return redirect('dashboard') #or wherever is appropriate\n\n    # Aggregate balance by month\n    balances = []\n    current_date = start_date\n\n    while current_date <= end_date:\n        next_month = current_date + relativedelta(months=1)\n        total_income = Transaction.objects.filter(user=user, transaction_type='income', date__lt=next_month).aggregate(Sum('amount'))['amount__sum'] or 0\n        total_expense = Transaction.objects.filter(user=user, transaction_type='expense', date__lt=next_month).aggregate(Sum('amount'))['amount__sum'] or 0\n        balance = total_income - total_expense\n        balances.append({'date': current_date.strftime('%Y-%m'), 'balance': float(balance)}) # Convert Decimal to float for JSON\n        current_date = next_month\n\n\n    return JsonResponse({'data': balances})\n\n\n@login_required\ndef transactions(request):\n    user = request.user\n    transactions = Transaction.objects.filter(user=user)\n\n    # Filtering\n    if request.GET.get('category'):\n        try:\n          category_id = int(request.GET.get('category'))\n          transactions = transactions.filter(category_id=category_id)\n        except:\n          messages.error(request, \"Invalid category ID\")\n\n    if request.GET.get('start_date') and request.GET.get('end_date'):\n      try:\n        start_date = datetime.strptime(request.GET.get('start_date'), '%Y-%m-%d').date()\n        end_date = datetime.strptime(request.GET.get('end_date'), '%Y-%m-%d').date()\n        transactions = transactions.filter(date__range=(start_date, end_date))\n      except ValueError:\n        messages.error(request, \"Invalid date format.\")\n\n    # Searching\n    if request.GET.get('search'):\n        search_term = request.GET.get('search')\n        transactions = transactions.filter(\n            Q(description__icontains=search_term) | Q(category__name__icontains=search_term)\n        )\n    # Sorting, default is date descending.\n    sort_by = request.GET.get('sort_by', '-date')  # Get the sort parameter, default to -date\n    if sort_by.replace('-','') in ['date', 'amount', 'category__name']:\n      transactions = transactions.order_by(sort_by)\n    else:\n      transactions = transactions.order_by('-date')\n      messages.warning(request, \"Invalid sorting parameter. Sorted by date (descending) by default.\")\n\n    categories = Category.objects.filter(user=request.user) | Category.objects.filter(user__isnull=True)\n\n    context = {\n        'transactions': transactions,\n        'categories': categories,\n    }\n    return render(request, 'budget_app/transactions.html', context)\n\n@login_required\ndef add_transaction(request):\n    if request.method == 'POST':\n        form = TransactionForm(request.POST, user=request.user)\n        if form.is_valid():\n            transaction = form.save(commit=False)\n            transaction.user = request.user\n            transaction.save()\n            return redirect('transactions')\n    else:\n        form = TransactionForm(user=request.user)\n    return render(request, 'budget_app/add_transaction.html', {'form': form})\n\n@login_required\ndef edit_transaction(request, pk):\n    transaction = get_object_or_404(Transaction, pk=pk, user=request.user)\n    if request.method == 'POST':\n        form = TransactionForm(request.POST, instance=transaction, user=request.user)\n        if form.is_valid():\n            form.save()\n            return redirect('transactions')\n    else:\n        form = TransactionForm(instance=transaction, user=request.user)\n    return render(request, 'budget_app/edit_transaction.html', {'form': form, 'transaction':transaction})\n\n@login_required\ndef delete_transaction(request, pk):\n    transaction = get_object_or_404(Transaction, pk=pk, user=request.user)\n    if request.method == 'POST':\n        transaction.delete()\n        return redirect('transactions')\n    return render(request, 'budget_app/delete_transaction.html', {'transaction': transaction})\n\n@login_required\ndef view_transaction_detail(request, pk):\n  transaction = get_object_or_404(Transaction, pk=pk, user=request.user)\n  return render(request, 'budget_app/transaction_detail.html', {'transaction':transaction})\n\n@login_required\ndef budgets(request):\n    budgets = Budget.objects.filter(user=request.user)\n    return render(request, 'budget_app/budgets.html', {'budgets': budgets})\n\n@login_required\ndef add_budget(request):\n    if request.method == 'POST':\n        form = BudgetForm(request.POST, user=request.user)\n        if form.is_valid():\n            budget = form.save(commit=False)\n            budget.user = request.user\n            budget.save()\n            return redirect('budgets')\n    else:\n        form = BudgetForm(user=request.user)\n    return render(request, 'budget_app/add_budget.html', {'form': form})\n\n@login_required\ndef edit_budget(request, pk):\n    budget = get_object_or_404(Budget, pk=pk, user=request.user)\n    if request.method == 'POST':\n        form = BudgetForm(request.POST, instance=budget, user=request.user)\n        if form.is_valid():\n            form.save()\n            return redirect('budgets')\n    else:\n        form = BudgetForm(instance=budget, user=request.user)\n    return render(request, 'budget_app/edit_budget.html', {'form': form, 'budget':budget})\n\n@login_required\ndef delete_budget(request, pk):\n    budget = get_object_or_404(Budget, pk=pk, user=request.user)\n    if request.method == 'POST':\n        budget.delete()\n        return redirect('budgets')\n    return render(request, 'budget_app/delete_budget.html', {'budget': budget})\n\n@login_required\ndef view_budget_progress(request, pk):\n    budget = get_object_or_404(Budget, pk=pk, user=request.user)\n    spent = Transaction.objects.filter(user=request.user, category=budget.category, date__gte=budget.start_date, date__lte=budget.end_date, transaction_type='expense').aggregate(Sum('amount'))['amount__sum'] or 0\n    remaining = budget.amount - spent\n\n    context = {\n        'budget': budget,\n        'spent': spent,\n        'remaining': remaining,\n    }\n\n    return render(request, 'budget_app/budget_progress.html', context)\n\n@login_required\ndef view_budget_history(request, pk):\n    budget = get_object_or_404(Budget, user=request.user, pk=pk)  # Ensure it's the user's budget\n    category = budget.category\n\n    # Get spending for the budget category over time\n    # Group by month for historical view\n    transactions = Transaction.objects.filter(user=request.user, category=category, transaction_type='expense').annotate(month=TruncMonth('date')).values('month').annotate(total_spent=Sum('amount')).order_by('month')\n    budget_history = []\n    for transaction in transactions:\n      budget_history_item = {\n          \"month\": transaction['month'].strftime('%Y-%m'),\n          \"total_spent\": transaction['total_spent']\n      }\n\n      #Find the corresponding budget period, IF it exists.\n      corresponding_budget = Budget.objects.filter(user=request.user, category=category, start_date__lte=transaction['month'], end_date__gte=transaction['month']).first()\n      if corresponding_budget:\n        budget_history_item['budget_amount'] = corresponding_budget.amount\n      else:\n        budget_history_item['budget_amount'] = None  # No budget set for this period\n      budget_history.append(budget_history_item)\n\n\n    return render(request, 'budget_app/budget_history.html', {'budget': budget, 'budget_history': budget_history, 'category_name': category.name})\n\n\n@login_required\ndef reports(request):\n    # Simple default report (spending by category for the current month)\n    today = date.today()\n    start_date = today.replace(day=1)\n    end_date = (start_date + relativedelta(months=1)) - timedelta(days=1)\n    report_type = 'spending'\n\n    if request.GET.get('start_date') and request.GET.get('end_date'):\n        try:\n            start_date = datetime.strptime(request.GET.get('start_date'), '%Y-%m-%d').date()\n            end_date = datetime.strptime(request.GET.get('end_date'), '%Y-%m-%d').date()\n        except ValueError:\n          messages.error(request, \"Invalid date format.\")\n          return redirect('reports')\n\n\n    report_type = request.GET.get('report_type', 'spending')  # Default to spending report\n\n    if report_type == 'spending':\n        spending_data = Transaction.objects.filter(\n            user=request.user,\n            date__range=(start_date, end_date),\n            transaction_type='expense'\n        ).values('category__name').annotate(total=Sum('amount')).order_by('-total')\n\n        report_data = [{'category': item['category__name'], 'total': item['total']} for item in spending_data]\n        report_title = f\"Spending Report ({start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')})\"\n\n\n    elif report_type == 'income':\n        income_data = Transaction.objects.filter(\n            user=request.user,\n            date__range=(start_date, end_date),\n            transaction_type='income'\n        ).values('category__name').annotate(total=Sum('amount')).order_by('-total')\n        report_data = [{'category': item['category__name'], 'total': item['total']} for item in income_data]\n        report_title = f\"Income Report ({start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')})\"\n\n\n    elif report_type == 'net_worth':\n        #  Net worth is a more complex calculation, and you might need additional models\n        #  to track assets and liabilities. This is a simplified example.\n\n        total_income = Transaction.objects.filter(user=request.user, transaction_type='income', date__range=(start_date, end_date)).aggregate(Sum('amount'))['amount__sum'] or 0\n        total_expense = Transaction.objects.filter(user=request.user, transaction_type='expense', date__range=(start_date, end_date)).aggregate(Sum('amount'))['amount__sum'] or 0\n        net_worth = total_income - total_expense\n\n        report_data = [{'label': 'Net Worth', 'value': net_worth}]  # Simplified\n        report_title = f\"Net Worth Report ({start_date.strftime('%Y-%m-%d')} to {end_date.strftime('%Y-%m-%d')})\"\n\n    else:\n        messages.error(request, \"Invalid Report Type\")\n        return redirect('reports')\n\n    return render(request, 'budget_app/reports.html', {'report_data': report_data, 'report_title': report_title, 'start_date':start_date, 'end_date':end_date, 'report_type': report_type})\n\n\n\n@login_required\ndef settings(request):\n    # Handle User Profile\n    user_profile, created = UserProfile.objects.get_or_create(user=request.user)\n    if request.method == 'POST' and 'profile_form' in request.POST:\n        profile_form = UserProfileForm(request.POST, instance=user_profile)\n        if profile_form.is_valid():\n            profile_form.save()\n            messages.success(request, \"Profile updated successfully.\")\n            return redirect('settings')  # Redirect after successful update\n    else:\n      profile_form = UserProfileForm(instance=user_profile)\n\n    #handle password changes\n    if request.method == 'POST' and 'password_form' in request.POST :\n      password_form = CustomPasswordChangeForm(request.user, request.POST)\n      if password_form.is_valid():\n          user = password_form.save()\n          update_session_auth_hash(request, user)  # Important! Keep the user logged in\n          messages.success(request, 'Your password was successfully updated!')\n          return redirect('settings')\n      else:\n        messages.error(request, \"Password update failed. Please check your input.\")\n    else:\n        password_form = CustomPasswordChangeForm(request.user)\n\n    # Handle categories\n    categories = Category.objects.filter(Q(user=request.user) | Q(user__isnull=True))  # User-specific and default categories\n    if request.method == 'POST' and 'category_form' in request.POST:\n      category_form = CategoryForm(request.POST)\n      if category_form.is_valid():\n        category = category_form.save(commit=False)\n        category.user = request.user #assign category to the current user\n        category.save()\n        return redirect('settings')\n    else:\n        category_form = CategoryForm()\n\n\n    context = {\n      'profile_form': profile_form,\n      'password_form': password_form,\n      'categories': categories,\n      'category_form': category_form\n    }\n    return render(request, 'budget_app/settings.html', context)\n\n@login_required\ndef edit_category(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    if category.user != request.user and category.user is not None: #make sure category belongs to user, OR is a default\n        messages.error(request, \"You do not have permission to edit this category.\")\n        return redirect('settings')\n\n    if request.method == 'POST':\n        form = CategoryForm(request.POST, instance=category)\n        if form.is_valid():\n            form.save()\n            return redirect('settings')\n    else:\n        form = CategoryForm(instance=category)\n    return render(request, 'budget_app/edit_category.html', {'form': form, 'category': category})\n\n@login_required\ndef delete_category(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    if category.user != request.user and category.user is not None:\n        messages.error(request, \"You do not have permission to delete this category.\")\n        return redirect('settings')\n\n    if request.method == 'POST':\n      if Transaction.objects.filter(category=category).exists():\n        messages.error(request, \"Cannot delete category. Transactions are using this category\")\n        return redirect('settings')\n      else:\n        category.delete()\n        return redirect('settings')\n\n    return render(request, 'budget_app/delete_category.html', {'category': category})\n\ndef register(request):\n    if request.method == 'POST':\n        form = CustomUserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)  # Log the user in immediately after registration\n            return redirect('dashboard')  # Redirect to the dashboard or home page\n    else:\n        form = CustomUserCreationForm()\n    return render(request, 'budget_app/register.html', {'form': form})\n\ndef user_login(request):  # Renamed to avoid conflict with django.contrib.auth.views.login\n    if request.method == 'POST':\n        form = CustomAuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')  # Redirect to dashboard after successful login\n            else:\n                # Handle invalid login (form.errors will have details)\n                pass\n    else:\n        form = CustomAuthenticationForm()\n    return render(request, 'budget_app/login.html', {'form': form})\n\ndef user_logout(request):\n    logout(request)\n    return redirect('login') # Redirect to the login page\n\n\"\"\"\n    },\n    {\n        \"file\": \"urls.py\",\n        \"path\": \"budget_app/urls.py\",\n        \"code\":\n            \"\"\"\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.user_login, name='login'), # Make login the default page\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('transactions/', views.transactions, name='transactions'),\n    path('transactions/add/', views.add_transaction, name='add_transaction'),\n    path('transactions/edit/<int:pk>/', views.edit_transaction, name='edit_transaction'),\n    path('transactions/delete/<int:pk>/', views.delete_transaction, name='delete_transaction'),\n    path('transactions/<int:pk>/', views.view_transaction_detail, name='view_transaction_detail'),\n    path('budgets/', views.budgets, name='budgets'),\n    path('budgets/add/', views.add_budget, name='add_budget'),\n    path('budgets/edit/<int:pk>/', views.edit_budget, name='edit_budget'),\n    path('budgets/delete/<int:pk>/', views.delete_budget, name='delete_budget'),\n    path('budgets/progress/<int:pk>/', views.view_budget_progress, name='view_budget_progress'),\n    path('budgets/history/<int:pk>/', views.view_budget_history, name='view_budget_history'),\n    path('reports/', views.reports, name='reports'),\n    path('settings/', views.settings, name='settings'),\n    path('settings/category/edit/<int:pk>/', views.edit_category, name='edit_category'),\n    path('settings/category/delete/<int:pk>/', views.delete_category, name='delete_category'),\n    path('register/', views.register, name='register'),\n    path('logout/', views.user_logout, name='logout'),\n    path('ajax/balance_history/', views.balance_history_chart, name='balance_history_chart'),\n\n]\n\"\"\"\n    },\n    {\n        \"file\": \"urls.py\",\n        \"path\": \"budget_project/urls.py\",\n        \"code\":\n            \"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget_app.urls')),  # Include your app's URLs\n]\n\"\"\"\n    },\n      {\n        \"file\": \"admin.py\",\n        \"path\": \"budget_app/admin.py\",\n        \"code\":\n            \"\"\"\nfrom django.contrib import admin\nfrom .models import Transaction, Budget, Category, UserProfile\n\nadmin.site.register(Transaction)\nadmin.site.register(Budget)\nadmin.site.register(Category)\nadmin.site.register(UserProfile)\n\n# For more advanced admin customization, you can use ModelAdmin classes:\n# class TransactionAdmin(admin.ModelAdmin):\n#     list_display = ('user', 'amount', 'category', 'date', 'description')\n#     list_filter = ('user', 'category', 'date')\n#     search_fields = ('description', 'user__username')\n# admin.site.register(Transaction, TransactionAdmin)\n\n\"\"\"\n    },\n    {\n        \"file\": \"__init__.py\",\n        \"path\": \"budget_app/__init__.py\",\n        \"code\": \"\"\n    },\n    {\n        \"file\": \"apps.py\",\n        \"path\": \"budget_app/apps.py\",\n        \"code\":\n            \"\"\"\nfrom django.apps import AppConfig\n\n\nclass BudgetAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget_app'\n\"\"\"\n    },\n     {\n        \"file\": \"tests.py\",\n        \"path\": \"budget_app/tests.py\",\n        \"code\":\n            \"\"\"\nfrom django.test import TestCase, Client\nfrom django.contrib.auth.models import User\nfrom .models import Transaction, Budget, Category\nfrom django.urls import reverse\nfrom datetime import date\n\nclass TransactionModelTest(TestCase):\n    def setUp(self):\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.category = Category.objects.create(name='Test Category', user=self.user)\n        self.transaction = Transaction.objects.create(\n            user=self.user,\n            amount=100.00,\n            category=self.category,\n            date=date.today(),\n            description='Test Transaction',\n            transaction_type='expense'\n        )\n\n    def test_transaction_creation(self):\n        self.assertEqual(self.transaction.user, self.user)\n        self.assertEqual(self.transaction.amount, 100.00)\n        self.assertEqual(self.transaction.category, self.category)\n        self.assertEqual(self.transaction.description, 'Test Transaction')\n        self.assertEqual(self.transaction.transaction_type, 'expense')\n\n    def test_transaction_str(self):\n        self.assertEqual(str(self.transaction), \"Expense: 100.0 (2024-07-26)\")\n\nclass BudgetModelTest(TestCase):\n  #Similar tests for budget and category\n    pass\n\nclass ViewsTest(TestCase):\n    def setUp(self):\n        self.client = Client()\n        self.user = User.objects.create_user(username='testuser', password='testpassword')\n        self.category = Category.objects.create(name=\"food\", user=self.user)\n        self.transaction = Transaction.objects.create(user=self.user, amount=50, category=self.category, date=date.today(), description=\"test trans\", transaction_type=\"expense\")\n\n\n    def test_login_required_views(self):\n        #Test that views that should require login actually do.\n        urls = [\n            reverse('dashboard'),\n            reverse('transactions'),\n            # Add all other URLs that require login\n        ]\n        for url in urls:\n            response = self.client.get(url)\n            self.assertEqual(response.status_code, 302)  # Expect redirect to login\n            self.assertRedirects(response, reverse('login') + '?next=' + url)\n\n\n    def test_dashboard_view(self):\n        self.client.login(username='testuser', password='testpassword')\n        response = self.client.get(reverse('dashboard'))\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"Current Balance\") # Check for text on page.\n        # you can test for context variables too:\n        self.assertEqual(response.context['current_balance'], -50)\n\n    def test_add_transaction_view(self):\n      self.client.login(username='testuser', password='testpassword')\n      #Test GET\n      response = self.client.get(reverse('add_transaction'))\n      self.assertEqual(response.status_code, 200)\n      self.assertIsInstance(response.context['form'], TransactionForm)\n\n      #Test POST with valid Data\n      new_category = Category.objects.create(name=\"New Category\", user=self.user)\n      post_data = {\n        'amount': 50,\n        'category': new_category.id,\n        'date': '2024-01-15',\n        'description': \"Test deposit\",\n        'transaction_type': 'income'\n      }\n      response = self.client.post(reverse('add_transaction'), data=post_data)\n      self.assertEqual(response.status_code, 302)  # Expect redirect\n      self.assertRedirects(response, reverse('transactions'))\n      self.assertTrue(Transaction.objects.filter(description=\"Test deposit\").exists())\n\n\n    def test_add_transaction_view_invalid(self):\n        self.client.login(username='testuser', password='testpassword')\n        # Test POST request with invalid data\n        invalid_data = {\n          'amount': \"abc\",\n          'category': self.category.pk,\n          'date': date.today(),\n          'description': 'invalid test data',\n          'transaction_type': \"expense\"\n        }\n        response = self.client.post(reverse('add_transaction'), data=invalid_data)\n        self.assertEqual(response.status_code,", "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\nfrom django.conf import settings\n\nclass Event(models.Model):\n    user = models.ForeignKey(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, null=True, blank=True)  # Link to a user (optional)\n    title = models.CharField(max_length=255)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    all_day = models.BooleanField(default=False)\n    location = models.CharField(max_length=255, blank=True, null=True)\n    description = models.TextField(blank=True, null=True)\n    recurrence = models.CharField(max_length=50, blank=True, null=True)  # 'daily', 'weekly', 'monthly', 'yearly', or custom rules\n    color = models.CharField(max_length=7, default='#3a87ad')  # Hex color, you might want a more robust color field\n\n    def __str__(self):\n        return self.title\n\n\nclass Reminder(models.Model):\n    event = models.ForeignKey(Event, on_delete=models.CASCADE, related_name='reminders')\n    reminder_time = models.DateTimeField()\n    # method = models.CharField(max_length=20, choices=[('email', 'Email'), ('popup', 'Popup')], default='popup') # Example for reminder type.\n\n    def __str__(self):\n        return f\"Reminder for {self.event.title} at {self.reminder_time}\"\n\n\nclass UserPreferences(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE)\n    time_zone = models.CharField(max_length=50, default='UTC')\n    date_format = models.CharField(max_length=50, default='%Y-%m-%d')\n    time_format = models.CharField(max_length=50, default='%H:%M')\n    start_of_week = models.IntegerField(default=0)  # 0 for Sunday, 1 for Monday\n    default_view = models.CharField(max_length=10, default='month') # month, week, day\n    default_reminder_time = models.IntegerField(null=True, blank=True) # e.g., minutes before event\n    dark_mode = models.BooleanField(default=False)\n\n    def __str__(self):\n      return f\"Preferences for {self.user.username}\""}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import JsonResponse, HttpResponseBadRequest\nfrom .models import Event, Reminder, UserPreferences\nfrom .forms import EventForm  # Import the form\nfrom django.contrib.auth.decorators import login_required\nimport json\nfrom datetime import datetime, timedelta\nimport calendar\nfrom django.utils import timezone\n\n@login_required\ndef calendar_view(request):\n  # Get user preference or create default.\n  try:\n      user_preferences = UserPreferences.objects.get(user=request.user)\n  except UserPreferences.DoesNotExist:\n      user_preferences = UserPreferences.objects.create(user=request.user)\n\n\n  context = {\n        'default_view': user_preferences.default_view, # Pass this to your template\n        'preferences' : user_preferences, #Pass All user preferences\n    }\n  return render(request, 'calendar_app/calendar.html', context)\n\n\n@login_required\ndef get_events(request):\n    start_date_str = request.GET.get('start')\n    end_date_str = request.GET.get('end')\n\n    if not start_date_str or not end_date_str:\n        return JsonResponse({'error': 'start and end dates are required'}, status=400)\n\n    try:\n        start_date = datetime.fromisoformat(start_date_str.replace('Z', '+00:00'))\n        end_date = datetime.fromisoformat(end_date_str.replace('Z', '+00:00'))\n    except ValueError:\n        return JsonResponse({'error': 'Invalid date format'}, status=400)\n    #Filter by User\n    events = Event.objects.filter(user=request.user, start_time__gte=start_date, end_time__lte=end_date)\n\n    event_list = []\n    for event in events:\n        event_list.append({\n            'id': event.id,\n            'title': event.title,\n            'start': event.start_time.isoformat(),\n            'end': event.end_time.isoformat(),\n            'allDay': event.all_day,\n            'color': event.color,\n            'description': event.description, # Add for details\n            'location': event.location #Add location\n            # Add other fields as needed\n        })\n\n    return JsonResponse(event_list, safe=False)\n\n\n@login_required\ndef event_create(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        try:\n          start_time = datetime.fromisoformat(data.get('start').replace('Z', '+00:00'))\n\n          if (data.get('end')):\n            end_time = datetime.fromisoformat(data.get('end').replace('Z', '+00:00'))\n          else:\n            end_time = start_time + timedelta(hours=1)  # Default 1-hour duration\n\n          event = Event.objects.create(\n              user=request.user,\n              title=data.get('title'),\n              start_time=start_time,\n              end_time=end_time,\n              all_day=data.get('allDay', False),\n              description=data.get('description'),\n              location=data.get('location'),\n              color=data.get('color'),\n              recurrence=data.get('recurrence'),\n          )\n          return JsonResponse({'status': 'success', 'event_id': event.id})\n        except Exception as e:\n          return JsonResponse({'status': 'error', 'message': str(e)}, status=400)\n    return JsonResponse({'status': 'error'})\n\n\n\n@login_required\ndef event_update(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        try:\n          # Convert from ISO format string (important for handling timezones)\n            event.start_time = datetime.fromisoformat(data.get('start').replace('Z', '+00:00'))\n            event.end_time = datetime.fromisoformat(data.get('end').replace('Z', '+00:00'))\n            event.title = data.get('title')\n            event.all_day = data.get('allDay', False)\n            event.description = data.get('description')\n            event.location = data.get('location')\n            event.color = data.get('color')\n            event.recurrence = data.get('recurrence')\n\n            event.save()\n            return JsonResponse({'status': 'success'})\n        except Exception as e:\n          return JsonResponse({'status': 'error', 'message': str(e)}, status=400)\n\n    return JsonResponse({'status': 'error'},status=400)\n\n@login_required\ndef event_delete(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        event.delete()\n        return JsonResponse({'status': 'success'})\n    return JsonResponse({'status': 'error'}, status=400)\n\n\n\n@login_required\ndef event_detail(request, event_id):\n  event = get_object_or_404(Event, pk=event_id, user=request.user)\n  # Convert to a dictionary for JSON response\n  event_data = {\n      'id': event.id,\n      'title': event.title,\n      'start': event.start_time.isoformat(),\n      'end': event.end_time.isoformat(),\n      'allDay': event.all_day,\n      'description': event.description,\n      'location': event.location,\n      'color': event.color,\n      'recurrence': event.recurrence,\n      # Include other fields as necessary\n  }\n  return JsonResponse(event_data)\n\n@login_required\ndef update_preferences(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        try:\n            user_preferences, created = UserPreferences.objects.get_or_create(user=request.user)\n            user_preferences.time_zone = data.get('time_zone', user_preferences.time_zone)\n            user_preferences.date_format = data.get('date_format', user_preferences.date_format)\n            user_preferences.time_format = data.get('time_format', user_preferences.time_format)\n            user_preferences.start_of_week = int(data.get('start_of_week', user_preferences.start_of_week))\n            user_preferences.default_view = data.get('default_view', user_preferences.default_view)\n            user_preferences.dark_mode = data.get('dark_mode', user_preferences.dark_mode)\n\n            if data.get('default_reminder_time') is not None:\n              user_preferences.default_reminder_time = int(data.get('default_reminder_time'))\n            else:\n              user_preferences.default_reminder_time = None\n\n            user_preferences.save()\n            return JsonResponse({'status': 'success'})\n        except Exception as e:\n          return JsonResponse({'status': 'error', 'message': str(e)}, status=400)\n\n    return HttpResponseBadRequest()\n\n@login_required\ndef search_events(request):\n    query = request.GET.get('q', '')\n    if query:\n        events = Event.objects.filter(\n            user=request.user,\n            title__icontains=query\n        ).values('id', 'title', 'start_time', 'end_time')  # Fetch only necessary fields\n\n        event_list = list(events) # Convert QuerySet to list for JSON serialization\n\n        #Format Date\n        for event in event_list:\n          event['start_time'] = event['start_time'].isoformat()\n          event['end_time'] = event['end_time'].isoformat()\n\n        return JsonResponse(event_list, safe=False)\n    else:\n      return JsonResponse([], safe=False)\n"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar_view'),\n    path('events/', views.get_events, name='get_events'),\n    path('events/create/', views.event_create, name='event_create'),\n    path('events/<int:event_id>/update/', views.event_update, name='event_update'),\n    path('events/<int:event_id>/delete/', views.event_delete, name='event_delete'),\n    path('events/<int:event_id>/detail/', views.event_detail, name='event_detail'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('search/', views.search_events, name='search_events'),\n\n]"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event, Reminder\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'start_time', 'end_time', 'all_day', 'location', 'description', 'recurrence', 'color']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }\n\n    # Add custom validation if needed, for example:\n    def clean(self):\n        cleaned_data = super().clean()\n        start_time = cleaned_data.get('start_time')\n        end_time = cleaned_data.get('end_time')\n\n        if start_time and end_time and start_time >= end_time:\n            raise forms.ValidationError(\"End time must be after start time.\")\n        return cleaned_data"}, {"file": "admin.py", "path": "calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event, Reminder, UserPreferences\n\nadmin.site.register(Event)\nadmin.site.register(Reminder)\nadmin.site.register(UserPreferences)"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar_app/calendar.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Calendar</title>\n    <link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/main.min.css' rel='stylesheet' />\n    <script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.10/index.global.min.js'></script>\n\n  <style>\n    body {\n      font-family: sans-serif;\n    }\n    #calendar {\n      max-width: 900px;\n      margin: 40px auto;\n    }\n     /* Dark mode styles */\n    .dark-mode {\n      background-color: #333;\n      color: #fff;\n    }\n    .dark-mode .fc-button-primary {\n      background-color: #555;\n      color: #fff;\n      border-color: #777\n    }\n  </style>\n</head>\n<body {% if preferences.dark_mode %}class=\"dark-mode\"{% endif %}> <!-- Apply Dark mode -->\n\n  <div id='calendar'></div>\n\n  <script>\n   document.addEventListener('DOMContentLoaded', function() {\n    var calendarEl = document.getElementById('calendar');\n\n    var calendar = new FullCalendar.Calendar(calendarEl, {\n      initialView: '{{ default_view }}',\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      events: '/events/?start=' + '{{ start_date|date:\"Y-m-d\" }}' + '&end=' + '{{ end_date|date:\"Y-m-d\" }}',\n\n      //Add Events\n      selectable: true,\n      select: function(info) {\n          var title = prompt('Event Title:');\n            if (title) {\n              fetch('/events/create/', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                  'X-CSRFToken': getCookie('csrftoken')  // Get CSRF token\n                },\n                body: JSON.stringify({\n                  title: title,\n                  start: info.startStr,\n                  end: info.endStr,\n                  allDay: info.allDay\n                })\n            })\n            .then(response => response.json())\n            .then(data =>{\n              if (data.status === 'success'){\n                //Add event to Calendar\n                calendar.addEvent({\n                    id: data.event_id,\n                    title: title,\n                    start: info.startStr,\n                    end: info.endStr,\n                    allDay: info.allDay\n                });\n                calendar.unselect();\n              }\n              else{\n                alert('Error creating event: ' + data.message);\n              }\n            });\n          }\n      },\n\n      // Update Event(Drag and Drop)\n      editable: true,\n      eventDrop: function(info) {\n        updateEvent(info);\n      },\n      eventResize: function(info) {\n        updateEvent(info);\n      },\n\n      // Event Click (For details and actions)\n      eventClick: function(info) {\n        if (confirm(`Are you sure you want to delete \"${info.event.title}\"?`)) {\n                    fetch(`/events/${info.event.id}/delete/`, {\n                        method: 'POST',\n                        headers: {\n                            'X-CSRFToken': getCookie('csrftoken')\n                        }\n                    })\n                    .then(response => response.json())\n                    .then(data => {\n                        if (data.status === 'success') {\n                            info.event.remove(); // Remove from calendar\n                        } else {\n                            alert('Error deleting event.');\n                        }\n                    });\n                }\n      },\n\n      //For loading\n      loading: function(isLoading) {\n        if (isLoading) {\n          // Show loading indicator (optional)\n        } else {\n          // Hide loading indicator (optional)\n        }\n      },\n\n       // Fetch events dynamically\n      events: function(fetchInfo, successCallback, failureCallback) {\n        fetch(`/events/?start=${fetchInfo.startStr}&end=${fetchInfo.endStr}`)\n          .then(response => {\n            if (!response.ok) {\n              throw new Error('Network response was not ok');\n            }\n            return response.json();\n          })\n          .then(data => {\n            successCallback(data); // Pass event data to FullCalendar\n          })\n          .catch(error => {\n            failureCallback(error); // Report failure\n            console.error('There has been a problem with your fetch operation:', error);\n          });\n      }\n\n    });\n\n    calendar.render();\n\n  // Helper function to update event (used by eventDrop and eventResize)\n  function updateEvent(info) {\n      fetch(`/events/${info.event.id}/update/`, {\n          method: 'POST',\n          headers: {\n              'Content-Type': 'application/json',\n              'X-CSRFToken': getCookie('csrftoken')\n          },\n          body: JSON.stringify({\n              title: info.event.title,\n              start: info.event.startStr,\n              end: info.event.endStr,\n              allDay: info.event.allDay\n          })\n      })\n      .then(response => response.json())\n      .then(data =>{\n        if(data.status !== 'success'){\n          alert('Error updating event');\n          info.revert(); // Revert changes if update fails\n        }\n      });\n  }\n\n    // Helper Function to get CSRF token\n    function getCookie(name) {\n      let cookieValue = null;\n      if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n        for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim();\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\n            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n            break;\n          }\n        }\n      }\n      return cookieValue;\n    }\n\n  });\n\n  </script>\n</body>\n</html>"}], "9": "```json\n[\n    {\n        \"file\": \"views.py\",\n        \"path\": \"chatbot_app/views.py\",\n        \"code\":\n            \"\"\"\nfrom django.shortcuts import render, redirect\nfrom django.http import JsonResponse, HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nimport json\n# Placeholder for chatbot logic (replace with actual implementation)\ndef chatbot_logic(user_input, conversation_history):\n    # Very basic example - replace with your NLP/AI model\n    if \"hello\" in user_input.lower():\n        response = \"Hi there!\"\n    elif \"help\" in user_input.lower():\n        response = \"How can I assist you today?\"\n    elif \"pricing\" in user_input.lower():  # Homepage & Chat Interface\n        response = \"Please visit our pricing page for details: /pricing/\"  #Link to pricing\n    elif \"faq\" in user_input.lower():\n        response = \"You can find answers to common questions on our FAQ page: /faq/\" #Link to FAQ\n    elif \"integrate\" in user_input.lower(): # Integration page\n        response = \"Information on integrations can be found here: /integrations/\"\n    elif \"demo\" in user_input.lower(): #Demo page\n        response = \"Try our interactive demo here: /demo/\"\n    else:\n        response = \"I'm sorry, I didn't understand your question.  Could you rephrase it?\"\n\n    updated_history = conversation_history + [{'role': 'user', 'content': user_input}, {'role': 'bot', 'content': response}]\n    return response, updated_history\n\n\n@csrf_exempt  # Use CSRF protection in production!\ndef chatbot_api(request):\n    if request.method == 'POST':\n        try:\n            data = json.loads(request.body)\n            user_input = data.get('message')\n            conversation_history = data.get('history', []) # Get history\n\n            if not user_input:\n                return JsonResponse({'error': 'Missing message'}, status=400)\n\n            bot_response, updated_history = chatbot_logic(user_input, conversation_history)\n            return JsonResponse({'response': bot_response, 'history': updated_history})\n\n\n        except json.JSONDecodeError:\n            return JsonResponse({'error': 'Invalid JSON'}, status=400)\n    else:\n        return JsonResponse({'error': 'Invalid request method'}, status=405)\n\ndef homepage(request):\n    # Example use cases for the homepage\n    example_use_cases = [\n        {\"scenario\": \"Customer Service\", \"description\": \"Answer customer inquiries, resolve issues, and provide support.\"},\n        {\"scenario\": \"Information Retrieval\", \"description\": \"Quickly find information from your knowledge base.\"},\n        {\"scenario\": \"Task Automation\", \"description\": \"Automate repetitive tasks like scheduling appointments or sending reminders.\"},\n    ]\n    context = {\n        'example_use_cases': example_use_cases,\n        'key_features' : ['Natural Language Understanding','Contextual Awareness','Multi-turn conversations', 'Error Handling'] #Quick Access to Key Features\n    }\n    return render(request, 'chatbot_app/homepage.html', context)\n\ndef chat_interface(request):\n      return render(request, 'chatbot_app/chat_interface.html')\n\ndef faq_page(request):\n    # Ideally, load FAQs from a database or external file.\n    faqs = [\n        {\"question\": \"What is this chatbot?\", \"answer\": \"This is an AI-powered chatbot designed to...\"},\n        {\"question\": \"How do I use it?\", \"answer\": \"Simply type your question in the chat box.\"},\n        {\"question\": \"What languages does it support?\", \"answer\": \"Currently, only English is supported.\"},\n        # ... more FAQs ...\n    ]\n\n    if request.method == 'GET' and 'search' in request.GET: # search feature\n      search_term = request.GET['search'].lower()\n      filtered_faqs = [faq for faq in faqs if search_term in faq['question'].lower() or search_term in faq['answer'].lower()]\n      return render(request, 'chatbot_app/faq_page.html', {'faqs': filtered_faqs, 'search_term': search_term})\n\n    return render(request, 'chatbot_app/faq_page.html', {'faqs': faqs})\n\ndef integrations_page(request):\n    integrations = [\n        {\"name\": \"Slack\", \"description\": \"Integrate with Slack to use the chatbot directly within your workspace.\", \"instructions_url\": \"/integrations/slack\"},\n        {\"name\": \"CRM System\", \"description\": \"Connect to your CRM to access customer data and automate workflows.\", \"instructions_url\": \"/integrations/crm\"},\n         # ... more integrations ...\n    ]\n    return render(request, 'chatbot_app/integrations_page.html', {'integrations': integrations})\n\ndef integration_detail(request, integration_name):\n    # Example: Detailed instructions for a specific integration\n    if integration_name == 'slack':\n        instructions = \"1. Go to your Slack workspace. 2. Add an app. 3. Search for 'My Chatbot'. 4. Follow the authorization steps.\"\n    elif integration_name == 'crm':\n       instructions = \"Detailed CRM integration steps\"\n    else:\n      return HttpResponse(\"Integration Not found\", status=404)\n\n    return render(request, 'chatbot_app/integration_detail.html', {'integration_name': integration_name, 'instructions': instructions})\n\ndef demo_page(request):\n    # Define guided scenarios\n    guided_scenarios = [\n      {\"scenario_name\": \"Order Status\", \"steps\": [\"Ask: What is the status of my order?\", \"Expected response: Provide order number\", \"Ask: My order number is 12345\", \"Expected response: Order status information\"]},\n      {\"scenario_name\": \"Book Appointment\", \"steps\": [\"Ask: I want to book an appointment\", \"Expected Response: Ask for date/time preference\"]}\n    ]\n\n    context = {\n        'guided_scenarios': guided_scenarios\n    }\n    return render(request, 'chatbot_app/demo_page.html', context)\n\ndef pricing_page(request):\n    pricing_plans = [\n        {\"plan_name\": \"Free\", \"price\": \"$0/month\", \"features\": [\"Basic features\", \"Limited usage\"]},\n        {\"plan_name\": \"Pro\", \"price\": \"$49/month\", \"features\": [\"All basic features\", \"Unlimited usage\", \"Priority support\"]},\n        {\"plan_name\": \"Enterprise\", \"price\": \"Contact Us\", \"features\": [\"Custom features\", \"Dedicated support\", \"On-premise deployment\"]},\n    ]\n    return render(request, 'chatbot_app/pricing_page.html', {'pricing_plans': pricing_plans})\n            \"\"\"\n    },\n    {\n        \"file\": \"urls.py\",\n        \"path\": \"chatbot_app/urls.py\",\n        \"code\":\n            \"\"\"\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('chat/', views.chat_interface, name='chat_interface'),\n    path('api/chatbot/', views.chatbot_api, name='chatbot_api'),\n    path('faq/', views.faq_page, name='faq_page'),\n    path('integrations/', views.integrations_page, name='integrations_page'),\n    path('integrations/<str:integration_name>/', views.integration_detail, name='integration_detail'),\n    path('demo/', views.demo_page, name='demo_page'),\n    path('pricing/', views.pricing_page, name='pricing_page')\n\n]\n            \"\"\"\n    },\n    {\n        \"file\": \"models.py\",\n        \"path\": \"chatbot_app/models.py\",\n        \"code\":\n            \"\"\"\nfrom django.db import models\n\n# Example Model (Optional - for storing conversation history, user data, etc.)\nclass Conversation(models.Model):\n    user_id = models.CharField(max_length=255, blank=True, null=True)  # Or link to your User model\n    timestamp = models.DateTimeField(auto_now_add=True)\n    input_text = models.TextField()\n    bot_response = models.TextField()\n    context = models.JSONField(blank=True, null=True) # Store conversation context\n\n    def __str__(self):\n        return f\"Conversation {self.id} at {self.timestamp}\"\n            \"\"\"\n    },\n    {\n      \"file\": \"homepage.html\",\n      \"path\": \"chatbot_app/templates/chatbot_app/homepage.html\",\n      \"code\":\n      \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Chatbot Homepage</title>\n</head>\n<body>\n    <h1>Welcome to Our Chatbot!</h1>\n\n    <h2>Key Features:</h2>\n        <ul>\n            {% for feature in key_features %}\n                <li>{{ feature }}</li>\n            {% endfor %}\n        </ul>\n\n    <h2>Example Use Cases</h2>\n    <ul>\n        {% for use_case in example_use_cases %}\n            <li><strong>{{ use_case.scenario }}</strong>: {{ use_case.description }}</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'pricing_page' %}\">View Pricing</a> <br>\n    <a href=\"{% url 'chat_interface' %}\">Start Chatting</a>\n\n</body>\n</html>\n      \"\"\"\n    },\n    {\n      \"file\": \"chat_interface.html\",\n      \"path\": \"chatbot_app/templates/chatbot_app/chat_interface.html\",\n      \"code\":\n      \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Chat Interface</title>\n     <style>\n        #chat-history {\n            height: 300px;\n            overflow-y: scroll;\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-bottom: 10px;\n        }\n        .user-message { color: blue; }\n        .bot-message { color: green; }\n    </style>\n</head>\n<body>\n    <h1>Chat with Our Bot</h1>\n\n    <div id=\"chat-history\">\n        <!-- Conversation history will be displayed here -->\n    </div>\n\n    <input type=\"text\" id=\"user-input\" placeholder=\"Type your message...\">\n    <button id=\"send-button\">Send</button>\n\n    <script>\n     const chatHistory = document.getElementById('chat-history');\n        const userInput = document.getElementById('user-input');\n        const sendButton = document.getElementById('send-button');\n        let conversationHistory = [];\n\n        function addMessageToChat(message, sender) {\n            const messageDiv = document.createElement('div');\n            messageDiv.textContent = `${sender}: ${message}`;\n            messageDiv.classList.add(sender === 'You' ? 'user-message' : 'bot-message');\n            chatHistory.appendChild(messageDiv);\n            chatHistory.scrollTop = chatHistory.scrollHeight;  // Scroll to bottom\n        }\n        function sendMessage() {\n            const message = userInput.value.trim();\n            if (!message) return;\n\n            addMessageToChat(message, 'You');\n            userInput.value = '';\n\n            // Send message to the backend\n            fetch('/api/chatbot/', {  // Use the correct URL\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    // Add CSRF token header here if needed (see Django docs)\n                },\n                body: JSON.stringify({ message: message, history: conversationHistory })\n            })\n            .then(response => response.json())\n            .then(data => {\n                addMessageToChat(data.response, 'Bot');\n                conversationHistory = data.history; //update history\n            })\n            .catch(error => {\n                console.error('Error:', error);\n                addMessageToChat('Error communicating with the server.', 'Bot');\n            });\n        }\n        sendButton.addEventListener('click', sendMessage);\n        userInput.addEventListener('keypress', function(event) {\n            if (event.key === 'Enter') {\n                sendMessage();\n            }\n        });\n    </script>\n</body>\n</html>\n      \"\"\"\n    },\n    {\n      \"file\": \"faq_page.html\",\n      \"path\": \"chatbot_app/templates/chatbot_app/faq_page.html\",\n      \"code\":\n      \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>FAQ Page</title>\n</head>\n<body>\n    <h1>Frequently Asked Questions</h1>\n\n     <form method=\"get\">\n        <input type=\"text\" name=\"search\" placeholder=\"Search FAQs...\" value=\"{{ search_term }}\">\n        <button type=\"submit\">Search</button>\n    </form>\n\n    {% if faqs %}\n      <ul>\n          {% for faq in faqs %}\n              <li><strong>{{ faq.question }}</strong>: {{ faq.answer }}</li>\n          {% endfor %}\n      </ul>\n    {% else %}\n      <p>No FAQs found matching your search.</p>\n    {% endif %}\n\n    <h2>Still have questions?</h2>\n    <p>Contact us at support@example.com</p>\n\n</body>\n</html>\n      \"\"\"\n    },\n    {\n       \"file\": \"integrations_page.html\",\n       \"path\": \"chatbot_app/templates/chatbot_app/integrations_page.html\",\n       \"code\":\n       \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Integrations</title>\n</head>\n<body>\n    <h1>Available Integrations</h1>\n    <ul>\n    {% for integration in integrations %}\n      <li>\n        <h2>{{ integration.name }}</h2>\n        <p>{{ integration.description }}</p>\n        <a href=\"{{ integration.instructions_url }}\">View Instructions</a>\n      </li>\n    {% endfor %}\n    </ul>\n</body>\n</html>\n       \"\"\"\n    },\n    {\n        \"file\": \"integration_detail.html\",\n        \"path\": \"chatbot_app/templates/chatbot_app/integration_detail.html\",\n        \"code\":\n        \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Integration Details - {{ integration_name }}</title>\n</head>\n<body>\n  <h1>{{ integration_name }} Integration</h1>\n  <p>{{ instructions }}</p>\n\n</body>\n</html>\n        \"\"\"\n    },\n    {\n      \"file\": \"demo_page.html\",\n      \"path\": \"chatbot_app/templates/chatbot_app/demo_page.html\",\n      \"code\":\n      \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Chatbot Demo</title>\n     <style>\n        #chat-history {\n            height: 300px;\n            overflow-y: scroll;\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-bottom: 10px;\n        }\n        .user-message { color: blue; }\n        .bot-message { color: green; }\n    </style>\n</head>\n<body>\n    <h1>Chatbot Demo</h1>\n    <div id=\"chat-history\">\n    </div>\n      <input type=\"text\" id=\"user-input\" placeholder=\"Type your message...\">\n      <button id=\"send-button\">Send</button>\n\n    <h2>Guided Scenarios</h2>\n      <ul>\n          {% for scenario in guided_scenarios %}\n              <li>\n                  <h3>{{ scenario.scenario_name }}</h3>\n                  <ol>\n                    {% for step in scenario.steps %}\n                      <li>{{step}}</li>\n                    {% endfor %}\n                  </ol>\n              </li>\n          {% endfor %}\n      </ul>\n\n     <script>\n        const chatHistory = document.getElementById('chat-history');\n        const userInput = document.getElementById('user-input');\n        const sendButton = document.getElementById('send-button');\n        let conversationHistory = [];\n\n\n        function addMessageToChat(message, sender) {\n            const messageDiv = document.createElement('div');\n            messageDiv.textContent = `${sender}: ${message}`;\n            messageDiv.classList.add(sender === 'You' ? 'user-message' : 'bot-message');\n            chatHistory.appendChild(messageDiv);\n            chatHistory.scrollTop = chatHistory.scrollHeight;\n        }\n        function sendMessage() {\n            const message = userInput.value.trim();\n            if (!message) return;\n\n            addMessageToChat(message, 'You');\n            userInput.value = '';\n\n            fetch('/api/chatbot/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ message: message, history: conversationHistory})\n            })\n            .then(response => response.json())\n            .then(data => {\n                addMessageToChat(data.response, 'Bot');\n                conversationHistory = data.history;\n            })\n            .catch(error => {\n                console.error('Error:', error);\n                addMessageToChat('Error communicating with server.', 'Bot');\n            });\n        }\n        sendButton.addEventListener('click', sendMessage);\n\n        userInput.addEventListener('keypress', function (event) {\n          if(event.key === 'Enter'){\n            sendMessage();\n          }\n        })\n    </script>\n</body>\n</html>\n      \"\"\"\n    },\n    {\n      \"file\":\"pricing_page.html\",\n      \"path\":\"chatbot_app/templates/chatbot_app/pricing_page.html\",\n      \"code\":\n      \"\"\"\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Pricing</title>\n</head>\n<body>\n<h1>Our Pricing Plans</h1>\n\n    <table>\n        <thead>\n            <tr>\n                <th>Plan</th>\n                <th>Price</th>\n                <th>Features</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for plan in pricing_plans %}\n            <tr>\n                <td>{{ plan.plan_name }}</td>\n                <td>{{ plan.price }}</td>\n                <td>\n                    <ul>\n                        {% for feature in plan.features %}\n                        <li>{{ feature }}</li>\n                        {% endfor %}\n                    </ul>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>\n      \"\"\"\n    },\n    {\n        \"file\": \"admin.py\",\n        \"path\": \"chatbot_app/admin.py\",\n        \"code\":\n            \"\"\"\nfrom django.contrib import admin\nfrom .models import Conversation\n\n# Register your models here.\nadmin.site.register(Conversation)\n\n            \"\"\"\n    },\n     {\n        \"file\": \"settings.py\",\n        \"path\": \"your_project/settings.py\",  // Replace your_project\n        \"code\":\n            \"\"\"\n# ... other settings ...\n\nINSTALLED_APPS = [\n    # ... other apps ...\n    'chatbot_app',  # Add your app\n]\n\n# ... other settings ...\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True, # Add this line, if not exist\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# ... other settings\n            \"\"\"\n    },\n    {\n      \"file\":\"urls.py\",\n      \"path\":\"your_project/urls.py\",\n      \"code\":\n      \"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),  # Include your app's URLs\n]\n      \"\"\"\n    }\n\n]\n```\n", "10": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.utils import timezone\n\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    date_of_birth = models.DateField(null=True, blank=True)\n    gender = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], null=True, blank=True)\n    height = models.FloatField(null=True, blank=True)  # in cm\n    weight = models.FloatField(null=True, blank=True)  # in kg\n    activity_level = models.CharField(max_length=50, null=True, blank=True) #e.g., sedentary, lightly active\n    # Add other profile-related fields as needed\n\n    def __str__(self):\n        return self.user.username\n\n\nclass Goal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    goal_type = models.CharField(max_length=20, choices=[('Lose Weight', 'Lose Weight'), ('Maintain Weight', 'Maintain Weight'), ('Gain Weight', 'Gain Weight')])\n    target_weight = models.FloatField(null=True, blank=True)\n    target_calorie_intake = models.IntegerField(null=True, blank=True)\n    start_date = models.DateField(default=timezone.now)\n    end_date = models.DateField(null=True, blank=True)\n\n\nclass Food(models.Model):\n    name = models.CharField(max_length=255)\n    brand = models.CharField(max_length=255, null=True, blank=True)\n    calories = models.FloatField()\n    protein = models.FloatField()\n    carbohydrates = models.FloatField()\n    fat = models.FloatField()\n    serving_size_grams = models.FloatField(null=True, blank=True)\n    serving_size_unit = models.CharField(max_length=50,null=True, blank=True) #e.g., grams, oz, cups\n    barcode = models.CharField(max_length=255, null=True, blank=True) #for barcode\n    # Other nutritional information (e.g., fiber, sugar) as needed\n\n    def __str__(self):\n        return self.name\n\n\nclass FoodEntry(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    food = models.ForeignKey(Food, on_delete=models.CASCADE)\n    meal_type = models.CharField(max_length=20, choices=[('Breakfast', 'Breakfast'), ('Lunch', 'Lunch'), ('Dinner', 'Dinner'), ('Snack', 'Snack')])\n    quantity = models.FloatField()\n    date = models.DateField(default=timezone.now)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n      return f'{self.user.username} - {self.food.name}'\n\n\nclass Exercise(models.Model):\n    name = models.CharField(max_length=255)\n    calories_burned_per_hour = models.FloatField() #MET value can be stored instead.\n\n    def __str__(self):\n        return self.name\n\n\nclass ExerciseEntry(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    exercise = models.ForeignKey(Exercise, on_delete=models.CASCADE)\n    duration = models.FloatField()  # in minutes\n    date = models.DateField(default=timezone.now)\n    created_at = models.DateTimeField(auto_now_add=True)\n    calories_burned = models.FloatField(null=True, blank=True)\n\n    def __str__(self):\n      return f'{self.user.username} - {self.exercise.name}'\n\n\nclass WeightEntry(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    weight = models.FloatField() # in kg\n    date = models.DateField(default=timezone.now)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.date}'"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.forms import AuthenticationForm, UserCreationForm\nfrom django.contrib.auth import login, logout, authenticate\nfrom .models import Food, FoodEntry, Exercise, ExerciseEntry, UserProfile, Goal, WeightEntry\nfrom .forms import UserProfileForm, GoalForm, FoodEntryForm, ExerciseEntryForm, WeightEntryForm, FoodForm\nfrom django.http import JsonResponse\nfrom django.db.models import Sum, F\nfrom django.core.exceptions import ValidationError\nfrom datetime import date\n\n\ndef landing_page(request):\n    # Logic for landing page (introduction, features, testimonials, etc.)\n    return render(request, 'myapp/landing_page.html')\n\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        profile_form = UserProfileForm(request.POST)\n        if form.is_valid() and profile_form.is_valid():\n            user = form.save()\n            profile = profile_form.save(commit=False)\n            profile.user = user\n            profile.save()\n\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = UserCreationForm()\n        profile_form = UserProfileForm()\n    return render(request, 'myapp/signup.html', {'form': form, 'profile_form': profile_form})\n\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'myapp/login.html', {'form': form})\n\n\n@login_required\ndef user_logout(request):\n    logout(request)\n    return redirect('landing_page')\n\n\n@login_required\ndef dashboard(request):\n    today = date.today()\n    # Get daily calorie summary.\n    food_entries = FoodEntry.objects.filter(user=request.user, date=today)\n    total_calories_consumed = food_entries.aggregate(Sum(F('food__calories') * F('quantity')))['food__calories__sum'] or 0\n    # Get Exercise summary\n    exercise_entries = ExerciseEntry.objects.filter(user=request.user, date=today)\n    total_calories_burned = exercise_entries.aggregate(Sum('calories_burned'))['calories_burned__sum'] or 0\n\n    # Fetch user's calorie goal.\n    try:\n      goal = Goal.objects.get(user=request.user, end_date__gte=today, start_date__lte=today)\n      target_calorie_intake = goal.target_calorie_intake\n    except Goal.DoesNotExist:\n      target_calorie_intake = None\n\n    remaining_calories = target_calorie_intake - total_calories_consumed + total_calories_burned if target_calorie_intake else None\n    context = {\n      'total_calories_consumed': round(total_calories_consumed,2),\n      'total_calories_burned': round(total_calories_burned,2),\n      'remaining_calories' : round(remaining_calories,2) if remaining_calories else None,\n      'target_calorie_intake': target_calorie_intake\n\n    }\n    return render(request, 'myapp/dashboard.html', context)\n\n@login_required\ndef add_food_entry(request):\n    if request.method == 'POST':\n        form = FoodEntryForm(request.POST, user=request.user)\n        if form.is_valid():\n            food_entry = form.save(commit=False)\n            food_entry.user = request.user\n            food_entry.save()\n            return redirect('dashboard')  # Redirect to dashboard or food log page\n    else:\n        form = FoodEntryForm(user=request.user)\n    return render(request, 'myapp/add_food_entry.html', {'form': form})\n\n@login_required\ndef add_exercise_entry(request):\n    if request.method == 'POST':\n        form = ExerciseEntryForm(request.POST)\n        if form.is_valid():\n          exercise_entry = form.save(commit=False)\n          exercise_entry.user = request.user\n          exercise = exercise_entry.exercise\n          duration = exercise_entry.duration\n          exercise_entry.calories_burned = (exercise.calories_burned_per_hour / 60) * duration\n          exercise_entry.save()\n          return redirect('dashboard')  # Redirect to dashboard or exercise log page\n    else:\n        form = ExerciseEntryForm()\n    return render(request, 'myapp/add_exercise_entry.html', {'form': form})\n\n\n@login_required\ndef view_progress(request):\n    # Implement logic for progress charts and analysis\n    return render(request, 'myapp/view_progress.html')\n\n@login_required\ndef profile_settings(request):\n  try:\n    profile = request.user.userprofile\n  except UserProfile.DoesNotExist:\n    profile = UserProfile.objects.create(user=request.user)\n\n  if request.method == 'POST':\n        form = UserProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            return redirect('profile_settings')\n  else:\n        form = UserProfileForm(instance=profile)\n  return render(request, 'myapp/profile_settings.html', {'form':form})\n\n@login_required\ndef search_food(request):\n    query = request.GET.get('q')\n    results = []\n    if query:\n      foods = Food.objects.filter(name__icontains=query)\n      for food in foods:\n        results.append({\n            'id': food.id,\n            'name': food.name,\n            'brand': food.brand,\n            'calories': food.calories,\n            'protein': food.protein,\n            'carbohydrates': food.carbohydrates,\n            'fat': food.fat,\n            'serving_size_grams': food.serving_size_grams,\n            'serving_size_unit': food.serving_size_unit,\n        })\n    return JsonResponse({'results': results})\n\n@login_required\ndef add_food(request):\n    if request.method == 'POST':\n        form = FoodForm(request.POST)\n        if form.is_valid():\n            food = form.save()\n            return JsonResponse({'status': 'success', 'food_id': food.id, 'food_name': food.name})\n        else:\n          return JsonResponse({'status': 'error', 'errors': form.errors}, status=400)\n    return render(request, 'myapp/add_food.html', {'form':FoodForm()})\n\n@login_required\ndef add_weight_entry(request):\n    if request.method == 'POST':\n        form = WeightEntryForm(request.POST)\n        if form.is_valid():\n            weight_entry = form.save(commit=False)\n            weight_entry.user = request.user\n            weight_entry.save()\n            return redirect('view_progress')\n    else:\n        form = WeightEntryForm()\n    return render(request, 'myapp/add_weight_entry.html', {'form': form})\n\n@login_required\ndef edit_food_entry(request, entry_id):\n    entry = get_object_or_404(FoodEntry, id=entry_id, user=request.user)\n\n    if request.method == 'POST':\n        form = FoodEntryForm(request.POST, instance=entry, user=request.user)\n        if form.is_valid():\n            form.save()\n            return redirect('dashboard') #or a more appropriate view\n    else:\n        form = FoodEntryForm(instance=entry, user=request.user)\n\n    return render(request, 'myapp/edit_food_entry.html', {'form': form, 'entry':entry})\n\n@login_required\ndef delete_food_entry(request, entry_id):\n    entry = get_object_or_404(FoodEntry, id=entry_id, user=request.user)\n    if request.method == 'POST':\n      entry.delete()\n      return redirect('dashboard')\n    return render(request, 'myapp/delete_food_entry.html', {'entry': entry})\n\n@login_required\ndef edit_exercise_entry(request, entry_id):\n    entry = get_object_or_404(ExerciseEntry, id=entry_id, user=request.user)\n\n    if request.method == 'POST':\n        form = ExerciseEntryForm(request.POST, instance=entry)\n        if form.is_valid():\n          exercise_entry = form.save(commit=False)\n          exercise = exercise_entry.exercise\n          duration = exercise_entry.duration\n          exercise_entry.calories_burned = (exercise.calories_burned_per_hour / 60) * duration\n          exercise_entry.save()\n          return redirect('dashboard')\n    else:\n        form = ExerciseEntryForm(instance=entry)\n\n    return render(request, 'myapp/edit_exercise_entry.html', {'form': form, 'entry': entry})\n\n\n@login_required\ndef delete_exercise_entry(request, entry_id):\n    entry = get_object_or_404(ExerciseEntry, id=entry_id, user=request.user)\n    if request.method == 'POST':\n        entry.delete()\n        return redirect('dashboard')\n    return render(request, 'myapp/delete_exercise_entry.html', {'entry': entry})\n"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.landing_page, name='landing_page'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('add_food_entry/', views.add_food_entry, name='add_food_entry'),\n    path('add_exercise_entry/', views.add_exercise_entry, name='add_exercise_entry'),\n    path('progress/', views.view_progress, name='view_progress'),\n    path('profile/', views.profile_settings, name='profile_settings'),\n    path('search_food/', views.search_food, name='search_food'),\n    path('food/add/', views.add_food, name='add_food'),\n    path('add_weight_entry/', views.add_weight_entry, name='add_weight_entry'),\n    path('food_entry/<int:entry_id>/edit/', views.edit_food_entry, name='edit_food_entry'),\n    path('food_entry/<int:entry_id>/delete/', views.delete_food_entry, name='delete_food_entry'),\n    path('exercise_entry/<int:entry_id>/edit/', views.edit_exercise_entry, name='edit_exercise_entry'),\n    path('exercise_entry/<int:entry_id>/delete/', views.delete_exercise_entry, name='delete_exercise_entry'),\n\n]"}, {"file": "forms.py", "path": "myapp/forms.py", "code": "from django import forms\nfrom .models import UserProfile, Goal, FoodEntry, ExerciseEntry, Food, WeightEntry\nfrom django.contrib.auth.models import User\n\n\nclass UserProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = ['date_of_birth', 'gender', 'height', 'weight', 'activity_level']\n\n\nclass GoalForm(forms.ModelForm):\n    class Meta:\n        model = Goal\n        fields = ['goal_type', 'target_weight', 'target_calorie_intake', 'start_date', 'end_date']\n\n\nclass FoodEntryForm(forms.ModelForm):\n    food = forms.ModelChoiceField(queryset=Food.objects.all(), required=False)\n    food_name = forms.CharField(max_length=255, required=False)  # Custom Food\n    class Meta:\n        model = FoodEntry\n        fields = ['food', 'meal_type', 'quantity', 'date', 'food_name']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}),\n        }\n    def __init__(self, *args, **kwargs):\n        self.user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n\n\n    def clean(self):\n      cleaned_data = super().clean()\n      food = cleaned_data.get('food')\n      food_name = cleaned_data.get('food_name')\n      if not food and not food_name:\n          raise forms.ValidationError(\"You must select a food from the database or enter a custom food.\")\n      return cleaned_data\n\nclass ExerciseEntryForm(forms.ModelForm):\n    class Meta:\n        model = ExerciseEntry\n        fields = ['exercise', 'duration', 'date']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}),\n        }\n\n\nclass FoodForm(forms.ModelForm):\n  class Meta:\n    model = Food\n    fields = ['name','brand', 'calories', 'protein', 'carbohydrates', 'fat', 'serving_size_grams', 'serving_size_unit', 'barcode']\n\n\nclass WeightEntryForm(forms.ModelForm):\n    class Meta:\n        model = WeightEntry\n        fields = ['weight', 'date']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}),\n        }\n"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import UserProfile, Goal, Food, FoodEntry, Exercise, ExerciseEntry, WeightEntry\n\n# Register your models here.\nadmin.site.register(UserProfile)\nadmin.site.register(Goal)\nadmin.site.register(Food)\nadmin.site.register(FoodEntry)\nadmin.site.register(Exercise)\nadmin.site.register(ExerciseEntry)\nadmin.site.register(WeightEntry)"}, {"file": "0001_initial.py", "path": "myapp/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-21 19:20\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django.utils.timezone\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Exercise',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('calories_burned_per_hour', models.FloatField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Food',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('brand', models.CharField(blank=True, max_length=255, null=True)),\n                ('calories', models.FloatField()),\n                ('protein', models.FloatField()),\n                ('carbohydrates', models.FloatField()),\n                ('fat', models.FloatField()),\n                ('serving_size_grams', models.FloatField(blank=True, null=True)),\n                ('serving_size_unit', models.CharField(blank=True, max_length=50, null=True)),\n                ('barcode', models.CharField(blank=True, max_length=255, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('date_of_birth', models.DateField(blank=True, null=True)),\n                ('gender', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10, null=True)),\n                ('height', models.FloatField(blank=True, null=True)),\n                ('weight', models.FloatField(blank=True, null=True)),\n                ('activity_level', models.CharField(blank=True, max_length=50, null=True)),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='WeightEntry',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('weight', models.FloatField()),\n                ('date', models.DateField(default=django.utils.timezone.now)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Goal',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('goal_type', models.CharField(choices=[('Lose Weight', 'Lose Weight'), ('Maintain Weight', 'Maintain Weight'), ('Gain Weight', 'Gain Weight')], max_length=20)),\n                ('target_weight', models.FloatField(blank=True, null=True)),\n                ('target_calorie_intake', models.IntegerField(blank=True, null=True)),\n                ('start_date', models.DateField(default=django.utils.timezone.now)),\n                ('end_date', models.DateField(blank=True, null=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='FoodEntry',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('meal_type', models.CharField(choices=[('Breakfast', 'Breakfast'), ('Lunch', 'Lunch'), ('Dinner', 'Dinner'), ('Snack', 'Snack')], max_length=20)),\n                ('quantity', models.FloatField()),\n                ('date', models.DateField(default=django.utils.timezone.now)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('food', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.food')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='ExerciseEntry',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('duration', models.FloatField()),\n                ('date', models.DateField(default=django.utils.timezone.now)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('calories_burned', models.FloatField(blank=True, null=True)),\n                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='myapp.exercise')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}], "11": "```json\n[\n    {\n        \"file\": \"views.py\",\n        \"path\": \"password_generator_app/views.py\",\n        \"code\":\n            \"\"\"\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    # Logic for displaying welcome message and navigation button\n    context = {\n        'welcome_message': 'Welcome to the Password Generator!',  # Example, can be dynamic\n        'generator_url': '/generate/'  # Assuming '/generate/' is the URL for the generator page\n    }\n    return render(request, 'password_generator_app/home.html', context)\n\ndef about(request):\n    # Logic for displaying the about page description\n    context = {\n        'description': 'This website generates secure and random passwords...' # Example, can load from database or a separate file.\n    }\n    return render(request, 'password_generator_app/about.html', context)\n\ndef generate_password(request): #Place holder function\n    return HttpResponse(\"Password generator page - To be implemented.\")\n\"\"\"\n    },\n    {\n        \"file\": \"urls.py\",\n        \"path\": \"password_generator_app/urls.py\",\n        \"code\":\n            \"\"\"\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n     path('generate/', views.generate_password, name='generate_password'),\n]\n\"\"\"\n    },\n    {\n        \"file\": \"urls.py\",\n        \"path\": \"password_generator_project/urls.py\",\n        \"code\":\n            \"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator_app.urls')),  # Include app-specific URLs\n]\n\"\"\"\n    },\n    {\n        \"file\": \"home.html\",\n        \"path\": \"password_generator_app/templates/password_generator_app/home.html\",\n        \"code\":\n            \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Home - Password Generator</title>\n</head>\n<body>\n    <h1>{{ welcome_message }}</h1>\n    <a href=\\\\\"{{ generator_url }}\\\\\"><button>Generate Password</button></a>\n</body>\n</html>\n\"\"\"\n    },\n    {\n        \"file\": \"about.html\",\n        \"path\": \"password_generator_app/templates/password_generator_app/about.html\",\n        \"code\":\n            \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>About - Password Generator</title>\n</head>\n<body>\n    <h1>About</h1>\n    <p>{{ description }}</p>\n</body>\n</html>\n\"\"\"\n    },\n    {\n            \"file\": \"settings.py\",\n            \"path\": \"password_generator_project/settings.py\",\n            \"code\":\n                \"\"\"\n# ... other settings ...\n\nINSTALLED_APPS = [\n    # ... other apps ...\n    'password_generator_app',  # Add your app here\n]\n\n# ... other settings ...\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],  # Or specify a project-level templates directory\n        'APP_DIRS': True, # Add\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n                \"\"\"\n    }\n\n]\n```\n", "12": "```json\n[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"expense_tracker/models.py\",\n    \"code\":\n      \"\"\"\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom django.core.exceptions import ValidationError\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    # Add other user-related fields if needed (e.g., role)\n\n    def __str__(self):\n        return self.user.username\n\nclass ExpenseCategory(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Claim(models.Model):\n    STATUS_CHOICES = (\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected'),\n    )\n    employee = models.ForeignKey(User, on_delete=models.CASCADE, related_name='claims')\n    category = models.ForeignKey(ExpenseCategory, on_delete=models.SET_NULL, null=True)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    date = models.DateField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    submission_date = models.DateTimeField(auto_now_add=True)\n    approved_or_rejected_date = models.DateTimeField(null=True, blank=True)\n     \n    def __str__(self):\n        return f\"Claim {self.pk} - {self.employee.username} - {self.status}\"\n\nclass SupportingDocument(models.Model):\n    claim = models.ForeignKey(Claim, on_delete=models.CASCADE, related_name='documents')\n    document = models.FileField(upload_to='supporting_documents/')\n    uploaded_at = models.DateTimeField(auto_now_add=True)\n    \n    def __str__(self):\n      return f'Doc for {self.claim}'\n\n\nclass Budget(models.Model):\n    category = models.ForeignKey(ExpenseCategory, on_delete=models.CASCADE)\n    budget_limit = models.DecimalField(max_digits=10, decimal_places=2)\n    start_date = models.DateField()\n    end_date = models.DateField()\n\n    def __str__(self):\n        return f\"{self.category.name} Budget ({self.start_date} - {self.end_date})\"\n    \n    def clean(self):\n        if self.start_date >= self.end_date:\n            raise ValidationError(\"End date must be after start date.\")\n    \nclass BudgetAlert(models.Model):\n    budget = models.ForeignKey(Budget, on_delete=models.CASCADE)\n    threshold_percentage = models.DecimalField(max_digits=5, decimal_places=2) #e.g. 90.00 for 90%\n    is_triggered = models.BooleanField(default=False)\n    \n    def __str__(self):\n        return f\"{self.budget} alert at {self.threshold_percentage}%\"\n\n\"\"\"\n  },\n  {\n    \"file\": \"forms.py\",\n    \"path\": \"expense_tracker/forms.py\",\n    \"code\":\n      \"\"\"\nfrom django import forms\nfrom .models import Claim, SupportingDocument, Budget, ExpenseCategory\n\nclass LoginForm(forms.Form):\n    username = forms.CharField(max_length=150)\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass PasswordResetForm(forms.Form):  #Simplified for the skeleton\n    email = forms.EmailField()\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description', 'date']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}),\n        }\n\nclass DocumentForm(forms.ModelForm):\n    class Meta:\n        model = SupportingDocument\n        fields = ['document']\n\nclass ClaimApprovalForm(forms.Form): #Admin approves or rejects\n    status = forms.ChoiceField(choices=[('Approved', 'Approved'), ('Rejected', 'Rejected')])\n    rejection_reason = forms.CharField(widget=forms.Textarea, required=False)\n\nclass BudgetForm(forms.ModelForm):\n    class Meta:\n        model = Budget\n        fields = ['category', 'budget_limit', 'start_date', 'end_date']\n        widgets = {\n            'start_date': forms.DateInput(attrs={'type': 'date'}),\n            'end_date': forms.DateInput(attrs={'type': 'date'}),\n        }\n    \nclass ExpenseCategoryForm(forms.ModelForm):\n    class Meta:\n        model = ExpenseCategory\n        fields = ['name']\n        \nclass BudgetAlertForm(forms.Form):\n    threshold_percentage = forms.DecimalField(max_digits=5, decimal_places=2, min_value=0, max_value=100)\n\n\"\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"expense_tracker/views.py\",\n    \"code\":\n      \"\"\"\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.forms import AuthenticationForm\nfrom django.contrib.auth import login, logout, authenticate\nfrom .forms import ClaimForm, DocumentForm, ClaimApprovalForm, LoginForm, PasswordResetForm, BudgetForm, ExpenseCategoryForm, BudgetAlertForm\nfrom .models import Claim, Budget, ExpenseCategory, SupportingDocument, BudgetAlert\nfrom django.db.models import Sum, F, Q, Case, When, Value, DecimalField\nfrom django.contrib import messages\nfrom django.http import JsonResponse, HttpResponse\nfrom django.core.exceptions import PermissionDenied\nfrom django.utils import timezone\nimport json\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            password = form.cleaned_data['password']\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)\n                if user.is_staff:\n                    return redirect('admin_dashboard')\n                else:\n                    return redirect('employee_dashboard')\n            else:\n                #form.add_error(None, \"Invalid username or password.\") #Non-field error\n                messages.error(request, \"Invalid username or password.\")\n\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n\ndef password_reset_request(request): #Simplified\n    if request.method == \"POST\":\n        form = PasswordResetForm(request.POST)\n        if form.is_valid():\n            #In a real app, send email here.\n            messages.success(request, \"Password reset instructions sent (if email exists).\")\n            return redirect('login')\n    else:\n        form = PasswordResetForm()\n    return render(request, 'password_reset.html', {'form':form})\n    \n\n@login_required\ndef employee_dashboard(request):\n    if request.user.is_staff:\n        return redirect('admin_dashboard')\n\n    claims = Claim.objects.filter(employee=request.user).order_by('-submission_date')\n    \n    if request.method == 'POST':\n        claim_form = ClaimForm(request.POST)\n        document_form = DocumentForm(request.POST, request.FILES)\n        \n        if claim_form.is_valid() and document_form.is_valid():\n            claim = claim_form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            \n            for file in request.FILES.getlist('document'):\n                SupportingDocument.objects.create(claim=claim, document=file)\n\n            messages.success(request, 'Claim submitted successfully!')\n            return redirect('employee_dashboard')\n    else:\n      claim_form = ClaimForm()\n      document_form = DocumentForm()\n\n    return render(request, 'employee_dashboard.html', {'claims': claims, 'claim_form': claim_form, 'document_form':document_form})\n\n@login_required\ndef view_claim(request, claim_id):\n  if request.user.is_staff:\n      claim = get_object_or_404(Claim, pk=claim_id)\n  else:\n      claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n  documents = claim.documents.all()\n  return render(request, 'view_claim.html', {'claim': claim, 'documents': documents})\n\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user, status='Pending')\n\n    if request.method == 'POST':\n        claim_form = ClaimForm(request.POST, instance=claim)\n        # Handle document updates (add/remove)\n        if claim_form.is_valid():\n\n            claim_form.save()\n            messages.success(request, 'Claim updated successfully!')\n            return redirect('view_claim', claim_id=claim.id)\n    else:\n        claim_form = ClaimForm(instance=claim)\n\n    documents = claim.documents.all() #Get existing documents\n    return render(request, 'edit_claim.html', {'claim_form': claim_form, 'claim': claim, 'documents':documents})\n\n@login_required\ndef delete_document(request, document_id):\n    document = get_object_or_404(SupportingDocument, pk=document_id)\n    claim_id = document.claim.id\n\n    # Basic permission check: Only the claim owner or admin can delete.\n    if request.user != document.claim.employee and not request.user.is_staff:\n        raise PermissionDenied()\n\n    document.delete()\n    messages.success(request, \"Document deleted successfully.\")\n    return redirect('edit_claim', claim_id=claim_id)\n\n\n@login_required\ndef admin_dashboard(request):\n    if not request.user.is_staff:\n        return redirect('employee_dashboard')\n\n    pending_claims = Claim.objects.filter(status='Pending').order_by('-submission_date')\n    \n    #Filters\n    status_filter = request.GET.get('status')\n    employee_filter = request.GET.get('employee')\n    date_from = request.GET.get('date_from')\n    date_to = request.GET.get('date_to')\n    category_filter = request.GET.get('category')\n    search_query = request.GET.get('search')\n\n    \n    claims = Claim.objects.all().order_by('-submission_date')\n    \n    if status_filter:\n        claims = claims.filter(status=status_filter)\n    if employee_filter:\n        claims = claims.filter(employee__username=employee_filter) #Assumes username\n    if date_from:\n        claims = claims.filter(date__gte=date_from)\n    if date_to:\n        claims = claims.filter(date__lte=date_to)\n    if category_filter:\n        claims = claims.filter(category__name=category_filter)\n    if search_query:\n         claims = claims.filter(Q(description__icontains=search_query) | Q(employee__username__icontains=search_query) | Q(id__icontains=search_query))\n\n\n    return render(request, 'admin_dashboard.html', {\n        'pending_claims': pending_claims,\n        'claims': claims,\n        'status_filter': status_filter,\n        'employee_filter': employee_filter,\n        'date_from': date_from,\n        'date_to': date_to,\n        'category_filter':category_filter,\n        'search_query':search_query\n    })\n\n@login_required\ndef approve_reject_claim(request, claim_id):\n    if not request.user.is_staff:\n        raise PermissionDenied()\n\n    claim = get_object_or_404(Claim, pk=claim_id)\n\n    if request.method == 'POST':\n        form = ClaimApprovalForm(request.POST)\n        if form.is_valid():\n            status = form.cleaned_data['status']\n            rejection_reason = form.cleaned_data['rejection_reason']\n\n            claim.status = status\n            claim.approved_or_rejected_date = timezone.now()\n            if status == 'Rejected':\n                claim.rejection_reason = rejection_reason\n            else:\n                claim.rejection_reason = \"\" #Clear reason if approved\n            claim.save()\n            messages.success(request, f\"Claim {status.lower()} successfully.\")\n            return redirect('admin_dashboard')\n\n    else:\n        form = ClaimApprovalForm()\n\n    return render(request, 'approve_reject_claim.html', {'claim': claim, 'form': form})\n\n@login_required\ndef budget_control(request):\n    if not request.user.is_staff:\n        raise PermissionDenied\n\n    categories = ExpenseCategory.objects.all()\n\n    if request.method == 'POST':\n        if 'add_category' in request.POST:\n            category_form = ExpenseCategoryForm(request.POST)\n            if category_form.is_valid():\n                category_form.save()\n                messages.success(request, \"Category added successfully.\")\n                return redirect('budget_control')  # Redirect to refresh the page\n        elif 'add_budget' in request.POST:\n            budget_form = BudgetForm(request.POST)\n            if budget_form.is_valid():\n                budget_form.save()\n                messages.success(request, \"Budget added successfully.\")\n                return redirect('budget_control') # Redirect to refresh\n        elif 'add_alert' in request.POST:\n            alert_form = BudgetAlertForm(request.POST)\n            budget_id = request.POST.get('budget_id') # Hidden field in form\n            budget = get_object_or_404(Budget, id=budget_id)\n\n            if alert_form.is_valid():\n                threshold = alert_form.cleaned_data['threshold_percentage']\n                BudgetAlert.objects.update_or_create(budget=budget, defaults={'threshold_percentage':threshold})\n                messages.success(request,\"Budget Alert Set.\")\n                return redirect('budget_control')\n\n\n    else:\n        category_form = ExpenseCategoryForm()\n        budget_form = BudgetForm()\n        alert_form = BudgetAlertForm()\n\n    # Budget vs. Actual Spending\n    budget_data = []\n    for category in categories:\n        budgets = Budget.objects.filter(category=category).order_by('-end_date') #Get most recent for each\n        \n        for budget in budgets:\n            total_spent = Claim.objects.filter(\n                category=category,\n                date__range=(budget.start_date, budget.end_date),\n                status='Approved'\n            ).aggregate(total_spent=Sum('amount'))['total_spent'] or 0\n\n            remaining_budget = budget.budget_limit - total_spent\n\n            try:\n                alert = BudgetAlert.objects.get(budget=budget)\n                threshold_amount = budget.budget_limit * (alert.threshold_percentage / 100)\n                \n                if remaining_budget <= threshold_amount and alert.is_triggered == False:\n                   alert.is_triggered = True\n                   alert.save()\n                   messages.warning(request, f\"Budget Alert for {budget.category.name}! Remaining Budget is low.\")\n\n            except BudgetAlert.DoesNotExist:\n                alert = None\n\n            budget_data.append({\n                'category': category.name,\n                'budget_limit': budget.budget_limit,\n                'start_date': budget.start_date,\n                'end_date': budget.end_date,\n                'total_spent': total_spent,\n                'remaining_budget': remaining_budget,\n                'budget':budget,\n                'alert': alert,\n            })\n\n\n    return render(request, 'budget_control.html', {\n        'categories': categories,\n        'budget_data': budget_data,\n        'category_form': category_form,\n        'budget_form': budget_form,\n        'alert_form': alert_form\n    })\n\n@login_required\ndef budget_history(request, budget_id):\n    if not request.user.is_staff:\n        raise PermissionDenied\n\n    budget = get_object_or_404(Budget, id=budget_id)\n    # In a real application, you might have a separate model to track budget history.\n    # This is a simplified example assuming you just want to see the current budget.\n\n    return render(request, 'budget_history.html', {'budget': budget})\n\n\n\n@login_required\ndef generate_report(request):\n    if not request.user.is_staff:\n        raise PermissionDenied\n\n    # Example: Get spending per category for a specific period\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n\n    if start_date and end_date:\n        report_data = Claim.objects.filter(\n            date__range=(start_date, end_date),\n            status='Approved'\n        ).values('category__name').annotate(\n            total_spent=Sum('amount')\n        )\n\n        # Convert to a format suitable for JSON response or template rendering\n        report_list = [{'category': item['category__name'], 'total_spent': float(item['total_spent'])} for item in report_data]\n\n        if request.GET.get('format') == 'json':\n            return JsonResponse(report_list, safe=False)\n        else:\n            return render(request, 'report.html', {'report_data': report_list, 'start_date':start_date, 'end_date':end_date})\n    \n    else:\n        return render(request, 'report.html')\n\n@login_required\ndef export_data(request):\n    if not request.user.is_staff:\n        raise PermissionDenied()\n    \n    #Filter parameters from request.GET (similar to admin_dashboard)\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    category = request.GET.get('category')\n    #... other filters\n    \n    claims = Claim.objects.all()\n    \n    # Apply Filters.\n    if start_date:\n        claims = claims.filter(date__gte=start_date)\n    if end_date:\n        claims = claims.filter(date__lte=end_date)\n    if category:\n        claims = claims.filter(category__name=category)\n\n    \n    format = request.GET.get('format', 'csv') #Default to CSV\n\n    if format == 'csv':\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = 'attachment; filename=\"expense_data.csv\"'\n\n        writer = csv.writer(response)\n        writer.writerow(['Claim ID', 'Employee', 'Category', 'Amount', 'Date', 'Description', 'Status'])  # Header row\n\n        for claim in claims:\n            writer.writerow([claim.id, claim.employee.username, claim.category.name, claim.amount, claim.date, claim.description, claim.status])\n\n        return response\n    \n    elif format == 'json':\n        # Convert queryset to JSON\n        data = list(claims.values('id', 'employee__username', 'category__name', 'amount', 'date', 'description', 'status'))\n        #Ensure Decimal and date are serializable.\n        for item in data:\n            item['amount'] = float(item['amount'])\n            item['date'] = item['date'].isoformat()\n\n        return JsonResponse(data, safe=False)\n    \n    else:\n      return HttpResponse(\"Unsupported format\", status=400)\n\n\n\ndef user_logout(request):\n    logout(request)\n    return redirect('login')\n\n\"\"\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"expense_tracker/urls.py\",\n    \"code\":\n      \"\"\"\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('password_reset/', views.password_reset_request, name='password_reset_request'),\n    path('employee/', views.employee_dashboard, name='employee_dashboard'),\n    path('admin/', views.admin_dashboard, name='admin_dashboard'),\n    path('admin/claim/<int:claim_id>/approve/', views.approve_reject_claim, name='approve_reject_claim'),\n    path('budget/', views.budget_control, name='budget_control'),\n    path('budget/<int:budget_id>/history/', views.budget_history, name='budget_history'),\n    path('report/', views.generate_report, name='generate_report'),\n    path('export/', views.export_data, name='export_data'),\n    path('claim/<int:claim_id>/', views.view_claim, name='view_claim'),\n    path('claim/<int:claim_id>/edit/', views.edit_claim, name='edit_claim'),\n    path('document/<int:document_id>/delete/', views.delete_document, name='delete_document'),\n]\n\"\"\"\n  },\n    {\n    \"file\": \"admin.py\",\n    \"path\": \"expense_tracker/admin.py\",\n    \"code\":\n      \"\"\"\nfrom django.contrib import admin\nfrom .models import Claim, ExpenseCategory, Budget, SupportingDocument, UserProfile, BudgetAlert\n\nadmin.site.register(Claim)\nadmin.site.register(ExpenseCategory)\nadmin.site.register(Budget)\nadmin.site.register(SupportingDocument)\nadmin.site.register(UserProfile)\nadmin.site.register(BudgetAlert)\n\"\"\"\n  },\n  {\n        \"file\": \"0001_initial.py\",\n        \"path\": \"expense_tracker/migrations/0001_initial.py\",\n        \"code\": \"\"\"\n# Generated by Django 4.2.7 on 2023-11-21 18:09\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('budget_limit', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('start_date', models.DateField()),\n                ('end_date', models.DateField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('date', models.DateField()),\n                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('submission_date', models.DateTimeField(auto_now_add=True)),\n                ('approved_or_rejected_date', models.DateTimeField(blank=True, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='ExpenseCategory',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='UserProfile',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportingDocument',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('document', models.FileField(upload_to='supporting_documents/')),\n                ('uploaded_at', models.DateTimeField(auto_now_add=True)),\n                ('claim', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='expense_tracker.claim')),\n            ],\n        ),\n        migrations.AddField(\n            model_name='claim',\n            name='category',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='expense_tracker.expensecategory'),\n        ),\n        migrations.AddField(\n            model_name='claim',\n            name='employee',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='claims', to=settings.AUTH_USER_MODEL),\n        ),\n        migrations.CreateModel(\n            name='BudgetAlert',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('threshold_percentage', models.DecimalField(decimal_places=2, max_digits=5)),\n                ('is_triggered', models.BooleanField(default=False)),\n                ('budget', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expense_tracker.budget')),\n            ],\n        ),\n        migrations.AddField(\n            model_name='budget',\n            name='category',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='expense_tracker.expensecategory'),\n        ),\n    ]\n\n        \"\"\"\n  },\n    {\n    \"file\": \"apps.py\",\n    \"path\": \"expense_tracker/apps.py\",\n    \"code\":\n      \"\"\"\nfrom django.apps import AppConfig\n\n\nclass ExpenseTrackerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'expense_tracker'\n\n\"\"\"\n  },\n    {\n    \"file\": \"__init__.py\",\n    \"path\": \"expense_tracker/__init__.py\",\n    \"code\":\n      \"\"\"\n\"\"\"\n  },\n  {\n    \"file\": \"__init__.py\",\n    \"path\": \"expense_tracker/migrations/__init__.py\",\n    \"code\":\n      \"\"\"\n\"\"\"\n  },\n    {\n    \"file\": \"settings.py\",\n    \"path\": \"expense_project/settings.py\",\n    \"code\":\n      \"\"\"\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expense_tracker', #Your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'expense_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n     'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n\"\"\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"expense_project/urls.py\",\n    \"code\":\n      \"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('expense_tracker.urls')), #Include app urls\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n\n\"\"\"\n  },\n    {\n    \"file\": \"wsgi.py\",\n    \"path\": \"expense_project/wsgi.py\",\n    \"code\":\n      \"\"\"\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_project.settings')\n\napplication = get_wsgi_application()\n\"\"\"\n  },\n      {\n    \"file\": \"asgi.py\",\n    \"path\": \"expense_project/asgi.py\",\n    \"code\":\n      \"\"\"\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_project.settings')\n\napplication = get_asgi_application()\n\n\"\"\"\n  }\n]\n```\n", "13": [{"file": "models.py", "path": "customer_management/models.py", "code": "from django.db import models\nfrom django.utils import timezone\nfrom datetime import date\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    sex = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    @property\n    def age(self):\n        if self.birthday:\n            today = date.today()\n            return today.year - self.birthday.year - ((today.month, today.day) < (self.birthday.month, self.birthday.day))\n        return None\n\n    def __str__(self):\n        return self.name\n\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ('customer', 'product')\n    \n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name}'\n\n\nclass PurchaseRecord(models.Model):\n    date_time = models.DateTimeField(default=timezone.now)\n    product = models.ForeignKey(Product, on_delete=models.SET_NULL, null=True)\n    customer = models.ForeignKey(Customer, on_delete=models.SET_NULL, null=True)\n    quantity = models.PositiveIntegerField()\n\n    @property\n    def total_amount(self):\n        if self.product:\n           return self.quantity * self.product.recommended_price\n        return 0\n\n    def __str__(self):\n        return f'{self.date_time} - {self.customer.name} - {self.product.name}'"}, {"file": "forms.py", "path": "customer_management/forms.py", "code": "from django import forms\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\n\nclass CustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = ['name', 'birthday', 'sex', 'company', 'phone_number']\n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = ['name', 'category', 'recommended_price']\n\nclass PurchaseRecordForm(forms.ModelForm):\n\n    class Meta:\n        model = PurchaseRecord\n        fields = ['date_time','product', 'customer', 'quantity']\n\nclass PreferredProductForm(forms.ModelForm):\n     class Meta:\n        model = PreferredProduct\n        fields = ['customer', 'product']"}, {"file": "views.py", "path": "customer_management/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.db.models import Q, Sum, Count\nfrom django.http import HttpResponse\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom .forms import CustomerForm, ProductForm, PurchaseRecordForm, PreferredProductForm\nfrom django.views import View\nfrom django.utils.decorators import method_decorator\nfrom django.views.decorators.http import require_http_methods\nfrom datetime import datetime, date\n\n\n# Customer Management Views\n@require_http_methods([\"GET\", \"POST\"])\ndef customer_add(request):\n    if request.method == 'POST':\n        form = CustomerForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm()\n    return render(request, 'customer_management/customer_form.html', {'form': form, 'action': 'Add'})\n\n@require_http_methods([\"GET\", \"POST\"])\ndef customer_edit(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        form = CustomerForm(request.POST, instance=customer)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm(instance=customer)\n    return render(request, 'customer_management/customer_form.html', {'form': form, 'action': 'Edit'})\n\n@require_http_methods([\"GET\"])\ndef customer_delete(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    customer.delete()\n    return redirect('customer_list')\n\n@require_http_methods([\"GET\"])\ndef customer_view(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    preferred_products = PreferredProduct.objects.filter(customer=customer)\n    purchase_history = PurchaseRecord.objects.filter(customer=customer).order_by('-date_time')\n    return render(request, 'customer_management/customer_detail.html', {'customer': customer, 'preferred_products': preferred_products, 'purchase_history': purchase_history})\n\n@require_http_methods([\"GET\"])\ndef customer_search(request):\n    query = request.GET.get('q')\n    if query:\n        customers = Customer.objects.filter(\n            Q(name__icontains=query) | Q(phone_number__icontains=query) | Q(company__icontains=query)\n        )\n    else:\n        customers = Customer.objects.none()\n    return render(request, 'customer_management/customer_search_results.html', {'customers': customers, 'query':query})\n\n@require_http_methods([\"GET\"])\ndef customer_list(request):\n    customers = Customer.objects.all().order_by('name')\n    return render(request, 'customer_management/customer_list.html', {'customers': customers})\n\n@require_http_methods([\"GET\", \"POST\"])\ndef preferred_product_add(request):\n    if request.method == 'POST':\n        form = PreferredProductForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')  # Or redirect to a more appropriate page\n    else:\n        form = PreferredProductForm()\n    return render(request, 'customer_management/preferredproduct_form.html', {'form': form})\n\n\n@require_http_methods([\"GET\"])\ndef preferred_product_remove(request, customer_id, product_id):\n    preferred_product = get_object_or_404(PreferredProduct, customer_id=customer_id, product_id=product_id)\n    preferred_product.delete()\n    return redirect('customer_view', pk=customer_id)\n\n@require_http_methods([\"GET\"])\ndef preferred_product_view(request, customer_id):\n  customer = get_object_or_404(Customer, pk=customer_id)\n  preferred_products = PreferredProduct.objects.filter(customer=customer)\n  return render(request, 'customer_management/preferred_products_list.html', {'preferred_products': preferred_products, 'customer':customer})\n\n\n\n# Product Management Views\n@require_http_methods([\"GET\", \"POST\"])\ndef product_add(request):\n    if request.method == 'POST':\n        form = ProductForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm()\n    return render(request, 'customer_management/product_form.html', {'form': form, 'action':'Add'})\n\n@require_http_methods([\"GET\", \"POST\"])\ndef product_edit(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    if request.method == 'POST':\n        form = ProductForm(request.POST, instance=product)\n        if form.is_valid():\n            form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm(instance=product)\n    return render(request, 'customer_management/product_form.html', {'form': form, 'action':'Edit'})\n\n@require_http_methods([\"GET\"])\ndef product_delete(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    product.delete()\n    return redirect('product_list')\n\n@require_http_methods([\"GET\"])\ndef product_view(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    return render(request, 'customer_management/product_detail.html', {'product': product})\n\n@require_http_methods([\"GET\"])\ndef product_search(request):\n    query = request.GET.get('q')\n    if query:\n        products = Product.objects.filter(Q(name__icontains=query) | Q(category__icontains=query))\n    else:\n        products = Product.objects.none()\n    return render(request, 'customer_management/product_search_results.html', {'products': products, 'query':query})\n\n@require_http_methods([\"GET\"])\ndef product_list(request):\n    products = Product.objects.all().order_by('name')\n    return render(request, 'customer_management/product_list.html', {'products': products})\n\n\n# Purchase Record Management Views\n@require_http_methods([\"GET\", \"POST\"])\ndef purchase_record_add(request):\n    if request.method == 'POST':\n        form = PurchaseRecordForm(request.POST)\n        if form.is_valid():\n            purchase_record = form.save(commit=False)\n            purchase_record.save()\n            return redirect('purchase_record_list')\n    else:\n        form = PurchaseRecordForm()\n    return render(request, 'customer_management/purchaserecord_form.html', {'form': form, 'action':'Add'})\n\n@require_http_methods([\"GET\", \"POST\"])\ndef purchase_record_edit(request, pk):\n    purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\n    if request.method == 'POST':\n        form = PurchaseRecordForm(request.POST, instance=purchase_record)\n        if form.is_valid():\n            form.save()\n            return redirect('purchase_record_list')\n    else:\n        form = PurchaseRecordForm(instance=purchase_record)\n    return render(request, 'customer_management/purchaserecord_form.html', {'form': form, 'action':'Edit'})\n\n@require_http_methods([\"GET\"])\ndef purchase_record_delete(request, pk):\n    purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\n    purchase_record.delete()\n    return redirect('purchase_record_list')\n\n@require_http_methods([\"GET\"])\ndef purchase_record_view(request, pk):\n    purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\n    return render(request, 'customer_management/purchaserecord_detail.html', {'purchase_record': purchase_record})\n\n@require_http_methods([\"GET\"])\ndef purchase_record_search(request):\n    query = request.GET.get('q')\n    start_date = request.GET.get('start_date')\n    end_date = request.GET.get('end_date')\n    product_id = request.GET.get('product')\n    customer_id = request.GET.get('customer')\n\n    purchase_records = PurchaseRecord.objects.all()\n\n    if start_date and end_date:\n        try:\n            start_date = datetime.strptime(start_date, '%Y-%m-%d').date()\n            end_date = datetime.strptime(end_date, '%Y-%m-%d').date()\n            purchase_records = purchase_records.filter(date_time__date__range=(start_date, end_date))\n        except ValueError:\n            pass  # Handle invalid date format\n\n    if product_id:\n         purchase_records = purchase_records.filter(product_id=product_id)\n\n    if customer_id:\n        purchase_records = purchase_records.filter(customer_id=customer_id)\n\n    return render(request, 'customer_management/purchaserecord_search_results.html', {\n        'purchase_records': purchase_records, 'query':query, 'start_date':start_date, 'end_date':end_date\n    })\n\n\n@require_http_methods([\"GET\"])\ndef purchase_record_list(request):\n    purchase_records = PurchaseRecord.objects.all().order_by('-date_time')\n    return render(request, 'customer_management/purchaserecord_list.html', {'purchase_records': purchase_records})\n\n\n# Marketing Analysis Views\n@require_http_methods([\"GET\"])\ndef total_sales_report(request):\n    start_date_str = request.GET.get('start_date')\n    end_date_str = request.GET.get('end_date')\n\n    try:\n        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date() if start_date_str else None\n        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date() if end_date_str else None\n    except (ValueError, TypeError):\n        start_date = end_date = None\n        # Handle the error, e.g., display an error message\n\n\n    if start_date and end_date:\n      total_sales = PurchaseRecord.objects.filter(date_time__date__range=(start_date, end_date)).aggregate(total_sales=Sum('product__recommended_price', field='quantity*product__recommended_price'))['total_sales'] or 0\n    else:\n      total_sales= PurchaseRecord.objects.aggregate(total_sales=Sum('product__recommended_price', field='quantity*product__recommended_price'))['total_sales'] or 0\n\n    return render(request, 'customer_management/total_sales_report.html', {'total_sales': total_sales, 'start_date':start_date_str, 'end_date':end_date_str})\n\n@require_http_methods([\"GET\"])\ndef sales_by_product_report(request):\n    start_date_str = request.GET.get('start_date')\n    end_date_str = request.GET.get('end_date')\n\n    try:\n        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date() if start_date_str else None\n        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date() if end_date_str else None\n    except (ValueError, TypeError):\n        start_date = end_date = None\n\n    if start_date and end_date:\n      sales_data = PurchaseRecord.objects.filter(date_time__date__range=(start_date, end_date)).values('product__name').annotate(total_quantity=Sum('quantity'), total_revenue=Sum('product__recommended_price', field='quantity * product__recommended_price')).order_by('-total_revenue')\n    else:\n      sales_data = PurchaseRecord.objects.values('product__name').annotate(total_quantity=Sum('quantity'), total_revenue=Sum('product__recommended_price', field='quantity * product__recommended_price')).order_by('-total_revenue')\n\n\n    return render(request, 'customer_management/sales_by_product_report.html', {'sales_data': sales_data,'start_date':start_date_str, 'end_date':end_date_str})\n\n\n@require_http_methods([\"GET\"])\ndef sales_by_category_report(request):\n    start_date_str = request.GET.get('start_date')\n    end_date_str = request.GET.get('end_date')\n\n    try:\n        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date() if start_date_str else None\n        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date() if end_date_str else None\n    except (ValueError, TypeError):\n        start_date = end_date = None\n    if start_date and end_date:\n        sales_data = PurchaseRecord.objects.filter(date_time__date__range=(start_date, end_date)).values('product__category').annotate(total_quantity=Sum('quantity'), total_revenue=Sum('product__recommended_price', field='quantity * product__recommended_price')).order_by('-total_revenue')\n    else:\n        sales_data = PurchaseRecord.objects.values('product__category').annotate(total_quantity=Sum('quantity'), total_revenue=Sum('product__recommended_price', field='quantity * product__recommended_price')).order_by('-total_revenue')\n\n    return render(request, 'customer_management/sales_by_category_report.html', {'sales_data': sales_data, 'start_date':start_date_str, 'end_date':end_date_str})\n\n@require_http_methods([\"GET\"])\ndef customer_purchase_history_report(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    purchase_history = PurchaseRecord.objects.filter(customer=customer).order_by('-date_time')\n    return render(request, 'customer_management/customer_purchase_history_report.html', {'customer': customer, 'purchase_history': purchase_history})\n\n@require_http_methods([\"GET\"])\ndef top_customers_report(request):\n    start_date_str = request.GET.get('start_date')\n    end_date_str = request.GET.get('end_date')\n    try:\n        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date() if start_date_str else None\n        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date() if end_date_str else None\n    except (ValueError, TypeError):\n        start_date = end_date = None\n\n    if start_date and end_date:\n        top_customers = PurchaseRecord.objects.filter(date_time__date__range=(start_date, end_date)).values('customer__name').annotate(total_spent=Sum('product__recommended_price', field='quantity * product__recommended_price')).order_by('-total_spent')\n    else:\n      top_customers = PurchaseRecord.objects.values('customer__name').annotate(total_spent=Sum('product__recommended_price', field='quantity * product__recommended_price')).order_by('-total_spent')\n    return render(request, 'customer_management/top_customers_report.html', {'top_customers': top_customers, 'start_date':start_date_str, 'end_date':end_date_str})\n\n@require_http_methods([\"GET\"])\ndef top_selling_products_report(request):\n    start_date_str = request.GET.get('start_date')\n    end_date_str = request.GET.get('end_date')\n    try:\n        start_date = datetime.strptime(start_date_str, '%Y-%m-%d').date() if start_date_str else None\n        end_date = datetime.strptime(end_date_str, '%Y-%m-%d').date() if end_date_str else None\n    except (ValueError, TypeError):\n        start_date = end_date = None\n\n    if start_date and end_date:\n        top_products = PurchaseRecord.objects.filter(date_time__date__range=(start_date, end_date)).values('product__name').annotate(total_quantity=Sum('quantity')).order_by('-total_quantity')\n    else:\n        top_products = PurchaseRecord.objects.values('product__name').annotate(total_quantity=Sum('quantity')).order_by('-total_quantity')\n    return render(request, 'customer_management/top_selling_products_report.html', {'top_products': top_products,'start_date':start_date_str, 'end_date':end_date_str})\n\n\n@require_http_methods([\"GET\"])\ndef preferred_products_popularity_report(request):\n   preferred_products_popularity = PreferredProduct.objects.values('product__name').annotate(customer_count=Count('customer')).order_by('-customer_count')\n   return render(request, 'customer_management/preferred_products_popularity_report.html', {'preferred_products_popularity': preferred_products_popularity})\n\n\n@require_http_methods([\"GET\"])\ndef customer_segmentation_report(request):\n    # Example: Simple segmentation based on purchase frequency\n    customers = Customer.objects.all()\n    segments = {}\n    for customer in customers:\n        purchase_count = PurchaseRecord.objects.filter(customer=customer).count()\n        if purchase_count == 0:\n            segment = 'One-Time Buyers'\n        elif purchase_count < 5:\n            segment = 'Infrequent Buyers'\n        elif purchase_count < 10:\n            segment = 'Regular Buyers'\n        else:\n            segment = 'Frequent Buyers'\n\n        if segment not in segments:\n            segments[segment] = []\n        segments[segment].append(customer)\n\n    return render(request, 'customer_management/customer_segmentation_report.html', {'segments': segments})\n"}, {"file": "urls.py", "path": "customer_management/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Customer URLs\n    path('customers/', views.customer_list, name='customer_list'),\n    path('customers/add/', views.customer_add, name='customer_add'),\n    path('customers/<int:pk>/edit/', views.customer_edit, name='customer_edit'),\n    path('customers/<int:pk>/delete/', views.customer_delete, name='customer_delete'),\n    path('customers/<int:pk>/', views.customer_view, name='customer_view'),\n    path('customers/search/', views.customer_search, name='customer_search'),\n\n     # Preferred Product URLs\n    path('preferredproducts/add/', views.preferred_product_add, name='preferred_product_add'),\n    path('preferredproducts/<int:customer_id>/<int:product_id>/remove/', views.preferred_product_remove, name='preferred_product_remove'),\n    path('customers/<int:customer_id>/preferredproducts/', views.preferred_product_view, name='preferred_product_view'),\n\n    # Product URLs\n    path('products/', views.product_list, name='product_list'),\n    path('products/add/', views.product_add, name='product_add'),\n    path('products/<int:pk>/edit/', views.product_edit, name='product_edit'),\n    path('products/<int:pk>/delete/', views.product_delete, name='product_delete'),\n    path('products/<int:pk>/', views.product_view, name='product_view'),\n    path('products/search/', views.product_search, name='product_search'),\n\n    # Purchase Record URLs\n    path('purchaserecords/', views.purchase_record_list, name='purchase_record_list'),\n    path('purchaserecords/add/', views.purchase_record_add, name='purchase_record_add'),\n    path('purchaserecords/<int:pk>/edit/', views.purchase_record_edit, name='purchase_record_edit'),\n    path('purchaserecords/<int:pk>/delete/', views.purchase_record_delete, name='purchase_record_delete'),\n    path('purchaserecords/<int:pk>/', views.purchase_record_view, name='purchase_record_view'),\n    path('purchaserecords/search/', views.purchase_record_search, name='purchase_record_search'),\n\n\n    # Marketing Analysis URLs\n    path('reports/total_sales/', views.total_sales_report, name='total_sales_report'),\n    path('reports/sales_by_product/', views.sales_by_product_report, name='sales_by_product_report'),\n    path('reports/sales_by_category/', views.sales_by_category_report, name='sales_by_category_report'),\n    path('reports/customer_purchase_history/<int:customer_id>/', views.customer_purchase_history_report, name='customer_purchase_history_report'),\n    path('reports/top_customers/', views.top_customers_report, name='top_customers_report'),\n    path('reports/top_selling_products/', views.top_selling_products_report, name='top_selling_products_report'),\n    path('reports/preferred_products_popularity/', views.preferred_products_popularity_report, name='preferred_products_popularity_report'),\n    path('reports/customer_segmentation/', views.customer_segmentation_report, name='customer_segmentation_report'),\n\n]"}, {"file": "admin.py", "path": "customer_management/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)\n"}, {"file": "apps.py", "path": "customer_management/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CustomerManagementConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'customer_management'\n"}, {"file": "__init__.py", "path": "customer_management/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "customer_management/migrations/0001_initial.py", "code": "# Generated by Django 4.2.6 on 2023-10-27 19:31\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\nimport django.utils.timezone\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Customer',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('birthday', models.DateField(blank=True, null=True)),\n                ('sex', models.CharField(blank=True, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], max_length=10, null=True)),\n                ('company', models.CharField(blank=True, max_length=255, null=True)),\n                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('category', models.CharField(max_length=255)),\n                ('recommended_price', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='PurchaseRecord',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('date_time', models.DateTimeField(default=django.utils.timezone.now)),\n                ('quantity', models.PositiveIntegerField()),\n                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='customer_management.customer')),\n                ('product', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='customer_management.product')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='PreferredProduct',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_management.customer')),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customer_management.product')),\n            ],\n            options={\n               'unique_together': {('customer', 'product')},\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "customer_management/migrations/__init__.py", "code": ""}], "14": [{"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef hello_world(request):\n    return render(request, 'myapp/hello_world.html', {'title': 'Hello World'})\n"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('helloword/', views.hello_world, name='hello_world'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "hello_world.html", "path": "myapp/templates/myapp/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ title }}</title>\n</head>\n<body>\n    <h1 id=\"main-heading\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"}, {"file": "models.py", "path": "myapp/models.py", "code": "# No models needed for this simple example, but it's good practice to include the file.\nfrom django.db import models\n"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myapp/templates/myapp/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# settings.py (Relevant Snippets)\n\nINSTALLED_APPS = [\n    ...\n    'myapp',\n    ...\n]\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# Make sure STATIC_URL and other static file settings are configured if needed.\n"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),  # Include app-level URLs\n]"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.landing_page, name='landing_page'),\n    path('helloword/', views.hello_world_page, name='hello_world_page'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\n\ndef landing_page(request):\n    return render(request, 'myapp/landing_page.html')\n\n\ndef hello_world_page(request):\n    return render(request, 'myapp/hello_world_page.html')"}, {"file": "landing_page.html", "path": "myapp/templates/myapp/landing_page.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Landing Page</title>\n</head>\n<body>\n    <a href=\"{% url 'hello_world_page' %}\"><button>Jump to Hello World</button></a>\n</body>\n</html>"}, {"file": "hello_world_page.html", "path": "myapp/templates/myapp/hello_world_page.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body>\n    <h1>Hello World</h1>\n</body>\n</html>"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "myapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}]}