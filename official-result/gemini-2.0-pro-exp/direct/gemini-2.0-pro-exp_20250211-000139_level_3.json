{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Weight (kg)', min_value=1.0)\n    height = forms.FloatField(label='Height (cm)', min_value=1.0)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom .forms import BMICalculatorForm\nfrom django.urls import reverse\n\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\"\n}\n\n\ndef homepage(request):\n    return render(request, 'example_app/homepage.html')\n\n\ndef bmi_calculator(request):\n    bmi_result = None\n    interpretation = None\n\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height_cm = form.cleaned_data['height']\n            height_m = height_cm / 100\n\n            if height_m <= 0:\n                 interpretation = bmi_interpretation[\"Invalid height\"]\n            else:\n                bmi = weight / (height_m ** 2)\n                bmi_result = round(bmi, 2)\n\n                for category, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        interpretation = bmi_interpretation[category]\n                        break\n    else:\n        form = BMICalculatorForm()\n\n    context = {\n        'form': form,\n        'bmi_result': bmi_result,\n        'interpretation': interpretation\n    }\n\n    return render(request, 'example_app/bmi_calculator.html', context)\n\n\ndef advice(request):\n      return render(request, 'example_app/advice.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/example_app/advice.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Advice</title>\n</head>\n<body>\n    <h1 id=\"advice-title\" class=\"advice-title\">Health Advice</h1>\n    <p id=\"advice-content\" class=\"advice-content\">This page will provide general health advice.</p> \n    <p>Underweight: A BMI below 18.5 is considered underweight.  It suggests you may not be eating enough or may be ill.</p>\n    <p>Normal weight:  A BMI between 18.5 and 24.9 is in the healthy weight range.  Keep up the good work!</p>\n    <p>Overweight:  A BMI between 25 and 29.9 is classified as overweight. It suggests you are heavier than ideal and might benefit from lifestyle changes.</p>\n    <p>Obese: A BMI of 30 or above is considered obese.  This increases your risk of several health conditions.  See a doctor.</p>\n    <a id=\"back-to-home\" class=\"back-link\" href=\"{% url 'homepage' %}\">Back to Homepage</a>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/example_app/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1 id=\"calculator-title\" class=\"calculator-title\">BMI Calculator</h1>\n\n    <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\" action=\"{% url 'bmi_calculator' %}\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"calculate-button\" class=\"calculate-button\" type=\"submit\">Calculate BMI</button>\n    </form>\n\n    {% if bmi_result %}\n        <div id=\"result-container\" class=\"result-container\">\n            <p id=\"bmi-result\" class=\"bmi-result\">Your BMI: {{ bmi_result }}</p>\n            <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">Interpretation: {{ interpretation }}</p>\n        </div>\n    {% endif %}\n    <a id=\"advice-link\" class=\"advice-link\" href=\"{% url 'advice' %}\">Get Health Advice</a><br>\n    <a id=\"home-link\" class=\"home-link\" href=\"{% url 'homepage' %}\">Back to Homepage</a>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/example_app/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Homepage</title>\n</head>\n<body>\n    <h1 id=\"homepage-title\" class=\"homepage-title\">Welcome to the BMI Calculator</h1>\n    <p id=\"homepage-intro\" class=\"homepage-intro\">This website allows you to calculate your Body Mass Index (BMI) and provides related health advice.</p>\n    <a id=\"calculator-link\" class=\"calculator-link\" href=\"{% url 'bmi_calculator' %}\">Go to BMI Calculator</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "converter_app/forms.py", "code": "from django import forms\n\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', min_value=0, decimal_places=2, widget=forms.NumberInput(attrs={'class': 'form-control', 'id':'amount-input'}))\n    source_currency = forms.ChoiceField(label='From', choices=CURRENCY_CHOICES, widget=forms.Select(attrs={'class': 'form-control', 'id':'source-currency-select'}))\n    target_currency = forms.ChoiceField(label='To', choices=CURRENCY_CHOICES, widget=forms.Select(attrs={'class': 'form-control', 'id':'target-currency-select'}))\n"}, {"file": "models.py", "path": "converter_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass CurrencyConvertRateModel(models.Model):\n    source_currency = models.CharField('Source Currency', max_length=128)\n    target_currency = models.CharField('Target Currency', max_length=128)\n    rate = models.DecimalField('Rate', max_digits=32, decimal_places=16)\n    datetime = models.DateTimeField('Datetime', default=timezone.now)\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency} at {self.datetime}'\n"}, {"file": "views.py", "path": "converter_app/views.py", "code": "import datetime\nimport io\nimport random\n\nfrom django.shortcuts import render\nfrom django.utils import timezone\nfrom django.views.generic import TemplateView\nfrom matplotlib import pyplot as plt\nimport matplotlib\nmatplotlib.use('Agg')\nimport base64\n\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated(source_currency, target_currency):\n    USD_BASE = {\n        'USD': 1.00,\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'JPY': 110.00,\n        'AUD': 1.35,\n        'CNY': 7.00,\n        'CAD': 1.25,\n        'CHF': 0.92,\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\ndef get_conversion_rate(source_currency, target_currency):\n    try:\n      rate = CurrencyConvertRateModel.objects.filter(\n        source_currency=source_currency, target_currency=target_currency\n      ).latest('datetime').rate\n      return rate\n\n    except CurrencyConvertRateModel.DoesNotExist:\n      return get_updated(source_currency, target_currency)\n\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            rate = get_conversion_rate(source_currency, target_currency)\n            converted_amount = amount * rate\n\n             # Store new rate\n            CurrencyConvertRateModel.objects.create(\n                source_currency=source_currency,\n                target_currency=target_currency,\n                rate = rate\n            )\n\n            context = {\n                'form': form,\n                'converted_amount': f'{converted_amount:.2f}',\n                'source_currency': source_currency,\n                'target_currency': target_currency,\n                'amount': amount,\n                'rate': f'{rate:.4f}',\n            }\n            return render(request, self.template_name, context)\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        source_currency = request.GET.get('source_currency', 'USD')\n        target_currency = request.GET.get('target_currency', 'EUR')\n\n        img_data = self.plot_chart(source_currency, target_currency)\n\n\n        context = {\n            'source_currency': source_currency,\n            'target_currency': target_currency,\n            'chart': img_data\n        }\n        return render(request, self.template_name, context)\n\n    @staticmethod\n    def plot_chart(source_currency, target_currency):\n        try:\n          # Get the past 7 days of data\n          today = timezone.now()\n          past_rates = []\n          dates = []\n\n          for i in range(7):\n            date = today - datetime.timedelta(days=i)\n            try:\n              rate = CurrencyConvertRateModel.objects.filter(\n                  source_currency=source_currency,\n                  target_currency=target_currency,\n                  datetime__date=date\n              ).latest('datetime')\n              past_rates.append(float(rate.rate))\n              dates.append(date)\n            except CurrencyConvertRateModel.DoesNotExist:\n                past_rates.append(None) # Handle missing data\n                dates.append(date)\n\n\n          # Create plot\n          plt.figure(figsize=(10, 5))\n          plt.plot(dates, past_rates)\n          plt.xlabel('Date')\n          plt.ylabel('Exchange Rate')\n          plt.title(f'{source_currency} to {target_currency} Exchange Rate Trend')\n          plt.xticks(rotation=45)\n          plt.tight_layout()\n\n          # Convert plot to image data\n          buf = io.BytesIO()\n          plt.savefig(buf, format='png')\n          plt.close()\n          buf.seek(0)\n          img_data = base64.b64encode(buf.read()).decode('utf-8')\n          return img_data\n\n        except Exception: # Prevents server error\n            return None\n\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "converter_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "converter_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-05 12:00\n\nfrom django.db import migrations, models\nimport django.utils.timezone\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=128, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=128, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=16, max_digits=32, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "converter_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "converter_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n\n</head>\n<body class=\"container mt-5\">\n    <h1 class=\"mb-4\">Exchange Rate Trends</h1>\n\n     <div class=\"form-group\">\n        <label for=\"source-currency-trends\">Source Currency:</label>\n         <select id=\"source-currency-trends\" class=\"form-control\" onchange=\"updateChart()\">\n            <option value=\"USD\" {% if source_currency == 'USD' %}selected{% endif %}>USD</option>\n            <option value=\"EUR\" {% if source_currency == 'EUR' %}selected{% endif %}>EUR</option>\n            <option value=\"JPY\" {% if source_currency == 'JPY' %}selected{% endif %}>JPY</option>\n            <option value=\"GBP\" {% if source_currency == 'GBP' %}selected{% endif %}>GBP</option>\n            <option value=\"CNY\" {% if source_currency == 'CNY' %}selected{% endif %}>CNY</option>\n            <option value=\"AUD\" {% if source_currency == 'AUD' %}selected{% endif %}>AUD</option>\n            <option value=\"CAD\" {% if source_currency == 'CAD' %}selected{% endif %}>CAD</option>\n            <option value=\"CHF\" {% if source_currency == 'CHF' %}selected{% endif %}>CHF</option>\n        </select>\n    </div>\n      <div class=\"form-group\">\n        <label for=\"target-currency-trends\">Target Currency:</label>\n        <select id=\"target-currency-trends\" class=\"form-control\" onchange=\"updateChart()\">\n            <option value=\"USD\" {% if target_currency == 'USD' %}selected{% endif %}>USD</option>\n            <option value=\"EUR\" {% if target_currency == 'EUR' %}selected{% endif %}>EUR</option>\n            <option value=\"JPY\" {% if target_currency == 'JPY' %}selected{% endif %}>JPY</option>\n            <option value=\"GBP\" {% if target_currency == 'GBP' %}selected{% endif %}>GBP</option>\n            <option value=\"CNY\" {% if target_currency == 'CNY' %}selected{% endif %}>CNY</option>\n            <option value=\"AUD\" {% if target_currency == 'AUD' %}selected{% endif %}>AUD</option>\n            <option value=\"CAD\" {% if target_currency == 'CAD' %}selected{% endif %}>CAD</option>\n            <option value=\"CHF\" {% if target_currency == 'CHF' %}selected{% endif %}>CHF</option>\n        </select>\n    </div>\n\n\n    {% if chart %}\n        <img id=\"exchange-rate-chart\" src=\"data:image/png;base64,{{ chart }}\" alt=\"Exchange Rate Chart\" class=\"img-fluid\">\n    {% else %}\n      <p> No Data. </p>\n    {% endif %}\n\n\n\n    <script>\n        function updateChart() {\n            const sourceCurrency = document.getElementById('source-currency-trends').value;\n            const targetCurrency = document.getElementById('target-currency-trends').value;\n            window.location.href = `/trends/?source_currency=${sourceCurrency}&target_currency=${targetCurrency}`;\n        }\n    </script>\n        <a id=\"back-to-converter\" href=\"/\" class=\"btn btn-secondary mt-3\">Back to Converter</a>\n\n</body>\n</html>\n"}, {"file": "home.html", "path": "converter_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n     <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body class=\"container mt-5\">\n    <h1 class=\"mb-4\">Currency Converter</h1>\n    <form method=\"post\" class=\"mb-3\">\n        {% csrf_token %}\n         <div class=\"form-group\">\n            {{ form.amount.label_tag }}\n            {{ form.amount }}\n        </div>\n        <div class=\"form-group\">\n            {{ form.source_currency.label_tag }}\n            {{ form.source_currency }}\n        </div>\n        <div class=\"form-group\">\n            {{ form.target_currency.label_tag }}\n            {{ form.target_currency }}\n        </div>\n\n        <button id=\"convert-button\" type=\"submit\" class=\"btn btn-primary\">Convert</button>\n    </form>\n\n    {% if converted_amount %}\n    <div id=\"result-container\" class=\"alert alert-success\" role=\"alert\">\n        <p id=\"result-text\">{{ amount }} {{ source_currency }} = {{ converted_amount }} {{ target_currency }}</p>\n        <p id=\"rate-display\">Exchange Rate: {{rate}} </p>\n    </div>\n    {% endif %}\n     <a id=\"view-trends-link\" href=\"{% url 'exchange_rate_trends' %}\" class=\"btn btn-info\">View Exchange Rate Trends</a>\n</body>\n</html>\n"}, {"file": "info.html", "path": "converter_app/templates/info.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Info</title>\n</head>\n<body>\n    <h1>Information</h1>\n    <p>This is some information about the currency converter.</p>\n</body>\n</html>"}, {"file": "settings.py", "path": "currency_converter/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter_app',  # Your app name\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom converter_app.views import ConvertCurrencyView, ExchangeRateTrendsView, InfoView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n     path('info/', InfoView, name='info'),\n]\n"}, {"file": "wsgi.py", "path": "currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "converter_app/admin.py", "code": "from django.contrib import admin\nfrom .models import CurrencyConvertRateModel\n\n# Register your models here.\nadmin.site.register(CurrencyConvertRateModel)\n"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.views import View\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return 'Error: No character types selected.'\n\n    return ''.join(random.choice(characters) for _ in range(length))\n\n\ndef password_generator_view(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('include_uppercase') == 'on'\n        include_lowercase = request.POST.get('include_lowercase') == 'on'\n        include_numbers = request.POST.get('include_numbers') == 'on'\n        include_symbols = request.POST.get('include_symbols') == 'on'\n\n        password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n        return render(request, 'generator.html', {'password': password})\n    return render(request, 'generator.html')\n\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 20px;\n    background-color: #f4f4f4;\n}\n\nh1 {\n    color: #333;\n    text-align: center;\n}\n\n.container {\n    max-width: 800px;\n    margin: auto;\n    background: white;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\nlabel {\n    display: block;\n    margin-top: 10px;\n}\n\ninput[type=\"number\"],\ninput[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n\nbutton {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 15px;\n    margin-top: 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #45a049;\n}\n\n.password-display {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background-color: #f9f9f9;\n    word-break: break-all;\n}\n\n#copy-message {\n    display: none; /* Hidden by default */\n    color: green;\n    margin-top: 5px;\n}\n\n.nav-link {\n  margin: 10px;\n  padding: 5px;\n\n}\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var passwordElement = document.getElementById('password');\n    var password = passwordElement.innerText;\n\n    navigator.clipboard.writeText(password).then(function() {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n\n        setTimeout(function() {\n            message.style.display = 'none';\n        }, 3000);\n    }).catch(function(err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>About Us</h1>\n        <p>This is a simple password generator application built with Django. It allows users to generate strong, random passwords based on their chosen criteria.</p>\n        <p>Features include:</p>\n        <ul>\n            <li>Adjustable password length</li>\n            <li>Option to include uppercase letters</li>\n            <li>Option to include lowercase letters</li>\n            <li>Option to include numbers</li>\n            <li>Option to include symbols</li>\n        </ul>\n        <a href=\"{% url 'home' %}\" class=\"nav-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n <div class=\"container\">\n    <h1>Password Generator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" value=\"12\" min=\"4\" max=\"128\"><br>\n\n        <label for=\"include_uppercase\">Include Uppercase Letters:</label>\n        <input type=\"checkbox\" id=\"include_uppercase\" name=\"include_uppercase\" checked><br>\n\n        <label for=\"include_lowercase\">Include Lowercase Letters:</label>\n        <input type=\"checkbox\" id=\"include_lowercase\" name=\"include_lowercase\" checked><br>\n\n        <label for=\"include_numbers\">Include Numbers:</label>\n        <input type=\"checkbox\" id=\"include_numbers\" name=\"include_numbers\" checked><br>\n\n        <label for=\"include_symbols\">Include Symbols:</label>\n        <input type=\"checkbox\" id=\"include_symbols\" name=\"include_symbols\" checked><br>\n\n        <button type=\"submit\">Generate Password</button>\n    </form>\n\n    {% if password %}\n    <div class=\"password-display\">\n        <span id=\"password\">{{ password }}</span>\n        <button onclick=\"copyToClipboard()\">Copy</button>\n        <p id=\"copy-message\"></p>\n    </div>\n    {% endif %}\n<a href=\"{% url 'home' %}\" class=\"nav-link\">Back to Home</a>\n </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Welcome to the Password Generator</h1>\n        <p>Click the button below to generate a new password, or navigate to the \"About Us\" page.</p>\n        <a href=\"{% url 'generator' %}\" class=\"nav-link\">Generate Password</a>\n        <a href=\"{% url 'about_us' %}\" class=\"nav-link\">About Us</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),  # Include your app's URLs\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr_code, name='generate_qr_code'),\n    path('download/', views.download_qr_code, name='download_qr_code'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nimport qrcode\nfrom io import BytesIO\nfrom django.core.files.base import ContentFile\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color='black', back_color='white')\n\n        # Save the image to a BytesIO object\n        img_buffer = BytesIO()\n        img.save(img_buffer, format='PNG')\n\n        # Prepare the response for download\n        response = HttpResponse(img_buffer.getvalue(), content_type='image/png')\n        response['Content-Disposition'] = 'attachment; filename=\"qr_code.png\"'\n        return response\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n     # In a real application, you might retrieve a specific QR code\n     # based on some identifier passed in the request.\n     # Here, we're redirecting to the generate page as a placeholder.\n    return redirect('generate_qr_code')\n\ndef about(request):\n    return render(request, 'qr_app/about.html')\n\n\ndef hex_to_rgb(hex_color):\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))\n"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"title\">About QR Code Generator</h1>\n    <p id=\"about-description\" class=\"description\">This is a simple QR code generator built with Django.  It allows you to create QR codes from text.</p>\n    <h2 id=\"faq-title\" class=\"subtitle\">FAQ</h2>\n    <ul id=\"faq-list\" class=\"list\">\n        <li id=\"faq-item-1\" class=\"list-item\"><strong>Q: How do I use this generator?</strong>  A: Enter text in the generator form and click \"Generate\".</li>\n        <li id=\"faq-item-2\" class=\"list-item\"><strong>Q: Is my data saved?</strong> A: No, your data is not saved.  The QR code is generated on-the-fly.</li>\n    </ul>\n    <h2 id=\"policy-title\" class=\"subtitle\">Policies</h2>\n      <p id=\"policy-description\" class=\"description\">\n        We do not collect or store any data you use to generate a QR code.  Your privacy is respected.\n    </p>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"generator-title\" class=\"title\">Generate QR Code</h1>\n    <form id=\"qr-form\" method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n        {% csrf_token %}\n        <label for=\"data-input\" id=\"data-label\" class=\"label\">Data:</label>\n        <input type=\"text\" id=\"data-input\" name=\"data\" class=\"input\" required>\n        <button type=\"submit\" id=\"generate-button\" class=\"button\">Generate QR Code</button>\n    </form>\n     <div id=\"result-container\" class=\"qr-result\">\n        </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n    body { font-family: Arial, sans-serif; margin: 20px; }\n    .container { display: flex; flex-direction: column; align-items: center; }\n    .button { padding: 10px 20px; margin: 10px; background-color: #007bff; color: white; text-decoration: none; border-radius: 5px; display: inline-block; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the QR Code Generator</h1>\n        <p id=\"home-description\" class=\"description\">Easily generate QR codes for any text.</p>\n        <a href=\"{% url 'generate_qr_code' %}\" id=\"generate-link\" class=\"button\">Generate QR Code</a>\n        <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"button\">About</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',  # Add the qr_app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),  # Include qr_app urls\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable?\" \n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.core.files.storage import FileSystemStorage\nfrom django.urls import reverse\n\ndef home(request):\n    return render(request, 'example_app/home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        if markdown_text:\n          html = markdown.markdown(markdown_text)\n          return render(request, 'example_app/convert.html', {'html': html, 'markdown_text':markdown_text})\n\n        uploaded_file = request.FILES.get('markdown_file')\n        if uploaded_file:\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            with open(fs.path(filename), 'r') as f:\n                markdown_content = f.read()\n            html = markdown.markdown(markdown_content)\n            fs.delete(filename)  # Optional: Delete the uploaded file after processing\n            return render(request, 'example_app/convert.html', {'html': html, 'markdown_text': markdown_content})\n        return HttpResponse(\"No input provided\")\n    return render(request, 'example_app/convert.html')\n\ndef about(request):\n    return render(request, 'example_app/about.html')"}, {"file": "about.html", "path": "example_app/templates/example_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"title\">About the Markdown Converter</h1>\n    <p id=\"about-description\" class=\"description\">This application converts Markdown text or files to HTML.</p>\n</body>\n</html>"}, {"file": "convert.html", "path": "example_app/templates/example_app/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Convert</title>\n</head>\n<body>\n  <h1 id=\"convert-title\" class=\"title\">Convert Markdown to HTML</h1>\n\n    <form id=\"convert-form\" method=\"post\" enctype=\"multipart/form-data\" action=\"{% url 'convert' %}\">\n        {% csrf_token %}\n         <label for=\"markdown_text\" id=\"markdown-text-label\">Enter Markdown Text:</label><br>\n         <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"50\" class=\"markdown-input\">{{ markdown_text }}</textarea><br><br>\n\n\n        <label for=\"markdown_file\" id=\"markdown-file-label\">Or Upload a Markdown File:</label>\n        <input type=\"file\" id=\"markdown_file\" name=\"markdown_file\" class=\"file-input\"><br><br>\n\n        <button type=\"submit\" id=\"convert-button\" class=\"submit-button\">Convert</button>\n    </form>\n\n  {% if html %}\n    <div id=\"html-output\" class=\"output-area\">\n        <h2 id=\"result-heading\">Converted HTML:</h2>\n          <div id=\"html-content\">{{ html|safe }}</div>\n    </div>\n  {% endif %}\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/example_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"title\">Welcome to the Markdown Converter</h1>\n    <p id=\"home-description\" class=\"description\">Convert your Markdown text to HTML!</p>\n    <nav id=\"main-navigation\" class=\"navigation\">\n        <ul id=\"navigation-list\">\n            <li id=\"convert-link-item\"><a href=\"{% url 'convert' %}\" id=\"convert-link\" class=\"nav-link\">Convert</a></li>\n            <li id=\"about-link-item\"><a href=\"{% url 'about' %}\" id=\"about-link\" class=\"nav-link\">About</a></li>\n        </ul>\n    </nav>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item, \n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView, DetailView\nfrom .models import TodoList, TodoItem\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def get_queryset(self):\n        return TodoList.objects.all()\n    \n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\ndef delete_todo(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    todo_list.delete()\n    return redirect('todo_list')\n\ndef edit_todo(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        todo_list.title = request.POST.get('title')\n        todo_list.description = request.POST.get('description')\n        todo_list.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todo_list': todo_list})\n\n\nclass TodoItemView(DetailView):\n    template_name = 'tasks.html'\n    model = TodoList\n    context_object_name = 'todolist'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todo_items'] = TodoItem.objects.filter(todolist=self.object)\n        return context\n    \n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        todolist_id = kwargs['pk']\n        todolist = get_object_or_404(TodoList, pk=todolist_id)\n        TodoItem.objects.create(title=title, description=description, todolist=todolist)\n        return redirect('view_todo_item', pk=todolist_id)\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_id = todo_item.todolist.pk\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todolist_id)\n\ndef edit_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        todo_item.title = request.POST.get('title')\n        todo_item.description = request.POST.get('description')\n        todo_item.save()\n        return redirect('view_todo_item', pk=todo_item.todolist.pk)\n    return render(request, 'edit_todo_item.html', {'todo_item': todo_item})\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todo_item.todolist.pk)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        total_tasks = todo_items.count()\n        completed_tasks = todo_items.filter(completed=True).count()\n        incomplete_tasks = total_tasks - completed_tasks\n\n        context['total_tasks'] = total_tasks\n        context['completed_tasks'] = completed_tasks\n        context['incomplete_tasks'] = incomplete_tasks\n\n        # Data for Chart.js\n        context['task_completion_data'] = {\n            'labels': ['Completed', 'Incomplete'],\n            'datasets': [{\n                'data': [completed_tasks, incomplete_tasks],\n                'backgroundColor': ['#36a2eb', '#ff6384'],\n            }]\n        }\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.6 on 2023-10-26 19:32\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1 id=\"analysis-title\">Task Analysis</h1>\n\n    <div id=\"task-completion-chart-container\" class=\"chart-container\">\n        <canvas id=\"taskCompletionChart\"></canvas>\n    </div>\n\n    <p id=\"total-tasks\">Total Tasks: {{ total_tasks }}</p>\n    <p id=\"completed-tasks\">Completed Tasks: {{ completed_tasks }}</p>\n    <p id=\"incomplete-tasks\">Incomplete Tasks: {{ incomplete_tasks }}</p>\n\n    <a id=\"return-home-link\" href=\"{% url 'home' %}\">Return to Home</a>\n\n    <script>\n        const ctx = document.getElementById('taskCompletionChart').getContext('2d');\n        const taskCompletionData = JSON.parse('{{ task_completion_data|safe }}');\n        const myChart = new Chart(ctx, {\n            type: 'pie',\n            data: taskCompletionData,\n        });\n    </script>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <h1 id=\"edit-todo-title\">Edit Todo List</h1>\n    <form id=\"edit-todo-form\" method=\"post\" action=\"{% url 'edit_todo' todo_list.pk %}\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo_list.title }}\"><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\">{{ todo_list.description }}</textarea><br><br>\n        <button type=\"submit\" id=\"save-button\">Save</button>\n    </form>\n    <a id=\"cancel-link\" href=\"{% url 'todo_list' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <h1 id=\"edit-item-title\">Edit Todo Item</h1>\n    <form id=\"edit-item-form\" method=\"post\" action=\"{% url 'edit_todo_item' todo_item.pk %}\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo_item.title }}\"><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\">{{ todo_item.description }}</textarea><br><br>\n        <button id=\"save-button\" type=\"submit\">Save</button>\n    </form>\n     <a id=\"cancel-link\" href=\"{% url 'view_todo_item' todo_item.todolist.pk %}\">Cancel</a>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"welcome-message\">Welcome to the Todo App!</h1>\n    <a id=\"todo-list-link\" href=\"{% url 'todo_list' %}\">View Todo Lists</a><br>\n    <a id=\"analysis-link\" href=\"{% url 'analysis' %}\">View Analysis</a>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <h1 id=\"list-title\">Todo List: {{ todolist.title }}</h1>\n    <p id=\"list-description\">Description: {{ todolist.description }}</p>\n\n    <h2 id=\"tasks-title\">Tasks</h2>\n    <ul id=\"task-list\">\n        {% for item in todo_items %}\n            <li id=\"task-item-{{ item.pk }}\" class=\"task-item\">\n                {% if item.completed %}\n                    <span id=\"task-title-{{ item.pk }}\" class=\"task-title completed\">{{ item.title }}</span>\n                {% else %}\n                    <span id=\"task-title-{{ item.pk }}\" class=\"task-title\">{{ item.title }}</span>\n                {% endif %}\n                <span id=\"task-description-{{ item.pk }}\" class=\"task-description\"> - {{ item.description }}</span>\n                <a id=\"edit-task-link-{{ item.pk }}\" class=\"edit-task-link\" href=\"{% url 'edit_todo_item' item.pk %}\">Edit</a>\n                <a id=\"delete-task-link-{{ item.pk }}\" class=\"delete-task-link\" href=\"{% url 'delete_todo_item' item.pk %}\">Delete</a>\n                <a id=\"complete-task-link-{{ item.pk }}\" class=\"complete-task-link\" href=\"{% url 'complete_todo_item' item.pk %}\">Complete</a>\n            </li>\n        {% empty %}\n            <li id=\"no-tasks-message\">No tasks yet.</li>\n        {% endfor %}\n    </ul>\n\n    <h2 id=\"add-task-title\">Add New Task</h2>\n    <form id=\"add-task-form\" method=\"post\" action=\"{% url 'view_todo_item' todolist.pk %}\">\n        {% csrf_token %}\n        <label for=\"new-task-title\">Title:</label><br>\n        <input type=\"text\" id=\"new-task-title\" name=\"title\"><br>\n        <label for=\"new-task-description\">Description:</label><br>\n        <textarea id=\"new-task-description\" name=\"description\"></textarea><br><br>\n        <button id=\"add-task-button\" type=\"submit\">Add Task</button>\n    </form>\n\n    <a id=\"back-to-list-link\" href=\"{% url 'todo_list' %}\">Back to Todo Lists</a>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body>\n    <h1 id=\"todo-lists-title\">Todo Lists</h1>\n    <ul id=\"todo-list\">\n        {% for list in object_list %}\n            <li id=\"list-item-{{ list.pk }}\" class=\"list-item\">\n                <a id=\"list-link-{{ list.pk }}\" class=\"list-link\" href=\"{% url 'view_todo_item' list.pk %}\">{{ list.title }}</a>\n                <span id=\"list-description-{{ list.pk }}\" class=\"list-description\"> - {{ list.description }}</span>\n                <a id=\"edit-list-link-{{ list.pk }}\" class=\"edit-list-link\" href=\"{% url 'edit_todo' list.pk %}\">Edit</a>\n                <a id=\"delete-list-link-{{ list.pk }}\" class=\"delete-list-link\" href=\"{% url 'delete_todo' list.pk %}\">Delete</a>\n            </li>\n        {% empty %}\n            <li id=\"no-lists-message\">No todo lists yet.</li>\n        {% endfor %}\n    </ul>\n\n    <h2 id=\"add-list-title\">Add New Todo List</h2>\n    <form id=\"add-list-form\" method=\"post\" action=\"{% url 'todo_list' %}\">\n        {% csrf_token %}\n        <label for=\"new-list-title\">Title:</label><br>\n        <input type=\"text\" id=\"new-list-title\" name=\"title\"><br>\n        <label for=\"new-list-description\">Description:</label><br>\n        <textarea id=\"new-list-description\" name=\"description\"></textarea><br><br>\n        <button id=\"add-list-button\" type=\"submit\">Add List</button>\n    </form>\n    <a id=\"home-link\" href=\"{% url 'home' %}\">Return to Home</a>\n</body>\n</html>"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}], "8": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main function to execute Django command line utilities.\n    \"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'event_calendar.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Ensure it's installed and available on PYTHONPATH.\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Event\nfrom django.utils import timezone\n\nclass EventForm(forms.ModelForm):\n    \"\"\"\n    Form for the Event model with custom DateTime field.\n    \"\"\"\n    datetime = forms.DateTimeField(\n        input_formats=['%Y-%m-%dT%H:%M', '%Y-%m-%d %H:%M'],\n        widget=forms.DateTimeInput(attrs={'type': 'datetime-local'})\n     )\n\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\n\nclass Event(models.Model):\n    \"\"\"\n    Model representing an event with title, description, and dates.\n    \"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        String representation of the event.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n\nurlpatterns = [\n    path('', views.HomePageView.as_view(), name='home'),\n    path('calendar/add-event/', views.AddEventView.as_view(), name='add_event'),\n    path('calendar/edit-event/<int:pk>/', views.EditEventView.as_view(), name='edit_event'),\n    path('calendar/delete-event/<int:pk>/', views.DeleteEventView.as_view(), name='delete_event'),\n    path('calendar/view-events/', views.ListEventsView.as_view(), name='view_events'),\n    path('calendar/view-event-details/<int:pk>/', views.EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', views.HelpView.faq, name='faq'),\n    path('help/user-guide/', views.HelpView.user_guide, name='user_guide'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.views.generic.edit import CreateView, UpdateView, DeleteView\nfrom django.views.generic import ListView, DetailView\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.contrib import messages\nfrom django.urls import reverse_lazy\nfrom django.utils import timezone\n\nfrom .forms import EventForm\nfrom .models import Event\n\n\nclass HomePageView(View):\n    def get(self, request):\n        today = timezone.now()\n        year = today.year\n        month = today.month\n        cal = calendar.HTMLCalendar().formatmonth(year, month)\n        events = Event.objects.filter(datetime__year=year, datetime__month=month)\n        context = {'calendar': cal, 'events': events}\n        return render(request, 'home.html', context)\n\n\nclass AddEventView(CreateView):\n    model = Event\n    form_class = EventForm\n    template_name = 'add_event.html'\n    success_url = reverse_lazy('home')\n\n\nclass EditEventView(UpdateView):\n    model = Event\n    form_class = EventForm\n    template_name = 'edit_event.html'\n    success_url = reverse_lazy('view_events')\n\n\nclass DeleteEventView(DeleteView):\n    model = Event\n    template_name = 'delete_event.html'\n    success_url = reverse_lazy('view_events')\n\n\nclass ListEventsView(ListView):\n    model = Event\n    template_name = 'view_events.html'\n    context_object_name = 'events'\n    \n    def get_queryset(self):\n        query = self.request.GET.get('q')\n        if query:\n            return Event.objects.filter(\n                Q(title__icontains=query) | Q(description__icontains=query)\n            ).order_by('datetime')\n        return Event.objects.all().order_by('datetime')\n\n\nclass EventDetailsView(DetailView):\n    model = Event\n    template_name = 'view_event_details.html'\n    context_object_name = 'event'\n\n\nclass HelpView:\n    @staticmethod\n    def faq(request):\n        return render(request, 'faq.html')\n\n    @staticmethod\n    def user_guide(request):\n        return render(request, 'user_guide.html')"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-30 08:50\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "add_event.html", "path": "example_app/templates/add_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Event</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 40px; }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; }\n        input[type=\"text\"], input[type=\"datetime-local\"], textarea { width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }\n        button { background-color: #4CAF50; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #45a049; }\n    </style>\n</head>\n<body>\n    <h1 id=\"add-event-title\">Add Event</h1>\n    <form method=\"post\" id=\"add-event-form\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            {{ form.title.label_tag }}\n            {{ form.title }}\n        </div>\n        <div class=\"form-group\">\n            {{ form.description.label_tag }}\n            {{ form.description }}\n        </div>\n          <div class=\"form-group\">\n            {{ form.datetime.label_tag }}\n            {{ form.datetime }}\n        </div>\n\n        <button type=\"submit\" id=\"add-event-submit\">Add Event</button>\n    </form>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "example_app/templates/edit_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Event</title>\n     <style>\n        body { font-family: Arial, sans-serif; margin: 40px; }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; }\n        input[type=\"text\"], input[type=\"datetime-local\"], textarea { width: 100%; padding: 8px; margin-top: 5px; border: 1px solid #ddd; border-radius: 4px; box-sizing: border-box; }\n        button { background-color: #4CAF50; color: white; padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #45a049; }\n    </style>\n</head>\n<body>\n    <h1 id=\"edit-event-title\">Edit Event</h1>\n    <form method=\"post\" id=\"edit-event-form\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n             {{ form.title.label_tag }}\n            {{ form.title }}\n        </div>\n        <div class=\"form-group\">\n            {{ form.description.label_tag }}\n            {{ form.description }}\n        </div>\n          <div class=\"form-group\">\n            {{ form.datetime.label_tag }}\n            {{ form.datetime }}\n        </div>\n        <button type=\"submit\" id=\"edit-event-submit\">Update Event</button>\n    </form>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "example_app/templates/delete_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Delete Event</title>\n    <style>\n       body { font-family: Arial, sans-serif; margin: 40px; }\n        .confirmation-message { margin-bottom: 20px; }\n        .btn { padding: 10px 15px; border: none; border-radius: 4px; cursor: pointer; text-decoration: none; display: inline-block; margin-right: 10px; }\n        .btn-danger { background-color: #f44336; color: white; }\n        .btn-danger:hover { background-color: #d32f2f; }\n        .btn-secondary { background-color: #cccccc; color: black; }\n        .btn-secondary:hover { background-color: #b3b3b3; }\n    </style>\n</head>\n<body>\n    <h1 id=\"delete-event-title\">Confirm Deletion</h1>\n    <p class=\"confirmation-message\" id=\"delete-confirm-message\">Are you sure you want to delete \"{{ event.title }}\"?</p>\n    <form method=\"post\" id=\"delete-event-form\">\n        {% csrf_token %}\n        <button type=\"submit\" class=\"btn btn-danger\" id=\"delete-confirm-button\">Delete</button>\n        <a href=\"{% url 'view_events' %}\" class=\"btn btn-secondary\" id=\"delete-cancel-button\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "faq.html", "path": "example_app/templates/faq.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>FAQ</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 40px; }\n        .faq-item { margin-bottom: 20px; }\n        .question { font-weight: bold; }\n    </style>\n</head>\n<body>\n    <h1 id=\"faq-title\">Frequently Asked Questions</h1>\n\n    <div class=\"faq-item\">\n        <p class=\"question\" id=\"q1\">Q1: How do I add a new event?</p>\n        <p id=\"a1\">A1: Navigate to the 'Add Event' page and fill in the event details in the provided form.</p>\n    </div>\n\n    <div class=\"faq-item\">\n        <p class=\"question\" id=\"q2\">Q2: Can I edit an existing event?</p>\n        <p id=\"a2\">A2: Yes, you can edit events by selecting the event and clicking the 'Edit' option.</p>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        table { width: 100%; border-collapse: collapse; margin-top: 20px; }\n        th, td { border: 1px solid #ddd; padding: 8px; text-align: center; }\n        th { background-color: #f2f2f2; }\n        .calendar { margin-top: 20px; }\n        .calendar a { margin: 0 5px; text-decoration: none; color: blue; }\n        .calendar a:hover { text-decoration: underline; }\n        .event-link { display: block; margin-bottom: 5px; }\n    </style>\n</head>\n<body>\n    <h1 id=\"home-title\">Event Calendar</h1>\n    <div class=\"calendar\" id=\"calendar-view\">{{ calendar|safe }}</div>\n     <div id=\"event-list\">\n        <h2>Events:</h2>\n        {% for event in events %}\n            <a class=\"event-link\" href=\"{% url 'view_event_details' event.pk %}\">{{ event.title }}</a><br>\n        {% empty %}\n            <p>No events for this month.</p>\n        {% endfor %}\n    </div>\n     <a href=\"{% url 'add_event' %}\" id=\"add-event-link\">Add Event</a>\n</body>\n</html>"}, {"file": "user_guide.html", "path": "example_app/templates/user_guide.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>User Guide</title>\n    <style>\n     body { font-family: Arial, sans-serif; margin: 40px; }\n        .section { margin-bottom: 20px; }\n        .section-title { font-weight: bold; margin-bottom: 5px; }\n    </style>\n</head>\n<body>\n    <h1 id=\"user-guide-title\">User Guide</h1>\n\n    <div class=\"section\">\n        <p class=\"section-title\" id=\"guide-add-event\">Adding Events:</p>\n        <p id=\"guide-add-event-desc\">To add a new event, click on the \"Add Event\" link and fill out the form with the event details.</p>\n    </div>\n\n    <div class=\"section\">\n        <p class=\"section-title\" id=\"guide-edit-event\">Editing Events:</p>\n        <p id=\"guide-edit-event-desc\">To edit an event, go to the event list, click on the event you want to edit, and then select \"Edit\".</p>\n    </div>\n\n</body>\n</html>"}, {"file": "view_events.html", "path": "example_app/templates/view_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Event List</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .event-item { border-bottom: 1px solid #eee; padding: 10px 0; }\n        .event-item a { text-decoration: none; color: blue; }\n        .event-item a:hover { text-decoration: underline; }\n        .search-bar { margin-bottom: 20px; }\n    </style>\n</head>\n<body>\n    <h1 id=\"event-list-title\">Event List</h1>\n    <div class=\"search-bar\">\n        <form action=\"{% url 'view_events' %}\" method=\"get\">\n            <input type=\"text\" name=\"q\" placeholder=\"Search events...\" id=\"search-input\">\n            <button type=\"submit\" id=\"search-button\">Search</button>\n        </form>\n    </div>\n\n    {% for event in events %}\n        <div class=\"event-item\" id=\"event-item-{{ event.id }}\">\n            <a href=\"{% url 'view_event_details' event.pk %}\" id=\"event-link-{{ event.id }}\">{{ event.title }} - {{ event.datetime|date:'F j, Y, g:i a' }}</a>\n             <a href=\"{% url 'edit_event' event.pk %}\" id=\"edit-link-{{ event.id }}\">Edit</a> |\n            <a href=\"{% url 'delete_event' event.pk %}\" id=\"delete-link-{{ event.id }}\">Delete</a>\n        </div>\n    {% empty %}\n        <p>No events found.</p>\n    {% endfor %}\n</body>\n</html>"}, {"file": "view_event_details.html", "path": "example_app/templates/view_event_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Event Details</title>\n    <style>\n      body { font-family: Arial, sans-serif; margin: 40px; }\n        .event-details { border: 1px solid #ddd; padding: 20px; }\n        .detail-label { font-weight: bold; }\n    </style>\n</head>\n<body>\n    <h1 id=\"event-details-title\">Event Details</h1>\n    <div class=\"event-details\" id=\"event-details-container\">\n        <p><span class=\"detail-label\" id=\"event-title-label\">Title:</span> <span id=\"event-title\">{{ event.title }}</span></p>\n        <p><span class=\"detail-label\" id=\"event-description-label\">Description:</span> <span id=\"event-description\">{{ event.description }}</span></p>\n        <p><span class=\"detail-label\" id=\"event-datetime-label\">Date and Time:</span> <span id=\"event-datetime\">{{ event.datetime }}</span></p>\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "event_calendar/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'event_calendar.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "event_calendar/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'event_calendar.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'event_calendar.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "event_calendar/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "event_calendar/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'event_calendar.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\n# Register your models here.\nadmin.site.register(Event)"}, {"file": "__init__.py", "path": "event_calendar/__init__.py", "code": ""}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'\n\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__'"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    company = models.CharField(max_length=255, blank=True)\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    subject = models.CharField(max_length=255)\n    message = models.TextField()\n\n    def __str__(self):\n        return self.subject"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomePageView.as_view(), name='home'),\n    path('features/', views.FeaturesPageView.as_view(), name='features'),\n    path('pricing/', views.PricingPageView.as_view(), name='pricing'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('about/', views.AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\nfrom django.urls import reverse_lazy\nfrom django.contrib import messages\n\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\n\nclass PricingPageView(FormView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('pricing')  # Redirect to the same page after success\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Thank you for contacting us! We will get back to you soon.')\n        return super().form_valid(form)\n\n\nclass SupportView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('support')\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted.')\n        return super().form_valid(form)\n\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ContactSales',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField(max_length=254)),\n                ('company', models.CharField(blank=True, max_length=255)),\n                ('message', models.TextField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField(max_length=254)),\n                ('subject', models.CharField(max_length=255)),\n                ('message', models.TextField()),\n            ],\n        ),\n    ]"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About Us</title>\n</head>\n<body>\n    <h1 id=\"about-heading\" class=\"about-title\">About Us</h1>\n    <p id=\"about-content\" class=\"about-text\">We are a team dedicated to creating amazing AI chatbots.</p>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Features</title>\n</head>\n<body>\n    <h1 id=\"features-heading\" class=\"features-title\">Features</h1>\n    <ul id=\"features-list\" class=\"features-list\">\n        <li id=\"feature-1\" class=\"feature-item\">Intelligent Conversation</li>\n        <li id=\"feature-2\" class=\"feature-item\">24/7 Availability</li>\n        <li id=\"feature-3\" class=\"feature-item\">Personalized Experience</li>\n    </ul>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"welcome-heading\" class=\"welcome-message\">Welcome to our AI Chatbot!</h1>\n    <p id=\"intro-text\" class=\"intro-paragraph\">Experience the future of communication.</p>\n    <nav id=\"main-nav\" class=\"navigation\">\n        <a id=\"features-link\" class=\"nav-link\" href=\"{% url 'features' %}\">Features</a>\n        <a id=\"pricing-link\" class=\"nav-link\" href=\"{% url 'pricing' %}\">Pricing</a>\n        <a id=\"support-link\" class=\"nav-link\" href=\"{% url 'support' %}\">Support</a>\n        <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About Us</a>\n    </nav>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Pricing</title>\n</head>\n<body>\n    <h1 id=\"pricing-heading\" class=\"pricing-title\">Pricing Plans</h1>\n\n    <div id=\"pricing-plans\" class=\"pricing-container\">\n        <div id=\"plan-basic\" class=\"pricing-plan\">\n            <h2 id=\"basic-plan-name\" class=\"plan-name\">Basic</h2>\n            <p id=\"basic-plan-price\" class=\"plan-price\">$9/month</p>\n        </div>\n        <div id=\"plan-pro\" class=\"pricing-plan\">\n            <h2 id=\"pro-plan-name\" class=\"plan-name\">Pro</h2>\n            <p id=\"pro-plan-price\" class=\"plan-price\">$49/month</p>\n         </div>\n    </div>\n\n    <h2 id=\"contact-heading\" class=\"contact-form-title\">Contact Sales</h2>\n    <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-contact\" class=\"submit-button\" type=\"submit\">Submit</button>\n    </form>\n     {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Support</title>\n</head>\n<body>\n    <h1 id=\"support-heading\" class=\"support-title\">Support</h1>\n    <h2 id=\"support-form-heading\">Submit a Request</h2>\n    <form id=\"support-form\" class=\"support-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-support\" class=\"submit-button\" type=\"submit\">Submit</button>\n    </form>\n     {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n\n    <h2 id=\"faq-heading\" class=\"faq-title\">FAQ</h2>\n    <p id=\"faq-content\" class=\"faq-text\">Frequently Asked Questions will be displayed here.</p>\n</body>\n</html>"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import ContactSales, SupportRequest\n\nadmin.site.register(ContactSales)\nadmin.site.register(SupportRequest)"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_review_site.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "review_app/forms.py", "code": "from django import forms\nfrom .models import Project, Review\n\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label='Upload JSON File',\n                                help_text='Select a JSON file containing project data.')\n\n\nclass ReviewForm(forms.ModelForm):\n    class Meta:\n        model = Review\n        fields = ['status', 'comments']\n        widgets = {\n            'comments': forms.Textarea(attrs={'rows': 4}),\n        }\n"}, {"file": "models.py", "path": "review_app/models.py", "code": "from django.db import models\n\n\nclass Project(models.Model):\n    project_id = models.CharField(max_length=100, unique=True, help_text='Unique ID for the project.')\n    name = models.CharField(max_length=255, help_text='Name of the project.')\n    description = models.TextField(help_text='Detailed description of the project.')\n    created_at = models.DateTimeField(auto_now_add=True, help_text='Date and time the project was created.')\n    updated_at = models.DateTimeField(auto_now=True, help_text='Date and time the project was last updated.')\n\n    def __str__(self):\n        return self.name\n\n\nclass Review(models.Model):\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    ]\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews', help_text='The project being reviewed.')\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending', help_text='Status of the review.')\n    comments = models.TextField(blank=True, null=True, help_text='Reviewer comments.')\n    created_at = models.DateTimeField(auto_now_add=True, help_text='Date and time the review was created.')\n    updated_at = models.DateTimeField(auto_now=True, help_text='Date and time the review was last updated.')\n\n    def __str__(self):\n        return f'Review for {self.project.name} ({self.status})'\n"}, {"file": "urls.py", "path": "review_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'review_app'\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<str:project_id>/', views.review_view, name='review'),\n    path('upload/', views.upload_json_view, name='upload_json'),\n]"}, {"file": "views.py", "path": "review_app/views.py", "code": "import json\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse, HttpResponseRedirect, JsonResponse\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm, ReviewForm\nfrom .models import Project, Review\nfrom django.urls import reverse\nfrom django.db import transaction\nfrom django.core.exceptions import ValidationError\n\ndef home_view(request):\n    projects = Project.objects.all()\n    form = JSONUploadForm()\n    return render(request, 'review_app/home.html', {'projects': projects, 'form': form})\n\n\ndef about_view(request):\n    return render(request, 'review_app/about.html')\n\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, project_id=project_id)\n    review, created = Review.objects.get_or_create(project=project)\n\n    if request.method == 'POST':\n        form = ReviewForm(request.POST, instance=review)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Review updated successfully.')\n            return redirect('review_app:home')\n    else:\n        form = ReviewForm(instance=review)\n\n    return render(request, 'review_app/review.html', {'project': project, 'form': form})\n\n\ndef upload_json_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            try:\n                handle_json_upload(request.FILES['json_file'])\n                messages.success(request, 'JSON file uploaded and processed successfully.')\n                return redirect('review_app:home')\n            except (json.JSONDecodeError, KeyError, ValidationError) as e:\n                messages.error(request, f'Error processing JSON file: {e}')\n            except Exception as e:\n                messages.error(request, f'An unexpected error occurred: {e}')\n        else:\n             messages.error(request, 'Error processing JSON file, please check your file and try again')\n\n    return redirect('review_app:home')\n\n\n@transaction.atomic\ndef handle_json_upload(json_file):\n    data = json.load(json_file)\n\n    if not isinstance(data, dict):\n        raise ValidationError('Invalid JSON format: Expected a dictionary at the top level.')\n    \n    project_id = data.get('project_id')\n    if not project_id:\n        raise ValidationError(\"'project_id' is required.\")\n\n    project, created = Project.objects.update_or_create(\n        project_id=project_id,\n        defaults={\n            'name': data.get('name', ''),\n            'description': data.get('description', ''),\n        }\n    )\n\n    return project\n"}, {"file": "__init__.py", "path": "review_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "review_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "review_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-25 19:06\n\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Project',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('project_id', models.CharField(help_text='Unique ID for the project.', max_length=100, unique=True)),\n                ('name', models.CharField(help_text='Name of the project.', max_length=255)),\n                ('description', models.TextField(help_text='Detailed description of the project.')),\n                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time the project was created.')),\n                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time the project was last updated.')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Review',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', help_text='Status of the review.', max_length=20)),\n                ('comments', models.TextField(blank=True, help_text='Reviewer comments.', null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time the review was created.')),\n                ('updated_at', models.DateTimeField(auto_now=True, help_text='Date and time the review was last updated.')),\n                ('project', models.ForeignKey(help_text='The project being reviewed.', on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='review_app.project')),\n            ],\n        ),\n    ]\n"}, {"file": "base.html", "path": "review_app/templates/review_app/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Project Review Site{% endblock %}</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 0; padding: 0; background-color: #f4f4f4; }\n        .container { width: 80%; margin: auto; overflow: hidden; }\n        header { background: #333; color: #fff; padding-top: 30px; min-height: 70px; border-bottom: #0779e4 3px solid; }\n        header a { color: #ffffff; text-decoration: none; text-transform: uppercase; font-size: 16px; }\n        header ul { padding: 0; margin: 0; list-style: none; overflow: hidden; }\n        header li { float: left; display: inline; padding: 0 20px 0 20px; }\n        header #branding { float: left; }\n        header #branding h1 { margin: 0; }\n        header nav { float: right; margin-top: 10px; }\n        .message { padding: 10px; margin-bottom: 15px; border-radius: 4px; }\n        .success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }\n        .error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }\n        .button__{border: 0; padding: 8px 20px; background-color:cornflowerblue;}\n        .button__:hover {opacity: 0.8; cursor: pointer;}\n\n        .upload-btn-wrapper { position: relative; overflow: hidden; display: inline-block; }\n        .btn { border: 2px solid gray; color: gray; background-color: white; padding: 8px 20px; border-radius: 8px; font-size: 16px; font-weight: bold; }\n        .upload-btn-wrapper input[type=file] { font-size: 100px; position: absolute; left: 0; top: 0; opacity: 0; }\n    </style>\n\n    {% block extra_head %}{% endblock %}\n</head>\n<body>\n    <header>\n        <div class=\"container\">\n            <div id=\"branding\">\n                <h1><a href=\"{% url 'review_app:home' %}\">Project Review</a></h1>\n            </div>\n            <nav>\n                <ul>\n                    <li><a href=\"{% url 'review_app:home' %}\">Home</a></li>\n                    <li><a href=\"{% url 'review_app:about' %}\">About</a></li>\n                </ul>\n            </nav>\n        </div>\n    </header>\n\n     <div class=\"container\">\n        {% if messages %}\n            {% for message in messages %}\n                <div class=\"message {{ message.tags }}\">\n                    {{ message }}\n                </div>\n            {% endfor %}\n        {% endif %}\n\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "review_app/templates/review_app/home.html", "code": "{% extends 'review_app/base.html' %}\n\n{% block content %}\n<h2 id=\"projects-title\">Projects</h2>\n    <div class=\"upload-btn-wrapper\">\n        <button class=\"btn\">Upload a JSON file</button>\n        <form id=\"upload-form\" action=\"{% url 'review_app:upload_json' %}\" method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <input type=\"submit\" value=\"Submit\" class = \"button__\">\n        </form>\n    </div>\n\n\n<ul id=\"project-list\">\n{% for project in projects %}\n    <li id=\"project-{{ project.id }}\" class=\"project-item\"><a href=\"{% url 'review_app:review' project.project_id %}\">{{ project.name }}</a> ({{project.project_id}})</li>\n{% empty %}\n    <li id=\"no-projects-message\">No projects available.</li>\n{% endfor %}\n</ul>\n\n\n{% endblock %}"}, {"file": "review.html", "path": "review_app/templates/review_app/review.html", "code": "{% extends 'review_app/base.html' %}\n\n{% block content %}\n<h2 id=\"project-name\">{{ project.name }}</h2>\n<p id=\"project-description\">{{ project.description }}</p>\n\n<form id=\"review-form\" method=\"post\" action=\"\">\n    {% csrf_token %}\n    <div id=\"status-field\">\n        <label for=\"{{ form.status.id_for_label }}\">Status:</label>\n        {{ form.status }}\n    </div>\n    <div id=\"comments-field\">\n        <label for=\"{{ form.comments.id_for_label }}\">Comments:</label>\n        {{ form.comments }}\n    </div>\n    <button type=\"submit\" id=\"submit-review-btn\" class = \"button__\">Update Review</button>\n</form>\n\n{% endblock %}"}, {"file": "about.html", "path": "review_app/templates/review_app/about.html", "code": "{% extends 'review_app/base.html' %}\n\n{% block content %}\n<h2 id=\"about-title\">About</h2>\n<p id=\"about-text\">This is a simple project review site built with Django. It allows you to upload project details via JSON and manage reviews.</p>\n{% endblock %}"}, {"file": "settings.py", "path": "project_review_site/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review_app',  # Your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_review_site.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_review_site.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "project_review_site/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review_app.urls')),  # Include your app's URLs\n]"}, {"file": "wsgi.py", "path": "project_review_site/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_review_site.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "project_review_site/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',  # Make sure your app is listed here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),  # Include app-level URLs\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    def get(self, request):\n        return render(request, 'hello_world.html', {'message': 'Hello, World!'})\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HelloWorldView\n\nurlpatterns = [\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "models.py", "path": "example_app/models.py", "code": "# No models needed for this simple example, but you need the file\nfrom django.db import models"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "# No models needed, register here if there's a model.\nfrom django.contrib import admin"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <h1 id=\"main-heading\" class=\"heading\">{{ message }}</h1>\n</body>\n</html>"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\n.heading {\n    color: #333;\n}\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'\n"}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='transactions_user')\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.amount} - {self.category.name}'\n\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='support_request_user')\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.email}'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column; /* Stack elements vertically */\n    justify-content: center; /* Center vertically */\n    align-items: center; /* Center horizontally */\n    min-height: 100vh; /* Use min-height instead of height */\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n    margin-bottom: 20px; /* Add some spacing between h1 and button */\n}\n\n.button {\n    display: inline-block;\n    padding: 10px 20px;\n    background-color: #4CAF50;\n    color: white;\n    text-decoration: none;\n    border-radius: 5px;\n    margin-top: 10px;\n}\n\n.button:hover {\n    background-color: #3e8e41;\n}\n\n.message {\n    margin-top: 2rem;\n    font-size: 2rem;\n    color: #555;\n}"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <h1 id=\"hello-world-heading\" class=\"message\">Hello World!</h1>\n     <a id=\"home-link\" class=\"button\" href=\"{% url 'home' %}\">Go to Home</a>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <h1 id=\"home-heading\">Welcome to the Home Page</h1>\n    <a id=\"hello-world-link\" class=\"button\" href=\"{% url 'helloworld' %}\">Go to Hello World</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'example_app', 'static'),\n]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Category, Transaction, SupportRequest\n\n# Register your models here.\nadmin.site.register(Category)\nadmin.site.register(Transaction)\nadmin.site.register(SupportRequest)"}], "16": [{"file": "16-stdanswer.py", "path": "16-stdanswer.py", "code": "import os\nimport pandas as pd\n\n# File paths\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"Processed Subjects Table.xlsx\"\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    return os.path.exists(file_path)\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format.\n    \"\"\"\n    return file_path.endswith(('.xlsx', '.xls'))\n\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    Checks for:\n        - 'Subject Code' column existence and non-empty values.\n        - 'Subject Name' column existence and non-empty values.\n        - 'Units' column existence, numeric type, and values between 1 and 5 (inclusive).\n        - 'Instructor' column existence (can be empty).\n        - No duplicate 'Subject Code' entries\n\n    Returns:\n        True if valid, False otherwise\n    \"\"\"\n    required_columns = ['Subject Code', 'Subject Name', 'Units', 'Instructor']\n    if not all(col in df.columns for col in required_columns):\n        print(\"Error: Missing required columns.\")\n        return False\n\n    if df['Subject Code'].isnull().any() or df['Subject Code'].eq('').any():\n        print(\"Error: 'Subject Code' cannot be empty.\")\n        return False\n\n    if df['Subject Name'].isnull().any() or df['Subject Name'].eq('').any():\n        print(\"Error: 'Subject Name' cannot be empty.\")\n        return False\n\n    if not pd.api.types.is_numeric_dtype(df['Units']):\n        print(\"Error: 'Units' must be numeric.\")\n        return False\n\n    if not (df['Units'].between(1, 5).all()):\n        print(\"Error: 'Units' must be between 1 and 5.\")\n        return False\n    \n    if df['Subject Code'].duplicated().any():\n        print(\"Error: Duplicate 'Subject Code' entries found.\")\n        return False\n\n    return True\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    1. Reads the Excel file.\n    2. Validates the data.\n    3. If valid, saves to output Excel\n    4. Prints status messages\n\n    \"\"\"\n    try:\n        df = pd.read_excel(input_file)\n    except FileNotFoundError:\n        print(f\"Error: Input file '{input_file}' not found.\")\n        return\n    except Exception as e:\n      print(f\"An error occurred reading file: {e}\")\n      return\n\n    if validate_data(df):\n        try:\n          df.to_excel(output_file, index=False)\n          print(f\"Successfully processed and saved to '{output_file}'.\")\n        except Exception as e:\n          print(f\"An error occurred during saving the file: {e}\")\n    else:\n        print(\"Data validation failed.  Output file not created.\")\n\n\ndef main():\n    \"\"\"\n    Main execution function.\n    \"\"\"\n    if not check_file_exists(input_file):\n        print(f\"Error: Input file '{input_file}' does not exist.\")\n        return\n\n    if not check_file_format(input_file):\n        print(f\"Error: Input file '{input_file}' is not a valid Excel format.\")\n        return\n\n    process_subjects(input_file, output_file)\n\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": ""}, {"file": "Processed Subjects Table.xlsx", "path": "Processed Subjects Table.xlsx", "code": ""}]}