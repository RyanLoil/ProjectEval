{"2": [{"file": "example_app/models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Currency(models.Model):\n    name = models.CharField(max_length=3)\n    rate = models.DecimalField(max_digits=6, decimal_places=2)\n\n    def __str__(self):\n        return self.name"}, {"file": "example_app/views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .models import Currency\ndef home(request):\n    currencies = Currency.objects.all()\n    return render(request, 'home.html', {'currencies': currencies})"}, {"file": "example_app/templates/home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Currency Exchange</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .currency {\n            margin-bottom: 10px;\n            padding: 10px;\n            border: 1px solid #ccc;\n        }\n    </style>\n</head>\n<body>\n    <h1>Currency Exchange</h1>\n    <ul>\n        {% for currency in currencies %}\n        <li id=\"currency-{{ currency.id }}\" class=\"currency\">\n            <strong>{{ currency.name }}:</strong> {{ currency.rate }}</li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "example_app/urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.home, name='home'),\n]"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nfrom django.core.management import execute_from_command_line\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_settings_module_name')\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main() "}], "3": [{"file": "templates/home/home.html", "path": "templates/home/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to our Website!</h1>\n</body>\n</html"}, {"file": "templates/password_options/password_options.html", "path": "templates/password_options/password_options.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Options</title>\n</head>\n<body>\n    <h1>Choose your Password Options</h1>\n    <!-- Add password options form here -->\n</body>\n</html"}, {"file": "templates/generated_password/generated_password.html", "path": "templates/generated_password/generated_password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Generated Password</title>\n</head>\n<body>\n    <h1>Your Generated Password</h1>\n    <p id=\"password\">Password will be displayed here.</p>\n    <!-- Add other relevant elements like copy button etc. -->\n</body>\n</html"}, {"file": "templates/about/about.html", "path": "templates/about/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About Us</title>\n</head>\n<body>\n    <h1>About Our Website</h1>\n    <!-- Add information about your website here -->\n</body>\n</html"}, {"file": "project/settings.py", "path": "project/settings.py", "code": " # settings.py\nfrom pathlib import Path \n\n\n BASE_DIR = Path(__file__).resolve().parent.parent\nINSTALLED_APPS = [     'home',\n                    'password_options',\n                    'generated_password',\n                    'about',\n                  # ... other apps\n                ] \n # ... other settings"}, {"file": "project/urls.py", "path": "project/urls.py", "code": "# urls.py\nfrom django.contrib import admin\nfrom django.urls import path, include\n  urlpatterns = [\n      path('admin/', admin.site.urls),\n      path('', include('home.urls')),\n      path('password_options/', include('password_options.urls')),\n      path('generated_password/', include('generated_password.urls')),\n      path('about/', include('about.urls')),\n  ]  "}, {"file": "pages/home/views.py", "path": "pages/home/views.py", "code": "from django.shortcuts import render\ndef home(request):\n    return render(request, 'home.html')"}, {"file": "pages/password_options/views.py", "path": "pages/password_options/views.py", "code": "from django.shortcuts import render\ndef password_options(request):\n    return render(request, 'password_options.html')"}, {"file": "pages/generated_password/views.py", "path": "pages/generated_password/views.py", "code": "from django.shortcuts import render\ndef generated_password(request):\n    return render(request, 'generated_password.html') "}, {"file": "pages/about/views.py", "path": "pages/about/views.py", "code": "from django.shortcuts import render\ndef about(request):\n    return render(request, 'about.html')"}], "6": [{"file": "templates/home.html", "path": "app_name/templates/home.html", "code": "<div class=\"container\">\n  <h1 id=\"welcome-h1\">Welcome to TodoApp!</h1>\n  <ul class=\"nav\">\n    <li><a href=\"%%url% todo-list%%\" id=\"list-link\">View Todo Lists</a></li>\n    <li><a href=\"%%url% analysis%%\" id=\"analysis-link\">Task Analysis</a></li>\n  </ul>\n</div>"}, {"file": "apps/todoapp/views.py", "path": "app_name/apps/todoapp/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom .models import TodoList, Task\n\ndef index(request):\n  return render(request, 'home.html') \n\ndef all_lists(request):\n  todo_lists = TodoList.objects.all()\n  return render(request, 'list.html', {'todo_lists': todo_lists})\n\ndef list_details(request, pk):\n  todo_list = get_object_or_404(TodoList, pk=pk)\n  return render(request, 'detail.html', {'todo_list': todo_list})"}, {"file": "templates/list.html", "path": "app_name/templates/list.html", "code": "<ul id=\"todo-list-container\">\n  {% for list in todo_lists %}\n    <li>\n      <a href=\"%%url% detail_{{ list.pk }}%%\" id=\"list_{{ list.pk }}\">{{ list.title }}</a>\n    </li>\n  {% endfor %}\n</ul>"}, {"file": "templates/detail.html", "path": "app_name/templates/detail.html", "code": "<div class=\"container\">\n  <h1 id=\"list-title\">{{ todo_list.title }}</h1>\n  <h2>Tasks</h2> \n  <ul id=\"tasks-list\">\n    {% for task in todo_list.tasks.all %}\n      <li>{{ task.description }}</li>\n    {% endfor %}\n  </ul>\n</div>"}, {"file": "templates/analysis.html", "path": "app_name/templates/analysis.html", "code": "<div class=\"container\">\n  <h1>Task Analysis</h1>\n  <div id=\"chart-container\">\n    <p><strong>Chart 1:</strong> Task Completion Data</p>\n    <canvas id=\"completionChart\"></canvas>\n    <p><strong>Chart 2:</strong> Task Distribution across Lists</p>\n    <canvas id=\"distributionChart\"></canvas>\n  </div>\n</div>"}, {"file": "apps/todoapp/models.py", "path": "app_name/apps/todoapp/models.py", "code": "from django.db import models\nclass TodoList(models.Model):\n  title = models.CharField(max_length=200)\nclass Task(models.Model):\n  description = models.TextField()\n  todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)"}, {"file": "app_name/settings.py", "path": "/app_name/settings.py", "code": ""}], "8": [{"file": "somepath/calendar/admin.py", "path": "somepath/calendar/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "somepath/calendar/models.py", "path": "somepath/calendar/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    date = models.DateField()\n\ndef __str__(self):\n    return self.title"}, {"file": "somepath/calendar/views.py", "path": "somepath/calendar/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Event\n\ndef home(request):\n    events = Event.objects.all()\n    return render(request, 'home.html', {'events': events})\n\ndef calendar(request):\n    # Implement logic for displaying the calendar\n    return render(request, 'calendar.html')\n\ndef add_event(request):\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        date = request.POST.get('date')\n        # Save event to database\n    return redirect('home')\ndef search_events(request):\n    pass  # Implement logic for searching events\ndef edit_event(request, pk):\n    event = Event.objects.get(pk=pk)\n    # Implement logic for editing an event\ndef delete_event(request, pk):\n    event = Event.objects.get(pk=pk)\n    # Implement logic for deleting an event\ndef list_all_events(request):\n    pass  # List all events\ndef show_event_details(request, pk):\n    event = Event.objects.get(pk=pk)\n    # Implement logic for displaying event details\n"}, {"file": "somepath/calendar/urls.py", "path": "somepath/calendar/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'calendar'\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar, name='calendar'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('search_events/', views.search_events, name='search_events'),\n    path('<int:pk>/edit_event/', views.edit_event, name='edit_event'),\n    path('<int:pk>/delete_event/', views.delete_event, name='delete_event'),\n    path('list_all_events/', views.list_all_events, name='list_all_events'),\n    path('<int:pk>/', views.show_event_details, name='show_event_details'),\n]\n"}, {"file": "templates/home.html", "path": "somepath/calendar/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Events</h1>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{{ event.id }}\">{{ event.title }}</a> - {{ event.date }}</li>\n        {% endfor %}\n    </ul>\n    <a href=\"add_event/\">Add New Event</a>\n{% endblock %}\n"}, {"file": "templates/calendar.html", "path": "somepath/calendar/templates/calendar.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar</title>\n</head>\n<body>\n    <h1>Calendar</h1>\n    <!-- Implement your calendar logic here -->\n</body>\n</html>\n"}, {"file": "/example_app/settings.py", "path": "/example_app/settings.py", "code": "# settings.py\nyour settings \n"}], "9": [{"file": "app/views.py", "path": "somepath/somedir/app/views.py", "code": "from django.shortcuts import render\nfrom .models import ProductOverview\n\ndef home(request):\n    product_overview = ProductOverview.objects.first()\n    return render(request, 'home.html', {'product_overview': product_overview})\n\ndef features(request):\n    # Logic to fetch and display features\n    return render(request, 'features.html')\n\ndef pricing(request):\n    # Logic to display pricing plans\n    return render(request, 'pricing.html')\n\ndef about_us(request):\n    # Logic to display company information\n    return render(request, 'about_us.html')\n\ndef support(request):\n    # Logic for FAQ and Support Message\n    return render(request, 'support.html')"}, {"file": "app/models.py", "path": "somepath/somedir/app/models.py", "code": "from django.db import models\nclass ProductOverview(models.Model):\n    description = models.TextField()\n    # Add other relevant fields"}, {"file": "templates/home.html", "path": "somepath/somedir/templates/home.html", "code": "{{ product_overview.description }}"}, {"file": "templates/features.html", "path": "somepath/somedir/templates/features.html", "code": ""}, {"file": "templates/pricing.html", "path": "somepath/somedir/templates/pricing.html", "code": ""}, {"file": "templates/about_us.html", "path": "somepath/somedir/templates/about_us.html", "code": ""}, {"file": "templates/support.html", "path": "somepath/somedir/templates/support.html", "code": ""}, {"file": "urls.py", "path": "somepath/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom app import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about/', views.about_us, name='about_us'),\n    path('support/', views.support, name='support'),\n]"}], "12": [{"file": "project/settings.py", "path": "somepath/settings.py", "code": "\nSETTINGS_BASE = \"\"\"\n# Default Django settings:\nn.\n...\"\"\"\n# Update the defaults below to reflect your specific needs.\n..."}, {"file": "project/wsgi.py", "path": "somepath/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "somepath/manage.py", "code": "#!/usr/bin/env python\nimport os\nfrom django.core.management import execute_from_command_line\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    execute_from_command_line(sys.argv)\nif __name__ == '__main__':\n    main()"}, {"file": "project/home/views.py", "path": "somepath/home/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'home.html')"}, {"file": "project/accounts/models.py", "path": "somepath/accounts/models.py", "code": "from django.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=255)\n    email = models.EmailField()\n    password = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.username"}, {"file": "project/templates/home.html", "path": "somepath/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Homepage</title>\n    </head>\n<body>\n    <h1>Welcome to our Project</h1>\n</body>\n</html>"}, {"file": "project/frontend_employeeportal/views.py", "path": "somepath/frontend_employeeportal/views.py", "code": "from django.shortcuts import render\n\ndef submit_claim(request):\n    return render(request, 'submit_claim.html')"}, {"file": "project/templates/submit_claim.html", "path": "somepath/templates/submit_claim.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Submit Claim</title>\n</head>\n<body>\n    <h1>Employee Claim Submission</h1>\n    <form action=\"/submit_claim\" method=\"post\">\n        <!-- Add claim details form fields here -->\n        <button type=\"submit\">Submit Claim</button>\n    </form>\n</body>\n</html>"}, {"file": "project/adminportal/views.py", "path": "somepath/adminportal/views.py", "code": "from django.shortcuts import render, redirect\n\ndef approve_claim(request):\n    return render(request, 'approve_claim.html')"}, {"file": "project/templates/approve_claim.html", "path": "somepath/templates/approve_claim.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Approve Claim</title>\n</head>\n<body>\n    <h1>Claim Approval</h1>\n    <!-- Add claim details and approval buttons here -->\n</body>\n</html>"}, {"file": "project/budget_control/views.py", "path": "somepath/budget_control/views.py", "code": "from django.shortcuts import render, redirect\n\ndef analyze_expense_balances(request):\n    return render(request, 'analyze_expenses.html')"}, {"file": "project/templates/analyze_expenses.html", "path": "somepath/templates/analyze_expenses.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Analyze Expense Balances</title>\n</head>\n<body>\n    <h1>Expense Balance Report</h1>\n    <!-- Add expense details and analysis here -->\n</body>\n</html>"}], "13": [{"file": "manage.py", "path": "somepath/myapp/manage.py", "code": "#!/usr/bin/env python\nimport os\nfrom django.core.management import execute_from_command_line\n\ndef main():\n  os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myapp.settings')\nexecute_from_command_line(sys.argv)\nif __name__ == '__main__':\n  main()"}, {"file": "somepath/myapp/settings.py", "path": "somepath/myapp/settings.py", "code": "import os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n\nPROJECT_ROOT = os.path.abspath(os.path.join(BASE_DIR, '..'))\n\nSTATICFILES_DIRS = [ \n    os.path.join(PROJECT_ROOT, 'static'),\n]\nINSTALLED_APPS = [\n    # Your apps here\n    'myapp',\n] # Add other necessary apps like 'django.contrib.admin',\n                      # 'django.contrib.auth', etc.\n\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY') \ndef default_dbpath(): return os.path.join(BASE_DIR, 'db.sqlite3') DATABASES = {\n    'default': {\n        # Database settings, such as name, user, password etc.\n        }\n    }\n\nALLOWED_HOSTS = ['*']\nDEBUG = False \n"}], "14": [{"file": "hello_world/views.py", "path": "somepath/hello_world/views.py", "code": "from django.shortcuts import render\n  \ndef hello_world(request):\n    return render(request, 'hello_world/index.html')"}, {"file": "templates/hello_world/index.html", "path": "somepath/hello_world/templates/hello_world/index.html", "code": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Hello, World!</title>\n  </head>\n  <body>\n    <h1 id=\"greeting\" class=\"main-heading\">Hello, World!</h1>\n  </body>\n</html>"}, {"file": "/example_app/urls.py", "path": "somepath/example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello_world.urls')),\n]\n"}, {"file": "hello_world/urls.py", "path": "somepath/hello_world/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]\n"}, {"file": "requirements.txt", "path": "somepath/requirements.txt", "code": "Django\n"}], "16": [{"file": "InputFileValidator.py", "path": "src/validation/InputFileValidator.py", "code": "class InputFileValidator:\n\n    def __init__(self, file_path):\n        self.file_path = file_path\n\n    def check_file_existence(self):\n        import os\n        if os.path.exists(self.file_path):\n            return True\n        else:\n            raise FileNotFoundError(f\"File not found: {self.file_path}\")\n\n    def validate_headers(self):\n      # Implementation for ValidateHeaders function\n\n    def validate_time_column(self):\n      # Implementation for ValidateTimeColumn function\n\n    def validate_data_integrity(self):\n      # Implementation for ValidateDataIntegrity function\n\n    def validate_null_values(self):\n      # Implementation for ValidateNullValue function\n\n# Example usage\nvalidator = InputFileValidator('Spring Semester Subjects.xlsx')\nvalidator.check_file_existence()"}, {"file": "DataTransformer.py", "path": "src/transformation/DataTransformer.py", "code": "class DataTransformer:\n  def __init__(self, input_data):\n    self.input_data = input_data\n\n  def transform_to_two_dimensional_table(self):\n    # Implementation for TransformToTwoDimensionTable function\n\n  def data_mapping(self):\n    # Implementation for DataMapping function \n\n # Example usage\n transformer = DataTransformer(input_data)\n transformed_table = transformer.transform_to_two_dimensional_table()\n mapped_table = transformer.data_mapping(transformed_table)\n"}, {"file": "OutputFileCreator.py", "path": "src/output/OutputFileCreator.py", "code": "from openpyxl import Workbook\nclass OutputFileCreator:\n  def __init__(self, output_table):\n    self.output_table = output_table \n\n  def create_output_excel_file(self):\n    workbook = Workbook()\n    sheet = workbook.active\n    for row in self.output_table:\n      sheet.append(row)\n    return workbook\n\n  def save_table_to_excel(self, workbook='output.xlsx'):\n    workbook.save('output.xlsx')\n   \n # Example usage\n creator = OutputFileCreator(mapped_table)\n creator.create_output_excel_file()\n creator.save_table_to_excel() "}], "17": [{"file": "DataPreparation.py", "path": "src/DataPreparation.py", "code": "import pandas as pd\n\ndef ReadDataset(filepath='Gamedata.xlsx'):\n    \"\"\"Reads the 'Gamedata.xlsx' dataset into a Pandas DataFrame.\"\"\n    try:\n        df = pd.read_excel(filepath)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File '{filepath}' not found.\")\n        return None\n\ndef LagDependentVariable(df, column_name='result', lag_period=1):\n    \"\"\"Applies a one-period lag to the specified column in the DataFrame.\"\"\n    df[f'{column_name}_lag'] = df[column_name].shift(lag_period)\n    return df\n\ndef PrepareIndependentVariables(df, independent_variables, handling_method='drop'):\n    \"\"\"Prepares independent variables using selected columns and handles null values.\"\"\n    if handling_method == 'fillna':\n        df[independent_variables].fillna(method='ffill', inplace=True)\n    elif handling_method == 'dropna':\n        df.dropna(subset=independent_variables, inplace=True)\n    else:\n        print(\"Invalid handling method. Using 'drop' as default.\")\n        df.dropna(subset=independent_variables, inplace=True)\n    X = df[independent_variables]\n    return X\n\ndef main():\n    df = ReadDataset()\n    if df is not None:\n        df = LagDependentVariable(df)\n        X = PrepareIndependentVariables(df)\n        print(X)\n\nif __name__ == '__main__':\n    main()"}, {"file": "ModelCreation.py", "path": "src/ModelCreation.py", "code": "import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix\n\ndef CreateLogisticModel(X, y):\n    \"\"\"Creates a logistic regression model and trains it.\"\"\n    model = LogisticRegression()\n    model.fit(X, y)\n    return model\n\ndef GenerateModelSummary(model):\n    \"\"\"Generates and prints a summary of the trained logistic regression model.\"\"\n    print(\"Logistic Regression Model Summary:\")\n    print(model.summary())\n\ndef main():\n    \"\" Load your data here using DataPreparation.py \"\"\n    # ... (Load preprocessed data)\n    X = ...  \n    y = ...   \n    model = CreateLogisticModel(X, y)\n    GenerateModelSummary(model)\n\nif __name__ == '__main__':\n    main()"}, {"file": "Output.py", "path": "src/Output.py", "code": "import pandas as pd\n\ndef WriteSummary(summary, filepath='Logistic.xlsx'):\n    \"\"\"Writes a summary to an Excel file.\"\"\n    with pd.ExcelWriter(filepath) as writer:\n        summary.to_excel(writer, sheet_name='Summary', index=False)\n\ndef main():\n    \"\" Load the model summary here from ModelCreation.py \"\"\n    # ... (Load model summary)\n    model_summary = ...\n    WriteSummary(model_summary)\n\nif __name__ == '__main__':\n    main() "}], "18": [{"file": "Main Menu.py", "path": "game/src/UI/Main_Menu.py", "code": "from tkinter import * \n\nclass MainMenu:\n    def __init__(self, master):\n        self.master = master\n        master.title(\"My Game - Main Menu\")\n\n        # Add buttons and other UI elements here...\n\nroot = Tk()\nMainMenu(root)\nroot.mainloop()"}, {"file": "GameEnvironment.py", "path": "game/src/world/GameEnvironment.py", "code": "# ... Logic for creating and maintaining game environment ..."}, {"file": "GameLogic.py", "path": "game/src/Logic/GameLogic.py", "code": "# ... Logic for handling game events, player actions, etc. ..."}, {"file": "HelpAndSupport.py", "path": "game/src/UI/HelpAndSupport.py", "code": "# ...  UI elements and logic for help and support features ..."}, {"file": "parser.py", "path": "game/src/util/parser.py", "code": "# ... Parser class or functions to handle input data (e.g. from files, commands) ..."}]}