{"2": [{"file": "templates/home_page.html", "path": "templates/something/home_page.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n\n    <form id=\"currency-converter-form\">\n        <div>\n            <label for=\"base-currency\">Select Base Currency:</label>\n            <select id=\"base-currency\" name=\"base_currency\"></select>\n        </div>\n        <div>\n            <label for=\"target-currency\">Select Target Currency:</label>\n            <select id=\"target-currency\" name=\"target_currency\"></select>\n        </div>\n        <div>\n            <label for=\"amount\">Enter Amount:</label>\n            <input type=\"number\" id=\"amount\" name=\"amount\"></input>\n        </div>\n        <button type=\"submit\" id=\"convert-button\">Convert</button>\n    </form>\n\n    <div id=\"conversion-result\">\n        <h2>Conversion Result</h2>\n        <p>Converted Amount:</p>\n    </div>\n    <div id=\"exchange-rate-info\"><p>Exchange Rate:</p></div>\n\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n    <script src=\"{{url 'scripts'}}\" type=\"text/javascript\"></script>\n</body>\n</html> "}, {"file": "urls.py", "path": "", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('something.urls')),\n]\n"}, {"file": "settings.py", "path": ".", "code": "# SETTINGS:\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\nSECRET_KEY = 'your_secret_key'\n\ndef generate_secret_key():\napp import os\nexists = os.path.exists('settings.py')\nif exists:\rpass   \telse:\n        os.\n    import codecs\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()' \n    secret_key = ''.join(random.choice(chars) for i in range(50))\n    with open('SECRET_KEY', 'w') as f:\n        f.write(secret_key)\n return secret_key\n\nINSTALLED_APPS =\n[   'django.contrib.admin',\r\n    'django.contrib.auth',\r\n    'django.contrib.contenttypes',\r\n    'django.contrib.sessions',\r\n    'something',]\n# DATABASE CONFIGURATION:\nDATABASES = {\r\n    'default': {\r\n        'ENGINE': 'django.db.backends.sqlite3',\r\n        'NAME': BASE_DIR / 'db.sqlite3',\r\n    },\r\n}\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n# STATIC FILES:\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media' \ndef generate_secret_key():\napp import os\nexists = os.path.exists('settings.py')\nif exists:\rpass   \telse:\n        os.\n    import codecs\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()' \n    secret_key = ''.join(random.choice(chars) for i in range(50))\n    with open('SECRET_KEY', 'w') as f:\n        f.write(secret_key)\n return secret_key\n    "}, {"file": "something/urls.py", "path": "something/urls.py", "code": "from django.urls import path\nfrom . import views\n\ndef generate_secret_key():\napp import os\nexists = os.path.exists('settings.py')\nif exists:\rpass   \telse:\n        os.\n    import codecs\n    chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()' \n    secret_key = ''.join(random.choice(chars) for i in range(50))\n    with open('SECRET_KEY', 'w') as f:\n        f.write(secret_key)\n return secret_key\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n"}], "5": [{"file": "templates/home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Markdown to HTML Converter</title>\n    <link rel=\"stylesheet\" href=\"static/css/style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"welcome-message\">Welcome!</h1>\n        <p id=\"introduction\">This Markdown to HTML converter allows you to easily convert your Markdown text into web-ready HTML code.</p>\n        <ul id=\"navigation-links\">\n            <li><a href=\"/convert\">Convert</a></li>\n            <li><a href=\"/about\">About</a></li>\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "templates/convert.html", "path": "templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Convert Markdown to HTML</title>\n    <link rel=\"stylesheet\" href=\"static/css/style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h2>Markdown Input</h2>\n        <textarea id=\"markdown-input\" rows=\"10\"></textarea>\n        <h2>HTML Output</h2>\n        <div id=\"html-output\"></div>\n        <button id=\"convert-button\">Convert</button>\n        <h3>Upload File</h3>\n        <input type=\"file\" id=\"file-upload\">\n        <button id=\"download-html\">Download HTML</button>\n    </div>\n</body>\n</html>"}, {"file": "templates/about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" href=\"static/css/style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>About the Converter</h1>\n        <section id=\"team-information\">Team Information Goes Here</section>\n        <section id=\"faq\">FAQ Section Goes Here</section>\n    </div>\n</body>\n</html>"}, {"file": "static/css/style.css", "path": "static/css/style.css", "code": "/* Style your project here */\n.container{\n    width: 80%;\n    margin: 0 auto;\n}\na{\n    color: blue;\n}\n"}, {"file": "urls.py", "path": "website/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converterapp.urls')),\n]\n"}, {"file": "converterapp/urls.py", "path": "website/converterapp/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert', views.convert, name='convert'),\n    path('about', views.about, name='about'),\n]\n"}, {"file": "converterapp/views.py", "path": "website/converterapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse, JsonResponse\nimport markdown\ndef home(request):\n    return render(request, 'home.html')\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_input', '')\n        html_output = markdown.markdown(markdown_text)\n        return JsonResponse({'html_output': html_output})\n    return render(request, 'convert.html')\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "settings.py", "path": "website/settings.py", "code": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converterapp',  # Add your app name here\n]\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [ \n    os.path.join(BASE_DIR, 'static'), \n]"}, {"file": "manage.py", "path": "website/manage.py", "code": "#!/usr/bin/env python\nimport os\nfrom django.core.management import execute_from_command_line\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'website.settings')\n    execute_from_command_line(sys.argv)\nif __name__ == '__main__':\n    main()"}], "8": [{"file": "core/models.py", "path": "mysite/core/models.py", "code": "from django.db import models\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    date = models.DateField()\n    time = models.TimeField()\n    is_repeated = models.BooleanField(default=False)\n\ndeface = 1 \n@property\n   def get_total_events():\n       return  Event.objects.count()\nclass User(models.Model):\n    username = models.CharField(max_length=200, unique=True)\n    password = models.CharField(max_length=200)\nexternal_id = Field\n   def __str__(self):\n       return self.username"}, {"file": "templates/calendar/index.html", "path": "mysite/templates/calendar/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calendar</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/5.11.3/main.css\">\n</head>\n<body>\n    \n   <!-- Calendar -->\n    <div id='calendar'></div>\n  \n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/5.11.3/main.js\"></script>\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            var calendarEl = document.getElementById('calendar');\n            var calendar = new FullCalendar.Calendar(calendarEl, {\n                initialView: 'month',\n              // Add your required initial view here (e.g., 'dayGridMonth') \n                events: '/api/calendar_events/', // Retrieve events from your Django API \n            });\n            calendar.render();\n        });\n    </script>\n</body>\n</html>"}, {"file": "core/views.py", "path": "mysite/core/views.py", "code": "from django.shortcuts import render, redirect\nfrom core.models import Event\ndef index(request):\n  events = Event.objects.all()\n  return render(request, 'calendar/index.html', {'events': events})\n     "}, {"file": "core/urls.py", "path": "mysite/core/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.index, name='home'),\n]"}, {"file": "settings.py", "path": "mysite/settings.py", "code": "INSTALLED_APPS = [ \n    # ... other apps \n    'core',  \n\n]\ndef DEBUG = True \nALLOWED_HOSTS = ['*']\n"}], "9": [{"file": "urls.py", "path": "project/mychatbot/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('pages.urls')),\n]\n"}, {"file": "settings.py", "path": "project/mychatbot/settings.py", "code": "INSTALLED_APPS =\n[\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'pages',\n]\n\n# ... other settings \n"}, {"file": "pages/urls.py", "path": "project/mychatbot/pages/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'pages'\nurlpatterns = [\n    path('home/', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about-us/', views.about_us, name='about-us'),\n    path('support/', views.support, name='support'),\n]\n"}, {"file": "pages/views.py", "path": "project/mychatbot/pages/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    context = {\n        'title': 'Home',\n    }\n    return render(request, 'pages/home.html', context)\n\ndef features(request):\n    context = {\n        'title': 'Features',\n    }\n    return render(request, 'pages/features.html', context)\n\ndef pricing(request):\n    context = {\n        'title': 'Pricing',\n    }\n    return render(request, 'pages/pricing.html', context)\n\ndef about_us(request):\n    context = {\n        'title': 'About Us',\n    }\n    return render(request, 'pages/about_us.html', context)\n\ndef support(request):\n    context = {\n        'title': 'Support'\n    }\n    return render(request, 'pages/support.html', context)\n"}, {"file": "templates/pages/home.html", "path": "project/mychatbot/templates/pages/home.html", "code": "<h1>{{ title }}</h1>\n<p>Welcome to our AI Chatbot</p>\n<h3>About Our AI</h3>\n<div class=\"content\">\n    <!-- Content for product overview -->\n</div>\n"}, {"file": "templates/pages/features.html", "path": "project/mychatbot/templates/pages/features.html", "code": "<h1>{{ title }}</h1>\n<h2>Key Features</h2>\n<ul id=\"features-list\">\n    <!-- Feature items will be listed here -->\n</ul>\n"}, {"file": "templates/pages/pricing.html", "path": "project/mychatbot/templates/pages/pricing.html", "code": "<h1>{{ title }}</h1>\n<h3>Pricing Plans</h3>\n<div id=\"pricing-plans\">\n    <!-- Pricing table or plans will be displayed here -->\n</div>\n<form id=\"contact-sales\" action=\"\" method=\"post\">\n    <!-- Contact Sales form -->\n</form>\n"}, {"file": "templates/pages/about_us.html", "path": "project/mychatbot/templates/pages/about_us.html", "code": "<h1>{{ title }}</h1>\n<h2>About Us</h2>\n<p>More details about the company and team here.</p>\n"}, {"file": "templates/pages/support.html", "path": "project/mychatbot/templates/pages/support.html", "code": "<h1>{{ title }}</h1>\n<h2>Support</h2>\n<h3>FAQ</h3>\n<div id=\"faq-list\">\n    <!-- FAQ items will be listed here -->\n</div>\n<form id=\"support-message\" action=\"\" method=\"post\">\n    <!-- Support message form -->\n</form>\n"}], "10": [{"file": "urls.py", "path": "myproject/urls.py", "code": "\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "myapp/urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal_log/', views.meal_log, name='meal_log'),\n    path('activity_log/', views.activity_log, name='activity_log'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help, name='help'),\n]\n"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n# Add your view functions here\nexample_view = lambda request: HttpResponse('This is an example view')\ndef home(request):\n    return render(request, 'home.html')\ndef dashboard(request): \n    return render(request, 'dashboard.html')\ndef meal_log(request): \n    return render(request, 'meal_log.html')\ndef activity_log(request): \n    return render(request, 'activity_log.html')\ndef analysis(request): \n    return render(request, 'analysis.html')\ndef settings(request): \n    return render(request, 'settings.html')\ndef help(request): \n    return render(request, 'help.html')\n"}, {"file": "templates/home.html", "path": "myproject/myapp/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Home Page</h1>\n  <p>Welcome to our calorie tracking app!</p>\n{% endblock %}"}, {"file": "templates/dashboard.html", "path": "myproject/myapp/templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h1>Dashboard</h1>\n<div class=\"container\">\n  <h2>Daily Calorie Intake</h2>\n   \t<p> </p>\n  <h2>Recent Meals</h2>\n   <ul>\n       </ul>\n  <h2>Add Meal</h2>\n   <form>\n   </form>\n  <h2>Recent Activities</h2>\n   <ul>\n \t\t</ul>\n  <h2>Add Activity</h2>\n  <form method=\"post\">\n    </form>\n</div>\n{% endblock %}\n"}, {"file": "templates/base.html", "path": "myproject/myapp/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calorie Tracker</title>\n</head>\n<body>\n    <nav>\n    <!-- Navigation bar goes here -->\n    </nav>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n    <footer>\n      <!-- Footer goes here -->\n    </footer>\n  <h1></h1> \n <script src=\"https://code.jquery.com/jquery-3.6.0.js\"></script><script src=\"script.js\" defer></script>\n</body>\n</html>"}], "14": [{"file": "templates/hello_world.html", "path": "templates/hello_world.html", "code": "<html>\n  <head>\n    <title>Hello World</title>\n  </head>\n  <body>\n    <h1 id=\"hello-world\" class=\"heading\">Hello World</h1>\n  </body>\n</html>"}, {"file": "static/css/style.css", "path": "static/css/style.css", "code": "\nh1.heading {\n  text-align: center;\n  font-size: 3em;\n  color: #333;\n}\n"}, {"file": "blog/views.py", "path": "blog/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'hello_world.html')\n"}, {"file": "urls.py", "path": "", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.hello_world, name='index'),\n]"}, {"file": "manage.py", "path": "", "code": "#!/usr/bin/env python\nif __name__ == '__main__':\n    import os\n    import sys\n\n    from django.core.management import execute_from_command_line\n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    execute_from_command_line(sys.argv)"}], "17": [{"file": "ReadDataset.py", "path": "DataPreparation/ReadDataset.py", "code": "import pandas as pd\n\ndef ReadDataset(filepath='Gamedata.xlsx'):\n    try:\n        df = pd.read_excel(filepath)\n        return df\n    except FileNotFoundError:\n        print(f'Error: File not found at {filepath}')\n        exit()\nexcept Exception as e:\n    print(f'Error reading the dataset: {e}')\n    exit()"}, {"file": "LagDependentVariable.py", "path": "DataPreparation/LagDependentVariable.py", "code": "import pandas as pd\n\ndef LagDependentVariable(df):\n    df['result_lag'] = df['result'].shift(1)\n    return df"}, {"file": "PrepareIndependentVariables.py", "path": "DataPreparation/PrepareIndependentVariables.py", "code": "import pandas as pd\ndef PrepareIndependentVariables(df):\n  \"\"\"   Handle null value and empty table check.\n     As the user didn't mention how to deal with null value,\nthe program should stop when null value is found.\n  \"\"\"\n  for col in df.columns:\n    if df[col].isnull().any():\n      print(f'Error: Null values found in column {col}. Program stopping.')\n      exit()\n  if df.empty:\n    print('Error: Empty table detected. Program stopping.')\n    exit()\n  X = df.drop('result', axis=1)\n  return X"}, {"file": "CreateLogisticModel.py", "path": "ModelCreation/CreateLogisticModel.py", "code": "from sklearn.linear_model import LogisticRegression\ndef CreateLogisticModel(X, y):\n    model = LogisticRegression()\n    model.fit(X, y)\n    return model"}, {"file": "GenerateModelSummary.py", "path": "ModelCreation/GenerateModelSummary.py", "code": "from sklearn.metrics import classification_report\ndef GenerateModelSummary(model, X, y):\n    y_pred = model.predict(X)\n    print(classification_report(y, y_pred))"}, {"file": "WriteSummary.py", "path": "Output/WriteSummary.py", "code": "import pandas as pd\ndef WriteSummary(summary, filename='Logistic.xlsx'):\n    df_summary = pd.DataFrame(summary)\n    df_summary.to_excel(filename, index=False)"}]}