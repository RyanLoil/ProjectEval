{"2": [{"file": "settings.py", "path": "app/", "code": "\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS =\n    [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'currency_converter', \n    ]\n\n# ... (Rest of your settings.py)\n"}, {"file": "urls.py", "path": "app/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom currency_converter import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('currency_details/<str:currency>/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings, name='settings'),\n]\n"}, {"file": "views.py", "path": "app/currency_converter/", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\ndef currency_details(request, currency):\n     # Fetch and display details for the specified currency\n     return render(request, 'currency_details.html', {'currency': currency})\ndef settings(request):\n      # Handle settings page operations\n      return render(request, 'settings.html')"}, {"file": "templates/home.html", "path": "app/currency_converter/templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n    <form action=''>\n        <label for='base_currency'>Base Currency:</label>\n        <select id='base_currency' name='base_currency'>\n            <!-- Populate currency options here -->\n        </select><br><br>\n\n        <label for='target_currency'>Target Currency:</label>\n        <select id='target_currency' name='target_currency'>\n            <!-- Populate currency options here -->\n        </select><br><br>\n\n        <label for='amount'>Amount:</label>\n        <input type='number' id='amount' name='amount'><br><br>\n\n        <button type='submit'>Convert</button>\n    </form>\n\n    <!-- Display conversion result below the form -->\n    \n</body>\n</html>"}, {"file": "templates/currency_details.html", "path": "app/currency_converter/templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Details</title>\n</head>\n<body>\n    <h1>{{ currency }} Details</h1>\n     <!-- Display details for the selected currency -->\n</body>\n</html>"}, {"file": "templates/settings.html", "path": "app/currency_converter/templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <h1>Settings</h1>\n\n    <!-- Settings content here -->\n</body>\n</html>"}], "4": [{"file": "urls.py", "path": "project/app1/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('qrcode/', views.generate_qrcode, name='qrcode'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "project/app1/views.py", "code": "from django.shortcuts import render \n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_qrcode(request):\n    return render(request, 'qrcode.html')\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "home.html", "path": "project/app1/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Welcome to our QR Code Generator</h1>\n    <p>Generate your own QR codes for websites, text, or anything else!</p>\n    <a href=\"/qrcode/\" id=\"generate-qr-button\" class=\"button\">Generate QR Code</a>\n    \n</body>\n</html>\n"}, {"file": "qrcode.html", "path": "project/app1/templates/qrcode.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <h1>Generate Your QR Code</h1>\n    <label for=\"text-input\">Text or URL:</label><br>\n    <input type=\"text\" id=\"text-input\" name=\"text-input\"><br><br>\n    <button id=\"generate-button\" class=\"button\">Generate</button>\n    <div id=\"qrcode-display\"></div>\n        \n</body>\n</html>\n"}, {"file": "style.css", "path": "project/app1/static/style.css", "code": "body {\n    font-family: sans-serif;\n}\n\n.button {\n    padding: 10px 20px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    cursor: pointer;\n}\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\nfrom django.contrib.staticfiles.urls import staticfiles_urlpatterns\nfrom django.conf import settings\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nINSTALLED_APPS =\n    [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'app1',\n    ]\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nSTATICFILES_DIRS =\n    [\n        BASE_DIR / 'static',\n    ]\n\n# See: https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = '/static/' \nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nMEDIA_URL = '/media/' \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nTEMPLATES =\n    [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [BASE_DIR / 'templates'],\n            'APP_DIRS': True,\n            'OPTIONS': {\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.template.context_processors.media',\n                ],\n            },\n        },\n    ]\n"}, {"file": "__init__.py", "path": "project/app1/ __init__.py", "code": ""}], "8": [{"file": "templates/home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1>Welcome to the Calendar</h1>\n        <div id=\"current_date\" class=\"alert alert-info\"> </div>\n        <button type=\"button\" id=\"calendar_link\" class=\"btn btn-primary\">View Calendar</button>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.6.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n            // AJAX call to get current date\n            $.ajax({\n                url: '/get-current-date',\n                success: function(data) {\n                    $('#current_date').text('Current Date: ' + data);\n                }\n            });\n\n            $('#calendar_link').click(function() {\n                window.location.href = '/calendar';\n            });\n        });\n    </script>\n</body>\n</html>"}, {"file": "templates/calendar.html", "path": "templates/calendar.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calendar View</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1>Calendar</h1>\n\n        <div id=\"calendar\" class=\"pb-3\"></div>\n\n        <button type=\"button\" id=\"add_event_btn\" class=\"btn btn-primary\">Add Event</button>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.6.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js\"></script>\n\n    <script>\n       $('#add_event_btn').click(function() {\n           window.location.href = '/add-event';\n       });\n    </script>\n</body>\n</html>"}, {"file": "templates/add_event.html", "path": "templates/add_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Event - Calendar Application</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1>Add New Event</h1>\n        <form action=\"/create-event\" method=\"POST\">\n            {% csrf_token %}\n            <div class=\"form-group row\">\n                <label for=\"title\" class=\"col-sm-2 col-form-label\">Title:</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" required>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"date\" class=\"col-sm-2 col-form-label\">Date:</label>\n                <div class=\"col-sm-10\">\n                    <input type=\"date\" class=\"form-control\" id=\"date\" name=\"date\" required>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n                <label for=\"description\" class=\"col-sm-2 col-form-label\">Description:</label>\n                <div class=\"col-sm-10\">\n                    <textarea class=\"form-control\" id=\"description\" name=\"description\"></textarea>\n                </div>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Create Event</button>\n        </form>\n    </div>\n\n</body>\n</html>"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\ndef urls(root_urlconf):\n    return [\n        path('admin/', admin.site.urls),\n        path('', include('calendar_app.urls')),\n    ]"}, {"file": "calendar_app/urls.py", "path": "myapp/calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\ndef urls(root_urlconf):\n    return [\n        path('', views.home, name='home'),\n        path('calendar/', views.calendar, name='calendar'),\n        path('add-event/', views.add_event, name='add_event'),\n        path('create-event/', views.create_event, name='create_event'),\n    ]"}, {"file": "calendar_app/views.py", "path": "myapp/calendar_app/views.py", "code": "from django.shortcuts import render\nfrom .models import Event # assuming you have an Event model\n from django.http import HttpResponseRedirect  from django.urls import reverse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef calendar(request):\n    events = Event.objects.order_by('date') # assuming you have a queryset for events\n    context = {'events': events}\n    return render(request, 'calendar.html', context=context)\n\ndef add_event(request):\n    if request.method == 'POST':\n        # Process form data (from your form here)\n        return HttpResponseRedirect(reverse('create_event'))\n    else:\n        return render(request, 'add_event.html')\n\ndef create_event(request):\n    if request.method == 'POST':\n        # Handle creating the Event object here based on form data\n        return HttpResponseRedirect(reverse('calendar'))\n    else:\n        return render(request, 'add_event.html') "}], "11": [{"file": "settings.py", "path": "/", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\ndef DEBUG = # True if you need debug mode for development purposes, change after deployment to False.\nDEBUG = False\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'testapp', # your app name\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static',]\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']},\n    },\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'django.core.middleware.common.CommonMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'testapp.urls'\nWSGI_APPLICATION = 'testapp.wsgi.application'\n\n"}, {"file": "settings.py", "path": ".", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\ndef DEBUG = # True if you need debug mode for development purposes, change after deployment to False.\nDEBUG = FALSE\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'testapp', # your app name\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static',]\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']},\n    },\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.locale.LocaleMiddleware',\n    'django.core.middleware.common.CommonMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'testapp.urls'\nWSGI_APPLICATION = 'testapp.wsgi.application'\n\n"}, {"file": "templates/testapp/home.html", "path": "./templates/testapp", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Welcome to the Test Code Review Page</title>\n    <!-- Bootstrap CSS  -->\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-rbsD5wR+1tE0C+Qm2uW0d+qK3H6zHSFv7P9hvgNqYjI3zU5O9lB/ZfF\" crossorigin=\"anonymous\">\n</head>\n<body>\n    <h1>Welcome to the Test Code Review Page</h1>\n</body>\n</html>"}, {"file": "urls.py", "path": "./testapp", "code": "from django.contrib import admin\nfrom django.urls import path,include\nfrom testapp import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n]"}, {"file": "views.py", "path": "./testapp", "code": "from django.shortcuts import render\ndef home(request):\n    context = {}\n    return render(request, 'testapp/home.html', context) "}], "15": [{"file": "templates/home.html", "path": "templates/home.html", "code": "<html>\n<head>\n    <title>Home Page</title>\n</head>\n<body>\n    <h1>Welcome to our website</h1>\n    <button id=\"goToHelloWorld\" class=\"btn btn-primary\">Go to HelloWorld</button>\n    <script>\n        document.getElementById('goToHelloWorld').addEventListener('click', function() {\n            window.location.href = '/HelloWorld';\n        });\n    </script>\n</body>\n</html>"}, {"file": "templates/HelloWorld.html", "path": "templates/HelloWorld.html", "code": "<html>\n<head>\n    <title>Hello World!</title>\n</head>\n<body>\n    <h1>Hello World!</h1>\n</body>\n</html>"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('HelloWorld', views.hello_world, name='hello_world'),\n]\n"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef hello_world(request):\n    return render(request, 'HelloWorld.html')"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# settings.py for django project \nDEBUG = True\nINSTALLED_APPS = [  # List of your app names\n\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n]\nSTATICFILES_DIRS = [  # Specify paths for your static files\n    BASE_DIR / 'static',\n].resolve()\ndef get_project_paths():\n    pathnames_list_of_objects = \n        [('myproject', BASE_DIR)] # Your project name goes here.\nreturn pathnames_list_of_objects\nWSGI_APPLICATION = 'yourproject.wsgi.application'\nLANGUAGE_CODE = 'en-us'"}], "16": [{"file": "input_validator.py", "path": "project/validation/input_validator.py", "code": "import os\n\ndef check_file_existence(filepath):\n  if not os.path.exists(filepath):\n    raise FileNotFoundError(f\"File '{filepath}' does not exist.\")\n\ndef validate_headers(data, expected_headers):\n  actual_headers = data[0]\n  if actual_headers != expected_headers:\n    raise ValueError(\"Invalid headers. Expected: {}, Actual: {}\".format(expected_headers, actual_headers))\n\ndef validate_time_column(data, allowed_times):\n  for row in data[1:]:\n    time = row[3]\n    if time not in allowed_times:\n      raise ValueError(\"Invalid time found: {}\".format(time))\n\ndef validate_data_integrity(data):\n  # Implementation for checking data integrity within each row\n\ndef validate_null_value(data):\n  # Implementation for checking null values within the table\n    \n # Usage example: \nif __name__ == \"__main__\":\n    file_path = 'Spring Semester Subjects.xlsx'\n    check_file_existence(file_path)\n    # Add other validation functions and logic here"}, {"file": "data_transformer.py", "path": "project/transformation/data_transformer.py", "code": "import pandas as pd\n\ndef transform_to_two_dimensional_table(data):\n  df = pd.read_excel(data)\n  # Implementation for transforming data into a 2D table format\ndef data_mapping(df_mapped, data):\n # Implementation for mapping data into the 2D table based on weekday and time period  \n    \nif __name__ == \"__main__\":\n    data = 'Spring Semester Subjects.xlsx'   # Provide input file path"}, {"file": "output_creator.py", "path": "project/output/output_creator.py", "code": "import pandas as pd\ndef create_output_excel_file(filename):\n  with pd.ExcelWriter(filename) as writer:\n    writer.save()\ndef save_table_to_excel(df, filename):\n    df.to_excel(filename, index=False)\nexample usage:\nif __name__ == \"__main__\":\n    transformed_data = pd.DataFrame({\n      ... # Your transformed data here\n    })\nsave_table_to_excel(transformed_data, 'OutputFileName.xlsx') "}]}