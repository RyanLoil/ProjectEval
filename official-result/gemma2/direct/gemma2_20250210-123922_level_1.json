{"1": [{"file": "templates/bmi_calculator.html", "path": "templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        label, input[type=\"number\"] {\n            display: block;\n            margin-bottom: 5px;\n        }\n        #result {\n            margin-top: 10px;\n            font-size: 18px;\n        }\n    </style>\n</head>\n<body>\n    <h1>BMI Calculator</h1>\n    <form id=\"bmi-form\">\n        <label for=\"weight\">Weight (kg):</label>\n        <input type=\"number\" id=\"weight\" name=\"weight\" step=\"0.1\" required>\n  \n        <label for=\"height\">Height (m):</label>\n        <input type=\"number\" id=\"height\" name=\"height\" step=\"0.01\" required>\n  \n        <button type=\"submit\">Calculate BMI</button>\n    </form>\n        \n    <div id=\"result\"></div>\n   \n</body>\n</html>"}, {"file": "views.py", "path": "views.py", "code": "from django.shortcuts import render\n  \ndef calculate_bmi(request):\n    if request.method == 'POST':\n      weight = float(request.POST['weight'])\n      height = float(request.POST['height'])\n      bmi = weight / (height ** 2)\n      return render(request, 'bmi_calculator.html', {'bmi': bmi})\n    else:\n      return render(request, 'bmi_calculator.html')   \n  \n"}], "4": [{"file": "templates/index.html", "path": "templates/index.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        #generatorForm {\n            margin-top: 50px;\n        }\n    </style>\n</head>\n<body>\n    <h1>QR Code Generator</h1>\n    <div id=\"generatorForm\" class=\"container\">\n        <form method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"inputQRCode\">Enter URL or text:</label>\n                <input type=\"text\" class=\"form-control\" id=\"inputQRCode\" name=\"qrcode_data\" placeholder=\"Enter your QR code data here\" required>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Generate QR Code</button>\n        </form>\n    </div>\n    {% if qrcode %}\n        <img id=\"generatedQRCode\" src=\"{{ qrcode | urlencode }}\" alt=\"Generated QR Code\">\n    {% endif %}\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "templates/utils.html", "path": "templates/utils.html", "code": "<!-- Add helper functions or code snippets here -->"}], "5": [{"file": "templates/index.html", "path": "templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        textarea {\n            width: 100%;\n            height: 300px;\n            padding: 10px;\n            margin-bottom: 10px;\n        }\n        button {\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n        #converted-html {\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-top: 10px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Markdown to HTML Converter</h1>\n    <textarea id=\"markdown\" placeholder=\"Enter your Markdown here\"></textarea>\n    <button id=\"convert-btn\">Convert to HTML</button>\n    <div id=\"converted-html\"></div>\n    \n    <script>\n        const convertBtn = document.getElementById('convert-btn');\n        const markdownInput = document.getElementById('markdown');\n        const convertedHtmlOutput = document.getElementById('converted-html');\n\n        convertBtn.addEventListener('click', () => {\n            const markdownText = markdownInput.value;\n            // Make API call to convert Markdown to HTML\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({ markdown: markdownText })\n            })\n            .then(response => response.json())\n            .then(data => {\n                convertedHtmlOutput.innerHTML = data.html;\n            })\n            .catch(error => {\n                console.error('Error converting Markdown:', error);\n            });\n        });\n    </script>\n</body>\n</html>"}, {"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport os\nfrom django.http import JsonResponse\nimport markdown2  \ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.body.decode('utf-8') \n       # Get markdown text from the POST request body\n\n        html_text = markdown2.markdown(markdown_text)\n      \n     #   model = load_model()\n       # vectorized = vectorizer.transform([markdown_text])\n       #\n       # predicted = model.predict(vectorized) \n       # return JsonResponse({'predicted': str(predicted[0][0])})\n  return JsonResponse({'html': html_text})\n    return render(request, 'index.html') "}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.convert, name=''),\n]"}, {"file": "README.md", "path": "README.md", "code": "# Markdown to HTML Converter \n\nA simple Django application to convert Markdown text to HTML.\n\n## Features:\n\n* Converts Markdown text to valid HTML.\n *  Easily deployable using a web server.\n **Getting Started:**\n1. Clone the repository:\n ```command\n git clone https://github.com/your-username/markdown-converter.git\n ```\n2. Navigate to the project directory:\n```command\n cd markdown-converter\n ```\n3. Create a virtual environment and activate it (e.g., using `venv` or `conda`):\n ```command\n python -m venv env\n source env/bin/activate \n ```\n4. Install dependencies: \n```command\n pip install django\n ```\n5. Run migrations:\n```command\n python manage.py makemigrations   \n python manage.py migrate    \n ```\n6. Start the development server:\n```command\n python manage.py runserver     \n ```\n7. Access the application in your browser at `http://127.0.0.1:8000/`.\n\n##  Contributing:\n\nFeel free to contribute by:\n* Submitting bug reports and feature requests.\n* Improving the code and documentation.\n   \n**Author:** [Your Name]\n**GitHub Repository:** https://github.com/your-username/markdown-converter \n"}], "6": [{"file": "templates/base.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Todo App</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n  <div class=\"container mt-3\">\n    {% block content %}{% endblock %}\n  </div>\n  \n  <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\n  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "templates/index.html", "path": "templates/", "code": "<div class=\"jumbotron\">\n    <h1>Todo App</h1>\n    <p>See, edit and delete your to-dos!</p>\n</div>\n\n<div class=\"container mt-3\">\n  <h2>Tasks</h2>\n  <table id=\"tasks_table\" class=\"table table-striped\">\n    <thead>\n      <tr>\n        <th>Task</th>\n        <th>Status</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for task in tasks %}\n      <tr>\n        <td>{{ task.task }}</td>\n        <td id=\"{{ task.id }}-status\" class=\"text-center\">\n          {% if task.completed %}Completed{% else %}Pending{% endif %}</td>\n        <td>\n          <a href=\"/edit/{{ task.id }}\" class=\"btn btn-primary btn-sm\">Edit</a>\n          <button type=\"button\" class=\"btn btn-danger btn-sm delete-btn\" data-task-id=\"{{ task.id }}\">Delete</button>\n        </td>\n      </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n</div>\n\n<div class=\"container mt-3\">\n  <h2>Add New Task</h2>\n  <form method=\"POST\" action=\"/add\">\n    {% csrf_token %}\n    <div class=\"form-group\">\n      <label for=\"new_task\">New Task:</label>\n      <input type=\"text\" class=\"form-control\" id=\"new_task\" name=\"new_task\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-success\">Add</button>\n  </form>\n</div>"}, {"file": "templates/edit.html", "path": "templates/", "code": "<div class=\"jumbotron\">\n    <h1>Edit Task</h1>\n</div>\n\n<div class=\"container mt-3\">\n  <form method=\"POST\" action=\"/edit/{{ task_id }}\">\n    {% csrf_token %}\n    <div class=\"form-group\">\n      <label for=\"edited_task\">Task:</label>\n      <input type=\"text\" class=\"form-control\" id=\"edited_task\" name=\"edited_task\" value=\"{{ task.task }}\">\n    </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Save Changes</button>\n  </form>\n</div>"}, {"file": "app/models.py", "path": "myproject/app/", "code": "from django.db import models\n\ndef get_or_create_task(request, task_id):\n    try:\n      task = Task.objects.get(pk=task_id)\n    except Task.DoesNotExist:\n      task = None\n    return task\n\nclass Task(models.Model):\n    task = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n      return self.task"}, {"file": "app/views.py", "path": "myproject/app/", "code": "from django.shortcuts import render, redirect\nfrom .models import Task\ndef get_all_tasks(request):\n    tasks = Task.objects.all()\n    return render(request, 'index.html', {'tasks': tasks})\n  \ndef add_task(request):\n    if request.method == 'POST':\n      new_task = request.POST['new_task']\n      Task.objects.create(task=new_task)\n      return redirect('/'\n    else:\n      return render(request, 'index.html')  \ndef edit_task(request, task_id):\n    task = get_or_create_task(request, task_id)\n    if task:\n      return render(request, 'edit.html', {'task': task, 'task_id': task_id})\n    else:\n      return redirect('/')  \ndef delete_task(request, task_id):\n    task = get_or_create_task(request, task_id)\n    if task:\n      task.delete()\n      return redirect('/') \ndef complete_task(request, task_id):\n    task = get_or_create_task(request, task_id)\n    if task:\n      task.completed = not task.completed\n      task.save()\n      return redirect('/'\n"}, {"file": "myproject/urls.py", "path": "myproject/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom app import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.get_all_tasks, name='index'),\n    path('add/', views.add_task, name='add_task'),\n    path('edit/<int:task_id>/', views.edit_task, name='edit_task'),\n    path('delete/<int:task_id>/', views.delete_task, name='delete_task'),\n]\n"}, {"file": "settings.py", "path": "", "code": "INSTALLED_APPS = [\n   ...,\n    'app',\n]\nURL_PREFIX = '/'\n # ... other settings ... \n"}], "8": [{"file": "manage.py", "path": "calendar_app/", "code": "#!/usr/bin/env python\n\nimport os\nfrom django.core.management import execute_from_command_line\n\nif __name__ == '__main__':\n    execute_from_command_line(os.sys.argv)\n"}, {"file": "calendar_app/settings.py", "path": "calendar_app/", "code": "INSTALLED_APPS = [ \n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n"}, {"file": "calendar_app/urls.py", "path": "calendar_app/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]\n"}, {"file": "calendar_app/urls.py", "path": "calendar_app/", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n   path('', views.index, name='index'),\n]\n"}, {"file": "calendar_app/views.py", "path": "calendar_app/", "code": "from django.shortcuts import render\ndef index(request):\n    context = {}\n    return render(request, 'calendar_app/index.html', context)\n"}, {"file": "templates/calendar_app/index.html", "path": "calendar_app/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calendar App</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\ntable {\n            border-collapse: collapse;\n            width: 100%;\n        }\ntd, th {\n            text-align: center;\n            border: 1px solid #ddd;\n            padding: 8px;\n        }\nth {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n</body>\n</html>"}], "9": [{"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\napp = DjangoApp()\napp.urls += static('/static/', document_root='./static/')\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot.urls')),\n    \n]\n"}, {"file": "templates/index.html", "path": "project/chatbot/templates/index.html", "code": "\n"}, {"file": "chatbot/urls.py", "path": "project/chatbot/urls.py", "code": "from django.urls import path\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "views.py", "path": "project/chatbot/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'index.html')\n"}], "11": [{"file": "templates/review.html", "path": "templates/", "code": "<h1>Test Code Review</h1>\n<form method=\"POST\">\n    {% csrf_token %}\n    <div>\n        <label for=\"project_id\">Project ID:</label>\n        <input type=\"text\" name=\"project_id\" id=\"project_id\">\n    </div>\n    <div>\n        <label for=\"test_code\">Test Code:</label>\n        <textarea name=\"test_code\" id=\"test_code\"></textarea>\n    </div>\n    \n    <select name=\"status\">\n        <option value=\"Pass\">Pass</option>\n        <option value=\"Fail\">Fail</option>\n        <option value=\"Select\">Select</option>\n    </select>\n    \n    <button type=\"submit\">Submit Review</button>\n</form>"}, {"file": "views.py", "path": "project/app/views.py", "code": "from django.shortcuts import render\nfrom .models import ProjectTestCode\n\ndef review_test_code(request):\n    if request.method == 'POST':\n        project_id = request.POST.get('project_id')\n        test_code = request.POST.get('test_code')\n        status = request.POST.get('status')\t\n        # Save the review to database,\n        # Use project_id and other info to create a record.\n        return render(request, 'review.html', {'project_id': project_id})  #\n   else:\n        return render(request, 'review.html')"}, {"file": "models.py", "path": "project/app/models.py", "code": "from django.db import models\n\nclass ProjectTestCode(models.Model):\n    project_id = models.CharField(max_length=50)\n    test_code = models.TextField()\n    status = models.CharField(max_length=10, choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')])\n    # Add other fields as needed  "}], "14": [{"file": "templates/hello.html", "path": "templates/hello.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        #container {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #f0f0f0;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"container\">\n        <h1 class=\"hello\">Hello, World!</h1>\n    </div>\n</body>\n</html>"}, {"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'hello.html')"}], "16": [{"file": "read_excel.py", "path": "project/", "code": "import pandas as pd\n\ndef read_and_format_xlsx(input_file, output_file):\n    df = pd.read_excel(input_file)\n    # Transform time column into numerical values for sorting\n    time_mappings = {'First period': 1, 'Second period': 2, 'Third period': 3, 'Fourth period': 4}\n    df['Time'] = df['Time'].map(time_mappings)\n    df.to_excel(output_file, index=False)\n\nif __name__ == '__main__':\n    input_file = 'Spring Semester Subjects.xlsx'\n    output_file = 'FormattedSubjects.xlsx'\n    read_and_format_xlsx(input_file, output_file)"}], "19": [{"file": "histogram.py", "path": "/Program Files/Deathlist Histogram/histogram.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\ndef create_histogram(filename='Deathlist.csv', date_column='Date of death'):\n    df = pd.read_csv(filename)\n    df['Date of death'] = pd.to_datetime(df['Date of death'])\n    weeks = df['Date of death'].dt.isocalendar().week\n    plt.hist(weeks, bins=10)\n    plt.xlabel('Week Number')\n    plt.ylabel('Number of Deaths')\n    plt.title('Weekly Deaths Histogram')\n    plt.show()\n\nif __name__ == '__main__':\n    create_histogram() "}, {"file": "Deathlist.csv", "path": "/Program Files/Deathlist Histogram/Deathlist.csv", "code": "Date of death,Name,Location,Cause of Death\n2023-04-15,John Doe,New York City,Heart Attack\n2023-04-22,Jane Smith,Los Angeles,Cancer\n2023-05-01,Peter Jones,London,Car Accident\n2023-05-09,Mary Brown,Paris,Diabetes"}]}