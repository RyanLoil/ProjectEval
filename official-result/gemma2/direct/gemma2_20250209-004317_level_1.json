{"1": [{"file": "templates/index.html", "path": "templates/\\"}, {"code": "<!DOCTYPE html>\n\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        #calculator {\n            margin: 0 auto;\n            width: 300px;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n    </style>\n\n</head>\n<body>\n    <div id=\"calculator\">\n        <h1>BMI Calculator</h1>\n        <label for=\"weight\">Weight (kg):</label>\n        <input type=\"number\" id=\"weight\" name=\"weight\">\n        <br>\n        <label for=\"height\">Height (m):</label>\n        <input type=\"number\" id=\"height\" name=\"height\">\n        <br>\n        <button id=\"calculateButton\">Calculate</button>\n        <br>\n        <div id=\"result\"></div>\n    </div>\n\n    <script>\n        const calculateButton = document.getElementById(\"calculateButton\");\n        const weightInput = document.getElementById(\"weight\");\n        const heightInput = document.getElementById(\"height\");\n        const resultDiv = document.getElementById(\"result\");\n\n        calculateButton.addEventListener(\"click\", () => {\n            const weight = parseFloat(weightInput.value);\n            const height = parseFloat(heightInput.value);\n\n            if (!isNaN(weight) && !isNaN(height)) {\n                const bmi = weight / (height * height);\n                resultDiv.textContent = `Your BMI is: ${bmi.toFixed(2)}`;\n            } else {\n                resultDiv.textContent = \"Please enter valid numbers.\";\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "manage.py", "path": "", "code": "#!/usr/bin/env python\n# -*- coding: utf-8 -*-\nfrom django.core.management import execute_from_command_line\n\ndef main():\ndjango.setup()\nexecute_from_command_line(sys.argv)\nif __name__ == '__main__': main()"}], "7": [{"file": "templates/index.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control App</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        #balance {\n            font-size: 24px;\n            font-weight: bold;\n        }\n        .chart-container {\n            width: 800px;\n            height: 400px;\n            margin: 20px auto;\n        }\n    </style>\n</head>\n<body>\n    <h1>Budget Control</h1>\n    <div id=\"balance\">\n        Current Balance: <span id=\"balance-value\"></span>\n    </div>\n    <div class=\"chart-container\"></div>\n    <script src=\"{{ STATIC_URL }}script.js\"></script>\n</body>\n</html>"}, {"file": "static/script.js", "path": "static/", "code": "// JavaScript code to generate and update the chart based on budget data\n // Fetch budget data from server (replace with actual API call)\nfetch('/api/budget/')\n.then(response => response.json())\n.then(data => {\n    // Generate chart using library like Chart.js or D3.js\n    // Update balance-value in HTML based on data.\n})\n.catch(error => console.error('Error fetching budget data:', error));"}, {"file": "budget_control/urls.py", "path": "budget_control/", "code": "# Django project URL configurations\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    # Add more paths for other routes (e.g., /add_transaction)\n]\n"}, {"file": "budget_control/views.py", "path": "budget_control/", "code": "# Django views for handling application logic\nfrom django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import Transaction  # Assuming you have a Transaction model\n\ndef index(request):\n    transactions = Transaction.objects.all()\n    budget_data = process_transaction_data(transactions)\n    return render(request, 'index.html', {'budget_data': budget_data})\n\ndef process_transaction_data(transactions):\n    # Function to generate data for the chart and balance value\n    # ... (your logic to process transaction data) \ndef api_budget(request):\n    transactions = Transaction.objects.all()\n    budget_data = process_transaction_data(transactions)\n    return JsonResponse(budget_data)"}, {"file": "budget_control/models.py", "path": "budget_control/", "code": "# Django models for storing budget-related data\nfrom django.db import models\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    description = models.CharField(max_length=200)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    type = models.CharField(max_length=10, choices=[('income', 'Income'), ('expense', 'Expense')])\n\n    def __str__(self):\n        return f'{self.description} ({self.amount:.2f})'"}, {"file": "requirements.txt", "path": "", "code": "Django==4.2\nChart.js (or D3.js)\nFlask?"}], "10": [{"file": "manage.py", "path": "calorie_tracker/", "code": "#!/usr/bin/env python\n\nimport os\nfrom django.core.management import execute_from_command_line\n\nif __name__ == '__main__':\n    execute_from_command_line(os.sys.argv)"}, {"file": "calorie_tracker/settings.py", "path": "calorie_tracker/", "code": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\n# ... other settings ..."}, {"file": "calorie_tracker/urls.py", "path": "calorie_tracker/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),\n]\n"}, {"file": "tracker/models.py", "path": "calorie_tracker/tracker/", "code": "from django.db import models\n\nclass Food(models.Model):\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    # ... other fields\n\nclass Meal(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    food = models.ManyToManyField('Food')\n    date = models.DateField()\n    #"}, {"file": "tracker/admin.py", "path": "calorie_tracker/tracker/", "code": "from django.contrib import admin\nfrom .models import Food, Meal\n\nadmin.site.register(Food)\nadmin.site.register(Meal)"}, {"file": "templates/tracker/index.html", "path": "calorie_tracker/templates/tracker/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <h1>Calorie Tracker</h1>\n    <!-- Add form or data here -->\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "tracker/urls.py", "path": "calorie_tracker/tracker/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # ... add your urls here\n]\n"}], "12": [{"file": "settings.py", "path": "project/settings.py", "code": "INSTALLED_APPS = [ \n    # ... other apps \n    'claims',\n]\n\ndef DEBUG = False\nappname = 'claimsystem'\nLANGUAGE_CODE = 'en-us'\nTIMZONES = ['UTC']\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/' \nMEDIA_URL = '/media/\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "#mysite/urls.py:\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('claims.urls')),\n]\n"}, {"file": "main_page.html", "path": "claims/templates/ claims/main_page.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n   <title>Claim System</title>\n</head>\n<body>\n    <h1>Claim System</h1>\n    <a href='{% url 'create_claim' %}'>Submit Claim</a>\n</body>\n</html>"}, {"file": "submit_claim.html", "path": "claims/templates/ claims/submit_claim.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n   <title>Submit Claim</title>\n</head>\n<body>\n    <h1>Submit Claim</h1>\n    <form method='post'>{% csrf_token %}\n        {{ form.as_p }}\n        <button type='submit'>Submit</button>\n    </form>\n</body>\n</html>"}, {"file": "models.py", "path": "claims/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass ExpenseType(models.Model):\n    name = models.CharField(max_length=50)\n    description = models.TextField()\n\ndef __str__(self):\n        return self.name\n\nclass Claim(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    type = models.ForeignKey(ExpenseType, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submitted_on = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=10, choices=[('Pending', 'Pending'),\n                                          ('Approved','Approved'), \n                                          ('Rejected','Rejected')], default='Pending')\n    approved_on = models.DateTimeField(blank=True, null=True)\n\ndef __str__(self):\n        return f'{self.user} - {self.type}'   \n"}, {"file": "views.py", "path": "claims/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import ExpenseType, Claim\nfrom .forms import ClaimForm\naclass Claims():\n    def index(request):\n        context = {'expensetypes':ExpenseType.objects.all()}\n        return render(request,'claims/main_page.html',context)\n\n    @login_required\ndef create_claim(request):\n        if request.method == 'POST':\n            form = ClaimForm(request.POST)\n            if form.is_valid():\n                form.save()\n                return redirect('claims:create_claim') \n        else:\n            form = ClaimForm()\n         return render( request, 'claims/submit_claim.html', {'form': form})\n"}, {"file": "admin.py", "path": "claims/admin.py", "code": "# Configure admin site for your app here."}, {"file": "forms.py", "path": "claims/forms.py", "code": "from django import forms\nfrom .models import Claim, ExpenseType\nclass ClaimForm(forms.ModelForm):\n   class Meta:\n        model = Claim\n        fields = ['type', 'amount', 'description'] \n\n"}, {"file": "__init__.py", "path": "claims/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "myproject/", "code": "#!/usr/bin/env python\nimport os\nfrom django.core.management import execute_from_command_line\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "myproject/asgi.py", "path": "myproject/", "code": "import os\n\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom django.core.asgi import get_asgi_application\n\nfrom channels.auth import AuthMiddlewareStack\n\napp = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    \"websocket\": AuthMiddlewareStack(URLRouter(\n        [\n            # Your other websocket apps are routed here,\n        ]\n    )),\n})\n"}, {"file": "myproject/wsgi.py", "path": "myproject/", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\n os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\napplication = get_wsgi_application()"}, {"file": "myproject/settings.py", "path": "myproject/", "code": "DEBUG = True\nSECRET_KEY = 'your-secret-key'\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(os.path.dirname(__file__), 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'"}, {"file": "urls.py", "path": "myproject/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworld.urls')),\n]"}, {"file": "templates/helloworld/index.html", "path": "myproject/templates/helloworld/", "code": "<div class=\"container\">\n    <h1 id=\"hello-world\">Hello World!</h1>\n</div> "}, {"file": "__init__.py", "path": "myproject/helloworld/", "code": "# Empty file"}], "15": [{"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'index.html')\ndef hello_world(request):\n    return render(request, 'helloworld.html')"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.hello_world, name='helloworld'),\n]"}, {"file": "templates/index.html", "path": "myapp/templates/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Homepage</title>\n</head>\n<body>\n    <button id=\"jump-button\" class=\"btn btn-primary\">Jump to Hello World</button>\n    <script>\n        const button = document.getElementById('jump-button');\n        button.addEventListener('click', function() {\n            window.location.href = '/helloworld/';\n        });\n    </script>\n</body>\n</html>"}, {"file": "templates/helloworld.html", "path": "myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n\n<body>\n    <h1>Hello, World!</h1>\n</body>\n</html>"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": "# Empty file for app initialization"}], "16": [{"file": "spring_semester_subject_processor.py", "path": "./", "code": "\nimport pandas as pd\n\n# Read the input Excel file\ninput_file = 'Spring Semester Subjects.xlsx'\noutput_file = 'Processed Spring Semester Subjects.xlsx'\nsubject_df = pd.read_excel(input_file)\n\n# Create a two-dimensional subject table\ntabledata = subject_df.values.tolist()\n\n# Write the table data to a new Excel file\nwith pd.ExcelWriter(output_file) as writer:\nsheet = pd.DataFrame(tabledata).to_excel(writer, index=False, header=True)\n     "}, {"file": "process.bat", "path": "./", "code": "python spring_semester_subject_processor.py"}]}