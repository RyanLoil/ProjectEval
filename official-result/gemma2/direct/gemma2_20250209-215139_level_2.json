{"1": [{"file": "templates/HomePage.html", "path": "templates/HomePage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>BMI Calculator</title>\n    <link rel=\"stylesheet\" href=\"../static/style.css\">\n</head>\n\n<body>\n    <h1>BMI Calculator</h1>\n    <p id=\"intro\">Welcome to our BMI calculator! This tool helps you calculate your Body Mass Index based on your height and weight.</p>\n    <button id=\"calculate-btn\" class=\"btn\">Calculate BMI</button>\n</body>\n</html>  "}, {"file": "templates/BMICalculatorPage.html", "path": "templates/BMICalculatorPage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <title>BMI Calculator</title>\n    <link rel=\"stylesheet\" href=\"../static/style.css\">\n</head>\n\n<body>\n    <h2>Calculate Your BMI</h2>   \n    <form id=\"bmi-form\">\n        <label for=\"height\">Height:</label>\n        <input type=\"number\" id=\"height\" name=\"height\">\n        <select id=\"height-unit\" name=\"height_unit\">\n            <option value=\"cm\">cm</option>\n            <option value=\"inches\">inches</option>\n        </select><br><br>\n\n        <label for=\"weight\">Weight:</label>\n        <input type=\"number\" id=\"weight\" name=\"weight\">\n        <select id=\"weight-unit\" name=\"weight_unit\">\n            <option value=\"kg\">kg</option>\n            <option value=\"lbs\">lbs</option>\n        </select><br><br>\n\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn\">Calculate BMI</button>\n        <button type=\"reset\" id=\"reset-btn\" class=\"btn\">Reset Form</button>\n    </form>\n\n    <div id=\"result\"></div>\n</body>\n</html>  "}], "4": [{"file": "project/settings.py", "path": "somepath/somedir/", "code": "# settings.py\n\nINSTALLED_APPS =\n    [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n    ],\n\n# ... other settings \n"}, {"file": "views.py", "path": "somepath/somedir/myapp/", "code": "# views.py\n\nfrom django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef qr_code_generator(request):\n    return render(request, 'qr_code_generator.html')\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "somepath/somedir/", "code": "# urls.py\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('home/', views.home, name='home'),\n    path('qr_generator/', views.qr_code_generator, name='qr_generator'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "templates/home.html", "path": "somepath/somedir/Templates/", "code": "<!-- templates/home.html -->\n<div>\n    <h2>Home Page</h2>\n    <p id=\"intro\">Welcome to our QR Code Generator website!</p>\n    <a href=\"qr_generator/\" class=\"button\">Generate QR Codes</a>\n</div>"}, {"file": "templates/qr_code_generator.html", "path": "somepath/somedir/Templates/", "code": "<!-- templates/qr_code_generator.html -->\n<h1>QR Code Generator</h1>\n<form id=\"qr-form\">\n    <label for=\"text-input\">Enter Text or URL:</label><br>\n    <input type=\"text\" id=\"text-input\" name=\"text\" required><br>\n    <label for=\"border-size\">Border Size (Max 10):</label><br>\n    <input type=\"number\" id=\"border-size\" name=\"border\" max=\"10\" required><br>\n    <label for=\"box-size\">Box Size (Max 128):</label><br>\n    <input type=\"number\" id=\"box-size\" name=\"box-size\" max=\"128\" required><br>\n    <label for=\"error-correction\">Error Correction:</label><br>\n    <select id=\"error-correction\" name=\"ecc\">\n        <option value=\"L\">Small</option>\n        <option value=\"M\" selected>Medium</option>\n        <option value=\"Q\">Large</option>\n    </select><br>\n    <label for=\"fill-color\">Fill Color:</label><br>\n    <input type=\"color\" id=\"fill-color\" name=\"fill\">\n    <br>\n    <label for=\"back-color\">Back Color:</label><br>\n    <input type=\"color\" id=\"back-color\" name=\"back\">\n    <br>\n    <button type=\"submit\" class=\"button\">Generate QR Code</button>\n\n</form>\n<div id=\"qr-code-container\"></div>\n"}, {"file": "templates/about.html", "path": "somepath/somedir/Templates/", "code": "<!-- templates/about.html -->\n<h2>About Us</h2>\n<p id=\"description\">Details about the website, its purpose, and how it works.</p>\n\n<h3>FAQs</h3>\n<ul id=\"faqs\">\n    <!-- Add FAQ items here -->\n</ul>\n\n<p id=\"privacy-policy\">Privacy Policy</p>\n<p id=\"terms-of-service\">Terms of Service</p>"}], "5": [{"file": "settings.py", "path": "project/", "code": "import os\nfrom django.settings import * \nDEBUG = True\nALLOWED_HOSTS = ['*']\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) \nINSTALLED_APPS = [ \n    'django.contrib.admin', \n    'django.contrib.auth', \n    'django.contrib.contenttypes', \n    'django.contrib.sessions', \n    'django.contrib.messages', \n    'django.contrib.staticfiles',\n    'converter',\n]\nSTATIC_URL = '/static/\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n         'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': ['django.template.context_processors.debug', \n                                  'django.template.context_processors.request', \n                                  'django.contrib.auth.context_processors.auth',\n                                  'django.contrib.messages.context_processors.messages',]\n        },\n    },\n]"}, {"file": "templates/converter/home.html", "path": "project/templates/converter/", "code": "<html>\n<head>\n    <title>Markdown to HTML Converter</title>\n</head>\n<body>\n    <h1>\n        Welcome to the Markdown to HTML Converter!\n    </h1>\n    <p>\n      Use this converter to quickly convert your Markdown text to HTML.\n    </p>\n    <nav>\n        <ul>\n            <li><a href=\"/\">Home</a></li>\n            <li><a href=\"/convert\">Convert</a></li>\n            <li><a href=\"/about\">About Us</a></li>\n        </ul>\n    </nav>\n</body>\n</html>"}, {"file": "templates/converter/convert.html", "path": "project/templates/converter/", "code": "<html>\n<head>\n    <title>Convert Markdown to HTML</title>\n</head>\n<body>\n  <h1>Markdown to HTML Converter</h1>\n  <textarea id=\"markdown-input\" rows=\"10\" cols=\"50\"></textarea>\n  <button id=\"convert-button\"> Convert </button>\n  <div id=\"html-output\"></div>\n   <br/>\n  <label for=\"file-upload\">Upload Markdown File:</label><br>\n <input type=\"file\" id=\"file-upload\">\n    \n    <button id=\"download-html\">Download HTML</button>\n\n</body>\n</html>"}, {"file": "templates/converter/about.html", "path": "project/templates/converter/", "code": "<html>\n <head>\n   <title>About Us</title>\n </head>\n <body>\n   <h1>About the Markdown to HTML Converter</h1>\n   <div id=\"team-info\">Team Information goes here.</div>\n   <hr>\n   <h2>FAQ</h2>\n   <div id=\"faq\">\n     Frequently Asked Questions go here.\n   </div>\n </body>\n</html>"}, {"file": "converter/views.py", "path": "project/converter/", "code": "from django.shortcuts import render\ndef home(request): \n    return render(request, 'converter/home.html')\ndef convert(request):\n   # Handle markdown conversion logic here\na return render(request, 'converter/convert', {'converted_html': '...',})\ndef about(request):\n   return render(request, 'converter/about.html')"}], "7": [{"file": "manage.py", "path": "budget_app/", "code": "#!/usr/bin/env python\n\nif __name__ == '__main__':\n    from django.core.management import execute_from_command_line\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "budget_app/", "code": "# Import necessary modules\nimport os\nimport django\ndjango.setup()\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\ndef path(name):\n    return os.path.normpath(os.path.join(BASE_DIR, name))\n\ndef path_to_static():\n    return os.path.join(BASE_DIR, 'static') \n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key' \n#\n# SECURITY WARNING: don't run with debug turned on in production!\ndef DEBUG = True\n\nALLOWED_HOSTS = ['*'] \n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget_app', # Change app name here\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'budget_app.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [\n            os.path.join(BASE_DIR, 'templates'),\n        ],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'budget_app.wsgi.application'\n\n# Database configuration (adjust if needed)\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': base_dir / 'db.sqlite3',\n    }\n} \nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nSTATIC_ROOT = path('staticfiles/') \nMEDIA_URL = '/media/'\nMEDIA_ROOT = BASE_DIR / 'media'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "budget_app/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom budget_app import views \nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('balance_tracker/', include('budget_app.urls_balance')),\n    path('reports/', include('budget_app.urls_reports')),\n    path('settings/', include('budget_app.urls_settings')),\n    path('help/', include('budget_app.urls_help'))\n]\n"}, {"file": "views.py", "path": "budget_app/ ", "code": "from django.shortcuts import render, redirect\ndef home(request):\n    return render(request, 'home.html')  \ndef about(request):\n    return render(request, 'about.html')"}, {"file": "templates/home.html", "path": "budget_app/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n    <h1>Welcome to the Budget Application</h1>\n\n    <a href=\"/login\">Login</a>\n    \n    <a href=\"/signup\">Sign Up</a>\n    <br><br>\n    <a href=\"/help\">Help</a>\n\n</body>\n</html>  "}], "9": [{"file": "pages/home.html", "path": "src/templates/pages/", "code": "<div class=\"container\">\n    <h1 id=\"hero-header\">AI Chatbot</h1>\n    <p id=\"product-overview\">\n        This is a powerful AI chatbot designed to assist you with your tasks.\n        It can understand natural language, provide helpful information,\n        and even perform actions on your behalf.\n    </p>\n  </div>\n  <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>"}, {"file": "pages/features.html", "path": "src/templates/pages/", "code": "<div class=\"container\">\n    <h1>Features</h1>\n    <ul id=\"feature-list\">\n      <li><p id=\"feature-1\">Feature 1: Natural Language Understanding</p></li>\n      <li><p id=\"feature-2\">Feature 2: Task Automation </p></li>\n      <li><p id=\"feature-3\">Feature 3: Customizable Responses</p></li>\n    </ul>\n  </div>"}, {"file": "pages/pricing.html", "path": "src/templates/pages/", "code": "<div class=\"container\">\n  <h1>Pricing</h1>\n  <div id=\"plan-table\" > \n      <table>\n        <thead><tr><th>Plan</th><th>Price</th></tr></thead>\n        <tbody>\n          <tr><td>Basic</td><td>$10/month</td></tr>\n          <tr><td>Standard</td><td>$25/month</td></tr>\n          <tr><td>Premium</td><td>$50/month</td></tr>\n        </tbody>\n      </table>\n  </div>\n <div id=\"contact-sales\">\n    <h2>Contact Sales</h2>\n    <form>\n      <label for=\"name\">Name:</label><br>\n      <input type=\"text\" id=\"name\" name=\"name\"><br>\n      <label for=\"email\">Email:</label><br>\n      <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n      <input type=\"submit\" value=\"Submit\">\n    </form>\n  </div>\n</div>"}, {"file": "pages/about.html", "path": "src/templates/pages/", "code": "<div class=\"container\">\n    <h1>About Us</h1>\n    <p id=\"company-background\">This is where you'd find information about the company and the team behind this fantastic AI Chatbot.\n   </p>\n  </div>"}, {"file": "pages/support.html", "path": "src/templates/pages/", "code": "<div class=\"container\">\n  <h1>Support</h1>\n  <h2>FAQ</h2>\n    <ul id=\"faq-list\" >\n      <li><p id=\"faq-1\">What is the purpose of this chatbot?</p></li>\n      <li><p id=\"faq-2\">How can I access customer service? </p></li>\n  </ul>\n <div id=\"support-form\">\n    <h2>Need Help?</h2>\n    <form>\n      <label for=\"name\">Name:</label><br>\n      <input type=\"text\" id=\"name\" name=\"name\"><br>\n      <label for=\"email\">Email:</label><br>\n      <input type=\"email\" id=\"email\" name=\"email\"><br>\n      <label for=\"message\">Message:</label><br>\n      <textarea id=\"message\" name=\"message\"></textarea><br><br>\n      <input type=\"submit\" value=\"Submit\">\n    </form>\n  </div>\n</div>"}, {"file": "urls.py", "path": "src/urls.py", "code": "from django.urls import path\nfrom pages import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about/', views.about, name='about'),\n    path('support/', views.support, name='support'),\n]\n  "}], "13": [{"file": "manage.py", "path": "/", "code": "#!/usr/bin/env python\nimport os\nfrom django.core.management import execute_from_command_line\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerceapp.settings')\n    execute_from_command_line(sys.argv)\nif __name__ == '__main__':\n    main()"}, {"file": "ecommerceapp/asgi.py", "path": "ecommerceapp/", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerceapp.settings')\napplication = get_asgi_application()"}, {"file": "ecommerceapp/wsgi.py", "path": "ecommerceapp/", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerceapp.settings')\napplication = get_wsgi_application()"}, {"file": "ecommerceapp/settings.py", "path": "ecommerceapp/", "code": "import os\nfrom pathlib import Path\n\nexport DJANGO_SETTINGS_MODULE = 'ecommerceapp.settings'\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'products', # Add your app here\n    'customers', # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'ecommerceapp.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'ecommerceapp.wsgi.application'\nDATABASE_NAME = 'ecommerce_db'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / DATABASE_NAME,\n    }\n}"}, {"file": "products/models.py", "path": "ecommerceapp/products/", "code": "from django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField(blank=True)\n\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\ndefine __str__(self):\n        return self.name"}, {"file": "products/urls.py", "path": "ecommerceapp/products/", "code": "from django.urls import path, include\nfrom . import views\nurlpatterns = [\n    path('', views.product_list, name='product_list'),\n    # Add more URL patterns for other product views \n]"}, {"file": "products/views.py", "path": "ecommerceapp/products/", "code": "from django.shortcuts import render\n\nfrom .models import Product\n\ndef product_list(request):\n    products = Product.objects.all()\n    return render(request, 'products/product_list.html', {'products': products})"}], "14": [{"file": "settings.py", "path": "myapp/", "code": "# myapp/settings.py\n\nINSTALLED_APPS = [\n    # ... other apps\n    'pages',\n]\ntype = 'django.template.backends.django.DjangoTemplates'\nTEMPLATEDIR =\n 'apps/pages/templates/'"}, {"file": "urls.py", "path": "myapp/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('pages.urls')),\n]\n"}, {"file": "page_view.html", "path": "apps/pages/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"hello-world\" class=\"main-heading\">Hello World</h1>\n</body>\n</html>"}, {"file": "__init__.py", "path": "apps/pages/", "code": "from . import views  \nexport * from .views "}], "17": [{"file": "DataPreparation.py", "path": "src/", "code": "\nfrom pandas import read_excel\nfrom pandas import DataFrame\nimport numpy as np\n\ndef ReadDataset(filepath):\n    try:\n        df = read_excel(filepath)\n        return df\n    except Exception as e:\n        print(f'Error reading dataset: {e}')\n        return None\n\ndef LagDependentVariable(df,dependent_col):\n    df[dependent_col+'_lag'] = df[dependent_col].shift(1)\n    return df\n\ndef PrepareIndependentVariables(df):\n    for col in df.columns:\n        if col not in ['result', 'result_lag']: #assuming this is the dependent variable column\n            if df[col].isnull().any():\n                print(f'Column {col} contains null values. Program stopping.') \n                return None\n    return df\n\ndef main():\n    filepath = 'Gamedata.xlsx'\n    df = ReadDataset(filepath)\n    if df is None:\n        exit()\n    df = LagDependentVariable(df, 'result')\n    df = PrepareIndependentVariables(df)\n      \nif __name__ == '__main__':\n    main()"}, {"file": "ModelCreation.py", "path": "src/", "code": "\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report,confusion_matrix\n\ndef CreateLogisticModel(df):\n    X = df.drop('result', axis=1)\n    y = df['result']\n    model = LogisticRegression()\n    model.fit( X, y )\n    return model\n\ndef GenerateModelSummary(model):\n    print('---Model Summary---')\n    print(model.summary)\n\ndef main():\n    from DataPreparation import PrepareIndependentVariables #assuming function from data preparation\n    df = PrepareIndependentVariables()\n    if df is None:\n        exit()\n    model = CreateLogisticModel(df)\n    GenerateModelSummary(model) \n  \nif __name__ == '__main__':\n    main()"}, {"file": "Output.py", "path": "src/", "code": "\n import pandas as pd\ndef WriteSummary(filepath, summary_df):\n    pd.DataFrame({'key':summary_df.keys(), 'value':summary_df.values}).to_excel(filepath, index=False)\n      \na  from ModelCreation import GenerateModelSummary #assuming function from model creation\n     GenerateModelSummary()\n \ndef main():\n    summary_df = GenerateModelSummary()\n    WriteSummary('Logistic.xlsx', summary_df)\n      \nif __name__ == '__main__':\n    main() "}], "18": [{"file": "menu.html", "path": "", "code": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Main Menu</title>\r\n    <style>\r\n        body {\r\n            font-family: sans-serif;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            height: 100vh;\r\n        }\r\n        button {\r\n            padding: 10px 20px;\r\n            margin: 5px;\r\n            font-size: 16px;\r\n            background-color: #4CAF50;\r\n            color: white;\r\n            border: none;\r\n            cursor: pointer;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Text Adventure Game</h1>\r\n    <button id=\"startGameBtn\" class=\"btn\">Start Game</button>\r\n    <button id=\"instructionsBtn\" class=\"btn\">Instructions</button>\r\n    <button id=\"exitGameBtn\" class=\"btn\">Exit Game</button>\r\n    <script src=\"script.js\"></script>\r\n</body>\r\n</html>\r\n"}, {"file": "script.js", "path": "", "code": "const startGameBtn = document.getElementById('startGameBtn');\r\nconst instructionsBtn = document.getElementById('instructionsBtn');\r\nconst exitGameBtn = document.getElementById('exitGameBtn');\r\n\r\nstartGameBtn.addEventListener('click', () => {\r\n    // Handle start game action (e.g., redirect to game page)\r\n});\r\n\r\ninstructionsBtn.addEventListener('click', () => {\r\n    // Handle instructions action (e.g., display instructions)\r\n});\r\n\r\nexitGameBtn.addEventListener('click', () => {\r\n    // Handle exit game action (e.g., close the application)\r\n});"}, {"file": "game_page.html", "path": "", "code": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n    <meta charset=\"UTF-8\">\r\n    <title>Game Environment</title>\r\n    <style>\r\n        body {\r\n            font-family: sans-serif;\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: center;\r\n            justify-content: center;\r\n            height: 100vh;\r\n        }\r\n        #gameDescription {\r\n            margin-bottom: 20px;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <h1>Adventure Game</h1>\r\n    <p id=\"gameDescription\">You find yourself in a mysterious room.</p>\r\n    \r\n    <button id=\"movePlayerBtn\" class=\"btn\">Move Player</button>\r\n    <button id=\"lookAroundBtn\" class=\"btn\">Look Around</button>\r\n    <button id=\"pickItemBtn\" class=\"btn\">Pick Item</button>\r\n    <button id=\"checkInventoryBtn\" class=\"btn\">Check Inventory</button>\r\n    \r\n    <ul id=\"inventoryList\"></ul>\r\n    \r\n    <script src=\"game_logic.js\"></script>\r\n</body>\r\n</html>"}, {"file": "game_logic.js", "path": "", "code": "const gameDescription = document.getElementById('gameDescription');\r\nconst movePlayerBtn = document.getElementById('movePlayerBtn');\r\nconst lookAroundBtn = document.getElementById('lookAroundBtn');\r\nconst pickItemBtn = document.getElementById('pickItemBtn');\r\nconst checkInventoryBtn = document.getElementById('checkInventoryBtn');\r\nconst inventoryList = document.getElementById('inventoryList');\r\n\r\n// Initialize game state data (rooms, player, items)\r\nlet currentRoom = 'Starting Room';\r\nlet playerInventory = [];\r\n\r\nfunction updateGameDescription() {\r\n    gameDescription.textContent = `You are in ${currentRoom}.\r\n`;\r\n}\r\n\r\nupdateGameDescription(); // Set initial description\r\n\r\n// Add event listeners for button clicks (and implement game logic)"}, {"file": "style.css", "path": "", "code": "/* Global Styles */\r\nbody {\r\n    font-family: sans-serif;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\nul {\r\n    list-style: none;\r\n    padding: 0;\r\n}\r\n"}]}