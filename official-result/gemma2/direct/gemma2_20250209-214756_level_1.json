{"5": [{"file": "manage.py", "path": "myproject/", "code": "#!/usr/bin/env python\n\nif __name__ == '__main__':\n    import os\n    import sys\n\n    from django.core.management import execute_from_command_line\n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    execute_from_command_line(sys.argv)\n"}, {"file": "myproject/urls.py", "path": "myproject/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "myproject/settings.py", "path": "myproject/", "code": "# -*- coding: utf-8 -*-\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) \n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "converter/views.py", "path": "myproject/converter/", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport markdown\n\ndef convert_markdown(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_input')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'converter/result.html', {'html_output': html_output})\n    else:\n        return render(request, 'converter/index.html')\n"}, {"file": "converter/urls.py", "path": "myproject/converter/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.convert_markdown, name='convert'),\n]\n"}, {"file": "templates/converter/index.html", "path": "myproject/templates/converter/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Markdown Converter</title>\n    <link rel=\"stylesheet\" href=\"{{STATIC_URL}}style.css\">\n</head>\n<body>\n    <h1>Markdown to HTML Converter</h1>\n    <form id=\"markdown-form\" method=\"POST\">\n        {% csrf_token %}\n        <textarea id=\"markdown-input\" name=\"markdown_input\" placeholder=\"Enter your Markdown text here\"></textarea>\n        <button type=\"submit\">Convert</button>\n    </form>\n\n    <div id=\"result\"></div>\n\n    <script src=\"{{ STATIC_URL }}script.js\"></script>\n</body>\n</html>"}, {"file": "templates/converter/result.html", "path": "myproject/templates/converter/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Result</title>\n    <link rel=\"stylesheet\" href=\"{{STATIC_URL}}style.css\">\n\n\n</head>\n<body>\n    <h2>Converted HTML:</h2>\n    <div id=\"html-output\">{{ html_output }}</div>\n\n    <script src=\"{{ STATIC_URL }}script.js\"></script>\n</body>\n</html>"}, {"file": "static/style.css", "path": "myproject/static/", "code": "body {\n    font-family: sans-serif;\n}\n\nh1, h2 {\n    text-align: center;\n}\ntextarea {\n    width: 100%;\n    height: 200px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    box-sizing: border-box;\n}\nbutton {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n\n#html-output {\n    margin-top: 20px;\n    white-space: pre-wrap; /* Preserve line breaks */\n}"}], "7": [{"file": "templates/index.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Budget Control</title>\n        <style>\n          body {\n            font-family: sans-serif;\n          }\n          #balanceChart {\n            width: 90%;\n            margin: 0 auto;\n          }\n      \n        </style>\n    </head>\n    <body>\n        <h1>Budget Control</h1>\n\n        <!-- Balance Tracking Section -->\n        <h2>Current Balance: <span id=\"balance\">$0</span></h2>\n      \n        <!-- Chart Container -->\n        <div id=\"balanceChart\"></div>\n\n        <script>\n          // JavaScript code to fetch data and create chart using a library like Chart.js\n        </script>\n    </body>\n</html>"}, {"file": "urls.py", "path": "project_name/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\ndef get_current_app():\n    return 'your_app_name'\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n     path('', include(get_current_app() + '.urls')),\n]\n"}], "12": [{"file": "manage.py", "path": "expense_tracker/", "code": "#!/usr/bin/env python\nfrom pathlib import Path\nimport os\n\noverride = {'DJANGO_SETTINGS_MODULE': 'expense_tracker.settings'}\n\ndef run():\n    os.environ.update(override)\n    if __name__ == '__main__':\n        from django.core.management import execute_from_command_line\n        execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    run()"}, {"file": "expense_tracker/settings.py", "path": "expense_tracker/", "code": "# -*- coding: utf-8 -*- \nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) \n# Build paths inside the project like this: BASE_DIR / 'subdir' \nSECRET_KEY = 'YOUR_SECRET_KEY' \nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expense', \n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\n# ... other settings"}, {"file": "expense_tracker/urls.py", "path": "expense_tracker/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom expense import views\nurlpatterns = [\n    # ... other URL patterns \n    path('admin/', admin.site.urls),\n    path('', include('expense.urls')),\n]\n"}, {"file": "expense/models.py", "path": "expense_tracker/expense/", "code": "from django.db import models\n# ... other models"}, {"file": "expense/admin.py", "path": "expense_tracker/expense/", "code": "from django.contrib import admin\nfrom .models import Claim \nclass ClaimAdmin(admin.ModelAdmin):\n    pass\nadmin.site.register(Claim, ClaimAdmin)"}, {"file": "expense/views.py", "path": "expense_tracker/expense/", "code": "\n from django.shortcuts import render, redirect\nfrom .models import Claim\n # ... other imports \ndef submit_claim(request):\n    if request.method == 'POST':\n        # Process claim submission form data here\n    else:\n        return render(request, 'submit_claim.html')\ndef manage_claims(request):\n    claims = Claim.objects.all()\n    # ... Logic to display claims based on status\n    return render(request, 'manage_claims.html', {'claims': claims})\n"}, {"file": "expense/urls.py", "path": "expense_tracker/expense/", "code": "from django.urls import path\nfrom . import views \nurlpatterns = [\n    path('', views.submit_claim, name='submit_claim'),\n    # ... other URL patterns for managing claims \n] "}, {"file": "templates/expense/submit_claim.html", "path": "expense_tracker/expense/templates/expense/", "code": "<form method=\"POST\">\n        {% csrf_token %}\n         <div>\n            <h3>Travel Expenses</h3>\n            <label for=\"travel_amount\">Amount:</label><br>\n            <input type=\"number\" id=\"travel_amount\" name=\"travel_amount\" required><br>\n        </div>\n        \n         <div>\n             <h3>Labor Expenses</h3>\n             <label for=\"labor_amount\">Amount:</label><br>\n             <input type=\"number\" id=\"labor_amount\" name=\"labor_amount\" required><br>\n         </div>\n\n         <div>\n             <h3>Management Expenses</h3>\n             <label for=\"management_amount\">Amount:</label><br>\n             <input type=\"number\" id=\"management_amount\" name=\"management_amount\" required><br>\n         </div>\n   \n<div>\n    <button type=\"submit\">Submit Claim</button>\n</div>      \n</form> "}, {"file": "templates/expense/manage_claims.html", "path": "expense_tracker/expense/templates/expense/", "code": "<h1>Manage Claims</h1> \n<h2>Pending Claims</h2> \n <ul>\n         {% for claim in claims if claim.status == 'Pending' %} \n    <li id=\"{{claim.id}}\">{{claim.created_at}} - {{claim.user}}  (Status: Pending) </li>   \n           {% endfor %}\n</ul>\n<h2>Approved Claims</h2> \n <ul>\n         {% for claim in claims if claim.status == 'Approved' %} \n    <li id=\"{{claim.id}}\">{{claim.created_at}} - {{claim.user}}  (Status: Approved)</li>  \n           {% endfor %}\n</ul>\n<h2>Rejected Claims</h2> \n <ul>\n         {% for claim in claims if claim.status == 'Rejected' %} \n    <li id=\"{{claim.id}}\">{{claim.created_at}} - {{claim.user}} (Status: Rejected)</li>   \n            {% endfor %}\n</ul>"}], "16": [{"file": "extractSubjectData.py", "path": "", "code": "```python\nimport pandas as pd\n\n# Read the Excel file with subject data\nsubject_data = pd.read_excel('Spring Semester Subjects.xlsx')\n\n# Convert the Time column to a numeric representation for easier sorting/filtering\nsubject_data['Time'] =\nsubject_data['Time'].map({'First period': 1, 'Second period': 2, 'Third period': 3, 'Fourth period': 4})\n\n# Output the data into a new Excel file\nsubject_data.to_excel('OutputSubjectData.xlsx', index=False)\n```"}, {"file": "Spring Semester Subjects.xlsx", "path": "", "code": "# This is an example format for your data \n-- \n# Subject Details   \n #  No need to modify this file \n---  \n# ID,Subject Name,Weekday,Time  \n1,,Monday,First Period\n2,,Tuesday,Second Period\n3,,Wednesday,Third Period\n..."}], "17": [{"file": "read_data.py", "path": "/project/read_data.py", "code": "\nimport pandas as pd\n\ndef read_gamedata(filepath=\"Gamedata.xlsx\") -> pd.DataFrame:\n  \"Reads the Excel file and returns a Pandas DataFrame.\"\n  return pd.read_excel(filepath)\n\ndef lag_one_period(df, column_name):\n  \"Lagges the specified column by one period.\"\n  df[f'{column_name}_lag'] = df[column_name].shift(1)\n  return df\n\nif __name__ == \"__main__\":\n  df = read_gamedata()\n  df = lag_one_period(df, 'result')\n  df.to_excel(\"Gamedata_lagged.xlsx\", index=False)"}, {"file": "model.py", "path": "/project/model.py", "code": "\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import classification_report\n\ndef train_logistic_model(df:\"pd.DataFrame\"):\n  \"\"\"\ntrains a logistic regression model.\n\n  Args:\n      df (pd.DataFrame): The DataFrame containing the dataset.\n\n  Returns:\n      sklearn.linear_model.logistic.LogisticRegression: The trained logistic regression model.\n  \"\"\"\n  X = df.drop('result_lag', axis=1)\n  y = df['result_lag']\n  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n\n  model = LogisticRegression()\n  model.fit(X_train, y_train)\n  y_pred = model.predict(X_test)\n  print(\"Classification Report:\")\n  print(classification_report(y_test, y_pred))\n\n    return model\n\n\nif __name__ == \"__main__\":\n   df = pd.read_excel(\"Gamedata_lagged.xlsx\")\n   model = train_logistic_model(df)\n\n  # Save the trained model to a file for later use (optional)\n  import joblib\n  joblib.dump(model, 'logistic_model.pkl')"}, {"file": "output_summary.py", "path": "/project/output_summary.py", "code": "\nimport pandas as pd\nfrom sklearn.metrics import classification_report\n\ndef create_summary_report(filepath='Logistic.xlsx'):\n  \"\"\"\n  Creates a summary report of the logistic regression model.\n\n  Args:\n      filepath (str): The path to the Excel file where the summary should be saved.\n  \"\"\"\n  try:\n    with pd.ExcelWriter(filepath) as writer:\n      df = pd.DataFrame(classification_report(), columns=['precision', 'recall', 'f1-score', 'support']))\n      df.to_excel(writer, sheet_name='Summary', index=False)\n  except Exception as e:\n    print(f'An error occurred while writing to the file: {e}')\n\nif __name__ == \"__main__\":\n   create_summary_report() \n"}], "20": [{"file": "manage.py", "path": "", "code": "#!/usr/bin/env python\nimport os\nfrom django.core.management import execute_from_command_line\n\nif __name__ == '__main__':\nexecute_from_command_line(os.sys.argv)"}, {"file": "blog/urls.py", "path": "blog/urls.py", "code": "from django.urls import path, include\nfrom .views import BlogPostsListView, PostDetailView\n# from django.contrib import admin\n\nurlpatterns = [\n    path('', BlogPostsListView.as_view(), name='blog_posts_list'),\n    path('<int:pk>/', PostDetailView.as_view(), name='post_detail'),\n    # path('admin/', admin.site.urls),\n]\n"}, {"file": "blog/views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, GetObjectOr404\nfrom .models import BlogPost\nfrom django.views import View\n\nclass BlogPostsListView(View):\n    def get(self, request):\n        posts = BlogPost.objects.all()\n        return render(request, 'blog/index.html', {'posts': posts})\n\nclass PostDetailView(View):\n    def get(self, request, pk):\n        post = GetObjectOr404(BlogPost, pk=pk)\n        return render(request, 'blog/post_detail.html', {'post': post})"}, {"file": "templates/blog/index.html", "path": "templates/blog/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Blog Posts</title>\n</head>\n<body>\n    <h1>Latest Blog Posts</h1>\n    <ul>\n        {% for post in posts %}\n            <li>\n                <h2><a href=\"{{ post.get_absolute_url }}\">{{ post.title }}</a></h2>\n                <p>{{ post.content|slice:'0:100' }}...</p>\n            </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "templates/blog/post_detail.html", "path": "templates/blog/post_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{{ post.title }}</title>\n</head>\n<body>\n    <h1>{{ post.title }}</h1>\n    <p>{{ post.content }}</p>\n</body>\n</html>"}, {"file": "blog/models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n\ndef make_default_post():\n    blog_post = BlogPost(title='Hello my first blog post', content='This is the content of my first blog post.')\n    blog_post.save()"}, {"file": "settings.py", "path": "settings.py", "code": "# Import settings from Django's configuration system \nfrom . import paths\n  \nDEBUG = True # Debug mode or not \nALLOWED_HOSTS = ['*']\ndefedffds"}]}