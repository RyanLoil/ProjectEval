{"2": [{"file": "settings.py", "path": "", "code": "# settings.py\n\nALLOWED_HOSTS = ['*']\n\ndef DEBUG     = True\n\nDATABASES =\n{\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = False\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [BASE_DIR / 'static/']"}], "3": [{"file": "manage.py", "path": "/", "code": "#!/usr/bin/env python\n\ndef main():\n    import os\n    from django.core.management import execute_from_command_line\n\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'passwordgenerator.settings')\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "passwords/models.py", "path": "project_name/passwords", "code": "from django.db import models\n\ndef generate_password(length):\n    import random\n    import string\n\n    chars = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(chars) for i in range(length))\n    return password\n\nclass Password(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True)\n    password = models.CharField(max_length=128, default=generate_password(16))  \n    \n    def __str__(self):\n        return self.password"}, {"file": "passwords/admin.py", "path": "project_name/passwords", "code": "from django.contrib import admin\nfrom .models import Password\n\nadmin.site.register(Password)"}, {"file": "templates/index.html", "path": "project_name/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1>Password Generator</h1>\n    <label for=\"length\">Password Length:</label>\n    <input type=\"number\" id=\"length\" value=\"16\">\n    <button id=\"generate-btn\">Generate Password</button>\n    <div id=\"password-display\"></div>\n\n    <script>\n        const generateBtn = document.getElementById('generate-btn');\n        const passwordDisplay = document.getElementById('password-display');\n    \n        generateBtn.addEventListener('click', () => {\n            const length = parseInt(document.getElementById('length').value);\n            fetch(`/generate/?length=${length}`) \n                .then(res => res.text())\n                .then(password => passwordDisplay.textContent = password);\n        });\n    </script>\n</body>\n</html>"}, {"file": "passwords/views.py", "path": "project_name/passwords", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .models import Password\nimport random\nimport string\n\ndef generate_password(length):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for i in range(length))\n\ndef generate_password_view(request, length):\n    password = generate_password(int(length))\n    return HttpResponse(password)"}, {"file": "urls.py", "path": "project_name/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('passwords.urls')),\n]"}, {"file": "passwords/urls.py", "path": "project_name/passwords", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.generate_password_view, name='generate'),\n]"}], "5": [{"file": "manage.py", "path": "markdown_html_converter/", "code": "#!/usr/bin/env python\n\ndef main():\n    from django.core.management import execute_from_command_line\n    execute_from_command_line(sys.argv)\nif __name__ == '__main__':\n    main()\n"}, {"file": "markdown_html_converter/settings.py", "path": "markdown_html_converter/", "code": "import os\n\ndef base_path():\n    return os.path.dirname(__file__)\n\nPROJECT_DIR = base_path()\nBASE_DIR = os.path.dirname(PROJECT_DIR)\n\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_html_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(PROJECT_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_html_converter.wsgi.application'\n"}, {"file": "markdown_html_converter/urls.py", "path": "markdown_html_converter/", "code": "# coding: utf-8\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "markdown_html_converter/wsgi.py", "path": "markdown_html_converter/", "code": "# coding: utf-8\nimport os\ntopo.url_scheme = 'http'\ndef application(environ, start_response):\n    return topo.handle(environ, start_response) \necho \"WSGI server running\"\ntopo.run('localhost', 80)\n"}, {"file": "converter/views.py", "path": "markdown_html_converter/converter/", "code": "from django.shortcuts import render\nimport markdown\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown')\n        html_text = markdown.markdown(markdown_text)\n        return render(request, 'converter/result.html', {'html_text': html_text})\n    else:\n        return render(request, 'converter/index.html') \n"}, {"file": "converter/urls.py", "path": "markdown_html_converter/converter/", "code": "# coding: utf-8\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.convert, name='convert')\n]\n"}, {"file": "templates/converter/index.html", "path": "markdown_html_converter/templates/converter/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Markdown to HTML Converter</title>\n</head>\n<body>\n    <h1>Markdown to HTML Converter</h1>\n    <h2>Paste your Markdown code below:</h2>\n    <form method=\"POST\" action=\"\">\n        {% csrf_token %}\n        <textarea id=\"markdown-input\" name=\"markdown\" rows=\"10\" cols=\"50\"></textarea>\n        <br>\n        <button type=\"submit\">Convert</button>\n    </form>\n</body>\n</html>"}, {"file": "templates/converter/result.html", "path": "markdown_html_converter/templates/converter/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Conversion Result</title>\n</head>\n<body>\n    <h1>Conversion Result</h1>\n    <div id=\"html-output\">{{ html_text }}</div>\n</body>\n</html>"}], "7": [{"file": "settings.py", "path": "budget_control/budget_control/", "code": "\nSETTINGS = {\n    'DEBUG': True,\n    'ALLOWED_HOSTS': ['*']\n}\n"}, {"file": "urls.py", "path": "budget_control/budget_control/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\ndef get_default_urls():\n    return [path('', include('app.urls'))]\n    \nurlpatterns = [\n    path('admin/', admin.site.urls),\n]"}, {"file": "templates/index.html", "path": "budget_control/budget_control/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        #chart-container {\n            width: 80%;\n            height: 400px;\n        }\n    </style>\n</head>\n<body>\n    <h1>Budget Control</h1>\n    <div id=\"chart-container\">\n        <!-- Chart will be displayed here -->\n    </div>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.1/chart.min.js\"></script>\n    <script>\n        const ctx = document.getElementById('myChart').getContext('2d');\n        const myChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                datasets: [{\n                    label: 'Balance',\n                    data: [100, 150, 120, 80, 180, 200],\n                    borderColor: 'rgb(54, 162, 235)',\n                    fill: false\n                }]\n            },\n        });\n    </script>\n</body>\n</html>"}], "8": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\napplications = ['calendar'] # add your other applications here if you have more\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar.urls'))\n]\n"}, {"file": "calendar/urls.py", "path": "myproject/calendar/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.index, name='calendar_index'),\n]\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# settings.py\ndef DEBUG = False\nSECRET_KEY = 'your_secret_key'\nALLOWED_HOSTS = ['https://yourdomain.com'] # Update with your domain name\napplications =\n    ['calendar',...],\ndefined:\nINSTALLED_APPS = [...\ns'calendar', ...]\n"}, {"file": "index.html", "path": "myproject/calendar/templates/calendar/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <style>\n        /* Add your CSS styles here */\n    </style>\n</head>\n<body>\n    <h1>Monthly Calendar</h1>\n    <div id=\"calendar-container\"></div>\n    <script>\n      // Add JavaScript to fetch calendar data and populate the container\n    </script>\n</body>\n</html>"}, {"file": "views.py", "path": "myproject/calendar/views.py", "code": "from django.shortcuts import render\nfrom datetime import date, timedelta\n\ndef index(request):\n    today = date.today()\n    first_day = today.replace(day=1)\n    last_day = first_day + timedelta(days=(32 - first_day.day))   # 32- day trick for getting month end\n    context = {\n        'first_day': first_day,\n        'last_day': last_day,\n    }\n    return render(request, 'calendar/index.html', context)\n"}], "9": [{"file": "templates/index.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css\">\n</head>\n<body>\n   <div class=\"container mt-5\">\n       <h1 id=\"title\" class=\"text-center\">Welcome to Our AI Chatbot</h1>\n       <div class=\"row\">\n           <div class=\"col-md-6\">\n               <div class=\"card\" id=\"chatbot-card\">\n                   <div class=\"card-body\">\n                       <h5 class=\"card-title\">AI Assistant</h5>\n                       <ul id=\"chat-log\" class=\"list-group\"></ul>\n                   </div>\n               </div>\n           </div>\n           <div class=\"col-md-6\">\n               <form id=\"message-input\" class=\"card\">\n                   <div class=\"card-body\">\n                       <div class=\"form-group\">\n                           <textarea id=\"user-input\" class=\"form-control\" placeholder=\"Type your message here...\" rows=\"3\"></textarea>\n                       </div>\n                       <button type=\"submit\" class=\"btn btn-primary\">Send</button>\n                   </div>\n               </form>\n           </div>\n       </div>\n   </div>\n    \n</body>\n</html>"}, {"file": "views.py", "path": "", "code": "# -*- coding: utf-8 -*-\r\nfrom django.shortcuts import render\r\nfrom django.http import HttpResponse\r\nimport openai\r\n\r\nopenai.api_key = 'YOUR_API_KEY'\r\n\r\ndef handle_message(request):\r\n    if request.method == 'POST':\r\n        user_input = request.POST['user-input']\r\n        response = openai.ChatCompletion.create(\r\n            model='gpt-3.5-turbo',\r\n            messages=[{\r\n                'role': 'user',\r\n                'content': user_input\r\n            }]\r\n        )\r\n\r\n        return render(request, 'index.html', {\r\n            'chat_log': json.loads(response.choices[0].message['content'].replace('\\n', '')),\r\n        })\r\n    else:\r\n        return render(request, 'index.html')"}, {"file": "urls.py", "path": "", "code": "# -*- coding: utf-8 -*- \nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.handle_message, name='home'),\n]\n"}, {"file": "settings.py", "path": "", "code": "# -*- coding: utf-8 -*-\n\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE =\n    ['whitenoise.middleware.WhiteNoiseMiddleware', \n     'django.middleware.security.SecurityMiddleware',\n     'django.contrib.sessions.middleware.SessionMiddleware',\n     'django.middleware.common.CommonMiddleware',\n     'django.middleware.csrf.CsrfViewMiddleware',\n     'django.contrib.auth.middleware.AuthenticationMiddleware',\n     'django.contrib.messages.middleware.MessageMiddleware',\n     'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nSTATIC_URL = 'static/'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates', \n        'DIRS': ['templates/', ],\n        'APP_DIRS': True,\n        'OPTIONS': { \n            'context_processors': [ \n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth', \n                'django.contrib.messages.context_processors.messages', \n            ], \n        },\n    }, \n]\n\nROOT_URLCONF = 'urls'\n"}, {"file": "urls.py", "path": "", "code": "# -*- coding: utf-8 -*- from django.contrib import admin from django.urls import path, include from rest_framework.urlpatterns import routers\n from .views import get_response \n app_name = 'myApp' # This ensures correct URLs when routing to sub-app views.\n router = routers.DefaultRouter()\n router.register(r'users', UserViewSet)  # Define your API endpoints here...\nurlpatterns = [ path('admin/', admin.site.urls), path('', include(router.urls)) ]"}], "11": [{"file": "templates/project.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n</head>\n<body>\n    <h1>Project Details</h1>\n    <p id=\"project_id\"></p>\n    <p id=\"project_type\"></p>\n    <p id=\"nl_prompt\"></p>\n    <h2>Technical Stack</h2>\n    <ul id=\"framework_technical_stack\"></ul>\n    <h2>Review Test Cases</h2>\n    <table>\n        <thead>\n            <tr>\n                <th>Page</th>\n                <th>Function</th>\n                <th>Test Status</th>\n            </tr>\n        </thead>\n        <tbody id=\"test_case_table\"></tbody>\n    </table>\n</body>\n</html>"}, {"file": "app.py", "path": "manage.py", "code": "from django.shortcuts import render\n\n# Import necessary Django models and serializers if needed\n\ndef project_view(request, project_id):\n    project = get_project(project_id)\n    context = {\n        'project': project,\n    }\n    return render(request, 'project.html', context)\n"}, {"file": "urls.py", "path": "", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('projects/<int:project_id>/', views.project_view, name='project_view')\n]\n"}, {"file": "settings.py", "path": "", "code": "INSTALLED_APPS = [ # ... other apps \n    'myproject',\n],\n"}], "16": [{"file": "read_excel.py", "path": "project/read_excel.py", "code": "import pandas as pd\n\ndef read_and_transform_excel(input_file, output_file):\n    df = pd.read_excel(input_file)\n    # Transform 'Time' column into numerical representation for easier handling (e.g., 1st period = 1, etc.)\n    mapping = {'First period': 1, 'Second period': 2, 'Third period': 3, 'Fourth period': 4}\n    df['Time'] = df['Time'].map(mapping)\n\n    # Export the transformed DataFrame to a new Excel file\n    df.to_excel(output_file, index=False)\n\nif __name__ == '__main__':\n    input_file = 'Spring Semester Subjects.xlsx'\n    output_file = 'transformed_subjects.xlsx'\n    read_and_transform_excel(input_file, output_file)\n"}], "17": [{"file": "runme.bat", "path": "/", "code": "@echo off\nxlsx2py -i Gamedata.xlsx -d data.py \npython data.py"}, {"file": "data.py", "path": "/", "code": "import pandas as pd\ndef create_logistic_model():\n  # Read the dataset from Excel\ndata = pd.read_excel('Gamedata.xlsx')\n\n  # One-period lag for 'result'\ndummy_lag = data['result'].shift(1).to_frame(name='result_lag')\n  data = pd.concat([data, dummy_lag], axis=1)\n\n  # Specify dependent and independent variables\n  X = data.drop('result', axis=1)\n  y = data['result']\n\n  # Prepare the dataset (train/test split, feature scaling, etc.)\n  # ... \n\n  from sklearn.linear_model import LogisticRegression\n  model = LogisticRegression()\n  model.fit(X, y)\n\n  return model\n\ndef main():\n  model = create_logistic_model()\n\n  import pandas as pd\n  summary = pd.DataFrame(model.feature_names_in_, columns=['Feature']).append(pd.DataFrame([{'R2': round(model.score(X, y), 4)}], columns=['R2']))\n  summary.to_excel('Logistic.xlsx', index=False)\n    \nif __name__ == '__main__': main()"}, {"file": "Gamedata.xlsx", "path": "/", "code": ""}, {"file": "Logistic.xlsx", "path": "/", "code": ""}], "19": [{"file": "visualize_deaths.py", "path": "script/visualize_deaths.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\ndef visualize_weekly_deaths(filepath):\n  df = pd.read_csv(filepath)\n  df['Date of death'] = pd.to_datetime(df['Date of death'], format='%d-%m-%Y')\n  weekly_deaths = df.groupby(df['Date of death'].dt.isocalendar().week)['Date of death'].count()\n  plt.figure(figsize=(10, 6))\n  plt.bar(weekly_deaths.index, weekly_deaths.values)\n  plt.xlabel('Week Number')\n  plt.ylabel('Number of Deaths')\n  plt.title('Weekly Deaths Distribution')\n  plt.show()\n\nif __name__ == '__main__':\n  visualize_weekly_deaths('Deathlist.csv')"}], "20": [{"file": "urls.py", "path": "blog/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('post.urls')),\n]\n"}, {"file": "settings.py", "path": "blog/settings.py", "code": "# settings.py\n\ndef debug: \ndef DEBUG = False\ndef EMAIL_HOST = 'example.com'\ndef EMAIL_USE_TLS = True\ndef ALLOWED_HOSTS = ['*']\ndef STATIC_URL = '/static/'\ndef PROJECT_DIR = Path(__file__).resolve().parent\ndef BASE_DIR = PROJECT_DIR\n# \nfrom pathlib import Path\nimport os\n\non_production_settings = {\n    'debug': True,\n    'ALLOWED_HOSTS': ['*'],\n}\nproduction_settings = {\n    'debug': False,\n    'ALLOWED_HOSTS': ['example.com']\n}\nexports settings = {'PRODUCTION': production_settings, 'ON_PRODUCTION': on_production_settings}"}, {"file": "wsgi.py", "path": "blog/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog.settings')\n\nfrom blog.serverconf import settings  # Import the local configuration\napplication = get_wsgi_application()"}, {"file": "post/urls.py", "path": "blog/post/urls.py", "code": "from django.urls import path, include\nfrom . import views\n\nurlpatterns = [\n    path('', views.post_list, name='post_list'),\n]"}, {"file": "post/__init__.py", "path": "blog/post/__init__.py", "code": "import os"}]}