{"8": [{"file": "cal_app/urls.py", "path": "cal_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom . import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('calendar/', include('cal_app.views.calendar')),\n]\n"}, {"file": "cal_app/views.py", "path": "cal_app/views.py", "code": "from django.shortcuts import render, redirect\nimport datetime\n# Home view\ndef home(request):\n    now = datetime.datetime.now().date()\n    events = Event.objects.all() # Assuming there's an Event model.\n    return render(request, 'home.html', {'now': now, 'events': events})\n# Calendar view\ndef calendar(request):\n    return render(request, 'calendar.html')\n# ... (Define more views for the Calendar page)\n"}, {"file": "cal_app/templates/home.html", "path": "cal_app/templates/home.html", "code": "```html\n<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'>\n    <title>Calendar App</title>\n  </head>\n  <body>\n    <!-- Home content -->\n    {% if now %}   {{ now }}\n    {% endif %}\n    <a href='{% url 'calendar' %}'>Calendar</a>\n    <!-- Include the calendar template -->\n    {% include 'calendar.html' %}\n  </body>\n</html>\n"}, {"file": "cal_app/templates/base.html", "path": "cal_app/templates/base.html", "code": "```html\n<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'>\n    <title>{% block title %}{% endblock %}</title>\n  </head>\n  <body>\n    <!-- Add a class for the body -->\n    <div class='container-fluid d-flex flex-column'>   <!-- Include header and footer templates if applicable -->\n      {% block content %}\n        {{ block.super }}\n      {% endblock %}\n    </div>\n  </body>\n</html>"}, {"file": "cal_app/templates/calendar.html", "path": "cal_app/templates/calendar.html", "code": "```html\n{% extends 'base.html' with {'title': 'Calendar'}\n\n  {% block content %}\n    <!-- Calendar content -->\n  {% endblock %}"}, {"file": "cal_app/templates/calendar_month.html", "path": "cal_app/templates/calendar_month.html", "code": "```html\n{% extends 'base.html' with {'title': 'Calendar'}  <!-- Extend the base template with month-specific content --}"}, {"file": "__init__.py", "path": "cal_app/__init__.py", "code": "```python\n# Ensure app is a package\nfrom django.apps import AppConfig\nclass Calconfig(AppConfig):\n    name = 'cal_app'\n"}, {"file": "models.py", "path": "cal_app/models.py", "code": "```python\nfrom django.db import models\n# Define the Event model and fields.\n"}, {"file": "forms.py", "path": "cal_app/forms.py", "code": "```python\nfrom django import forms\n# Define customized event form for adding events, ... --}"}], "11": [{"file": "project_structure.py", "path": "myapp/", "code": "```\nfrom django.apps import AppConfig\nclass MyAppConfig(AppConfig):\n    name = 'myapp'\n\nclass IndexView(generic.TemplateView): ...\n   \nclass AboutView(generic.TemplateView): ...\n```"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "```\nfrom django.urls import path, include\nfrom django.contrib import admin\nurlpatterns = [                         path('admin/', admin.site.urls),                     path('', IndexView.as_view(), name='home'),                     path('about/', AboutView.as_view(), name='about')            ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)        \n```"}, {"file": "views.py", "path": "myapp/views.py", "code": "```\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom . import forms\nclass IndexView(generic.TemplateView): ...\nclass AboutView(generic.TemplateView): ...\n@login_required(login_url='/accounts/login/')\ndef testcode_status(request): ...\n@login_required(login_url='/accounts/login/')\ndef upload_testcode(request): ...\n@login_required(login_url='/accounts/login/')\ndef review_notes(request): ...\n                      \n```"}, {"file": "index.html", "path": "myapp/templates/myapp/index.html", "code": "```\n{% extends 'base.html' %}\n{% block content %}\n  <h1 id='welcome-message'>Welcome to our test code page!</h1>\n\n {% if form.status == 'Select'\n   }\n       <form method='post'\ns          \t enctype='multipart/form-data'>\n  \t     {{ form.as_form }}\n  \t     <button type='submit'>Submit</button>\n  </form>\n\n {% endif %}\n        \n{% if messages %}\n  <ul id='messages'>\n    {% for message in messages %}\n      <li>{{ message }}</li>\n    {% empty %}\n  </ul>\n{% endif %}\n\n{% if review_notes_form %}\n  <form method='post'\ns     \t enctype='text/plain'>\n    {{ review_notes_form.as_form }}\n    <button type='submit'>Submit</button>\n  </form>\n{% endif %}\n{% endblock %}"}, {"file": "about.html", "path": "myapp/templates/myapp/about.html", "code": "```\n{% extends 'base.html' %}\n{% block content %}\n  <h1>About Us</h1>\n  <!-- Add the about content here -->\n{% endblock %}"}, {"file": "forms.py", "path": "myapp/", "code": "```\nfrom django import forms\nclass TestCodeStatusForm(forms.Form):\n  status = forms.ChoiceField(choices=(('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')))          \nclass UploadTestCodeForm(forms.Form):\n  testcode_file = forms.FileField()                       \nclass ReviewNotesForm(forms.Form):\n  review_notes = forms.CharField(widget=forms.Textarea)      ```"}, {"file": "base.html", "path": "myapp/templates/myapp/base.html", "code": "```\ns <!DOCTYPE html>\n<html lang='en'>             \n  <head>\n    <!-- Add head content here -->                  \n  </head>\n  <body class='main'>                     \n    <div id='content'>               \n      {% block content %}\n{% endblock %}            \n    </div>        \n  </body>       \n</html>"}], "12": [{"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- head content -->\n\t</head>\n\t<body>\n\t\t<h1>Welcome to Our Platform</h1>\n\t\t<!-- login, sign up links here -->\n\t</body>\n</html>"}, {"file": "signup.html", "path": "templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- head content -->\n\t</head>\n\t<body>\n\t\t<form action=\"{% url 'signup' %}\">\n\t\t\t<!-- form fields here -->\n\t\t\t<button type=\"submit\">Sign Up</button>\n\t\t</form>\n\t</body>\n</html>"}, {"file": "login.html", "path": "templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- head content -->\n\t</head>\n\t<body>\n\t\t<form action=\"{% url 'login' %}\">\n\t\t\t<!-- form fields here -->\n\t\t\t<button type=\"submit\">Log In</button>\n\t\t</form>\n\t</body>\n</html>"}, {"file": "employee_portal.html", "path": "templates/employee_portal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- head content -->\n\t</head>\n\t<body>\n\t\t<!-- submit claim form here -->\n\t\t<!-- view claim status section here -->\n\t\t<!-- edit claim section here -->\n\t</body>\n</html>"}, {"file": "claim_detail.html", "path": "templates/claim_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- head content -->\n\t</head>\n\t<body>\n\t\t<h1>Claim Details</h1>\n\t\t<!-- display claim details here -->\n\t</body>\n</html>"}, {"file": "admin_portal.html", "path": "templates/admin_portal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- head content -->\n\t</head>\n\t<body>\n\t\t<!-- approve claim form here -->\n\t\t<!-- reject claim form here -->\n\t\t<!-- view details of a claim here -->\n\t\t<!-- search and filter section here -->\n\t</body>\n</html>"}, {"file": "budget_control.html", "path": "templates/budget_control.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- head content -->\n\t</head>\n\t<body>\n\t\t<!-- analyze expense balances section here -->\n\t\t<!-- generate reports section here -->\n\t\t<!-- set budget limits section here -->\n\t\t<!-- send budget alerts section here -->\n\t</body>\n</html>"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<!-- common head content -->\n\t</head>\n\t<body>\n\t\t<div id=\"content-wrapper\">\n\t\t\t<!-- navigaton bar here -->\n\t\t\t<!-- main content here --)-\n\t\t</div>\n\t</body>\n</html>"}], "16": [{"file": "MainProgram.py", "path": "project/main/MainProgram.py", "code": "from functions import CheckFileExistence, ValidateHeaders, ValidateTimeColumn, ValidateDataIntegrity,\n     ValidateNullValue, TransformToTwoDimensionTable, DataMapping\n\n\ndef run():\n    spring_subjects = read_file('Spring Semester Subjects.xlsx')\n    spring_subjects = CheckFileExistence(spring_subjects)\n    spring_subjects = ValidateHeaders(spring_subjects)\n    spring_subjects = ValidateTimeColumn(spring_subjects)\n    spring_subjects = ValidateDataIntegrity(spring_subjects)\n    spring_subjects = ValidateNullValue(spring_subjects)\n\n    transformed_table = TransformToTwoDimensionTable(spring_subjects)\n    transformed_table = DataMapping(transformed_table)\n\n    write_excel('output.xlsx', transformed_table)\n\nif __name__ == '__main__':\n    run()"}, {"file": "functions.py", "path": "project/functions/functions.py", "code": "def CheckFileExistence(data): \nai = [i for i in data if i is None]\nhass_file = len(ai) == 0\n    return hass_file\n   \ndef ValidateHeaders(data):\nds = data[0]\ni_headers = set(ds)\nhHeaders = ['#', 'Name', 'Weekday', 'Time']\nif set(hHeaders).issubset(i_headers) and len(i_headers) == len(hHeaders):\n    return True\nelse:\n    return False         \ndef ValidateTimeColumn(data):\nds = [d[3] for d in data]\ni_time = set(ds)\nvTime = {'First period', 'Second period', 'Third period', 'Fourth period'}\nif set(vTime).issubset(i_time) and len(i_time) == len(vTime):\n    return True\nelse:\n    return False         \ndef ValidateDataIntegrity(data):\nds = [d for d in data if any(map(lambda cell: cell is None, d))]\nlen(ds) == 0   \ndef ValidateNullValue(data):\nds = [sum(c != '' for c in d) > 3 for d in data]\nreturn all(ds)\n   \ndef TransformToTwoDimensionTable(data):\nr_result = []\nn = len(data[0]) + 1\nf, t = -1, {}  # first day, time mapping\nfor row in data:\n    i, day = map(int, row[0].split(' ')) \n    if day > f: # new day started\nn_, wd = divmod(day, 5)\ni, ti = divmod(f + 1, len(vTime))\tf, t = min(i, ti), vTime[ti]\nr_result.append((wd, w + n - 1, f, t)) \n    f, t = day, row[1]\nfor i in range(f + 1, n):\nr_result.append((wd, w + n - 1, i, None))     \n    return r_result         \ndef DataMapping(data):\nr_new = sorted(data, key=lambda x: (x[2], x[3]))\nr = [r for r in r_new if r[3] is not None]\nr_mapping = {vTime[i]: [] for i in range(len(vTime))}\nfor r in r:\n    r_mapping[r[3]].append((r[0], r[1]))     \nr_new = []\nf, t = -1,\nfor r in r_mapping:\nr_new += [(day, time, *subjectinfo) for day, times, subjectinfo in r]\nreturn r_new"}, {"file": "read_file.py", "path": "project/libs/read_file.py", "code": "import openpyxl\n\ndef read_file(filename):\nnwb = openpyxl.load_workbook(filename)\nsht = nwb.active\ndata = [sht[r+1].value for r in range(sht.max_row)]\n    return data"}, {"file": "write_excel.py", "path": "project/libs/write_excel.py", "code": "import openpyxl\nfrom openpyxl.workbook import Workbook\n\ndef write_excel(filename, data):\n    wb = Workbook()\nsht = wb.active\nr = 0\nsht.append(['Weekday', 'Range', 'Day', 'Time'])  # headers\nr += 1\nfor row in data:\n    sht[r] = row\nr += 1\nwb.save(filename)"}], "17": [{"file": "Main.py", "path": "project/main.py", "code": "import pandas as pd\n\n# Load the dataset\ndf = pd.read_excel('Gamedata.xlsx')\n\n# Apply a one-period lag to the 'result' column\ndf['lagged_result'] = df['result'].shift(-1)\n\n# Use all other columns as independent variables\ndf.dropna(inplace=True)\nindependent_variables = df.drop('result', axis=1)\n\n# Generate errors when null value is found\nif df.isnull().values.any():\nraise ValueError('Null values found in the table which is not allowed.')"}, {"file": "Model.py", "path": "project/model.py", "code": "from sklearn.linear_model import LogisticRegression\n\ndef create_logistic_regression():\n return LogisticRegression()"}, {"file": "Summary.py", "path": "project/summary.py", "code": "import pandas as pd\n\ndef generate_model_summary(model):\n summary = pd.DataFrame(model.get_params())\nsummary['Variable'] = ['intercept'] + list(model.coef_._data[0])\n return summary"}, {"file": "Output.py", "path": "project/output.py", "code": "import pandas as pd\ndef write_summary(summary):\npdf = pd.read_excel('Logistic.xlsx', engine='openpyxl')\nif 'Model Summary' not in pdf['A1':]:\n pdf.append(summary, ignore_index=True)\npdf.to_excel('Logistic.xlsx', engine='openpyxl')"}, {"file": "Gamedata.xlsx", "path": "project/data/Gamedata.xlsx"}], "18": [{"file": "mainMenu.py", "path": "src/main_menu.py", "code": "from gameEnvironment import GameEnvironment, load_game\ndef start_game():\n    game = load_game()\n    game.run()"}, {"file": "instructions.py", "path": "src/instructions.py", "code": "def display_instructions():\n    print(\"Welcome to the Bash Crawl game!\")\n    print(\"Use the commands: Move, Look Around, Pick Item, Check Inventory, Help for controls.\n    Print Help to view more details about these commands. \")"}, {"file": "main_menu.html", "path": "src/main_menu.html", "code": "      <button id='startGame' class=\"btn btn-primary\">Start Game</button>\n      <button id='instructions' class=\"btn btn-info\">Instructions</button>\n      <button id='quit' class=\"btn btn-danger\">Exit Game</button>"}, {"file": "gameEnvironment.py", "path": "src/game_environment.py", "code": "def load_game():\n    pass"}, {"file": "player.py", "path": "src/player.py", "code": "class Player:\n    def __init__(self, current_room):\n        self.current_room = current_room\n    \n    # Move Player functionality here"}, {"file": "room.py", "path": "src/room.py", "code": "class Room:\n    def __init__(self, name, contents):\n        self.name = name\n        self.contents = contents"}, {"file": "items.py", "path": "src/items.py", "code": "class Item:\n    def __init__(self, name):\n        self.name = name"}, {"file": "inventory.py", "path": "src/inventory.py", "code": "class Inventory:\n    def __init__(self):\n        self.items = []"}, {"file": "command_parser.py", "path": "src/command_parser.py", "code": "def parse_command(input_text):\n    pass"}, {"file": "gameLogic.py", "path": "src/gameLogic.py", "code": "import command_parser, gameEnvironment, inventory,\n\ndef update_game_state(commands):\n    # Implement logic to update the game state based on commands"}, {"file": "room1.html", "path": "src/rooms/room1.html", "code": "      <div id=\"room1\" class=\"room\">\n        <p>You are now in room 1</p>\n        <button id='pickup_item' class=\"btn btn-success\">Pick up item</button>\n      </div>"}, {"file": "help.py", "path": "src/help.py", "code": "def display_help():\n    print(\"Available commands:\")\n    print(\"Move: To move to another room.\")\n    print(\"Look Around: To inspect the current room.\")\n    print(\"Pick up Item: To pick up items from the environment.\")\n    print(\"Check Inventory: To view items you are currently holding.\")"}], "19": [{"file": "Deathlist.csv", "path": "data/Deathlist.csv"}, {"file": "data_processor.py", "path": "scripts/data_processor.py", "code": "from batch_program import ReadDeathlistData, ProcessData, CalculateWeeklyDeaths,\n\n  def main():\n    data = ReadDeathlistData()\n    preprocessed_data = ProcessData(data)\n    weekly_deaths = CalculateWeeklyDeaths(preprocessed_data)\n\n  if __name__ == '__main__':\n    main()"}, {"file": "visualizer.py", "path": "scripts/visualizer.py", "code": "from batch_program import GenerateHistogram, OutputHistogram,\n\n  def main():\n    data = load_data() # Load the processed dataset from a file or another source.\n    histogram = GenerateHistogram(data)\n    OutputHistogram(histogram)\n\n  if __name__ == '__main__':\n    main()"}, {"file": "validate.py", "path": "scripts/validater.py", "code": "from batch_program import ValidateDataset,\n\n  def main():\n    data = LoadData() # Load the dataset from a file or another source.\n    validated = ValidateDataset(data)\n    if not validated:\n      raise ValueError(\"Invalid or incomplete dataset. Cannot proceed with processing.\")\n\n  if __name__ == '__main__':\n    main()"}, {"file": "run.sh", "path": "scripts/run.sh", "code": ". /venv/bin/activate && cd scripts && python3 validate.py && python3 data_processor.py && python3 visualizer.py"}, {"file": "Dockerfile", "path": "docker", "code": "FROM python:3.8\nWORKDIR /app\nCOPY . /app\nRUN pip install -r requirements.txt\nCMD [\"/bin/bash\", \"scripts/run.sh\"]"}, {"file": "requirements.txt", "path": "docker/requirements.txt", "code": "pandas numpy matplotlib"}]}