{"1": [{"file": "apps/bmi_calculator/models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\nclass BMI(models.Model):\n    height = models.DecimalField(decimal_places=2, max_digits=5)\n    weight = models.DecimalField(decimal_places=2, max_digits=10)\n    result = models.DecimalField(decimal_places=2, max_digits=5)\n    category = models.CharField(max_length=50)\n"}, {"file": "apps/bmi_calculator/forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMIForm(forms.Form):\n    height = forms.DecimalField(widget=forms.TextInput(attrs={'type': 'number', 'step': '.01'}))\n    weight = forms.DecimalField(widget=forms.TextInput(attrs={'type': 'number', 'step': '.01'})\n"}, {"file": "apps/bmi_calculator/views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import BMI\nfrom .forms import BMIForm\n\ndef calculator(request):\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            height = form.cleaned_data['height']\n            weight = form.cleaned_data['weight']\n            bmi = calculate_bmi(height, weight)\n            category = get_category(bmi)\n            bmi_obj = BMI(height=height, weight=weight, result=bmi, category=category).save()\n        return render(request, 'bmicalculator.html', {'form': form})\n    else:\n        form = BMIForm()\n    return render(request, 'home.html')\n"}, {"file": "apps/bmi_calculator/templates/base.html", "path": "bmi_calculator/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n<nav class=' navigation'>\n<!-- Add links here -->\n</nav>\n{% block content %}\n{% endblock %}\n</body>\n</html>"}, {"file": "apps/bmi_calculator/templates/home.html", "path": "bmi_calculator/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Welcome to BMI Calculator</h1>\n    <p>Here you can calculate your Body Mass Index (BMI) to check if it falls in a healthy range.</p>\n\n    <!-- Add the link or button to the calculator here -->\n{% endblock %}"}, {"file": "apps/bmi_calculator/templates/bmicalculator.html", "path": "bmi_calculator/templates/bmicalculator.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Body Mass Index (BMI) Calculation</h1>\n\n    <form method='post'> {% csrf_token %}\n        <div>\n            <label for=\"height\">Height:</label>\n            <input type='number' name='height' id='height\u0092 class='height-input' />\n        </div>\n\n        <div>\n            <label for\"weight\">Weight:</label>\n            <input type='number' name='weight' id=\"weight\" class='weight-input'  />\n        </div>\n    \n\n        <button type=\"submit\">Calculate</button>\n    </form>\n\n    {% if form.errors %}\n        <ul>\n            {% for error in form.errors %}\n                <li>{{ error }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n\n    <!-- Add the bmi result and category information here -->\n{% endblock %}"}, {"file": "apps/bmi_calculator/static/css/styles.css", "path": "bmi_calculator/static/css/styles.css", "code": "/* Add your css styles here */\n"}, {"file": "apps/bmi_calculator/urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom .import views\nurlpatterns = [\n    path('', views.calculator, name='home'),\n]"}, {"file": "projectname/settings.py", "path": "projectname/settings.py", "code": "<!-- Project-specific settings go here -->\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator'\n]\n"}], "2": [{"file": "requirements.txt", "path": "project_root/", "code": "Django==3.2, requests==2.24.0"}, {"file": "manage.py", "path": "project_root/"}, {"file": "__init__.py", "path": "project_root/currency_converter/"}, {"file": "apps.py", "path": "project_root/currency_converter/"}, {"file": "urls.py", "path": "project_root/currency_converter/"}, {"file": "views.py", "path": "project_root/currency_converter/"}, {"file": "models.py", "path": "project_root/currency_converter/"}, {"file": "templates/base.html", "path": "project_root/templates/"}, {"file": "templates/home.html", "path": "project_root/templates/currency_converter/"}, {"file": "templates/currency_details.html", "path": "project_root/templates/currency_converter/"}, {"file": "templates/settings.html", "path": "project_root/templates/currency_converter/"}, {"file": "forms.py", "path": "project_root/currency_converter/"}, {"file": "currencies.py", "path": "project_root/currency_converter/"}, {"file": "utils.py", "path": "project_root/currency_converter/"}], "4": [{"file": "main/urls.py", "path": "project_folder/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n\n    # Replace 'app_name' with the name of your Django app\n    path('', include('app_name.urls')),\n]\n"}, {"file": "main/asgi.py", "path": "project_folder/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nasgi_application = get_asgi_application(\n    os.path.dirname(os.path.abspath(__file__)), 'project_name.asGI' \n)"}, {"file": "app1/models.py", "path": "project_folder/app1/models.py", "code": "# Import required libraries and create necessary models."}, {"file": "app1/forms.py", "path": "project_folder/app1/forms.py", "code": "from django import forms\n# Create Forms for QR Code Generator"}, {"file": "app1/views.py", "path": "project_folder/app1/views.py", "code": "# Define views and associated functions related to the QR code generator."}, {"file": "app1/templates/base.html", "path": "project_folder/app1/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n ...\n</head>\n<body class=\"qr-website\">\n  <header class=\"site-header\">\n    ...\n  </header>\n  <main class=\"site-content\">\n    {% block content %}\n    {% endblock %}\n  </main>\n  <footer class=\"site-footer\">\n    ...\n  </footer>\n</body>\n</html>"}, {"file": "app1/templates/home.html", "path": "project_folder/app1/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  ...\n{% endblock %}"}, {"file": "app1/templates/qr_code_generator.html", "path": "project_folder/app1/templates/qr_code_generator.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  ...\n{% endblock %}"}, {"file": "project_folder/settings.py", "path": "project_folder/settings.py", "code": "...\n# Import necessary libraries and settings for apps, templates, forms, etc."}], "6": [{"file": "project_name/manage.py", "path": "project_name/", "code": "from django.management import execute_from_command_line\n\nexecute_from_command_line(sys.argv)"}, {"file": "project_name/settings.py", "path": "project_name/", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n... (other settings like DATABASES, INSTALLED_APPS, etc.)\n"}, {"file": "project_name/urls.py", "path": "project_name/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [...(include 'admin', name='admin'),]\n           path('', include('app_name.urls')),\n       ]"}, {"file": "project_name/app_name/models.py", "path": "project_name/app_name/", "code": "from django.db import models\nclass TodoList(models.Model): ... (defining the model for TodoList)\nclass Task(models.Model): ...  (defining the model for Task)"}, {"file": "project_name/app_name/views.py", "path": "project_name/app_name/", "code": "from django.shortcuts import render, redirect\n... (importing other views and functions)\ndef home(request): ... (implementing the View Dashboard function for Home page)\ndef list_view(request, pk=None): ... (implementing the navigation to Todo Lists function and creating a new list if 'pk' is None)\ndef task_view(request, slug, pk=None): ... (creating views for Add New Task, Edit Task, Delete Task, Mark Task as Completed, etc. for the Task page)"}, {"file": "project_name/app_name/templates/base.html", "path": "project_name/app_name/templates/", "code": "<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'>\n    <title>[TITLE]</title>\n ... (defining the base template)\n  </head>\n  <body>\n     ... (including other HTML content like navigation bar and footer)\n  </body>\n</html>"}, {"file": "project_name/app_name/templates/home.html", "path": "project_name/app_name/templates/", "code": "<html lang='en'>\n  <head>\n    ... (extending base template and setting its title)\n  </head>\n  <body>\n    ... (calling the View Dashboard function)\n  </body>\n</html>"}, {"file": "project_name/app_name/templates/list.html", "path": "project_name/app_name/templates/", "code": "<html lang='en'>\n  <head>\n    ... (extending base template and setting its title)\n  </head>\n  <body>\n    ... (calling the View Tasks function)\n       ... (creating a link to navigate to Task view)\n         {% block content %}\n           ... (implementing Create New List function)\n         {% endblock %}\n  </body>\n</html>"}, {"file": "project_name/app_name/templates/task.html", "path": "project_name/app_name/templates/", "code": "<html lang='en'>\n  <head>\n    ... (extending base template and setting its title)\n  </head>\n  <body>\n    ... (calling the appropriate Task views)\n       ... (implementing Add New Task, Edit Task, Delete Task, Mark Task as Completed functions)\n         {% block content %}\n           ... (other task-related HTML content)\n         {% endblock %}\n  </body>\n</html>"}, {"file": "project_name/app_name/templates/analysis.html", "path": "project_name/app_name/templates/", "code": "<html lang='en'>\n  <head>\n    ... (extending base template and setting its title)\n  </head>\n  <body>\n    ... (calling View Task Completion Chart and View Task Distribution Chart functions)\n         {% block content %}\n           ... (other analysis-related HTML content)\n         {% endblock %}\n  </body>\n</html>"}, {"file": "project_name/app_name/forms.py", "path": "project_name/app_name/", "code": "from django import forms\nclass TodoListForm(forms.ModelForm): ... (defining the form for creating TodoList)\nclass TaskForm(forms.ModelForm): ...  (defining the form for managing Task)"}, {"file": "project_name/app_name/static/css/styles.css", "path": "project_name/app_name/static/", "code": "/* Adding CSS styles here */"}], "11": [{"file": "home/views.py", "path": "your_project_directory/home/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')"}, {"file": "home/templates/base.html", "path": "your_project_directory/home/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{% block title %}{{ block.super }} - Home{% endblock %}</title>\n</head>\n<body>\n  <div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n</body>\n</html>"}, {"file": "home/templates/home.html", "path": "your_project_directory/home/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block title %}Welcome Message Test Code{% endblock %}\n\n{% block content %}\n  <h1>Welcome to our site!</h1>\n  \n{% if request.user.is_authenticated %}\n    <!-- User has logged in, display testcode status select box -->\n    <form method=\"post\">\n      {% csrf_token %}\n      <label for=\"testcode-status\">Testcode Status:</label>\n      <select id=\"testcode-status\" name=\"testcode-status\">\n        <option value=\"Pass\">Pass</option>\n        <option value=\"Fail\">Fail</option>\n        <option selected value=\"Select\">Select</option>\n      </select>\n      <button type=\"submit\">Submit</button>\n    </form>\n  \n  <!-- Import JSON file for testing. Make sure you have implemented the handling of this file -->\n  <form action=\"upload_file\" method=\"post\" enctype=\"multipart/form-data\">\n    <label for=\"file\">Select a file:</label>\n    <input type=\"file\" id=\"file\" name=\"file\">\n    <button type=\"submit\">Upload</button>\n  </form>\n  \n  <!-- Note section for user to input reviewing notes -->\n  <div class=\"note-section\">\n    <label for=\"testcode-notes\">Your Notes:</label>\n    <textarea id=\"testcode-notes\" name=\"testcode-notes\"></textarea>\n  </div>\n{% else %}\n    <!-- User is not logged in, show a message or the login page -->\n{% endif %}"}, {"file": "about/views.py", "path": "your_project_directory/about/views.py", "code": "from django.shortcuts import render\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "about/templates/base.html", "path": "your_project_directory/about/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{% block title %}{{ block.super }} - About{% endblock %}</title>\n</head>\n<body>\n  <div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n</body>\n</html>"}, {"file": "about/templates/about.html", "path": "your_project_directory/about/templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block title %}About Page{% endblock %}\n\n{% block content %}\n  <h1>About Us</h1>\n  <!-- Add your about page description here -->\n{% endblock %}"}, {"file": ".env", "path": ".env", "code": "SECRET_KEY=replace-with-your-secret-key"}], "16": [{"file": "FileInputValidator.py", "path": "project/validators/FileInputValidator.py", "code": "import os\nimport openpyxl\n\ndef CheckFileExistence(file_name):\n    if not os.path.exists(file_name):\n        raise FileNotFoundError('File Not Found')\n\ndef ValidateHeaders(worksheet, headers):\n    assert worksheet.title == 'Spring Semester Subjects'\n    header_row = worksheet[1]\n    for header in headers:\n        if header_row[header] != header:\n            raise ValueError('Incorrect Header')\n\ndef ValidateTimeColumn(worksheet, valid_times):\n    for row in range(2, worksheet.max_row + 1):\n        time = worksheet[f'B{row}'].value\n        if not time or time not in valid_times:\n            raise ValueError('Invalid Time')\n\ndef ValidateDataIntegrity(worksheet):\n    for col_letter in ['A', 'C', 'D', 'E']:\n        rows = [f'{col_letter}{row}' for row in range(2, worksheet.max_row + 1)]\n        column = openpyxl.utils.get_column_letter_index(col_letter) - 1\n        if any([cell.value is None for cell in worksheet[rows]]):\n            raise RuntimeError('Missing Data in Column')\n\ndef ValidateNullValue(worksheet):\n    null_values = set()\n    for row in range(2, worksheet.max_row + 1):\n        for col in ['A', 'C', 'D']:\n            if not worksheet[f'{col}{row}'].value and f'{col}{row}' not in null_values:\n                null_values.add(f'{col}{row}')\n    if len(null_values) > 0:\n        raise ValueError('Missing Values Detected: %s' % ', '.join(list(null_values)))"}, {"file": "DataTransformer.py", "path": "project/transformers/DataTransformer.py", "code": "import openpyxl\n\ndef TransformToTwoDimensionTable(xl_data):\n\treturn [[x for x in row] for row in xl_data]\n\ndef DataMapping(subject_list, table):\n\ttwo_dim_table = transform.TransformToTwoDimensionTable(subject_list)\n    columns = ['Subject Name', 'Weekday', 'Period'] + [f'{period} Period' for period in ['First', 'Second', 'Third', 'Fourth']]\n    header_row = ['Name', 'Day', '1st', '2nd', '3rd', '4th']\n    for row, subject in enumerate(two_dim_table):\n        weekday, time_period = int(subject[1]) - 1, subject[2]-1\n        result = [subject[0]] + [weekday + 1] + [time_period + 1] + columns[3:]\n        table[row] = result"}, {"file": "Main.py", "path": "project/main.py", "code": "import openpyxl\nfrom validators import FileInputValidator\nfrom transformers import DataTransformer\n\ndef read_subjects():\n    xlsx = openpyxl.load_workbook('Spring Semester Subjects.xlsx', data_only=True)\n    worksheet = xlsx['Spring Semester Subjects']\n    return list(worksheet.rows)[1:] \ndef main():\n     subjects = read_subjects()\n     validator = FileInputValidator('Spring Semester Subjects.xlsx', headers=['#', 'Name', 'Weekday', 'Time'], valid_times=['First period', 'Second period', 'Third period', 'Fourth period'])\n     data_transformer = DataTransformer()\n     subjects = data_transformer.DataMapping(subjects, [])\n     subjects = validator.ValidateDataIntegrity(worksheet=openpyxl.load_workbook('Spring Semester Subjects.xlsx')['Spring Semester Subjects'])\n     transformed_subjects = data_transformer.TransformToTwoDimensionTable([[subject] for subject in subjects])\n     output_file = openpyxl.Workbook()\n     table = output_file.active\n     data_transformer.DataMapping(transformed_subjects, table)\n     output_file.save('Output - Spring Semester Subjects.xlsx')"}], "18": [{"file": "main.py", "path": "src/main.py", "code": "import sys\nfrom game import Game\nif __name__ == '__main__':\n    game = Game()\n    game.run()"}, {"file": "game.py", "path": "src/game.py", "code": "class Game:\n    def __init__(self):\n        self.environment =\n            pages['Game Environment']['function']\n        self.state =\n            {'room': 'main_menu', 'items': [None], 'commands': {}}\n    def run(self):\n        while True:\n            self.process_input()"}, {"file": "environment.py", "path": "src/environment.py", "code": "\ndef get_room():\n    pass\ndef next_room(current_room):\n    pass\ndef list_items_in_room():\n    pass\ndef add_item(item):\n    pass\ndef view_inventory():\n    pass"}, {"file": "commands.py", "path": "src/commands.py", "code": "\ndef parse_command(command):\naction,\nargument =\ncmd.split()\nant(room) =\nenvironment.next_room(get_room())\nif action == 'start game':\ngame = Game()\ngame.run()\nelse:\n    pass\ndef update_state():\n    pass"}, {"file": "cmd.py", "path": "src/cmd.py", "code": "import sys\nclass Cmd:\n    intro = 'Welcome to the game!'\ndef do_start_game(self, line):\n    game = Game()\ngame.run()\ndef help_command(self):\nview_help()"}, {"file": "help.py", "path": "src/help.py", "code": "\ndef view_commands():\ncprint('Available Commands: start game [Begin a new game]\n look around [Inspect the current area]\n pick up [Pick something from the environment]\n check inventory [View items held]\n')\ndef view_help():\nview_commands()"}, {"file": "console.py", "path": "src/console.py", "code": "\ndef game_loop(game):\n    cmd = Cmd()\n    while True:\n        input =\ncinput.split('\n')\n        if len(icinput)\n            > 1:\n                cinput =\nccommand[0]\nlines =\n             [cmd.intro] + line\n            commands.parse_command(cinput, lines[-1])\n        else:\n            break\n            game.update_state()"}, {"file": "bash_crawl_engine.py", "path": "src/bash_crawl_engine.py", "code": "\ndef pick_item(room):\n    item =\n        room.list_items()[0]\nroom.remove_item(item)\nsession.player.add_item(item)"}, {"file": "setup.py", "path": ".setup.py", "code": "\ndef setup(app):\n    app.add_command('start game', Cmd.do_start_game)\n    app.add_command('help', Cmd.help_command)"}]}