{"3": [{"file": "settings.py", "path": "myproject/", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nclass GeneratedPassword(models.Model):\n password = models.CharField(max_length=255)\n user = models.ForeignKey(User, on_delete=models.CASCADE)\ndef __str__(self):\n return self.password\n"}, {"file": "urls.py", "path": "myproject/myapp/\n", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom .models import GeneratedPassword\nfrom password_generator.views import PasswordGeneratorView\nurlpatterns = [\n path('admin/', admin.site.urls),\n path('password/', PasswordGeneratorView.as_view(), name='password_gen'),\n]\n"}, {"file": "views.py", "path": "myproject/myapp/\n", "code": "from django.shortcuts import render\nimport string\nimport random\nimport hashlib\nndef generate_password(length=12):\n password = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\npwd = hashlib.sha256(password.encode()).hexdigest()\nreturn pwd\nndef PasswordGeneratorView(request):\n length = int(request.GET.get('length', 12))\n password = generate_password(length)\n return render(request, 'password_generator/result.html', {'password': password})\n"}, {"file": "templates/password_generator/base.html", "path": "myproject/myapp/templates/password_generator/\n", "code": "<!DOCTYPE html>\n<html lang='en'>\n <head>\n <meta charset='UTF-8'>\n <title>Password Generator</title>\n </head>\n <body>\n <nav>\n <!-- navigation bar -->\n </nav>\n <div id='content'>\n <!-- content here -->\n </div>\n </body>\n</html>"}, {"file": "templates/password_generator/result.html", "path": "myproject/myapp/templates/password_generator/\n", "code": "{% extends 'password_generator/base.html' %}\n{% block content %}\n\n <h1>Generated Password</h1>\n <p id='generated-password'>{{ password }}</p>\n <hr />\n <ul class='nav nav-bar'>{\n <li><a href='/'>Home</a></li>\n <li><a href='?length=12'>Regenerate Password (default 12 chars)</a></li>\n <li><a href='?length=8'>Regenerate Password (6 chars)</a></li>\n <li><a href='?length=16'>Regenerate Password (16 chars)</a></li>\n}\n </ul><!-- rest of the page-->\n{% endblock %}"}], "4": [{"file": "settings.py", "path": "my_project/", "code": "FROM django.contrib.messages.defaults import *\nIMPORT django_qrcode as qr\nINSTALLED_APPS = (...,\n          qr,\n          ...)\nMIDDLEWARE = [...,\n         M IddlewareClassOfQRCODEApp, \n         ...]\n"}, {"file": "urls.py", "path": "my_project/", "code": "FROM django.contrib import admin\nfrom django.urls import path, include\nfrom .qr.views import QRCodeView\nurlpatterns = [ \n    path('admin/', admin.site.urls),\n    path('qr_generator/', QRCodeView.as_view(), name='qr_generator'),\n]+\nurlpatterns + paths from other apps if any"}, {"file": "__init__.py", "path": "my_project/qr/", "code": "empty file"}, {"file": "views.py", "path": "my_project/qr/", "code": "from django.http import HttpResponse\nimport qrcode\nsvg = 'svg'\nmime = 'image/svg+xml'\ndelimiter = '\n' \ndef handle_uploaded_file(request): ... (your implementation)\ndef generate_code(qrdata, bgcolor, size): ... (your implementation)\nclass QRCodeView:\n    template_name = 'qrcode.html'\n    def get(self, request, *args, **kwargs):\n        if request.method == 'POST':\n            form = GenerateQRForm(request.POST or None)\n            if form.is_valid():\n                result = generate_code(form.cleaned_data['qrcontent'], form.cleaned_data['bgcolor'], int(form.cleaned_data['size']))\n                return HttpResponse(result, content_type=mime)\n        else:\n            form = GenerateQRForm()\nrreturn render(request, self.template_name, {'form': form})\nr def get_context_data(self, **kwargs):\n    context = super().get_context_data(**kwargs)\n    if 'form' in kwargs:\n        context['form'] = kwargs['form']\n        return context"}, {"file": "generateQR.html", "path": "my_project/templates/qrcode.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n   <head>\n      <meta charset=\"UTF-8\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>QR Code Generator</title>\n   </head>\n<body>\n   <h2>Generate QR Code</h2>\n   <form id=\"qrForm\" method=\"post\">\n       {% csrf_token %}\n       <!-- Replace my_custom_form with the form you're using -->\n       {{ form.as_form }} \n    </form>\n   </body>\n</html>"}, {"file": "forms.py", "path": "my_project/forms.py", "code": "from django import forms\ndef GenerateQRForm(self, *args, **kwargs):\n   form = self.\n   form.fields = ( \n       'qrcontent',\n       ... (other fields specific for QR code generation),\n   ) \n   return from"}], "5": [{"file": "settings.py", "path": "project_folder/mdhc_project/settings.py", "code": "from django.urls import path, include\n\nINSTALLED_APPS = [\n    'mdhcapp',\n]\n\nurlpatterns = [  # Include the app's URL patterns.\n    path('markdown-to-html/', include('mdhcapp.urls')),\n]\n"}, {"file": "urls.py", "path": "project_folder/mdhc_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n   path('admin/', admin.site.urls),\n    path('convert/', views.markdown_to_html, name='markdown_to_html'),\n]\n"}, {"file": "views.py", "path": "project_folder/mdhc_project/mdhcapp/views.py", "code": "from django.http import HttpResponse\nimport markdown, os\n\nbasedir = os.path.abspath(os.path.dirname(__file__))\nmarkdown_path = os.path.join(basedir, 'markdown-templates', 'template.md')\n\ndef markdown_to_html(request):\n    with open(markdown_path) as f:\n        raw_data = f.read()\n    rendered_data = markdown.markdown(raw_data)\n    return HttpResponse(rendered_data)"}, {"file": ".html", "path": "project_folder/mdhc_project/mdhcapp/templates/base.html", "code": "\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>MDHC</title>\n</head>\n<body>\n  <header>\n    <!-- Navigation -->\n  </header>\n  <main>\n    {% block content %}\n    {% endblock %}\n  </main>\n  <footer>\n    <!-- Footer -->\n  </footer>\n</body>\n</html>"}, {"file": "template.html", "path": "project_folder/mdhc_project/mdhcapp/templates/markdown-templates/template.md", "code": "<h1>Welcome to mdhc app!</h1>\n\nThis is a simple Markdown page.\n\n**Note:** This text will be shown as bold.\n\n```python\nprint('Hello, World!')\n```\n"}, {"file": "index.html", "path": "project_folder/mdhc_project/templates/index.html", "code": "\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>MDHC</title>\n</head>\n<body>\n  <h1>Convert Markdown to HTML</h1>\n  <form action=\"{% url 'markdown_to_html' %}\" method=\"post\">\n    <textarea name=\"md_text\" rows=\"20\"cols=\"80\"></textarea>\n    <input type=\"submit\" value=\"Convert to HTML\">\n  </form>\n</body>\n</html>"}, {"file": "forms.py", "path": "project_folder/mdhc_project/mdhcapp/forms.py", "code": "\nfrom django import forms\ndef MarkdownForm(form_class=forms.CharField):\n    md_text = form_class(widget=forms.Textarea, label=\"Markdown Text\", help_text=\"Enter your markdown text here.\")"}], "7": [{"file": "project_directory/manage.py", "path": "project_root_dir/", "code": "from django.contrib import admin\nimport os\nsite_name = 'budget_app'\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', site_name + '.settings')\n    from django.core.management import execute_from_command_line"}, {"file": "project_directory/settings.py", "path": "project_root_dir/budget_app/", "code": "import os\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'budget_app'\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backs.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n"}, {"file": "project_directory/urls.py", "path": "project_root_dir/budget_app/", "code": "from django.contrib import admin, Include\nfrom django.urls import path,\ninclude\nfrom . import views"}, {"file": "project_directory/budget_app/admin.py", "path": "project_root_dir/budget_app/", "code": "from django.contrib import admin\nadmin.site.register(Expense)"}, {"file": "project_directory/budget_app/models.py", "path": "project_root_dir/budget_app/", "code": "from django.db import models\n\nclass Expense(models.Model):\n    title = models.CharField(max_length=100)\n    amount = models.FloatField()\n    date = models.DateField()\n    category = models.CharField(max_length=50, blank=True)\n    description = models.TextField(blank=True)\n\ndefault_manager = managers.DefaultManager\nExpense.default_manager.default = staticmethod(defaults.get_expense_default(\n)"}, {"file": "project_directory/budget_app/templates/budget_app/index.html", "path": "project_root_dir/budget_app/templates/budget_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Budget App</title>\n  </head>\n\n  <body>\n    <h1 id='title'>Welcome to Budget App</h1>\n    <!-- Add your HTML here -->\n  </body>\n</html>"}, {"file": "project_directory/budget_app/templates/budget_app/base.html", "path": "project_root_dir/budget_app/templates/budget_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n      {% block head %}\n        <!-- Add your meta tags here -->\n      {% endblock %}\n  </head>\n  <body>\n      {% block body_content %}<!-- Your content goes here -->{% endblock %}\n</body>\n</html>"}, {"file": "project_directory/budget_app/templates/budget_app/expense_list.html", "path": "project_root_dir/budget_app/templates/budget_app/", "code": "{% extends 'base.html' %}\n{% block head %}\n  <title>Expenses</title>\n{% endblock %}\n\n{% block body_content %}\n  <h1>Expenses</h1>\n  <ul id='expense-list'> \n    <!-- Display expenses here -->\n  </ul>\n{% endblock %}"}, {"file": "project_directory/budget_app/templates/budget_app/chart.html", "path": "project_root_dir/budget_app/templates/budget_app/", "code": "{% extends 'base.html' %}\n{% block head %}\n  <title>Chart</title>\n  <!-- Include your charting library here -->\n{% endblock %}\n\n{% block body_content %}\n<!-- Render the chart here based on the expenses data -->\n{% endblock %}"}, {"file": "project_directory/budget_app/views.py", "path": "project_root_dir/budget_app/", "code": "from django.shortcuts import render\nfrom .models import Expense"}, {"file": "project_directory/budget_app/static/js/chart.js", "path": "project_root_dir/budget_app/static/js/", "code": "function drawChart() {\n  // Your charting logic here\n}\n// Call the function after all elements have been loaded and rendered"}], "8": [{"file": "settings.py", "path": "project/settings.py", "code": "FROM django.db import models\nFROM django.utils import timezone\n\nMODELS = {\n    'calendar': (models.CharField, ('year', 4),\n                models.CharField, ('month', 2))\n}\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backs.sqlite3',\n        'NAME': 'calenderapp'\n    }\n}\n"}, {"file": "urls.py", "path": "project/", "code": "FROM django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]\n"}, {"file": "views.py", "path": "project/app/views.py", "code": "FROM django.shortcuts import render, redirect\nfrom .models import Calendar\n\ndef calendar(request):\n    calender = Calendar.objects.all().order_by('-year', 'month')\n    return render(request, 'calender_template.html', {'calendars': calender})\ndeft add_calendar(request):\n    if request.method == 'POST':\n        year = request.POST['year']\n        month = request.POST['month']\n        Calendar.objects.create(year=year, month=month)\n        return redirect('calendar')"}, {"file": "app/urls.py", "path": "project/app/urls.py", "code": "FROM django.urls import path\nfrom .views import calendar, add_calendar\n\nurlpatterns = [\n    path('', calendar),\n    path('addcalendar/', add_calendar)\n]"}, {"file": "calenderapp/migrations/0001_initial.py", "path": "project/calenderapp/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\nnclass Migration(migrations.Migration):\n\n    dependencies = {\n        'auth': ('auth', '0009_alt_group_permission')\n    }\n\n    operations =\n    [       migrations.CreateModel(name='Calendar', fields=[         ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),         ('year', models.IntegerField()),         ('month', models.IntegerField()),     ])\n]"}, {"file": "calenderapp/admin.py", "path": "project/calenderapp/admin.py", "code": "FROM django.contrib import admin\nfrom .models import Calendar\n\nadmin.site.register(Calendar)"}, {"file": "templates/base.html", "path": "project/ templatetags/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Monthly Calendar</title>\n  </head>\n  <body>\n    <header><nav role=\"navigation\"><h1>Your App Title</h1></nav></header>\n    <!-- Here you can insert your main content -->\n  </body>\n</html>"}, {"file": "templates/calender_template.html", "path": "project/templates/calender_template.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Monthly Calendar</title>\n  </head>\n  <body>\n    {% for calender in calendars %}\n      <div class='calender-item' id='calender_{{ calender.id }}'>\n        {{calender.year}} - {{ calender.month}}\n      </div>\n    {% endfor %}\n  </body>\n</html>"}, {"file": "app/templates/forms.html", "path": "project/app/templates/forms.html", "code": "<form method='POST' action='{% url 'addcalendar' %}'>\n    {{ form.as_form }}\n    <button type=\"submit\">Add Calendar</button>\n  </form>"}, {"file": "manage.py", "path": "project/manage.py", "code": "import os\nimport sys\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(f'Could not import Django: {exc}')\n    execute_from_command_line(sys.argv)"}], "9": [{"file": "manage.py", "path": "project/", "code": "from django.core.management import execute_from_command_line\n\nif __name__ == '__main__':\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "project/", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n        'ATOMIC_REQUESTS': True,\n    }\n}\n\nINSTALLED_APPS = [\n    'django.contrib.humanize',\n    'ai_chatbot',\n]\n"}, {"file": "urls.py", "path": "project/", "code": "from django.urls import path, include\n\nurlpatterns = [ \n    path('admin/', admin.site.urls),\n    path('', include('ai_chatbot.urls')),\n]\n"}, {"file": "views.py", "path": "project/ai_chatbot/", "code": "from django.shortcuts import render\n\nfrom . import views as chatbot_views\n\napp_name = 'ai_chatbot'\n\nurlpatterns = [\n    path('', chatbot_views.index, name='home'),  # main page\n]\n"}, {"file": "forms.py", "path": "project/ai_chatbot/", "code": "from django import forms\n\nclass ChatbotForm(forms.Form):\n    user_query = forms.CharField(label='Your question')"}, {"file": "views.py", "path": "project/ai_chatbot/", "code": "from django.shortcuts import render, redirect\nimport requests\n\ndef index(request):\n    if request.method == 'POST':\n        form = ChatbotForm(request.POST)\n        if form.is_valid():\n            user_query = form.cleaned_data['user_query']\n            response = requests.post('YOUR_AI_CHATBOT_URL', json={'question': user_query}).json()\n            return render(request, 'index.html', {'answer': response['answer']}) \n    else:\n        form = ChatbotForm()\n    return render(request, 'index.html', {\"form\": form})"}, {"file": "templates/base.html", "path": "project/ai_chatbot/templates/", "code": "<!DOCTYPE html>\n<html lang='en'>\n\t<head>\n        <meta charset='UTF-8'>\n        <title>{% block title %}{{ block.super }} AI Chatbot{% endblock %}</title>\n    </head>\n    <body>\n        {% block content %}\n        {% endblock %}\n    </body>\n</html>"}, {"file": "templates/index.html", "path": "project/ai_chatbot/templates/", "code": "{% extends 'base.html' %}\n\t{% block title %}Home{% endblock %}\n\t{% block content %}\n        <div id=\"container\">\n            <div id=\"form-container\">\n                <h1>AI Chatbot</h1>\n                <!-- Use the form you defined earlier -->\n            </div>\n            <div id=\"answer-container\" style=\"display: none;\">\n                <h2>Answer:</h2>\n                <p id=\"answer\"></p>\n            </div>\n        </div>\n    {% endblock %}"}], "14": [{"file": "manage.py", "path": "myproject/", "code": "import os\nimport django\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\ndjango.setup(\n    )"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.views.urls')),\n]\n"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\n\ndef hellloword(request):\n    return render(request, 'helloword.html')"}, {"file": "helloword.html", "path": "myproject/myapp/templates/myapp/helloword.html", "code": "< HTML language=\"en\">\n < head>\n   < meta charset=\"UTF-8\" />\n   < title>Helloword Page</title>\n </head>\n < body>\n   < div id=\"content\" class=\"container\">\n      < h1 id=\"header\">Hello World!</h1>\n      <!-- Add your content here -->\n   </ div>\n </ body>\n</ HTML>"}, {"file": "__init__.py", "path": "myproject/myapp/", "code": ""}], "15": [{"file": "answer.html", "path": "myproject/templates/main_app/answer.html", "code": "```\n<!DOCTYPE html>\n<html lang='en'>{{ block.super }}<!-- Add custom css here -->\n<body class=\"custom-class\">\n  <h1>Welcome to the Home Page</h1>\n  <a href=\"/heloword/\">Go to HelloWord Page</a>\n  <!-- Add custom js here -->\n</body>\n</html>\n```"}, {"file": "urls.py", "path": "myproject/main_app/urls.py", "code": "```\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('heloword/', views.hello_word, name='hello_word'),\n]\n```"}, {"file": "views.py", "path": "myproject/main_app/views.py", "code": "```\nfrom django.shortcuts import render\n\ndef home(request):\n   return render(request, 'main_app/answer.html', {})\n\ndef hello_word(request):\n   return render(request, 'main_app/hello_word.html', {})\n```"}, {"file": "hello_word.html", "path": "myproject/templates/main_app/hello_word.html", "code": "```\n<!DOCTYPE html>\n<html lang='en'>{{ block.super }}<!-- Add custom css here -->\n<body class=\"custom-class\">\n  <h1>Hello Word</h1>\n</body>\n</html>\n```"}], "17": [{"file": "Gamedata.xlsx", "path": "path/to/Gamedata.xlsx"}, {"file": "Logistic.ipynb", "path": "path/to/Logistic.ipynb", "code": "```python\n# Load Libraries\nlibrary('sklearn')\nlibrary('pandas')\n\n# Load Data\ndata = pandas.read_excel('Gamedata.xlsx')\n\n# One-period-lag process for dependence variable\ndata['result_lag'] = data['result'].shift(1)\n\n# Separate features and target\nX = data.drop('result', axis=1)\ny = data['result'] + data['result_lag']\n\n# Split Data into Training and Testing sets\nx_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Create Logistic Regression model\nmodel = logistic.LogisticRegression()\n\n# Train model\nmodel.fit(x_train, y_train)\n\n# Summary of the model\nprint(model.summary())\nx_pred = model.predict(x_test)\n\n# Save the model to a pickle file for later use\nwith open('logistic_model.pkl', 'wb') as f:\n    pickle.dump(model, f)```"}, {"file": "Logistic.py", "path": "path/to/Logistic.py", "code": "```python\nimport pickle\n\n# Load the trained model\nlog_reg = pickle.load(open('logistic_model.pkl', 'rb'))\n\n# Function to make predictions using the loaded model\ndef logistic_predict(x):\n    return log_reg.predict(x)\n\n# Example usage\nx_example = [[...]] # Fill in the example data according to your requirements\nresult = logistic_predict(x_example)\nprint(result)```"}, {"file": "Logistic_main.cmd", "path": "path/to/Logistic_main.cmd", "code": "```batch\npython Logistic.py```"}], "18": [{"file": "game.py", "path": "bashcrawl/main/game.py", "code": "```\nimport sys, os\nclass Game:\n    def __init__(self):\n        self.player = Player()\n    class Player:\n        def __init__(self):\n            self.x = 0\n            self.y = 0\n            pass\n    def play(self, command):\n        # move player according to command and display map if needed\n        pass\np, c = open('map.txt', 'r').read().split('\n')\ngrid = [list(c) for c in p] # the game map\nfor row in grid:\n    print(row)\nn=len(grid)\nm=len(grid[0])\nwhile True:\n    cmd = input('Enter command (w, a, s, d): ').lower()\nif cmd in ['w', 'a', 's', 'd']:\n    dx, dy = [x if x == 'd' else -1 for x in [-1 if cmd == 'd' else 1, 0]]\n    nx, ny = (self.player.x + dx) % n, (self.player.y + dy) % m\n    self.player.x, self.player.y = nx, ny\nelif cmd == 'q':\n    break\nn.main()```"}, {"file": "map.txt", "path": "bashcrawl/data/map.txt", "code": "```\nlorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam...```"}, {"file": "__init__.py", "path": "bashcrawl/__init__.py", "code": "```\n# empty file to indicate this is a Python package```"}]}