{"3": [{"file": "settings.py", "path": "mysite/", "code": "from django.db import models\nfrom django.urls import path,\n    include\n\nINSTALLED_APPS = [\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    ....\n]\n\nROOT_URLCONF = 'mysite.urls'\n"}, {"file": "urls.py", "path": "mysite/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns =\n    [ \n        path('admin/', admin.site.urls),\n        path('password-generator/', include('password_generator.urls')),\n    ]"}, {"file": "views.py", "path": "password_generator/", "code": "from django.contrib import messages\nfrom random import choice, shuffle, Random\nimport string\n\ndef generate_password(request):\n    ....\n        password=\n             ''.join(choice(string.ascii_letters + string.digits) for _ in range(10))\n        shuffle(password)\n        request.session['password'] = password\n    messages.success(request, 'Password generated. Please check session for the result.')\n    return redirect('password_generator:generate')\n\nfrom django.shortcuts import render, redirect\n\nurlpatterns =\n    [ \n        path('generate/', generate_password),\n        ....\n    ]"}, {"file": "base.html", "path": "password_generator/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Password Generator</title>\n</head>\n\n<body>\n  <header>\n    <h1>Welcome to Password Generator</h1>\n  </header>\n\n  {% block content %}\n  {% endblock %}\n\n  <footer>\n    <p>&copy; 2023 Password Generator</p>\n  </footer>\n</body>\n</html>"}, {"file": "generate.html", "path": "password_generator/templates/generate.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n\n<h2>Generate Password</h2>\n\n  <form method=\"POST\">\n    {% csrf_token %}\n    <input type=\"submit\" value=\"Generate\" name=\"generate\">\n  </form>\n\n{% if 'password' in request.session %}\n<h2>Your Password is:</h2>\n<p id=\"password\" class=\"result\">{{ request.session['password'] }}</p>\n{% endif %}"}, {"file": "__init__.py", "path": "password_generator/", "code": "pass"}], "7": [{"file": "manage.py", "path": "project_folder/", "code": "from django.apps import AppConfig\nclass BudgetControlConfig(AppConfig):\n    name = 'budgetcontrol'\n\ndef instantiate_app(self):\n    return BudgetControlApp()"}, {"file": "models.py", "path": "project_folder/budgetcontrol/models.py", "code": "from django.db import models\nclass Transaction(models.Model):\n    date = models.DateField(\"Transaction Date\")\n    type = models.CharField(\"Type\", max_length=10)\n    amount = models.DecimalField(\"Amount\", max_digits=8, decimal_places=2)\n    description = models.TextField(\"Description\", blank=True)"}, {"file": "views.py", "path": "project_folder/budgetcontrol/views.py", "code": "from django.shortcuts import render, redirect\nimport datetime\nfrom .models import Transaction\n\ndef transaction_list(request):\n    now = datetime.datetime.now()\n    transactions = Transaction.objects.all().order_by('-date')\n    balance = calculate_balance(transactions)\n    context = {'transactions': transactions, 'balance': balance}\n    return render(request, 'transaction_list.html', context)"}, {"file": "forms.py", "path": "project_folder/budgetcontrol/forms.py", "code": "from django import forms\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ('date', 'type', 'amount', 'description')"}, {"file": "urls.py", "path": "project_folder/budgetcontrol/urls.py", "code": "from django.urls import path, include\nfrom . import views\nurlpatterns = [ \n         path('transactions/', views.transaction_list, name='transaction_list'),\n]"}, {"file": "url.py", "path": "project_folder/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n     path('admin/', admin.site.urls),\n     path('budgetcontrol/', include('budgetcontrol.urls')),\n]"}, {"file": "base.html", "path": "project_folder/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n   <meta charset=\"UTF-8\">\n   <title>Budget Control</title>\n</head>\n<body>\n   {% block content %}\n   {% endblock %}\n</body>\n</html>"}, {"file": "transaction_list.html", "path": "project_folder/templates/budgetcontrol/transaction_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n   <h1>Transactions</h1>\n   {% for transaction in transactions %}    \n      <div id='transaction-{{ transaction.id }}' class='transaction'>    \n         <div>{{ transaction.date }}</div>\n         <div>{{ transaction.type }}</div>\n         <div>${{ transaction.amount|floatformat:2 }}</div>\n         <div>{{ transaction.description }}\n         </div>\n      </div>    \n   {% endfor %}    \n   <h2>Balance: ${{ balance }}</h2>    \n{% endblock %}"}], "8": [{"file": "calender/apps.py", "path": "calender/", "code": "from django.app import AppConfig\nclass CalendarConfig(AppConfig):\n    name = 'calender'\n    verbose_name = 'Calendar'\n"}, {"file": "calender/models.py", "path": "calender/", "code": "from django.db import models\nclass Month(models.Model):\n    year = models.IntegerField()\n    month = models.CharField(max_length=2)\n    events = models.ManyToManyField('Event', blank=True)\n"}, {"file": "calender/admin.py", "path": "calender/", "code": "from django.contrib import admin\nfrom .models import Month, Event\nclass EventAdmin(admin.ModelAdmin):\n    list_display = ('title', 'start_date', 'end_date')\n\nclass MonthAdmin(admin.ModelAdmin):\n    list_display = ('year', 'month', 'events')\n\nadmin.site.register(Event, EventAdmin)\nadmin.site.register(Month, MonthAdmin)"}, {"file": "calender/forms.py", "path": "calender/", "code": "from django import forms\nclass CreateEventForm(forms.ModelForm):\n    title = forms.CharField()\n    start_date = forms.DateField()\n    end_date = forms.DateField()\nclass Meta:\n    model = Event\n    fields = ('title', 'start_date', 'end_date')"}, {"file": "calender/views.py", "path": "calender/", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Month, Event\nfrom .forms import CreateEventForm\ndef index(request):\n    months = Month.objects.order_by('year', 'month')\n    return render(request, 'calender/index.html', {'months': months})\ndef add_event(request):\n    if request.method == 'POST':\n        form = CreateEventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('calender:index')\n    else:\n        months = Month.objects.order_by('year', 'month')\n        return render(request, 'calender/add_event.html', {'months': months})"}, {"file": "calender/urls.py", "path": "calender/", "code": "from django.conf.urls import url\nfrom . import views\nurlpatterns = [\n    url(r'^$', views.index, name='index'),\n    url(r'^add/$', views.add_event, name='add_event')\n]"}, {"file": "calender/templates/calendar/base.html", "path": "calender/templates/calendar/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head><meta charset=\"UTF-8\" /><title>{% block title %}Calender App{% endblock %}</title>\n<!-- Add your css links here -->\n</head>\n<body>\n  <header>\n    <!-- navigation -->\n  </header>\n  <div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n  <footer>\n    <!-- footer content goes here -->\n  </footer>\n</body>\n</html>"}, {"file": "calender/templates/calendar/index.html", "path": "calender/templates/calendar/", "code": "{% extends 'base.html' %}\n{% block content %}\n  <h1>Calendar</h1>\n  <!-- The monthly calendar goes here -->\n{% endblock %}"}, {"file": "calender/templates/calendar/add_event.html", "path": "calender/templates/calendar/", "code": "{% extends 'base.html' %}\n{% block content %}\n  <h1>Add Event</h1>\n  <!-- Your form for adding events goes here -->\n{% endblock %}"}], "9": [{"file": "settings.py", "path": "project_folder/MyAIChatbot/", "code": "from django.contrib.messages.middleware import MessagingMiddleware\n\nINSTALLED_APPS = [\n        ...\n    , 'django.contrib.messages'\n]\n\nMIDDLEWARE = [\n        ...\n    , MessagingMiddleware\n]"}, {"file": "urls.py", "path": "project_folder/MyAIChatbot/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('my_ai_chatbot.urls')),\n]"}, {"file": "views.py", "path": "project_folder/MyAIChatbot/my_ai_chatbot/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'index.html')"}, {"file": "models.py", "path": "project_folder/MyAIChatbot/my_ai_chatbot/models.py", "code": "from django.db import models\nclass ChatMessage(models.Model):\n    message = models.CharField(max_length=200)\n"}, {"file": "forms.py", "path": "project_folder/MyAIChatbot/my_ai_chatbot/forms.py", "code": "from django import forms\nclass ChatForm(forms.Form):\n   message = forms.CharField(widget=forms.TextInput(attrs={'id':'message','class':'form-control'}))"}, {"file": "index.html", "path": "project_folder/MyAIChatbot/my_ai_chatbot/templates/my_ai_chatbot/index.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'>\n    <title>My AI Chatbot</title>\n  </head>\n  <body>\n    <h1>Welcome to My AI Chatbot!</h1>\n    <form id='chat_form'>\n      {% csrf_token %}\n      <div class='form-group'>\n        {{ form.as_p }}\n      </div>\n      <button type='submit'>Send</button>\n    </form>\n  </body>\n</html>"}, {"file": "__init__.py", "path": "project_folder/MyAIChatbot/my_ai_chatbot", "code": ""}, {"file": "__init__.py", "path": "project_folder/MyAIChatbot", "code": ""}], "11": [{"file": "apps/website/tests/test_project.py", "path": "websites/apps/website/tests/test_project.py", "code": "from django.urls import reverse\nfrom django.test import LiveServerTestCase, TestCase\nfrom selenium import webdriver\nimport time\n\nclass TestProject(LiveServerTestCase):   \n    # Add fixtures here if required\n  @classmethod\n  def setUpClass(cls):  \n      super().setUpClass()\n      cls.selenium = webdriver.Firefox(service_log_path='/dev/null') // Set up your browser of choice here\n    \n@staticmethod\n  def get_base_url(request):  \n      return request.build_absolute_uri(\"/\")        \n    \nclass TestHomePage(TestProject, TestCase):  \n    def setUp(self):   \n        super().setUp()\n        self.selenium.get(self.get_base_url())        \n    \n    def test_homepage_display_welcome_message(self, message_id='welcome-message'):  \n        message = self.selenium.find_element(By.ID, message_id)\n        assert message.is_displayed()               \n    \n    def test_homepage_navigation_to_generator(self, navigation_button_id='generate-link', generator_id='password-generator'):  \n        generate_link = self.selenium.find_element(By.ID, navigation_button_id)\n        assert generate_link.is_displayed()\n        generate_link.click()\n        time.sleep(1) // You might require to adjust the sleep duration\n        generator = self.selenium.find_element(By.ID, generator_id)\n        assert generator.is_displayed()               \n    \nclass TestAboutPage(TestProject, TestCase):  \n    def setUp(self):   \n        super().setUp()\n        self.selenium.get(self.get_base_url() + 'about/')      \n    \n    def test_aboutpage_navigation_from_home(self, about_link_id='about-link'):  \n        about_link = self.selenium.find_element(By.ID, about_link_id)\n        assert about_link.is_displayed()\n        about_link.click()      \n    \n    def test_aboutpage_description(self, description_id='about-page'):  \n        description = self.selenium.find_element(By.ID, description_id)\n        assert description.is_displayed()               "}, {"file": "templates/HomePage/home.html", "path": "websites/templates/HomePage/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n{% load static %}\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Project Test</title>\n{% blocked_tags 'head' %}{% endblock %}\n</head><body>\n\n  <div id=\"welcome-message\">Welcome to the Project!</div><!-- Replace the comment with relevant elements and ids -->\n  <a id=\"generate-link\" href=\"{% url 'generator' %}\">Go to Generator</a>\n<!-- Other HTML structure as required -->\n</body></html>"}, {"file": "templates/AboutPage/about.html", "path": "websites/templates/AboutPage/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n{% load static %}\n<head>\n  <meta charset=\"UTF-8\">\n  <title>About Project Test</title>\n<!-- Add meta tags here if needed -->\n{% blocked_tags 'head' %}{% endblock %}\n</head><body>\n\n  <a id=\"about-link\" href=\"{% url 'about' %}\">Go to About</a>\n  <!-- Add the structure for the about page with relevant elements and ids -->\n</body></html>"}], "14": [{"file": "settings.py", "path": "project_directory/myproject/", "code": "@\nfrom django.urls import path, include\ns\nurlpatterns = [ \n    path('helloword/', views.hello), \n]"}, {"file": "urls.py", "path": "project_directory/myproject/urls.py", "code": "@\nfrom django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [ \n    path('admin/', admin.site.urls), \n    path('', include('myapp.urls')), \n]"}, {"file": "__init__.py", "path": "project_directory/myproject/myapp/", "code": "from django.apps import AppConfig\ns\nclass AppConfig(AppConfig):\n    name = 'myapp'\n"}, {"file": "views.py", "path": "project_directory/myproject/myapp/views.py", "code": "@\nfrom django.http import HttpResponse,\ndef hello(response):\n   return HttpResponse('Helloword')"}, {"file": "templates/base.html", "path": "project_directory/myproject/templates/base.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n\t<meta charset='UTF-8'>\n\t<title>My Project</title>\n</head>\n<body>\n\t<div id='content' class='container'>\n       {% block content %}\n           {% url 'helloword' %}\n       {% endblock content %}\n    </div>\n</body>\n</html>"}, {"file": "templates/hello.html", "path": "project_directory/myproject/templates/hello.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n\t<meta charset='UTF-8'>\n\t<title>Hello Word</title>\n</head>\n<body>\n\t<h1 id='message'>Helloword</h1>\n</body>\n</html>"}], "16": [{"file": "requires/epplus-2.7.0.zip", "path": "somepath/somedir/epplus-2.7.0.zip"}, {"file": "main.vbs", "path": "somepath/somedir/main.vbs"}, {"file": "SpringSemesterSubjectsToTable.vba", "path": "somepath/somedir/SpringSemesterSubjectsToTable.vba"}, {"file": "SpringSemesterSubjects.xlsx", "path": "somepath/somedir/SpringSemesterSubjects.xlsx"}, {"file": "output_SpringSemesterSubjectsTable.xlsx", "path": "somepath/somedir/output_SpringSemesterSubjectsTable.xlsx"}, {"file": "SpringSemesterSubjectsParser.vbs", "path": "somepath/somedir/SpringSemesterSubjectsParser.vbs"}], "17": [{"file": "Gamedata.xlsx", "path": "data/Gamedata.xlsx"}, {"file": "Logistic.xlsx", "path": "results/Logistic.xlsx"}, {"file": "data_preprocessing.py", "path": "python/data_preprocessing.py", "code": "```python\nimport pandas as pd\ndef preprocess_data():\n    data = pd.read_excel('Gamedata.xlsx')\n    data['result_lag'] = data['result'].shift(1)\ndata.dropna(inplace=True)\n    return data\n\nif __name__ == '__main__':\npreprocessed_data = preprocess_data()\npreprocessed_data.to_excel('data_preprocessed.xlsx', index=False)```"}, {"file": "logistic_regression.py", "path": "python/logistic_regression.py", "code": "```python\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\ndef train_model():\n    data = pd.read_excel('data_preprocessed.xlsx')\n    X = data.drop(['result_lag'], axis=1)\n    y = data['result_lag']\n    model = LogisticRegression()\n    model.fit(X, y)\n\ndesk_summary = pd.DataFrame(model.coef_, index=X.columns, columns=['Coefficient']).transpose()\ndescriptive_stats = model.score(X, y)\n\nif __name__ == '__main__':\n    train_model()\n    with pd.ExcelWriter('Logistic.xlsx') as writer: \n        desk_summary.to_excel(writer, sheet_name='Coefficient Summary')\n        descriptive_stats_df = pd.DataFrame([descriptive_stats], columns=['Model Score'])\ndescriptive_stats_df.to_excel(writer, sheet_name='Descriptive Statistics')```"}], "18": [{"file": "crawl.py", "path": "game/crawl.py", "code": "```python\nimport os\nimport time\nfrom collections import defaultdict\nclass Game:\n    def __init__(self, grid_size):\n        self.grid = [[None for _ in range(grid_size)] for _ in range(grid_size)]\n        self.player = (0, 0)\n        self.enemies = set()\n        self.items = set()\n    def load_map(self, map_str):\n        rows = map_str.split('\n')\n        for i, row in enumerate(rows):\n            if not row:\n                continue\n            for j, char in enumerate(row):\n                if char == 'S':\n                    self.grid[i][j] = (char, (i, j))\n                elif char == 'E':\n                    self.grid[i][j] = (char, None)\n                elif char == '#':\n                    self.grid[i][j] = ('#', None)\n                if char in '.012345678':\n                    position = (i, j)\n                    if char == '2':\n                        self.items.add(position)\n                    elif char in '012345678':\n                        self.enemies.add((char, position))\n    def move_player(self, direction):\n        next_pos = (self.player[0] + direction[0], self.player[1] + direction[1])\n        if 0 <= next_pos[0] < len(self.grid) and 0 <= next_pos[1] < len(self.grid):\n            if not self.grid[next_pos[0]][next_pos[1]]:\n                self.player = next_pos\n    def get_neighbors(self, pos):\n        dirs = [(-1, 0), (1, 0), (0, -1), (0, 1)]\n        result = []\n        for dx, dy in dirs:\n            nxt_pos = (pos[0] + dx, pos[1] + dy)\n            if 0 <= nxt_pos[0] < len(self.grid) and 0 <= nxt_pos[1] < len(self.grid):\n                if self.grid[nxt_pos[0]][nxt_pos[1]]:\n                    continue\n                result.append(nxt_pos)\n        return result\n    def run(self):\n        os.system('clr' if os.name == 'nt' else 'clear')\n        grid_str = '\n'.join(\n            ''.join('#{0[1]}'.format(item) + ('.' * (len(str(index)))) for index, item in enumerate(row))\n            for row in self.grid\n        )\n        print(grid_str)\n        action = input('Enter action (U-up, D-down, L-left, R-right, Q-quit): ').upper()\n        if action == 'Q':\n            return\n        direction = {'U': (-1, 0), 'D': (1, 0), 'L': (0, -1), 'R': (0, 1)}\n        self.move_player(direction[action])\n        if self.grid[self.player[0]][self.player[1]] == 'E':\n            print('You won!')\n            return\n        neighbors = self.get_neighbors(self.player)\n        for enemy in self.enemies:\n            if (self.player[0], self.player[1]) in neighbors:\n                self.grid[self.player[0]][self.player[1]] = 'X'\n                print('Game over. Enemy got you!')\n                return\n        for item in self.items:\n            if (item[0], item[1]) == self.player:\n                self.grid[item[0]][item[1]] = None\n                self.items.remove(item)\n                print('You picked up an item!')\n        time.sleep(0.5)\n        self.run()\nif __name__ == '__main__':\n    game = Game(31)\ngame.load_map('''\n...........##S...###.########......#E..#....#############.\n....#...#S#####.....##....#...#.#....#.....#.......#...#....#....\n...#..#......#.......#......####.......#........#.....#.......\n#...#.........##########...#...#.....#.....#.#############..#....\n.......##S...#####....##....###....##.....#...#..#####....####.\n....#...#S#####.....##.......#.#........#..#.....#.......########.\n...#..#......#.......#......####.......#........#.....#.......#.\n#...#.........##########...#...#.....#.....#.#############..#....\n.......##S...#####....##....###.......#...#..#####....####.\n....#...#S#####.....##.......#.#........#..#.....#.......########.\n...#..#......#.......#......####.......#........#.....#.......#.\n#...#.........##########...#...#.....#.....#.#############..#....\n''')\ngame.run()\n```"}, {"file": "map.txt", "path": "game/map.txt"}]}