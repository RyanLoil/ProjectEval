{"1": [{"file": "project/settings.py", "path": "project/", "code": "import os\nfrom dotenv import load_dotenv\nload_dotenv()\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\nSECRET_KEY = 'your-secret-key'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n        'ATOMIC_REQUESTS': True,\n    }\n}\n"}, {"file": "project/urls.py", "path": "project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "project/myapp/models.py", "path": "project/myapp/", "code": "from django.db import models\n\nclass BMI(models.Model):\n    height = models.FloatField(verbose_name='Height')\n    weight = models.FloatField(verbose_name='Weight')\nnamed_categories = (\n    (1, 'Underweight'),\n    (2, 'Normal Weight'),\n    (3, 'Overweight'),\n    (4, 'Obese'),\n)\ncategory = models.IntegerField(choices=named_categories, default=2)def __str__(self):\n    return f'{self.height}m {self.weight}kg - Category: {self.get_category_display()}'"}, {"file": "project/myapp/forms.py", "path": "project/myapp/", "code": "from django import forms\nclass BMIForm(forms.ModelForm):\n  class Meta:\n      model = BMI\n      fields = ['height', 'weight']"}, {"file": "project/myapp/views.py", "path": "project/myapp/", "code": "from django.shortcuts import render, redirect\nimport random\nfrom .forms import BMIForm\ndef home(request):\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            bmi_obj = form.save(commit=False)\n            # Example: Generate random healthy advice and link\n            advice = f'Here are some health tips: {random.choice(HEALTH_TIPS)}\n            bmi_obj.save()\n            return redirect('bmicalculator')\n    form = BMIForm()\n    return render(request, 'home.html', {'form': form})\ndef bmicalculation(request):\ncategor = (1, 2, 3, 4)\nbmi_result = BMI.objects.latest('height')\nbmi = round((bmi_result.weight / (bmi_result.height ** 2)) * 703, 2)\ncategory = 'Normal Weight'\ncategor_choice = [(c, value) for c, value in categor]categorie = next(filter(lambda x: x[1] == round(bmi), categor_choice))category = categorie[0]\ninterpretation = f'Your BMI is {bmi}\nCategory: {category}'\nbmi_result.category = category\nbmi_result.save()\ncontext = {'interpretation': interpretation}\nreturn render(request, 'results.html', context)"}, {"file": "project/myapp/templates/home.html", "path": "project/myapp/templates/", "code": "<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'/>\n    <title>BMI Calculator</title>\n  </head>\n  <body>\n    <h1>Body Mass Index (BMI) Calculator</h1>\n    <form method='post'>{\n        {% csrf_token %}\n        {{ form.as_form }}\n    }\n    <a class='button' href='{{ redirect_url }}'>Reset Form</a>\n  </body>\n</html>"}, {"file": "project/myapp/templates/results.html", "path": "project/myapp/templates/", "code": "<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'/>\n    <title>BMI Results</title>\n  </head>\n  <body>\n    <h1>Your BMI Result:</h1>\n    <p class='result' id='result'>{% block result %}{{ interpretation }}{% endblock %}</p>\n  </body>\n</html>"}, {"file": ".env", "path": "project/", "code": "HEALTH_TIPS=Your custom health tips"}, {"file": "__init__.py", "path": "project/myapp/", "code": "pass"}], "11": [{"file": "views.py", "path": "main_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n  return render(request, 'home.html', {'welcome': 'Welcome to the website!'})\n\ndef about(request):\n  return render(request, 'about.html')\n\ndef reviewtestcode(request):\n  if request.method == 'POST':\n    submitted_status = request.POST.get('status')\n    submitted_file = request.FILES['file']\n    submitted_notes = request.POST.get('notes', '')\n  # Process the posted form data, including validating and saving to database if needed.\n  return render(request, 'reviewtestcode.html', {'status': submitted_status, 'file': submitted_file, 'notes': submitted_notes})"}, {"file": "urls.py", "path": "main_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n  path('', views.home, name='home'),\n  path('about/', views.about, name='about'),\n  path('reviewtestcode/', views.reviewtestcode, name='reviewtestcode')\n]"}, {"file": "forms.py", "path": "main_app/forms.py", "code": "from django import forms\n\nclass ReviewCodeForm(forms.Form):\n  status = forms.ChoiceField(choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')])\n  file = forms.FileField()\n  notes = forms.CharField(widget=forms.Textarea)\n"}, {"file": "templates/base_template.html", "path": "templates/base_template.html", "code": "<!DOCTYPE html>\n<html lang='en-US'>\n  <head>\n    <meta charset='UTF-8' />\n    <title>{% block title %}{% endblock %}</title>\n  </head>\n  <body>\n    <header>\n      <h1><a href='{% url 'home' %}'>{% block logo_and_slogan %}Logo and Slogan{% endblock %}</a></h1>\n    </header>\n    <nav>\n      <!-- Navigation links -->\n    </nav>\n    <main>\n      {% block content %}{% endblock %}\n    </main>\n    <footer>\n      <!-- Footer information -->\n    </footer>\n  </body>\n</html>"}, {"file": "templates/home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang='en-US'>\n<head>\n  <title>{{ title }}</title>\n</head>\n<body>\n{% extends 'base_template.html' %}\n\n{% block content %}\n  <!-- The welcome page-specific content goes here -->\n{% endblock %}"}, {"file": "templates/about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html lang='en-US'>\n<head>\n  <title>About Us</title>\n</head>\n<body>\n{% extends 'base_template.html' %}\n\n{% block content %}\n  <!-- About page-specific content goes here -->\n{% endblock %}"}, {"file": "templates/reviewtestcode.html", "path": "templates/reviewtestcode.html", "code": "<!DOCTYPE html>\n<html lang='en-US'>\n<head>\n  <title>Review Test Code</title>\n</head>\n<body>\n{% extends 'base_template.html'\n}\n\n{% block content %}\n  <!-- The user form for reviewing code goes here -->\n{% endblock %}"}, {"file": "settings.py", "path": "someapp/settings.py", "code": "REST OF THE SETTINGS FILE"}], "14": [{"file": "myproject/settings.py", "path": "myproject/", "code": "INSTALLED_APPS = [\n   'django.contrib.staticfiles',\n   \n   ...\n   \n   'yourapp', # replace with the name of your app\n]\n"}, {"file": "__init__.py", "path": "myproject/yourapp/", "code": "\n"}, {"file": "urls.py", "path": "myproject/yourapp/", "code": "from django.urls import path\nfrom yourapp.views import hello_world\n\nurlpatterns = [\n   path('', hello_world, name='hello_world'),\n]\n"}, {"file": "views.py", "path": "myproject/yourapp/", "code": "\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\ndef hello_world(request):\n   return render(request, 'hello_world.html', {'text': 'Hello World'})\n"}, {"file": "templates/base.html", "path": "myproject/yourapp/templates/", "code": "\n<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'>\n    <title>{{ title }}</title>\n  </head>\n\n  <body>\n    <div id='content' class='container'> {% block content %}{% endblock %}\n    </div>\n  </body>\n</html>\n"}, {"file": "templates/hello_world.html", "path": "myproject/yourapp/templates/", "code": "\n{% extends 'base.html' %}\n\n{% block content %}\n  <div id='hello-world' class='text-center'>{{ text }}</div>\n{% endblock %}"}, {"file": "static/css/styles.css", "path": "myproject/yourapp/static/css/", "code": "\ndiv#hello-world {\n   font-size: 48px;\n   color: #333;\n}"}], "19": [{"file": "DeathlistDataReader.cs", "path": "src/DataHandling/DeathlistDataReader.cs", "code": "#using System; \n#using System.IO;\n\npublic static class DeathlistDataReader {\n  public static void ReadDeathlistData(string filePath) {\n   // Read and process the Deathlist.csv file logic here.\n  }\n}\n"}, {"file": "DataProcessor.cs", "path": "src/DataHandling/DataProcessor.cs", "code": "#using System.Linq;\n\npublic static class DataProcessor {\n  public static void ProcessData(string[] data) {\n   // Data processing logic here.\n  }\n}\n"}, {"file": "DeathsWeekCounter.cs", "path": "src/DataHandling/DeathsWeekCounter.cs", "code": "#using System.Collections.Generic;\n\npublic static class DeathsWeekCounter {\n  public static Dictionary<int, int> CalculateWeeklyDeaths(IEnumerable<string[]> data) {\n   // Counter logic here.\n  }\n}\n"}, {"file": "HistogramGenerator.cs", "path": "src/Visuals/HistogramGenerator.cs", "code": "#using System.Drawing;\n\npublic static class HistogramGenerator {\n   public static Bitmap GenerateHistogram(Dictionary<int, int> deathsPerWeek) {\n    // Generating histogram logic here.\n   }\n}\n"}, {"file": "OutputManager.cs", "path": "src/Visuals/OutputManager.cs", "code": "#using System;\n\npublic static class OutputManager {\n  public static void OutputHistogram(Bitmap histogram) {\n   // Output histogram logic here.\n  }\n}\n"}, {"file": "DataValidator.cs", "path": "src/Validations/DataValidator.cs", "code": "#using System.Collections.Generic;\n\npublic static class DataValidator {\n  public static bool ValidateDataset(string[] data) {\n   // Validating dataset logic here.\n  }\n}\n"}, {"file": "Program.cs", "path": "src/Core/Program.cs", "code": "#using System;\n\nnamespace Project {\n  class Program {\n   static void Main(string[] args) {\n    // Validate, Read and Process the dataset, Calculate Weekly deaths,\n    // Generate Histogram and Output it.\n    var data = DataReader.ReadFile(\"Deathlist.csv\");\n    if (!DataValidator.ValidateDataset(data)) return;\n    \n    DataProcessor.ProcessData(data);\n    var weeksAndDeaths = DeathsWeekCounter.CalculateWeeklyDeaths(data);\n    \n    var histogram = HistogramGenerator.GenerateHistogram(weeksAndDeaths);\n    OutputManager.OutputHistogram(histogram);\n  }\n  }\n}\n"}, {"file": "DataReader.cs", "path": "src/Utilities/DataReader.cs", "code": "#using System;\n\npublic static class DataReader {\n  public static string[] ReadFile(string filePath) {\n   // Logic for reading data from a CSV file here.\n  }\n}\n"}, {"file": "Deathlist.csv", "path": "data/Deathlist.csv", "code": "(optional, data will be in the CSV format)"}]}