{"1": [{"file": "bmi/templates/bmi/calculator.html", "path": "bmi/templates/bmi/", "code": "{\n    {{ title }}<\n        html\n    >\n        <head>\n            <title>{{ title }}</title>\n        </head>\n        <body>\n          <h1>BMI Calculator</h1>\n          <form id='bmi-form'>\n              Height (in cm):<input type='number' id='height' class='input' /><br />\n              Weight (in kg):<input type='number' id='weight' class='input' /><br /><br />\n              <button type='submit'>Calculate BMI</button>\n          </form>\n          <div id='result'></div>\n        </body>\n      }"}, {"file": "bmi/views.py", "path": "bmi/", "code": "from django.shortcuts import render\nimport calculations as cals\ndef calculator(request):\nn    if request.method == 'POST':\nn        height = float(request.POST['height'])\n        weight = float(request.POST['weight'])\n\n        bmi_value = cals.calculate_bmi(height, weight)\n        return render(request, 'bmi/result.html', {\n            'bmi': round(bmi_value, 2),\n        })\nn    else:\n        return render(request, 'bmi/calculator.html')"}, {"file": "bmi/calculations.py", "path": "bmi/", "code": "def calculate_bmi(height, weight):\n    return weight / (height ** 2)"}, {"file": "bmi/templates/bmi/result.html", "path": "bmi/templates/bmi/", "code": "{{ title }}<\n        html\n    >\n        <body>\n          <h1>Your BMI is: {{ bmi }}</h1>\n        </body>"}, {"file": "bmi/urls.py", "path": "bmi/", "code": "from django.urls import path\nfrom . import views\ndeclare_optional = views.calculator\nurlpatterns = [\n    path('', declare_optional, name='calculator'),\n]"}, {"file": "bmi/apps.py", "path": "bmi/", "code": "default_app_config = 'bmi.apps.BmiConfig'\n"}], "3": [{"file": "settings.py", "path": "password_generator/settings.py", "code": "from django.db import models\n\nclass Password(models.Model):\n     length = models.IntegerField(default=12)\n     password = models.CharField(max_length=255)\n\n     def __str__(self):\n         return self.password[:10]+\"...\"\n\nDATABASES =\n {\n 'default': {\n     'ENGINE': 'django.db.backs.sqlite3',\n     'NAME': 'db.sqlite3'\n }\n}\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('generator/', include('password_generator.views.urls')),\n]\n"}, {"file": "password_generator/views/urls.py", "path": "password_generator/views/urls.py", "code": "from django.urls import path\n\nurlpatterns = [\n    path('', generate_password, name='generate_password'),\n]\ndef generate_password(request):\n    # implement your password generating logic here\n    return render(request, 'generator.html')"}, {"file": "password_generator/templates/base.html", "path": "password_generator/templates/base.html", "code": "<!DOCTYPE html>\n<html lang='en'><head>\n   <meta charset='UTF-8'>\n   <title>{% block title %}Password Generator{% endblock %}</title>\n</head>\n<body class='font-sans antialiased'> \n    <!-- Your navigation and content here -->\n</body></html>"}, {"file": "password_generator/templates/generator.html", "path": "password_generator/templates/generator.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n   <head>\n      <meta charset='UTF-8'>\n      <title>Password Generator</title>\n   </head>\n   <body class='bg-gray-200 font-sans antialiased'> \n       <div id='content' class='flex justify-center pt-12 pb-6 max-w-6xl mx-auto px-4 sm:px-6 lg:px-8'> \n           <!-- Your form and password display here -->\n       </div>\n   </body>\n</html>"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nsys.path.insert(0, os.path.abspath('.'))\ndjango-admin startproject password_generator"}, {"file": ".gitignore", "path": ".gitignore", "code": "*__pycache__/*\n!venv/\ndatabases/\n*env.blah"}], "4": [{"file": "settings.py", "path": "myproject/myapp/", "code": "from django.db import models\n\nclass QRCode(models.Model):\n    image = models.ImageField(upload_to='qrCodes/')\n\n    def __str__(self):\n        return self.image.name"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom . import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('generate/', views.generate_qr, name='generate'),\n    path('qr-code/<int:id>/', views.display_qr, name='display')\n]"}, {"file": "views.py", "path": "myproject/myapp/", "code": "import qrcode\nfrom djangocoresms import json\n\ndef generate_qr(request):\n    qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_H)\n    text = request.GET.get('text')\n    if not text:\n        return json.ok('Invalid input')\n    qr.add_data(text)\n    qr.make(fit=True)'\nas img = qr.make_image(fill='black', back_color='white')\n    img.save('qrCode.png')\n    qrObj, created = QRCode.objects.get_or_create(default={'image': img})\n    return json.ok({'url': qrObj.image.url}) \ndef display_qr(request, id):\n    try:\n        qrImageUrl = QRCode.objects.get(id=id).image.url\n        return render(request, 'displayQR.html', {'qrImageUrl': qrImageUrl})\n    except QRCode.DoesNotExist:\n        return json.http_error(404, 'QR Code not found')"}, {"file": "templates/displayQR.html", "path": "myproject/template/myapp/displayQR.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>QR Code</title>\n    <style>\n        #qrcode {\n            width: 250px;\n            height: 250px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"container\">\n        <img id='qrcode' src=\"{% url display qr.id %}\" alt=\"QR Code\" />\n    </div>\n</body>\n</html>"}, {"file": "templates/generateQRCodes.html", "path": "myproject/template/myapp/generateQRCodes.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Generate QR Code</title>\n</head>\n<body>\n    <h1>Generate QR Code</h1>\n    <form method='get' action='{% url generate %}'>\n        <label for='text'>Text:</label><br/>\n        <input type='text' id='text' name='text' required />\n        <button type='submit'>Generate</button>\n    </form>\n</body>\n</html>"}, {"file": ".gitignore", "path": "myproject/", "code": "myproject/\n__pycache__/\nvenv/\nmigrations/\ndist/\n*"}], "13": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    birthday = models.DateField('\n    age = models.PositiveIntegerField()\n    sex = models.CharField(max_length=6)\n    company = models.CharField(max_length=100)\n    phone_number = models.CharField(max_length=20)\n    preferred_products = models.ManyToManyField('Product', blank=True)\n    purchase_records = models.ManyToManyField('PurchaseRecord', blank=True)\n\nclass Product(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    category = models.CharField(max_length=50)\n    recommended_price = models.FloatField()\n\nclass PurchaseRecord(models.Model):\n    id = models.AutoField(primary_key=True)\n    datetime = models.DateTimeField('date created', auto_now_add=True)\n    product = models.ForeignKey('Product', on_delete=models.CASCADE)\n    customer = models.ForeignKey('Customer', on_delete=models.CASCADE)\n    quantity = models.PositiveIntegerField()\n    amount = models.FloatField()"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nclass CustomerAdmin(admin.ModelAdmin):\n    list_display = ('id', 'name', 'company', 'phone_number')\n admin.site.register(Customer, CustomerAdmin)\n\nclass ProductAdmin(admin.ModelAdmin):\n    list_display = ('id', 'name', 'category', 'recommended_price')\n admin.site.register(Product, ProductAdmin)\n\nclass PurchaseRecordAdmin(admin.ModelAdmin):\n    list_display = ('id', 'datetime', 'product', 'customer', 'quantity', 'amount')\n admin.site.register(PurchaseRecord, PurchaseRecordAdmin)"}, {"file": "forms.py", "path": "myapp/forms.py", "code": ""}, {"file": "views.py", "path": "myapp/views.py", "code": ""}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('customers/', views.customer_list, name='customer-list'),\n    path('customers/<int:pk>/', views.customer_detail, name='customer-detail'),\n    path('products/', views.product_list, name='product-list'),\n    path('products/<int:pk>/', views.product_detail, name='product-detail'),\n    path('purchases/', views.purchase_list, name='purchase-list'),\n]\n"}, {"file": "myapp/templates/base.html", "path": "myapp/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>CRM</title>\n</head>\n<body>\n  <header class=\"header\" role=\"banner\">\n    /* Header content and navigation */\n  </header>\n  <main role=\"main\">\n    <!-- Main content -->\n  </main>\n</body>\n</html>"}, {"file": "myapp/templates/customer_list.html", "path": "myapp/templates/customer_list.html", "code": ""}, {"file": "myapp/templates/customer_detail.html", "path": "myapp/templates/customer_detail.html", "code": ""}, {"file": "myapp/templates/product_list.html", "path": "myapp/templates/product_list.html", "code": ""}, {"file": "myapp/templates/product_detail.html", "path": "myapp/templates/product_detail.html", "code": ""}, {"file": "myapp/templates/purchase_list.html", "path": "myapp/templates/purchase_list.html", "code": ""}], "14": [{"file": "manage.py", "path": "somepath/somedir/manage.py", "code": "from django.contrib import admin\nimport os\nsite_packages = os.getcwd() + '/venv/lib/python3.8/site-packages'\nsys.path.append(site_packages)\n\nimport django\ndjango.setup()\n\nfrom helloword.models import HelloWorldModel\n\nexec(open('commands.py').read())"}, {"file": "commands.py", "path": "somepath/somedir/commands.py", "code": "from helloword.tasks import create_initial_data\ncreate_initial_data()"}, {"file": "helloword/settings.py", "path": "somepath/somedir/helloword/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'helloword' # Your app directory name\n]\n"}, {"file": "helloword/urls.py", "path": "somepath/somedir/helloword/urls.py", "code": "from django.contrib import admin, urls\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', helloword.views.hello_word), # Your view function name with correct imported module\n]\nsite.register_view(urlpatterns)"}, {"file": "helloword/views.py", "path": "somepath/somedir/helloword/views.py", "code": "from django.http import HttpResponse\nfrom django.template.loader import get_template\n\ndef hello_word(request):\n    template = get_template('hello-world.html')\n    html = template.render()\n    return HttpResponse(html)"}, {"file": "helloword/templates/base.html", "path": "somepath/somedir/helloword/templates/base.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n\t<meta charset='UTF-8'/>\n  <title>Helloword</title>\n</head>\n<body>\n\t{% block content %}\n    {% endblock %}\n</body>\n</html>"}, {"file": "helloword/templates/hello-world.html", "path": "somepath/somedir/helloword/templates/hello-world.html", "code": "{% extends 'base.html' %}\n{\n\t% block content %}\n    <h1 id='title'>Hello World</h1>\n  {% endblock %}"}, {"file": "helloword/models.py", "path": "somepath/somedir/helloword/models.py", "code": "from django.db import models\nclass HelloWorldModel(models.Model):\n    object_id = models.AutoField(primary_key=True)\n    greeting_text = models.CharField(max_length=100, default='Hello World!')"}, {"file": "helloword/tasks.py", "path": "somepath/somedir/helloword/tasks.py", "code": "from celery import shared_task\nimport datetime\n@shared_task\ndef create_initial_data():\n\tHelloWorldModel.objects.create(greeting_text='Hello World!')"}], "17": [{"file": "Gamedata.xlsx", "path": "data/Gamedata.xlsx"}, {"file": "Logistic.ipynb", "path": "notebooks/Logistic.ipynb", "code": "```python\n# Load dataset\nimport pandas as pd\n\ndata = pd.read_excel('Gamedata.xlsx')\n\n# Preprocess data\ndata['lag_result'] = data['result'].shift(1)\n\n# Drop NaN values\ndata.dropna(inplace=True)\n\n# Split the data into Training and Testing sets\nfrom sklearn.model_selection import train_test_split\nX = data.drop(['result', 'lag_result'], axis=1)\ny, y = data['result'], data['lag_result']\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n# Build and fit the Logistic Regression Model\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X_train, y_train)\n\n# Evaluate the model\nmse = mean_squared_error(y_test, model.predict(X_test))\nacc = accuracy_score(y_test, (model.predict(X_test) > 0.5).astype(int))\n\n# Output the summary as excel file\ndata['predicted'] = model.predict(X)\ndata[['result', 'lag_result', 'predicted']].mean().reset_index().to_excel('Logistic.xlsx', index=False)\n```"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nsckit-learn\n"}]}