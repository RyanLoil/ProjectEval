{"3": [{"file": "settings.py", "path": "main_app/settings.py", "code": "FROM django.db import models\n\nclass Password(models.Model):\n    length = models.IntegerField(default=10)\n    password = models.CharField(max_length=255)\n\ns from main_app.models import Password\nfrom django.contrib.auth.decorators import login_required"}, {"file": "urls.py", "path": "main_app/urls.py", "code": "FROM django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('password/', include('main_app.urls')),\n]\n"}, {"file": "password/views.py", "path": "password_app/views.py", "code": "FROM django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Password\n\n@login_required\ndef password_generator(request):\n    # Implementing the password generator logic here\n    password = generate_password()\n    password_object = Password(length=len(password), password=password)\n    password_object.save()\n    return render(request, 'password_result.html', {'password': password})"}, {"file": "passwords/templates/password_result.html", "path": "password_app/templates/passwords/password_result.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Generated Password</title>\n  </head>\n  <body>\n\n    <div id='container' class='container text-center'>\n      <h1 class='text-primary'>Your generated password is:</h1>\n      <p class='display-4' id='password_output'></p>\n      <a href='/' class='btn btn-secondary mt-3'>Generate New Password</a>\n    </div>\n  </body>\n</html>"}], "9": [{"file": "settings.py", "path": "project_directory/myaiChatbot/", "code": "from django.db import models\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\nINSTALLED_APPS = [\n    'myaiChatbot'\n]\n"}, {"file": "urls.py", "path": "project_directory/myaiChatbot/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myaiChatbot.urls')),\n]\n"}, {"file": "views.py", "path": "project_directory/myaiChatbot/views.py", "code": "from django.http import HttpResponse\n\ndef index(request):\n    return HttpResponse('Welcome to My Ai Chatbot!')\n"}, {"file": "templates/base.html", "path": "project_directory/myaiChatbot/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>My Ai Chatbot</title>\n</head>\n<body>\n   <div id=\"container\">\n       <!-- Other HTML elements -->\n   </div>\n</body>\n</html>"}, {"file": "templates/index.html", "path": "project_directory/myaiChatbot/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>My Ai Chatbot</title>\n</head>\n<body>\n   <div id=\"content\" class=\"container\">\n      <!-- Content for the chatbot introduction goes here -->\n   </div>\n</body>\n</html>"}, {"file": "templates/index.html", "path": "project_directory/myaiChatbot/templates/index.html", "code": "...\n   <script src=\"{% url 'static' %}/js/chatbot-intro.js\"></script>\n</body>\n</html>"}, {"file": "static/js/chatbot-intro.js", "path": "project_directory/myaiChatbot/static/js/chatbot-intro.js", "code": "// JavaScipt for the chatbot intro goes here"}], "11": [{"file": "project/tests.py", "path": "project/", "code": "from selenium import webdriver\nimport unittest\n\nclass TestProject(unittest.TestCase):\r\n    def setUp(self):\r\n        self.driver = webdriver.Chrome()\n    \n    def tearDown(self):\r\n        self.driver.quit()\n    \n    # home page tests\n    def test_homepage_welcome_message(self, url, welcome_message_id):\n        self.driver.get(url)\n        self.assertIsDisplayed(self.driver, welcome_message_id)\n    \n    def test_navigation_button(self, url, navigation_button_id, generator_id):\n        self.driver.get(url)\n        navigation_button = self.driver.find_element(By.ID, navigation_button_id)\n        navigation_button.click()\n        time.sleep(1)\n        generator = self.driver.find_element(By.ID, generator_id)\n        self.assertIsDisplayed(self.driver, generator_id)\n    \n    def test_about_link(self, test_url, about_link_id):\n        self.driver.get(test_url)\n        about_link = self.driver.find_element(By.ID, about_link_id)\n        about_link.click()\n    \n    def assertIsDisplayed(self, driver, element_id):\n        element = driver.find_element(By.ID, element_id)\n        assert element.is_displayed(), f'Element {element_id} not displayed.'\n"}, {"file": "templates/base.html", "path": "project/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}{% endblock %}</title>\n    {% block head %}\n    {% endblock %}\n  </head>\n  <body>\n    <div id=\"container\">\n      <nav>\n        <a href=\"{% url 'about' %}\" id=\"about_link\">About Us</a>\n      </nav>\n\n      {% block content %}\n      {% endblock %}\n    </div>\n  </body>\n</html>"}, {"file": "templates/home.html", "path": "project/templates/", "code": "{% extends 'base.html' %}\n{% block title %}Home{% endblock %}\n\n{% block content %}\n  <h1 id=\"welcome_message\">Welcome to our Website</h1>\n  <button id=\"navigation_button\">Generate Password</button>{% endblock %}"}], "13": [{"file": "models.py", "path": "appname/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=255)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10)\n    company = models.CharField(max_length=255)\n    phone = models.CharField(max_length=20)\n    preferred_products = models.ManyToManyField('Product', blank=True)\n    purchase_records = models.ManyToManyField('PurchaseRecord', blank=True)\n\nclass Product(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=100)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\nclass PurchaseRecord(models.Model):\n    id = models.AutoField(primary_key=True)\n    datetime = models.DateTimeField()\n    product = models.ForeignKey('Product', on_delete=models.CASCADE)\n    customer = models.ForeignKey('Customer', on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)"}, {"file": "admin.py", "path": "appname/admin.py", "code": "from django.contrib import admin\n\nfrom .models import Customer, Product, PurchaseRecord\n\nclass CustomerAdmin(admin.ModelAdmin):\n   ... # customize admin panel here \n\nclass ProductAdmin(admin.ModelAdmin):\n   ... # customize admin panel here \n\nclass PurchaseRecordAdmin(admin.ModelAdmin):\n   ... # customize admin panel here \n\nadmin.site.register(Customer, CustomerAdmin)\nadmin.site.register(Product, ProductAdmin)\nadmin.site.register(PurchaseRecord, PurchaseRecordAdmin)"}, {"file": "forms.py", "path": "appname/forms.py", "code": "from django import forms\n\nclass CustomerForm(forms.ModelForm):\n   ... # create form here for adding customers\n\nclass ProductForm(forms.ModelForm):\n   ... # create form here for adding products\n\nclass EditCustomerForm(CustomerForm):\n    ... # create form here to edit customer details\n\nclass EditProductForm(ProductForm):\n    ... # create form here to edit product details"}, {"file": "views.py", "path": "appname/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Customer, Product, PurchaseRecord, ... # import any other models\nfrom .forms import CustomerForm, ProductForm, EditCustomerForm, EditProductForm\n   ... # create views for each page"}, {"file": "urls.py", "path": "appname/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [   path('customers', views.customer_list, name='customer_list'),   path('customers/new', views.add_customer, name='add_customer'),   path('customers/<int:pk>/edit', views.edit_customer, name='edit_customer'),   path('products', ... ), # the same for products path('purchase-records', ... ) # the same for purchase records]"}, {"file": "templates/customer_list.html", "path": "appname/templates/customer_list.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <title>Customers</title>\n</head>\n<body>\n   ... # layout for the page\n   {% for customer in customers %}\n      <div id='customer-{{ customer.id }}' class='customer'>               Name: {{ customer.name }}            Age: {{ customer.age }}            Sex: {{ customer.sex }}            Company: {{ customer.company }}\n         ... # show other customer details\n          <!-- Links to edit and delete customers -->             {% endfor %}\n</body>\n</html>"}, {"file": "templates/partials/customer_edit.html", "path": "appname/templates/partials/customer_edit.html", "code": "<!DOCTYPE html>\n<head>\n   <link rel='stylesheet' href='{{ MEDIA_URL }}styles.css'>\n</head>\n<body>\n\n   ... # form for adding or editing customers\n\n</body>\n"}], "15": [{"file": "project_structure.txt", "path": "DjangoProject/", "code": "myproject/\n\tmanage.py\n\tsite-packages/\n\tvenv/\n\napps/\n\t\tapp1/\n\t\t\tmigrations/\n\t\t\tstatic/\n\t\t\tplaceholders/\n\nmyproject/\n\tsql_metadata.py\n"}, {"file": "settings.py", "path": "DjangoProject/myproject/", "code": "from django.contrib import admin\n\nimport os\nimport django_heroku\n\n# Build paths\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings\nSECRET_KEY = 'REDACTED'\n\nDEBUG = False\nALLOWED_HOSTS = ['localhost', 'myprojectname.herokuapp.com']\n\n# Application definition\nINSTALLED_APPS =\n[\n'django.contrib.admin',\n'django.urls',\n'app1',\n]\ndjango_heroku.settings(locals())"}, {"file": "urls.py", "path": "DjangoProject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n\tpath('admin/', admin.site.urls),\n\tpath('helloword/', include('app1.urls')),\n]"}, {"file": "views.py", "path": "DjangoProject/app1/", "code": "from django.shortcuts import render\n\ndef home(request):\n\treturn render(request, 'home.html')"}, {"file": "templates/base.html", "path": "DjangoProject/app1/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>My Project</title>\n</head>\n<body>\n\t<div id=\"content\" class=\"container\">\n\t\t{% block content %}\n\t\t{% endblock %}\n\t</div>\n</body>\n</html>"}, {"file": "templates/app1/home.html", "path": "DjangoProject/app1/templates/app1/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Hello World</title>\n</head>\n<body>\n\t<h1 id=\"hello-word\" class=\"text-center\">Hello, World!</h1>\n\t<a href=\"{% url 'home' %}\" class=\"btn btn-primary\">Go back</a>\n</body>\n</html>"}], "16": [{"file": "SpringSemesterSubjectsReader.vb", "path": "C:/Projects/ExcelToTableBatch/Code/SpringSemesterSubjectsReader.vb", "code": "Imports Microsoft.Office.Interop.Excel\nDim app As New Excel.Application\nDim wb As New Excel.Workbook\nDim ws As Worksheet\nDim iRow As Integer = 1\nws = wb.ActiveSheet\nws.Cells(iRow, 1).Copy Destination:=ws.Range(ws.Cells(iRow, 4), ws.Cells(iRow, 4))\nSubjectsTable(iRow - 1) = New List(Of String)(ws.Cells(iRow, 2), ws.Cells(iRow, 3), ws.Cells(iRow, 6).Value)\nws.UsedRange.Rows.Count = iRow + 1\nwb.Close()\napp.Quit()"}, {"file": "SpringSemesterSubjectsWriter.vb", "path": "C:/Projects/ExcelToTableBatch/Code/SpringSemesterSubjectsWriter.vb", "code": "Imports Microsoft.Office.Interop.Excel\nDim app As New Excel.Application\nDim wb As New Excel.Workbook\nDim ws As Worksheet\nDim iRow As Integer = 1\nws = wb.ActiveSheet\nFor Each subject In SubjectsTable\n ws.Cells(iRow, 1) = iRow\nws.Cells(iRow, 2) = subject(1)\nws.Cells(iRow, 3) = subject(2)\nws.Cells(iRow, 4)= \"First period\" 'Replace this with appropriate value based on subject(3)\nws.Range(ws.Cells(iRow, 5), ws.Cells(iRow, 5)).Insert CopyOrigin:=xlFormatFromRange, Reference:=ws.Cells(1, 5).EntireColumn\n ws.Columns(1).AutoFit()\niRow += 1\nNext subject"}, {"file": "Subject.vb", "path": "C:/Projects/ExcelToTableBatch/Code/Subject.vb", "code": "Imports System.Collections.Generic\nPublic Class Subject\n    Public Name As String\n    Public Weekday As String\n    Public Time As String\nEnd Class"}, {"file": "Program.vb", "path": "C:/Projects/ExcelToTableBatch/Code/Program.vb", "code": "Imports System.Collections.Generic\nModule Program\nPublic SubjectsTable As New List(Of SpringSemesterSubjectsReader.Subject)\nSub Main()\n   Dim reader As New SpringSemesterSubjectsReader.SpringSemesterSubjectsReader\n SubjectsTable = reader.ReadFile(\"C:/Projects/ExcelToTableBatch/Files/Spring Semester Subjects.xlsx\")\nDim writer As New SpringSemesterSubjectsWriter.SpringSemesterSubjectsWriter\nwriter.WriteFile(\"C:/Projects/ExcelToTableBatch/Files/Output.xlsx\", SubjectsTable)\nEnd Sub\nEnd Module"}, {"file": "SpringSemesterSubjectsReader.vb", "path": "C:/Projects/ExcelToTableBatch/Classes/SpringSemesterSubjectsReader.vb", "code": "Imports Microsoft.Office.Interop.Excel\nPublic Class SpringSemesterSubjectsReader\n Public Function ReadFile(ByVal filePath As String) As List(Of Subject)\n   Dim subjectTable As New List(Of Subject )\n   ' Insert the code to read excel and initialize the subject table here\n   Return subjectTable\nEnd Function\nEnd Class"}, {"file": "SpringSemesterSubjectsWriter.vb", "path": "C:/Projects/ExcelToTableBatch/Classes/SpringSemesterSubjectsWriter.vb", "code": "Imports Microsoft.Office.Interop.Excel\nPublic Class SpringSemesterSubjectsWriter\n Public Function WriteFile(ByVal filePath As String, ByVal subjectList As List(Of Subject)) As String\n   ' Insert the code to write excel file with given subject list here\n   Return filePath\nEnd Function\nEnd Class"}], "18": [{"file": "main.py", "path": "game/", "code": "```python\nimport sys, os\nclass Game:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n        self.grid = [['.' for _ in range(width)] for _ in range(height)]\n        self.player = (0, 0)\n    def display_grid(self):\n        os.system('clear')\n        for row in self.grid:\n            print(*row)\n    def move_player(self, dx, dy):\n        if self.is_valid_move((self.player[0] + dx, self.player[1] + dy)):\n            self.player = (self.player[0] + dx, self.player[1] + dy)\n    def is_valid_move(self, pos)\n        return 0 <= pos[0] < self.width and 0 <= pos[1] < self.height and self.grid[pos[1]][pos[0]] == '.'\ngame = Game(25, 10)\ngame.display_grid()\nexit = False\nwhile not exit:\n    x, y = map(int, input('Enter X and Y: ').split())\n    game.move_player(x, y)\ngame.display_grid() \n```"}, {"file": "input_handler.py", "path": "game/", "code": "```python\nclass InputHandler:\n    @classmethod\ndef get_move(self):\n        x, y = map(int, input('Enter X and Y: ').split())\n        return (x - 1, y - 1)\n```"}, {"file": "__init__.py", "path": "game/", "code": "from .main import Game\nfrom .input_handler import InputHandler"}, {"file": "map.txt", "path": "assets/", "code": "... # Your map generated randomly or designed manually here ..."}], "20": [{"file": "settings.py", "path": "myproject/settings.py", "code": "FROM django.db import models\n\n# Application defined here\nINSTALLED_APPS = [\n\t'blog',\n]\n\nDATABASES = {\n\t'default': {\n\t\t'ENGINE': 'django.db.backends.sqlite3',\n\t\t'NAME': BASE_DIR / 'db.sqlite3',\n\t}\n}\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "FROM django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n\tpath('admin/', admin.site.urls),\n\tpath('', include('blog.urls')),\n]\n"}, {"file": "wags_views.py", "path": "myproject/blog/views.py", "code": "FROM django.shortcuts import render\nfrom .models import Post\n\n\ndef home(request):\n\tposts = Post.objects.all().order_by('-publish_date')\n\tcontext = {'posts': posts}\n\treturn render(request, 'blog/home.html', context)\n"}, {"file": "__init__.py", "path": "myproject/blog", "code": ""}, {"file": "models.py", "path": "myproject/blog/models.py", "code": "FROM django.db import models\n\nclass Post(models.Model):\n\ttitle = models.CharField(max_length=200)\n\tsummary = models.TextField(max_length=300, null=True, blank=True)\n\tcontent = models.TextField()\n\tslug = models.SlugField(unique_for_date='publish_date')\n\tpublished_at = models.DateTimeField(auto_now_add=True)\n\tupdated_at = models.DateTimeField(auto_now=True)\n\tis_draft = models.BooleanField(default=False)\n\timage = models.ImageField(blank=True, null=True, upload_to='images/')\n"}, {"file": "forms.py", "path": "myproject/blog/forms.py", "code": "FROM django import forms\nfrom .models import Post\n\nclass PostForm(forms.ModelForm):\n\tclass Meta:\n\t\tmodel = Post\n\t\tfields = ('title', 'summary', 'content', 'slug', 'is_draft',)\n"}, {"file": "templates/base.html", "path": "myproject/blog/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t{% load static %}\n\t<meta charset=\"UTF-8\">\n\t<title>{% block title %}Blog{{ block.super }}</title>\n\t{% block css %}{% endblock %}\n</head>\n<body>\n\t<header>\n\t\tHeading\n\t</header>\n\t<nav>\n\t\tNavigation\n\t</nav>\n\t<main class='content'>\n\t\t{% block content %}\n\t\t{% endblock %}\n\t</main>\n\t<footer>\n\t\tFooter\n\t</footer>\n</body>\n</html>"}, {"file": "templates/blog/home.html", "path": "myproject/blog/templates/blog/home.html", "code": "{% extends 'base.html' %}\n\n{% block title %}Home | Blog{% endblock %}\n\n{% block css %}\n{% endblock %}\n\n{% block content %}\n\t{% for post in posts %}\n\t\t<article>\n\t\t\t<h1>{{ post.title }}</h1>\n\t\t\t<p class='summary'>{{ post.summary }}</p>\n\t\t</article>\n\t{% endfor %}\n{% endblock %}"}, {"file": "__init__.py", "path": "myproject/blog/templates", "code": ""}]}