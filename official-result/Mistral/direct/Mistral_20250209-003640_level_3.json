{"1": [{"file": "manage.py", "path": "project_dir/manage.py", "code": "from django.core.management import execute_from_command_line\nexecute_from_command_line(sys.argv)"}, {"file": "asgi.py", "path": "project_dir/asgi.py", "code": "import os\nimport django\n\nsys.path.append(os.path.dirname(__file__))\ndjango.setup()\nfrom channels.routing import ProtocolTypeRouter, URLRouter\nfrom channels.auth import AuthMiddlewareStack\nfrom example_app.routing import chat_router\n\napplication = ProtocolTypeRouter(\n    {\n        'http':get_asgi_application(),\n       'channel':AuthMiddlewareStack(url_router),\n    }\n)\n\nasgi_application = application"}, {"file": "routing.py", "path": "project_dir/example_app/routing.py", "code": "from channels.routers import Route,\n     DefaultConsumerRouter\n\nchat_router = DefaultConsumerRouter(\n   routes=[Route('{channel_name}', ChatConsumer, methods=['websocket']),\n ])"}, {"file": "views.py", "path": "project_dir/example_app/views.py", "code": "from rest_framework import viewsets\nfrom .models import MessageModel\n\nclass MessageViewSet(viewsets.ModelViewSet):\n serializer_class = MessageSerializer\nqueryset = MessageModel.objects.all()"}, {"file": "serializers.py", "path": "project_dir/example_app/serializers.py", "code": "from rest_framework import serializers\nfrom .models import MessageModel\n\nclass MessageSerializer(serializers.ModelSerializer):\n model = MessageModel\nfields = 'id', 'user','text','timestamp'"}, {"file": "models.py", "path": "project_dir/example_app/models.py", "code": "from django.db import models\n\nclass MessageModel(models.Model):\n user = models.CharField('user', max_length=100)\ntext = models.TextField('message text')\ntimestamp = models.DateTimeField(auto_now_add=True)"}, {"file": "urls.py", "path": "project_dir/example_app/urls.py", "code": "from django.urls import path,\n     include\nfrom rest_framework.routers import DefaultRouter\nfrom .views import MessageViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'messages', MessageViewSet)\nurlpatterns = [path('api/',router.urls)]"}, {"file": "app_init.py", "path": "project_dir/example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "project_dir/__init__.py", "code": ""}, {"file": "settings.py", "path": "project_dir/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'channels',\n    'rest_framework',\n    'example_app',\n]\n\nMIDDLEWARE = [\n   'django.middleware.security.SecurityMiddleware',\n   'whitenoise.middleware.WhiteNoiseMiddleware',\n  ]\n\nROOT_URLCONF = 'project_dir.urls'"}, {"file": "asgi_redis.py", "path": "venv/lib/python3.6/site-packages/channels/consumer/asgi_redis.py"}, {"file": "routing.py", "path": "venv/lib/python3.6/site-packages/channels/routing.py"}, {"file": "urls.py", "path": "venv/lib/python3.6/site-packages/rest_framework/routers.py"}], "7": [{"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass UserCreationForm(forms.ModelForm):\n  email = forms.EmailField(required=True)\n  username = forms.CharField(required=True, min_length=5)\n  password1 = forms.CharField(widget=forms.PasswordInput(), required=True)\n  password2 = forms.CharField(widget=forms.PasswordInput(), required=True)\n\nclass Meta:\n  model = User\n  fields = ('email', 'username', 'password1', 'password2')"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth import get_user_model\nfrom .forms import UserCreationForm\n\ndef signup(request):\n  if request.method == 'POST':\n    form = UserCreationForm(request.POST)\n    if form.is_valid():\n      user = form.save()\n      return redirect('login')\n  else:\n    form = UserCreationForm()\n  return render(request, 'signup.html', {'form': form})"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n  path('signup/', views.signup, name='signup'),\n]\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up</title>\n  </head>\n  <body>\n    <form method=\"POST\" action=\"{% url 'signup' %}\">{\n      {% csrf_token %}\n      {{ form.as_table }}\n    </form>\n  </body>\n</html>"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "8": [{"file": "manage.py", "path": "yourprojectdir/manage.py", "code": "from django.core.management import execute_from_command_line\nexecute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "yourprojectdir/yourappfolder/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\nSECRET_KEY = 'YOUR-SECRET-KEY'\n\nINSTALLED_APPS = [\n  'django.contrib.admin',\n  'django.contrib.auth',\n  'django.contrib.contenttypes',\n  'django.contrib.sessions',\n  'django.contrib.messages',\n  'django.contrib.staticfiles',\n  # Add your APPName here\n]\n\nMIDDLEWARE = [\n  'django.middleware.security.SecurityMiddleware',\n  'django.contrib.sessions.middleware.SessionMiddleware',\n  'django.middleware.common.CommonMiddleware',\n  'django.middleware.csrf.CsrfViewMiddleware',\n  'django.contrib.auth.middleware.AuthenticationMiddleware',\n  'django.contrib.messages.middleware.MessageMiddleware',\n  'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'yourappfolder.urls'\n\nTEMPLATES = [\n {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n    'DIRS': [os.path.join(BASE_DIR, 'templates')],\n    'APP_DIRS': True,\n    'OPTIONS': {\n        'context_processors': [\n            'django.template.context_processors.debug',\n            'django.template.context_processors.request',\n            'django.contrib.auth.context_processors.auth',\n            'django.contrib.messages.context_processors.messages',\n        ],\n    },\n }\n]\n"}, {"file": "urls.py", "path": "yourprojectdir/yourappfolder/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "views.py", "path": "yourprojectdir/yourappfolder/views.py", "code": "\nfrom django.shortcuts import render\nimport your_custom_module# replace with the appropriate imports\n\ndef homepage(request):\n    return render(request, 'your_template_name.html') # modify template_name as per your requirement\n\n# Include other views as needed"}, {"file": "templates/base.html", "path": "yourprojectdir/templates/base.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n  <meta charset='UTF-8'>\n  <title>Your Project Title</title>\n  {% load static %}\n  <link rel='shortcut icon' href='{% static 'youriconhere.ico' %}'>\n  <link rel='stylesheet' href='{% static 'css/styles.css' %}'>\n</head>\n<body>\n  <header id=\"app-header\">\n    <!-- Add appropriate HTML based on your design -->\n  </header>\n  <main id=\"content\">\n    {% if messages %}\n      {% for message in messages %}\n        {{ message|escape }}</p>\n      {% endfor %}\n    {% endif %}\n    <!-- Add rest of the HTML based on your design -->\n  </main>\n  <footer id=\"app-footer\">\n    <!-- Add appropriate HTML based on your design -->\n  </footer>\n</body>\n</html>"}, {"file": "templates/your_template_name.html", "path": "yourprojectdir/templates/your_template_name.html", "code": "<!DOCTYPE html>{}<html lang='en'>\n<head>\n  <meta charset='UTF-8'>\n  <title>Your Template Title</title>\n  {% load static %}\n  <!-- Add appropriate scripts or styles if needed -->\n</head>\n<body>\n  <!-- Add appropriate content for your template -->\n</body>\n</html>"}], "9": [{"file": "answer.views.py", "path": "your_project_dir/example_app/views.py", "code": "from django.shortcuts import render\nfrom .models import YourModel\ndef home(request):\n    context = {'object_list': YourModel.objects.all()}\n    return render(request, 'index.html', context)\n"}, {"file": "answer.urls.py", "path": "your_project_dir/example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [ \n    path('', views.home, name='home'),\n]\n"}, {"file": "answer.models.py", "path": "your_project_dir/example_app/models.py", "code": "from django.db import models\nclass YourModel(models.Model):\n    field1 = models.CharField(max_length=255)\n"}, {"file": "index.html", "path": "your_project_dir/templates/example_app/index.html", "code": "{\n   <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Your App</title>\n</head>\n<body>\n  <!-- Add an id for navigation -->\n  <nav id=\"navigation\">\n    <!-- navigation elements here -->\n  </nav>\n  <!-- Add main content area -->\n  <main id=\"content-area\">\n    <!-- Your dynamic content here using the {{ object_list }} template variable -->\n  </main>\n</body>\n</html>\n"}, {"file": "base.html", "path": "your_project_dir/templates/base.html", "code": "{\n   <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <!-- Add your site title here -->\n  <title>Site Title</title>\n</head>\n<body>\n  <header>\n    <!-- Header elements here -->\n  </header>\n  <nav id=\"navigation\">\n    <!-- Navigation elements here -->\n  </nav>\n  <main id=\"content-area\">\n    {% block content %}\n    {% endblock %}\n  </main>\n  <footer>\n    <!-- Footer elements here -->\n  </footer>\n  <script src=\"{{ STATIC_URL }}your_javascript.js\"></script>\n</body>\n</html>\n"}], "11": [{"file": "settings.py", "path": "project/settings.py", "code": "<code>\n# Black and Django specific settings\nimport os\nfrom datetime import timedelta\n\n# Build paths inside the project folder\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - suitable for local use, not for production\nSECRET_KEY = '$this_is_not_real_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False\n\nALLOWED_HOSTS = ['*']\n\n# Application definition\nINSTALLED_APPS = [\n   'django.contrib.admin',\n   'django.contrib.auth',\n   'django.contrib.contenttypes',\n   'django.contrib.sessions',\n   'django.contrib.messages',\n   'django.contrib.staticfiles',\n   # Add your own apps here\n]\n\nMIDDLEWARE = [\n   'django.middleware.security.SecurityMiddleware',\n   'django.contrib.sessions.middleware.SessionMiddleware',\n   'django.middleware.common.CommonMiddleware',\n   #'django.middleware.csrf.CsrfViewMiddleware', # Removed because of AJAX requests\n   'django.contrib.auth.middleware.AuthenticationMiddleware',\n   'django.contrib.messages.middleware.MessageMiddleware',\n   'django.middleware.clickjacking.XFrameOptionsMiddleware'\n]\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n   {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n   {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n   {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'}]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/\n</code>"}, {"file": "urls.py", "path": "project/urls.py", "code": "<code>\nfrom django.contrib import admin\nfrom django.urls import path, include\n\n# The root URLs for project.\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('accounts.urls')),\n]\n</code>"}, {"file": "<app_name>.urls", "path": "project/apps/<app_name>/urls.py", "code": "<code>\n# The root URL pattern for app 'app_name'\nfrom django.urls import path\n\nurlpatterns = [\n    # Replace 'view_function' with the view function name or include another url pattern\n    # path('<path>', 'view_function', name='view_name'),\n]\n</code>"}, {"file": "<app_name>/views.py", "path": "project/apps/<app_name>/views.py", "code": "<template_string>\n# View functions for 'app_name' app go here.\n\n# Example function that returns an HTTP 200 OK with message string\ndef index(request):\n    return render(request, '<template>', {'message': 'Hello Django!'})\n</template_string>"}, {"file": "<app_name>/templates/<base_template>.html", "path": "project/apps/<app_name>/templates/<base_template>.html", "code": "<pre>\n<!-- The base HTML template for app 'app_name'\n-->\n<!DOCTYPE html>\n<html lang='en'>\n <head>\n   <meta charset='UTF-8'>\n   <title>{% block title %} Default Title{% endblock %}</title>\n </head>\n <body>\n  <!-- Main content goes here -->\n\n {% block content %}\n  {{ message }}\n {% endblock %}\n </body>\n</html>\n</pre>"}, {"file": "<app_name>/static/css/styles.css", "path": "project/apps/<app_name>/static/css/styles.css", "code": "<pre>\n/* Basic styles for app 'app_name'\n*/\nbody {\n   font-family: Arial, sans-serif;\n}\n</pre>"}, {"file": ".gitignore", "path": ".gitignore", "code": "<code>\n# Ignore generated files and the __pycache__ directory\n*.pyc\n*.pyo\n__pycache__/\n\n# Ignore logfiles\nlogs/*.log\n\n# Ignore static directories to be created by collectstatic\n<!-- static/ -->\n </code>"}], "17": [{"file": "17-stdanswer.py", "path": "logs/logistic_regression/17-stdanswer.py", "code": "import os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    try:\n        dataset = pd.read_excel(input_file, engine='openpyxl')\n        numeric_columns = [column for column in dataset.select_dtypes('float64').columns]\n        if not numeric_columns.all():\n            raise ValueError(\"All columns must be numeric.\")\n        else:\n            return dataset[numeric_columns]\n    except Exception as e:\n        print(f'Error reading input file: {e}')\n        exit()\n\ndef add_lagged_dependent_variable(data, target_column):\n    lagged_data = data.shift(-1)\n    data[target_column + '_Lag'] = np.where((lagged_data.index == data.index) & (pd.notna(lagged_data[target_column])), data[target_column], None)\ndata.dropna(subset=[target_column + '_Lag'], inplace=True)\n    return data\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    X = data.drop([target_column, target_column + '_Lag'], axis=1)\n    y = data[target_column]\n    return X, y\n\ndef build_logistic_model(X, y):\n    logitmodel = sm.Logit(y, sm.add_constant(X))\n    result = logitmodel.fit()\n    return result\n\ndef save_summary_to_excel(result, output_file):\n    with pd.ExcelWriter(output_file)\n        as writer:\n            result.summary2().pipe(pd.DataFrame).to_excel(writer, sheet_name='Summary')\n\ndef main(input_file, output_file):\n    data = read_and_validate_data(input_file)\ndata = add_lagged_dependent_variable(data, 'target_column')\nX, y = prepare_features_and_target(data, 'target_column', 'target_column_Lag')\nresult = build_logistic_model(X, y)\nsave_summary_to_excel(result, output_file)\n"}, {"file": "Gamedata.xlsx", "path": "logs/logistic_regression/data/Gamedata.xlsx"}]}