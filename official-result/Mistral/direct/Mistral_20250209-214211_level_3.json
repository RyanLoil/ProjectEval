{"5": [{"file": "manage.py", "path": "project/", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\nclass ExampleConfig(AppConfig):\n    name = 'example' \n__all__ = ['views', 'models']"}, {"file": "views.py", "path": "example_app/views/", "code": "from django.shortcuts import render\nfrom .models import ExampleModel\ndef index(request):\n    examples = ExampleModel.objects.all()\n    return render(request, 'example/index.html', {'examples': examples})"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nclass ExampleModel(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nclass ExampleForm(forms.ModelForm):\n   class Meta:\n       model = ExampleModel\n       fields = ['title', 'content']"}, {"file": "index.html", "path": "example_app/templates/example/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <title>Example App</title>\n       {% load static %}\n      <link rel=\"stylesheet\" href=\"{{ MEDIA_URL }}css/styles.css\">\n  </head>\n  <body>\n     <!-- Modify the id attribute and add classes as required -->\n     <div id=\"example-app\" class=\"container\">\n       <!-- Add more HTML structure here, along with appropriate use of the 'id' and 'class' attributes for accessibility and styling purposes -->\n      </div>\n   </body>\n</html>"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin, views\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n]"}, {"file": "forms.css", "path": "example_app/static/css/", "code": ".my-form-field {\n    /* custom styles for form fields */\n}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <title>Site Title</title>\n     </head>\n     <body>\n        <!-- Base HTML structure -->\n            {% block content %}\n             {{ block.super }}<!-- Render the child layout / template content here -->\n            {% endblock %}\n     </body>\n</html>"}, {"file": ".env", "path": "project/.env", "code": "SECRET_KEY=mysecretkey"}, {"file": "settings.py", "path": "project/", "code": "[...]\n# Import the app module\nimport os\nimport models\n [...] \nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "[...]"}], "6": [{"file": "models.py", "path": "my_project/my_app/models.py", "code": "from django.db import models\n\nclass MyModel(models.Model):\n    id = models.AutoField(primary_key=True)\n    name = models.CharField(max_length=100)\n    created_at = models.DateTimeField(auto_now_add=True)\n"}, {"file": "views.py", "path": "my_project/my_app/views.py", "code": "from django.shortcuts import render\nfrom .models import MyModel\n\ndef home(request):\n    context = {\n        'my_model': MyModel.objects.all()\n    }\n    return render(request, 'home.html', context)\n"}, {"file": "urls.py", "path": "my_project/my_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\ndefine_urlpatterns():\n    return [\n        path('', views.home, name='home'),\n    ]\ndefine_urlpatterns = define_urlpatterns()"}, {"file": "home.html", "path": "my_project/my_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n  <head>\n    <meta charset='UTF-8'>\n    <title>My Project</title>\n  </head>\n  <body>\n    <div id='content' class='container'> <!-- Add a unique ID and container class -->\n      {% for obj in my_model %}\n        <div class='my-model'> <!-- Add a custom class -->\n          {{ obj.name }}\n          <!-- Other HTML elements here -->\n        </div>\n      {% endfor %}\n    </div>\n  </body>\n</html>"}, {"file": "requirements.txt", "path": "my_project/", "code": "\ndjango==3.2\nsqlite3"}], "7": [{"file": "manage.py", "path": "example_project/", "code": "from django.core.management import execute_from_command_line\nexecute_from_command_line(sys.argv)"}, {"file": "asgi.py", "path": "example_project/", "code": "import os\n\nimport django\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    from channels.logging import get_logger\n    logger = get_logger(__name__)\n    from django.core.management import execute_from_command_line\n\nexecute_from_command_line(sys.argv)"}, {"file": "views.py", "path": "example_app/", "code": "\ndef home(request):\n    return render(request, 'home.html')"}, {"file": "urls.py", "path": "example_app/", "code": "from django.contrib import views as default_views,\n                  paths as static\n\nfrom . import views as custom_views\n\nurlpatterns = [\n    path('', custom_views.home, name='home'),\n]\n"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Example App</title>\n</head>\n<body>\n    <header>\n        <!-- Add an id attribute to the header element -->\n        <h1 id='site-title'>Site Title</h1>\n    </header>\n\n    <main>\n        {% block content %}\n        {% endblock %}\n    </main>\n\n    <footer>\n        <!-- Add an id attribute to the footer element -->\n        <p>Site Footer</p>\n    </footer>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome to Example App!</h1>\n{% endblock %}"}, {"file": "__init__.py", "path": "example_app/templates/", "code": ""}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nsys.path.insert(0, '/path/to/your/virtualenv')\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "setting.py", "path": "example_project/", "code": "Here is the content of settings.py file which includes database, apps, middleware, static and other configurations..."}], "10": [{"file": "answer.urls", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "answer.wsgi", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "answer.setting", "path": "example_project/settings.py", "code": "See the provided Django settings template as a reference, and make sure to replace 'your_secret_key_here' with a secret key for your project."}, {"file": "answer.app_urls", "path": "example_app/urls.py", "code": "from django.urls import path, include\n\nurlpatterns = [\n    # Add url patterns for each view here.\n]\n"}, {"file": "answer.views", "path": "example_app/views.py", "code": "See the provided Django views template as a reference, and create views for each page in your application."}, {"file": "answer.templates", "path": "example_app/templates", "code": "Create individual HTML files within this directory, following best practices such as using classes and IDs for each element."}], "16": [{"file": "16-stdanswer.py", "path": "your_project_directory/16-stdanswer.py", "code": "import os\nimport pandas as pd\n\n# File paths\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"Processed Subjects Table.xlsx\"\n\ndef check_file_exists(file_path):\n    \"Check if the specified file path exists.\"\n    return os.path.isfile(file_path)\n\n\ndef check_file_format(file_path):\n    \"Check if the file is in Excel format.\"\n    return False if not file_path else (pd.read_excel(io=file_path,engine='openpyxl') is not None)\n\n\ndef validate_data(df):\n    \"Validate the DataFrame for required columns and values.\"\n    df.columns = ['Subject', 'Credits'] \n    return all([len(df[col]) > 0 for col in ['Subject', 'Credits']])\n\n\ndef process_subjects(input_file, output_file):\n    \"Process the subjects from input Excel file and save the output to another Excel file.\"\n    df = pd.read_excel(input_file) \n    if validate_data(df):\n        df.to_excel(output_file, engine='openpyxl', index=False)\n\n\ndef main():\n    \"Main execution function.\"\n    input_fp = os.path.join(\"your_project_directory\", input_file)\n    output_fp = os.path.join(\"your_project_directory\", output_file)\n    if check_file_exists(input_fp) and check_file_format(input_fp):\n        process_subjects(input_fp, output_fp)\n\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "tests.py", "path": "your_project_directory/tests.py", "code": "\nimport unittest\nclass TestProcessSubjects(unittest.TestCase):\n    def test_check_file_exists(self):\n        \"Testing check_file_exists function with a valid file path.\"\n    \n        app_path = os.path.join(\"your_project_directory\", \"Spring Semester Subjects.xlsx\")\n        self.assertTrue(check_file_exists(app_path), msg=\"File does not exist!\")\n    \n    def test_check_file_format(self):\n        \"Testing check_file_format function with a valid Excel file path.\""}, {"file": ".gitignore", "path": "your_project_directory/.gitignore", "code": "\n# General .gitignore Examples\nbuild/\n__pycache__/\nvenv/\n\n# OS and File Specific .gitignore Examples\n*.db/*\n\n# Python-specific .gitignore Examples\n*.pyc\n*.pyo"}], "19": [{"file": "19-stdanswer.py", "path": "project/scripts/19-stdanswer.py", "code": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\ndef check_file_existence(file_path):\n    \"\"\"\n        Check if a file exists at the given file path.\n        \"\"{}\n    os.path.isfile(file_path)\n\ndef read_dataset(file_path):\n    \"\"\"\n        Read the dataset from a CSV file and return a DataFrame.\n        \"\"{}\n    pd.read_csv(file_path)\n\ndef validate_dataset(df, required_columns):\n    \"\"\"\n        Validate that the dataset contains all required columns.\n        \"\"{}\ndf.columns.intersection(required_columns).equals(required_columns)\n\ndef preprocess_dataset(df):\n    \"\"\"\n        Preprocess the dataset, including cleaning and formatting dates.\n        \"\"{}\ndf['Date of death'] = pd.to_datetime(df['Date of death'], format='%Y-%m-%d')\ndf['Week'] = df['Date of death'].dt.isoweek"}, {"file": "tests/test_19_stdanswer.py", "path": "project/tests/test_19_stdanswer.py", "code": "\n# Testing functions for 19-stdanswer.py\n\nimport os\nimport unittest\nfrom unittest.mock import patch\nimport sys\nsys.path.insert(0, \"..\\tests\")\nimports 19_stdanswer\nimf = 19_stdanswer.main\n\nclass Test19StdAnswer(unittest.TestCase):\n    @patch(\"os.path.isfile\")\ndef test_check_file_existence_exists(self, mock_isfile):\n        mock_isfile.return_value = True\nself.assertEqual(19_stdanswer.check_file_existence('testdata/Deathlist.csv'), True)\n\n    @patch(\"os.path.isfile\")\ndef test_check_file_existence_not_exists(self, mock_isfile):\n        mock_isfile.return_value = False\nself.assertEqual(19_stdanswer.check_file_existence('doesnt_exist/Deathlist.csv'), False)\n\nif __name__ == '__main__':\n    unittest.main()"}]}