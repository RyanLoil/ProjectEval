{"1": [{"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef bmi_calculator(request):\n    if request.method == 'POST':\n        # Get weight and height from form\n        weight = float(request.POST.get('weight'))\n        height_cm = float(request.POST.get('height_cm')) if request.POST.get('height_cm') else None\n        height_feet = int(request.POST.get('height_feet')) if request.POST.get('height_feet') else None\n        height_inches = int(request.POST.get('height_inches')) if request.POST.get('height_inches') else None\n        unit_system = request.POST.get('unit_system')\n\n        if unit_system == 'metric':\n            height = height_cm / 100\n        elif unit_system == 'imperial':\n            height = (height_feet * 12 + height_inches) * 0.0254\n\n        # Calculate BMI\n        bmi = weight / (height ** 2)\n\n        # Get BMI category\n        bmi_category = get_bmi_category(bmi) # Defined in a separate function or lookup table\n\n        context = {'bmi': bmi, 'bmi_category': bmi_category}\n        return render(request, 'bmi_calculator/result.html', context)\n    return render(request, 'bmi_calculator/bmi_calculator.html')"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "<form method=\"post\">\n    {% csrf_token %}\n    <label for=\"weight\">Weight:</label>\n    <input type=\"number\" name=\"weight\" id=\"weight\" required><br><br>\n\n    <label for=\"unit_system\">Unit System:</label>\n    <select name=\"unit_system\" id=\"unit_system\">\n        <option value=\"metric\">Metric</option>\n        <option value=\"imperial\">Imperial</option>\n    </select>\n\n    <div id=\"metric-inputs\">\n        <label for=\"height_cm\">Height (cm):</label>\n        <input type=\"number\" name=\"height_cm\" id=\"height_cm\" ><br><br>\n    </div>\n\n    <div id=\"imperial-inputs\" style=\"display:none;\">\n        <label for=\"height_feet\">Height (feet):</label>\n        <input type=\"number\" name=\"height_feet\" id=\"height_feet\" ><br><br>\n        <label for=\"height_inches\">Height (inches):</label>\n        <input type=\"number\" name=\"height_inches\" id=\"height_inches\"><br><br>\n    </div>\n\n    <button type=\"submit\">Calculate BMI</button>\n</form>\n\n<script>\n    const unitSystemSelect = document.getElementById('unit_system');\n    const metricInputs = document.getElementById('metric-inputs');\n    const imperialInputs = document.getElementById('imperial-inputs');\n\n    unitSystemSelect.addEventListener('change', () => {\n        if (unitSystemSelect.value === 'metric') {\n            metricInputs.style.display = 'block';\n            imperialInputs.style.display = 'none';\n        } else {\n            metricInputs.style.display = 'none';\n            imperialInputs.style.display = 'block';\n        }\n    });\n</script>"}, {"file": "result.html", "path": "bmi_calculator/templates/bmi_calculator/result.html", "code": "<p>Your BMI is: {{ bmi }}</p>\n<p>Category: {{ bmi_category }}</p>"}], "2": [{"file": "urls.py", "path": "converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('history/', views.history, name='history'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "views.py", "path": "converter/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'converter/home.html')\n\ndef history(request):\n    return render(request, 'converter/history.html')\n\ndef settings(request):\n    return render(request, 'converter/settings.html')\n\n"}, {"file": "home.html", "path": "converter/templates/converter/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <!-- Currency selection, amount input, conversion display, exchange rate, swap button -->\n{% endblock %}"}, {"file": "history.html", "path": "converter/templates/converter/history.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <!-- Display past conversions, clear history button -->\n{% endblock %}"}, {"file": "settings.html", "path": "converter/templates/converter/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <!-- Default currency settings, decimal place settings -->\n{% endblock %}"}, {"file": "models.py", "path": "converter/models.py", "code": "from django.db import models\n\nclass Conversion(models.Model):\n    source_currency = models.CharField(max_length=3)\n    target_currency = models.CharField(max_length=3)\n    amount = models.DecimalField(max_digits=15, decimal_places=2)\n    converted_amount = models.DecimalField(max_digits=15, decimal_places=2)\n    rate = models.DecimalField(max_digits=10, decimal_places=6)\n    date = models.DateTimeField(auto_now_add=True)\n"}, {"file": "forms.py", "path": "converter/forms.py", "code": "from django import forms\n\nclass ConversionForm(forms.Form):\n     amount = forms.DecimalField()\n     source_currency = forms.CharField(max_length=3)\n     target_currency = forms.CharField(max_length=3)\n\n"}, {"file": "admin.py", "path": "converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Conversion\n\nadmin.site.register(Conversion)\n"}], "3": [{"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport random\nimport string\n\ndef generate_password(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        lowercase = request.POST.get('lowercase', False)\n        uppercase = request.POST.get('uppercase', False)\n        numbers = request.POST.get('numbers', False)\n        symbols = request.POST.get('symbols', False)\n        exclude_similar = request.POST.get('exclude_similar', False)\n\n        characters = ''\n        if lowercase:\n            characters += string.ascii_lowercase\n        if uppercase:\n            characters += string.ascii_uppercase\n        if numbers:\n            characters += string.digits\n        if symbols:\n            characters += string.punctuation\n\n        if exclude_similar:\n            similar_chars = 'il1Lo0O'\n            characters = ''.join(c for c in characters if c not in similar_chars)\n\n        if not characters:\n            return JsonResponse({'error': 'Please select at least one character type.'}, status=400)  # Return 400 Bad Request\n\n        password = ''.join(random.choice(characters) for i in range(length))\n\n        return JsonResponse({'password': password})\n\n    return render(request, 'password_generator/index.html')"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.generate_password, name='generate_password'),\n]"}, {"file": "index.html", "path": "password_generator/templates/password_generator/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1>Password Generator</h1>\n    <form method=\"post\" id=\"password-form\">\n        {% csrf_token %}\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" value=\"12\" min=\"1\"><br><br>\n\n        <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\">\n        <label for=\"lowercase\">Lowercase</label><br>\n\n        <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\">\n        <label for=\"uppercase\">Uppercase</label><br>\n\n        <input type=\"checkbox\" id=\"numbers\" name=\"numbers\">\n        <label for=\"numbers\">Numbers</label><br>\n\n        <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n        <label for=\"symbols\">Symbols</label><br>\n\n        <input type=\"checkbox\" id=\"exclude_similar\" name=\"exclude_similar\">\n        <label for=\"exclude_similar\">Exclude Similar Characters</label><br><br>\n\n        <button type=\"submit\">Generate Password</button>\n    </form>\n\n    <div id=\"password-display\"></div>\n\n    <script>\n        const form = document.getElementById('password-form');\n        const passwordDisplay = document.getElementById('password-display');\n\n        form.addEventListener('submit', (event) => {\n            event.preventDefault();\n\n            fetch('', { method: 'POST', body: new FormData(form) })\n                .then(response => {\n                    if (!response.ok) {\n                        if (response.status === 400) {  // Check for 400 Bad Request\n                            return response.json().then(data => {\n                                alert(data.error);\n                            });\n                        }\n                        throw new Error('Network response was not ok.');\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    passwordDisplay.textContent = data.password;\n                })\n                .catch(error => {\n                    console.error('There was a problem with the fetch operation:', error);\n                    passwordDisplay.textContent = 'Error generating password.';\n                });\n        });\n    </script>\n\n</body>\n</html>"}], "4": [{"file": "views.py", "path": "qr_generator/views.py", "code": ""}, {"file": "urls.py", "path": "qr_generator/urls.py", "code": ""}, {"file": "models.py", "path": "qr_generator/models.py", "code": ""}, {"file": "forms.py", "path": "qr_generator/forms.py", "code": ""}, {"file": "templates/homepage.html", "path": "qr_generator/templates/qr_generator/homepage.html", "code": ""}, {"file": "templates/customization.html", "path": "qr_generator/templates/qr_generator/customization.html", "code": ""}, {"file": "templates/gallery.html", "path": "qr_generator/templates/qr_generator/gallery.html", "code": ""}, {"file": "templates/about.html", "path": "qr_generator/templates/qr_generator/about.html", "code": ""}], "5": [{"file": "urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    # Add paths for settings and examples/help if needed\n]"}, {"file": "views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\nimport markdown\n\ndef index(request):\n    html = ''\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n    context = {'html': html}\n    return render(request, 'markdown_converter/index.html', context)"}, {"file": "index.html", "path": "markdown_converter/templates/markdown_converter/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown Converter</title>\n</head>\n<body>\n    <form method=\"post\">\n        {% csrf_token %}\n        <textarea name=\"markdown_text\"></textarea>\n        <button type=\"submit\">Convert</button>\n    </form>\n    <div>\n        {{ html | safe }}\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# Add 'markdown_converter' to INSTALLED_APPS\nINSTALLED_APPS = [\n    # ... other apps\n    'markdown_converter',\n]"}], "6": [{"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('analytics/', views.analytics, name='analytics'),\n    path('settings/', views.settings, name='settings'),\n    # Add paths for specific functions (add, edit, delete, etc.)\n]"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render\n\n# Placeholder view functions\ndef home(request):\n    # Logic for handling todo list operations\n    return render(request, 'todo_app/home.html')\n\ndef analytics(request):\n    # Logic for generating analytics data\n    return render(request, 'todo_app/analytics.html')\n\ndef settings(request):\n    # Logic for handling user settings\n    return render(request, 'todo_app/settings.html')"}, {"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass Todo(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    due_date = models.DateField(null=True, blank=True)\n    priority = models.IntegerField(default=1)  # 1-Low, 2-Medium, 3-High\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title"}, {"file": "home.html", "path": "todo_app/templates/todo_app/home.html", "code": "<!-- Template for displaying the todo list and related actions -->"}, {"file": "analytics.html", "path": "todo_app/templates/todo_app/analytics.html", "code": "<!-- Template for displaying charts and analytics -->"}, {"file": "settings.html", "path": "todo_app/templates/todo_app/settings.html", "code": "<!-- Template for managing user settings -->"}, {"file": "forms.py", "path": "todo_app/forms.py", "code": "from django import forms\nfrom .models import Todo\n\nclass TodoForm(forms.ModelForm):\n    class Meta:\n        model = Todo\n        fields = ['title', 'description', 'due_date', 'priority']"}, {"file": "admin.py", "path": "todo_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Todo\n\nadmin.site.register(Todo)"}], "7": [{"file": "urls.py", "path": "my_budget_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('transactions/', views.transactions, name='transactions'),\n    path('budget/', views.budget, name='budget'),\n    path('reports/', views.reports, name='reports'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "views.py", "path": "my_budget_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef dashboard(request):\n    return render(request, 'dashboard.html')\n\ndef transactions(request):\n    return render(request, 'transactions.html')\n\ndef budget(request):\n    return render(request, 'budget.html')\n\ndef reports(request):\n    return render(request, 'reports.html')\n\ndef settings(request):\n    return render(request, 'settings.html')\n"}, {"file": "models.py", "path": "my_budget_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n# Example Model\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n"}, {"file": "home.html", "path": "my_budget_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Welcome to the Budget App</h1>\n{% endblock %}"}, {"file": "base.html", "path": "my_budget_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Budget App</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "dashboard.html", "path": "my_budget_app/templates/dashboard.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Dashboard</h1>\n{% endblock %}"}, {"file": "transactions.html", "path": "my_budget_app/templates/transactions.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Transactions</h1>\n{% endblock %}"}, {"file": "budget.html", "path": "my_budget_app/templates/budget.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Budget</h1>\n{% endblock %}"}, {"file": "reports.html", "path": "my_budget_app/templates/reports.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Reports</h1>\n{% endblock %}"}, {"file": "settings.html", "path": "my_budget_app/templates/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Settings</h1>\n{% endblock %}"}], "8": [{"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('day/<int:year>/<int:month>/<int:day>/', views.day_view, name='day_view'),\n    path('month/<int:year>/<int:month>/', views.month_view, name='month_view'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'calendar_app/home.html')\n\ndef day_view(request, year, month, day):\n    return render(request, 'calendar_app/day.html', {'year': year, 'month': month, 'day': day})\n\ndef month_view(request, year, month):\n    return render(request, 'calendar_app/month.html', {'year': year, 'month': month})\n\ndef settings(request):\n    return render(request, 'calendar_app/settings.html')\n\n"}, {"file": "home.html", "path": "calendar_app/templates/calendar_app/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Calendar Home</h1>\n{% endblock %}"}, {"file": "day.html", "path": "calendar_app/templates/calendar_app/day.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Day View: {{ year }}-{{ month }}-{{ day }}</h1>\n{% endblock %}"}, {"file": "month.html", "path": "calendar_app/templates/calendar_app/month.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Month View: {{ year }}-{{ month }}</h1>\n{% endblock %}"}, {"file": "settings.html", "path": "calendar_app/templates/calendar_app/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Settings</h1>\n{% endblock %}"}, {"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = '__all__'\n"}], "9": [{"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('contact/', views.contact, name='contact'),\n]"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\ndef homepage(request):\n    return render(request, 'myapp/homepage.html')\n\ndef features(request):\n    return render(request, 'myapp/features.html')\n\ndef pricing(request):\n    return render(request, 'myapp/pricing.html')\n\ndef contact(request):\n    return render(request, 'myapp/contact.html')\n"}, {"file": "homepage.html", "path": "myproject/myapp/templates/myapp/homepage.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Homepage</h1>\n<ul>\n    <li>Understand natural language</li>\n    <li>Respond appropriately</li>\n    <li>Provide helpful information</li>\n    <li>Learn and improve</li>\n    <li>Easy to use</li>\n</ul>\n{% endblock %}"}, {"file": "features.html", "path": "myproject/myapp/templates/myapp/features.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Features</h1>\n<ul>\n    <li>Multilingual support</li>\n    <li>Personalization</li>\n    <li>24/7 availability</li>\n    <li>Integration with other platforms</li>\n    <li>Secure and private</li>\n</ul>\n{% endblock %}"}, {"file": "pricing.html", "path": "myproject/myapp/templates/myapp/pricing.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Pricing</h1>\n<ul>\n    <li>Transparent pricing</li>\n    <li>Flexible plans</li>\n    <li>Free trial</li>\n</ul>\n{% endblock %}"}, {"file": "contact.html", "path": "myproject/myapp/templates/myapp/contact.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Contact Us</h1>\n<ul>\n    <li>Contact form</li>\n    <li>Email support</li>\n    <li>Phone support</li>\n    <li>Live chat support</li>\n</ul>\n{% endblock %}"}, {"file": "base.html", "path": "myproject/myapp/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Chatbot App</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'homepage' %}\">Home</a>\n        <a href=\"{% url 'features' %}\">Features</a>\n        <a href=\"{% url 'pricing' %}\">Pricing</a>\n        <a href=\"{% url 'contact' %}\">Contact</a>\n    </nav>\n    <div>\n    {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}], "10": [{"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('food_log/', views.food_log, name='food_log'),\n    path('reports/', views.reports, name='reports'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "views.py", "path": "calorie_tracker/views.py", "code": "from django.shortcuts import render\n\ndef homepage(request):\n    return render(request, 'calorie_tracker/homepage.html')\n\ndef dashboard(request):\n    return render(request, 'calorie_tracker/dashboard.html')\n\ndef food_log(request):\n    return render(request, 'calorie_tracker/food_log.html')\n\ndef reports(request):\n    return render(request, 'calorie_tracker/reports.html')\n\ndef settings(request):\n    return render(request, 'calorie_tracker/settings.html')\n"}, {"file": "homepage.html", "path": "calorie_tracker/templates/calorie_tracker/homepage.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Welcome to the Calorie Tracker!</h1>\n{% endblock %}"}, {"file": "dashboard.html", "path": "calorie_tracker/templates/calorie_tracker/dashboard.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Dashboard</h1>\n{% endblock %}"}, {"file": "food_log.html", "path": "calorie_tracker/templates/calorie_tracker/food_log.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Food Log</h1>\n{% endblock %}"}, {"file": "reports.html", "path": "calorie_tracker/templates/calorie_tracker/reports.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Reports</h1>\n{% endblock %}"}, {"file": "settings.html", "path": "calorie_tracker/templates/calorie_tracker/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Settings</h1>\n{% endblock %}"}, {"file": "models.py", "path": "calorie_tracker/models.py", "code": ""}], "11": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('generate/', views.generate, name='generate'),\n]"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef about(request):\n    return render(request, 'about.html')\n\ndef generate(request):\n    return render(request, 'generate.html')\n    "}, {"file": "home.html", "path": "myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1>Welcome to the Password Generator</h1>\n    <a href=\"{% url 'generate' %}\">Generate Password</a>\n    <br>\n    <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "about.html", "path": "myproject/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Website</h1>\n    <p>This website is designed to generate strong and secure passwords.</p>\n</body>\n</html>"}, {"file": "generate.html", "path": "myproject/templates/generate.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Password Generator</title>\n</head>\n<body>\n    <h1>Generate Password</h1>\n\n    <form>\n      </form>\n\n </body>\n</html>"}], "12": [{"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.employee_dashboard, name='employee_dashboard'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('view_claim_status/', views.view_claim_status, name='view_claim_status'),\n    path('view_claim_history/', views.view_claim_history, name='view_claim_history'),\n    path('admin_dashboard/', views.admin_dashboard, name='admin_dashboard'),\n    path('view_pending_claims/', views.view_pending_claims, name='view_pending_claims'),\n    path('approve_reject_claim/<int:claim_id>/', views.approve_reject_claim, name='approve_reject_claim'),\n    path('view_claim_details/<int:claim_id>/', views.view_claim_details, name='view_claim_details'),\n    path('budget_control_analysis/', views.budget_control_analysis, name='budget_control_analysis'),\n    path('generate_reports/', views.generate_reports, name='generate_reports'),\n    path('manage_budget/', views.manage_budget, name='manage_budget'),\n]"}, {"file": "views.py", "path": "expense_tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Claim, Budget\nfrom django.http import HttpResponse\nfrom django.contrib.auth.decorators import login_required, user_passes_test\n\n# ... (import necessary modules)\n\n# Define helper functions (e.g., is_admin)\n\n@login_required\ndef employee_dashboard(request):\n    # ...\n\n@login_required\ndef submit_claim(request):\n    # ...\n\n@login_required\ndef view_claim_status(request):\n    # ...\n\n@login_required\ndef view_claim_history(request):\n    # ...\n\n@user_passes_test(is_admin)\ndef admin_dashboard(request):\n    # ...\n\n@user_passes_test(is_admin)\ndef view_pending_claims(request):\n    # ...\n\n@user_passes_test(is_admin)\ndef approve_reject_claim(request, claim_id):\n    # ...\n\n@user_passes_test(is_admin)\ndef view_claim_details(request, claim_id):\n    # ...\n\n@user_passes_test(is_admin)\ndef budget_control_analysis(request):\n    # ...\n\n@user_passes_test(is_admin)\ndef generate_reports(request):\n    # ...\n\n@user_passes_test(is_admin)\ndef manage_budget(request):\n    # ..."}, {"file": "models.py", "path": "expense_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n# Define Claim model\nclass Claim(models.Model):\n    # ... (fields such as employee, amount, description, category, status, supporting_documents)\n\n# Define Budget model\nclass Budget(models.Model):\n    # ... (fields such as category, amount)"}, {"file": "forms.py", "path": "expense_tracker/forms.py", "code": "from django import forms\nfrom .models import Claim, Budget\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = '__all__'\n\nclass BudgetForm(forms.ModelForm):\n    class Meta:\n        model = Budget\n        fields = '__all__'"}], "13": [{"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('customer_list/', views.customer_list, name='customer_list'),\n    path('product_list/', views.product_list, name='product_list'),\n    path('purchase_record/', views.purchase_record, name='purchase_record'),\n    path('marketing_dashboard/', views.marketing_dashboard, name='marketing_dashboard'),\n]"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\ndef customer_list(request):\n    # Implement customer list view logic here\n    return render(request, 'myapp/customer_list.html')\n\ndef product_list(request):\n    # Implement product list view logic here\n    return render(request, 'myapp/product_list.html')\n\ndef purchase_record(request):\n    # Implement purchase record view logic here\n    return render(request, 'myapp/purchase_record.html')\n\ndef marketing_dashboard(request):\n    # Implement marketing dashboard view logic here\n    return render(request, 'myapp/marketing_dashboard.html')\n"}, {"file": "models.py", "path": "myproject/myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    # Define Customer model fields\n    pass\n\nclass Product(models.Model):\n    # Define Product model fields\n    pass\n\nclass PurchaseRecord(models.Model):\n    # Define PurchaseRecord model fields\n    pass"}, {"file": "customer_list.html", "path": "myproject/myapp/templates/myapp/customer_list.html", "code": "<!-- Customer List HTML template -->"}, {"file": "product_list.html", "path": "myproject/myapp/templates/myapp/product_list.html", "code": "<!-- Product List HTML template -->"}, {"file": "purchase_record.html", "path": "myproject/myapp/templates/myapp/purchase_record.html", "code": "<!-- Purchase Record HTML template -->"}, {"file": "marketing_dashboard.html", "path": "myproject/myapp/templates/myapp/marketing_dashboard.html", "code": "<!-- Marketing Dashboard HTML template -->"}], "14": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "helloworld.html", "path": "myproject/templates/helloworld.html", "code": "<h1>helloworld</h1>"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'index.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "index.html", "path": "myproject/templates/index.html", "code": "<html>\n<head><title>Index</title></head>\n<body>\n    <a href=\"{% url 'helloworld' %}\">Go to Hello World Button</a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myproject/templates/helloworld.html", "code": "<html>\n<head><title>Hello World</title></head>\n<body>\n    <h1>Hello, World!</h1>\n</body>\n</html>"}], "16": [{"file": "main.py", "path": "src/main.py", "code": "import pandas as pd\n\n\ndef read_subject_list(excel_file):\n    \"\"\"Reads the subject list from the specified Excel file.\"\"\"\n    # TODO: Implement reading logic using pandas\n    pass\n\n\ndef create_subject_table(subject_list):\n    \"\"\"Transforms the subject list into a two-dimensional table.\"\"\"\n    # TODO: Implement table creation logic\n    pass\n\n\ndef output_to_excel(subject_table, output_file):\n    \"\"\"Saves the generated subject table to a new Excel file.\"\"\"\n    # TODO: Implement output logic using pandas\n    pass\n\n\nif __name__ == \"__main__\":\n    subject_list = read_subject_list('Spring Semester Subjects.xlsx')\n    subject_table = create_subject_table(subject_list)\n    output_to_excel(subject_table, 'SubjectTable.xlsx')"}], "17": [{"file": "data_analysis.py", "path": "somepath/somedir/data_analysis.py", "code": "# Import necessary libraries\nimport pandas as pd\nfrom sklearn.linear_model import LogisticRegression\n\n# Load the data\n\n\ndef create_lagged_dependent_variable(df, column_name, lag_periods):\n    # Create lagged version of the specified column\n    pass  # Implementation for creating lagged variable\n\n\ndef build_logistic_regression_model(df, dependent_variable, predictor_variables):\n    # Build and train a logistic regression model\n    pass # Implementation for model building\n\n\ndef save_model_summary(model, output_file):\n    # Save the model summary to an Excel file\n    pass # Implementation for saving summary\n\n# Example usage (replace with your actual data and file paths)\n# df = pd.read_csv(\"your_data.csv\")\n# lagged_result = create_lagged_dependent_variable(df, 'result', 1)\n# model = build_logistic_regression_model(df, lagged_result, predictor_variables)\n# save_model_summary(model, \"model_summary.xlsx\")\n\n"}], "18": "```json\n[\n  {\n    \"file\": \"game.py\",\n    \"path\": \"game/game.py\",\n    \"code\": \"\"\"\nimport random\nimport json\n\ndef create_character():\n    name = input(\\\\\"Enter your character's name: \\\\\")\n    return {\\\\\"name\\\\\": name, \\\\\"health\\\\\": 100, \\\\\"attack\\\\\": 10, \\\\\"gold\\\\\": 0, \\\\\"inventory\\\\\": []}\n\ndef display_status(player):\n    print(f\\\\\"Name: {player['name']}\\\\\")\n    print(f\\\\\"Health: {player['health']}\\\\\")\n    print(f\\\\\"Attack: {player['attack']}\\\\\")\n    print(f\\\\\"Gold: {player['gold']}\\\\\")\n    print(f\\\\\"Inventory: {player['inventory']}\\\\\")\n\ndef combat(player, enemy):\n    print(f\\\\\"You encounter a {enemy['name']}!\\\\\")\n    while player['health'] > 0 and enemy['health'] > 0:\n        action = input(\\\\\"Attack or Flee? (a/f): \\\\\").lower()\n        if action == 'a':\n            # Combat logic\n            pass  \n        elif action == 'f':\n            print(\\\\\"You successfully fled!\\\\\")\n            return\n        else:\n            print(\\\\\"Invalid action. Please choose 'a' or 'f'.\\\\\")\n\ndef game():\n    functions_json = \\\\\"\\\\\"\\\\\"\n    [\n        {\\\\\"page\\\\\": \\\\\"Character Creation\\\\\", \\\\\"function\\\\\": [{\\\\\"function\\\\\": \\\\\"Enter Name\\\\\", \\\\\"description\\\\\": \\\\\"Type your character's name and press Enter.\\\\\"}]},\n        {\\\\\"page\\\\\": \\\\\"Combat\\\\\", \\\\\"function\\\\\": [{\\\\\"function\\\\\": \\\\\"Attack (a)\\\\\", \\\\\"description\\\\\": \\\\\"Initiate an attack against the enemy.\\\\\"}, {\\\\\"function\\\\\": \\\\\"Flee (f)\\\\\", \\\\\"description\\\\\": \\\\\"Attempt to escape from the combat encounter.\\\\\"}]}\n    ]\n    \\\\\"\\\\\"\\\\\"\n    print(functions_json)\n\n\n    player = create_character()\n    enemies = [\n        {\\\\\"name\\\\\": \\\\\"Goblin\\\\\", \\\\\"health\\\\\": 20, \\\\\"attack\\\\\": 5, \\\\\"gold\\\\\": 5},\n        {\\\\\"name\\\\\": \\\\\"Orc\\\\\", \\\\\"health\\\\\": 30, \\\\\"attack\\\\\": 10, \\\\\"gold\\\\\": 10, \\\\\"item\\\\\":\\\\\"Sword\\\\\"},\n        {\\\\\"name\\\\\": \\\\\"Troll\\\\\", \\\\\"health\\\\\": 50, \\\\\"attack\\\\\": 15, \\\\\"gold\\\\\": 15, \\\\\"item\\\\\":\\\\\"Shield\\\\\"}\n    ]\n    \n    while player['health'] > 0:\n        display_status(player)\n        combat(player, random.choice(enemies))\n\nif __name__ == \\\\\"__main__\\\\\":\n    game()\n\"\"\"\n  }\n]\n```\n", "19": [{"file": "read_csv.py", "path": "command_prompt/read_csv.py", "code": "import csv\n\ndef read_csv_data(filepath):\n    data = []\n    with open(filepath, 'r') as file:\n        reader = csv.reader(file)\n        next(reader)  # Skip header row (optional)\n        for row in reader:\n            data.append(row)\n    return data"}, {"file": "calculate_weekly_deaths.py", "path": "command_prompt/calculate_weekly_deaths.py", "code": "from datetime import datetime\n\ndef calculate_weekly_deaths(data):\n    weekly_deaths = [0] * 52  # Initialize list for 52 weeks\n    for row in data:\n        try:\n            date_str = row[0]  # Assuming date is in the first column\n            date = datetime.strptime(date_str, '%Y-%m-%d') # Adjust date format if needed\n            week_number = date.isocalendar()[1] -1 # Get week number (0-indexed)\n            weekly_deaths[week_number] += 1\n        except (ValueError, IndexError) as e: # Handle potential errors like incorrect date format\n            print(f\"Error processing row: {row}. Error: {e}\")\n    return weekly_deaths"}, {"file": "generate_histogram.py", "path": "command_prompt/generate_histogram.py", "code": "def generate_histogram(weekly_deaths):\n    max_deaths = max(weekly_deaths)\n    for i, count in enumerate(weekly_deaths):\n        bar = '#' * int((count / max_deaths) * 20) # Scale bar to 20 characters max\n        print(f\"Week {i + 1}: {bar} ({count})\")"}, {"file": "main.py", "path": "command_prompt/main.py", "code": "from read_csv import read_csv_data\nfrom calculate_weekly_deaths import calculate_weekly_deaths\nfrom generate_histogram import generate_histogram\n\nif __name__ == \"__main__\":\n    filepath = 'Deathlist.csv' # Replace with actual filepath\n    data = read_csv_data(filepath)\n    weekly_deaths = calculate_weekly_deaths(data)\n    generate_histogram(weekly_deaths)"}], "20": [{"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:post_id>/', views.post_detail, name='post_detail'),\n    path('category/<str:category_name>/', views.category, name='category'),\n    path('tag/<str:tag_name>/', views.tag, name='tag'),\n    path('search/', views.search, name='search'),\n    path('about/', views.about, name='about'),\n    path('contact/', views.contact, name='contact'),\n]"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render\n\n# Replace these with your actual model imports and logic\nfrom .models import Post, Category, Tag\n\ndef home(request):\n    latest_posts = Post.objects.all().order_by('-publication_date')[:5] # Example query\n    context = {'latest_posts': latest_posts}\n    return render(request, 'blog/home.html', context)\n\ndef post_detail(request, post_id):\n    post = Post.objects.get(pk=post_id) # Example query\n    context = {'post': post}\n    return render(request, 'blog/post_detail.html', context)\n\ndef category(request, category_name):\n    category = Category.objects.get(name=category_name) # Example query\n    posts = category.post_set.all() # Example query\n    context = {'category': category, 'posts': posts}\n    return render(request, 'blog/category.html', context)\n\ndef tag(request, tag_name):\n    tag = Tag.objects.get(name=tag_name) # Example query\n    posts = tag.post_set.all() # Example query\n    context = {'tag': tag, 'posts': posts}\n    return render(request, 'blog/tag.html', context)\n\ndef search(request):\n    query = request.GET.get('q') # Example query parameter handling\n    results = Post.objects.filter(title__icontains=query) # Example query\n    context = {'query': query, 'results': results}\n    return render(request, 'blog/search.html', context)\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\ndef contact(request):\n    return render(request, 'blog/contact.html')\n"}, {"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    categories = models.ManyToManyField(Category)\n    tags = models.ManyToManyField(Tag)\n\n    def __str__(self):\n        return self.title\n\n"}]}