{"1": [{"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomePageView.as_view(), name='home'),\n    path('calculator/', views.BMICalculatorView.as_view(), name='calculator'),\n]"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom django.views.generic import TemplateView\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass BMICalculatorView(TemplateView):\n    template_name = 'calculator.html'\n    def post(self, request):\n        # TODO: Implement BMI calculation logic\n        return render(request, self.template_name)\n\n"}, {"file": "home.html", "path": "bmi_calculator/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1>Welcome to the BMI Calculator</h1>\n    <p>This calculator helps you determine your Body Mass Index (BMI).</p>\n    <a href=\"{% url 'calculator' %}\">Go to Calculator</a>\n</body>\n</html>"}, {"file": "calculator.html", "path": "bmi_calculator/templates/calculator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1>BMI Calculator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"height\">Height:</label>\n        <input type=\"number\" name=\"height\" id=\"height\" required><br><br>\n\n        <label for=\"weight\">Weight:</label>\n        <input type=\"number\" name=\"weight\" id=\"weight\" required><br><br>\n\n        <button type=\"submit\">Calculate</button>\n    </form>\n\n    <!-- TODO: Display BMI Result and Category -->\n</body>\n</html>"}], "2": [{"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('currency_details/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    context = {}\n    return render(request, 'currency_converter/home.html', context)\n\ndef currency_details(request):\n    context = {}\n    return render(request, 'currency_converter/currency_details.html', context)\n\ndef settings(request):\n    context = {}\n    return render(request, 'currency_converter/settings.html', context)\n"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    {/* Form for currency conversion */}\n{% endblock %}"}, {"file": "currency_details.html", "path": "currency_converter/templates/currency_converter/currency_details.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    {/* Display currency details */}\n{% endblock %}"}, {"file": "settings.html", "path": "currency_converter/templates/currency_converter/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    {/* Settings form */}\n{% endblock %}"}, {"file": "models.py", "path": "currency_converter/models.py", "code": "# Define models if needed (e.g., for storing historical exchange rates)"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# Define forms for user input (settings, etc.)"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_password, name='generate_password'),\n    path('about/', views.about, name='about'), \n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'generator/home.html')\n\ndef about(request):\n    return render(request, 'generator/about.html')\n\ndef generate_password(request):\n    return render(request, 'generator/password.html')\n\n"}, {"file": "home.html", "path": "password_generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n  <h1>Welcome to the Password Generator</h1>\n\n  <a href=\"{% url 'generate_password' %}\">Generate Password</a>\n    <br />\n  <a href=\"{% url 'about' %}\">About</a>\n\n</body>\n</html>"}, {"file": "password.html", "path": "password_generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Password Options</title>\n</head>\n<body>\n\n<h1>Password Generator</h1>\n\n<form action=\"#\" method=\"post\">\n  {% csrf_token %}\n  <label for=\"length\">Password Length:</label>\n  <input type=\"number\" name=\"length\" id=\"length\" min=\"8\" max=\"32\" value=\"12\" required>\n  <br>\n\n  <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" checked>\n  <label for=\"uppercase\">Include Uppercase</label>\n  <br>\n\n  <input type=\"checkbox\" name=\"lowercase\" id=\"lowercase\" checked>\n  <label for=\"lowercase\">Include Lowercase</label>\n  <br>\n\n  <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" checked>\n  <label for=\"numbers\">Include Numbers</label>\n  <br>\n\n  <input type=\"checkbox\" name=\"symbols\" id=\"symbols\" checked>\n  <label for=\"symbols\">Include Symbols</label>\n  <br>\n\n  <button type=\"submit\">Generate Password</button>\n</form>\n\n\n</body>\n</html>\n"}, {"file": "about.html", "path": "password_generator/templates/generator/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>About</title>\n</head>\n<body>\n\n<h1>About This Website</h1>\n<p>Some about information ...</p>\n\n</body>\n</html>"}], "4": [{"file": "urls.py", "path": "qr_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator.urls')),\n]"}, {"file": "urls.py", "path": "qr_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate, name='generate'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qr_generator/views.py", "code": "from django.shortcuts import render\nimport qrcode\nfrom io import BytesIO\nfrom django.core.files.uploadedfile import InMemoryUploadedFile\nimport sys\nfrom PIL import Image\n\n\ndef home(request):\n    return render(request, 'qr_generator/home.html')\n\n\ndef generate(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        box_size = int(request.POST.get('box_size', 10))\n        border_size = int(request.POST.get('border', 4))\n        error_correction = request.POST.get('error_correction', 'M')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        qr = qrcode.QRCode(\n            version=None,\n            error_correction=getattr(qrcode.constants, f'ERROR_CORRECT_{error_correction}'),\n            box_size=box_size,\n            border=border_size,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        buffer = BytesIO()\n        img.save(buffer, \"PNG\")\n        buffer.seek(0)\n\n        img_file = InMemoryUploadedFile(\n            buffer,\n            None,\n            'qrcode.png',\n            'image/png',\n            sys.getsizeof(buffer),\n            None\n        )\n\n        context = {'qr_code': img_file}\n        return render(request, 'qr_generator/generate.html', context)\n    return render(request, 'qr_generator/generate.html')\n\n\ndef about(request):\n    return render(request, 'qr_generator/about.html')"}, {"file": "home.html", "path": "qr_generator/templates/qr_generator/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Welcome to the QR Code Generator!</h1>\n<p>This website allows you to easily generate QR codes for any text or URL.</p>\n<a href=\"{% url 'generate' %}\" class=\"btn btn-primary\">Generate QR Code</a>\n{% endblock %}"}, {"file": "generate.html", "path": "qr_generator/templates/qr_generator/generate.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>QR Code Generator</h1>\n<form method=\"post\">\n    {% csrf_token %}\n    <input type=\"text\" name=\"data\" placeholder=\"Enter text or URL\" required>\n    <input type=\"number\" name=\"box_size\" placeholder=\"Box Size (Max 128)\" value=\"10\" min=\"1\" max=\"128\" required>\n    <select name=\"error_correction\">\n        <option value=\"L\">Small</option>\n        <option value=\"M\" selected>Medium</option>\n        <option value=\"Q\">Large</option>\n        <option value=\"H\">Extra Large</option>\n    </select>\n    <input type=\"number\" name=\"border\" placeholder=\"Border Size (Max 10)\" value=\"4\" min=\"1\" max=\"10\" required>\n    <input type=\"color\" name=\"fill_color\" value=\"#000000\">\n    <input type=\"color\" name=\"back_color\" value=\"#ffffff\">\n    <button type=\"submit\">Generate</button>\n</form>\n\n{% if qr_code %}\n<img src=\"data:image/png;base64,{{ qr_code | slice:\"2:-1\" }}\" alt=\"QR Code\">\n<a href=\"data:image/png;base64,{{ qr_code | slice:\"2:-1\" }}\" download=\"qrcode.png\">Download</a>\n{% endif %}\n{% endblock %}"}, {"file": "about.html", "path": "qr_generator/templates/qr_generator/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>About Us</h1>\n<p>This is a simple QR code generator website built with Django.</p>\n{% endblock %}"}, {"file": "base.html", "path": "qr_generator/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a>\n        <a href=\"{% url 'about' %}\">About</a>\n    </nav>\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}], "5": [{"file": "urls.py", "path": "converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "converter/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'converter/home.html')\n\n\ndef convert(request):\n    return render(request, 'converter/convert.html')\n\n\ndef about(request):\n    return render(request, 'converter/about.html')\n"}, {"file": "home.html", "path": "converter/templates/converter/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome to the Markdown to HTML Converter</h1>\n    <p>This tool allows you to easily convert Markdown text to HTML.</p>\n    <a href=\"{% url 'convert' %}\">Convert</a>\n    <a href=\"{% url 'about' %}\">About</a>\n{% endblock %}"}, {"file": "convert.html", "path": "converter/templates/converter/convert.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Convert Markdown to HTML</h1>\n\n    <textarea id=\"markdown-input\"></textarea>\n    <button id=\"convert-button\">Convert</button>\n\n    <div id=\"html-output\"></div>\n\n    <input type=\"file\" id=\"upload-file\">\n    <button id=\"download-html\">Download HTML</button>\n{% endblock %}"}, {"file": "about.html", "path": "converter/templates/converter/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>About this project</h1>\n\n    <h2>Team</h2>\n    <p>Your team here!</p>\n\n    <h2>FAQ</h2>\n{% endblock %}"}, {"file": "base.html", "path": "converter/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown to HTML Converter</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "6": [{"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('lists/', views.todo_lists, name='todo_lists'),\n    path('lists/<int:list_id>/', views.todo_list, name='todo_list'),\n    path('tasks/<int:task_id>/', views.task, name='task'),\n    path('analysis/', views.analysis, name='analysis'),\n]"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'todo_app/home.html')\n\ndef todo_lists(request):\n    return render(request, 'todo_app/todo_lists.html')\n\ndef todo_list(request, list_id):\n    return render(request, 'todo_app/todo_list.html', {'list_id': list_id})\n\ndef task(request, task_id):\n    return render(request, 'todo_app/task.html', {'task_id': task_id})\n\ndef analysis(request):\n    return render(request, 'todo_app/analysis.html')"}, {"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n    list = models.ForeignKey(TodoList, on_delete=models.CASCADE)"}, {"file": "home.html", "path": "todo_app/templates/todo_app/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Dashboard</h1>\n<a href=\"{% url 'todo_lists' %}\">Todo Lists</a>\n{% endblock %}"}, {"file": "todo_lists.html", "path": "todo_app/templates/todo_app/todo_lists.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Todo Lists</h1>\n{/* Display Todo Lists and 'Create New List' functionality */}\n{% endblock %}"}, {"file": "todo_list.html", "path": "todo_app/templates/todo_app/todo_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Todo List {{ list_id }}</h1>\n{/* Display tasks for the specified list */}\n{% endblock %}"}, {"file": "task.html", "path": "todo_app/templates/todo_app/task.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Task {{ task_id }}</h1>\n{/* Display/Edit/Delete Task and 'Mark as Completed' functionality */}\n{% endblock %}"}, {"file": "analysis.html", "path": "todo_app/templates/todo_app/analysis.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Analysis</h1>\n{/* Display charts */}\n{% endblock %}"}], "7": [{"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('reports/', views.reports, name='reports'),\n    path('settings1/', views.settings1, name='settings1'),\n    path('settings2/', views.settings2, name='settings2'),\n    path('help/', views.help, name='help'),\n]"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'budget_control/home.html')\n\ndef balance_tracker(request):\n    return render(request, 'budget_control/balance_tracker.html')\n\ndef reports(request):\n    return render(request, 'budget_control/reports.html')\n\ndef settings1(request):\n    return render(request, 'budget_control/settings1.html')\n\n\ndef settings2(request):\n    return render(request, 'budget_control/settings2.html')\n\ndef help(request):\n    return render(request, 'budget_control/help.html')\n"}, {"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateField()\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n    description = models.TextField(blank=True)\n"}, {"file": "forms.py", "path": "budget_control/forms.py", "code": "from django import forms\nfrom .models import Transaction, Category\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['amount', 'date', 'category', 'description']\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']"}, {"file": "admin.py", "path": "budget_control/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction, Category\n\nadmin.site.register(Transaction)\nadmin.site.register(Category)"}], "8": [{"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar, name='calendar'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/add/', views.add_event, name='add_event'),\n     path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('events/', views.all_events, name='all_events'),\n    path('help/', views.help, name='help'),\n]"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Event\nfrom django.utils import timezone # Import timezone\n\ndef home(request):\n    current_date = timezone.now().date() # Get current date using timezone\n    context = {'current_date': current_date}\n    return render(request, 'calendar_app/home.html', context)\n\ndef calendar(request):\n    return render(request, 'calendar_app/calendar.html')\n\n\ndef event_details(request, event_id):\n    event = Event.objects.get(pk=event_id)\n    return render(request, 'calendar_app/event_details.html', {'event': event})\n\ndef add_event(request):\n    if request.method == 'POST':\n        # Process form data and create event\n        return redirect('home')  # Redirect to home page after adding event\n    return render(request, 'calendar_app/add_event.html')\n\ndef edit_event(request, event_id):\n    event = Event.objects.get(pk=event_id)\n    if request.method == 'POST':\n        # Update\n        return redirect('event_details', event_id=event.id)\n    return render(request, 'calendar_app/edit_event.html', {'event': event})\n\ndef delete_event(request, event_id):\n    event = Event.objects.get(pk=event_id)\n    event.delete()\n    return redirect('calendar') # redirect to calendar\n\ndef all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/all_events.html', {'events': events})\n\ndef help(request):\n    return render(request, 'calendar_app/help.html')"}, {"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    date = models.DateTimeField()\n    # ... other fields as needed\n\n    def __str__(self):\n        return self.title"}, {"file": "home.html", "path": "calendar_app/templates/calendar_app/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<p>Current Date: {{ current_date }}</p>\n{% endblock %}"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar_app/calendar.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Calendar</h1>\n{% endblock %}"}, {"file": "event_details.html", "path": "calendar_app/templates/calendar_app/event_details.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>{{ event.title }}</h1>\n<p>Date: {{ event.date }}</p>\n<p>Description: {{ event.description }}</p>\n<a href=\"{% url 'edit_event' event.id %}\">Edit</a> |\n<a href=\"{% url 'delete_event' event.id %}\">Delete</a>\n{% endblock %}"}, {"file": "add_event.html", "path": "calendar_app/templates/calendar_app/add_event.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Add Event</h1>\n<form method=\"post\">\n    {% csrf_token %}\n    </form>\n{% endblock %}"}, {"file": "edit_event.html", "path": "calendar_app/templates/calendar_app/edit_event.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Edit Event</h1>\n<form method=\"post\">\n    {% csrf_token %}\n    </form>\n{% endblock %}"}, {"file": "all_events.html", "path": "calendar_app/templates/calendar_app/all_events.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>All Events</h1>\n<ul>\n{% for event in events %}\n    <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a></li>\n{% endfor %}\n</ul>\n{% endblock %}"}, {"file": "help.html", "path": "calendar_app/templates/calendar_app/help.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Help</h1>\n{% endblock %}"}], "9": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about/', views.about, name='about'),\n    path('support/', views.support, name='support'),\n]"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef features(request):\n    return render(request, 'features.html')\n\ndef pricing(request):\n    return render(request, 'pricing.html')\n\ndef about(request):\n    return render(request, 'about.html')\n\ndef support(request):\n    return render(request, 'support.html')\n"}, {"file": "home.html", "path": "myproject/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    {/* Product Overview */}\n{% endblock %}"}, {"file": "features.html", "path": "myproject/templates/features.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    {/* List Key Features */}\n{% endblock %}"}, {"file": "pricing.html", "path": "myproject/templates/pricing.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    {/* View Pricing Plans */}\n    {/* Contact Sales Form (Optional) */}\n{% endblock %}"}, {"file": "about.html", "path": "myproject/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    {/* Company Background */}\n{% endblock %}"}, {"file": "support.html", "path": "myproject/templates/support.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    {/* FAQ */}\n    {/* Support Message Form (Optional) */}\n{% endblock %}"}, {"file": "base.html", "path": "myproject/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot Website</title>\n</head>\n<body>\n    <header>\n        <nav>\n            <a href=\"{% url 'home' %}\">Home</a>\n            <a href=\"{% url 'features' %}\">Features</a>\n            <a href=\"{% url 'pricing' %}\">Pricing</a>\n            <a href=\"{% url 'about' %}\">About Us</a>\n            <a href=\"{% url 'support' %}\">Support</a>\n        </nav>\n    </header>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n    <footer>\n\n    </footer>\n</body>\n</html>"}], "10": [{"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal_log/', views.meal_log, name='meal_log'),\n    path('activity_log/', views.activity_log, name='activity_log'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help, name='help'),\n    # Add paths for other functionalities (signup, login, add meal, etc.)\n]"}, {"file": "views.py", "path": "calorie_tracker/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'calorie_tracker/home.html')\n\ndef dashboard(request):\n    return render(request, 'calorie_tracker/dashboard.html')\n\ndef meal_log(request):\n    return render(request, 'calorie_tracker/meal_log.html')\n\ndef activity_log(request):\n    return render(request, 'calorie_tracker/activity_log.html')\n\ndef analysis(request):\n    return render(request, 'calorie_tracker/analysis.html')\n\ndef settings(request):\n    return render(request, 'calorie_tracker/settings.html')\n\ndef help(request):\n    return render(request, 'calorie_tracker/help.html')"}, {"file": "models.py", "path": "calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n# Create your models here.\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    # Add other fields for meal information\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    # Add other fields for activity information"}, {"file": "forms.py", "path": "calorie_tracker/forms.py", "code": "from django import forms\nfrom .models import Meal, Activity\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        # Specify fields\n\nclass ActivityForm(forms.ModelForm):\n    class Meta:\n        model = Activity\n        # Specify fields"}, {"file": "home.html", "path": "calorie_tracker/templates/calorie_tracker/home.html", "code": "<!-- Home page content -->"}, {"file": "dashboard.html", "path": "calorie_tracker/templates/calorie_tracker/dashboard.html", "code": "<!-- Dashboard content -->"}, {"file": "meal_log.html", "path": "calorie_tracker/templates/calorie_tracker/meal_log.html", "code": "<!-- Meal log content -->"}, {"file": "activity_log.html", "path": "calorie_tracker/templates/calorie_tracker/activity_log.html", "code": "<!-- Activity log content -->"}, {"file": "analysis.html", "path": "calorie_tracker/templates/calorie_tracker/analysis.html", "code": "<!-- Analysis content -->"}, {"file": "settings.html", "path": "calorie_tracker/templates/calorie_tracker/settings.html", "code": "<!-- Settings content -->"}, {"file": "help.html", "path": "calorie_tracker/templates/calorie_tracker/help.html", "code": "<!-- Help content -->"}], "11": "```json\n[\n    {\n        \"file\": \"views.py\",\n        \"path\": \"app/views.py\",\n        \"code\": \"\"\"\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nimport json\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef about(request):\n    return render(request, 'about.html')\n\n\n@csrf_exempt\ndef upload_json(request):\n    if request.method == 'POST':\n        try:\n            uploaded_file = request.FILES['json_file']\n            data = json.loads(uploaded_file.read().decode('utf-8'))  # Load JSON data\n            # Process the data (e.g., store it in a database)\n            return HttpResponse(\"File uploaded successfully.\")  # Or redirect as needed\n        except json.JSONDecodeError as e:  # Handle JSON decoding errors\n            return HttpResponse(f\"Error decoding JSON: {e}\", status=400)\n        except Exception as e: # Handle other potential errors during file processing\n            return HttpResponse(f\"Error processing file: {e}\", status=500)\n\n    return HttpResponse(\"Invalid request method.\", status=405) # Handle incorrect request method\n\n\n\n\"\"\"\n    },\n    {\n        \"file\": \"urls.py\",\n        \"path\": \"project/urls.py\",\n        \"code\": \"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\nfrom app import views  # Import your views\n\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('upload_json/', views.upload_json, name='upload_json') # URL for handling JSON upload\n]\n\"\"\"\n    },\n    {\n        \"file\": \"home.html\",\n        \"path\": \"app/templates/home.html\",\n        \"code\": \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n\n    <h1>Welcome!</h1>\n\n    <form method=\"post\" action=\"{% url 'upload_json' %}\" enctype=\"multipart/form-data\"> {% csrf_token %}\n        <input type=\"file\" name=\"json_file\" accept=\".json\">\n        <button type=\"submit\">Upload</button>\n    </form>\n\n    <select id=\"statusSelect\">\n        <option value=\"select\">Select</option>\n        <option value=\"pass\">Pass</option>\n        <option value=\"fail\">Fail</option>\n    </select>\n    <button type=\"submit\">Submit Status</button>\n\n\n    <textarea id=\"reviewNotes\" placeholder=\"Enter your review notes here\"></textarea>\n\n\n\n\n</body>\n</html>\n\"\"\"\n    },\n    {\n        \"file\": \"about.html\",\n        \"path\": \"app/templates/about.html\",\n        \"code\": \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About Us</h1>\n    <p>This website allows you to review test code and provide feedback.</p>\n\n</body>\n</html>\n\"\"\"\n    }\n\n]\n```", "12": [{"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login, name='login'),\n    path('employee/', views.employee_portal, name='employee_portal'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('view_claim_status/', views.view_claim_status, name='view_claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('admin/', views.admin_portal, name='admin_portal'),\n    path('approve_claim/<int:claim_id>/', views.approve_claim, name='approve_claim'),\n    path('reject_claim/<int:claim_id>/', views.reject_claim, name='reject_claim'),\n    path('view_claim_details/<int:claim_id>/', views.view_claim_details, name='view_claim_details'),\n    path('search_filter_claims/', views.search_filter_claims, name='search_filter_claims'),\n\n    path('budget/', views.budget_control, name='budget_control'),\n    path('analyze_expense_balances/', views.analyze_expense_balances, name='analyze_expense_balances'),\n    path('generate_reports/', views.generate_reports, name='generate_reports'),\n    path('set_budget_limits/', views.set_budget_limits, name='set_budget_limits'),    \n]"}, {"file": "views.py", "path": "expense_tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import *\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.decorators import login_required\n# ... other imports ...\n\ndef home(request):\n    return render(request, 'expense_tracker/home.html')\n\n# ... other view functions\n"}, {"file": "models.py", "path": "expense_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n# Example Claim Model\nclass Claim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=20, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    # ... other claim related fields ...\n    status = models.CharField(max_length=20, choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending')\n\n# Example ExpenseCategory Model for Budget\nclass ExpenseCategory(models.Model):\n    name = models.CharField(max_length=50, unique=True) # e.g. Travel, Labor...\n    budget_limit = models.DecimalField(max_digits=10, decimal_places=2)\n"}, {"file": "forms.py", "path": "expense_tracker/forms.py", "code": "from django import forms\nfrom .models import Claim, ExpenseCategory\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['claim_type', 'description', 'amount', 'supporting_documents'] # Add more fields\n\nclass ExpenseCategoryForm(forms.ModelForm):\n    class Meta:\n        model = ExpenseCategory\n        fields = ['name', 'budget_limit']\n\nclass LoginForm(forms.Form): # For simple login without Django UserCreation\n  username = forms.CharField()\n  password = forms.CharField(widget=forms.PasswordInput)"}, {"file": "home.html", "path": "expense_tracker/templates/expense_tracker/home.html", "code": "<!-- Welcome message, login, and sign-up form -->\n<h1>Welcome to Expense Tracker</h1>\n<a href=\"{% url 'login' %}\">Login</a>\n<a href=\"{% url 'signup' %}\">Sign Up</a>\n"}], "13": [{"file": "urls.py", "path": "app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('customer/', views.customer_management, name='customer_management'),\n    path('customer/add/', views.add_customer, name='add_customer'),\n    path('customer/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customer/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customer/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n    path('product/', views.product_management, name='product_management'),\n    path('product/add/', views.add_product, name='add_product'),\n    path('product/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('product/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('product/view/<int:product_id>/', views.view_product, name='view_product'),\n    path('purchase/', views.purchase_records, name='purchase_records'),\n    path('purchase/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchase/edit/<int:purchase_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchase/delete/<int:purchase_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchase/view/<int:purchase_id>/', views.view_purchase_record, name='view_purchase_record'),\n    path('preferred_product/', views.preferred_products, name='preferred_products'),\n    path('preferred_product/add/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred_product/edit/<int:preferred_product_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred_product/delete/<int:preferred_product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred_product/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n    path('sales_analysis/', views.sales_analysis, name='sales_analysis'),\n    # ... other paths for sales analysis features\n]"}, {"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'home.html')\n\n# ... other view functions\n"}, {"file": "models.py", "path": "app/models.py", "code": "from django.db import models\n\n# Create your models here.\nclass Customer(models.Model):\n    # ... fields for customer\n\nclass Product(models.Model):\n    # ... fields for product\n\nclass PurchaseRecord(models.Model):\n    # ... fields for purchase record\n\nclass PreferredProduct(models.Model):\n    # ... fields for preferred product\n"}, {"file": "forms.py", "path": "app/forms.py", "code": "from django import forms\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\n# Create your forms here.\nclass CustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = '__all__'\n\n# ... other forms"}, {"file": "home.html", "path": "app/templates/home.html", "code": "<h1>Welcome to the System</h1>\n<p>This system allows you to manage customers, products, purchases, and preferred products. It also provides sales analysis features.</p>"}], "14": "```json\n[\n    {\n        \"file\": \"views.py\",\n        \"path\": \"helloworldapp/views.py\",\n        \"code\": \"\"\"\nfrom django.shortcuts import render\n\ndef helloworld(request):\n    context = {}\n    return render(request, 'helloworldapp/helloworld.html', context)\n\"\"\"\n    },\n    {\n        \"file\": \"urls.py\",\n        \"path\": \"helloworldapp/urls.py\",\n        \"code\": \"\"\"\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.helloworld, name='helloworld'),\n]\n\"\"\"\n    },\n    {\n        \"file\": \"urls.py\",\n        \"path\": \"myproject/urls.py\",\n        \"code\": \"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworldapp.urls')),\n]\n\n\"\"\"\n    },\n    {\n        \"file\": \"helloworld.html\",\n        \"path\": \"helloworldapp/templates/helloworldapp/helloworld.html\",\n        \"code\": \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            font-family: sans-serif;\n        }\n        #helloworld {\n\n        }\n\n    </style>\n</head>\n<body>\n    <div id=\"helloworld\">Hello World</div>\n</body>\n</html>\n\"\"\"\n    }\n]\n```", "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "myproject/templates/home.html", "code": "<a href=\"{% url 'helloworld' %}\">Button to 'HelloWorld' page</a>"}, {"file": "helloworld.html", "path": "myproject/templates/helloworld.html", "code": "<h1>HelloWorld</h1>"}], "16": [{"file": "input_validation.py", "path": "src/input_validation.py", "code": "def CheckFileExistence(filepath):\n    # Implement file existence check\n    pass\n\ndef ValidateHeaders(filepath, expected_headers):\n    # Implement header validation\n    pass\n\ndef ValidateTimeColumn(filepath, allowed_times):\n    # Implement time column validation\n    pass\n\ndef ValidateDataIntegrity(filepath):\n    # Implement data integrity check\n    pass\n\ndef ValidateNullValue(filepath):\n  #check if there are any missing value in the table\n  pass"}, {"file": "data_transformation.py", "path": "src/data_transformation.py", "code": "def TransformToTwoDimensionTable(data):\n    # Implement data transformation to 2D table\n    pass\n\ndef DataMapping(table, data):\n    # Implement data mapping to the 2D table\n    pass"}, {"file": "output_creation.py", "path": "src/output_creation.py", "code": "def CreateOutputExcelFile(filepath):\n    # Implement Excel file creation\n    pass\n\ndef SaveTableToExcel(table, filepath):\n    # Implement saving table data to Excel\n    pass"}, {"file": "main.py", "path": "src/main.py", "code": "from input_validation import *\nfrom data_transformation import *\nfrom output_creation import *\n\nif __name__ == \"__main__\":\n    filepath = 'Spring Semester Subjects.xlsx'\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n    allowed_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n\n    if CheckFileExistence(filepath) and ValidateHeaders(filepath, expected_headers) and ValidateTimeColumn(filepath, allowed_times) and ValidateDataIntegrity(filepath) and ValidateNullValue(filepath):\n      # Read data from the input file (implementation not included)\n      data = None # Placeholder\n      table = TransformToTwoDimensionTable(data) \n      DataMapping(table, data) \n      output_filepath = 'output.xlsx'\n      CreateOutputExcelFile(output_filepath)\n      SaveTableToExcel(table, output_filepath)\n    else:\n        print(\"Input file validation failed.\")"}], "17": [{"file": "DataPreparation.py", "path": "src/DataPreparation.py", "code": "import pandas as pd\n\nclass DataPreparation:\n    def __init__(self, filepath):\n        self.filepath = filepath\n        self.df = None\n\n    def ReadDataset(self):\n        try:\n            self.df = pd.read_excel(self.filepath)\n        except FileNotFoundError:\n            raise FileNotFoundError(f\"File not found: {self.filepath}\")\n\n    def LagDependentVariable(self):\n        if self.df is None:\n            raise ValueError(\"Dataset not loaded. Call ReadDataset() first.\")\n        self.df['lagged_result'] = self.df['result'].shift(1)\n        self.df = self.df.dropna(subset=['lagged_result']) # remove the NaN for lagged column\n\n    def PrepareIndependentVariables(self):\n        if self.df is None:\n            raise ValueError(\"Dataset not loaded. Call ReadDataset() first.\")\n        if self.df.isnull().values.any():\n            raise ValueError(\"Null values found in the dataset.\")\n        if self.df.empty:\n            raise ValueError(\"Dataset is empty.\")\n        self.X = self.df.drop(columns=['result', 'lagged_result'])  # Exclude 'result' and 'lagged_result'\n        self.y = self.df['lagged_result']"}, {"file": "ModelCreation.py", "path": "src/ModelCreation.py", "code": "from sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm\n\nclass ModelCreation:\n    def __init__(self, X, y):\n        self.X = X\n        self.y = y\n        self.model = None\n        self.model_summary = None\n\n    def CreateLogisticModel(self):\n        self.X = sm.add_constant(self.X)  # For statsmodels' intercept handling\n        self.model = sm.Logit(self.y, self.X).fit()\n\n    def GenerateModelSummary(self):\n        if self.model is None:\n            raise ValueError(\"Model not created. Call CreateLogisticModel() first.\")\n        self.model_summary = self.model.summary().as_text()"}, {"file": "Output.py", "path": "src/Output.py", "code": "class Output:\n    def __init__(self, model_summary):\n        self.model_summary = model_summary\n\n    def WriteSummary(self, output_filepath):\n        try:\n            with open(output_filepath, 'w') as f:\n                f.write(self.model_summary)\n        except Exception as e:\n            raise Exception(f\"Error writing summary to file: {e}\")"}, {"file": "main.py", "path": "src/main.py", "code": "from DataPreparation import DataPreparation\nfrom ModelCreation import ModelCreation\nfrom Output import Output\n\nDATASET_PATH = 'Gamedata.xlsx'\nOUTPUT_PATH = 'Logistic.xlsx'\n\ntry:\n    data_prep = DataPreparation(DATASET_PATH)\n    data_prep.ReadDataset()\n    data_prep.LagDependentVariable()\n    data_prep.PrepareIndependentVariables()\n\n    model_creation = ModelCreation(data_prep.X, data_prep.y)\n    model_creation.CreateLogisticModel()\n    model_creation.GenerateModelSummary()\n\n    output = Output(model_creation.model_summary)\n    output.WriteSummary(OUTPUT_PATH)\n\n    print(f\"Model summary written to {OUTPUT_PATH}\")\n\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "# Main Menu functions\ndef start_game():\n    pass  # Implement start game logic\n\ndef display_instructions():\n    pass  # Implement instructions display\n\ndef exit_game():\n    pass  # Implement exit game logic"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "# Game Environment functions\ndef move_player(direction):\n    pass  # Implement player movement\n\ndef look_around():\n    pass  # Implement room description display\n\ndef pick_item():\n    pass  # Implement item pickup\n\ndef check_inventory():\n    pass  # Implement inventory display"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "# Game Logic functions\ndef parse_command(command):\n    pass  # Implement command parsing\n\ndef update_game_state():\n    pass  # Implement game state updates"}, {"file": "help_support.py", "path": "src/help_support.py", "code": "# Help and Support functions\ndef display_help():\n    pass  # Implement help display"}, {"file": "main.py", "path": "src/main.py", "code": "# Main game loop and integration\nfrom main_menu import *\nfrom game_environment import *\nfrom game_logic import *\nfrom help_support import *\n\ndef main():\n    pass  # Implement main game loop"}], "19": [{"file": "batch_program.py", "path": "somepath/somedir/batch_program.py", "code": "# Required Functions\n\ndef ReadDeathlistData():\n    # Load and read data from 'Deathlist.csv'\n    pass  # Implement logic to read the CSV file\n\ndef ProcessData(data):\n    # Process the dataset for weekly analysis\n    pass # Implement data processing logic\n\ndef CalculateWeeklyDeaths(processed_data):\n    # Calculate weekly deaths\n    pass # Implement weekly aggregation logic\n\ndef GenerateHistogram(weekly_deaths):\n    # Create histogram\n    pass # Implement histogram generation\n\ndef OutputHistogram(histogram):\n    # Display or print histogram\n    pass # Implement output logic\n\n# Optional Function\ndef ValidateDataset(data):\n    # Validate dataset format and content\n    pass  # Implement validation logic\n\n# Main Program\nif __name__ == \"__main__\":\n    # Read data\n    deathlist_data = ReadDeathlistData()\n    \n    # Validate (optional)\n    if ValidateDataset(deathlist_data) is not None:\n        # Process data\n        processed_data = ProcessData(deathlist_data)\n\n        # Calculate weekly deaths\n        weekly_deaths = CalculateWeeklyDeaths(processed_data)\n\n        # Generate histogram\n        histogram = GenerateHistogram(weekly_deaths)\n\n        # Output histogram\n        OutputHistogram(histogram)\n    else:\n        # handle the invalid dataset\n        pass # implement the logic"}], "20": [{"file": "urls.py", "path": "myblog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('blog/<int:post_id>/', views.blog_post, name='blog_post'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('archive/', views.archive, name='archive'),\n]"}, {"file": "views.py", "path": "myblog/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'myblog/home.html')\n\ndef blog_post(request, post_id):\n    return render(request, 'myblog/blog_post.html', {'post_id': post_id})\n\ndef about(request):\n    return render(request, 'myblog/about.html')\n\ndef categories(request):\n    return render(request, 'myblog/categories.html')\n\ndef archive(request):\n    return render(request, 'myblog/archive.html')"}, {"file": "home.html", "path": "myblog/templates/myblog/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n\n{% endblock content %}"}, {"file": "blog_post.html", "path": "myblog/templates/myblog/blog_post.html", "code": "{% extends 'base.html' %}\n{% block content %}\n\n{% endblock content %}"}, {"file": "about.html", "path": "myblog/templates/myblog/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n\n{% endblock content %}"}, {"file": "categories.html", "path": "myblog/templates/myblog/categories.html", "code": "{% extends 'base.html' %}\n{% block content %}\n\n{% endblock content %}"}, {"file": "archive.html", "path": "myblog/templates/myblog/archive.html", "code": "{% extends 'base.html' %}\n{% block content %}\n\n{% endblock content %}"}, {"file": "models.py", "path": "myblog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    pub_date = models.DateTimeField('date published')\n\nclass Category(models.Model):\n    name = models.CharField(max_length=50)\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE)\n    text = models.TextField()\n    created_date = models.DateTimeField(auto_now_add=True)"}, {"file": "admin.py", "path": "myblog/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Category, Comment\n\nadmin.site.register(BlogPost)\nadmin.site.register(Category)\nadmin.site.register(Comment)"}]}