{"1": [{"file": "manage.py", "path": "bmi_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "bmi_project/bmi_project/settings.py", "code": "SECRET_KEY = 'YOUR_SECRET_KEY'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'bmi_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'bmi_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = []\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "bmi_project/bmi_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi_calculator.urls')),\n]"}, {"file": "urls.py", "path": "bmi_project/bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "views.py", "path": "bmi_project/bmi_calculator/views.py", "code": "from django.shortcuts import render\n\ndef bmi_calculator(request):\n    bmi = None\n    category = None\n\n    if request.method == 'POST':\n        weight = float(request.POST.get('weight'))\n        height = float(request.POST.get('height'))\n        bmi = weight / (height ** 2)\n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif 18.5 <= bmi < 25:\n            category = 'Normal weight'\n        elif 25 <= bmi < 30:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n    return render(request, 'bmi_calculator/bmi_calculator.html', {'bmi': bmi, 'category': category})"}, {"file": "models.py", "path": "bmi_project/bmi_calculator/models.py", "code": ""}, {"file": "apps.py", "path": "bmi_project/bmi_calculator/apps.py", "code": "from django.apps import AppConfig\n\nclass BmiCalculatorConfig(AppConfig):\n    name = 'bmi_calculator'"}, {"file": "admin.py", "path": "bmi_project/bmi_calculator/admin.py", "code": ""}, {"file": "bmi_calculator.html", "path": "bmi_project/bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "<form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n    {% csrf_token %}\n    <label for=\"weight-input\" class=\"weight-label\">Weight (kg):</label><br>\n    <input type=\"number\" id=\"weight-input\" class=\"weight-input\" name=\"weight\" step=\"0.1\" required><br>\n    <label for=\"height-input\" class=\"height-label\">Height (m):</label><br>\n    <input type=\"number\" id=\"height-input\" class=\"height-input\" name=\"height\" step=\"0.01\" required><br><br>\n    <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Calculate BMI</button>\n</form>\n\n{% if bmi %}\n    <div id=\"results-div\" class=\"results-div\">\n        <p id=\"bmi-result\" class=\"bmi-result\">Your BMI: {{ bmi }}</p>\n        <p id=\"category-result\" class=\"category-result\">Category: {{ category }}</p>\n    </div>\n{% endif %}"}], "2": [{"file": "manage.py", "path": "currency_converter_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "currency_converter_project/currency_converter_project/settings.py", "code": "\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "currency_converter_project/currency_converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]\n"}, {"file": "urls.py", "path": "currency_converter_project/currency_converter/urls.py", "code": "\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('history/', views.history, name='history'),\n    path('settings/', views.settings, name='settings'),\n    # Add API endpoint for fetching exchange rates\n    path('api/exchange_rate/', views.get_exchange_rate, name='get_exchange_rate'),\n]\n"}, {"file": "views.py", "path": "currency_converter_project/currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import ConversionHistory\nimport requests\n\n# Replace with your actual API key for exchangeratesapi.io, or other API\nAPI_KEY = 'YOUR_API_KEY'\n\ndef home(request):\n    return render(request, 'currency_converter/home.html')\n\n\ndef history(request):\n    history_data = ConversionHistory.objects.order_by('-conversion_time')\n    return render(request, 'currency_converter/history.html', {'history': history_data})\n\n\ndef settings(request):\n    # Placeholder for settings logic\n    return render(request, 'currency_converter/settings.html')\n\n\ndef get_exchange_rate(request):\n    try:\n        from_currency = request.GET.get('from')\n        to_currency = request.GET.get('to')\n        amount = request.GET.get('amount', 1)  # Default amount to 1 if not provided\n\n        url = f'https://openexchangerates.org/api/latest.json?app_id={API_KEY}&base={from_currency}&symbols={to_currency}'\n        response = requests.get(url)\n        response.raise_for_status() # Raise HTTPError for bad responses (4xx or 5xx)\n        data = response.json()\n        exchange_rate = data['rates'][to_currency]\n        converted_amount = float(amount) * exchange_rate\n\n        # Save conversion history\n        ConversionHistory.objects.create(\n            source_currency=from_currency,\n            target_currency=to_currency,\n            amount=amount,\n            converted_amount=converted_amount,\n            exchange_rate=exchange_rate\n        )\n\n        return JsonResponse({'exchange_rate': exchange_rate, 'converted_amount': converted_amount})\n\n    except requests.exceptions.RequestException as e:\n        return JsonResponse({'error': str(e)}, status=500) # Return 500 for API errors\n    except Exception as e:\n        return JsonResponse({'error': 'An unexpected error occurred'}, status=500)\n"}, {"file": "models.py", "path": "currency_converter_project/currency_converter/models.py", "code": "\nfrom django.db import models\n\n# Model for storing conversion history\nclass ConversionHistory(models.Model):\n    source_currency = models.CharField(max_length=3)\n    target_currency = models.CharField(max_length=3)\n    amount = models.DecimalField(max_digits=15, decimal_places=2)\n    converted_amount = models.DecimalField(max_digits=15, decimal_places=2)\n    exchange_rate = models.DecimalField(max_digits=10, decimal_places=5)\n    conversion_time = models.DateTimeField(auto_now_add=True)\n"}, {"file": "home.html", "path": "currency_converter_project/currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"converter\">\n        <label for=\"from-currency\" class=\"from-label\">From:</label>\n        <select id=\"from-currency\" class=\"currency-select\"></select>\n        <br>\n        <label for=\"to-currency\" class=\"to-label\">To:</label>\n        <select id=\"to-currency\" class=\"currency-select\"></select>\n        <br>\n        <label for=\"amount\" class=\"amount-label\">Amount:</label>\n        <input type=\"number\" id=\"amount\" class=\"amount-input\" value=\"1\">\n        <br>\n        <button id=\"convert-button\" class=\"convert-button\">Convert</button>\n        <div id=\"result\" class=\"result-container\"></div>\n    </div>\n\n\n    <script>\n        const fromCurrencySelect = document.getElementById('from-currency');\n        const toCurrencySelect = document.getElementById('to-currency');\n        const amountInput = document.getElementById('amount');\n        const convertButton = document.getElementById('convert-button');\n        const resultDiv = document.getElementById('result');\n\n        // Sample currency codes (replace with your actual currency list)\n        const currencies = ['USD', 'EUR', 'GBP', 'JPY', 'CAD', 'AUD'];\n\n        // Populate currency selects\n        currencies.forEach(currency => {\n            const option1 = document.createElement('option');\n            option1.value = currency; \n            option1.text = currency;\n            fromCurrencySelect.add(option1);\n\n            const option2 = document.createElement('option');\n            option2.value = currency;\n            option2.text = currency;\n            toCurrencySelect.add(option2);\n        });\n\n        convertButton.addEventListener('click', () => {\n            const from = fromCurrencySelect.value;\n            const to = toCurrencySelect.value;\n            const amount = amountInput.value;\n\n            fetch(`/api/exchange_rate/?from=${from}&to=${to}&amount=${amount}`)\n                .then(response => {\n                    if (!response.ok) { // Check if the response status is not ok\n                        throw new Error(`HTTP error! status: ${response.status}`);\n                    }\n                    return response.json();\n                })\n                .then(data => {\n                    if (data.error) { // Check for 'error' key in response\n                        resultDiv.textContent = `Error: ${data.error}`;\n                    } else {\n                        resultDiv.textContent = `${amount} ${from} = ${data.converted_amount} ${to}`;\n                    }\n                })\n                .catch(error => {\n                    console.error('Error fetching exchange rate:', error);\n                    resultDiv.textContent = `Error: ${error.message}`;\n                });\n        });\n    </script>\n</body>\n</html>\n"}, {"file": "history.html", "path": "currency_converter_project/currency_converter/templates/currency_converter/history.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Conversion History</title>\n</head>\n<body>\n    <h1>Conversion History</h1>\n    <table id=\"history-table\" class=\"history-table\">\n        <thead>\n            <tr>\n                <th>From</th>\n                <th>To</th>\n                <th>Amount</th>\n                <th>Converted Amount</th>\n                <th>Rate</th>\n                <th>Time</th>\n            </tr>\n        </thead>\n        <tbody>\n        {% for item in history %}\n            <tr>\n                <td>{{ item.source_currency }}</td>\n                <td>{{ item.target_currency }}</td>\n                <td>{{ item.amount }}</td>\n                <td>{{ item.converted_amount }}</td>\n                <td>{{ item.exchange_rate }}</td>\n                <td>{{ item.conversion_time }}</td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "currency_converter_project/currency_converter/templates/currency_converter/settings.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Settings</title>\n</head>\n<body>\n  <h1>Settings</h1>\n\n  <form id=\"settings-form\" class=\"settings-form\" method=\"post\">  </form>  \n</body>\n</html>\n"}, {"file": "wsgi.py", "path": "currency_converter_project/currency_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "currency_converter_project/currency_converter_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter_project/currency_converter_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "currency_converter_project/currency_converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "currency_converter_project/currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import ConversionHistory\n\nadmin.site.register(ConversionHistory)\n"}, {"file": "apps.py", "path": "currency_converter_project/currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'\n"}], "4": [{"file": "manage.py", "path": "qr_code_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "qr_code_project/qr_code_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "qr_code_project/qr_code_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator.urls')),\n]"}, {"file": "urls.py", "path": "qr_code_project/qr_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('customize/', views.customize, name='customize'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qr_code_project/qr_generator/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef homepage(request):\n    return render(request, 'qr_generator/homepage.html')\n\ndef customize(request):\n    return render(request, 'qr_generator/customize.html')\n\ndef about(request):\n    return render(request, 'qr_generator/about.html')\n"}, {"file": "homepage.html", "path": "qr_code_project/qr_generator/templates/qr_generator/homepage.html", "code": "<form id=\"homepage-form\" class=\"homepage-form\" method=\"post\">\n    {% csrf_token %}\n    <label for=\"input-text\" class=\"input-label\">Enter Text/URL:</label>\n    <input type=\"text\" id=\"input-text\" name=\"input-text\" class=\"input-field\">\n    <button type=\"submit\" id=\"generate-button\" class=\"generate-button\">Generate QR Code</button>\n    <div id=\"qr-code-container\" class=\"qr-code-container\">\n      <!-- QR code will be displayed here -->\n    </div>\n    <a href=\"{% url 'customize' %}\" id=\"customize-link\" class=\"customize-link\">Customize QR Code</a>\n</form>"}, {"file": "customize.html", "path": "qr_code_project/qr_generator/templates/qr_generator/customize.html", "code": "<form id=\"customize-form\" class=\"customize-form\" method=\"post\">\n    {% csrf_token %}\n    <label for=\"color-picker\" class=\"color-label\">Select Color:</label>\n    <input type=\"color\" id=\"color-picker\" name=\"color\" class=\"color-picker\">\n\n    <label for=\"logo-upload\" class=\"logo-label\">Add Logo:</label>\n    <input type=\"file\" id=\"logo-upload\" name=\"logo\" class=\"logo-upload\">\n \n    <label for=\"error-correction\" class=\"error-label\">Error Correction:</label>\n    <select id=\"error-correction\" name=\"error-correction\" class=\"error-dropdown\">\n        <option value=\"L\">L</option>\n        <option value=\"M\">M</option>\n        <option value=\"Q\">Q</option>\n        <option value=\"H\">H</option>\n    </select>\n    <div id=\"qr-code-preview\" class=\"qr-code-preview\">\n        <!-- Preview customized QR code here -->\n    </div>\n\n</form>"}, {"file": "about.html", "path": "qr_code_project/qr_generator/templates/qr_generator/about.html", "code": "<div id=\"about-container\" class=\"about-container\">\n    <h1 id=\"about-title\" class=\"about-title\">About Us</h1>\n    <p id=\"about-text\" class=\"about-text\">Learn about our company/website here.</p>\n    <p id=\"contact-info\" class=\"contact-info\">Contact us at: info@example.com</p>\n</div>"}, {"file": "models.py", "path": "qr_code_project/qr_generator/models.py", "code": ""}, {"file": "forms.py", "path": "qr_code_project/qr_generator/forms.py", "code": ""}, {"file": "wsgi.py", "path": "qr_code_project/qr_code_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "qr_code_project/qr_code_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_project.settings')\n\napplication = get_asgi_application()"}], "5": [{"file": "manage.py", "path": "markdown_converter/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "mysite/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'markdown_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('markdown_converter.urls')),\n]"}, {"file": "views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\n\ndef main_page(request):\n    return render(request, 'main_page.html')\n\n# Optional: Settings/Preferences\ndef settings(request):\n    return render(request, 'settings.html')\n\n# Optional: Examples/Help\ndef examples(request):\n    return render(request, 'examples.html')"}, {"file": "urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.main_page, name='main_page'),\n    # Optional: Settings/Preferences\n    path('settings/', views.settings, name='settings'),\n    # Optional: Examples/Help\n    path('examples/', views.examples, name='examples'),\n]"}, {"file": "main_page.html", "path": "markdown_converter/templates/main_page.html", "code": "<textarea id=\"markdown-input\" class=\"markdown-input\"></textarea>\n<div id=\"html-output\" class=\"html-output\"></div>\n<button id=\"convert-button\" class=\"convert-button\">Convert</button>\n<button id=\"copy-button\" class=\"copy-button\">Copy HTML</button>\n<button id=\"clear-input\" class=\"clear-input\">Clear Input</button>\n<button id=\"clear-output\" class=\"clear-output\">Clear Output</button>"}, {"file": "settings.html", "path": "markdown_converter/templates/settings.html", "code": "<!-- Optional Settings -->"}, {"file": "examples.html", "path": "markdown_converter/templates/examples.html", "code": "<!-- Optional Examples/Help -->"}, {"file": "asgi.py", "path": "mysite/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "mysite/__init__.py", "code": ""}, {"file": "__init__.py", "path": "markdown_converter/__init__.py", "code": ""}], "6": [{"file": "manage.py", "path": "todo_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "todo_project/todo_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "todo_project/todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]"}, {"file": "asgi.py", "path": "todo_project/todo_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "todo_project/todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "todo_project/todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('analytics/', views.analytics, name='analytics'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "views.py", "path": "todo_project/todo_app/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'todo_app/home.html')\n\ndef analytics(request):\n    return render(request, 'todo_app/analytics.html')\n\ndef settings(request):\n    return render(request, 'todo_app/settings.html')\n\n"}, {"file": "models.py", "path": "todo_project/todo_app/models.py", "code": "from django.db import models\n\nclass Todo(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    due_date = models.DateField(null=True, blank=True)\n    completed = models.BooleanField(default=False)\n    # Add other fields like project/tag, creation_date etc. as needed\n\n    def __str__(self):\n        return self.title"}, {"file": "home.html", "path": "todo_project/todo_app/templates/todo_app/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1 id=\"home-title\" class=\"title\">Home</h1>\n    <p id=\"home-description\" class=\"description\">Todo List Functionality</p>\n{% endblock %}"}, {"file": "analytics.html", "path": "todo_project/todo_app/templates/todo_app/analytics.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1 id=\"analytics-title\" class=\"title\">Analytics</h1>\n    <p id=\"analytics-description\" class=\"description\">Charts and Data Visualization</p>\n{% endblock %}"}, {"file": "settings.html", "path": "todo_project/todo_app/templates/todo_app/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n    <p id=\"settings-description\" class=\"description\">Manage Account and Preferences</p>\n{% endblock %}"}, {"file": "base.html", "path": "todo_project/todo_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>{% block title %}{% endblock %}</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "7": [{"file": "manage.py", "path": "budget_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "budget_project/budget_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "budget_project/budget_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget_app.urls')),\n]"}, {"file": "wsgi.py", "path": "budget_project/budget_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "budget_project/budget_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_project.settings')\n\napplication = get_asgi_application()"}, {"file": "urls.py", "path": "budget_project/budget_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('transactions/', views.transactions, name='transactions'),\n    path('budget/', views.budget, name='budget'),\n    path('reports/', views.reports, name='reports'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "views.py", "path": "budget_project/budget_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'budget_app/home.html')\n\ndef dashboard(request):\n    return render(request, 'budget_app/dashboard.html')\n\ndef transactions(request):\n    return render(request, 'budget_app/transactions.html')\n\ndef budget(request):\n    return render(request, 'budget_app/budget.html')\n\ndef reports(request):\n    return render(request, 'budget_app/reports.html')\n\ndef settings(request):\n    return render(request, 'budget_app/settings.html')\n"}, {"file": "models.py", "path": "budget_project/budget_app/models.py", "code": "from django.db import models\n\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateField()\n    category = models.CharField(max_length=255)\n    description = models.TextField()\n\n# Other models like Budget, Category, etc. can be added here"}, {"file": "forms.py", "path": "budget_project/budget_app/forms.py", "code": "from django import forms\nfrom .models import Transaction\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['amount', 'date', 'category', 'description'] # Add fields as needed"}, {"file": "home.html", "path": "budget_project/budget_app/templates/budget_app/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Budget App</h1>\n        <!-- Sign Up, Log In, Demo Account forms/links -->\n    </div>\n{% endblock %}"}, {"file": "dashboard.html", "path": "budget_project/budget_app/templates/budget_app/dashboard.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"dashboard-container\" class=\"container\">\n        <h1 id=\"dashboard-title\" class=\"title\">Dashboard</h1>\n        <!-- Display balance, chart, add transaction button, etc. -->\n    </div>\n{% endblock %}"}, {"file": "transactions.html", "path": "budget_project/budget_app/templates/budget_app/transactions.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"transactions-container\" class=\"container\">\n        <h1 id=\"transactions-title\" class=\"title\">Transactions</h1>\n        <!-- Display list of transactions, filtering options, etc. -->\n    </div>\n{% endblock %}"}, {"file": "budget.html", "path": "budget_project/budget_app/templates/budget_app/budget.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"budget-container\" class=\"container\">\n        <h1 id=\"budget-title\" class=\"title\">Budget</h1>\n        <!-- Display budget limits, progress, and options to adjust limits -->\n    </div>\n{% endblock %}"}, {"file": "reports.html", "path": "budget_project/budget_app/templates/budget_app/reports.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"reports-container\" class=\"container\">\n        <h1 id=\"reports-title\" class=\"title\">Reports</h1>\n        <!-- Display options for generating and exporting reports -->\n    </div>\n{% endblock %}"}, {"file": "settings.html", "path": "budget_project/budget_app/templates/budget_app/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"settings-container\" class=\"container\">\n        <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n        <!-- Options for changing password, managing account details, and contacting support -->\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "budget_project/budget_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Budget App</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "8": [{"file": "manage.py", "path": "my_calendar_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "my_calendar_project/my_calendar_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'my_calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'my_calendar_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "my_calendar_project/my_calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "urls.py", "path": "my_calendar_project/calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.landing_page, name='landing_page'),\n    path('calendar/', views.main_calendar_view, name='main_calendar_view'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('settings/', views.settings, name='settings'),\n    # Add paths for sign-up, login, guest view, etc.\n]"}, {"file": "views.py", "path": "my_calendar_project/calendar_app/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef landing_page(request):\n    return render(request, 'calendar_app/landing_page.html')\n\ndef main_calendar_view(request):\n    return render(request, 'calendar_app/main_calendar_view.html')\n\ndef event_details(request, event_id):\n    return render(request, 'calendar_app/event_details.html', {'event_id': event_id})\n\ndef settings(request):\n    return render(request, 'calendar_app/settings.html')"}, {"file": "models.py", "path": "my_calendar_project/calendar_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n# Create your models here.\nclass Event(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    # Add other fields like reminders, sharing, RSVP, etc."}, {"file": "forms.py", "path": "my_calendar_project/calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time'] # Add other fields as needed"}, {"file": "landing_page.html", "path": "my_calendar_project/calendar_app/templates/calendar_app/landing_page.html", "code": "<div id=\"landing-page-container\" class=\"landing-page\">\n    <h1 id=\"landing-page-title\" class=\"title\">Welcome to the Calendar App</h1>\n    <a id=\"view-calendar-link\" class=\"link\" href=\"{% url 'main_calendar_view' %}\">View Calendar</a>\n</div>"}, {"file": "main_calendar_view.html", "path": "my_calendar_project/calendar_app/templates/calendar_app/main_calendar_view.html", "code": "<div id=\"calendar-container\" class=\"calendar-view\">\n    <h1 id=\"calendar-title\" class=\"title\">Calendar</h1>\n    </div>"}, {"file": "event_details.html", "path": "my_calendar_project/calendar_app/templates/calendar_app/event_details.html", "code": "<div id=\"event-details-container\" class=\"event-details\">\n    <h1 id=\"event-details-title\" class=\"title\">Event Details</h1>\n    <p id=\"event-id-paragraph\" class=\"event-id\">Event ID: {{ event_id }}</p>\n</div>"}, {"file": "settings.html", "path": "my_calendar_project/calendar_app/templates/calendar_app/settings.html", "code": "<div id=\"settings-container\" class=\"settings-page\">\n    <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n</div>"}, {"file": "wsgi.py", "path": "my_calendar_project/my_calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "my_calendar_project/my_calendar_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_calendar_project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "my_calendar_project/my_calendar_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "my_calendar_project/calendar_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "my_calendar_project/calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "apps.py", "path": "my_calendar_project/calendar_app/apps.py", "code": "from django.apps import AppConfig\n\nclass CalendarAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calendar_app'"}, {"file": "tests.py", "path": "my_calendar_project/calendar_app/tests.py", "code": ""}], "9": [{"file": "manage.py", "path": "my_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\\n            available on your PYTHONPATH environment variable? Did you \\\n            forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "my_project/my_project/settings.py", "code": "import os\n\n# Build paths inside the project like os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'my_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'my_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'my_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "my_project/my_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('my_app.urls')),\n]\n"}, {"file": "urls.py", "path": "my_project/my_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('contact/', views.contact, name='contact'),\n]\n"}, {"file": "views.py", "path": "my_project/my_app/views.py", "code": "from django.shortcuts import render\n\ndef homepage(request):\n    return render(request, 'my_app/homepage.html')\n\ndef features(request):\n    return render(request, 'my_app/features.html')\n\ndef pricing(request):\n    return render(request, 'my_app/pricing.html')\n\ndef contact(request):\n    return render(request, 'my_app/contact.html')\n"}, {"file": "homepage.html", "path": "my_project/my_app/templates/my_app/homepage.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1 id=\"homepage-title\" class=\"page-title\">Homepage</h1>\n<ul id=\"homepage-list\" class=\"feature-list\">\n    <li id=\"feature-1\" class=\"feature-item\">Understand natural language</li>\n    <li id=\"feature-2\" class=\"feature-item\">Provide helpful and accurate responses</li>\n    <li id=\"feature-3\" class=\"feature-item\">Learn and improve over time</li>\n    <li id=\"feature-4\" class=\"feature-item\">Handle different conversation styles</li>\n</ul>\n{% endblock %}"}, {"file": "features.html", "path": "my_project/my_app/templates/my_app/features.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1 id=\"features-title\" class=\"page-title\">Features</h1>\n<ul id=\"features-list\" class=\"feature-list\">\n    <li id=\"feature-1\" class=\"feature-item\">Personalization</li>\n    <li id=\"feature-2\" class=\"feature-item\">Multi-language support</li>\n    <li id=\"feature-3\" class=\"feature-item\">Seamless integration with other platforms</li>\n    <li id=\"feature-4\" class=\"feature-item\">24/7 availability</li>\n</ul>\n{% endblock %}"}, {"file": "pricing.html", "path": "my_project/my_app/templates/my_app/pricing.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1 id=\"pricing-title\" class=\"page-title\">Pricing</h1>\n<ul id=\"pricing-list\" class=\"pricing-list\">\n    <li id=\"price-1\" class=\"price-item\">Transparent pricing plans</li>\n    <li id=\"price-2\" class=\"price-item\">Flexible subscription options</li>\n    <li id=\"price-3\" class=\"price-item\">Free trial or demo</li>\n</ul>\n{% endblock %}"}, {"file": "contact.html", "path": "my_project/my_app/templates/my_app/contact.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1 id=\"contact-title\" class=\"page-title\">Contact</h1>\n<ul id=\"contact-list\" class=\"contact-list\">\n    <li id=\"contact-1\" class=\"contact-item\">Easy to reach customer support</li>\n    <li id=\"contact-2\" class=\"contact-item\">Responsive and helpful support team</li>\n</ul>\n{% endblock %}"}, {"file": "base.html", "path": "my_project/my_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title id=\"page-title\">My Chatbot</title>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"nav-home\" href=\"{% url 'homepage' %}\" class=\"nav-link\">Homepage</a>\n        <a id=\"nav-features\" href=\"{% url 'features' %}\" class=\"nav-link\">Features</a>\n        <a id=\"nav-pricing\" href=\"{% url 'pricing' %}\" class=\"nav-link\">Pricing</a>\n        <a id=\"nav-contact\" href=\"{% url 'contact' %}\" class=\"nav-link\">Contact</a>\n    </nav>\n    <main id=\"main-content\">\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "wsgi.py", "path": "my_project/my_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "my_project/my_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "my_project/my_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "my_project/my_project/__init__.py", "code": ""}, {"file": "apps.py", "path": "my_project/my_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'my_app'\n"}, {"file": "admin.py", "path": "my_project/my_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "my_project/my_app/models.py", "code": "# Create your models here."}, {"file": "tests.py", "path": "my_project/my_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}], "10": [{"file": "manage.py", "path": "calorie_tracker_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "calorie_tracker_project/calorie_tracker_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calorie_tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "calorie_tracker_project/calorie_tracker_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calorie_tracker.urls')),\n]"}, {"file": "urls.py", "path": "calorie_tracker_project/calorie_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('food_search/', views.food_search, name='food_search'),\n    path('profile/', views.profile, name='profile'),\n    path('reports/', views.reports, name='reports'),\n    path('charts/', views.charts, name='charts'),\n    # Add other URL patterns as needed\n]"}, {"file": "views.py", "path": "calorie_tracker_project/calorie_tracker/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef home(request):\n    return render(request, 'calorie_tracker/home.html')\n\ndef dashboard(request):\n    return render(request, 'calorie_tracker/dashboard.html')\n\ndef food_search(request):\n    return render(request, 'calorie_tracker/food_search.html')\n\ndef profile(request):\n    return render(request, 'calorie_tracker/profile.html')\n\ndef reports(request):\n    return render(request, 'calorie_tracker/reports.html')\n\ndef charts(request):\n    return render(request, 'calorie_tracker/charts.html')"}, {"file": "models.py", "path": "calorie_tracker_project/calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n# Create your models here.\nclass Food(models.Model):\n    name = models.CharField(max_length=200)\n    calories = models.FloatField()\n    # Add other nutritional information fields as needed\n\nclass UserFoodIntake(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    food = models.ForeignKey(Food, on_delete=models.CASCADE)\n    quantity = models.FloatField()\n    date_consumed = models.DateField()\n\n# Add other models as needed (e.g., for user profiles, custom foods)"}, {"file": "forms.py", "path": "calorie_tracker_project/calorie_tracker/forms.py", "code": "from django import forms\nfrom .models import Food, UserFoodIntake\n\n# Create your forms here.\nclass FoodForm(forms.ModelForm):\n    class Meta:\n        model = Food\n        fields = '__all__'\n\nclass UserFoodIntakeForm(forms.ModelForm):\n    class Meta:\n        model = UserFoodIntake\n        fields = '__all__'"}, {"file": "home.html", "path": "calorie_tracker_project/calorie_tracker/templates/calorie_tracker/home.html", "code": "<div id=\"home-container\" class=\"home-container\">\n    <h1 id=\"home-title\" class=\"home-title\">Welcome to the Calorie Tracker!</h1>\n    <a id=\"signup-link\" class=\"home-link\" href=\"{% url 'sign_up' %}\">Sign Up</a>\n    <a id=\"login-link\" class=\"home-link\" href=\"{% url 'log_in' %}\">Log In</a>\n    <a id=\"learn-more-link\" class=\"home-link\" href=\"{% url 'learn_more' %}\">Learn More</a>\n</div>"}, {"file": "dashboard.html", "path": "calorie_tracker_project/calorie_tracker/templates/calorie_tracker/dashboard.html", "code": "<div id=\"dashboard-container\" class=\"dashboard-container\">\n  <!-- Dashboard content -->\n</div>"}, {"file": "food_search.html", "path": "calorie_tracker_project/calorie_tracker/templates/calorie_tracker/food_search.html", "code": "<div id=\"food-search-container\" class=\"food-search-container\">\n    <!-- Food search content -->\n</div>"}, {"file": "profile.html", "path": "calorie_tracker_project/calorie_tracker/templates/calorie_tracker/profile.html", "code": "<div id=\"profile-container\" class=\"profile-container\">\n  <!-- Profile Content -->\n</div>"}, {"file": "reports.html", "path": "calorie_tracker_project/calorie_tracker/templates/calorie_tracker/reports.html", "code": "<div id=\"reports-container\" class=\"reports-container\">\n<!-- Report Content -->\n</div>"}, {"file": "charts.html", "path": "calorie_tracker_project/calorie_tracker/templates/calorie_tracker/charts.html", "code": "<div id=\"charts-container\" class=\"charts-container\">\n<!-- Charts Content -->\n</div>"}, {"file": "asgi.py", "path": "calorie_tracker_project/calorie_tracker_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker_project.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "calorie_tracker_project/calorie_tracker_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calorie_tracker_project/calorie_tracker_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "calorie_tracker_project/calorie_tracker/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "mysite/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "mysite/mysite/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y@qnd)0&8bi5_pr-z!675x5&@g0u!0#m$2(f5w4!3@5=oim27'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "mysite/mysite/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('generate/', views.generate, name='generate'),\n]\n"}, {"file": "views.py", "path": "mysite/mysite/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef about(request):\n    return render(request, 'about.html')\n\ndef generate(request):\n    return render(request, 'generate.html')\n"}, {"file": "home.html", "path": "mysite/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1 id=\"home-title\" class=\"title\">Welcome to the Password Generator</h1>\n    <a id=\"generate-link\" class=\"button\" href=\"{% url 'generate' %}\">Generate Password</a>\n{% endblock %}"}, {"file": "about.html", "path": "mysite/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1 id=\"about-title\" class=\"title\">About This Website</h1>\n    <p id=\"about-text\" class=\"text\">This website generates random passwords for you.</p>\n{% endblock %}"}, {"file": "generate.html", "path": "mysite/templates/generate.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1 id=\"generate-title\" class=\"title\">Generate Password</h1>\n    <!-- Password generation logic and form -->\n{% endblock %}"}, {"file": "base.html", "path": "mysite/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    <nav id=\"main-nav\">\n        <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n        <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n    </nav>\n    <div id=\"content\" class=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "mysite/mysite/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_asgi_application()\n"}, {"file": "wsgi.py", "path": "mysite/mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "mysite/mysite/__init__.py", "code": ""}, {"file": "__init__.py", "path": "mysite/__init__.py", "code": ""}], "12": [{"file": "manage.py", "path": "expense_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "expense_project/expense_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expense_management',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'expense_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # add validators here if needed\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')"}, {"file": "urls.py", "path": "expense_project/expense_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('expense_management.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"}, {"file": "urls.py", "path": "expense_project/expense_management/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.employee_dashboard, name='employee_dashboard'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('view_claim_status/', views.view_claim_status, name='view_claim_status'),\n    path('view_claim_history/', views.view_claim_history, name='view_claim_history'),\n    path('admin/', views.admin_dashboard, name='admin_dashboard'),\n    path('admin/view_pending_claims/', views.view_pending_claims, name='view_pending_claims'),\n    path('admin/approve_claim/<int:claim_id>/', views.approve_claim, name='approve_claim'),\n    path('admin/reject_claim/<int:claim_id>/', views.reject_claim, name='reject_claim'),\n    path('admin/view_claim_details/<int:claim_id>/', views.view_claim_details, name='view_claim_details'),\n    path('admin/budget_control/', views.budget_control, name='budget_control'),\n    path('admin/set_budget/', views.set_budget, name='set_budget'),\n    path('admin/view_expense_reports/', views.view_expense_reports, name='view_expense_reports'),\n]"}, {"file": "wsgi.py", "path": "expense_project/expense_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "expense_project/expense_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_project.settings')\n\napplication = get_asgi_application()"}, {"file": "models.py", "path": "expense_project/expense_management/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    EXPENSE_TYPES = (\n        ('TRAVEL', 'Travel'),\n        ('LABOR', 'Labor'),\n        ('MANAGEMENT', 'Management'),\n        ('EQUIPMENT', 'Equipment'),\n    )\n\n    STATUS_CHOICES = (\n        ('PENDING', 'Pending'),\n        ('APPROVED', 'Approved'),\n        ('REJECTED', 'Rejected'),\n    )\n\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    expense_type = models.CharField(max_length=20, choices=EXPENSE_TYPES)\n    supporting_documents = models.FileField(upload_to='supporting_documents/', blank=True, null=True)\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='PENDING')\n    created_at = models.DateTimeField(auto_now_add=True)  # Add creation timestamp\n    updated_at = models.DateTimeField(auto_now=True) # Add update timestamp\n    rejection_reason = models.TextField(blank=True, null=True)"}, {"file": "forms.py", "path": "expense_project/expense_management/forms.py", "code": "from django import forms\nfrom .models import Claim\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['amount', 'description', 'expense_type', 'supporting_documents']"}, {"file": "admin.py", "path": "expense_project/expense_management/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim\n\nadmin.site.register(Claim)"}, {"file": "views.py", "path": "expense_project/expense_management/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Claim\nfrom django.http import HttpResponse\nfrom django.contrib.auth.decorators import login_required, user_passes_test\nfrom .forms import ClaimForm\nfrom django.contrib import messages\n\n@login_required\ndef employee_dashboard(request):\n    return render(request, 'expense_management/employee_dashboard.html')\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, request.FILES)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            messages.success(request, 'Claim submitted successfully!')\n            return redirect('employee_dashboard') # Redirect after successful submission\n    else:\n        form = ClaimForm()\n    return render(request, 'expense_management/submit_claim.html', {'form': form})\n\n@login_required\ndef view_claim_status(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'expense_management/view_claim_status.html', {'claims': claims})\n\n@login_required\ndef view_claim_history(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'expense_management/view_claim_history.html', {'claims': claims})\n\n@user_passes_test(lambda u: u.is_superuser)\ndef admin_dashboard(request):\n    return render(request, 'expense_management/admin_dashboard.html')\n\n@user_passes_test(lambda u: u.is_superuser)\ndef view_pending_claims(request):\n    claims = Claim.objects.filter(status='PENDING')\n    return render(request, 'expense_management/view_pending_claims.html', {'claims': claims})\n\n@user_passes_test(lambda u: u.is_superuser)\ndef approve_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    claim.status = 'APPROVED'\n    claim.save()\n    messages.success(request, f'Claim {claim_id} approved!')\n    return redirect('view_pending_claims')\n\n@user_passes_test(lambda u: u.is_superuser)\ndef reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id) \n    if request.method == 'POST':\n        claim.rejection_reason = request.POST.get('rejection_reason')\n        claim.status = 'REJECTED'\n        claim.save()\n        messages.success(request, f'Claim {claim_id} rejected!')\n        return redirect('view_pending_claims')\n    return render(request, 'expense_management/reject_claim.html', {'claim': claim})\n\n@user_passes_test(lambda u: u.is_superuser)\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    return render(request, 'expense_management/view_claim_details.html', {'claim': claim})\n\n@user_passes_test(lambda u: u.is_superuser)\ndef budget_control(request):\n    return render(request, 'expense_management/budget_control.html') # Add budget logic here\n\n@user_passes_test(lambda u: u.is_superuser)\ndef set_budget(request):\n    return render(request, 'expense_management/set_budget.html')  #  Add set budget logic here\n\n@user_passes_test(lambda u: u.is_superuser)\ndef view_expense_reports(request):\n    return render(request, 'expense_management/view_expense_reports.html') # Add reporting logic here\n\n"}, {"file": "employee_dashboard.html", "path": "expense_project/expense_management/templates/expense_management/employee_dashboard.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"employee-dashboard-container\" class=\"container mt-5\">\n    <h1 id=\"dashboard-title\" class=\"mb-4\">Employee Dashboard</h1>\n\n    <div id=\"dashboard-links\" class=\"list-group\">\n        <a id=\"submit-claim-link\" class=\"list-group-item list-group-item-action\" href=\"{% url 'submit_claim' %}\">Submit Claim</a>\n        <a id=\"view-claim-status-link\" class=\"list-group-item list-group-item-action\" href=\"{% url 'view_claim_status' %}\">View Claim Status</a>\n        <a id=\"view-claim-history-link\" class=\"list-group-item list-group-item-action\" href=\"{% url 'view_claim_history' %}\">View Claim History</a>\n    </div>\n</div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "expense_project/expense_management/templates/expense_management/submit_claim.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"submit-claim-container\" class=\"container mt-5\">\n    <h1 id=\"submit-claim-title\" class=\"mb-4\">Submit Claim</h1>\n    <form id=\"claim-form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-claim-button\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "view_claim_status.html", "path": "expense_project/expense_management/templates/expense_management/view_claim_status.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"claim-status-container\" class=\"container mt-5\">\n    <h1 id=\"claim-status-title\" class=\"mb-4\">View Claim Status</h1>\n    <table id=\"claim-status-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Amount</th>\n                <th>Description</th>\n                <th>Expense Type</th>\n                <th>Status</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for claim in claims %}\n            <tr>\n                <td>{{ claim.amount }}</td>\n                <td>{{ claim.description }}</td>\n                <td>{{ claim.expense_type }}</td>\n                <td>{{ claim.status }}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "view_claim_history.html", "path": "expense_project/expense_management/templates/expense_management/view_claim_history.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div  id=\"claim-history-container\" class=\"container mt-5\">\n    <h1 id=\"claim-history-title\" class=\"mb-4\">View Claim History</h1>\n    <table id=\"claim-history-table\" class=\"table\">\n         <thead>\n            <tr>\n                <th>Amount</th>\n                <th>Description</th>\n                <th>Expense Type</th>\n                <th>Status</th>\n                <th>Created At</th>\n                <th>Updated At</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for claim in claims %}\n            <tr>\n                <td>{{ claim.amount }}</td>\n                <td>{{ claim.description }}</td>\n                <td>{{ claim.expense_type }}</td>\n                <td>{{ claim.status }}</td>\n                <td>{{ claim.created_at }}</td>\n                <td>{{ claim.updated_at }}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "admin_dashboard.html", "path": "expense_project/expense_management/templates/expense_management/admin_dashboard.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"admin-dashboard-container\" class=\"container mt-5\">\n    <h1 id=\"admin-dashboard-title\"  class=\"mb-4\">Admin Dashboard</h1>\n\n    <div id=\"admin-dashboard-links\" class=\"list-group\">\n        <a id=\"view-pending-claims-link\" class=\"list-group-item list-group-item-action\" href=\"{% url 'view_pending_claims' %}\">View Pending Claims</a>\n        <a id=\"budget-control-link\" class=\"list-group-item list-group-item-action\" href=\"{% url 'budget_control' %}\">Budget Control</a>\n        <a id=\"set-budget-link\" class=\"list-group-item list-group-item-action\" href=\"{% url 'set_budget' %}\">Set Budget</a>\n        <a id=\"view-expense-reports-link\" class=\"list-group-item list-group-item-action\" href=\"{% url 'view_expense_reports' %}\">View Expense Reports</a>\n    </div>\n</div>\n{% endblock %}"}, {"file": "view_pending_claims.html", "path": "expense_project/expense_management/templates/expense_management/view_pending_claims.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"pending-claims-container\" class=\"container mt-5\">\n    <h1 id=\"pending-claims-title\" class=\"mb-4\">View Pending Claims</h1>\n    <table id=\"pending-claims-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Employee</th>\n                <th>Amount</th>\n                <th>Description</th>\n                <th>Expense Type</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for claim in claims %}\n            <tr>\n                <td>{{ claim.employee.username }}</td>\n                <td>{{ claim.amount }}</td>\n                <td>{{ claim.description }}</td>\n                <td>{{ claim.expense_type }}</td>\n                <td>\n                    <a id=\"approve-claim-link-{{claim.id}}\" class=\"btn btn-success\" href=\"{% url 'approve_claim' claim.id %}\">Approve</a>\n                    <a id=\"reject-claim-link-{{claim.id}}\" class=\"btn btn-danger\" href=\"{% url 'reject_claim' claim.id %}\">Reject</a>\n                    <a id=\"view-claim-details-link-{{claim.id}}\" class=\"btn btn-info\" href=\"{% url 'view_claim_details' claim.id %}\">Details</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "reject_claim.html", "path": "expense_project/expense_management/templates/expense_management/reject_claim.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"reject-claim-container\" class=\"container mt-5\">\n  <h1 id=\"reject-claim-title\" class=\"mb-4\">Reject Claim</h1>\n  <form id=\"reject-claim-form\" method=\"post\" action=\"{% url 'reject_claim' claim.id %}\">\n    {% csrf_token %}\n    <div class=\"form-group\">\n      <label for=\"rejection_reason\">Rejection Reason:</label>\n      <textarea id=\"rejection-reason-textarea\" class=\"form-control\" name=\"rejection_reason\" rows=\"3\" required></textarea>\n    </div>\n    <button id=\"reject-claim-submit-button\" type=\"submit\" class=\"btn btn-danger\">Reject Claim</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "view_claim_details.html", "path": "expense_project/expense_management/templates/expense_management/view_claim_details.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"claim-details-container\" class=\"container mt-5\">\n    <h1 id=\"claim-details-title\" class=\"mb-4\">Claim Details</h1>\n\n    <p><strong>Employee:</strong> {{ claim.employee.username }}</p>\n    <p><strong>Amount:</strong> ${{ claim.amount }}</p>\n    <p><strong>Description:</strong> {{ claim.description }}</p>\n    <p><strong>Expense Type:</strong> {{ claim.expense_type }}</p>\n    <p><strong>Status:</strong> {{ claim.status }}</p>\n    {% if claim.supporting_documents %}\n        <p><strong>Supporting Documents:</strong> <a href=\"{{ claim.supporting_documents.url }}\" target=\"_blank\">View</a></p>\n    {% endif %}\n    {% if claim.rejection_reason %}\n        <p><strong>Rejection Reason:</strong> {{ claim.rejection_reason }}</p>\n    {% endif %}\n\n</div>\n{% endblock %}"}, {"file": "budget_control.html", "path": "expense_project/expense_management/templates/expense_management/budget_control.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"budget-control-container\" class=\"container mt-5\">\n  <h1 id=\"budget-control-title\" class=\"mb-4\">Budget Control</h1>\n  \n  </div>\n{% endblock %}"}, {"file": "set_budget.html", "path": "expense_project/expense_management/templates/expense_management/set_budget.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"set-budget-container\" class=\"container mt-5\">\n    <h1 id=\"set-budget-title\" class=\"mb-4\">Set Budget</h1>\n\n    </div>\n{% endblock %}"}, {"file": "view_expense_reports.html", "path": "expense_project/expense_management/templates/expense_management/view_expense_reports.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"expense-reports-container\" class=\"container mt-5\">\n  <h1 id=\"expense-reports-title\" class=\"mb-4\">View Expense Reports</h1>\n  \n  </div>\n{% endblock %}"}, {"file": "base.html", "path": "expense_project/expense_management/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Expense Management</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    </head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a id=\"brand-logo\" class=\"navbar-brand\" href=\"#\">Expense Management</a>\n    </nav>\n\n    <div id=\"main-container\" class=\"container\">\n      {% if messages %}\n          <div id=\"message-container\" class=\"mt-3\">\n            {% for message in messages %}\n              <div id=\"message-{{ forloop.counter }}\" class=\"alert alert-{{ message.tags }}\" role=\"alert\">\n                {{ message }}\n              </div>\n            {% endfor %}\n          </div>\n      {% endif %}\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}], "13": [{"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\nSECRET_KEY = ')-z@p(xvl#l&3+^%g!2d_g4#6p07#^x-35w8!55k*52j13c+'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-created-primary-key\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('customer/', views.customer_list, name='customer_list'),\n    path('customer/<int:customer_id>/', views.customer_detail, name='customer_detail'),\n    path('product/', views.product_list, name='product_list'),\n    path('purchase/', views.purchase_record_list, name='purchase_record_list'),\n    path('marketing/', views.marketing_dashboard, name='marketing_dashboard'),\n]"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\nfrom .models import Customer, Product, PurchaseRecord\n\n# Placeholder functions\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'myapp/customer_list.html', {'customers': customers})\n\ndef customer_detail(request, customer_id):\n    customer = Customer.objects.get(pk=customer_id) # Retrieve the customer\n    # Example - Replace with actual logic to get preferred products and purchase history\n    preferred_products = Product.objects.filter(customer = customer) # Replace with your logic\n    purchase_history = PurchaseRecord.objects.filter(customer=customer) # Replace with your logic\n\n    return render(request, 'myapp/customer_detail.html', {'customer_id': customer_id, 'customer': customer, 'preferred_products': preferred_products, 'purchase_history': purchase_history})\n\ndef product_list(request):\n    return render(request, 'myapp/product_list.html')\n\ndef purchase_record_list(request):\n    return render(request, 'myapp/purchase_record_list.html')\n\ndef marketing_dashboard(request):\n    return render(request, 'myapp/marketing_dashboard.html')\n"}, {"file": "models.py", "path": "myproject/myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    company = models.CharField(max_length=255)\n    phone = models.CharField(max_length=20)\n    birthday = models.DateField(null=True, blank=True) # Added birthday\n    age = models.IntegerField(null=True, blank=True) # Added age\n    sex = models.CharField(max_length=10, null=True, blank=True)  # Added sex\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    purchase_date = models.DateField(null=True, blank=True) # Added purchase_date\n\n    def __str__(self):\n      return f\"{self.customer.name} - {self.product.name}\"\n"}, {"file": "customer_list.html", "path": "myproject/myapp/templates/myapp/customer_list.html", "code": "<h1 id=\"customer-list-title\" class=\"page-title\">Customer List</h1>\n\n<ul id=\"customer-list\" class=\"customer-list\">\n    {% for customer in customers %}\n        <li id=\"customer-{{ customer.id }}\" class=\"customer-item\">\n            <a href=\"{% url 'customer_detail' customer.id %}\" id=\"customer-link-{{ customer.id }}\" class=\"customer-link\">{{ customer.name }}</a>\n        </li>\n    {% endfor %}\n</ul>\n\n<a href=\"#\" id=\"add-customer-button\" class=\"add-customer-link\">Add New Customer</a>\n"}, {"file": "customer_detail.html", "path": "myproject/myapp/templates/myapp/customer_detail.html", "code": "<h1 id=\"customer-detail-title\" class=\"page-title\">Customer Details</h1>\n\n<p id=\"customer-id\" class=\"customer-info\">Customer ID: {{ customer.id }}</p>\n<p id=\"customer-name\" class=\"customer-info\">Name: {{ customer.name }}</p>\n<p id=\"customer-birthday\" class=\"customer-info\">Birthday: {{ customer.birthday }}</p>\n<p id=\"customer-age\" class=\"customer-info\">Age: {{ customer.age }}</p>\n<p id=\"customer-sex\" class=\"customer-info\">Sex: {{ customer.sex }}</p>\n<p id=\"customer-company\" class=\"customer-info\">Company: {{ customer.company }}</p>\n<p id=\"customer-phone\" class=\"customer-info\">Phone Number: {{ customer.phone }}</p>\n\n<h2 id=\"preferred-products-title\" class=\"section-title\">Preferred Products</h2>\n<ul id=\"preferred-products-list\" class=\"product-list\">\n    {% for product in preferred_products %}\n    <li id=\"product-{{ product.id }}\" class=\"product-item\">{{ product.name }}</li>\n    {% endfor %}\n</ul>\n\n<h2 id=\"purchase-history-title\" class=\"section-title\">Purchase History</h2>\n<ul id=\"purchase-history-list\" class=\"purchase-list\">\n    {% for purchase in purchase_history %}\n    <li id=\"purchase-{{ purchase.id }}\" class=\"purchase-item\">{{ purchase.product.name }} - {{ purchase.purchase_date }}</li>\n    {% endfor %}\n</ul>\n"}, {"file": "product_list.html", "path": "myproject/myapp/templates/myapp/product_list.html", "code": "<h1 id=\"product-list-title\" class=\"page-title\">Product List</h1>"}, {"file": "purchase_record_list.html", "path": "myproject/myapp/templates/myapp/purchase_record_list.html", "code": "<h1 id=\"purchase-record-list-title\" class=\"page-title\">Purchase Records</h1>"}, {"file": "marketing_dashboard.html", "path": "myproject/myapp/templates/myapp/marketing_dashboard.html", "code": "<h1 id=\"marketing-dashboard-title\" class=\"page-title\">Marketing Dashboard</h1>"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "myproject/myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myproject/myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\n"}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"}, {"file": "tests.py", "path": "myproject/myapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}], "14": [{"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y_#v8+u5k_8o#vc7$0i2*s3u)5!c9@4o@3t+_6!18%o+8xnf'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('helloworld/', views.helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\ndef helloworld(request):\n    return render(request, 'myapp/helloworld.html')\n"}, {"file": "helloworld.html", "path": "myproject/myapp/templates/myapp/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\" id=\"html-id\" class=\"html-class\">\n<head id=\"head-id\" class=\"head-class\">\n    <title id=\"title-id\" class=\"title-class\">Hello, world!</title>\n</head>\n<body id=\"body-id\" class=\"body-class\">\n    <h1 id=\"h1-id\" class=\"h1-class\">Hello, world!</h1>\n</body>\n</html>\n"}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'\n"}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "myproject/myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y+u!qs9m5!o80y5l2^%o-z(+!pv+2w^a8$p)w+#l708g0k!4p'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'myapp/index.html')\n\ndef helloworld(request):\n    return render(request, 'myapp/helloworld.html')\n"}, {"file": "index.html", "path": "myproject/myapp/templates/myapp/index.html", "code": "<a id=\"helloworld-link\" class=\"link-button\" href=\"{% url 'helloworld' %}\">Go to Hello World Button</a>"}, {"file": "helloworld.html", "path": "myproject/myapp/templates/myapp/helloworld.html", "code": "<h1 id=\"helloworld-title\" class=\"main-title\">Hello, World!</h1>"}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'"}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "asgi.py", "path": "myproject/myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}], "16": [{"file": "excel_reader.py", "path": "utils/excel_reader.py", "code": "import openpyxl\n\ndef read_excel_file(file_path):\n    try:\n        workbook = openpyxl.load_workbook(file_path)\n        sheet = workbook.active\n        subject_list = []\n        for row in sheet.iter_rows(min_row=2, values_only=True):  # Start from the second row\n            if row[0] is not None: # Assuming the first cell in a row has the subject name and checks for empty rows\n                subject_list.append(row[0]) # Append the subject name to the list\n        return subject_list\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Error: File not found at '{file_path}'\")\n    except Exception as e:\n        raise Exception(f\"Error reading Excel file: {e}\")"}, {"file": "timetable_creator.py", "path": "utils/timetable_creator.py", "code": "def create_2d_timetable(subject_list):\n    try:\n        if not subject_list:\n            return []  # Return empty list if subject_list is empty\n\n        num_subjects = len(subject_list)\n        timetable = [[None for _ in range(5)] for _ in range(5)] #Creates a 5x5 timetable filled with None initially\n        current_subject_index = 0\n\n        for i in range(5):\n            for j in range(5):\n                if current_subject_index < num_subjects:\n                    timetable[i][j] = subject_list[current_subject_index]\n                    current_subject_index += 1\n\n        return timetable\n    except Exception as e:\n        raise Exception(f\"Error creating timetable: {e}\")"}, {"file": "excel_writer.py", "path": "utils/excel_writer.py", "code": "import openpyxl\n\ndef write_to_excel_file(timetable, file_path):\n    try:\n        workbook = openpyxl.Workbook()\n        sheet = workbook.active\n\n        # Add header row (optional)\n        header_row = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\n        sheet.append(header_row)\n\n        for row in timetable:\n           sheet.append(row)\n        workbook.save(file_path)\n    except Exception as e:\n        raise Exception(f\"Error writing to Excel file: {e}\")"}, {"file": "main.py", "path": "main.py", "code": "import utils.excel_reader as excel_reader\nimport utils.timetable_creator as timetable_creator\nimport utils.excel_writer as excel_writer\n\nINPUT_FILE = 'input.xlsx'\nOUTPUT_FILE = 'output.xlsx'\n\ndef main():\n    try:\n        subject_list = excel_reader.read_excel_file(INPUT_FILE)\n        timetable = timetable_creator.create_2d_timetable(subject_list)\n        excel_writer.write_to_excel_file(timetable, OUTPUT_FILE)\n        print(f\"Timetable created successfully and saved to '{OUTPUT_FILE}'\") #Added prints for better user experience\n    except Exception as e:\n        print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "input.xlsx", "path": "input.xlsx", "code": ""}], "18": [{"file": "game.py", "path": "bashcrawl/game.py", "code": "\nimport random\nimport json\n\ndef show_intro():\n    print(\"Welcome to the Python Bashcrawl!\")\n    print(\"You find yourself in a dark dungeon...\")\n\ndef create_player():\n    player = {\"name\": input(\"Enter your name: \"), \"health\": 100, \"attack\": 10, \"gold\": 0}\n    return player\n\ndef create_monster():\n    monster_names = [\"Goblin\", \"Orc\", \"Troll\", \"Skeleton\"]\n    monster_name = random.choice(monster_names)\n    monster = {\"name\": monster_name, \"health\": random.randint(20, 50), \"attack\": random.randint(5, 15)}\n    return monster\n\ndef combat(player, monster):\n    print(f\"You encountered a {monster['name']}!\")\n    while player[\"health\"] > 0 and monster[\"health\"] > 0:\n        print(f\"Your health: {player['health']}, {monster['name']}'s health: {monster['health']}\")\n        action = input(\"Attack or Flee? (a/f): \").lower()\n        if action == \"a\":\n            monster[\"health\"] -= player[\"attack\"]\n            print(f\"You hit the {monster['name']} for {player['attack']} damage!\")\n            if monster[\"health\"] <= 0:\n                print(f\"You defeated the {monster['name']}!\")\n                player[\"gold\"] += random.randint(10, 30)\n                print(f\"You found {player['gold']} gold!\")\n                break\n            player[\"health\"] -= monster[\"attack\"]\n            print(f\"The {monster['name']} hit you for {monster['attack']} damage!\")\n        elif action == \"f\":\n            print(\"You fled the battle!\")\n            break\n        else:\n            print(\"Invalid action!\")\n    if player[\"health\"] <= 0:\n        print(\"You died!\")\n\n\ndef game_loop(player):\n    while player[\"health\"] > 0:\n         combat(player, create_monster())\n         if player[\"health\"] <=0:\n             break\n         continue_playing = input(\"Continue exploring? (y/n): \").lower()\n         if continue_playing != \"y\":\n             break\n    print(\"Game Over\")\n\n\ndef generate_function_checklist():\n\n    checklist = [\n        {\"page\": \"Intro\", \"function\": [{\"function\": \"show_intro\", \"description\": \"Displays the game introduction.\"}]},\n        {\"page\": \"Character Creation\", \"function\": [{\"function\": \"create_player\", \"description\": \"Creates the player character.\"}]},\n        {\"page\": \"Monster Generation\", \"function\": [{\"function\": \"create_monster\", \"description\": \"Creates a random monster.\"}]},\n        {\"page\": \"Combat\", \"function\": [{\"function\": \"combat\", \"description\": \"Handles the combat between the player and a monster.\"}]},\n        {\"page\": \"Game Loop\", \"function\": [{\"function\": \"game_loop\", \"description\": \"Runs the main game loop.\"}]}\n    ]\n    return json.dumps(checklist, indent=4)\n\n\n\n\n\n\nif __name__ == \"__main__\":\n    show_intro()\n    player = create_player()\n    game_loop(player)\n    print(generate_function_checklist())\n"}], "19": [{"file": "death_histogram.py", "path": "death_histogram/death_histogram.py", "code": "# Reads the Deathlist.csv file containing death dates.\ndef read_csv(filepath):\n    import csv\n    try:\n        with open(filepath, 'r', newline='', encoding='utf-8') as csvfile:\n            reader = csv.reader(csvfile)\n            next(reader) #skip the header assuming it exists\n            dates = [row[0] for row in reader]\n            return dates\n    except Exception as e:\n        print(f\"Error reading CSV: {e}\")\n        return None\n\n# Counts the number of deaths for each week of the year.\ndef calculate_weekly_deaths(dates):\n    from datetime import datetime\n    weekly_counts = [0] * 53 # Initialize list for 53 weeks\n    if dates is not None:\n        for date_str in dates:\n            try:\n                date_obj = datetime.strptime(date_str, '%Y-%m-%d')\n                week_number = date_obj.isocalendar()[1] \n                weekly_counts[week_number - 1] += 1\n            except ValueError:\n                print(f\"Invalid date format: {date_str}. Expected YYYY-MM-DD.\")  \n    return weekly_counts\n\n# Creates a text-based histogram visualizing weekly death counts.\ndef generate_histogram(weekly_counts):\n    if weekly_counts is not None:\n        for week, count in enumerate(weekly_counts):\n            bar = '#' * count\n            print(f\"Week {week + 1:2}: {bar} ({count}) \")\n\n# Main function\ndef main():\n    filepath = \"Deathlist.csv\"\n    try:\n        dates = read_csv(filepath)\n        if dates is not None:\n            weekly_counts = calculate_weekly_deaths(dates)\n            generate_histogram(weekly_counts)\n    except FileNotFoundError:\n        print(\"Error: Deathlist.csv not found.\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "Deathlist.csv", "path": "death_histogram/Deathlist.csv", "code": "Date\n1950-01-01\n1950-01-08\n1950-01-15\n1950-01-15\n1950-01-22\n1950-01-29\n1950-02-05\n1950-02-12\n1950-02-19\n1950-02-19\n1950-02-26\n1950-03-05\n1951-01-01\n1951-01-08\n1951-01-15\n1952-01-01\n1952-01-08\n1953-01-15\ninvalid_date\n2024-01-03\n2024-05-08"}], "20": [{"file": "manage.py", "path": "myblogproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblogproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "myblogproject/myblogproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run on Debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myblog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myblogproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myblogproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myblogproject/myblogproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myblog.urls')),\n]"}, {"file": "asgi.py", "path": "myblogproject/myblogproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblogproject.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "myblogproject/myblogproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblogproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "myblogproject/myblog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('blog/<slug:slug>/', views.post_detail, name='post_detail'),\n    path('category/<slug:slug>/', views.category_detail, name='category_detail'),\n    path('search/', views.search, name='search'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "myblogproject/myblog/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom .models import Post, Category\n\ndef home(request):\n    latest_posts = Post.objects.all().order_by('-created_at')[:5] # Example: Latest 5 posts\n    context = {'latest_posts': latest_posts}\n    return render(request, 'blog/home.html', context)\n\ndef post_detail(request, slug):\n    post = get_object_or_404(Post, slug=slug)\n    context = {'post': post}\n    return render(request, 'blog/post_detail.html', context)\n\ndef category_detail(request, slug):\n    category = get_object_or_404(Category, slug=slug)\n    posts = category.posts.all()\n    context = {'category': category, 'posts': posts}\n    return render(request, 'blog/category_detail.html', context)\n\n\ndef search(request):\n    query = request.GET.get('q')\n    results = Post.objects.none() # Initialize empty queryset\n    if query:\n       results = Post.objects.filter(title__icontains=query) # Example search by title\n    context = {'results': results, 'query': query}\n    return render(request, 'blog/search.html', context)\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\n"}, {"file": "models.py", "path": "myblogproject/myblog/models.py", "code": "from django.db import models\nfrom django.utils.text import slugify\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n    slug = models.SlugField(unique=True)\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n\n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    title = models.CharField(max_length=255)\n    slug = models.SlugField(unique=True)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    categories = models.ManyToManyField(Category, related_name='posts')\n\n\n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.title)\n        super().save(*args, **kwargs)\n\n    def __str__(self):\n        return self.title"}, {"file": "home.html", "path": "myblogproject/myblog/templates/blog/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1>Latest Posts</h1>\n        <ul id=\"latest-posts-list\" class=\"post-list\">\n        {% for post in latest_posts %}\n            <li id=\"post-{{ post.id }}\" class=\"post-item\">\n                <a href=\"{% url 'post_detail' post.slug %}\" id=\"post-link-{{ post.id }}\" class=\"post-link\">{{ post.title }}</a>\n            </li>\n        {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "post_detail.html", "path": "myblogproject/myblog/templates/blog/post_detail.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ post.title }}</title>\n</head>\n<body>\n    <div id=\"post-detail-container-{{post.id}}\" class=\"container\">\n        <h1 id=\"post-title-{{post.id}}\">{{ post.title }}</h1>\n        <p id=\"post-content-{{post.id}}\" class=\"post_content\">{{ post.content }}</p>\n    </div>\n</body>\n</html>"}, {"file": "category_detail.html", "path": "myblogproject/myblog/templates/blog/category_detail.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>{{ category.name }}</title>\n</head>\n<body>\n<div id=\"category-detail-container\" class=\"container\">\n    <h1 id=\"category-title\">{{ category.name }}</h1>\n    <ul id=\"category-posts-list\" class=\"post-list\">\n    {% for post in posts %}\n        <li id=\"post-{{ post.id }}\" class=\"post-item\">\n          <a id=\"post-link-{{ post.id }}\" href=\"{% url 'post_detail' post.slug %}\">{{ post.title }}</a>\n        </li>\n    {% endfor %}\n    </ul>\n</div>\n</body>\n</html>"}, {"file": "search.html", "path": "myblogproject/myblog/templates/blog/search.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Search Results</title>\n</head>\n<body>\n    <div id=\"search-results-container\" class=\"container\">\n        <h1>Search Results for '{{ query }}'</h1>\n\n        {% if results %}\n            <ul id=\"search-results-list\" class=\"results-list\">\n            {% for post in results %}\n                <li id=\"result-{{ post.id }}\" class=\"result-item\">\n                    <a id=\"result-link-{{ post.id }}\" href=\"{% url 'post_detail' post.slug %}\">{{ post.title }}</a>\n                </li>\n            {% endfor %}\n            </ul>\n        {% else %}\n            <p id=\"no-results\">No results found.</p>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "myblogproject/myblog/templates/blog/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n    <h1 id=\"about-title\">About Us</h1>\n    <p id=\"about-content\">This is the about page content</p>\n    </div>\n</body>\n</html>"}]}