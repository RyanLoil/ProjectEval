{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \\\n            \"available on your PYTHONPATH environment variable? Did you \" \\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Your Weight (kg)', min_value=0, required=True)\n    height = forms.FloatField(label='Your Height (cm)', min_value=0, required=True)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\", \n    \"Invalid weight\": \"The weight can't be less than 0.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    bmi = None\n    interpretation = None\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height'] / 100  # Convert cm to meters\n            if height <=0:\n                interpretation = bmi_interpretation[\"Invalid height\"]\n            elif weight <= 0:\n                interpretation = bmi_interpretation[\"Invalid weight\"]\n            else:\n                bmi = weight / (height * height)\n                for category, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        interpretation = bmi_interpretation[category]\n                        break\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'interpretation': interpretation})\n\ndef advice(request):\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html>\n<head><title>Advice</title></head>\n<body id=\"advice-body\" class=\"advice-page\">\n    <h1 id=\"advice-title\" class=\"main-title\">Health Advice Based on Your BMI</h1>\n    <div id=\"advice-content\" class=\"content-container\">\n       <!-- Content will be dynamically added here based on user's BMI -->\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body id=\"bmi-calc-body\" class=\"bmi-page\">\n    <h1 id=\"bmi-title\" class=\"main-title\">BMI Calculator</h1>\n    <div id=\"bmi-form-container\" class=\"form-container\">\n        <form id=\"bmi-form\" method=\"post\" action=\"/bmi-calculator/\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"calculate-btn\" type=\"submit\">Calculate</button>\n        </form>\n        <div id=\"results\" class=\"results-area\">\n            {% if bmi %}\n                <p id=\"bmi-result\">Your BMI: {{ bmi|floatformat:2 }}</p>\n                <p id=\"bmi-interpretation\">{{ interpretation }}</p>\n            {% endif %}\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html>\n<head><title>Homepage</title></head>\n<body id=\"home-body\" class=\"home-page\">\n    <h1 id=\"home-title\" class=\"main-title\">Welcome to the BMI Calculator</h1>\n    <p id=\"home-intro\">Calculate your Body Mass Index (BMI) to learn more about your weight status.</p>\n    <a id=\"bmi-link\" href=\"/bmi-calculator/\" class=\"nav-link\">Go to BMI Calculator</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [ # ... (rest of the middleware settings)\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n       # ... (rest of the template settings)\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# ... (Other settings like AUTH_PASSWORD_VALIDATORS, LANGUAGE_CODE, etc.)\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', min_value=0.01)\n    source_currency = forms.ChoiceField(label='Source Currency', choices=CURRENCY_CHOICES)\n    target_currency = forms.ChoiceField(label='Target Currency', choices=CURRENCY_CHOICES)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    \"\"\"\n    Model for currency rate record\n    \"\"\"\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=20, decimal_places=10, verbose_name='Rate')\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Datetime')\n\n    def __str__(self):\n        return f\"{self.source_currency} to {self.target_currency}: {self.rate} at {self.datetime}\"\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import base64\nimport datetime\nimport io\nimport random\n\nfrom django.shortcuts import render, redirect\nfrom django.utils import timezone\nfrom django.views.generic import TemplateView\nfrom matplotlib import pyplot as plt\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated_rate(source_currency, target_currency):\n    # In real app, replace with API call\n    USD_BASE = {\n        'USD': 1.00, 'EUR': 0.85, 'GBP': 0.75, 'JPY': 110.00, \n        'AUD': 1.35, 'CNY': 7.00, 'CAD': 1.25, 'CHF': 0.92\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            rate = get_updated_rate(source_currency, target_currency)\n            converted_amount = amount * rate\n            CurrencyConvertRateModel.objects.create(source_currency=source_currency, target_currency=target_currency, rate=rate)\n            return render(request, self.template_name, {'form': form, 'converted_amount': converted_amount, 'rate': rate})\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        return render(request, self.template_name)\n\n\ndef plot_chart(source_currency, target_currency):\n    # Placeholder for chart generation\n    plt.plot([1, 2, 3, 4], [5, 6, 7, 8])\n    plt.xlabel('Time')\n    plt.ylabel('Rate')\n    buffer = io.BytesIO()\n    plt.savefig(buffer, format='png')\n    buffer.seek(0)\n    image_png = buffer.getvalue()\n    buffer.close()\n    graphic = base64.b64encode(image_png)\n    graphic = graphic.decode('utf-8')\n    return graphic\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0002_alter_currencyconvertratemodel_id_and_more.py", "path": "example_app/migrations/0002_alter_currencyconvertratemodel_id_and_more.py", "code": "# Generated by Django 4.2.5 on 2024-09-05 16:07\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('example_app', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='id',\n            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='rate',\n            field=models.DecimalField(decimal_places=10, max_digits=20, verbose_name='Rate'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='source_currency',\n            field=models.CharField(max_length=3, verbose_name='Source Currency'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='target_currency',\n            field=models.CharField(max_length=3, verbose_name='Target Currency'),\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n</head>\n<body id=\"trends-body\" class=\"trends-page\">\n  <div id=\"chart-container\" class=\"chart-container\"></div>\n    \n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body id=\"home-body\" class=\"home-page\">\n    <div id=\"converter-container\" class=\"converter\">\n      <h1 id=\"converter-title\">Currency Converter</h1>\n        <form id=\"converter-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submit-button\" type=\"submit\">Convert</button>\n        </form>\n        {% if converted_amount %}\n        <div id=\"results-container\" class=\"results\">\n          <p id=\"converted-amount\">Converted Amount: {{ converted_amount }}</p>\n          <p id=\"exchange-rate\">Exchange Rate: {{ rate }}</p>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "info.html", "path": "example_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Info</title>\n</head>\n<body id=\"info-body\">\n    <!-- add content here -->\n\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView, InfoView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', InfoView, name='info')\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.views import View\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = \"\"\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return \"Please select at least one character set.\"\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    generated_password = \"\"\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase')\n        include_lowercase = request.POST.get('lowercase')\n        include_numbers = request.POST.get('numbers')\n        include_symbols = request.POST.get('symbols')\n        generated_password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n\n    return render(request, 'generator.html', {'password': generated_password})\n\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n#copy-message { display: none; color: green; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <h1 id=\"about-us-title\">About Us</h1>\n    <p id=\"about-us-content\">This is the about us page for the password generator.</p>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <form method=\"post\" id=\"generator-form\">\n        {% csrf_token %}\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" name=\"length\" id=\"length\" value=\"12\" min=\"1\" max=\"100\"><br><br>\n\n        <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" checked>\n        <label for=\"uppercase\">Uppercase</label><br>\n\n        <input type=\"checkbox\" name=\"lowercase\" id=\"lowercase\" checked>\n        <label for=\"lowercase\">Lowercase</label><br>\n\n        <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" checked>\n        <label for=\"numbers\">Numbers</label><br>\n\n        <input type=\"checkbox\" name=\"symbols\" id=\"symbols\" checked>\n        <label for=\"symbols\">Symbols</label><br><br>\n\n        <button type=\"submit\" id=\"generate-button\">Generate Password</button>\n    </form>\n    \n    {% if password %}\n        <div id=\"password-result\">\n            <p>Your Password:</p>\n            <pre id=\"password\">{{ password }}</pre><br>\n            <button onclick=\"copyToClipboard()\" id=\"copy-button\">Copy to Clipboard</button>\n            <span id=\"copy-message\"></span>\n        </div>\n    {% endif %}\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <h1 id=\"home-title\">Welcome to the Password Generator!</h1>\n    <a href=\"/generator/\" id=\"generate-link\">Generate a Password</a><br>\n    <a href=\"/about-us/\" id=\"about-us-link\">About Us</a>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        buffer = io.BytesIO()\n        img.save(buffer, 'PNG')\n        img_str = base64.b64encode(buffer.getvalue()).decode()\n\n        context = {'qr_code': img_str}\n        return render(request, 'qr_app/generate.html', context)\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data_download')\n        qr = qrcode.QRCode()\n        qr.add_data(data)\n        qr.make(fit=True)\n        img = qr.make_image()\n\n        response = HttpResponse(content_type='image/png')\n        response['Content-Disposition'] = 'attachment; filename=\"qr_code.png\"'\n        img.save(response, 'PNG')\n\n        return response\n\n    return HttpResponse('No QR to download')\n\ndef about(request):\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body id=\"about-page\">\n    <div class=\"container\">\n        <h1 id=\"about-title\">About the QR Code Generator</h1>\n        <p id=\"about-description\">\n           This is a simple QR code generator built with Django.\n           It allows you to create custom QR codes for various purposes. \n        </p>\n        <div class=\"faq\" id=\"faq\">\n            <h2>Frequently Asked Questions</h2>\n            <div>\n                <h3>What is a QR code?</h3>\n                <p>A QR code (Quick Response code) is a type of matrix barcode that can be read easily by a digital device and which stores information as a series of pixels in a square-shaped grid. QR codes are often used to track information about products in a supply chain and \u2013 because of their fast readability and large storage capacity \u2013 they are often used for marketing and advertising purposes. </p>\n            </div>\n            </div>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n            box-sizing: border-box;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n\n        img {\n            display: block;\n            margin: 20px auto;\n            max-width: 300px;\n        }\n    </style>\n</head>\n<body id=\"generate-page\">\n    <div class=\"container\">\n        <h1 id=\"generate-title\">Generate QR Code</h1>\n        <form method=\"post\" id=\"qr-form\">\n            {% csrf_token %}\n            <label for=\"data\">Data:</label>\n            <input type=\"text\" id=\"data\" name=\"data\" required placeholder=\"Enter data for QR code\"><br>\n            <label for=\"fill_color\">Fill Color:</label>\n            <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\"><br>\n            <label for=\"back_color\">Background Color:</label>\n            <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\"><br>\n            <button type=\"submit\" id=\"generate-button\">Generate</button>\n        </form>\n\n        {% if qr_code %}\n            <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\" id=\"qr-code-image\">\n          <form method=\"post\" action=\"{% url 'download_qr_code' %}\" >\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"data_download\" value=\"{{ data }}\">\n            <button type=\"submit\">Download</button>\n          </form>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body id=\"home-page\">\n    <div class=\"container\">\n        <h1 id=\"home-title\">Welcome to the QR Code Generator</h1>\n        <ul id=\"navigation\">\n           <li><a href=\"{% url 'generate_qr_code' %}\" id=\"generate-link\">Generate QR Code</a></li>\n            <li><a href=\"{% url 'about' %}\" id=\"about-link\">About Us</a></li>\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "qr_code_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()"}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n        elif 'file_upload' in request.FILES:\n            uploaded_file = request.FILES['file_upload']\n            fs = FileSystemStorage(location='media/')  # Specify 'media/' as the upload location\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            filepath = os.path.join(settings.MEDIA_ROOT, filename)\n            with open(filepath, 'r') as f:\n                markdown_text = f.read()\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n    return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-section\" class=\"about-content\">\n        <h1>About this Markdown to HTML Converter</h1>\n        <p>This is a simple web application that allows you to convert Markdown text to HTML. You can either paste your Markdown directly into the text area or upload a Markdown file.</p>\n        <p>This project was created using Django and the Markdown library.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"converter-section\" class=\"converter\">\n        <h1>Markdown to HTML Converter</h1>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <label for=\"markdown_text\">Enter Markdown:</label><br>\n            <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"50\"></textarea><br><br>\n            <label for=\"file_upload\">Or upload a file:</label>\n            <input type=\"file\" id=\"file_upload\" name=\"file_upload\"><br><br>\n            <input type=\"submit\" value=\"Convert\">\n        </form>\n        {% if html %}\n            <div id=\"html-output\" class=\"html-content\">\n                <h2>Converted HTML:</h2>\n                {{ html | safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-section\" class=\"home-content\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n        <p>Use the links below to navigate:</p>\n        <ul>\n            <li><a href=\"{% url 'convert' %}\">Convert Markdown</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()\n"}, {"file": null, "path": "media", "code": null}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item,\n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView, CreateView, UpdateView\nfrom .models import TodoList, TodoItem\nfrom django.urls import reverse_lazy\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\nclass TodoListView(ListView, CreateView):\n    template_name = 'todo_list.html'\n    model = TodoList\n    fields = ['title', 'description']\n    success_url = reverse_lazy('todo_list')\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        for todolist in queryset:\n            todolist.completed = all(item.completed for item in todolist.todoitem_set.all())\n            todolist.save()\n        return queryset\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\nclass TodoListUpdate(UpdateView):\n    model = TodoList\n    fields = ['title', 'description']\n    success_url = reverse_lazy('todo_list')\n\nedit_todo = TodoListUpdate.as_view()\n\nclass TodoItemView(ListView, CreateView):\n    template_name = 'tasks.html'\n    model = TodoItem\n    fields = ['title', 'description']\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        return context\n    \n    def form_valid(self, form):\n        form.instance.todolist = self.todolist\n        return super().form_valid(form)\n\n    def get_success_url(self):\n        return reverse_lazy('view_todo_item', kwargs={'pk': self.kwargs['pk']})\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todo_item.todolist.pk)\n\nclass TodoItemUpdate(UpdateView):\n    model = TodoItem\n    fields = ['title', 'description']\n\n    def get_success_url(self):\n        return reverse_lazy('view_todo_item', kwargs={'pk': self.object.todolist.pk})\n\nedit_todo_item = TodoItemUpdate.as_view()\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todo_item.todolist.pk)\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        completed_count = todo_items.filter(completed=True).count()\n        total_count = todo_items.count()\n\n        if total_count > 0:\n            completion_rate = (completed_count / total_count) * 100\n        else:\n            completion_rate = 0\n\n        context['completion_rate'] = completion_rate\n        context['completed_count'] = completed_count\n        context['total_count'] = total_count\n        # Add any other analysis data as needed\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body id=\"analysis-body\" class=\"analysis-page\">\n    <div id=\"chart-container\" class=\"chart-container\">\n        <canvas id=\"completion-chart\" class=\"completion-chart\"></canvas>\n    </div>\n    <div id=\"stats\" class=\"stats\">\n      <p>Completed Tasks: <span id=\"completed-count\">{{ completed_count }}</span></p>\n      <p>Total Tasks: <span id=\"total-count\">{{ total_count }}</span></p>\n      <p>Completion Rate: <span id=\"completion-rate\">{{ completion_rate|floatformat:2 }}%</span></p>\n    </div>\n\n    <script>\n      const ctx = document.getElementById('completion-chart');\n      const completedCount = parseInt(document.getElementById('completed-count').textContent);\n      const totalCount = parseInt(document.getElementById('total-count').textContent);\n\n      new Chart(ctx, {\n        type: 'pie',\n        data: {\n          labels: ['Completed', 'Incomplete'],\n          datasets: [{\n            label: 'Task Completion',\n            data: [completedCount, totalCount - completedCount],\n            backgroundColor: [\n              'rgb(54, 162, 235)',\n              'rgb(255, 99, 132)',\n            ],\n            hoverOffset: 4\n          }]\n        }\n      });\n    </script>\n    <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Return Home</a>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body id=\"edit-todo-body\" class=\"edit-todo-page\">\n    <h1 id=\"edit-todo-title\">Edit Todo List</h1>\n    <form id=\"edit-todo-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-todo\" type=\"submit\">Save Changes</button>\n    </form>\n    <a id=\"cancel-link\" href=\"{% url 'todo_list' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body id=\"edit-item-body\" class=\"edit-item-page\">\n    <h1 id=\"edit-item-title\">Edit Todo Item</h1>\n    <form id=\"edit-item-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"submit-item-edit\" type=\"submit\">Save Changes</button>\n    </form>\n    <a id=\"cancel-edit-link\" href=\"{% url 'view_todo_item' object.todolist.pk %}\">Cancel</a>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body id=\"home-body\" class=\"home-page\">\n    <h1 id=\"home-title\">Welcome to Your Todo App</h1>\n    <a id=\"todo-list-link\" href=\"{% url 'todo_list' %}\">View Your Todo Lists</a> <br/>\n    <a id=\"analysis-link\" href=\"{% url 'analysis' %}\">Task Analysis</a>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Todo List {{ todolist.title }}</title>\n</head>\n<body id=\"task-body\" class=\"task-page\">\n    <h1 id=\"todolist-title\">{{ todolist.title }}</h1>\n    <ul id=\"task-list\">\n    {% for task in object_list %}\n        <li id=\"task-{{ task.id }}\" class=\"task-item{% if task.completed %} completed{% endif %}\">\n          <span>{{ task.title }}</span>\n          {% if task.completed %}\n          <span class=\"completed-marker\"> - Completed</span>\n          {% endif %}\n            <div class=\"actions\">\n                <a id=\"view-task-{{ task.id }}\" href=\"#\">View</a>\n                <a id=\"edit-task-{{ task.id }}\" href=\"{% url 'edit_todo_item' task.id %}\">Edit</a>\n                <a id=\"delete-task-{{ task.id }}\" href=\"{% url 'delete_todo_item' task.id %}\">Delete</a>\n                <a id=\"complete-task-{{ task.id }}\" href=\"{% url 'complete_todo_item' task.id %}\">{% if task.completed %}Mark Incomplete{% else %}Mark Complete{% endif %}</a>\n            </div>\n        </li>\n    {% endfor %}\n    </ul>\n    <a id=\"back-link\" href=\"{% url 'todo_list' %}\">Back to Todo Lists</a>\n\n    <h2 id=\"new-task-title\">Add New Task</h2>\n    <form id=\"new-task-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"submit-new-task\" type=\"submit\">Add Task</button>\n    </form>\n\n    <a id=\"edit-list-link\" href=\"{% url 'edit_todo' todolist.id %}\">Edit List</a>\n    <a id=\"delete-list-link\" href=\"{% url 'delete_todo' todolist.id %}\">Delete List</a>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body id=\"todolist-body\" class=\"todolist-page\">\n  <h1 id=\"page-title\">Todo Lists</h1>\n  <ul id=\"todolist-items\">\n    {% for todolist in object_list %}\n        <li id=\"list-item-{{ todolist.pk }}\" class=\"todo-list-item\">\n            <a id=\"view-todo-{{ todolist.pk }}\" href=\"{% url 'view_todo_item' todolist.pk %}\">{{ todolist.title }}</a>\n            (<span id=\"completion-{{ todolist.pk }}\">{% if todolist.completed %}Completed{% else %}Incomplete{% endif %}</span>)\n        </li>\n    {% endfor %}\n  </ul>\n\n  <h2 id=\"new-list-title\">Create New Todo List</h2>\n  <form id=\"new-list-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"submit-new-list\" type=\"submit\">Create</button>\n  </form>\n\n    <a id=\"home-page-link\" href=\"{% url 'home' %}\">Return to home page</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'  # Or specify the fields you want\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__'  # Or specify the fields you want"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue = models.TextField()\n\n    def __str__(self):\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\nclass PricingPageView(FormView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = '/pricing/'  # Redirect to the same page after successful submission\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your message has been sent!')\n        return super().form_valid(form)\n\nclass SupportView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = '/support/' \n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted!')\n        return super().form_valid(form)\n\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body id=\"about-page\" class=\"main-content\">\n    <h1 id=\"about-title\" class=\"page-title\">About Us</h1>\n    <p id=\"about-text\" class=\"page-text\"> Information about our team and company.</p>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body id=\"features-page\" class=\"main-content\">\n    <h1 id=\"features-title\" class=\"page-title\">Features</h1>\n    <ul id=\"features-list\" class=\"feature-list\">\n        <li id=\"feature-1\" class=\"feature-item\">Feature 1</li>\n        <li id=\"feature-2\" class=\"feature-item\">Feature 2</li>\n         </ul>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body id=\"home-page\" class=\"main-content\">\n    <h1 id=\"home-title\" class=\"page-title\">Welcome</h1>\n    <nav id=\"main-nav\" class=\"main-nav\">\n      <ul>\n         <li><a href=\"{% url 'features' %}\">Features</a></li>\n        <li><a href=\"{% url 'pricing' %}\">Pricing</a></li>\n        <li><a href=\"{% url 'support' %}\">Support</a></li>\n        <li><a href=\"{% url 'about' %}\">About</a></li>\n      </ul>\n    </nav>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body id=\"pricing-page\" class=\"main-content\">\n    <h1 id=\"pricing-title\" class=\"page-title\">Pricing</h1>\n    <form id=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Submit</button>\n    </form>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n         <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body id=\"support-page\" class=\"main-content\">\n    <h1 id=\"support-title\" class=\"page-title\">Support</h1>\n     <form id=\"support-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Submit</button>\n    </form>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n           <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key' # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    \"\"\"\n    User registration form.\n    \"\"\"\n    pass\n\nclass LoginForm(forms.Form):\n    \"\"\"\n    User login form.\n    \"\"\"\n    username = forms.CharField(max_length=150)\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass MealForm(forms.ModelForm):\n    \"\"\"\n    Form for logging meals with specific fields and widgets.\n    \"\"\"\n    class Meta:\n        model = Meal\n        fields = '__all__'\n\nclass ActivityForm(forms.ModelForm):\n    \"\"\"\n    Form for logging activities with specific fields and widgets.\n    \"\"\"\n    class Meta:\n        model = Activity\n        fields = '__all__'\n\nclass ProfileForm(forms.ModelForm):\n    \"\"\"\n    Form for updating user profile and preferences.\n    \"\"\"\n    class Meta:\n        model = UserProfile\n        exclude = ('user',)\n\nclass PreferencesForm(forms.ModelForm):\n    \"\"\"\n    Form for updating dietary preferences.\n    \"\"\"\n    # Add fields for dietary preferences here\n    pass\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.utils import timezone\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    \"\"\"\n    Create a user profile when a new user is created.\n    \"\"\"\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    \"\"\"\n    Save the user profile if the user instance is updated.\n    \"\"\"\n    instance.userprofile.save()\n\nclass UserProfile(models.Model):\n    \"\"\"\n    Extended user profile to include additional user information.\n    \"\"\"\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='userprofile')\n    # Add additional fields as needed\n\nclass Meal(models.Model):\n    \"\"\"\n    Model to log information about meals consumed by users.\n    \"\"\"\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    # Add fields for meal details (name, calories, date, etc.)\n\nclass Activity(models.Model):\n    \"\"\"\n    Model to log activities and accompanying calorie expenditure.\n    \"\"\"\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    # Add fields for activity details (name, calories burned, date, etc.)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),  # Added logout URL\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_log, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_log, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date, timedelta\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate, logout\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nimport matplotlib.pyplot as plt\nimport io\nimport base64\n\n# ... (rest of the views code, implement the logic for each view)\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\ndef get_weekly_calorie_chart(user):\n    # ... (implementation as provided in the original prompt)\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# ... (Other settings)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [  # Add this setting\n os.path.join(BASE_DIR, 'static'),\n] \nLOGIN_URL = '/login/'\nLOGIN_REDIRECT_URL = '/dashboard/' # Add this setting\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title id=\"activity-log-title\" class=\"page-title\">Calorie Tracker - Activity Log</title>\n</head>\n<body id=\"activity-log-body\" class=\"page-body\">\n    <div id=\"activity-log-container\" class=\"container\">\n    </div>\n</body>\n</html>\n"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title id=\"add-activity-title\">Add Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"add-activity-body\">\n    <div id=\"add-activity-container\" class=\"container\">\n        <form id=\"add-activity-form\" method=\"post\"> \n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submit-button\" type=\"submit\">Add Activity</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"add-meal-title\">Add Meal - Calorie Tracker</title>\n {% load static %}\n <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body  id=\"add-meal-body\">\n <div id=\"add-meal-container\" class=\"container\">\n  <form method=\"post\" id=\"add-meal-form\">\n  {% csrf_token %}\n  {{ form.as_p }}\n  <button type=\"submit\" id=\"submit-button\">Add Meal</button>\n  </form>\n </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title id=\"home-title\">Calorie Tracker - Home</title>\n</head>\n<body id=\"home-body\">\n    <div id=\"home-container\" class=\"container\">\n        <h1>Welcome to the Calorie Tracker!</h1>\n        <a id=\"signup-link\" href=\"{% url 'signup' %}\" class=\"button\">Sign Up</a>\n        <a id=\"login-link\" href=\"{% url 'login' %}\" class=\"button\">Login</a>\n    </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title id=\"login-title\">Login - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"login-body\">\n    <div id=\"login-container\" class=\"container\">\n    <form method=\"post\" id=\"login-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\">Login</button>\n    </form>\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title id=\"signup-title\">Sign Up - Calorie Tracker</title>\n{% load static %}\n<link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"signup-body\">\n<div id=\"signup-container\" class=\"container\">\n<form method=\"post\" id=\"signup-form\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"submit-button\">Sign Up</button>\n</form>\n</div>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"dashboard-title\">Calorie Tracker - Dashboard</title>\n</head>\n<body id=\"dashboard-body\">\n <div id=\"dashboard-container\" class=\"container\">\n  </div>\n</body>\n</html>\n"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"edit-activity-title\">Edit Activity - Calorie Tracker</title>\n {% load static %}\n <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"edit-activity-body\">\n <div id=\"edit-activity-container\" class=\"container\">\n </div>\n</body>\n</html>\n"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"edit-meal-title\">Edit Meal - Calorie Tracker</title>\n {% load static %}\n <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"edit-meal-body\">\n <div id=\"edit-meal-container\" class=\"container\">\n  </div>\n</body>\n</html>\n"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"meal-log-title\">Calorie Tracker - Meal Log</title>\n</head>\n<body id=\"meal-log-body\">\n <div id=\"meal-log-container\" class=\"container\">\n  </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"settings-title\">Calorie Tracker - Settings</title>\n</head>\n<body id=\"settings-body\">\n <div id=\"settings-container\" class=\"container\">\n  </div>\n</body>\n</html>\n"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"tutorials-title\">Tutorials - Calorie Tracker</title>\n {% load static %}\n <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"tutorials-body\">\n <div id=\"tutorials-container\" class=\"container\">\n  </div>\n</body>\n</html>\n"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"update-preferences-title\">Update Preferences - Calorie Tracker</title>\n {% load static %}\n <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"update-preferences-body\">\n <div id=\"update-preferences-container\" class=\"container\">\n  </div>\n</body>\n</html>\n"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"update-profile-title\">Update Profile - Calorie Tracker</title>\n {% load static %}\n <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"update-profile-body\">\n <div id=\"update-profile-container\" class=\"container\">\n  </div>\n</body>\n</html>\n"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n <meta charset=\"UTF-8\">\n <title id=\"weekly-calorie-chart-title\">Weekly Calorie Chart - Calorie Tracker</title>\n {% load static %}\n <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body id=\"weekly-calorie-chart-body\">\n <div id=\"weekly-calorie-chart-container\" class=\"container\">\n  </div>\n</body>\n</html>\n"}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label='Upload JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    status = models.CharField(max_length=50)\n    comments = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Review for {self.project.name}\""}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n    path('upload_json/', views.upload_json, name='upload_json'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import Project, Review\nfrom .forms import JSONUploadForm\n\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    reviews = project.reviews.all()\n    return render(request, 'review.html', {'project': project, 'reviews': reviews})\n\n\ndef home_view(request):\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'projects': projects})\n\n\ndef upload_json(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            try:\n                json_data = json.load(form.cleaned_data['json_file'])\n                # Process json_data to create/update Project and Review objects\n                # ... (Implementation for handling JSON data)\n                return redirect('home')  # Redirect to home page after processing\n            except json.JSONDecodeError:\n                form.add_error('json_file', 'Invalid JSON file.')\n    else:\n        form = JSONUploadForm()\n    return render(request, 'upload_json.html', {'form': form})\n\n\ndef about_view(request):\n    return render(request, 'about.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-container\">\n    <h1>About This Site</h1>\n    <p>This is a project review site where you can upload projects and review them.</p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n<header id=\"header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n                <ul>\n                        <li><a href=\"{% url 'home' %}\">Home</a></li>\n                        <li><a href=\"{% url 'about' %}\">About</a></li>\n                </ul>\n        </nav>\n</header>\n\n<main id=\"main-content\" class=\"main-content\">\n    {% block content %}{% endblock %}\n</main>\n\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1>Projects</h1>\n    <ul id=\"project-list\" class=\"project-list\">\n        {% for project in projects %}\n            <li><a href=\"{% url 'review' project.id %}\">{{ project.name }}</a></li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'upload_json' %}\" id=\"upload-link\" class=\"upload-link\">Upload JSON</a>\n</div>\n{% endblock %}"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"review-container\">\n    <h1 id=\"project-title\">{{ project.name }}</h1>\n    <div id=\"review-list\" class=\"review-list\">\n        {% for review in reviews %}\n            <div class=\"review-item\">\n              <p class=\"review-status\">Status: {{ review.status }}</p>\n                <p class=\"review-comments\">{{ review.comments }}</p>\n            </div>\n        {% endfor %}\n    </div>\n</div>\n{% endblock %}"}, {"file": "upload_json.html", "path": "example_app/templates/upload_json.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"upload-json-container\" class=\"upload-json-container\">\n    <h1>Upload JSON File</h1>\n    <form method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Upload</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "/* Basic styling for the project review site */\nbody {\n    font-family: sans-serif;\n}\n\n.main-header{\n    background-color: #333;\n    color:white;\n    padding:1rem;\n}\n\n.main-nav ul {\n    list-style: none;\n    padding:0;\n    margin: 0;\n}\n.main-nav li {\n    display:inline;\n    margin-right:1rem;\n}\n\n.home-container, .review-container, .about-container, .upload-json-container{\n    padding:1rem;\n}\n\n.project-list{\n    list-style: none;\n    padding:0;\n}\n"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom .models import Claim, Budget\n\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'description', 'status', 'rejection_reason', 'created_at', 'operations')\n    list_filter = ('status', 'category', 'user')\n    actions = (approve_claims, reject_claims)\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/edit_claim/{}\" class=\"button edit-button\">Edit</a> '\\\n            '<a href=\"/delete_claim/{}\" class=\"button delete-button\">Delete</a>',\n            obj.id, obj.id\n        )\n    operations.short_description = \"Operations\"\n    operations.allow_tags = True\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='approved')\n        messages.success(request, 'Selected claims approved.')\n\n    approve_claims.short_description = \"Approve selected claims\"\n\n    def reject_claims(self, request, queryset):\n        if 'apply' in request.POST:\n            rejection_reason = request.POST['rejection_reason']\n            queryset.update(status='rejected', rejection_reason=rejection_reason)\n            messages.success(request, 'Selected claims rejected.')\n            return None\n        return render(request, 'admin/reject_claims_form.html', context={'claims': queryset})\n\n    reject_claims.short_description = \"Reject selected claims\"\n\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit')"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\n\n\nclass Claim(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    )\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n\nclass Budget(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(), name='logout'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget\n\ndef check_budget_limit(category, amount):\n    try:\n        budget = Budget.objects.get(category=category)\n        spent = Claim.objects.filter(category=category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        return spent + amount <= budget.limit\n    except Budget.DoesNotExist:\n        return True"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login, authenticate\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom .utils import check_budget_limit\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Account created successfully. You can now log in.')\n            return redirect('login')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Claim submitted successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user)\n    return render(request, 'claim_status.html', {'claims': claims})\n\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be edited.')\n        return redirect('claim_status')\n\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            updated_claim = form.save(commit=False)\n            if check_budget_limit(updated_claim.category, updated_claim.amount):\n                updated_claim.save()\n                messages.success(request, 'Claim updated successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    claim.delete()\n    messages.success(request, 'Claim deleted successfully.')\n    return redirect('claim_status')\n\n\n@login_required\ndef analysis_view(request):\n    approved_claims = Claim.objects.filter(status='approved').aggregate(total_amount=Sum('amount'))\n    budgets = Budget.objects.all()\n    return render(request, 'analysis.html', {'approved_claims': approved_claims, 'budgets': budgets})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.5 on 2025-01-26 23:19\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Analysis Report{% endblock %}\n\n{% block content %}\n<div id=\"analysis-container\" class=\"analysis-container\">\n    <h2>Analysis Report</h2>\n    <div id=\"total-approved-claims\" class=\"analysis-section\">\n        <h3>Total Approved Claims Amount</h3>\n        <p id=\"total-amount\" class=\"amount-value\">${{ approved_claims.total_amount|default:0 }}</p>\n    </div>\n    <div id=\"budget-utilization\" class=\"analysis-section\">\n        <h3>Budget Utilization</h3>\n        <table id=\"budget-table\" class=\"budget-table\">\n            <thead>\n                <tr>\n                    <th>Category</th>\n                    <th>Limit</th>\n                    <th>Spent</th>\n                    <th>Remaining</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for budget in budgets %}\n                <tr>\n                    <td id=\"category-{{ budget.id }}\" class=\"category-cell\">{{ budget.category }}</td>\n                    <td id=\"limit-{{ budget.id }}\" class=\"limit-cell\">${{ budget.limit }}</td>\n                    <td id=\"spent-{{ budget.id }}\" class=\"spent-cell\">\n                        ${{ budget.claim_set.filter(status='approved').aggregate(Sum('amount'))['amount__sum']|default:0 }}\n                    </td>\n                    <td id=\"remaining-{{ budget.id }}\" class=\"remaining-cell\">\n                        ${{ budget.limit|subtract:budget.claim_set.filter(status='approved').aggregate(Sum('amount'))['amount__sum']|default:0 }}\n                    </td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"page-title\" class=\"page-title\">{% block title %}Accounting System{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"main-body\" class=\"main-body\">\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <ul id=\"nav-list\" class=\"nav-list\">\n            <li id=\"home-link\" class=\"nav-item\"><a href=\"{% url 'home' %}\">Home</a></li>\n            {% if user.is_authenticated %}\n            <li id=\"submit-claim-link\" class=\"nav-item\"><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n            <li id=\"claim-status-link\" class=\"nav-item\"><a href=\"{% url 'claim_status' %}\">Claim Status</a></li>\n            <li id=\"analysis-link\" class=\"nav-item\"><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n            <li id=\"logout-link\" class=\"nav-item\"><a href=\"{% url 'logout' %}\">Logout</a></li>\n            {% else %}\n            <li id=\"signup-link\" class=\"nav-item\"><a href=\"{% url 'signup' %}\">Sign Up</a></li>\n            <li id=\"login-link\" class=\"nav-item\"><a href=\"{% url 'login' %}\">Login</a></li>\n            {% endif %}\n        </ul>\n    </nav>\n\n    <div id=\"content-wrapper\" class=\"content-wrapper\">\n        {% if messages %}\n        <ul id=\"message-list\" class=\"message-list\">\n            {% for message in messages %}\n            <li id=\"message-{{ message.tags }}\" class=\"message {{ message.tags }}\">{{ message }}</li>\n            {% endfor %}\n        </ul>\n        {% endif %}\n\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n<div id=\"edit-claim-container\" class=\"form-container\">\n    <h2 id=\"edit-claim-title\">Edit Claim</h2>\n    <form id=\"edit-claim-form\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"category-field\" class=\"form-group\">\n            {{ form.category.label_tag }}\n            {{ form.category }}\n        </div>\n        <div id=\"amount-field\" class=\"form-group\">\n            {{ form.amount.label_tag }}\n            {{ form.amount }}\n        </div>\n        <div id=\"description-field\" class=\"form-group\">\n            {{ form.description.label_tag }}\n            {{ form.description }}\n        </div>\n        <button id=\"submit-edit-button\" type=\"submit\">Update Claim</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n<div id=\"claim-status-container\" class=\"claim-status-container\">\n    <h2 id=\"claim-status-title\">Claim Status</h2>\n    <table id=\"claim-table\" class=\"claim-table\">\n        <thead>\n            <tr>\n                <th>Category</th>\n                <th>Amount</th>\n                <th>Description</th>\n                <th>Status</th>\n                <th>Rejection Reason</th>\n                <th>Created At</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for claim in claims %}\n            <tr id=\"claim-row-{{ claim.id }}\">\n                <td id=\"category-{{ claim.id }}\">{{ claim.category }}</td>\n                <td id=\"amount-{{ claim.id }}\">${{ claim.amount }}</td>\n                <td id=\"description-{{ claim.id }}\">{{ claim.description }}</td>\n                <td id=\"status-{{ claim.id }}\">{{ claim.status }}</td>\n                <td id=\"rejection-reason-{{ claim.id }}\">{{ claim.rejection_reason }}</td>\n                <td id=\"created-at-{{ claim.id }}\">{{ claim.created_at }}</td>\n                <td id=\"actions-{{ claim.id }}\">\n                    {% if claim.status == 'pending' %}\n                    <a id=\"edit-link-{{ claim.id }}\" href=\"/edit_claim/{{ claim.id }}/\" class=\"button edit-button\">Edit</a>\n                    <a id=\"delete-link-{{ claim.id }}\" href=\"/delete_claim/{{ claim.id }}/\" class=\"button delete-button\">Delete</a>\n                    {% endif %}\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Accounting and Cashier Management - Home{% endblock %}\n\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1 id=\"home-title\">Welcome to the Accounting and Cashier Management System</h1>\n    {% if user.is_authenticated %}\n    <p id=\"logged-in-message\">You are logged in as {{ user.username }}.</p>\n    {% else %}\n    <div id=\"auth-links\" class=\"auth-links\">\n        <a id=\"signup-link\" href=\"{% url 'signup' %}\" class=\"button signup-button\">Sign Up</a>\n        <a id=\"login-link\" href=\"{% url 'login' %}\" class=\"button login-button\">Login</a>\n    </div>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Login - Accounting and Cashier Management{% endblock %}\n\n{% block content %}\n<div id=\"login-container\" class=\"form-container\">\n    <h2 id=\"login-title\">Login</h2>\n    <form id=\"login-form\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"username-field\" class=\"form-group\">\n            {{ form.username.label_tag }}\n            {{ form.username }}\n        </div>\n        <div id=\"password-field\" class=\"form-group\">\n            {{ form.password.label_tag }}\n            {{ form.password }}\n        </div>\n        <button id=\"login-button\" type=\"submit\">Login</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Sign Up - Accounting and Cashier Management{% endblock %}\n\n{% block content %}\n<div id=\"signup-container\" class=\"form-container\">\n    <h2 id=\"signup-title\">Sign Up</h2>\n    <form id=\"signup-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"signup-button\" type=\"submit\">Sign Up</button>\n    </form>\n    <p id=\"login-link-paragraph\">Already have an account? <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a></p>\n</div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n<div id=\"submit-claim-container\" class=\"form-container\">\n    <h2 id=\"submit-claim-title\">Submit Claim</h2>\n    <form id=\"submit-claim-form\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"category-field\" class=\"form-group\">\n            {{ form.category.label_tag }}\n            {{ form.category }}\n        </div>\n        <div id=\"amount-field\" class=\"form-group\">\n            {{ form.amount.label_tag }}\n            {{ form.amount }}\n        </div>\n        <div id=\"description-field\" class=\"form-group\">\n            {{ form.description.label_tag }}\n            {{ form.description }}\n        </div>\n        <button id=\"submit-claim-button\" type=\"submit\">Submit Claim</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n\nLOGIN_REDIRECT_URL = 'home'  # Redirect after login\nLOGOUT_REDIRECT_URL = 'home' # Redirect after logout\nLOGIN_URL = '/login/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "reject_claims_form.html", "path": "example_app/templates/admin/reject_claims_form.html", "code": "{% extends \"admin/change_list_results.html\" %}\n{% block result_list %}\n<div id=\"reject-form-container\">\n    <form id=\"reject-form\" action=\"{% url 'admin:example_app_claim_changelist' %}?{{ request.GET.QUERY_STRING }}&apply=true\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"rejection-reason\">Rejection Reason:</label><br>\n        <textarea id=\"rejection-reason\" name=\"rejection_reason\" rows=\"4\" cols=\"50\"></textarea><br><br>\n        <input type=\"submit\" value=\"Reject Selected Claims\">\n    </form>\n    <a href=\"{% url 'admin:example_app_claim_changelist' %}?{{ request.GET.QUERY_STRING }}\">Cancel</a>\n</div>\n\n{% endblock %}"}, {"file": "styles.css", "path": "static/css/styles.css", "code": ".button {\n  /* Basic button styles */\n}\n\n.edit-button {\n  /* Edit button styles */\n}\n\n.delete-button {\n  /* Delete button styles */\n}\n\n.signup-button {\n  /* Signup button styles */\n}\n\n.login-button {\n  /* Login button styles */\n}\n\n/* Add more specific styles as needed */"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\nh1 {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"hello-world-body\" class=\"main-body\">\n    <h1 id=\"hello-world-heading\" class=\"page-title\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        # ... (rest of the migration code)\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"helloworld-body\">\n    <div id=\"helloworld-container\" class=\"content-container\">\n        <h1 id=\"helloworld-title\" class=\"title\">Hello, World!</h1>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"home-body\">\n    <div id=\"home-container\" class=\"content-container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome Home</h1>\n         <a id=\"helloworld-link\" class=\"nav-link\" href=\"{% url 'helloworld' %}\">Hello World</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Added line\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')] # Updated line\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(\"BashCrawl is a text-based adventure game.\")\n        print(\"Navigate using commands like 'cd', 'ls', and 'inventory'.\") \n\n    def print_game_help(self):\n        print(\"Available commands: ls, cd [directory], inventory, help, quit\")\n\n    def list_contents(self):\n        contents = self.directory_structure.get(self.current_dir, [])\n        if contents:\n            print(\" \".join(contents))\n        else:\n            print(\"Nothing here.\")\n        if self.current_dir in self.items:\n            print(self.items[self.current_dir])\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n        else:\n            print(\"Invalid directory.\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"Inventory:\")\n            for item in self.inventory:\n                print(item)\n        else:\n            print(\"Your inventory is empty.\")\n\n    def play(self):\n        while True:\n            command = input(f\"{self.current_dir} $ \").split()\n            if not command:\n                continue\n\n            action = command[0]\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    self.change_directory(ROOT_DIR) # go to root if no dir specified\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                break\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\")\n\n            # Check for item pickup\n            if self.current_dir in self.items and self.items[self.current_dir] not in self.inventory:\n                item = self.items[self.current_dir]\n                self.inventory.append(item)\n                print(f\"You picked up: {item}\")\n                del self.items[self.current_dir]\n\n\n    def main_menu(self):\n        while True:\n            self.print_main_menu()\n            choice = input(\"> \")\n            if choice == \"1\":\n                self.play()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                break\n            else:\n                print(\"Invalid choice.\")\n\n\ndef main():\n    game = BashCrawl()\n    game.main_menu()\n\n\nif __name__ == \"__main__\":\n    main()\n"}], "19": [{"file": "19-stdanswer.py", "path": "19-stdanswer.py", "code": "# coding=utf-8\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"Check if a file exists at the given file path.\"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"Error: File '{file_path}' not found.\")\n\n\ndef read_dataset(file_path):\n    \"\"\"Read the dataset from a CSV file and return a DataFrame.\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except pd.errors.EmptyDataError:\n        raise ValueError(\"Error: Input CSV file is empty.\")\n    except Exception as e:\n        raise Exception(f\"Error reading CSV: {e}\")\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"Validate that the dataset contains all required columns.\"\"\"\n    missing_columns = set(required_columns) - set(df.columns)\n    if missing_columns:\n        raise KeyError(f\"Error: Missing columns in the dataset: {', '.join(missing_columns)}\")\n\n\ndef preprocess_dataset(df):\n    \"\"\"Preprocess the dataset, including cleaning and formatting dates.\"\"\"\n    try:\n        df['Date of death'] = pd.to_datetime(df['Date of death'])\n        df['Week'] = df['Date of death'].dt.isocalendar()[1]\n        return df\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"Plot the weekly deaths and save as a histogram image file.\"\"\"\n    plt.figure(figsize=(10, 6))\n    plt.bar(weekly_deaths.index, weekly_deaths.values)\n    plt.xlabel('Week Number')\n    plt.ylabel('Number of Deaths')\n    plt.title('Weekly Deaths Histogram')\n    plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels\n    plt.tight_layout()\n    plt.savefig(output_file)\n\n\ndef main():\n    \"\"\"Main execution function to process the dataset and plot the histogram.\"\"\"\n    try:\n        check_file_existence(input_file)\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death\n2024-01-01\n2024-01-08\n2024-01-15\n2024-01-01\n2024-01-08\n2024-01-22\n2024-01-29\n2024-02-05\n2024-02-05\n2024-02-12\n2024-02-19\n2024-02-19\n2024-02-26\n"}]}