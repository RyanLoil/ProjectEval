{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Your Weight (kg)', min_value=0)\n    height = forms.FloatField(label='Your Height (cm)', min_value=0)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\",\n    \"Invalid weight\": \"The weight can't be less than 0.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height'] / 100  # Convert cm to meters\n            if height <=0:\n                 return render(request, 'bmi_calculator.html', {'form': form, 'error': bmi_interpretation[\"Invalid height\"]})\n            if weight <=0:\n                 return render(request, 'bmi_calculator.html', {'form': form, 'error': bmi_interpretation[\"Invalid weight\"]})          \n            bmi = weight / (height * height)\n            category = next((k for k, v in bmi_category.items() if bmi < v), None)\n            interpretation = bmi_interpretation[category]\n            return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'category': category, 'interpretation': interpretation})\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form})\n\ndef advice(request):\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html>\n<head><title>Advice</title></head>\n<body>\n    <div id=\"advice-container\" class=\"content-container\">\n        <h1>Health Advice Based on BMI</h1>\n        <div id=\"underweight-advice\" class=\"advice-section\">\n            <h2>Underweight</h2>\n            <p>If you're underweight, consider consulting a doctor or registered dietitian for personalized guidance.</p>\n        </div>\n        <div id=\"normal-weight-advice\" class=\"advice-section\">\n            <h2>Normal Weight</h2>\n            <p>Congratulations on maintaining a healthy weight! Continue with a balanced diet and regular exercise.</p>\n        </div>\n        <div id=\"overweight-advice\" class=\"advice-section\">\n            <h2>Overweight</h2>\n            <p>If you're overweight, focus on gradual weight loss through healthy eating habits and increased physical activity. Consult a healthcare professional for personalized advice.</p>\n        </div>\n        <div id=\"obese-advice\" class=\"advice-section\">\n            <h2>Obese</h2>\n            <p>If you're obese, it's important to consult a doctor or registered dietitian for guidance on weight management and potential health risks.</p>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"content-container\">\n        <h1>BMI Calculator</h1>\n        <form id=\"bmi-form\" method=\"post\" class=\"bmi-form\">\n            {% csrf_token %}\n            <div id=\"weight-field\" class=\"form-field\">\n                {{ form.weight.label_tag }}\n                {{ form.weight }}\n            </div>\n            <div id=\"height-field\" class=\"form-field\">\n                {{ form.height.label_tag }}\n                {{ form.height }}\n             </div>\n            <button id=\"calculate-button\" type=\"submit\" class=\"submit-button\">Calculate</button>\n        </form>\n\n        {% if error %}\n            <p id=\"error-message\" class=\"error-message\">{{ error }}</p>\n        {% endif %}\n\n        {% if bmi %}\n            <div id=\"results-container\" class=\"results\">\n                <p id=\"bmi-result\">Your BMI: {{ bmi|floatformat:2 }}</p>\n                <p id=\"bmi-category\">Category: {{ category }}</p>\n                <p id=\"bmi-interpretation\">{{ interpretation }}</p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html>\n<head><title>Homepage</title></head>\n<body>\n    <div id=\"homepage-container\" class=\"content-container\">\n        <h1>Welcome to the BMI Calculator</h1>\n        <p>Calculate your Body Mass Index (BMI) to get an understanding of your weight status.</p>\n        <a id=\"bmi-calculator-link\" href=\"{% url 'bmi_calculator' %}\" class=\"navigation-link\">Go to BMI Calculator</a>\n        <a id=\"advice-link\" href=\"{% url 'advice' %}\" class=\"navigation-link\">View Advice</a> \n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', min_value=0.01)\n    source_currency = forms.ChoiceField(label='Source Currency', choices=CURRENCY_CHOICES)\n    target_currency = forms.ChoiceField(label='Target Currency', choices=CURRENCY_CHOICES)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=20, decimal_places=10, verbose_name='Rate')\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Datetime')\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency}: {self.rate} at {self.datetime}'\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport decimal\n\nfrom django.shortcuts import render, redirect\nfrom django.views.generic import TemplateView\nfrom django.utils import timezone\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated_rate(source_currency, target_currency):\n    # In real app, use API for rates\n    USD_BASE = {\n        'USD': 1.00,\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'JPY': 110.00,\n        'AUD': 1.35,\n        'CNY': 7.00,\n        'CAD': 1.25,\n        'CHF': 0.92,\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE.get(source_currency, 1) * USD_BASE.get(target_currency, 1))\n\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n    form_class = CurrencyConverterForm\n\n    def get(self, request):\n        form = self.form_class()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = self.form_class(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n\n            rate = get_updated_rate(source_currency, target_currency)\n            converted_amount = amount * decimal.Decimal(str(rate))\n            \n            CurrencyConvertRateModel.objects.create(\n                source_currency=source_currency, \n                target_currency=target_currency, \n                rate=rate\n            )\n\n            return render(request, 'result.html', {'amount': amount, 'source_currency': source_currency, 'target_currency': target_currency, 'converted_amount': converted_amount, 'rate': rate})\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        return render(request, self.template_name)\n\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0002_auto_20240904_1621.py", "path": "example_app/migrations/0002_auto_20240904_1621.py", "code": "# Generated by Django 3.2.7 on 2024-09-04 08:21\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('example_app', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='id',\n            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),\n        ),\n         migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='source_currency',\n            field=models.CharField(max_length=3, verbose_name='Source Currency'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='target_currency',\n            field=models.CharField(max_length=3, verbose_name='Target Currency'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='rate',\n            field=models.DecimalField(decimal_places=10, max_digits=20, verbose_name='Rate'),\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n</head>\n<body>\n    <div id=\"trends-container\" class=\"trends-container\">\n        <!-- Exchange Rate Trends Content Here -->\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"converter-container\">\n        <h1>Currency Converter</h1>\n        <form method=\"post\" id=\"converter-form\" class=\"converter-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"convert-button\" class=\"convert-button\">Convert</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "result.html", "path": "example_app/templates/result.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Conversion Result</title>\n</head>\n<body>\n    <div id=\"result-container\" class=\"result-container\">\n        <h1>Conversion Result</h1>\n        <p id=\"original-amount\" class=\"result-item\">{{ amount }} {{ source_currency }}</p>\n        <p id=\"converted-amount\" class=\"result-item\">= {{ converted_amount }} {{ target_currency }}</p>\n        <p id=\"exchange-rate\" class=\"result-item\">Exchange Rate: {{ rate }}</p>\n    </div>\n</body>\n</html>\n"}, {"file": "info.html", "path": "example_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Info</title>\n</head>\n<body>\n    <div id=\"info-container\" class=\"info-container\">\n    <!-- Info Content Here -->\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView, InfoView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', InfoView, name='info'),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.views import View\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = []\n    if include_uppercase:\n        characters.extend(list(string.ascii_uppercase))\n    if include_lowercase:\n        characters.extend(list(string.ascii_lowercase))\n    if include_numbers:\n        characters.extend(list(string.digits))\n    if include_symbols:\n        characters.extend(list(string.punctuation))\n\n    if not characters:\n        return \"Please select at least one character type.\"\n\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    generated_password = None\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase')\n        include_lowercase = request.POST.get('lowercase')\n        include_numbers = request.POST.get('numbers')\n        include_symbols = request.POST.get('symbols')\n\n        generated_password = generate_password(\n            length,\n            include_uppercase,\n            include_lowercase,\n            include_numbers,\n            include_symbols\n        )\n\n    return render(request, 'generator.html', {'password': generated_password})\n\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n}\nh1 {\n    color: #333;\n}\n#copy-message {\n    display: none; /* Initially hidden */\n    color: green;\n    margin-top: 10px;\n}"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function() {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function() {\n            message.style.display = 'none';\n        }, 3000);\n    }, function(err) {\n        console.error('Could not copy text: ', err);\n    });\n}"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"about-us-container\" class=\"container\">\n        <h1 id=\"about-us-title\">About Us</h1>\n        <p id=\"about-us-content\">This is the about us page for the password generator.</p>\n    </div>\n</body>\n</html>"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <div id=\"generator-container\" class=\"container\">\n        <h1 id=\"generator-title\">Password Generator</h1>\n        <form method=\"post\">\n            {% csrf_token %}\n            <label for=\"length\">Length:</label>\n            <input type=\"number\" id=\"length\" name=\"length\" min=\"1\" max=\"100\" value=\"12\"><br><br>\n            <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" checked>\n            <label for=\"uppercase\">Uppercase</label><br>\n            <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" checked>\n            <label for=\"lowercase\">Lowercase</label><br>\n            <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" checked>\n            <label for=\"numbers\">Numbers</label><br>\n            <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" checked>\n            <label for=\"symbols\">Symbols</label><br><br>\n            <button type=\"submit\">Generate Password</button>\n        </form>\n        {% if password %}\n            <p>Your generated password:</p>\n            <p id=\"password\">{{ password }}</p>\n            <button id=\"copy-button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n            <span id=\"copy-message\"></span>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\">Welcome to the Password Generator!</h1>\n        <a href=\"/generator/\" id=\"generate-link\">Generate a Password</a>\n        <a href=\"/about-us/\" id=\"about-us-link\">About Us</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n        buffer = io.BytesIO()\n        img.save(buffer, 'PNG')\n        img_str = base64.b64encode(buffer.getvalue()).decode('utf-8')\n\n        context = {'qr_code': img_str}\n        return render(request, 'qr_app/generate.html', context)\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n        response = HttpResponse(content_type='image/png')\n        response['Content-Disposition'] = f'attachment; filename=\"qrcode.png\"'\n        img.save(response, 'PNG')\n        return response\n    return HttpResponse(\"No data to download.\")\n\n\ndef about(request):\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"about-container\">\n        <h1>About the QR Code Generator</h1>\n        <p>This is a simple QR code generator built with Django. It allows you to create custom QR codes for various purposes.</p>\n\n        <h2>Frequently Asked Questions</h2>\n        <ul>\n            <li><strong>How does it work?</strong> The generator uses the qrcode library to encode data into a QR code image.</li>\n            <li><strong>What data can I encode?</strong> You can encode text, URLs, contact information, and more.</li>\n        </ul>\n\n        <h2>Policies</h2>\n        <p>This generator is provided as is. Use it responsibly. We are not responsible for the content encoded in the QR codes.</p>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n\n        #qr-code-container {\n          display: flex;\n          justify-content: center; /* Center horizontally */\n          align-items: center;    /* Center vertically */\n          margin-top: 20px;      /* Add some top margin */\n      }\n      \n      #qr-code {\n          max-width: 300px;\n          max-height: 300px;\n      }\n      #download-button {\n        display: none;\n    }\n    </style>\n</head>\n<body>\n    <div id=\"generate-form\" class=\"generate-form\">\n        <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <label for=\"data\">Data:</label>\n            <input type=\"text\" id=\"data\" name=\"data\" required>\n\n            <label for=\"fill_color\">Fill Color:</label>\n            <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n\n            <label for=\"back_color\">Background Color:</label>\n            <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\">\n\n            <button type=\"submit\">Generate QR Code</button>\n        </form>\n\n      <div id=\"qr-code-container\">  \n        {% if qr_code %}\n           <img id=\"qr-code\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"Generated QR Code\">\n           <form id=\"download-form\" method=\"post\" action=\"{% url 'download_qr_code' %}\">\n             {% csrf_token %}\n             <input type=\"hidden\" id=\"data\" name=\"data\" value=\"{{ data }}\">\n             <input type=\"hidden\" name=\"fill_color\" value=\"{{ fill_color }}\">\n             <input type=\"hidden\" name=\"back_color\" value=\"{{ back_color }}\">\n             <button id=\"download-button\" type=\"submit\">Download</button>\n         </form>\n\n           <script>\n            document.getElementById('download-button').style.display = 'block';\n        </script>\n\n        {% endif %}\n    </div>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1>Welcome to the QR Code Generator</h1>\n        <p>Create custom QR codes quickly and easily.</p>\n        <a href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n        <a href=\"{% url 'about' %}\">About</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n        elif 'file_upload' in request.FILES:\n            uploaded_file = request.FILES['file_upload']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            filepath = fs.path(filename)\n            with open(filepath, 'r') as f:\n                markdown_text = f.read()\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n    return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-section\" class=\"about-content\">\n        <h1>About This Markdown to HTML Converter</h1>\n        <p>This simple web application allows you to convert Markdown text to HTML. You can either paste your Markdown directly into the text area or upload a Markdown file.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-section\" class=\"convert-content\">\n        <h1>Markdown to HTML Converter</h1>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <label for=\"markdown_text\">Enter Markdown:</label><br>\n            <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"80\"></textarea><br><br>\n            <label for=\"file_upload\">Or upload a file:</label>\n            <input type=\"file\" id=\"file_upload\" name=\"file_upload\"><br><br>\n            <input type=\"submit\" value=\"Convert\">\n        </form>\n\n        {% if html %}\n            <div id=\"html-output\" class=\"html-content\">\n                <h2>Converted HTML:</h2>\n                {{ html | safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-section\" class=\"home-content\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n        <p>Use the links below to navigate:</p>\n        <ul>\n            <li><a href=\"{% url 'convert' %}\">Convert Markdown</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"}, {"file": null, "path": "media", "code": null}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item,\n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView, UpdateView\nfrom .models import TodoList, TodoItem\nfrom .forms import TodoListForm, TodoItemForm\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n    context_object_name = 'todo_lists'\n\n    def post(self, request, *args, **kwargs):\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list')\n        return render(request, self.template_name, {'form': form})\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['form'] = TodoListForm()\n        return context\n\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\n\nclass TodoListUpdate(UpdateView):\n    model = TodoList\n    fields = ['title', 'description', 'completed']\n    template_name = 'edit_todo.html'\n    success_url = '/todos/'\n\n\nedit_todo = TodoListUpdate.as_view()\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n    context_object_name = 'todo_items'\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        context['form'] = TodoItemForm()\n        return context\n\n    def post(self, request, *args, **kwargs):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        form = TodoItemForm(request.POST)\n        if form.is_valid():\n            todo_item = form.save(commit=False)\n            todo_item.todolist = self.todolist\n            todo_item.save()\n            return redirect('view_todo_item', pk=self.todolist.pk)\n        return render(request, self.template_name, {'form': form, 'todolist': self.todolist})\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todolist_pk)\n\n\nclass TodoItemUpdate(UpdateView):\n    model = TodoItem\n    fields = ['title', 'description', 'completed']\n    template_name = 'edit_todo_item.html'\n\n    def get_success_url(self):\n        return '/todos/view_task/' + str(self.object.todolist.pk)\n\n\nedit_todo_item = TodoItemUpdate.as_view()\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todo_item.todolist.pk)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        completed_count = todo_items.filter(completed=True).count()\n        total_count = todo_items.count()\n\n        if total_count > 0:\n            completion_rate = (completed_count / total_count) * 100\n        else:\n            completion_rate = 0\n\n        context['completion_rate'] = completion_rate\n        # Add more analysis data as needed\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, TodoItem\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['title', 'description']\n\nclass TodoItemForm(forms.ModelForm):\n    class Meta:\n        model = TodoItem\n        fields = ['title', 'description']"}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body id=\"analysis-body\" class=\"analysis-page\">\n    <div id=\"completion-rate-chart-container\" class=\"chart-container\">\n        <canvas id=\"completion-rate-chart\" class=\"chart\"></canvas>\n    </div>\n    <script>\n        const ctx = document.getElementById('completion-rate-chart');\n        const completionRate = {{ completion_rate }};\n\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    label: 'Task Completion Rate',\n                    data: [completionRate, 100 - completionRate],\n                    backgroundColor: [\n                        'rgba(54, 162, 235, 0.5)',\n                        'rgba(255, 99, 132, 0.5)',\n                    ],\n                    borderColor: [\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 99, 132, 1)',\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                 plugins: {\n                    legend: {\n                        position: 'top',\n                    },\n                    title: {\n                        display: true,\n                        text: 'Task Completion Rate'\n                    }\n                }\n            }\n        });\n    </script>\n\n    <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Return Home</a>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body id=\"edit-todo-body\" class=\"edit-page\">\n    <form id=\"edit-todo-form\" class=\"edit-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-todo\" class=\"submit-button\" type=\"submit\">Save Changes</button>\n    </form>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"/todos/\">Cancel</a>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body  id=\"edit-todo-item-body\" class=\"edit-page\">\n    <form id=\"edit-todo-item-form\" class=\"edit-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-todo-item\" class=\"submit-button\" type=\"submit\">Save Changes</button>\n    </form>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"/todos/view_task/{{ object.todolist.id }}/\">Cancel</a>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body id=\"home-body\" class=\"home-page\">\n    <h1 id=\"home-title\" class=\"main-title\">Welcome to Your Todo App</h1>\n    <div>\n      <a id=\"todo-list-link\" class=\"nav-link\" href=\"{% url 'todo_list' %}\">View Your Todo Lists</a>\n      <a id=\"analysis-link\" class=\"nav-link\" href=\"{% url 'analysis' %}\">View Task Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body id=\"tasks-body\" class=\"tasks-page\">\n    <h1 id=\"todo-list-title\">{{ todolist.title }}</h1>\n\n    <ul id=\"task-list\" class=\"task-list\">\n        {% for todo_item in todo_items %}\n          <li id=\"task-item-{{ todo_item.pk }}\" class=\"task-item\">\n              <input type=\"checkbox\" id=\"completed-checkbox-{{ todo_item.pk }}\" class=\"completed-checkbox\" {% if todo_item.completed %}checked{% endif %} onclick=\"window.location.href='{% url 'complete_todo_item' todo_item.pk %}'\">\n               <span id=\"task-title-{{ todo_item.pk }}\" class=\"task-title\">{{ todo_item.title }}</span>\n                -\n               <span id=\"task-description-{{ todo_item.pk }}\" class=\"task-description\">{{ todo_item.description }}</span>\n              <div id=\"task-actions-{{ todo_item.pk }}\" class=\"task-actions\">\n                 <a id=\"edit-task-link-{{ todo_item.pk }}\" class=\"edit-link\" href=\"{% url 'edit_todo_item' todo_item.pk %}\">Edit</a>\n                  <a id=\"delete-task-link-{{ todo_item.pk }}\" class=\"delete-link\" href=\"{% url 'delete_todo_item' todo_item.pk %}\">Delete</a>\n              </div>\n          </li>\n        {% endfor %}\n    </ul>\n\n    <h2 id=\"new-task-title\" >Add New Task</h2>\n    <form id=\"new-task-form\" class=\"new-task-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-new-task\" class=\"submit-button\" type=\"submit\">Add Task</button>\n    </form>\n    <div>\n       <a id=\"back-to-lists-link\" class=\"nav-link\" href=\"{% url 'todo_list' %}\">Back to Todo Lists</a>\n       <a id=\"edit-list-link\" class=\"nav-link\" href=\"{% url 'edit_todo' todolist.pk %}\">Edit List</a>\n       <a id=\"delete-list-link\" class=\"nav-link\" href=\"{% url 'delete_todo' todolist.pk %}\">Delete List</a>\n    </div>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body id=\"todo-list-body\" class=\"todo-list-page\">\n    <h1 id=\"todo-lists-title\">Your Todo Lists</h1>\n\n    <ul id=\"todo-lists-ul\" class=\"todo-list\">\n        {% for todo in todo_lists %}\n            <li id=\"todo-list-item-{{ todo.pk }}\" class=\"todo-list-item\">\n                <a id=\"view-todo-link-{{ todo.pk }}\" href=\"{% url 'view_todo_item' todo.pk %}\">{{ todo.title }}</a>\n                 (<span id=\"todo-item-count-{{ todo.pk }}\">{{ todo.todoitem_set.count }}</span> items)\n            </li>\n        {% endfor %}\n    </ul>\n\n    <h2 id=\"new-list-title\" class=\"new-list-title\">Create New List</h2>\n    <form id=\"new-list-form\" class=\"new-list-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-new-list\" class=\"submit-button\" type=\"submit\">Create List</button>\n    </form>\n    <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Return Home</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main function to execute Django commands\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    date = models.DateField()\n    description = models.TextField(blank=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Support request from {self.name} ({self.email})'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('signup/', views.SignupView.as_view(), name='signup'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),\n    path('charts/', views.ChartsView.as_view(), name='charts'),\n    path('settings/', views.SettingsView.as_view(), name='settings'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('download_report/', views.DownloadReportView.as_view(), name='download_report'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\nfrom .forms import LoginForm, SignupForm, SupportRequestForm, TransactionForm\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    pass\n\nclass HomeView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n# ... (Rest of the views with form handling and other logic. Code omitted for brevity.)\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request):\n        # ... (Report generation logic)\n        pass"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import SupportRequest, Transaction\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\nclass LoginForm(forms.Form):\n    username = forms.CharField(max_length=150)\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass SignupForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ('username', 'email')  # Add email if you want it during signup\n\nclass SupportRequestForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = ['name', 'email', 'message']\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['amount', 'category', 'date', 'description']\n"}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"charts-container\" class=\"charts-container\">\n        <canvas id=\"myChart\" class=\"chart\"></canvas>\n    </div>\n    <script>\n        // Sample Chart.js implementation (replace with your actual data)\n        const ctx = document.getElementById('myChart').getContext('2d');\n        const myChart = new Chart(ctx, { /* ... chart configuration */ });\n    </script>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Dashboard</title>\n</head>\n<body>\n    <div id=\"dashboard-container\" class=\"dashboard-container\"> \n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n   <div id=\"home-container\" class=\"home-container\">\n       <!-- Content goes here -->\n   </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <div id=\"login-container\" class=\"login-container\">\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Login</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n   <div id=\"settings-container\" class=\"settings-container\"> \n        <!-- Settings content here -->\n   </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n  <div id=\"signup-container\" class=\"signup-container\">\n      <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Sign Up</button>\n    </form>\n  </div>\n</body>\n</html>\n"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n<div id=\"support-container\" class=\"support-container\">\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit</button>\n</form>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True  # USE_TZ = True is recommended\n\nSTATIC_URL = '/static/'\n\nLOGIN_REDIRECT_URL = 'dashboard'  # Redirect after login\nLOGOUT_REDIRECT_URL = 'login'  # Redirect after logout\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'  # Or specify fields explicitly\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__' # Or specify fields explicitly"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue = models.TextField()\n\n    def __str__(self):\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.urls import reverse_lazy\nfrom django.views.generic import TemplateView, FormView, CreateView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\nclass PricingPageView(CreateView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('pricing')  # Redirect to pricing page after successful submission\n\n    def form_valid(self, form):\n        messages.success(self.request, 'Your message has been sent successfully!')\n        return super().form_valid(form)\n\nclass SupportView(CreateView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('support')\n\n    def form_valid(self, form):\n        messages.success(self.request, 'Your support request has been submitted!')\n        return super().form_valid(form)\n\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body>\n    <div id=\"about-us-container\" class=\"about-us\">\n      <!-- Your about us content here -->\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body>\n    <div id=\"features-container\" class=\"features\">\n        <!-- Content of Features Page: List the features of AI Chatbot. -->\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body>\n  <div id=\"home-container\" class=\"home\">\n      <!-- Content of Home Page: Welcome message and navigation links. -->\n  </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body>\n    <div id=\"pricing-container\" class=\"pricing\">\n        <!-- Content of Pricing Page: Display pricing plans. -->\n        <div id=\"contact-form-container\" class=\"contact-form\">\n            <form method=\"post\">\n                {% csrf_token %}\n                {{ form.as_p }}\n                <button type=\"submit\">Submit</button>\n            </form>\n            {% if messages %}\n                <ul class=\"messages\">\n                    {% for message in messages %}\n                        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                    {% endfor %}\n                </ul>\n            {% endif %}\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body>\n  <div id=\"support-container\" class=\"support\">\n      <div id=\"support-form-container\" class=\"support-form\">\n          <form method=\"post\">\n              {% csrf_token %}\n              {{ form.as_p }}\n              <button type=\"submit\">Submit</button>\n          </form>\n          {% if messages %}\n              <ul class=\"messages\">\n                  {% for message in messages %}\n                      <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                  {% endfor %}\n              </ul>\n          {% endif %}\n      </div>\n\n      <div id=\"faq-container\" class=\"faq\">\n          <!-- FAQ content here -->\n      </div>\n\n  </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key' # Change this in a real application\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    \"\"\"\n    User registration form.\n    \"\"\"\n    pass\n\nclass LoginForm(forms.Form):\n    \"\"\"\n    User login form.\n    \"\"\"\n    username = forms.CharField(max_length=150)\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass MealForm(forms.ModelForm):\n    \"\"\"\n    Form for logging meals.\n    \"\"\"\n    class Meta:\n        model = Meal\n        fields = '__all__'\n\nclass ActivityForm(forms.ModelForm):\n    \"\"\"\n    Form for logging activities.\n    \"\"\"\n    class Meta:\n        model = Activity\n        fields = '__all__'\n\nclass ProfileForm(forms.ModelForm):\n    \"\"\"\n    Form for updating user profile.\n    \"\"\"\n    class Meta:\n        model = UserProfile\n        exclude = ('user',)\n\nclass PreferencesForm(forms.ModelForm):  # Not used in current models\n    \"\"\"\n    Form for updating dietary preferences (placeholder).\n    \"\"\"\n    pass\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    # Add other profile fields here (e.g., age, weight, height, etc.)\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    date = models.DateField()\n    # ... other fields\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories_burned = models.IntegerField()\n    date = models.DateField()\n    # ... other fields\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'), # Added logout URL\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_log, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_log, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\ndef get_weekly_calorie_chart(user):\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n    return week_data\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth import login, authenticate, logout\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm\nfrom .utils import get_weekly_calorie_chart\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            password = form.cleaned_data['password']\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n\n@login_required\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n\n@login_required\ndef dashboard(request):\n    return render(request, 'dashboard.html')\n\n@login_required\ndef meal_log(request):\n    meals = Meal.objects.filter(user=request.user)\n    return render(request, 'meal_log.html', {'meals': meals})\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm()\n    return render(request, 'add_meal.html', {'form': form})\n\n@login_required\ndef edit_meal(request, id):\n    meal = get_object_or_404(Meal, pk=id, user=request.user)\n    if request.method == 'POST':\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            form.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'edit_meal.html', {'form': form, 'meal': meal})\n\n@login_required\ndef delete_meal(request, id):\n    meal = get_object_or_404(Meal, pk=id, user=request.user)\n    meal.delete()\n    return redirect('meal_log')\n\n# ... (similar views for Activity)\n\n@login_required\ndef activity_log(request):\n    activities = Activity.objects.filter(user=request.user)\n    return render(request, 'activity_log.html', {'activities': activities})\n\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False)  # Don't save yet\n            activity.user = request.user  # Set the user\n            activity.save()  # Now save\n            return redirect('activity_log')  # Redirect to activity log\n    else:\n        form = ActivityForm()\n    return render(request, 'add_activity.html', {'form': form})\n\n@login_required\ndef edit_activity(request, id):\n    activity = get_object_or_404(Activity, pk=id, user=request.user)\n    if request.method == 'POST':\n        form = ActivityForm(request.POST, instance=activity)\n        if form.is_valid():\n            form.save()\n            return redirect('activity_log')  # Redirect to activity log after edit\n    else:\n        form = ActivityForm(instance=activity)\n    return render(request, 'edit_activity.html', {'form': form, 'activity': activity})\n\n@login_required\ndef delete_activity(request, id):\n    activity = get_object_or_404(Activity, pk=id, user=request.user)\n    activity.delete()\n    return redirect('activity_log')\n\n@login_required\ndef settings(request):\n    return render(request, 'settings.html')\n\n@login_required\ndef meal_search(request):\n    # Implement meal search logic\n    pass  # Replace with actual implementation\n\n@login_required\ndef activity_search(request):\n    # Implement activity search logic\n    pass  # Replace with actual implementation\n\ndef tutorials(request):\n    return render(request, 'tutorials.html')\n\n@login_required\ndef update_profile(request):\n    profile = request.user.profile\n    if request.method == 'POST':\n        form = ProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            return redirect('settings')\n    else:\n        form = ProfileForm(instance=profile)\n    return render(request, 'update_profile.html', {'form': form})\n\n\n@login_required\ndef update_preferences(request):\n    pass # This would be implemented if Preferences model and form exist\n\n@login_required\ndef weekly_calorie_chart(request):\n    chart_data = get_weekly_calorie_chart(request.user)\n    return render(request, 'weekly_calorie_chart.html', {'chart_data': chart_data})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"activity-log-container\" class=\"container\">\n    <h1>Activity Log</h1>\n    <a id=\"add-activity-button\" class=\"btn btn-primary\" href=\"{% url 'add_activity' %}\">Add Activity</a>\n    <table id=\"activity-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Activity</th>\n                <th>Calories Burned</th>\n                <th>Date</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for activity in activities %}\n            <tr id=\"activity-row-{{ activity.id }}\">\n                <td>{{ activity.name }}</td>\n                <td>{{ activity.calories_burned }}</td>\n                <td>{{ activity.date }}</td>\n                <td>\n                    <a id=\"edit-activity-{{ activity.id }}\" class=\"btn btn-secondary\" href=\"{% url 'edit_activity' activity.id %}\">Edit</a>\n                    <a id=\"delete-activity-{{ activity.id }}\" class=\"btn btn-danger\" href=\"{% url 'delete_activity' activity.id %}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-activity-container\" class=\"container\">\n    <h1>Add Activity</h1>\n    <form id=\"add-activity-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-activity\" class=\"btn btn-primary\" type=\"submit\">Add</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-meal-container\" class=\"container\">\n  <h1>Add Meal</h1>\n  <form id=\"add-meal-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"submit-meal\" class=\"btn btn-primary\" type=\"submit\">Add</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"dashboard-container\" class=\"container\">\n    <h1>Dashboard</h1>\n    <p>Welcome, {{ user.username }}!</p>\n\n    <div id=\"dashboard-stats\" class=\"dashboard-section\">\n        <h2>Today's Stats</h2>\n        </div>\n    <div id=\"dashboard-charts\" class=\"dashboard-section\">\n        <h2>Weekly Calorie Chart</h2>\n        <a id=\"weekly-chart-link\" class=\"btn btn-primary\" href=\"{% url 'weekly_calorie_chart' %}\">View Chart</a>\n    </div>\n\n</div>\n{% endblock %}"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-activity-container\" class=\"container\">\n  <h1>Edit Activity</h1>\n  <form id=\"edit-activity-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"submit-edit-activity\" class=\"btn btn-primary\" type=\"submit\">Save Changes</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-meal-container\" class=\"container\">\n    <h1>Edit Meal</h1>\n    <form id=\"edit-meal-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-meal\" type=\"submit\" class=\"btn btn-primary\">Save Changes</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"container\">\n    <h1>Welcome to the Calorie Tracker!</h1>\n    {% if user.is_authenticated %}\n      <p id=\"welcome-message\">Hello, {{ user.username }}! <a id=\"dashboard-link\" href=\"{% url 'dashboard' %}\">Go to Dashboard</a></p>\n      <a id=\"logout-link\" href=\"{% url 'logout' %}\">Logout</a>\n    {% else %}\n      <p>Track your daily calorie intake and expenditure to maintain a healthy lifestyle.</p>\n      <a id=\"signup-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n      <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"login-container\" class=\"container\">\n    <h1>Login</h1>\n    <form id=\"login-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-login\" class=\"btn btn-primary\" type=\"submit\">Login</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"meal-log-container\" class=\"container\">\n    <h1>Meal Log</h1>\n    <a id=\"add-meal-button\" class=\"btn btn-primary\" href=\"{% url 'add_meal' %}\">Add Meal</a>\n    <table id=\"meal-log-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Meal</th>\n                <th>Calories</th>\n                <th>Date</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n        {% for meal in meals %}\n            <tr id=\"meal-row-{{ meal.id }}\">\n                <td>{{ meal.name }}</td>\n                <td>{{ meal.calories }}</td>\n                <td>{{ meal.date }}</td>\n                <td>\n                    <a id=\"edit-meal-{{ meal.id }}\" class=\"btn btn-secondary\" href=\"{% url 'edit_meal' meal.id %}\">Edit</a>\n                    <a id=\"delete-meal-{{ meal.id }}\" class=\"btn btn-danger\" href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n                </td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"settings-container\" class=\"container\">\n  <h1>Settings</h1>\n  <div id=\"profile-settings\" class=\"settings-section\">\n    <h2>Profile</h2>\n    <a id=\"update-profile-link\" class=\"btn btn-primary\" href=\"{% url 'update_profile' %}\">Update Profile</a>\n  </div>\n    <div id=\"preferences-settings\" class=\"settings-section\">\n    <h2>Preferences</h2>\n    <a id=\"update-preferences-link\" class=\"btn btn-primary\" href=\"{% url 'update_preferences' %}\">Update Preferences</a>\n  </div>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"signup-container\" class=\"container\">\n    <h1>Sign Up</h1>\n    <form id=\"signup-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-signup\" class=\"btn btn-primary\" type=\"submit\">Sign Up</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"tutorials-container\" class=\"container\">\n    <h1>Tutorials and Help</h1>\n    <p>This is the tutorials page. Content will be added later.</p>\n</div>\n{% endblock %}"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"update-preferences-container\" class=\"container\">\n  <h1>Update Preferences</h1>\n  <form id=\"update-preferences-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}  </form>\n</div>\n{% endblock %}"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"update-profile-container\" class=\"container\">\n    <h1>Update Profile</h1>\n    <form id=\"update-profile-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-update-profile\" class=\"btn btn-primary\" type=\"submit\">Save Changes</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"weekly-chart-container\" class=\"container\">\n  <h1>Weekly Calorie Chart</h1>\n  <canvas id=\"calorieChart\"></canvas>\n  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n  <script>\n    const ctx = document.getElementById('calorieChart');\n    const data = {\n        labels: {{ chart_data.dates|safe }},\n        datasets: [\n            {\n              label: 'Calorie Intake',\n              data: {{ chart_data.intake|safe }},\n              backgroundColor: 'rgba(54, 162, 235, 0.2)',\n              borderColor: 'rgba(54, 162, 235, 1)',\n              borderWidth: 1\n            },\n            {\n              label: 'Calories Burned',\n              data: {{ chart_data.expenditure|safe }},\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              borderColor: 'rgba(255, 99, 132, 1)',\n              borderWidth: 1\n            }\n        ]\n    };\n    new Chart(ctx, {\n        type: 'bar',\n        data: data\n    });\n  </script>\n</div>\n{% endblock %}\n"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}{% endblock %}</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM\" crossorigin=\"anonymous\">\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"container\">\n            <a id=\"brand-logo\" class=\"navbar-brand\" href=\"{% url 'home' %}\">Calorie Tracker</a>\n            <ul id=\"nav-list\" class=\"navbar-nav\">\n                <li id=\"home-link-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'home' %}\">Home</a></li>\n                {% if user.is_authenticated %}\n                <li id=\"dashboard-link-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'dashboard' %}\">Dashboard</a></li>\n                <li id=\"meal-log-link-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'meal_log' %}\">Meal Log</a></li>\n                <li id=\"activity-log-link-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'activity_log' %}\">Activity Log</a></li>\n                <li id=\"settings-link-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'settings' %}\">Settings</a></li>\n                <li id=\"tutorials-link-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'tutorials' %}\">Help</a></li>\n                <li id=\"logout-link-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a></li>\n                {% endif %}\n            </ul>\n        </div>\n    </nav>\n<div id=\"content-wrapper\" class=\"container\">\n    {% block content %}{% endblock %}\n</div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nLOGIN_REDIRECT_URL = 'dashboard' # Added this line\nLOGOUT_REDIRECT_URL = 'home'   # Added this line\nLOGIN_URL = '/login/' \n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label='Upload JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    status = models.CharField(max_length=50)  # e.g., 'passed', 'failed', 'pending'\n    comments = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Review for {self.project.name} - {self.status}'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\n\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        # Process review submission (add logic here based on your form)\n        status = request.POST.get('status')\n        comments = request.POST.get('comments')\n        Review.objects.create(project=project, status=status, comments=comments)\n        messages.success(request, 'Review submitted successfully!')\n        return HttpResponseRedirect('/') # Redirect after successful submission\n    return render(request, 'review.html', {'project': project})\n\ndef home_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            handle_json_upload(request.FILES['json_file'])\n            return HttpResponseRedirect('/')  # Redirect to avoid resubmission\n    else:\n        form = JSONUploadForm()\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'form': form, 'projects': projects})\n\ndef handle_json_upload(json_file):\n    try:\n        data = json.load(json_file)\n        for item in data:\n            project, created = Project.objects.get_or_create(name=item['name'])\n            project.description = item.get('description', '')\n            project.save()\n        messages.success(request, 'JSON file uploaded and processed successfully!') #add request parameter to the function handle_json_upload(request, json_file) \n    except json.JSONDecodeError:\n      messages.error(request, 'Invalid JSON file format') #same as above\n\n\ndef about_view(request):\n    return render(request, 'about.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"content-container\">\n    <h1>About This Site</h1>\n    <p>This is a simple project review site built with Django.</p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n      <nav id=\"main-nav\" class=\"main-nav\">\n        <ul>\n          <li><a href=\"{% url 'home' %}\">Home</a></li>\n          <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n      </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n    {% if messages %}\n      <ul class=\"messages\">\n        {% for message in messages %}\n          <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n      </ul>\n    {% endif %}\n    {% block content %}{% endblock %}\n    </main>\n\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"content-container\">\n    <h1>Project Listings</h1>\n    <ul id=\"project-list\">\n        {% for project in projects %}\n            <li><a href=\"{% url 'review' project.id %}\">{{ project.name }}</a></li>\n        {% endfor %}\n    </ul>\n\n    <h2>Upload JSON File</h2>\n    <form id=\"json-upload-form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Upload</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"content-container\">\n  <h2>Reviewing: {{ project.name }}</h2>\n  <form id=\"review-form\" method=\"post\">\n    {% csrf_token %}\n    <label for=\"status\">Status:</label>\n    <select id=\"status\" name=\"status\">\n      <option value=\"passed\">Passed</option>\n      <option value=\"failed\">Failed</option>\n      <option value=\"pending\">Pending</option>\n    </select><br><br>\n    <label for=\"comments\">Comments:</label><br>\n    <textarea id=\"comments\" name=\"comments\" rows=\"4\" cols=\"50\"></textarea><br><br>\n    <input type=\"submit\" value=\"Submit Review\">\n  </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "/* Basic styling for the site */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.content-container {\n    max-width: 800px;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.main-header {\n    background-color: #f0f0f0;\n    padding: 10px;\n}\n.main-nav ul {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n}\n\n.main-nav li {\n  display: inline;\n  margin-right: 20px;\n}\n\n.messages {\n    list-style: none;\n    padding: 0;\n}\n\n.messages li {\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 5px;\n}\n\n.messages li.success {\n    background-color: lightgreen;\n    border: 1px solid green;\n}\n\n.messages li.error {\n    background-color: lightcoral;\n    border: 1px solid red; \n}\n"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom .models import Claim, Budget\n\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'status', 'created_at', 'operations')\n    actions = [\"approve_claims\", \"reject_claims\"]\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/claim/{}/change/\" class=\"button\">Edit</a> '\\\n            '<a href=\"/admin/example_app/claim/{}/delete/\" class=\"button\">Delete</a>',\n            obj.id, obj.id\n        )\n    operations.short_description = \"Operations\"\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='approved')\n        self.message_user(request, f'{queryset.count()} claims approved successfully.')\n\n    def reject_claims(self, request, queryset):\n        queryset.update(status='rejected')  # In real app, you'd likely have a rejection reason\n        self.message_user(request, f'{queryset.count()} claims rejected.')\n\nadmin.site.register(Claim, ClaimAdmin)\nadmin.site.register(Budget)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\n\nCATEGORY_CHOICES = [\n    ('travel', 'Travel Expenses'),\n    ('labor', 'Labor Expenses'),\n    ('management', 'Management Expenses'),\n    ('equipment', 'Equipment Expenses'),\n]\n\nSTATUS_CHOICES = [\n    ('pending', 'Pending'),\n    ('approved', 'Approved'),\n    ('rejected', 'Rejected'),\n]\n\nclass Claim(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f\"Claim by {self.user.username} for {self.amount} in {self.category}\"\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f\"Budget for {self.category}: {self.limit}\""}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget\n\ndef check_budget_limit(category, amount):\n    try:\n        budget = Budget.objects.get(category=category)\n        return budget.limit >= Budget.objects.filter(category=category).aggregate(Sum('claim__amount'))['claim__amount__sum'] + amount\n    except Budget.DoesNotExist:\n        return True # Allow if no budget exists for category"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login, authenticate\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom .utils import check_budget_limit\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')  # Redirect to a success page\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Claim submitted successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user).order_by('-created_at')\n    return render(request, 'claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be edited.')\n        return redirect('claim_status')\n\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            updated_claim = form.save(commit=False)\n            if check_budget_limit(updated_claim.category, updated_claim.amount):\n                updated_claim.save()\n                messages.success(request, 'Claim updated successfully.')\n                return redirect('claim_status')  # Redirect to the claim status page\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be deleted.')\n        return redirect('claim_status')\n    \n    claim.delete()\n    messages.success(request, 'Claim deleted successfully.')\n    return redirect('claim_status')\n\n\n@login_required\ndef analysis_view(request):\n    budgets = Budget.objects.all()\n    total_approved_claims = Claim.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n    analysis_data = []\n    for budget in budgets:\n        total_spent = Claim.objects.filter(category=budget.category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        utilization = (total_spent / budget.limit) * 100 if budget.limit else 0  # Avoid division by zero\n        analysis_data.append({'category': budget.category, 'limit': budget.limit, 'spent': total_spent, 'utilization': utilization})\n    return render(request, 'analysis.html', {'analysis_data': analysis_data, 'total_approved_claims': total_approved_claims})"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.5 on 2025-01-26 23:19\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Analysis Report{% endblock %}\n\n{% block content %}\n    <div id=\"analysis-report\" class=\"container\">\n        <h2>Analysis Report</h2>\n        <p id=\"total-approved-claims\">Total Approved Claims Amount: ${{ total_approved_claims }}</p>\n        <table id=\"budget-utilization\" class=\"table\">\n            <thead>\n                <tr>\n                    <th>Category</th>\n                    <th>Budget Limit</th>\n                    <th>Total Spent</th>\n                    <th>Utilization (%)</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for item in analysis_data %}\n                    <tr>\n                        <td>{{ item.category }}</td>\n                        <td>${{ item.limit }}</td>\n                        <td>${{ item.spent }}</td>\n                        <td>{{ item.utilization|floatformat:2 }}%</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Accounting System{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar\">\n      <div id=\"logo\" class=\"navbar-brand\">\n        Accounting System\n      </div>\n        <ul class=\"navbar-menu\">\n            <li id=\"home-link\" class=\"nav-item\"><a href=\"{% url 'home' %}\" class=\"nav-link\">Home</a></li>\n            {% if user.is_authenticated %}\n                <li id=\"submit-claim-link\" class=\"nav-item\"><a href=\"{% url 'submit_claim' %}\" class=\"nav-link\">Submit Claim</a></li>\n                <li id=\"claim-status-link\" class=\"nav-item\"><a href=\"{% url 'claim_status' %}\" class=\"nav-link\">Claim Status</a></li>\n                <li id=\"analysis-link\" class=\"nav-item\"><a href=\"{% url 'analysis' %}\" class=\"nav-link\">Analysis</a></li>\n                <li id=\"logout-link\" class=\"nav-item\"><a href=\"{% url 'logout' %}\" class=\"nav-link\">Logout</a></li>\n            {% else %}\n                <li id=\"signup-link\" class=\"nav-item\"><a href=\"{% url 'signup' %}\" class=\"nav-link\">Sign Up</a></li>\n                <li id=\"login-link\" class=\"nav-item\"><a href=\"{% url 'login' %}\" class=\"nav-link\">Login</a></li>\n            {% endif %}\n        </ul>\n    </nav>\n    <div id=\"main-content\" class=\"container\">\n        {% if messages %}\n            <ul id=\"message-list\" class=\"message-list\">\n              {% for message in messages %}\n                  <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n              {% endfor %}\n            </ul>\n        {% endif %}\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n  <div id=\"edit-claim-form\" class=\"container\">\n    <h2>Edit Claim</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"id_category\">Category:</label>\n            {{ form.category }}\n        </div>\n        <div class=\"form-group\">\n            <label for=\"id_amount\">Amount:</label>\n            {{ form.amount }}\n        </div>\n        <div class=\"form-group\">\n            <label for=\"id_description\">Description:</label>\n            {{ form.description }}\n        </div>\n        <button id=\"submit-edit\" type=\"submit\" class=\"button\">Update Claim</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n    <div id=\"claim-status-table\" class=\"container\">\n      <h2>Claim Status</h2>\n      <table class=\"table\">\n          <thead>\n            <tr>\n              <th>Category</th>\n              <th>Amount</th>\n              <th>Description</th>\n              <th>Status</th>\n              <th>Created At</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            {% for claim in claims %}\n            <tr id=\"claim-row-{{ claim.id }}\">\n              <td>{{ claim.category }}</td>\n              <td>{{ claim.amount }}</td>\n              <td>{{ claim.description }}</td>\n              <td>{{ claim.status }}</td>\n              <td>{{ claim.created_at }}</td>\n              <td>\n                {% if claim.status == 'pending' %}\n                  <a id=\"edit-claim-{{ claim.id }}\" href=\"{% url 'edit_claim' claim.id %}\" class=\"button\">Edit</a>\n                  <a id=\"delete-claim-{{ claim.id }}\" href=\"{% url 'delete_claim' claim.id %}\" class=\"button\">Delete</a>\n                {% endif %}\n              </td>\n            </tr>\n            {% endfor %}\n          </tbody>\n        </table>\n    </div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Home{% endblock %}\n\n{% block content %}\n  <div id=\"home-content\" class=\"container\">\n    <h2>Welcome to the Accounting and Cashier Management System</h2>\n      {% if user.is_authenticated %}\n        <p id=\"welcome-message\">Hello, {{ user.username }}!</p>\n      {% else %}\n        <p>Please <a href=\"{% url 'login' %}\" id=\"login-link\">log in</a> or <a href=\"{% url 'signup' %}\" id=\"signup-link\">sign up</a> to continue.</p>\n      {% endif %}\n  </div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Login{% endblock %}\n\n{% block content %}\n  <div id=\"login-form\" class=\"container\">\n    <h2>Login</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-login\" type=\"submit\" class=\"button\">Login</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Sign Up{% endblock %}\n\n{% block content %}\n  <div id=\"signup-form\" class=\"container\">\n    <h2>Sign Up</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-signup\" type=\"submit\" class=\"button\">Sign Up</button>\n    </form>\n      <p>Already registered? <a id=\"login-link\" href=\"{% url 'login' %}\">Log in here</a>.</p>\n  </div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n  <div id=\"submit-claim-form\" class=\"container\">\n    <h2>Submit Claim</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n          <label for=\"id_category\">Category:</label>\n          {{ form.category }}\n        </div>\n        <div class=\"form-group\">\n          <label for=\"id_amount\">Amount:</label>\n          {{ form.amount }}\n        </div>\n        <div class=\"form-group\">\n          <label for=\"id_description\">Description:</label>\n          {{ form.description }}\n        </div>\n        <button id=\"submit-claim-button\" type=\"submit\" class=\"button\">Submit Claim</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\nLOGIN_REDIRECT_URL = 'home'  # Redirect after login\nLOGOUT_REDIRECT_URL = 'home' # Redirect after logout\nLOGIN_URL = '/login/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "/* Basic styling for overall layout and elements */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.container {\n    max-width: 960px;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.navbar {\n  background-color: #f0f0f0;\n  padding: 10px;\n}\n\n.navbar-menu {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    justify-content: space-around; /* Distribute items evenly */\n}\n\n.nav-item {\n  margin: 0 10px; /* Adjust spacing between items */\n}\n\n.navbar-brand, .nav-link {\n    text-decoration: none; \n    color: #333;\n    font-weight: bold;\n    padding: 5px 10px; \n}\n.nav-link:hover {\n    background-color: #ddd; \n    border-radius: 5px; \n}\n\n.table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n}\n\n.table th, .table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n}\n\n.message-list {\n  list-style: none;\n  padding: 0;\n}\n.message-list li {\n  padding: 10px;\n  margin-bottom: 10px;\n  border-radius: 5px;\n}\n.message-list li.success {\n  background-color: #d4edda;\n  border: 1px solid #c3e6cb;\n  color: #155724;\n}\n.message-list li.error {\n  background-color: #f8dbab;\n  border: 1px solid #f5c6cb;\n  color: #721c24;\n}\n\n.button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    text-decoration: none; /* Make it look like a button */\n    display: inline-block; /* Prevent it from taking up the full width */\n}\n\n.form-group {\n  margin-bottom: 10px;\n}\n\n.form-group label {\n  display: block;\n}\n\n.form-group input[type=\"text\"],\n.form-group input[type=\"number\"],\n.form-group textarea, \n.form-group select {\n  width: 100%;\n  padding: 5px;\n  box-sizing: border-box;\n}\n"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"Class-based view to render the Hello World page.\"\"\"\n    def get(self, request):\n        \"\"\"Handle GET request to display Hello World.\"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\nh1 {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"hello-world-body\" class=\"hello-world-body\">\n    <h1 id=\"hello-world-heading\" class=\"hello-world-heading\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Project-level templates\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [ # ... (rest of the settings)\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        # ... (rest of the migration code)\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"helloworld-body\" class=\"main-body\">\n    <div id=\"helloworld-container\" class=\"content-container\">\n        <h1 id=\"helloworld-title\" class=\"main-title\">Hello, World!</h1>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body  id=\"home-body\" class=\"main-body\">\n    <div id=\"home-container\" class=\"content-container\">\n        <h1 id=\"home-title\" class=\"main-title\">Welcome Home</h1>\n       <a id=\"helloworld-link\" class=\"nav-link\" href=\"{% url 'helloworld' %}\">Hello World Page</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# ... (Existing settings)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(\"BashCrawl is a text-based adventure game.\")\n        print(\"Navigate using commands like 'cd', 'ls', and 'inventory'.\")\n\n    def print_game_help(self):\n        print(\"Available commands:\")\n        print(\"  ls: List directory contents\")\n        print(\"  cd <directory>: Change directory\")\n        print(\"  inventory: View your inventory\")\n        print(\"  help: Show this help\")\n        print(\"  quit: Exit the game\")\n\n    def list_contents(self):\n        contents = self.directory_structure.get(self.current_dir, [])\n        if contents:\n            print(\" \".join(contents))\n        else:\n            print(\"Nothing here.\")\n        if self.current_dir in self.items:\n            print(self.items[self.current_dir])\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n            if self.current_dir in self.items and self.items[self.current_dir] not in self.inventory:\n                print(f\"You found a {self.items[self.current_dir]}! It has been added to your inventory.\")\n                self.inventory.append(self.items[self.current_dir])\n        else:\n            print(\"No such directory.\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"Inventory:\")\n            for item in self.inventory:\n                print(f\"  - {item}\")\n        else:\n            print(\"Your inventory is empty.\")\n\n    def play(self):\n        while True:\n            command = input(f\"{self.current_dir} $ \").split()\n            if not command:\n                continue\n            action = command[0]\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    print(\"Please specify a directory.\")\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                break\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\")\n\n    def main_menu(self):\n        while True:\n            self.print_main_menu()\n            choice = input(\"Enter your choice: \")\n            if choice == \"1\":\n                self.play()\n                break  # Exit main menu after game ends\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                break\n            else:\n                print(\"Invalid choice.\")\n\n\ndef main():\n    game = BashCrawl()\n    game.main_menu()\n\n\nif __name__ == \"__main__\":\n    main()\n"}], "20": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'category', 'operations')\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/blogpost/{}/change/\" class=\"edit-link\">Edit</a> '\n            '<a href=\"/post/{}/delete/\" class=\"delete-link\">Delete</a>'.format(obj.id, obj.id)\n        )\n    operations.short_description = 'Operations'\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'operations')  # Display the category name\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/category/{}/change/\" class=\"edit-link\">Edit</a> '\n            '<a href=\"/category/{}/delete/\" class=\"delete-link\">Delete</a>'.format(obj.id, obj.id)\n        )\n\n    operations.short_description = 'Operations'\n\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    pass\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name', 'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment', 'class': 'form-control'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        verbose_name_plural = 'Categories'\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)  # Add created_at field\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=255)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.author} on {self.post.title}'\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return f'Message from {self.name}'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from django.db.models import Count\nfrom django.db.models.functions import TruncMonth\n\ndef filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n\ndef get_archive_counts(posts):\n    return posts.annotate(month=TruncMonth('created_at')).values('month').annotate(count=Count('id'))\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, ContactUs, Comment\nfrom .forms import CommentForm, BlogPostForm  # Import BlogPostForm\nfrom .utils import filter_by_date, get_archive_counts\n\n\ndef home(request):\n    posts = BlogPost.objects.all().order_by('-created_at')\n    if request.method == 'GET' and 'q' in request.GET:\n        query = request.GET.get('q')\n        posts = posts.filter(title__icontains=query)  # Case-insensitive search\n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all()\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.post = post\n            comment.save()\n            return redirect('post_detail', pk=post.pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n@login_required\ndef post_delete(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    post.delete()\n    messages.success(request, 'Post deleted successfully.')\n    return redirect('admin:example_app_blogpost_changelist')  # Redirect to admin changelist\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n@login_required\ndef category_delete(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    messages.success(request, 'Category deleted successfully.')\n    return redirect('admin:example_app_category_changelist')\n\ndef archive(request):\n    posts = BlogPost.objects.all()\n    archive_counts = get_archive_counts(posts)  # Get archive counts\n    year = request.GET.get('year')\n    month = request.GET.get('month')\n    posts = filter_by_date(posts, year, month)\n\n    return render(request, 'blog/archive.html', {'posts': posts, 'archive_counts': archive_counts})\n\ndef about(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        contact = ContactUs(name=name, email=email, message=message)\n        contact.save()\n        messages.success(request, 'Your message has been sent!')\n        return redirect('about')\n    return render(request, 'blog/about.html')\n\ndef search(request):\n    query = request.GET.get('q')\n    posts = BlogPost.objects.filter(title__icontains=query)\n    return render(request, 'blog/home.html', {'posts': posts, 'query': query})\n\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\nheader {\n    background: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\nheader nav a {\n    color: #fff;\n    margin: 0 15px;\n    text-decoration: none;\n}\n\nmain {\n    padding: 20px;\n    background: #fff;\n    margin: 20px auto;\n    max-width: 800px;\n    border: 1px solid #ddd;\n}\n\nfooter {\n    text-align: center;\n    padding: 10px 0;\n    background: #333;\n    color: #fff;\n}\n\n.edit-link, .delete-link {\n    margin-right: 5px; /* Or desired spacing */\n}\n"}, {"file": "about.html", "path": "example_app/templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-container\">\n    <h1>About Me</h1>\n    <p>This is where you can write a little bit about yourself, your interests, and why you started this blog.  You can include your social media links and any other information you'd like to share.</p>\n    <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\" class=\"form-control\" required><br>\n        <label for=\"email\">Email:</label><br>\n        <input type=\"email\" id=\"email\" name=\"email\" class=\"form-control\" required><br>\n        <label for=\"message\">Message:</label><br>\n        <textarea id=\"message\" name=\"message\" class=\"form-control\" rows=\"4\" required></textarea><br>\n        <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n    </form>\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n</div>\n{% endblock %}\n"}, {"file": "archive.html", "path": "example_app/templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"archive-container\" class=\"archive-container\">\n    <h1>Archive</h1>\n\n    <h2>Monthly Archives</h2>\n    <ul>\n        {% for month in archive_counts %}\n        <li>\n            <a href=\"{% url 'archive' %}?year={{ month.month.year }}&month={{ month.month.month }}\">\n                {{ month.month|date:'F Y' }} ({{ month.count }})\n            </a>\n        </li>\n        {% endfor %}\n    </ul>\n\n    <h2>Posts</h2>\n    <ul>\n    {% for post in posts %}\n        <li>\n            <a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a> - {{ post.created_at|date:'F d, Y' }}\n        </li>\n    {% empty %}\n        <li>No posts found.</li>\n    {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n            <a href=\"{% url 'home' %}\">Home</a>\n            <a href=\"{% url 'category' %}\">Categories</a>\n            <a href=\"{% url 'archive' %}\">Archive</a>\n            <a href=\"{% url 'about' %}\">About</a>\n        </nav>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}{% endblock %}\n    </main>\n    <footer id=\"main-footer\" class=\"main-footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "category.html", "path": "example_app/templates/blog/category.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-list-container\" class=\"category-list-container\">\n    <h1>Categories</h1>\n    <ul>\n        {% for category in categories %}\n            <li>\n                <a href=\"{% url 'category_detail' category.pk %}\" id=\"category-link-{{ category.pk }}\" class=\"category-link\">{{ category.name }}</a>\n            </li>\n        {% empty %}\n            <li>No categories found.</li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}\n"}, {"file": "home.html", "path": "example_app/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1>Latest Posts</h1>\n    <form id=\"search-form\" class=\"search-form\" method=\"get\" action=\"{% url 'search' %}\">\n        <input type=\"text\" id=\"search-input\" name=\"q\" placeholder=\"Search posts...\" class=\"search-input\" value=\"{{ query|default:'' }}\">\n        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n    </form>\n    <ul id=\"post-list\" class=\"post-list\">\n        {% for post in posts %}\n            <li id=\"post-item-{{ post.pk }}\" class=\"post-item\">\n                <a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a> - {{ post.created_at|date:'F d, Y' }}\n                 - <a href=\"{% url 'category_detail' post.category.pk %}\">{{ post.category }}</a>\n            </li>\n        {% empty %}\n            <li>No posts found.</li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}\n"}, {"file": "post_detail.html", "path": "example_app/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"post-detail-container\" class=\"post-detail-container\">\n    <h1 id=\"post-title\" class=\"post-title\">{{ post.title }}</h1>\n    <p id=\"post-content\" class=\"post-content\">{{ post.content }}</p>\n    <p id=\"post-category\" class=\"post-category\">Category: <a href=\"{% url 'category_detail' post.category.pk %}\">{{ post.category }}</a></p>\n\n    <h2>Comments</h2>\n    <ul id=\"comment-list\" class=\"comment-list\">\n    {% for comment in comments %}\n        <li id=\"comment-item-{{ comment.pk }}\" class=\"comment-item\">\n            <strong>{{ comment.author }}</strong> - {{ comment.created_at|date:'F d, Y' }}<br>\n            {{ comment.content }}\n        </li>\n    {% empty %}\n        <li>No comments yet.</li>\n    {% endfor %}\n    </ul>\n\n    <h2>Add Comment</h2>\n    <form id=\"comment-form\" class=\"comment-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-comment\" class=\"btn btn-primary\">Submit</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "category_detail.html", "path": "example_app/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-detail-container\" class=\"category-detail-container\">\n    <h1 id=\"category-title\" class=\"category-title\">{{ category.name }}</h1>\n    <ul id=\"post-list\" class=\"post-list\">\n        {% for post in posts %}\n            <li id=\"post-item-{{ post.pk }}\" class=\"post-item\">\n                <a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a> - {{ post.created_at|date:'F d, Y' }}\n            </li>\n        {% empty %}\n            <li>No posts found in this category.</li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nLOGIN_URL = '/admin/login/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}]}