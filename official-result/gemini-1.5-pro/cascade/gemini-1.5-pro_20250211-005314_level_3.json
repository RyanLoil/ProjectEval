{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Your Weight (kg)', min_value=0, required=True)\n    height = forms.FloatField(label='Your Height (cm)', min_value=0, required=True)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\",\n    \"Invalid weight\": \"The weight can't be less than 0.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    bmi = None\n    interpretation = None\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height'] / 100  # Convert cm to meters\n            if weight > 0 and height >0:\n                bmi = weight / (height * height)\n                for category, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        interpretation = bmi_interpretation[category]\n                        break\n            elif weight <= 0:\n                interpretation = bmi_interpretation[\"Invalid weight\"]\n            else:\n                interpretation = bmi_interpretation[\"Invalid height\"]\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'interpretation': interpretation})\n\ndef advice(request):\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html>\n<head><title>Advice</title></head>\n<body>\n    <div id=\"advice-container\" class=\"content\">\n        <h1>Health Advice</h1>\n        <p>Specific advice content goes here based on the BMI category.</p>\n     </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"content\">\n        <h1>BMI Calculator</h1>\n        <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"calculate-button\" type=\"submit\">Calculate</button>\n        </form>\n        <div id=\"results\" class=\"results\">\n            {% if bmi %}\n                <p id=\"bmi-result\">Your BMI: {{ bmi|floatformat:2 }}</p>\n                <p id=\"bmi-interpretation\">{{ interpretation }}</p>\n            {% endif %}\n        </div>\n     </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html>\n<head><title>Homepage</title></head>\n<body>\n    <div id=\"homepage-container\" class=\"content\">\n        <h1>Welcome to the BMI Calculator</h1>\n        <p>Learn about your Body Mass Index (BMI) and its implications for your health.</p>\n        <a id=\"bmi-calculator-link\" href=\"bmi-calculator/\">Calculate Your BMI</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n# ... (rest of the settings.py)"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', min_value=0, decimal_places=2)\n    source_currency = forms.ChoiceField(label='Source Currency', choices=CURRENCY_CHOICES)\n    target_currency = forms.ChoiceField(label='Target Currency', choices=CURRENCY_CHOICES)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    \"\"\"\n    Model for currency rate record\n    \"\"\"\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=10, decimal_places=6, verbose_name='Rate')\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Datetime')\n\n    def __str__(self):\n        return f\"{self.source_currency} to {self.target_currency} at {self.rate} on {self.datetime}\"\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport datetime\n\nfrom django.shortcuts import render, redirect\nfrom django.views.generic import TemplateView\nfrom matplotlib import pyplot as plt\nimport io\nimport base64\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated_rate(source_currency, target_currency):\n    USD_BASE = {\n        'USD': 1.00, 'EUR': 0.85, 'GBP': 0.75, 'JPY': 110.00,\n        'AUD': 1.35, 'CNY': 7.00, 'CAD': 1.25, 'CHF': 0.92\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n\n            rate = get_updated_rate(source_currency, target_currency)\n            converted_amount = amount * rate\n            CurrencyConvertRateModel.objects.create(source_currency=source_currency, target_currency=target_currency, rate=rate)\n\n            return render(request, self.template_name, {'form': form, 'converted_amount': converted_amount, 'rate': rate})\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        source_currency = request.GET.get('source_currency', 'USD')\n        target_currency = request.GET.get('target_currency', 'EUR')\n        chart = self.plot_chart(source_currency, target_currency)\n        return render(request, self.template_name, {'chart': chart, 'source_currency': source_currency, 'target_currency': target_currency})\n\n    @staticmethod\n    def plot_chart(source_currency, target_currency):\n        dates = [datetime.date.today() - datetime.timedelta(days=i) for i in range(7)]\n        rates = [get_updated_rate(source_currency, target_currency) for _ in range(7)]\n\n        plt.plot(dates, rates)\n        plt.xlabel('Date')\n        plt.ylabel('Exchange Rate')\n        plt.title(f'{source_currency} to {target_currency} Exchange Rate Trend')\n\n        buf = io.BytesIO()\n        plt.savefig(buf, format='png')\n        buf.seek(0)\n        string = base64.b64encode(buf.read()).decode()\n        plt.close()\n        return string\n\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0002_auto_20240919_0342.py", "path": "example_app/migrations/0002_auto_20240919_0342.py", "code": "# Generated by Django 3.2.13 on 2024-09-19 03:42\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('example_app', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='source_currency',\n            field=models.CharField(max_length=3, verbose_name='Source Currency'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='target_currency',\n            field=models.CharField(max_length=3, verbose_name='Target Currency'),\n        ),\n    ]\n"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-04 03:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=128, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=128, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=16, max_digits=32, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"title-trends\">Exchange Rate Trends</title>\n</head>\n<body id=\"body-trends\" class=\"trends-body\">\n    <div id=\"chart-container\" class=\"chart-container\">\n        {% if chart %}\n            <img id=\"chart-image\" class=\"chart-image\" src=\"data:image/png;base64,{{ chart }}\" alt=\"Exchange Rate Trend Chart\">\n        {% endif %}\n    </div>\n    <form id=\"currency-form\" class=\"currency-form\" method=\"get\" action=\"\">\n        <label id=\"label-source\" class=\"label-source\" for=\"source_currency\">Source Currency:</label>\n        <select id=\"select-source\" class=\"select-source\" name=\"source_currency\">\n            {% for currency in form.source_currency.field.choices %}\n                <option id=\"option-source-{{ currency.0 }}\" class=\"option-source\" value=\"{{ currency.0 }}\" {% if currency.0 == source_currency %}selected{% endif %}>{{ currency.1 }}</option>\n            {% endfor %}\n        </select>\n\n        <label id=\"label-target\" class=\"label-target\" for=\"target_currency\">Target Currency:</label>\n        <select id=\"select-target\" class=\"select-target\" name=\"target_currency\">\n            {% for currency in form.target_currency.field.choices %}\n                <option id=\"option-target-{{ currency.0 }}\" class=\"option-target\" value=\"{{ currency.0 }}\" {% if currency.0 == target_currency %}selected{% endif %}>{{ currency.1 }}</option>\n            {% endfor %}\n        </select><br>\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Update Chart</button>\n    </form>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"title-home\">Currency Converter</title>\n</head>\n<body id=\"body-home\" class=\"home-body\">\n    <div id=\"converter-container\" class=\"converter-container\">\n      <h1 id=\"converter-title\">Currency Converter</h1>\n      <form id=\"converter-form\" class=\"converter-form\" method=\"post\" action=\"\">\n          {% csrf_token %}\n          {{ form.as_p }}\n          <button id=\"convert-button\" type=\"submit\">Convert</button>\n      </form>\n      {% if converted_amount %}\n          <div id=\"result-container\" class=\"result-container\">\n              <p id=\"result-text\">Converted Amount: {{ converted_amount }}</p>\n              <p id=\"rate-text\">Exchange Rate: {{ rate }}</p>\n          </div>\n      {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "info.html", "path": "example_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"title-info\">Information</title>\n</head>\n<body id=\"body-info\" class=\"info-body\">\n    <div id=\"main-info\">This is a simple currency converter app.</div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView, InfoView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', InfoView, name='info'),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.views import View\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = \"\"\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return \"Please select at least one character type\"\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    generated_password = \"\"\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase', False)\n        include_lowercase = request.POST.get('lowercase', False)\n        include_numbers = request.POST.get('numbers', False)\n        include_symbols = request.POST.get('symbols', False)\n\n        generated_password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n\n    return render(request, 'generator.html', {'password': generated_password})\n\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n#copy-message { display: none; color: green; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"about-us-container\" class=\"content-container\">\n      <h1>About Us</h1>\n      <p>This is the about us page for the password generator.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <div id=\"generator-container\" class=\"content-container\">\n        <h1>Password Generator</h1>\n        <form method=\"post\">\n            {% csrf_token %}\n            <label for=\"length\">Length:</label>\n            <input type=\"number\" name=\"length\" id=\"length\" min=\"1\" max=\"100\" value=\"12\"><br><br>\n\n            <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" value=\"True\">\n            <label for=\"uppercase\">Uppercase</label><br>\n\n            <input type=\"checkbox\" name=\"lowercase\" id=\"lowercase\" value=\"True\">\n            <label for=\"lowercase\">Lowercase</label><br>\n\n            <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" value=\"True\">\n            <label for=\"numbers\">Numbers</label><br>\n\n            <input type=\"checkbox\" name=\"symbols\" id=\"symbols\" value=\"True\">\n            <label for=\"symbols\">Symbols</label><br><br>\n\n            <input type=\"submit\" value=\"Generate Password\"><br><br>\n        </form>\n      \n        {% if password %}\n            <div id=\"password-result\">\n                <span id=\"password\">{{ password }}</span>\n                <button id=\"copy-button\" onclick=\"copyToClipboard()\">Copy</button>\n                <span id=\"copy-message\"></span>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n  <div id=\"home-container\" class=\"content-container\">\n    <h1>Welcome to the Password Generator!</h1>\n    <p>Click <a href=\"{% url 'generator' %}\">here</a> to generate a strong password.</p>\n    <p>Click <a href=\"{% url 'about_us' %}\">here</a> to learn more about us.</p>      \n  </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a secure key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n        buffer = io.BytesIO()\n        img.save(buffer, 'PNG')\n        img_str = base64.b64encode(buffer.getvalue()).decode()\n\n        context = {'qr_code': img_str}\n        return render(request, 'qr_app/generate.html', context)\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )       \n        qr.add_data(data)\n        qr.make(fit=True)\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        response = HttpResponse(content_type='image/png')\n        response['Content-Disposition'] = f'attachment; filename=\"qrcode.png\"'\n        img.save(response, 'PNG')\n        return response\n\ndef about(request):\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"about-container\">\n        <h1>About the QR Code Generator</h1>\n        <p>This is a simple QR code generator built with Django.  It allows you to create custom QR codes for various purposes.</p>\n        <h2>Frequently Asked Questions (FAQ)</h2>\n        <ul>\n            <li><strong>Q: What can I use this for?</strong> A: You can use this to generate QR codes for websites, contact information, Wi-Fi credentials, and more!</li>\n            <li><strong>Q: How do I download my QR code?</strong> A: After generating the QR code, click the download button below it.</li>\n        </ul>\n        <h2>Privacy Policy</h2>\n        <p>We do not store any of the data you use to generate QR codes. Your privacy is important to us.</p>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n        #qr-code-image{\n            width: 300px;\n            height: 300px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"generator-container\" class=\"generator-container\">\n        <h1>QR Code Generator</h1>\n        <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <label for=\"data\">Data:</label>\n            <input type=\"text\" id=\"data\" name=\"data\" required>\n\n            <label for=\"fill_color\">Fill Color:</label>\n            <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n\n            <label for=\"back_color\">Background Color:</label>\n            <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\">\n\n            <button type=\"submit\">Generate QR Code</button>\n        </form>\n        {% if qr_code %}\n            <img id=\"qr-code-image\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"Generated QR Code\">\n            <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n                {% csrf_token %}\n                <input type=\"hidden\" name=\"data\" value=\"{{ data }}\">\n                <input type=\"hidden\" name=\"fill_color\" value=\"{{ fill_color }}\">          \n                <input type=\"hidden\" name=\"back_color\" value=\"{{ back_color }}\">\n                <button type=\"submit\">Download</button>\n            </form>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n      <h1>Welcome to the QR Code Generator!</h1>\n      <p>Create custom QR codes quickly and easily. Get started now!</p>\n      <a href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a><br>\n      <a href=\"{% url 'about' %}\">About Us</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n        elif 'file_upload' in request.FILES:\n            uploaded_file = request.FILES['file_upload']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            filepath = fs.path(filename)\n            with open(filepath, 'r') as f:\n                markdown_text = f.read()\n            html = markdown.markdown(markdown_text)  # Convert to HTML\n            return render(request, 'convert.html', {'html': html})\n    return render(request, 'convert.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"content-container\">\n        <h1>About this Markdown to HTML Converter</h1>\n        <p>This simple web application allows you to convert Markdown text to HTML. You can either paste your Markdown directly into the text area or upload a Markdown file.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"content-container\">\n        <h1>Markdown to HTML Converter</h1>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <label for=\"markdown_text\">Enter Markdown:</label><br>\n            <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"80\"></textarea><br><br>\n            <label for=\"file_upload\">Or upload a file:</label>\n            <input type=\"file\" id=\"file_upload\" name=\"file_upload\"><br><br>\n            <input type=\"submit\" value=\"Convert\">\n        </form>\n\n        {% if html %}\n            <div id=\"html-output\" class=\"output-container\">\n                <h2>Converted HTML:</h2>\n                {{ html | safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"content-container\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n        <p>Use the links below to navigate:</p>\n        <ul>\n            <li><a href=\"{% url 'convert' %}\">Convert Markdown</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a secure key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    # ... (rest of the middleware settings)\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    # ... (template settings)\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item,\n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView\nfrom .models import TodoList, TodoItem\nfrom django.urls import reverse\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def get_queryset(self):\n        for todolist in TodoList.objects.all():\n            todolist.completed = all(item.completed for item in todolist.todoitem_set.all())\n            todolist.save()\n        return TodoList.objects.all()\n\n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\n\ndef edit_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        todo.title = request.POST.get('title')\n        todo.description = request.POST.get('description')\n        todo.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todo': todo})\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        return context\n\n    def post(self, request, *args, **kwargs):\n        todolist_id = self.kwargs['pk']\n        todolist = get_object_or_404(TodoList, pk=todolist_id)\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoItem.objects.create(todolist=todolist, title=title, description=description)\n        return redirect(reverse('view_todo_item', kwargs={'pk': todolist_id}))\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_id = todo_item.todolist.id\n    todo_item.delete()\n    return redirect(reverse('view_todo_item', kwargs={'pk': todolist_id}))\n\n\ndef edit_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        todo_item.title = request.POST.get('title')\n        todo_item.description = request.POST.get('description')\n        todo_item.save()\n        return redirect(reverse('view_todo_item', kwargs={'pk': todo_item.todolist.id}))\n    return render(request, 'edit_todo_item.html', {'todo_item': todo_item})\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect(reverse('view_todo_item', kwargs={'pk': todo_item.todolist.id}))\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        completed_count = todo_items.filter(completed=True).count()\n        total_count = todo_items.count()\n\n        if total_count > 0:\n            completion_rate = (completed_count / total_count) * 100\n        else:\n            completion_rate = 0\n\n        context['completion_rate'] = completion_rate\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"analysis-container\" class=\"analysis-container\">\n        <canvas id=\"completion-rate-chart\" class=\"chart\"></canvas>\n    </div>\n\n    <script>\n        const ctx = document.getElementById('completion-rate-chart').getContext('2d');\n        const completionRate = {{ completion_rate }};\n\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    data: [completionRate, 100 - completionRate],\n                    backgroundColor: [\n                        'rgba(54, 162, 235, 0.5)',\n                        'rgba(255, 99, 132, 0.5)',\n                    ],\n                }]\n            },\n        });\n    </script>\n<a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Return Home</a>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <form method=\"post\" id=\"edit-todo-form\" class=\"edit-todo-form\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo.title }}\"><br><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\">{{ todo.description }}</textarea><br><br>\n        <input type=\"submit\" value=\"Save\" id=\"submit-button\" class=\"submit-button\">\n    </form>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <form method=\"post\" id=\"edit-todo-item-form\" class=\"edit-todo-item-form\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo_item.title }}\"><br><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\">{{ todo_item.description }}</textarea><br><br>\n        <input type=\"submit\" value=\"Save\" id=\"submit-button\" class=\"submit-button\">\n    </form>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"welcome-message\" class=\"welcome-message\">Welcome to the Todo App</h1>\n    <div>\n    <a href=\"{% url 'todo_list' %}\" id = \"todolist-link\" class=\"navigation-link\">View Todo Lists</a>\n    <br>\n    <a href=\"{% url 'analysis' %}\" id = \"analysis-link\" class=\"navigation-link\">Task Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <h1 id=\"todolist-title\">{{ todolist.title }}</h1>\n\n    <ul id=\"task-list\" class=\"task-list\">\n        {% for todo_item in todolist.todoitem_set.all %}\n        <li id=\"task-item-{{ todo_item.id }}\" class=\"task-item\">\n            <input type=\"checkbox\" id=\"completed-checkbox-{{ todo_item.id }}\"\n                   {% if todo_item.completed %}checked{% endif %}\n                   onclick=\"window.location.href='{% url 'complete_todo_item' todo_item.pk %}'\">\n            <span id=\"task-title-{{ todo_item.id }}\" class=\"{% if todo_item.completed %}completed-task{% endif %}\">\n                {{ todo_item.title }}\n            </span>\n            <a href=\"{% url 'edit_todo_item' todo_item.pk %}\" id=\"edit-link-{{ todo_item.id }}\">Edit</a>\n            <a href=\"{% url 'delete_todo_item' todo_item.pk %}\" id=\"delete-link-{{ todo_item.id }}\">Delete</a>\n            </li>\n        {% endfor %}\n    </ul>\n\n    <form method=\"post\" id=\"add-task-form\" class=\"add-task-form\">\n        {% csrf_token %}\n        <label for=\"title\">New Task:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\"><br><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\"></textarea><br><br>\n        <input type=\"submit\" value=\"Add Task\" id=\"submit-button\" class=\"submit-button\">\n    </form>\n    <br>\n    <a href=\"{% url 'todo_list' %}\" id=\"back-link\" class=\"back-link\">Back to Lists</a>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body>\n    <h1 id=\"todolist-header\">Todo Lists</h1>\n    <ul id=\"todo-list\" class=\"todo-list\">\n        {% for todolist in object_list %}\n            <li id=\"todolist-item-{{ todolist.id }}\" class=\"todolist-item\">\n                <input type=\"checkbox\" id=\"completed-checkbox-{{ todolist.id }}\"\n                       {% if todolist.completed %}checked{% endif %} disabled>\n                <a href=\"{% url 'view_todo_item' todolist.pk %}\" id=\"view-link-{{ todolist.id }}\">{{ todolist.title }}</a>\n                <a href=\"{% url 'edit_todo' todolist.pk %}\" id=\"edit-link-{{ todolist.id }}\">Edit</a>\n                <a href=\"{% url 'delete_todo' todolist.pk %}\" id=\"delete-link-{{ todolist.id }}\">Delete</a>\n            </li>\n        {% endfor %}\n    </ul>\n\n    <form method=\"post\" id=\"add-todo-form\" class=\"add-todo-form\">\n        {% csrf_token %}\n        <label for=\"title\">New List:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\"><br><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\"></textarea><br><br>\n        <input type=\"submit\" value=\"Add List\" id=\"submit-button\" class=\"submit-button\">\n    </form>\n    <br>\n    <a href=\"{% url 'home' %}\" id=\"back-link\" class=\"back-link\">Back to Home</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}, {"file": "tests.py", "path": "example_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main function to execute Django commands\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    date = models.DateField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    description = models.TextField(blank=True)\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Support request from {self.name} ({self.email})'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('signup/', views.SignupView.as_view(), name='signup'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),\n    path('charts/', views.ChartsView.as_view(), name='charts'),\n    path('settings/', views.SettingsView.as_view(), name='settings'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('download_report/', views.DownloadReportView.as_view(), name='download_report'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime, timedelta\n\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\nfrom .forms import LoginForm, SignupForm, SupportRequestForm, TransactionForm #add forms\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    pass\n\nclass HomeView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\nclass LoginView(View):\n    def get(self, request):\n        form = LoginForm()\n        return render(request, 'login.html', {'form': form})\n\n    def post(self, request):\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            user = authenticate(request, username=form.cleaned_data['username'], password=form.cleaned_data['password'])\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')  # Redirect to dashboard after successful login\n            else:\n                messages.error(request, 'Invalid username or password.')\n        return render(request, 'login.html', {'form': form})\n\n\nclass SignupView(View):\n    def get(self, request):\n        form = SignupForm()\n        return render(request, 'signup.html', {'form': form})\n\n    def post(self, request):\n        form = SignupForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)  # Log in the user immediately after signup\n            return redirect('dashboard')  # Redirect to dashboard after successful signup\n        return render(request, 'signup.html', {'form': form})\n\nclass LogoutView(LoginRequiredView):\n    def get(self, request):\n        logout(request)\n        return redirect('login')\n\nclass DashboardView(LoginRequiredView):\n    def get(self, request):\n        transactions = Transaction.objects.filter(user=request.user).order_by('-date')\n        return render(request, 'dashboard.html', {'transactions': transactions})\n\n    def post(self, request):\n        form = TransactionForm(request.POST)\n        if form.is_valid():\n            transaction = form.save(commit=False)\n            transaction.user = request.user\n            transaction.save()\n            return redirect('dashboard')\n        transactions = Transaction.objects.filter(user=request.user).order_by('-date')\n        return render(request, 'dashboard.html', {'transactions': transactions, 'form': form})\n\nclass ChartsView(LoginRequiredView):\n    def get(self, request):\n        # Sample chart data (replace with your actual data)\n        labels = ['January', 'February', 'March', 'April', 'May', 'June']\n        data = [100, 150, 200, 180, 220, 250]\n        return render(request, 'charts.html', {'labels': labels, 'data': data})\n\n\nclass SettingsView(LoginRequiredView):\n    def get(self, request):\n        return render(request, 'settings.html')\n\n\nclass SupportView(LoginRequiredView):\n    def get(self, request):\n        form = SupportRequestForm()\n        return render(request, 'support.html', {'form': form})\n\n    def post(self, request):\n        form = SupportRequestForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Your support request has been submitted.')\n            return redirect('support')  # Redirect back to the support page\n        return render(request, 'support.html', {'form': form})\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request):\n        # Logic for filtering transactions\n        transactions = Transaction.objects.filter(user=request.user)\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = 'attachment; filename=\"transactions.csv\"'\n\n        writer = csv.writer(response)\n        writer.writerow(['Date', 'Amount', 'Category', 'Description'])\n\n        for transaction in transactions:\n            writer.writerow([transaction.date, transaction.amount, transaction.category, transaction.description])\n\n        return response\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import SupportRequest, Transaction, Category\n\nclass LoginForm(forms.Form):\n    username = forms.CharField(max_length=150)\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass SignupForm(UserCreationForm):\n    # Add any custom fields here if needed\n    pass\n\nclass SupportRequestForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = ['name', 'email', 'message']\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['amount', 'category', 'date', 'description']"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <canvas id=\"myChart\" class=\"chart\"></canvas>\n    </div>\n\n    <script>\n        const ctx = document.getElementById('myChart').getContext('2d');\n        const myChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: {{ labels|safe }},\n                datasets: [{\n                    label: 'Transaction Amounts',\n                    data: {{ data|safe }},\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.2)',\n                        'rgba(54, 162, 235, 0.2)',\n                        'rgba(255, 206, 86, 0.2)',\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(153, 102, 255, 0.2)',\n                        'rgba(255, 159, 64, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n    <h1>Dashboard</h1>\n    <h2>Add Transaction</h2>\n    <form method=\"post\" id=\"transaction-form\" class=\"transaction-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Add Transaction</button>\n    </form>\n    <h2>Transactions</h2>\n    <table id=\"transaction-table\" class=\"transaction-table\">\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Amount</th>\n                <th>Category</th>\n                <th>Description</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for transaction in transactions %}\n                <tr id=\"transaction-row-{{ transaction.id }}\" class=\"transaction-row\">\n                    <td>{{ transaction.date }}</td>\n                    <td>{{ transaction.amount }}</td>\n                    <td>{{ transaction.category }}</td>\n                    <td>{{ transaction.description }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n    <form method=\"post\" action=\"{% url 'download_report' %}\">\n        {% csrf_token %}\n        <button type=\"submit\" id=\"download-button\">Download Report</button>\n    </form>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n  <div id=\"home-container\" class=\"home-container\">\n      <h1>Welcome to the Finance Tracker</h1>\n      <nav>\n          <ul id=\"navigation-list\">\n              <li id=\"login-link\" class=\"nav-item\"><a href=\"{% url 'login' %}\">Login</a></li>\n              <li id=\"signup-link\" class=\"nav-item\"><a href=\"{% url 'signup' %}\">Signup</a></li>\n              <li id=\"support-link\" class=\"nav-item\"><a href=\"{% url 'support' %}\">Support</a></li>\n          </ul>\n      </nav>\n  </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <div id=\"login-container\" class=\"login-container\">\n        <h1>Login</h1>\n        <form method=\"post\" id=\"login-form\" class=\"login-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"login-button\">Login</button>\n        </form>\n    </div>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n    <div id=\"settings-container\" class=\"settings-container\">\n        <h1>Settings</h1>\n        <p>Update your profile details, manage categories, and adjust settings here.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n    <div id=\"signup-container\" class=\"signup-container\">\n        <h1>Signup</h1>\n        <form method=\"post\" id=\"signup-form\" class=\"signup-form\"> \n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"signup-button\">Signup</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n    <div id=\"support-container\" class=\"support-container\">\n        <h1>Support</h1>\n        <form method=\"post\" id=\"support-form\" class=\"support-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"support-submit-button\">Submit Request</button>\n        </form>\n        {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'  # Or specify the fields explicitly\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__'  # Or specify the fields explicitly"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue = models.TextField()\n\n    def __str__(self):\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.urls import reverse_lazy\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\nclass PricingPageView(FormView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('pricing')  # Redirect to the same page after successful submission\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your message has been sent!')\n        return super().form_valid(form)\n\nclass SupportView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('support')\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted!')\n        return super().form_valid(form)\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body id=\"about-page\" class=\"page\">\n    <h1 id=\"about-title\" class=\"title\">About Us</h1>\n    <p id=\"about-content\" class=\"content\">Information about the team and company.</p>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body id=\"features-page\" class=\"page\">\n    <h1 id=\"features-title\" class=\"title\">Features</h1>\n    <ul id=\"features-list\" class=\"feature-list\">\n        <li id=\"feature-1\" class=\"feature\">Feature 1</li>\n         <li id=\"feature-2\" class=\"feature\">Feature 2</li>\n    </ul>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body id=\"home-page\" class=\"page\">\n    <h1 id=\"home-title\" class=\"title\">Welcome</h1>\n    <nav id=\"main-nav\" class=\"nav\">\n        <a id=\"home-link\" href=\"{% url 'home' %}\" class=\"nav-link\">Home</a>\n        <a id=\"features-link\" href=\"{% url 'features' %}\" class=\"nav-link\">Features</a>\n<a id=\"pricing-link\" href=\"{% url 'pricing' %}\" class=\"nav-link\">Pricing</a>\n<a id=\"support-link\" href=\"{% url 'support' %}\" class=\"nav-link\">Support</a>\n<a id=\"about-link\" href=\"{% url 'about' %}\" class=\"nav-link\">About</a>\n    </nav>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body  id=\"pricing-page\" class=\"page\">\n    <h1 id=\"pricing-title\" class=\"title\">Pricing</h1>\n    <div id=\"pricing-plans\" class=\"pricing\">\n        Pricing plans here.\n    </div>\n    <form id=\"contact-form\" method=\"post\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-button\" type=\"submit\">Submit</button>\n    </form>\n    {% if messages %}\n    <ul id=\"message-list\" class=\"messages\">\n        {% for message in messages %}\n        <li id=\"message-{{ forloop.counter }}\" class=\"message {{ message.tags }}\">{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body id=\"support-page\" class=\"page\">\n  <h1 id=\"support-title\" class=\"title\">Support</h1>\n\n  <form id=\"support-form\" method=\"post\" class=\"form\"> \n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"support-submit\">Submit</button>\n  </form>\n  {% if messages %}\n    <ul id=\"message-list\" class=\"messages\">\n      {% for message in messages %}\n        <li id=\"message-{{ forloop.counter }}\" class=\"message {{ message.tags }}\">{{ message }}</li>\n      {% endfor %}\n    </ul>\n  {% endif %}\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    pass\n\nclass LoginForm(forms.Form):\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = '__all__'\n\nclass ActivityForm(forms.ModelForm):\n    class Meta:\n        model = Activity\n        fields = '__all__'\n\nclass ProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        exclude = ('user',)\n\nclass PreferencesForm(forms.ModelForm):  # Example, adapt as needed\n    class Meta:\n        model = UserProfile\n        fields = ('dietary_preferences',) # Replace with actual preference fields"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.userprofile.save()\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='userprofile')\n    # Add other profile fields here (e.g., dietary_preferences)\n    dietary_preferences = models.CharField(max_length=255, blank=True)\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    date = models.DateField()\n    # ... other fields\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories_burned = models.IntegerField()\n    date = models.DateField()\n    # ... other fields"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'), # Add logout url\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_log, name='meal_log'),  # Corrected name\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_log, name='activity_log'), # Corrected name\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\ndef get_weekly_calorie_chart(user):\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n\n    return week_data"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date, timedelta\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate, logout\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nimport matplotlib.pyplot as plt\nimport io\nimport base64\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            password = form.cleaned_data['password']\n            user = authenticate(request, username=username, password=password)\n            if user:\n                login(request, user)\n                return redirect('dashboard')\n            else:\n                messages.error(request, 'Invalid username or password.')\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n@login_required\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n\n@login_required\ndef dashboard(request):\n    return render(request, 'dashboard.html')\n\n@login_required\ndef meal_log(request):\n    meals = Meal.objects.filter(user=request.user)\n    return render(request, 'meal_log.html', {'meals': meals})\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('meal_log')  # Redirect to the meal log\n    else:\n        form = MealForm()\n    return render(request, 'add_meal.html', {'form': form})\n\n@login_required\ndef edit_meal(request, id):\n    meal = Meal.objects.get(pk=id, user=request.user) # Ensure user owns the meal\n    if request.method == 'POST':\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            form.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'edit_meal.html', {'form': form, 'meal': meal})\n\n@login_required\ndef delete_meal(request, id):\n    meal = Meal.objects.get(pk=id, user=request.user) # Ensure user owns the meal\n    meal.delete()\n    return redirect('meal_log')\n\n# ... (similar views for activity_log, add_activity, etc.)\n\n@login_required\ndef activity_log(request):\n    activities = Activity.objects.filter(user=request.user)\n    return render(request, 'activity_log.html', {'activities': activities})\n\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False) # Don't save yet\n            activity.user = request.user      # Set the user\n            activity.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm()\n    return render(request, 'add_activity.html', {'form': form})\n\n@login_required\ndef edit_activity(request, id):\n    activity = Activity.objects.get(pk=id, user=request.user) \n    if request.method == 'POST':\n        form = ActivityForm(request.POST, instance=activity)\n        if form.is_valid():\n            form.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm(instance=activity)\n    return render(request, 'edit_activity.html', {'form': form, 'activity': activity})\n\n@login_required\ndef delete_activity(request, id):\n    activity = Activity.objects.get(pk=id, user=request.user)\n    activity.delete()\n    return redirect('activity_log')\n\n@login_required\ndef settings(request):\n    return render(request, 'settings.html')\n\n@login_required\ndef meal_search(request):\n    return render(request, 'meal_log.html')  # Placeholder, implement search logic\n\n@login_required\ndef activity_search(request):\n    return render(request, 'activity_log.html')  # Placeholder, implement search logic\n\ndef tutorials(request):\n    return render(request, 'tutorials.html')\n\n@login_required\ndef update_profile(request):\n    profile = request.user.userprofile\n    if request.method == 'POST':\n        form = ProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            return redirect('settings')\n    else:\n        form = ProfileForm(instance=profile)\n    return render(request, 'update_profile.html', {'form': form})\n\n@login_required\ndef update_preferences(request):\n    profile = request.user.userprofile\n    if request.method == 'POST':\n        form = PreferencesForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            return redirect('settings')\n    else:\n        form = PreferencesForm(instance=profile) # Use PreferencesForm\n    return render(request, 'update_preferences.html', {'form': form})\n\n\n@login_required\ndef weekly_calorie_chart(request):\n    chart_data = get_weekly_calorie_chart(request.user)\n    plt.figure(figsize=(10, 5))\n    plt.plot(chart_data['dates'], chart_data['intake'], label='Calorie Intake')\n    plt.plot(chart_data['dates'], chart_data['expenditure'], label='Calories Burned')\n    plt.xlabel('Date')\n    plt.ylabel('Calories')\n    plt.title('Weekly Calorie Chart')\n    plt.legend()\n\n    # Convert plot to PNG image\n    buf = io.BytesIO()\n    plt.savefig(buf, format='png')\n    buf.seek(0)\n    image_png = buf.getvalue()\n    buf.close()\n    graphic = base64.b64encode(image_png)\n    graphic = graphic.decode('utf-8')\n\n    return render(request, 'weekly_calorie_chart.html', {'graphic': graphic})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"activity-log-container\" class=\"container\">\n    <h1>Activity Log</h1>\n    <a href=\"{% url 'add_activity' %}\" class=\"btn btn-primary\">Add Activity</a>\n\n    <table id=\"activity-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Calories Burned</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n        {% for activity in activities %}\n            <tr>\n                <td>{{ activity.date }}</td>\n                <td>{{ activity.name }}</td>\n                <td>{{ activity.calories_burned }}</td>\n                <td>\n                    <a href=\"{% url 'edit_activity' activity.id %}\">Edit</a> | \n                    <a href=\"{% url 'delete_activity' activity.id %}\">Delete</a>\n                </td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-activity-container\" class=\"container\">\n    <h1>Add Activity</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-success\">Add</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-meal-container\" class=\"container\">\n    <h1>Add Meal</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-success\">Add</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"dashboard-container\" class=\"container\">\n  <h1>Dashboard</h1>\n    <p>Welcome, {{ user.username }}!</p>\n    <div id=\"dashboard-stats\" class=\"dashboard-section\">\n      <h2>Today's Stats</h2>\n    </div>\n    <div id=\"dashboard-recent\" class=\"dashboard-section\">\n      <h2>Recent Activities</h2>\n    </div>\n    <div id=\"dashboard-weekly\" class=\"dashboard-section\">\n      <h2>Weekly Summary</h2>\n      <a href=\"{% url 'weekly_calorie_chart' %}\">View Weekly Chart</a>\n    </div>\n\n</div>\n{% endblock %}"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-activity-container\" class=\"container\">\n  <h1>Edit Activity</h1>\n  <form method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\" class=\"btn btn-success\">Save Changes</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-meal-container\" class=\"container\">\n  <h1>Edit Meal</h1>\n  <form method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\" class=\"btn btn-success\">Save Changes</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"container\">\n    <h1>Welcome to the Calorie Tracker!</h1>\n    {% if user.is_authenticated %}\n        <p>You are logged in as {{ user.username }}.</p>\n        <a href=\"{% url 'dashboard' %}\">Go to Dashboard</a>\n    {% else %}\n        <a href=\"{% url 'login' %}\">Login</a>\n        <a href=\"{% url 'signup' %}\">Sign Up</a>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"login-container\" class=\"container\">\n    <h1>Login</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n    </form>\n    <p>Don't have an account? <a href=\"{% url 'signup' %}\">Sign Up</a></p>\n</div>\n{% endblock %}"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"meal-log-container\" class=\"container\">\n    <h1>Meal Log</h1>\n\n    <a href=\"{% url 'add_meal' %}\" class=\"btn btn-primary\">Add Meal</a>\n\n    <table id=\"meal-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Meal</th>\n                <th>Calories</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for meal in meals %}\n            <tr>\n                <td>{{ meal.date }}</td>\n                <td>{{ meal.name }}</td>\n                <td>{{ meal.calories }}</td>\n                <td>\n                    <a href=\"{% url 'edit_meal' meal.id %}\">Edit</a> |\n                    <a href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"settings-container\" class=\"container\">\n    <h1>Settings</h1>\n    <div id=\"profile-settings\" class=\"settings-section\">\n        <h2>Profile</h2>\n        <a href=\"{% url 'update_profile' %}\" class=\"btn btn-primary\">Update Profile</a>\n    </div>\n    <div id=\"preferences-settings\" class=\"settings-section\">\n      <h2>Preferences</h2>\n        <a href=\"{% url 'update_preferences' %}\" class=\"btn btn-primary\">Update Preferences</a>\n    </div>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"signup-container\" class=\"container\">\n    <h1>Sign Up</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">Sign Up</button>\n    </form>\n    <p>Already have an account? <a href=\"{% url 'login' %}\">Login</a></p>\n</div>\n{% endblock %}"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"tutorials-container\" class=\"container\">\n  <h1>Tutorials and Help</h1>\n</div>\n{% endblock %}"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"update-preferences-container\" class=\"container\">\n    <h1>Update Preferences</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-success\">Save Preferences</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"update-profile-container\" class=\"container\">\n    <h1>Update Profile</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-success\">Save Changes</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"weekly-chart-container\" class=\"container\">\n    <h1>Weekly Calorie Chart</h1>\n    <img src=\"data:image/png;base64,{{ graphic }}\" alt=\"Weekly Calorie Chart\">\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n  <nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Calorie Tracker</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n      <ul class=\"navbar-nav\">\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'home' %}\">Home</a></li>\n        {% if user.is_authenticated %}\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'dashboard' %}\">Dashboard</a></li>\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'meal_log' %}\">Meal Log</a></li>\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'activity_log' %}\">Activity Log</a></li>\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'settings' %}\">Settings</a></li>\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a></li>\n        {% else %}\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'login' %}\">Login</a></li>\n        <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'signup' %}\">Signup</a></li>\n        {% endif %}\n      </ul>\n    </div>\n  </nav>\n    <div id=\"content-container\" class=\"container\">\n      {% block content %}{% endblock %}\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True  # Changed to True\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'\n\nLOGIN_REDIRECT_URL = '/dashboard/' # Added redirect after login\nLOGOUT_REDIRECT_URL = '/'         # Added redirect after logout"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label='Upload JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    status = models.CharField(max_length=50)  # e.g., 'Passed', 'Failed', 'In Progress'\n    comments = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Review for {self.project.name}\""}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\n\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        # Process review submission (add logic here)\n        status = request.POST.get('status')\n        comments = request.POST.get('comments')\n        Review.objects.create(project=project, status=status, comments=comments)\n        messages.success(request, 'Review submitted successfully!')\n        return redirect('home')  # Redirect after submission\n    return render(request, 'review.html', {'project': project})\n\ndef process_review_submission(request, project, test_results):\n    pass  # Implement logic to handle test results and update Review model\n\ndef home_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            handle_json_upload(request.FILES['json_file'])\n            return redirect('home') # Redirect to refresh the page\n    else:\n        form = JSONUploadForm()\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'form': form, 'projects': projects})\n\ndef handle_json_upload(json_file):\n    try:\n        data = json.load(json_file)\n        project, created = Project.objects.get_or_create(name=data.get('name'))\n        project.description = data.get('description')\n        project.save()\n        messages.success(request, 'Project uploaded/updated successfully!')\n    except json.JSONDecodeError:\n        messages.error(request, 'Invalid JSON file.')\n\ndef about_view(request):\n    return render(request, 'about.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"content-container\">\n    <h1>About This Project</h1>\n    <p>This is a simple project review site built with Django.  It allows you to upload project details via JSON, and then review each project individually.</p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n            <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                <li><a href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n        {% if messages %}\n            <div id=\"message-container\" class=\"message-container\">\n                {% for message in messages %}\n                    <p class=\"{{ message.tags }}\">{{ message }}</p>\n                {% endfor %}\n            </div>\n        {% endif %}\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"content-container\">\n    <h1>Project Listings</h1>\n    <div id=\"project-list-container\" class=\"project-list-container\">\n      <ul id=\"project-list\" class=\"project-list\">  \n        {% for project in projects %}\n          <li id=\"project-{{ project.id }}\" class=\"project-list-item\">\n            <a href=\"{% url 'review' project.id %}\">{{ project.name }}</a>\n          </li>\n        {% endfor %}\n      </ul>\n    </div>\n    <h2>Upload Project JSON</h2>\n    <div id=\"upload-form-container\" class=\"upload-form-container\"> \n      <form id=\"json-upload-form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-button\" type=\"submit\">Upload</button>\n      </form>\n    </div>\n</div>\n{% endblock %}"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"content-container\">\n    <h1 id=\"project-title\">Review: {{ project.name }}</h1>\n    <form id=\"review-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" name=\"status\">\n            <option value=\"Passed\">Passed</option>\n            <option value=\"Failed\">Failed</option>\n            <option value=\"In Progress\">In Progress</option>\n        </select><br>\n        <label for=\"comments\">Comments:</label><br>\n        <textarea id=\"comments\" name=\"comments\" rows=\"4\"></textarea><br>\n        <button id=\"submit-review\" type=\"submit\">Submit Review</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'  # Replace with a real secret key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    # ... (rest of the middleware settings)\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    # ... (template settings)\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# ... (other settings)\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static') # Added STATIC_ROOT\n\nMEDIA_URL = '/media/'  # New\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media') # New\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) # Added this line\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": ".content-container {\n    max-width: 800px;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.project-list-item {\n    margin-bottom: 10px;\n}\n\n.message-container {\n    margin-bottom: 20px;\n}\n\n.message-container p {\n    padding: 10px;\n    border-radius: 5px;\n}\n\n.success {\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n    color: #155724;\n}\n\n.error {\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n    color: #721c24;\n}"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom .models import Claim, Budget\n\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'description', 'status', 'created_at', 'operations')\n    list_filter = ('status', 'category', 'user')\n    actions = (approve_claims, reject_claims)\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/edit_claim/{}/\">Edit</a> | <a href=\"/delete_claim/{}/\">Delete</a>',\n            obj.id, obj.id\n        )\n    operations.short_description = 'Operations'\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='approved')\n        messages.success(request, 'Selected claims approved.')\n\n    def reject_claims(self, request, queryset):\n        queryset.update(status='rejected')\n        messages.success(request, 'Selected claims rejected.')\n\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit')"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\n\n\nclass Claim(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    )\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n\nclass Budget(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget\n\ndef check_budget_limit(category, amount):\n    try:\n        budget = Budget.objects.get(category=category)\n        spent = Claim.objects.filter(category=category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        return spent + amount <= budget.limit\n    except Budget.DoesNotExist:\n        return True"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login, authenticate\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom .utils import check_budget_limit\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Claim submitted successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user)\n    return render(request, 'claim_status.html', {'claims': claims})\n\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be edited.')\n        return redirect('claim_status')\n\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            if check_budget_limit(form.cleaned_data['category'], form.cleaned_data['amount']):\n                form.save()\n                messages.success(request, 'Claim updated successfully.')\n                return redirect('claim_status')\n             else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    claim.delete()\n    messages.success(request, 'Claim deleted successfully.')\n    return redirect('claim_status')\n\n\n@login_required\ndef analysis_view(request):\n    approved_claims = Claim.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n    budgets = Budget.objects.all()\n    return render(request, 'analysis.html', {'approved_claims': approved_claims, 'budgets': budgets})"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.5 on 2025-01-26 23:19\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Analysis Report{% endblock %}\n\n{% block content %}\n    <div id=\"analysis-report\" class=\"report-container\">\n        <h2>Analysis Report</h2>\n\n        <div id=\"total-approved-claims\" class=\"report-section\">\n            <h3>Total Approved Claims</h3>\n            <p id=\"approved-claims-amount\" class=\"amount\">${{ approved_claims }}</p>\n        </div>\n\n        <div id=\"budget-utilization\" class=\"report-section\">\n            <h3>Budget Utilization</h3>\n            <table id=\"budget-table\" class=\"budget-table\">\n                <thead>\n                    <tr>\n                        <th>Category</th>\n                        <th>Limit</th>\n                        <th>Spent</th>\n                        <th>Remaining</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {% for budget in budgets %}\n                        <tr>\n                            <td id=\"budget-category-{{ budget.id }}\" class=\"category\">{{ budget.category }}</td>\n                            <td id=\"budget-limit-{{ budget.id }}\" class=\"limit\">${{ budget.limit }}</td>\n                            {% with spent=budget.claim_set.filter(status='approved').aggregate(Sum('amount'))['amount__sum']|default:0 %}\n                            <td id=\"budget-spent-{{ budget.id }}\" class=\"spent\">${{ spent }}</td>\n                            <td id=\"budget-remaining-{{ budget.id }}\" class=\"remaining\">${{ budget.limit|sub:spent }}</td>\n                            {% endwith %}\n                        </tr>\n                    {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"page-title\">{% block title %}Accounting System{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"base-body\">\n    <nav id=\"main-nav\" class=\"navbar\">\n        <ul id=\"nav-list\" class=\"nav-list\">\n            <li id=\"nav-home\" class=\"nav-item\"><a href=\"{% url 'home' %}\">Home</a></li>\n            {% if user.is_authenticated %}\n                <li id=\"nav-submit-claim\" class=\"nav-item\"><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n                <li id=\"nav-claim-status\" class=\"nav-item\"><a href=\"{% url 'claim_status' %}\">Claim Status</a></li>\n                <li id=\"nav-analysis\" class=\"nav-item\"><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n                <li id=\"nav-logout\" class=\"nav-item\"><a href=\"{% url 'logout' %}\">Logout</a></li>\n            {% else %}\n                <li id=\"nav-signup\" class=\"nav-item\"><a href=\"{% url 'signup' %}\">Sign Up</a></li>\n                <li id=\"nav-login\" class=\"nav-item\"><a href=\"{% url 'login' %}\">Login</a></li>\n            {% endif %}\n        </ul>\n    </nav>\n\n    <div id=\"main-content\" class=\"main-content\">\n        {% if messages %}\n            <div id=\"message-container\" class=\"message-container\">\n                <ul id=\"message-list\" class=\"message-list\">\n                    {% for message in messages %}\n                        <li id=\"message-item-{{ message.tags }}\" class=\"message {{ message.tags }}\">{{ message }}</li>\n                    {% endfor %}\n                </ul>\n            </div>\n        {% endif %}\n\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n    <div id=\"edit-claim-form-container\" class=\"form-container\">\n        <h2>Edit Claim</h2>\n        <form id=\"edit-claim-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields-container\" class=\"form-fields\">\n                {% for field in form %}\n                    <div id=\"form-field-{{ field.name }}\" class=\"form-group\">\n                        <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n                        {{ field }}\n                        {% if field.errors %}\n                            <div id=\"form-field-error-{{ field.name }}\" class=\"errorlist\">{{ field.errors }}</div>\n                        {% endif %}\n                    </div>\n                {% endfor %}\n            </div>\n            <button id=\"submit-button\" type=\"submit\" class=\"submit-button\">Update Claim</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n    <div id=\"claim-status-container\" class=\"status-container\">\n        <h2>Claim Status</h2>\n        <table id=\"claim-table\" class=\"claim-table\">\n            <thead>\n                <tr>\n                    <th>Category</th>\n                    <th>Amount</th>\n                    <th>Description</th>\n                    <th>Status</th>\n                    <th>Created At</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for claim in claims %}\n                    <tr id=\"claim-row-{{ claim.id }}\">\n                        <td id=\"claim-category-{{ claim.id }}\">{{ claim.category }}</td>\n                        <td id=\"claim-amount-{{ claim.id }}\">${{ claim.amount }}</td>\n                        <td id=\"claim-description-{{ claim.id }}\">{{ claim.description }}</td>\n                        <td id=\"claim-status-{{ claim.id }}\">{{ claim.status }}</td>\n                        <td id=\"claim-created-at-{{ claim.id }}\">{{ claim.created_at }}</td>\n                        <td id=\"claim-actions-{{ claim.id }}\">\n                            {% if claim.status == 'pending' %}\n                                <a href=\"{% url 'edit_claim' claim.id %}\" id=\"edit-link-{{ claim.id }}\">Edit</a> |\n                                <a href=\"{% url 'delete_claim' claim.id %}\" id=\"delete-link-{{ claim.id }}\">Delete</a>\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Home{% endblock %}\n\n{% block content %}\n  <div id=\"home-container\" class=\"home-content\">\n    <h1 id=\"home-title\">Welcome to the Accounting and Cashier Management System</h1>\n    {% if user.is_authenticated %}\n      <p id=\"welcome-message\">Hello, {{ user.username }}!</p>\n    {% else %}\n      <p id=\"signup-prompt\">New here? <a id=\"signup-link\" href=\"{% url 'signup' %}\">Sign up now</a></p>\n      <p id=\"login-prompt\">Already have an account? <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a></p>\n    {% endif %}\n  </div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Login{% endblock %}\n\n{% block content %}\n    <div id=\"login-form-container\" class=\"form-container\">\n        <h2 id=\"login-title\">Login</h2>\n        <form id=\"login-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields-container\" class=\"form-fields\">\n                <div id=\"form-field-username\" class=\"form-group\">\n                    <label for=\"id_username\">Username:</label>\n                    <input type=\"text\" name=\"username\" id=\"id_username\" required>\n                </div>\n                <div id=\"form-field-password\" class=\"form-group\">\n                    <label for=\"id_password\">Password:</label>\n                    <input type=\"password\" name=\"password\" id=\"id_password\" required>\n                </div>\n            </div>\n            <button id=\"login-button\" type=\"submit\" class=\"submit-button\">Login</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Sign Up{% endblock %}\n\n{% block content %}\n    <div id=\"signup-form-container\" class=\"form-container\">\n        <h2 id=\"signup-title\">Sign Up</h2>\n        <form id=\"signup-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields-container\" class=\"form-fields\">\n                {% for field in form %}\n                    <div id=\"form-field-{{ field.name }}\" class=\"form-group\">\n                        <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n                        {{ field }}\n                        {% if field.errors %}\n                            <div id=\"form-field-error-{{ field.name }}\" class=\"errorlist\">{{ field.errors }}</div>\n                        {% endif %}\n                    </div>\n                {% endfor %}\n            </div>\n            <button id=\"signup-button\" type=\"submit\" class=\"submit-button\">Sign Up</button>\n            <p id=\"login-prompt\">Already have an account? <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a></p>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n    <div id=\"submit-claim-form-container\" class=\"form-container\">\n        <h2 id=\"submit-claim-title\">Submit Claim</h2>\n        <form id=\"submit-claim-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields-container\" class=\"form-fields\">\n                {% for field in form %}\n                    <div id=\"form-field-{{ field.name }}\" class=\"form-group\">\n                        <label for=\"{{ field.id_for_label }}\">{{ field.label }}</label>\n                        {{ field }}\n                        {% if field.errors %}\n                            <div id=\"form-field-error-{{ field.name }}\" class=\"errorlist\">{{ field.errors }}</div>\n                        {% endif %}\n                    </div>\n                {% endfor %}\n            </div>\n            <button id=\"submit-button\" type=\"submit\" class=\"submit-button\">Submit Claim</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\nLOGIN_URL = '/login/'\nLOGIN_REDIRECT_URL = '/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": ".message-container {\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 20px;\n}\n\n.message-list {\n    list-style: none;\n    padding: 0;\n}\n\n.message {\n    margin-bottom: 5px;\n    padding: 5px;\n    border-radius: 5px;\n}\n\n.success {\n    background-color: lightgreen;\n    color: green;\n}\n\n.error {\n    background-color: lightpink;\n    color: red;\n}\n\n.form-container, .status-container, .report-container, .home-content {\n    width: 60%;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 5px;\n}\n\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n}\n\nth, td {\n    padding: 8px;\n    border: 1px solid #ddd;\n    text-align: left;\n}\n\n.navbar {\n    background-color: #f0f0f0;\n    padding: 10px;\n}\n\n.nav-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex; /* Arrange list items horizontally */\n}\n\n.nav-item {\n    margin-right: 20px;\n}\n\n.nav-item a {\n    text-decoration: none;\n    color: #333;\n}"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    def get(self, request):\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\nh1 {\n    color: #333;\n}"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"main-body\" class=\"main-body\">\n    <h1 id=\"hello-world-title\" class=\"hello-world-title\">Hello, World!</h1>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, unique secret key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        # ... (rest of the migration code)\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh; /* Ensure content fills screen */\n    background-color: #f0f8ff;\n}\n\n.container {\n    text-align: center; /* Center content within the container */\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n\n.nav-links {\n    margin-top: 20px;\n}\n\n.nav-links a {\n    display: inline-block;\n    margin: 0 10px;\n    padding: 10px 20px;\n    background-color: #4CAF50;\n    color: white;\n    text-decoration: none;\n    border-radius: 5px;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"helloworld-container\" class=\"container\">\n        <h1 id=\"helloworld-title\">Hello, World!</h1>\n        <div id=\"nav-links\" class=\"nav-links\">\n            <a id=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\">Welcome Home!</h1>\n        <div id=\"nav-links\" class=\"nav-links\">\n            <a id=\"helloworld-link\" href=\"{% url 'helloworld' %}\">Hello World</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# ... (Existing settings)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(os.path.dirname(BASE_DIR), 'example_app/static')]  # Correct path\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(\"BashCrawl is a text-based adventure game.\")\n        print(\"Navigate using commands like 'cd', 'ls', and 'inventory'.\")\n\n    def print_game_help(self):\n        print(\"Available commands:\")\n        for command in self.commands:\n            print(f\"- {command}\")\n\n    def list_contents(self):\n        contents = self.directory_structure.get(self.current_dir, [])\n        if contents:\n            print(\" \".join(contents))\n        else:\n            print(\"This directory is empty.\")\n        if self.current_dir in self.items:\n            print(self.items[self.current_dir])\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n            print(f\"Current directory: {self.current_dir}\")\n        else:\n            print(\"Invalid directory.\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"Inventory:\")\n            for item in self.inventory:\n                print(f\"- {item}\")\n        else:\n            print(\"Your inventory is empty.\")\n\n\n    def play(self):\n        while True:\n            command = input(f\"{self.current_dir} $ \").split()\n            if not command:\n                continue\n\n            action = command[0]\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    print(\"Please specify a directory.\") # Add more detailed cd help\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                break\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\")\n\n            if self.current_dir in self.items and self.items[self.current_dir] not in self.inventory:\n                item = self.items[self.current_dir]\n                self.inventory.append(item)\n                print(f\"You found the {item}!\")\n                del self.items[self.current_dir]\n\n    def main_menu(self):\n        while True:\n            self.print_main_menu()\n            choice = input(\"> \")\n            if choice == \"1\":\n                self.play()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                break\n            else:\n                print(\"Invalid choice.\")\n\n\ndef main():\n    game = BashCrawl()\n    game.main_menu()\n\n\nif __name__ == \"__main__\":\n    main()\n"}], "20": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    def operations(self, obj):\n        return format_html(f'<a href=\"/admin/example_app/blogpost/{obj.id}/change/\" class=\"edit-link\">Edit</a> <a href=\"/post/{obj.id}/delete/\" class=\"delete-link\">Delete</a>')\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    def operations(self, obj):\n        return format_html(f'<a href=\"/admin/example_app/category/{obj.id}/change/\" class=\"edit-link\">Edit</a> <a href=\"/category/{obj.id}/delete/\" class=\"delete-link\">Delete</a>')\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    pass\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name', 'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment', 'class': 'form-control'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'class': 'form-control'}),\n            'category': forms.Select(attrs={'class': 'form-control'}),\n        }\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        verbose_name_plural = 'Categories'\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=255)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.author} on {self.post.title}'\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return f'Message from {self.name}'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "def filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, Comment, ContactUs\nfrom .forms import CommentForm, BlogPostForm\nfrom .utils import filter_by_date\n\ndef home(request):\n    posts = BlogPost.objects.order_by('-created_at')\n    if request.method == 'GET' and 'q' in request.GET:\n        query = request.GET.get('q')\n        posts = posts.filter(title__icontains=query) \n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all()\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.post = post\n            comment.save()\n            return redirect('post_detail', pk=post.pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\n@login_required\ndef post_delete(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)    \n    post.delete()\n    messages.success(request, 'Post deleted successfully.')\n    return redirect('admin:example_app_blogpost_changelist') # Redirect to admin changelist\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category).order_by('-created_at')\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n@login_required\ndef category_delete(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    messages.success(request, 'Category deleted successfully.')\n    return redirect('admin:example_app_category_changelist')  # Redirect to admin changelist\n\ndef archive(request):\n    posts = BlogPost.objects.all()\n    archive_data = posts.annotate(month=TruncMonth('created_at')).values('month').annotate(count=Count('id')).order_by('-month')\n    context = {\n        'archive_data': archive_data,\n    }\n    return render(request, 'blog/archive.html', context)\n\n\ndef about(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        contact = ContactUs(name=name, email=email, message=message)\n        contact.save()\n        messages.success(request, 'Your message has been sent!')\n        return redirect('about')\n    return render(request, 'blog/about.html')\n\ndef search(request):\n    query = request.GET.get('q')\n    posts = BlogPost.objects.filter(title__icontains=query)\n    return render(request, 'blog/home.html', {'posts': posts, 'query': query})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\nheader {\n    background: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\nheader nav a {\n    color: #fff;\n    margin: 0 15px;\n    text-decoration: none;\n}\n\nmain {\n    padding: 20px;\n    background: #fff;\n    margin: 20px auto;\n    max-width: 800px;\n    border: 1px solid #ddd;\n}\n\nfooter {\n    text-align: center;\n    padding: 10px 0;\n    background: #333;\n    color: #fff;\n}\n\n.edit-link, .delete-link{\n    margin: 0 5px;\n    padding: 5px 10px;\n    border: 1px solid #ccc;\n    text-decoration: none;\n    border-radius: 5px;\n}\n\n.edit-link {\n    background-color: #4CAF50;\n    color: #fff;\n}\n\n.delete-link{\n    background-color: #f44336;\n    color: #fff;\n}\n\n.form-control {\n    width: 100%;\n    padding: 10px;\n    margin: 8px 0;\n    box-sizing: border-box;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n"}, {"file": "about.html", "path": "example_app/templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-container\">\n    <h1>About Me</h1>\n    <p>This is the about page. You can write something about yourself here.</p>\n    <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\" class=\"form-control\"><br>\n        <label for=\"email\">Email:</label><br>\n        <input type=\"email\" id=\"email\" name=\"email\" class=\"form-control\"><br>\n        <label for=\"message\">Message:</label><br>\n        <textarea id=\"message\" name=\"message\" class=\"form-control\"></textarea><br><br>\n        <input type=\"submit\" value=\"Submit\" class=\"form-control\">\n    </form>\n    {% if messages %}\n    <ul>\n        {% for message in messages %}\n        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "archive.html", "path": "example_app/templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"archive-container\" class=\"archive-container\">\n    <h1>Archive</h1>\n    <ul>\n        {% for date in archive_data %}\n        <li>\n            <a href=\"{% url 'archive' %}?year={{ date.month.year }}&month={{ date.month.month }}\">\n                {{ date.month|date:'F Y' }} ({{ date.count }})\n            </a>\n        </li>\n        {% endfor %}\n    </ul>\n    {% if posts %}\n    <ul>\n        {% for post in posts %}\n        <li><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n    {% else %}\n    <p>No posts found.</p>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n<header id=\"main-header\" class=\"main-header\">\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n        <a id=\"categories-link\" class=\"nav-link\" href=\"{% url 'category' %}\">Categories</a>\n        <a id=\"archive-link\" class=\"nav-link\" href=\"{% url 'archive' %}\">Archive</a>\n        <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n    </nav>\n</header>\n<main id=\"main-content\" class=\"main-content\">\n    {% block content %}{% endblock %}\n</main>\n<footer id=\"main-footer\" class=\"main-footer\">\n    <p>&copy; 2023 My Blog</p>\n</footer>\n</body>\n</html>\n"}, {"file": "category.html", "path": "example_app/templates/blog/category.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"categories-container\" class=\"categories-container\">\n    <h1>Categories</h1>\n    <ul>\n        {% for category in categories %}\n        <li>\n            <a id=\"category-{{ category.id }}-link\" class=\"category-link\" href=\"{% url 'category_detail' category.pk %}\">\n                {{ category.name }}\n            </a>\n            {% if user.is_authenticated %}\n            <a href=\"{% url 'category_delete' category.pk %}\" class=\"delete-link\">Delete</a>\n            {% endif %}\n        </li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <form id=\"search-form\" class=\"search-form\" method=\"get\" action=\"{% url 'search' %}\">\n        <input type=\"text\" id=\"search-input\" class=\"form-control\" name=\"q\" placeholder=\"Search posts...\" value=\"{{ query|default:'' }}\">\n        <button type=\"submit\" id=\"search-button\">Search</button>\n    </form>\n    <h1>Latest Posts</h1>\n    <ul id=\"posts-list\" class=\"posts-list\">\n        {% for post in posts %}\n            <li>\n                <a id=\"post-{{ post.id }}-link\" class=\"post-link\" href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a>\n               \n                {% if user.is_authenticated %}\n                    <a href=\"{% url 'post_delete' post.pk %}\" class=\"delete-link\">Delete</a>\n                {% endif %}\n            </li>\n        {% empty %}\n            <li>No posts yet.</li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "post_detail.html", "path": "example_app/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n    <div id=\"post-detail-container\" class=\"post-detail-container\">\n        <h1 id=\"post-title\">{{ post.title }}</h1>\n        <p id=\"post-content\">{{ post.content }}</p>\n        <p id=\"post-category\">Category: {{ post.category }}</p>\n        <hr>\n        <h2 id=\"comments-heading\">Comments</h2>\n        <ul id=\"comments-list\">\n            {% for comment in comments %}\n                <li id=\"comment-{{ comment.id }}\" class=\"comment\">                \n                    <strong>{{ comment.author }}</strong> - {{ comment.content }}\n                </li>\n            {% empty %}\n                <li>No comments yet.</li>\n            {% endfor %}\n        </ul>\n\n        <form method=\"post\" id=\"comment-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"submit-button\">Add Comment</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nLOGIN_URL = '/admin/login/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "category_detail.html", "path": "example_app/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n<div id=\"category-detail-container\" class=\"category-detail-container\">\n    <h1 id=\"category-title\">{{ category.name }}</h1>\n\n    <ul id=\"posts-list\" class=\"posts-list\">\n        {% for post in posts %}\n        <li id=\"post-{{ post.id }}\">\n            <a id=\"post-{{ post.id }}-link\" href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a>\n        </li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}]}