{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Your Weight (kg)', min_value=0)\n    height = forms.FloatField(label='Your Height (cm)', min_value=0)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\",\n    \"Invalid weight\": \"The weight can't be less than 0.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height'] / 100  # Convert cm to meters\n            if height <=0:\n                return render(request, 'bmi_calculator.html', {'form': form, 'error': bmi_interpretation['Invalid height']})\n            if weight <= 0:\n                return render(request, 'bmi_calculator.html', {'form':form, 'error': bmi_interpretation['Invalid weight']})\n            bmi = weight / (height * height)\n            category = next((k for k, v in bmi_category.items() if bmi < v), None)\n            interpretation = bmi_interpretation[category]\n            return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'interpretation': interpretation})\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form})\n\ndef advice(request):\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html>\n<head><title>Advice</title></head>\n<body id=\"advice-body\" class=\"advice-page\">\n    <h1 id=\"advice-title\" class=\"title\">Health Advice Based on Your BMI</h1>\n    <div id=\"advice-content\" class=\"content\">\n    <!-- Content will be dynamically populated here -->\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body id=\"bmi-body\" class=\"bmi-page\">\n    <h1 id=\"bmi-title\" class=\"title\">BMI Calculator</h1>\n    <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"weight-field\" class=\"form-field\">{{ form.weight.label_tag }} {{ form.weight }}</div>\n        <div id=\"height-field\" class=\"form-field\">{{ form.height.label_tag }} {{ form.height }}</div>\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Calculate</button>\n        {% if error %}\n            <p id=\"error-message\" class=\"error-message\">{{ error }}</p>\n        {% endif %}\n        {% if bmi %}\n            <div id=\"results\" class=\"results\">\n                <p id=\"bmi-value\" class=\"bmi-value\">Your BMI: {{ bmi|floatformat:2 }}</p>\n                <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">{{ interpretation }}</p>\n            </div>\n        {% endif %}\n    </form>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html>\n<head><title>Homepage</title></head>\n<body id=\"home-body\" class=\"home-page\">\n    <h1 id=\"home-title\" class=\"title\">Welcome to the BMI Calculator</h1>\n    <p id=\"home-intro\" class=\"intro\">Calculate your Body Mass Index (BMI) to learn more about your health.</p>\n    <a id=\"bmi-link\" class=\"bmi-link\" href=\"{% url 'bmi_calculator' %}\">Go to BMI Calculator</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n# ... (rest of the settings.py as provided before)"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', min_value=0.01)\n    source_currency = forms.ChoiceField(label='Source Currency', choices=CURRENCY_CHOICES)\n    target_currency = forms.ChoiceField(label='Target Currency', choices=CURRENCY_CHOICES)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=20, decimal_places=10, verbose_name='Rate')\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Datetime')\n\n    def __str__(self):\n        return f\"{self.source_currency} to {self.target_currency} at {self.rate} on {self.datetime}\"\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport datetime\n\nfrom django.shortcuts import render, redirect\nfrom django.views.generic import TemplateView\nfrom matplotlib import pyplot as plt\nimport io\nimport base64\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated_rate(source_currency, target_currency):\n    # Simulate API call - replace in production\n    usd_base = {\n        'USD': 1.00, 'EUR': 0.85, 'GBP': 0.75, 'JPY': 110.00,\n        'AUD': 1.35, 'CNY': 7.00, 'CAD': 1.25, 'CHF': 0.92\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / usd_base.get(source_currency, 1) * usd_base.get(target_currency, 1))\n\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n\n            rate = get_updated_rate(source_currency, target_currency)\n            converted_amount = amount * rate\n            \n            CurrencyConvertRateModel.objects.create(\n                source_currency=source_currency,\n                target_currency=target_currency,\n                rate=rate\n            )\n\n            return render(request, self.template_name, {'form': form, 'converted_amount': converted_amount, 'rate': rate})\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        plot_data = self.plot_chart('USD', 'EUR') # Example currencies\n        return render(request, self.template_name, {'chart': plot_data})\n\n    @staticmethod\n    def plot_chart(source_currency, target_currency):\n        dates = [datetime.datetime.now() - datetime.timedelta(days=i) for i in range(7)]\n        rates = [get_updated_rate(source_currency, target_currency) for _ in range(7)]\n        \n        plt.plot(dates, rates)\n        plt.xlabel('Date')\n        plt.ylabel('Rate')\n        plt.title(f'{source_currency} to {target_currency} Exchange Rate')\n        \n        buffer = io.BytesIO()\n        plt.savefig(buffer, format='png')\n        buffer.seek(0)\n        image_png = buffer.getvalue()\n        buffer.close()\n        graphic = base64.b64encode(image_png)\n        graphic = graphic.decode('utf-8')\n        plt.close()\n        return graphic\n\ndef info_view(request):  # Changed function name to snake_case\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-04 03:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=3, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=3, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=10, max_digits=20, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n</head>\n<body>\n    <div id=\"trends-container\" class=\"trends-container\">\n      {% if chart %}\n        <img src=\"data:image/png;base64,{{ chart }}\" alt=\"Exchange Rate Trend Chart\" id=\"trend-chart\" class=\"trend-chart\">\n      {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"converter-container\">\n        <h1 id=\"converter-title\">Currency Converter</h1>\n        <form method=\"post\" id=\"converter-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"convert-button\">Convert</button>\n        </form>\n        {% if converted_amount %}\n            <div id=\"results-container\" class=\"results-container\">\n                <p id=\"converted-amount-label\">Converted Amount: <span id=\"converted-amount-value\">{{ converted_amount }}</span></p>\n                <p id=\"exchange-rate-label\">Exchange Rate: <span id=\"exchange-rate-value\">{{ rate }}</span></p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "info.html", "path": "example_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>Information</title>\n</head>\n<body>\n    <div id=\"info-container\" class=\"info-container\">\n        <h1 id=\"info-title\">Information About Currency Converter</h1>\n         <!-- Add your information content here -->\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong secret key in production\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView, info_view\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', info_view, name='info'),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.views import View\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = \"\"\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return \"Please select at least one character set.\"\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    generated_password = \"\"\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase')\n        include_lowercase = request.POST.get('lowercase')\n        include_numbers = request.POST.get('numbers')\n        include_symbols = request.POST.get('symbols')\n\n        generated_password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n\n    return render(request, 'generator.html', {'generated_password': generated_password})\n\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n}\nh1 {\n    color: #333;\n}\n#copy-message {\n    display: none; /* Initially hidden */\n    color: green;\n    margin-top: 10px;  /* Space between the password and message */\n}\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"about-us-container\" class=\"content-container\">\n        <h1>About Us</h1>\n        <p>This is the about us page for the password generator.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <div id=\"generator-container\" class=\"content-container\">\n    <h1>Password Generator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" name=\"length\" id=\"length\" min=\"1\" max=\"100\" value=\"12\"><br><br>\n\n        <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" checked>\n        <label for=\"uppercase\">Uppercase</label><br>\n\n        <input type=\"checkbox\" name=\"lowercase\" id=\"lowercase\" checked>\n        <label for=\"lowercase\">Lowercase</label><br>\n\n        <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" checked>\n        <label for=\"numbers\">Numbers</label><br>\n\n        <input type=\"checkbox\" name=\"symbols\" id=\"symbols\" checked>\n        <label for=\"symbols\">Symbols</label><br><br>\n\n        <button type=\"submit\">Generate Password</button>\n    </form>\n        <p>Your password is: <span id=\"password\">{{ generated_password }}</span></p>\n       <div id=\"copy-message\"></div>\n        {% if generated_password %}\n            <button id=\"copy-button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"content-container\">\n        <h1>Welcome to the Password Generator!</h1>\n        <a href=\"/generator/\">Generate a Password</a>\n        <br>\n        <a href=\"/about-us/\">About Us</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # You can customize password validation here if needed\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        if data:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=10,\n                border=4,\n            )\n            qr.add_data(data)\n            qr.make(fit=True)\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n            buffer = io.BytesIO()\n            img.save(buffer, 'PNG')\n            img_str = base64.b64encode(buffer.getvalue()).decode()\n            return render(request, 'qr_app/generate.html', {'qr_code': img_str})\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        if data:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=10,\n                border=4,\n            )\n            qr.add_data(data)\n            qr.make(fit=True)\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n            response = HttpResponse(content_type='image/png')\n            response['Content-Disposition'] = f'attachment; filename=\"qrcode.png\"'\n            img.save(response, 'PNG')\n            return response\n\n    return HttpResponse(\"No data provided for download.\")\n\n\ndef about(request):\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"about-container\">\n        <h1>About the QR Code Generator</h1>\n        <p>This is a simple QR code generator built with Django. It allows you to create QR codes from any text data.</p>\n        <h2>FAQ</h2>\n        <p>How does it work? Enter text, click generate, and download your QR code!</p>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select, button {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n            box-sizing: border-box; /* Include padding and border in element's total width and height */\n        }\n\n        button {\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n\n        #qr-code-display{\n            max-width: 300px;\n        }\n\n        img {\n            width: 100%;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"generate-form\" class=\"generate-form\">\n        <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <label for=\"data\">Data:</label>\n            <input type=\"text\" id=\"data\" name=\"data\" required>\n            <button type=\"submit\">Generate QR Code</button>\n        </form>\n\n        <div id=\"qr-code-display\">\n          {% if qr_code %}\n            <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"Generated QR Code\">\n            <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n                {% csrf_token %}\n                <input type=\"hidden\" name=\"data\" value=\"{{ data }}\">\n                <button type=\"submit\">Download</button>\n            </form>\n          {% endif %}\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1>Welcome to the QR Code Generator</h1>\n        <a href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a><br>\n        <a href=\"{% url 'about' %}\">About Us</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong secret key in production\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n        elif 'file_upload' in request.FILES:\n            uploaded_file = request.FILES['file_upload']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            filepath = fs.path(filename)\n            with open(filepath, 'r') as f:\n                markdown_text = f.read()\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n\n    return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-section\" class=\"about-content\">\n        <h1>About this Markdown to HTML Converter</h1>\n        <p>This is a simple web application that allows you to convert Markdown text to HTML. You can either paste your Markdown directly into the text area or upload a Markdown file.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-section\" class=\"convert-content\">\n        <h1>Convert Markdown to HTML</h1>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" name=\"markdown_text\" class=\"markdown-input\" rows=\"10\" cols=\"50\"></textarea><br>\n            <input type=\"file\" id=\"file-upload\" name=\"file_upload\" class=\"file-input\"><br>\n            <button type=\"submit\" id=\"convert-button\" class=\"convert-button\">Convert</button>\n        </form>\n        {% if html %}\n            <div id=\"html-output\" class=\"html-output\">\n                {{ html | safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-section\" class=\"home-content\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n        <ul>\n            <li><a href=\"{% url 'convert' %}\">Convert Markdown</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item, \n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView, UpdateView\nfrom .models import TodoList, TodoItem\nfrom .forms import TodoListForm, TodoItemForm\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n    context_object_name = 'todo_lists'  # Recommended: Use context_object_name\n\n    def post(self, request, *args, **kwargs):\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list')\n        return render(request, self.template_name, {'form': form})\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\nclass TodoListUpdate(UpdateView):\n    model = TodoList\n    form_class = TodoListForm\n    template_name = 'edit_todo.html'\n    success_url = '/todos/'\n\nedit_todo = TodoListUpdate.as_view() # Use class based view for update\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n    context_object_name = 'tasks'\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        context['form'] = TodoItemForm()\n        return context\n\n    def post(self, request, *args, **kwargs):\n        todolist_pk = self.kwargs['pk']  # corrected retrieval\n        todolist = get_object_or_404(TodoList, pk=todolist_pk)\n        form = TodoItemForm(request.POST)\n        if form.is_valid():\n            new_task = form.save(commit=False)  # Prevent immediate save to DB\n            new_task.todolist = todolist\n            new_task.save()\n            return redirect('view_todo_item', pk=todolist_pk) # Redirect to correct view\n        return render(request, self.template_name, {'form': form, 'todolist': todolist})\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk  # Get TodoList id\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todolist_pk)  # Redirect to tasks.html\n\nclass TodoItemUpdate(UpdateView):\n    model = TodoItem\n    form_class = TodoItemForm\n    template_name = 'edit_todo_item.html'\n    success_url = '/todos/'\n\n    def get_success_url(self):\n        return redirect('view_todo_item', pk=self.object.todolist.pk).url # Redirect to the tasks view\n\nedit_todo_item = TodoItemUpdate.as_view() # Use class based view for update\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todo_item.todolist.pk)  # Redirect back to task view\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        all_tasks = TodoItem.objects.all()\n        completed_tasks = all_tasks.filter(completed=True)\n        completion_rate = (completed_tasks.count() / all_tasks.count()) * 100 if all_tasks.count() else 0\n\n        # Calculate distribution of tasks across lists\n        task_distribution = {}\n        for todolist in TodoList.objects.all():\n            task_distribution[todolist.title] = todolist.todoitem_set.count() # related_name would make this cleaner\n        \n        context['completion_rate'] = completion_rate\n        context['task_distribution'] = task_distribution\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, TodoItem\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['title', 'description']\n\nclass TodoItemForm(forms.ModelForm):\n    class Meta:\n        model = TodoItem\n        fields = ['title', 'description']"}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"analysis-container\" class=\"analysis-container\">\n      <canvas id=\"completion-chart\" class=\"chart\"></canvas>\n        <canvas id=\"distribution-chart\" class=\"chart\"></canvas>\n    </div>\n  <script>\n    const completionRate = {{ completion_rate }};\n    const taskDistribution = {{ task_distribution|safe }};\n\n    // Completion Rate Chart\n    const ctxCompletion = document.getElementById('completion-chart').getContext('2d');\n    new Chart(ctxCompletion, {\n        type: 'pie',\n        data: {\n          labels: ['Completed', 'Incomplete'],\n          datasets: [{\n            data: [completionRate, 100 - completionRate],\n            backgroundColor: ['#4CAF50', '#f44336'],\n          }]\n        },\n        options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Task Completion Rate'\n              }\n            }\n        }\n      });\n\n        // Task Distribution Chart\n      const ctxDistribution = document.getElementById('distribution-chart').getContext('2d');\n      new Chart(ctxDistribution, {\n        type: 'bar',\n          data: {\n            labels: Object.keys(taskDistribution),\n            datasets: [{\n              label: 'Number of Tasks',\n              data: Object.values(taskDistribution),\n              backgroundColor: 'rgba(54, 162, 235, 0.8)',\n            }]\n          },\n          options: {\n            responsive: true,\n            maintainAspectRatio: false,\n            plugins: {\n              title: {\n                display: true,\n                text: 'Task Distribution Across Lists'\n              }\n            }\n          }\n    });\n  </script>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"nav-link\">Return Home</a>\n</body>\n</html>\n"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <div id=\"edit-todo-container\" class=\"form-container\">\n        <form method=\"post\" id=\"edit-todo-form\">\n          {% csrf_token %}\n          {{ form.as_p }}\n          <button type=\"submit\" id=\"submit-edit\">Save Changes</button>\n      </form>\n    </div>\n  <a href=\"{% url 'todo_list' %}\" id=\"back-link\" class=\"nav-link\">Back to Todo Lists</a>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <div id=\"edit-item-container\" class=\"form-container\">\n      <form method=\"post\" id=\"edit-item-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-edit-item\">Save Changes</button>\n      </form>\n    </div>\n    <a href=\"{% url 'view_todo_item' todolist.pk %}\" id=\"back-to-task-link\" class=\"nav-link\">Back to Task List</a>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\">Welcome to Your Todo App</h1>\n      <a href=\"{% url 'todo_list' %}\" id=\"todo-list-link\" class=\"nav-link\">View Todo Lists</a> <br>\n      <a href=\"{% url 'analysis' %}\" id=\"analysis-link\" class=\"nav-link\">View Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n  <div id=\"task-list-container\" class=\"task-container\">\n    <h2 id=\"list-title\">{{ todolist.title }}</h2>\n    <ul id=\"task-list\">\n      {% for task in tasks %}\n      <li id=\"task-{{ task.id }}\" class=\"task-item\">\n          <input type=\"checkbox\" id=\"complete-{{ task.id }}\" class=\"complete-checkbox\" {% if task.completed %}checked{% endif %} onclick=\"window.location.href='{% url 'complete_todo_item' task.pk %}'\" />\n          <span id=\"task-title-{{ task.id }}\" class=\"{% if task.completed %}completed-task{% endif %}\">{{ task.title }}</span>\n          <a href=\"{% url 'edit_todo_item' task.pk %}\" id=\"edit-{{ task.id }}\" class=\"edit-link\">Edit</a>\n          <a href=\"{% url 'delete_todo_item' task.pk %}\" id=\"delete-{{ task.id }}\" class=\"delete-link\">Delete</a>\n      </li>\n      {% endfor %}\n    </ul>\n      <h3>Add New Task</h3>\n    <form method=\"post\" id=\"add-task-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-task\">Add Task</button>\n    </form>\n  </div>\n  <a href=\"{% url 'todo_list' %}\" id=\"back-to-list-link\" class=\"nav-link\">Back to Todo Lists</a>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body>\n    <div id=\"todo-list-container\" class=\"list-container\">\n        <h1 id=\"list-page-title\">Todo Lists</h1>\n      <ul id=\"todo-list\">\n          {% for todo in todo_lists %}\n          <li id=\"list-item-{{ todo.id }}\" class=\"todo-list-item\"> \n              <a href=\"{% url 'view_todo_item' todo.pk %}\" id=\"view-{{ todo.id }}\" class=\"view-link\">{{ todo.title }}</a>\n              <a href=\"{% url 'edit_todo' todo.pk %}\" id=\"edit-list-{{ todo.id }}\" class=\"edit-link\">Edit</a>\n              <a href=\"{% url 'delete_todo' todo.pk %}\" id=\"delete-list-{{ todo.id }}\" class=\"delete-link\">Delete</a>\n          </li>\n          {% endfor %}\n      </ul>\n\n      <div id=\"add-list-form-container\" class=\"form-container\">\n          <h3>Create New Todo List</h3>\n          <form method=\"post\" id=\"add-list-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"submit-new-list\">Create List</button>\n          </form>\n      </div>\n    </div>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"nav-link\">Return Home</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main function to execute Django commands\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    date = models.DateField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return f'Support request from {self.name} ({self.email})'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('signup/', views.SignupView.as_view(), name='signup'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),\n    path('charts/', views.ChartsView.as_view(), name='charts'),\n    path('settings/', views.SettingsView.as_view(), name='settings'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('download_report/', views.DownloadReportView.as_view(), name='download_report'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\nfrom django.contrib.auth.models import User\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    pass\n\nclass HomeView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\nclass LoginView(View):\n    def get(self, request):\n        return render(request, 'login.html')\n\n    def post(self, request):\n        # login logic\n        pass  # Replace with actual login processing\n\nclass SignupView(View):\n    def get(self, request):\n        return render(request, 'signup.html')\n\n    def post(self, request):\n        # signup logic\n        pass  # Replace with actual signup processing\n\nclass LogoutView(LoginRequiredView):\n    def get(self, request):\n        logout(request)\n        return redirect('login')  # Redirect to login page after logout\n\nclass DashboardView(LoginRequiredView):\n    def get(self, request):\n        return render(request, 'dashboard.html')\n\n    def post(self, request):\n        pass\n\nclass ChartsView(LoginRequiredView):\n    def get(self, request):\n        return render(request, 'charts.html')\n\nclass SettingsView(LoginRequiredView):\n    def get(self, request):\n        return render(request, 'settings.html')\n\n    def post(self, request):\n        pass\n\nclass SupportView(LoginRequiredView):\n    def get(self, request):\n        return render(request, 'support.html')\n\n    def post(self, request):\n        pass\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request):\n        pass\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"charts-container\" class=\"charts-container\">\n      <canvas id=\"myChart\" class=\"transaction-chart\"></canvas>\n    </div>\n    </body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n    <div id=\"dashboard-container\" class=\"dashboard-container\">\n        </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <a id=\"login-link\" class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n        <a id=\"signup-link\" class=\"nav-link\" href=\"{% url 'signup' %}\">Signup</a>\n        <a id=\"support-link\" class=\"nav-link\" href=\"{% url 'support' %}\">Support</a>\n    </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <div id=\"login-container\" class=\"login-container\">\n        <form id=\"login-form\" class=\"login-form\" method=\"post\">\n            {% csrf_token %}\n           \n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n    <div id=\"settings-container\" class=\"settings-container\">\n       \n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n    <div id=\"signup-container\" class=\"signup-container\">\n        <form id=\"signup-form\" class=\"signup-form\" method=\"post\">\n            {% csrf_token %}\n           \n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n <div id=\"support-container\" class=\"support-container\">\n       \n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'  # Or specify the fields you want\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__'  # Or specify the fields you want"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return str(self.name)\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue = models.TextField()\n\n    def __str__(self):\n        return str(self.name)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.urls import reverse_lazy\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\nclass PricingPageView(FormView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('pricing')  # Redirect to the same page after submission\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your inquiry has been submitted successfully!')\n        return super().form_valid(form)\n\nclass SupportView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('support')\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted successfully!')\n        return super().form_valid(form)\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body>\n    <div id=\"about-us-container\" class=\"about-us\">\n        <h1>About Us</h1>\n         </div>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body>\n    <div id=\"features-container\" class=\"features\">\n    <h1>Features</h1>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body>\n    <div id=\"home-container\" class=\"home\">\n        <h1>Welcome to Our Website</h1>\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body>\n    <div id=\"pricing-container\" class=\"pricing\">\n        <h1>Pricing</h1>\n        <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n         {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body>\n    <div id=\"support-container\" class=\"support\">\n        <h1>Support</h1>\n        <form id=\"support-form\" class=\"support-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n        {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    pass\n\nclass LoginForm(forms.Form):\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = '__all__'\n\nclass ActivityForm(forms.ModelForm):\n    class Meta:\n        model = Activity\n        fields = '__all__'\n\nclass ProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        exclude = ['user']  # Exclude the user field as it's handled separately\n\nclass PreferencesForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = ['dietary_preferences'] # Example; adjust as needed\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    dietary_preferences = models.CharField(max_length=255, blank=True)\n    # Add other profile fields here\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    calories = models.IntegerField()\n    date = models.DateField(default=date.today)\n    # ... other fields\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    calories_burned = models.IntegerField()\n    date = models.DateField(default=date.today)\n    # ... other fields\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(), name='logout'), # Add logout url\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_log, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_log, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\nfrom datetime import date, timedelta\n\ndef get_weekly_calorie_chart(user):\n    today = date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n    return week_data\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date, timedelta\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nfrom django.http import HttpResponseRedirect\nfrom django.urls import reverse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')  # Redirect to dashboard after signup\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n# login_view is handled by django.contrib.auth.views.LoginView now, so remove the old function from here. \n\n@login_required\ndef dashboard(request):\n    return render(request, 'dashboard.html')\n\n@login_required\ndef meal_log(request):\n    meals = Meal.objects.filter(user=request.user).order_by('-date') # Order by date descending.\n    return render(request, 'meal_log.html', {'meals': meals})\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False) # Don't save yet\n            meal.user = request.user # Set the user\n            meal.save()\n            return redirect('meal_log') # Redirect back to the meal log\n    else:\n        form = MealForm()\n    return render(request, 'add_meal.html', {'form': form})\n\n@login_required\ndef edit_meal(request, id):\n    meal = Meal.objects.get(pk=id, user=request.user) # Only the user who created can edit.\n    if request.method == 'POST':\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            form.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'edit_meal.html', {'form': form, 'meal': meal})\n\n@login_required\ndef delete_meal(request, id):\n    meal = Meal.objects.get(pk=id, user=request.user)\n    meal.delete()\n    return redirect('meal_log')\n\n@login_required\ndef activity_log(request):\n    activities = Activity.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'activity_log.html', {'activities': activities})\n\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False)\n            activity.user = request.user\n            activity.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm()\n    return render(request, 'add_activity.html', {'form': form})\n\n@login_required\ndef edit_activity(request, id):\n    activity = Activity.objects.get(pk=id, user=request.user)\n    if request.method == 'POST':\n        form = ActivityForm(request.POST, instance=activity)\n        if form.is_valid():\n            form.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm(instance=activity)\n    return render(request, 'edit_activity.html', {'form': form, 'activity': activity})\n\n@login_required\ndef delete_activity(request, id):\n    activity = Activity.objects.get(pk=id, user=request.user)\n    activity.delete()\n    return redirect('activity_log')\n\n\n@login_required\ndef settings(request):\n    return render(request, 'settings.html')\n\n@login_required\ndef meal_search(request):\n    # Implement meal searching\n    pass  # Replace with actual search logic\n\n@login_required\ndef activity_search(request):\n    # Implement activity searching\n    pass # Replace with actual search logic\n\ndef tutorials(request):\n    return render(request, 'tutorials.html')\n\n@login_required\ndef update_profile(request):\n    profile = request.user.profile # Access the profile directly\n    if request.method == 'POST':\n        form = ProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Profile updated successfully!')\n            return redirect('settings') # Redirect to settings or dashboard\n    else:\n        form = ProfileForm(instance=profile)\n    return render(request, 'update_profile.html', {'form': form})\n\n@login_required\ndef update_preferences(request):\n    profile = request.user.profile\n    if request.method == 'POST':\n        form = PreferencesForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Preferences updated successfully!')\n            return redirect('settings')\n    else:\n        form = PreferencesForm(instance=profile)\n    return render(request, 'update_preferences.html', {'form': form})\n\n@login_required\ndef weekly_calorie_chart(request):\n    chart_data = get_weekly_calorie_chart(request.user)\n    return render(request, 'weekly_calorie_chart.html', {'chart_data': chart_data})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"activity-log-container\" class=\"container\">\n    <h1>Activity Log</h1>\n    <a id=\"add-activity-button\" class=\"btn btn-primary\" href=\"{% url 'add_activity' %}\">Add Activity</a>\n    <table id=\"activity-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Activity</th>\n                <th>Calories Burned</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for activity in activities %}\n            <tr id=\"activity-row-{{ activity.id }}\">\n                <td>{{ activity.date }}</td>\n                <td>{{ activity.name }}</td>\n                <td>{{ activity.calories_burned }}</td>\n                <td>\n                    <a id=\"edit-activity-button-{{ activity.id }}\" class=\"btn btn-secondary\" href=\"{% url 'edit_activity' activity.id %}\">Edit</a>\n                    <a id=\"delete-activity-button-{{ activity.id }}\" class=\"btn btn-danger\" href=\"{% url 'delete_activity' activity.id %}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-activity-container\" class=\"container\">\n    <h1>Add Activity</h1>\n    <form id=\"add-activity-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-activity-button\" class=\"btn btn-primary\" type=\"submit\">Add Activity</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-meal-container\" class=\"container\">\n    <h1>Add Meal</h1>\n    <form id=\"add-meal-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-meal-button\" class=\"btn btn-primary\" type=\"submit\">Add Meal</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"dashboard-container\" class=\"container\">\n  <h1>Dashboard</h1>\n\n  <div id=\"welcome-message\" class=\"alert alert-success\">\n    Welcome, {{ request.user.username }}!\n  </div>\n  </div>\n{% endblock %}"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-activity-container\" class=\"container\">\n    <h1>Edit Activity</h1>\n    <form id=\"edit-activity-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-activity-button\" class=\"btn btn-primary\" type=\"submit\">Save Changes</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-meal-container\" class=\"container\">\n    <h1>Edit Meal</h1>\n    <form id=\"edit-meal-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-meal-button\" class=\"btn btn-primary\" type=\"submit\">Save Changes</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}{% endblock %}</title>\n        <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnu+Gm0cWZkB9y/vCA6cG3\" crossorigin=\"anonymous\">\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'example_app/css/styles.css' %}\">\n</head>\n<body>\n<nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <div id=\"navbar-container\" class=\"container\">\n        <a id=\"home-link\" class=\"navbar-brand\" href=\"{% url 'home' %}\">Calorie Tracker</a>\n        <div id=\"navbar-items\" class=\"collapse navbar-collapse\" >\n            <ul id=\"nav-list\" class=\"navbar-nav\">\n                {% if user.is_authenticated %}\n                    <li id=\"dashboard-link\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'dashboard' %}\">Dashboard</a></li>\n                    <li id=\"meal-log-link\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'meal_log' %}\">Meal Log</a></li>\n                    <li id=\"activity-log-link\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'activity_log' %}\">Activity Log</a></li>\n                    <li id=\"settings-link\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'settings' %}\">Settings</a></li>\n                    <li id=\"logout-link\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a></li>\n                {% else %}\n                    <li id=\"login-link\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'login' %}\">Login</a></li>\n                    <li id=\"signup-link\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'signup' %}\">Sign Up</a></li>\n                {% endif %}\n                <li id=\"help-link\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'tutorials' %}\">Help</a></li>\n\n            </ul>\n        </div>\n    </div>\n</nav>\n<main id=\"main-content\">\n<div class=\"container\">\n    {% block content %}\n    {% endblock %}\n</div>\n</main>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"container\">\n    <h1>Welcome to the Calorie Tracker!</h1>\n     <!-- Other content for the home page -->\n</div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"login-container\" class=\"container\">\n  <h1>Login</h1>\n  <form id=\"login-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"submit-login-button\" class=\"btn btn-primary\" type=\"submit\">Login</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"meal-log-container\" class=\"container\">\n    <h1>Meal Log</h1>\n    <a id=\"add-meal-button\" class=\"btn btn-primary\" href=\"{% url 'add_meal' %}\">Add Meal</a>\n\n    <table id=\"meal-table\" class=\"table\">\n        <thead>\n        <tr>\n            <th>Date</th>\n            <th>Meal</th>\n            <th>Calories</th>\n            <th>Actions</th>\n        </tr>\n        </thead>\n        <tbody>\n        {% for meal in meals %}\n        <tr id=\"meal-row-{{ meal.id }}\">\n            <td>{{ meal.date }}</td>\n            <td>{{ meal.name }}</td>\n            <td>{{ meal.calories }}</td>\n            <td>\n                <a id=\"edit-meal-button-{{ meal.id }}\" class=\"btn btn-secondary\" href=\"{% url 'edit_meal' meal.id %}\">Edit</a>\n                <a id=\"delete-meal-button-{{ meal.id }}\" class=\"btn btn-danger\" href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n            </td>\n        </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"settings-container\" class=\"container\">\n    <h1>Settings</h1>\n    <a id=\"update-profile-link\" class=\"btn btn-primary\" href=\"{% url 'update_profile' %}\">Update Profile</a>\n    <a id=\"update-preferences-link\" class=\"btn btn-primary\" href=\"{% url 'update_preferences' %}\">Update Preferences</a>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"signup-container\" class=\"container\">\n    <h1>Sign Up</h1>\n    <form id=\"signup-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-signup-button\" class=\"btn btn-primary\" type=\"submit\">Sign Up</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"tutorials-container\" class=\"container\">\n  <h1>Tutorials/Help</h1>\n\n  <p>This is the tutorials/help page. Add help content here.</p>\n</div>\n{% endblock %}"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"update-preferences-container\" class=\"container\">\n    <h1>Update Preferences</h1>\n    <form id=\"update-preferences-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-preferences-button\" class=\"btn btn-primary\" type=\"submit\">Update Preferences</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"update-profile-container\" class=\"container\">\n    <h1>Update Profile</h1>\n    <form id=\"update-profile-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-profile-button\" class=\"btn btn-primary\" type=\"submit\">Update Profile</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"weekly-calorie-chart-container\" class=\"container\">\n    <h1>Weekly Calorie Chart</h1>\n    <canvas id=\"calorieChart\"></canvas>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script>\n        const ctx = document.getElementById('calorieChart');\n        const chart_data = {{ chart_data|safe }};\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: chart_data.dates,\n                datasets: [{\n                    label: 'Calorie Intake',\n                    data: chart_data.intake,\n                    borderColor: 'rgb(255, 99, 132)',\n                    tension: 0.4\n                }, {\n                    label: 'Calories Burned',\n                    data: chart_data.expenditure,\n                    borderColor: 'rgb(54, 162, 235)',\n                    tension: 0.4\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\nLOGIN_URL = '/login/'\nLOGIN_REDIRECT_URL = '/dashboard/'\nLOGOUT_REDIRECT_URL = '/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/example_app/css/styles.css", "code": ""}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label='Upload JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    status = models.CharField(max_length=50)  # e.g., 'Passed', 'Failed', 'In Progress'\n    comments = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Review for {self.project.name}\""}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n    path('upload_json/', views.upload_json, name='upload_json'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nimport os\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\n\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        # Process review submission\n        pass  # Implement your review processing logic here\n    return render(request, 'review.html', {'project': project})\n\n\ndef upload_json(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            try:\n                json_data = json.load(form.cleaned_data['json_file'])\n                # Process json_data to create/update Project\n                messages.success(request, 'JSON file uploaded successfully!')\n                return HttpResponseRedirect('/') # Redirect to home page after upload\n            except json.JSONDecodeError:\n                messages.error(request, 'Invalid JSON file format.')\n        else:\n            messages.error(request, 'Error uploading file.')\n    else:\n        form = JSONUploadForm()\n    return render(request, 'upload_json.html', {'form': form})\n\ndef home_view(request):\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'projects': projects})\n\n\ndef about_view(request):\n    return render(request, 'about.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"content-container\">\n    <h1>About This Site</h1>\n    <p>This is a project review site where you can upload project details and reviews.</p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n          <ul>\n            <li><a href=\"{% url 'home' %}\">Home</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n          </ul>\n        </nav>\n    </header>\n<div id=\"content-wrapper\" class=\"content-wrapper\">\n{% block content %}{% endblock %}\n</div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"content-container\">\n    <h1>Projects</h1>\n    <ul id=\"project-list\" class=\"project-list\">\n        {% for project in projects %}\n            <li><a href=\"{% url 'review' project.id %}\">{{ project.name }}</a></li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'upload_json' %}\">Upload JSON</a>\n</div>\n{% endblock %}"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"content-container\">\n    <h2>Reviewing: {{ project.name }}</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <!-- Review form fields -->\n        <button type=\"submit\">Submit Review</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "upload_json.html", "path": "example_app/templates/upload_json.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"upload-json-container\" class=\"content-container\">\n    <h2>Upload JSON File</h2>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submit-json\" class=\"form-button\" type=\"submit\">Upload</button>\n        </form>\n    {% if messages %}\n    <ul class=\"messages\">\n       {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n       {% endfor %}\n    </ul>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Added STATIC_ROOT\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "/* Basic styling for the body and content container */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.content-container {\n    max-width: 900px;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.project-list{\n  list-style-type: disc;\n  margin-left: 20px;\n}\n\n.main-header{\n    background-color: #f0f0f0;\n    padding: 10px;\n}\n\n.main-nav ul {\n  list-style-type: none;\n  padding: 0;\n  margin: 0;\n  display: flex;\n}\n\n.main-nav li {\n  margin-right: 20px;\n}\n\n.messages {\n  list-style-type: none;\n  padding: 0;\n}\n\n.messages li {\n    padding: 10px;\n    margin-bottom: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.messages .success {\n    background-color: lightgreen;\n    color: green;\n    border-color: green;\n}\n.messages .error{\n    background-color: lightcoral;\n    color: red;\n    border-color: red;\n}\n"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom .models import Claim, Budget\n\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'description', 'status', 'created_at', 'operations')\n    list_filter = ('status', 'category', 'user')\n    actions = [approve_claims, reject_claims]\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/claim/{}/change/\">Edit</a> | '\\\n            '<a href=\"/admin/example_app/claim/{}/delete/\">Delete</a>',\n            obj.id, obj.id\n        )\n    operations.short_description = 'Operations'\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='approved')\n        messages.success(request, 'Selected claims approved.')\n    approve_claims.short_description = \"Approve selected claims\"\n\n    def reject_claims(self, request, queryset):\n        queryset.update(status='rejected')\n        messages.success(request, 'Selected claims rejected.')\n    reject_claims.short_description = \"Reject selected claims\"\n\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit', 'spent', 'remaining')\n\n    def spent(self, obj):\n        total_spent = Claim.objects.filter(category=obj.category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        return total_spent\n\n    def remaining(self, obj):\n        return obj.limit - self.spent(self)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\n\n\nclass Claim(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    )\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f\"Claim by {self.user.username} - {self.category} - {self.amount}\"\n\n\nclass Budget(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f\"Budget for {self.category} - {self.limit}\"\n\n    def spent(self):\n        total_spent = Claim.objects.filter(category=self.category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        return total_spent\n\n    def remaining(self):\n        return self.limit - self.spent()\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth.views import LogoutView\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', LogoutView.as_view(next_page='home'), name='logout'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget\n\ndef check_budget_limit(category, amount):\n    budget = Budget.objects.get(category=category)\n    if budget.remaining() < amount:\n        return False\n    return True"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login, authenticate\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom .utils import check_budget_limit\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('home')\n        else:\n            messages.error(request, 'Invalid username or password.')\n    return render(request, 'login.html')\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Claim submitted successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user).order_by('-created_at')\n    return render(request, 'claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be edited.')\n        return redirect('claim_status')\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            updated_claim = form.save(commit=False) \n            if check_budget_limit(updated_claim.category, updated_claim.amount):\n                updated_claim.save()\n                messages.success(request, 'Claim updated successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit would be exceeded with this change.')\n\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    claim.delete()\n    messages.success(request, 'Claim deleted successfully.')\n    return redirect('claim_status')\n\n@login_required\ndef analysis_view(request):\n    budgets = Budget.objects.all()\n    total_approved_claims = Claim.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n    return render(request, 'analysis.html', {'budgets': budgets, 'total_approved_claims': total_approved_claims})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.5 on 2025-01-26 23:19\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Analysis Report{% endblock %}\n\n{% block content %}\n    <div id=\"analysis-report\" class=\"report-container\">\n        <h2>Analysis Report</h2>\n        <div id=\"total-approved-claims\" class=\"report-section\">\n            <h3>Total Approved Claims</h3>\n            <p id=\"total-amount\" class=\"total-amount\">${{ total_approved_claims }}</p>\n        </div>\n        <div id=\"budget-utilization\" class=\"report-section\">\n            <h3>Budget Utilization</h3>\n            <table id=\"budget-table\" class=\"budget-table\">\n                <thead>\n                    <tr>\n                        <th>Category</th>\n                        <th>Limit</th>\n                        <th>Spent</th>\n                        <th>Remaining</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {% for budget in budgets %}\n                        <tr id=\"budget-row-{{ budget.id }}\" class=\"budget-row\">\n                            <td id=\"category-{{ budget.id }}\" class=\"category\">{{ budget.category }}</td>\n                            <td id=\"limit-{{ budget.id }}\" class=\"limit\">${{ budget.limit }}</td>\n                            <td id=\"spent-{{ budget.id }}\" class=\"spent\">${{ budget.spent }}</td>\n                            <td id=\"remaining-{{ budget.id }}\" class=\"remaining\">${{ budget.remaining }}</td>\n                        </tr>\n                    {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Accounting System{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n            <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                {% if user.is_authenticated %}\n                    <li><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n                    <li><a href=\"{% url 'claim_status' %}\">Claim Status</a></li>\n                    <li><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n                    <li><a href=\"{% url 'logout' %}\">Logout</a></li>\n                {% else %}\n                    <li><a href=\"{% url 'signup' %}\">Sign Up</a></li>\n                    <li><a href=\"{% url 'login' %}\">Login</a></li>\n                {% endif %}\n            </ul>\n        </nav>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n    {% if messages %}\n        <div id=\"message-container\" class=\"message-container\">\n            {% for message in messages %}\n                <div id=\"message-{{ message.tags }}\" class=\"message message-{{ message.tags }}\">\n                    {{ message }}\n                </div>\n            {% endfor %}\n        </div>\n    {% endif %}\n        {% block content %}{% endblock %}\n    </main>\n    <footer id=\"main-footer\" class=\"main-footer\">\n\n    </footer>\n</body>\n</html>"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n    <div id=\"edit-claim-form\" class=\"claim-form-container\">\n        <h2>Edit Claim</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            <div id=\"category-field\" class=\"form-field\">{{ form.category.label_tag }} {{ form.category }}</div>\n            <div id=\"amount-field\" class=\"form-field\">{{ form.amount.label_tag }} {{ form.amount }}</div>\n            <div id=\"description-field\" class=\"form-field\">{{ form.description.label_tag }} {{ form.description }}</div>\n            <button id=\"submit-button\" type=\"submit\">Update Claim</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n    <div id=\"claim-status-table\" class=\"table-container\">\n        <h2>Claim Status</h2>\n        <table id=\"claim-table\">\n            <thead>\n                <tr>\n                    <th>Category</th>\n                    <th>Amount</th>\n                    <th>Description</th>\n                    <th>Status</th>\n                    <th>Created At</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for claim in claims %}\n                <tr id=\"claim-row-{{ claim.id }}\">\n                    <td id=\"category-{{ claim.id }}\">{{ claim.category }}</td>\n                    <td id=\"amount-{{ claim.id }}\">{{ claim.amount }}</td>\n                    <td id=\"description-{{ claim.id }}\">{{ claim.description }}</td>\n                    <td id=\"status-{{ claim.id }}\">{{ claim.status }}</td>\n                    <td id=\"created_at-{{ claim.id }}\">{{ claim.created_at }}</td>\n                    <td id=\"actions-{{ claim.id }}\">\n                        {% if claim.status == 'pending' %}\n                            <a href=\"{% url 'edit_claim' claim.id %}\">Edit</a>\n                            <a href=\"{% url 'delete_claim' claim.id %}\">Delete</a>\n                        {% endif %}\n                    </td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Home{% endblock %}\n\n{% block content %}\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\">Welcome to the Accounting System</h1>\n        {% if user.is_authenticated %}\n            <p>You are logged in as {{ user.username }}.</p>\n        {% else %}\n          <div id=\"auth-links\">\n            <a href=\"{% url 'signup' %}\">Sign Up</a>\n            <a href=\"{% url 'login' %}\">Login</a>\n          </div>\n        {% endif %}\n    </div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Login{% endblock %}\n\n{% block content %}\n    <div id=\"login-form-container\" class=\"login-form-container\">\n        <h2>Login</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            <div id=\"username-field\" class=\"form-field\">\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" name=\"username\" id=\"username\" required>\n            </div>\n            <div id=\"password-field\" class=\"form-field\">\n                <label for=\"password\">Password:</label>\n                <input type=\"password\" name=\"password\" id=\"password\" required>\n            </div>\n            <button id=\"login-button\" type=\"submit\">Login</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Sign Up{% endblock %}\n\n{% block content %}\n    <div id=\"signup-form-container\" class=\"signup-form-container\">\n        <h2>Sign Up</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"signup-button\" type=\"submit\">Sign up</button>\n            <p><a id=\"login-link\" href=\"{% url 'login' %}\">Already have an account? Log in</a></p>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n    <div id=\"submit-claim-form\" class=\"claim-form-container\">\n      <h2>Submit Claim</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            <div id=\"category-field\" class=\"form-field\">{{ form.category.label_tag }} {{ form.category }}</div>\n            <div id=\"amount-field\" class=\"form-field\">{{ form.amount.label_tag }} {{ form.amount }}</div>\n            <div id=\"description-field\" class=\"form-field\">{{ form.description.label_tag }} {{ form.description }}</div>\n            <button id=\"submit-button\" type=\"submit\">Submit Claim</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')  # For collecting static files\n\nLOGIN_URL = '/login/' # Added this line for login redirect\n\nLOGIN_REDIRECT_URL = '/' # Redirect after successful login\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "/* Basic Styling */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.message-container {\n  margin-bottom: 20px;\n}\n.message {\n    padding: 10px;\n    margin-bottom: 10px;\n    border-radius: 5px;\n}\n\n.message-success {\n    background-color: #d4edda;\n    border: 1px solid #c3e8cb;\n    color: #155724;\n}\n\n.message-error {\n    background-color: #f8d7da;\n    border: 1px solid #f5c6cb;\n    color: #721c24;\n}\ntable {\n    width: 100%;\n    border-collapse: collapse;\n    margin-bottom: 20px; /* Added margin */\n}\n\nth, td {\n    padding: 8px;\n    border: 1px solid #ddd;\n    text-align: left;\n}\n\nth {\n    background-color: #f2f2f2;\n}\n\n/* Form styling */\n.form-field {\n    margin-bottom: 10px;\n}\n\nlabel {\n    display: block; /* Makes labels appear on their own line */\n    margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"],\ninput[type=\"email\"],\ntextarea,\nselect {\n    width: calc(100% - 12px); /* Ensures input fields take up full width */\n    padding: 8px;\n    border: 1px solid #ddd;\n    box-sizing: border-box; /* Includes padding in width calculation */\n}\n.report-container, .table-container, .claim-form-container {\n  padding: 20px;\n}\n"}], "13": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nclass CustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = '__all__'\n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = '__all__'\n\nclass PurchaseRecordForm(forms.ModelForm):\n    class Meta:\n        model = PurchaseRecord\n        exclude = ['datetime']\n\nclass PreferredProductForm(forms.ModelForm):\n    class Meta:\n        model = PreferredProduct\n        fields = '__all__'"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    # Add other customer fields as needed\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    # Add other product fields like price, description, etc.\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    datetime = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.customer} - {self.product} - {self.quantity}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer} prefers {self.product}'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Customer URLs\n    path('', views.customer_list, name='customer_list'),\n    path('customers/add/', views.add_customer, name='add_customer'),\n    path('customers/edit/<int:pk>/', views.edit_customer, name='edit_customer'),\n    path('customers/delete/<int:pk>/', views.delete_customer, name='delete_customer'),\n\n    # Product URLs\n    path('products/', views.product_list, name='product_list'),\n    path('products/add/', views.add_product, name='add_product'),\n    path('products/edit/<int:pk>/', views.edit_product, name='edit_product'),\n    path('products/delete/<int:pk>/', views.delete_product, name='delete_product'),\n\n    path('purchases/', views.purchase_record_list, name='purchase_record_list'),\n    path('purchases/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchases/edit/<int:pk>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchases/delete/<int:pk>/', views.delete_purchase_record, name='delete_purchase_record'),\n\n    path('preferred_products/', views.preferred_products_list, name='preferred_products_list'),\n    path('preferred-products/add/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred-products/edit/<int:pk>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred-products/delete/<int:pk>/', views.delete_preferred_product, name='delete_preferred_product'),\n\n    # Sales Analysis\n    path('sales-analysis/', views.generate_sales_report, name='generate_sales_report'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom .forms import CustomerForm, ProductForm, PurchaseRecordForm, PreferredProductForm\nfrom django.db.models import Sum\n\n# Customer Views\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'customers/customer_list.html', {'customers': customers})\n\ndef add_customer(request):\n    if request.method == 'POST':\n        form = CustomerForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm()\n    return render(request, 'customers/add_customer.html', {'form': form})\n\ndef edit_customer(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        form = CustomerForm(request.POST, instance=customer)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm(instance=customer)\n    return render(request, 'customers/edit_customer.html', {'form': form, 'customer': customer})\n\ndef delete_customer(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        customer.delete()\n        return redirect('customer_list')\n    return render(request, 'customers/delete_customer_confirmation.html', {'customer': customer}) # New confirmation template\n\n# Product Views\n# ... (Similar structure as Customer Views)\n\n# Purchase Record Views\n# ... (Similar structure as Customer Views, but exclude 'datetime' in form)\n\n# PreferredProduct Views\n# ... (Similar structure as Customer Views)\n\n\ndef generate_sales_report(request):\n    report = PurchaseRecord.objects.values('product__name').annotate(\n        total_quantity=Sum('quantity')\n    )\n    return render(request, 'report.html', {'report': report})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "add_preferred_product.html", "path": "example_app/templates/add_preferred_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-preferred-product-container\" class=\"container\">\n    <h1>Add Preferred Product</h1>\n    <form method=\"post\" id=\"add-preferred-product-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn btn-primary\">Add</button>\n        <a href=\"{% url 'preferred_products_list' %}\" id=\"back-link\" class=\"btn btn-secondary\">Back to List</a> \n    </form>\n</div>\n{% endblock %}"}, {"file": "add_purchase_record.html", "path": "example_app/templates/add_purchase_record.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-purchase-record-container\" class=\"container\">\n    <h1>Add Purchase Record</h1>\n    <form method=\"post\" id=\"add-purchase-record-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn btn-primary\">Add</button>\n        <a href=\"{% url 'purchase_record_list' %}\" id=\"back-link\" class=\"btn btn-secondary\">Back to List</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CRM System</title>\n    <!-- Add Bootstrap CSS (you'll need to include the Bootstrap files) -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n<nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a class=\"navbar-brand\" href=\"#\">CRM</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul id=\"nav-links\" class=\"navbar-nav\">\n            <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'customer_list' %}\">Customers</a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'product_list' %}\">Products</a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'purchase_record_list' %}\">Purchases</a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'preferred_products_list' %}\">Preferred Products</a></li>\n            <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'generate_sales_report' %}\">Sales Report</a></li>\n        </ul>\n    </div>\n</nav>\n<div id=\"content-wrapper\" class=\"container\">\n    {% block content %}\n    {% endblock %}\n</div>\n<!-- Add Bootstrap JS and jQuery (required for some Bootstrap features) -->\n<script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n<script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.3/dist/umd/popper.min.js\"></script>\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n\n</body>\n</html>"}, {"file": "edit_preferred_product.html", "path": "example_app/templates/edit_preferred_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-preferred-product-container\" class=\"container\">\n    <h1>Edit Preferred Product</h1>\n    <form method=\"post\" id=\"edit-preferred-product-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn btn-primary\">Save Changes</button>\n        <a href=\"{% url 'preferred_products_list' %}\" id=\"back-link\" class=\"btn btn-secondary\">Back to List</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "edit_purchase_record.html", "path": "example_app/templates/edit_purchase_record.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-purchase-record-container\" class=\"container\">\n    <h1>Edit Purchase Record</h1>\n    <form method=\"post\" id=\"edit-purchase-record-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn btn-primary\">Save Changes</button>\n        <a href=\"{% url 'purchase_record_list' %}\" id=\"back-link\" class=\"btn btn-secondary\">Back to List</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "preferred_products_list.html", "path": "example_app/templates/preferred_products_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"preferred-products-list-container\" class=\"container\">\n  <h1>Preferred Products</h1>\n  <a href=\"{% url 'add_preferred_product' %}\" id=\"add-preferred-product-link\" class=\"btn btn-primary\">Add Preferred Product</a>\n  <table id=\"preferred-products-table\" class=\"table\">\n    <thead>\n      <tr>\n        <th>Customer</th>\n        <th>Product</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for preferred_product in preferred_products %}\n        <tr>\n          <td>{{ preferred_product.customer }}</td>\n          <td>{{ preferred_product.product }}</td>\n          <td>\n            <a href=\"{% url 'edit_preferred_product' preferred_product.pk %}\" id=\"edit-link-{{ preferred_product.pk }}\" class=\"btn btn-sm btn-info\">Edit</a>\n            <a href=\"{% url 'delete_preferred_product' preferred_product.pk %}\" id=\"delete-link-{{ preferred_product.pk }}\" class=\"btn btn-sm btn-danger\">Delete</a>\n          </td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n</div>\n{% endblock %}"}, {"file": "purchase_record_list.html", "path": "example_app/templates/purchase_record_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"purchase-record-list-container\" class=\"container\">\n    <h1>Purchase Records</h1>\n    <a href=\"{% url 'add_purchase_record' %}\" id=\"add-purchase-record-link\" class=\"btn btn-primary\">Add Purchase Record</a>\n    <table id=\"purchase-record-table\" class=\"table\">\n        <thead>\n        <tr>\n            <th>Customer</th>\n            <th>Product</th>\n            <th>Quantity</th>\n            <th>Datetime</th>\n            <th>Actions</th>\n        </tr>\n        </thead>\n        <tbody>\n        {% for purchase in purchases %}\n            <tr>\n                <td>{{ purchase.customer }}</td>\n                <td>{{ purchase.product }}</td>\n                <td>{{ purchase.quantity }}</td>\n                <td>{{ purchase.datetime }}</td>\n                <td>\n                    <a href=\"{% url 'edit_purchase_record' purchase.pk %}\" id=\"edit-link-{{ purchase.pk }}\" class=\"btn btn-sm btn-info\">Edit</a>\n                    <a href=\"{% url 'delete_purchase_record' purchase.pk %}\" id=\"delete-link-{{ purchase.pk }}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                </td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "report.html", "path": "example_app/templates/report.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"sales-report-container\" class=\"container\">\n    <h1>Sales Report</h1>\n    <table id=\"sales-report-table\" class=\"table\">\n        <thead>\n        <tr>\n            <th>Product</th>\n            <th>Total Quantity Sold</th>\n        </tr>\n        </thead>\n        <tbody>\n        {% for item in report %}\n            <tr>\n                <td>{{ item.product__name }}</td>\n                <td>{{ item.total_quantity }}</td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "add_customer.html", "path": "example_app/templates/customers/add_customer.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-customer-container\" class=\"container\">\n    <h1>Add Customer</h1>\n    <form method=\"post\" id=\"add-customer-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn btn-primary\">Add</button>\n        <a href=\"{% url 'customer_list' %}\" id=\"back-link\" class=\"btn btn-secondary\">Back to List</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "customer_detail.html", "path": "example_app/templates/customers/customer_detail.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"customer-detail-container\" class=\"container\">\n    <h1>Customer Details</h1>\n    <p>Name: {{ customer.name }}</p>\n    <h2>Preferred Products</h2>\n    <ul id=\"preferred-products-list\">\n        {% for preferred_product in customer.preferredproduct_set.all %}\n            <li id=\"preferred-product-item-{{ preferred_product.pk }}\">{{ preferred_product.product.name }}</li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "customer_list.html", "path": "example_app/templates/customers/customer_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"customer-list-container\" class=\"container\">\n  <h1>Customer List</h1>\n  <a href=\"{% url 'add_customer' %}\" id=\"add-customer-link\" class=\"btn btn-primary\">Add Customer</a>\n  <table id=\"customer-list-table\" class=\"table\">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for customer in customers %}\n        <tr id=\"customer-row-{{ customer.pk }}\">\n          <td>{{ customer.name }}</td>\n          <td>\n            <a href=\"{% url 'edit_customer' customer.pk %}\" id=\"edit-customer-link-{{ customer.pk }}\" class=\"btn btn-sm btn-info\">Edit</a>\n            <a href=\"{% url 'delete_customer' customer.pk %}\" id=\"delete-customer-link-{{ customer.pk }}\" class=\"btn btn-sm btn-danger\">Delete</a>\n          </td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n</div>\n{% endblock %}"}, {"file": "delete_customer_confirmation.html", "path": "example_app/templates/customers/delete_customer_confirmation.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"delete-customer-confirmation-container\" class=\"container\">\n    <h1>Delete Customer</h1>\n    <p>Are you sure you want to delete {{ customer.name }}?</p>\n    <form method=\"post\" id=\"delete-customer-form\">\n        {% csrf_token %}\n        <button type=\"submit\" id=\"confirm-delete-btn\" class=\"btn btn-danger\">Yes, Delete</button>\n        <a href=\"{% url 'customer_list' %}\" id=\"cancel-delete-btn\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "edit_customer.html", "path": "example_app/templates/customers/edit_customer.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-customer-container\" class=\"container\">\n    <h1>Edit Customer</h1>\n    <form method=\"post\" id=\"edit-customer-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn btn-primary\">Save Changes</button>\n        <a href=\"{% url 'customer_list' %}\" id=\"back-link\" class=\"btn btn-secondary\">Back to List</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "add_product.html", "path": "example_app/templates/products/add_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-product-container\" class=\"container\">\n    <h1>Add Product</h1>\n    <form method=\"post\" id=\"add-product-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn btn-primary\">Add</button>\n        <a href=\"{% url 'product_list' %}\" id=\"back-link\" class=\"btn btn-secondary\">Back to List</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "edit_product.html", "path": "example_app/templates/products/edit_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-product-container\" class=\"container\">\n    <h1>Edit Product</h1>\n    <form method=\"post\" id=\"edit-product-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-btn\" class=\"btn btn-primary\">Save Changes</button>\n        <a href=\"{% url 'product_list' %}\" id=\"back-link\" class=\"btn btn-secondary\">Back to List</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "product_detail.html", "path": "example_app/templates/products/product_detail.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"product-detail-container\" class=\"container\">\n    <h1>{{ product.name }}</h1>\n\n    <h2>Purchase Records</h2>\n    <table id=\"purchase-records-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Customer</th>\n                <th>Quantity</th>\n                <th>Date/Time</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for purchase in product.purchaserecord_set.all %}\n                <tr id=\"purchase-record-{{ purchase.id }}\">\n                    <td>{{ purchase.customer.name }}</td>\n                    <td>{{ purchase.quantity }}</td>\n                    <td>{{ purchase.datetime }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "product_list.html", "path": "example_app/templates/products/product_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"product-list-container\" class=\"container\">\n  <h1>Product List</h1>\n  <a href=\"{% url 'add_product' %}\" id=\"add-product-link\" class=\"btn btn-primary\">Add Product</a>\n  <table id=\"product-list-table\" class=\"table\">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for product in products %}\n        <tr id=\"product-row-{{ product.pk }}\">\n          <td>{{ product.name }}</td>\n          <td>\n            <a href=\"{% url 'edit_product' product.pk %}\" id=\"edit-product-link-{{ product.pk }}\" class=\"btn btn-sm btn-info\">Edit</a>\n            <a href=\"{% url 'delete_product' product.pk %}\" id=\"delete-product-link-{{ product.pk }}\" class=\"btn btn-sm btn-danger\">Delete</a>\n          </td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\nh1 {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"hello-world-body\" class=\"main-body\">\n    <h1 id=\"hello-world-heading\" class=\"page-title\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh; /* Ensure content is centered even with short content */\n    background-color: #f0f8ff;\n}\n\n.container {\n    text-align: center; /* Center content within the container */\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n\n.nav-links {\n    margin-top: 20px;\n}\n\n.nav-links a {\n    display: inline-block; /* Make links behave like block elements */\n    margin: 0 10px;  /* Add spacing between links */\n    padding: 10px 20px;  /* Add padding around the link text */\n    background-color: #4CAF50; /* Green background color */\n    color: white; /* White text color */\n    text-decoration: none; /* Remove underlines */\n    border-radius: 5px;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"hello-container\" class=\"container\">\n        <h1 id=\"hello-title\">Hello, World!</h1>\n        <div id=\"nav-links\" class=\"nav-links\">\n            <a id=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id = \"home-title\">Welcome Home!</h1>\n        <div id=\"nav-links\" class=\"nav-links\">\n            <a id = \"helloworld-link\" href=\"{% url 'helloworld' %}\">Hello World</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(\"BashCrawl is a text-based adventure game.\")\n        print(\"Navigate using commands like 'ls', 'cd', and 'inventory'.\")\n\n    def print_game_help(self):\n        print(\"Available commands: ls, cd <directory>, inventory, help, quit\")\n\n    def list_contents(self):\n        contents = self.directory_structure.get(self.current_dir, [])\n        if contents:\n            print(\" \".join(contents))\n        else:\n            print(\"Nothing here.\")\n        if self.current_dir in self.items:\n            print(self.items[self.current_dir])\n\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n            if self.current_dir in self.items and self.items[self.current_dir] not in self.inventory:\n                self.inventory.append(self.items[self.current_dir])\n                print(f\"You found the {self.items[self.current_dir]}!\")\n                del self.items[self.current_dir]  # Remove item after picking up\n        else:\n            print(\"Directory not found.\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"Inventory:\")\n            for item in self.inventory:\n                print(f\"- {item}\")\n        else:\n            print(\"Your inventory is empty.\")\n\n    def play(self):\n        while True:\n            command = input(f\"{self.current_dir} $ \").split()\n            if not command:\n                continue  # Ignore empty input\n            action = command[0]\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    print(\"Please specify a directory.\")\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                break\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\")\n\n    def main_menu(self):\n        while True:\n            self.print_main_menu()\n            choice = input(\"> \")\n            if choice == \"1\":\n                self.play()\n                break  # Exit main menu after game ends\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                print(\"Exiting game.\")\n                exit()\n            else:\n                print(\"Invalid choice.\")\n\ndef main():\n    game = BashCrawl()\n    game.main_menu()\n\nif __name__ == \"__main__\":\n    main()\n"}], "20": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'category', 'operations')  # Include 'operations' in list_display\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/blogpost/{}/change/\" class=\"edit-link\">Edit</a> '\\\n            '<a href=\"/post/{}/delete/\" class=\"delete-link\">Delete</a>', obj.id, obj.id\n        )\n    operations.short_description = 'Operations'\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'operations')\n\n    def operations(self, obj):\n        return format_html(\n             '<a href=\"/admin/example_app/category/{}/change/\" class=\"edit-link\">Edit</a> '\\\n             '<a href=\"/category/{}/delete/\" class=\"delete-link\">Delete</a>', obj.id, obj.id\n        )\n    operations.short_description = 'Operations'\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    pass\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name', 'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment', 'class': 'form-control'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        verbose_name_plural = 'Categories'\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=255)\n    content = models.TextField()\n\n    def __str__(self):\n        return f\"Comment by {self.author} on {self.post.title}\"\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return f\"Message from {self.name}\"\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "def filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, ContactUs, Comment\nfrom .forms import CommentForm, BlogPostForm\n\n\ndef home(request):\n    posts = BlogPost.objects.all()\n    if request.method == 'POST':\n        search_query = request.POST.get('search')\n        if search_query:\n            posts = posts.filter(title__icontains=search_query)\n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all()\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.post = post\n            comment.save()\n            return redirect('post_detail', pk=post.pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n\ndef archive(request):\n    posts = BlogPost.objects.all()\n    archive_data = posts.annotate(month=TruncMonth('created_at')).values('month').annotate(count=Count('id'))\n    return render(request, 'blog/archive.html', {'archive_data': archive_data})\n\n\ndef about(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        ContactUs.objects.create(name=name, email=email, message=message)\n        messages.success(request, 'Your message has been sent!')\n        return redirect('about') # Redirect to prevent form resubmission\n    return render(request, 'blog/about.html')\n\n\ndef search(request):\n    query = request.GET.get('q')\n    posts = BlogPost.objects.filter(title__icontains=query) if query else []\n    return render(request, 'blog/home.html', {'posts': posts, 'query': query})\n\n@login_required\ndef post_delete(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    post.delete()\n    return redirect('admin:example_app_blogpost_changelist')  # Redirect to admin changelist\n\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n\n@login_required\ndef category_delete(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    return redirect('admin:example_app_category_changelist')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\nheader {\n    background: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\nheader nav a {\n    color: #fff;\n    margin: 0 15px;\n    text-decoration: none;\n}\n\nmain {\n    padding: 20px;\n    background: #fff;\n    margin: 20px auto;\n    max-width: 800px;\n    border: 1px solid #ddd;\n}\n\nfooter {\n    text-align: center;\n    padding: 10px 0;\n    background: #333;\n    color: #fff;\n}\n\n.edit-link, .delete-link{\n    margin: 0 5px;\n}\n"}, {"file": "about.html", "path": "example_app/templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-container\">\n    <h1>About Me</h1>\n    <p>This is where you can write about yourself and your blog.</p>\n\n    <h2>Contact Form</h2>\n    <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"name\">Name:</label><br>\n            <input type=\"text\" id=\"name\" name=\"name\" class=\"form-control\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label><br>\n            <input type=\"email\" id=\"email\" name=\"email\" class=\"form-control\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"message\">Message:</label><br>\n            <textarea id=\"message\" name=\"message\" class=\"form-control\" rows=\"4\" required></textarea>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n    </form>\n\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "archive.html", "path": "example_app/templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"archive-container\" class=\"archive-container\">\n    <h1>Archive</h1>\n    <ul>\n    {% for item in archive_data %}\n        <li>\n            <a href=\"?year={{ item.month.year }}&month={{ item.month.month }}\">\n                {{ item.month|date:\"F Y\" }} ({{ item.count }})\n            </a>\n        </li>\n    {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n            <a href=\"{% url 'home' %}\">Home</a>\n            <a href=\"{% url 'category' %}\">Categories</a>\n            <a href=\"{% url 'archive' %}\">Archive</a>\n            <a href=\"{% url 'about' %}\">About</a>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}{% endblock %}\n    </main>\n\n    <footer id=\"main-footer\" class=\"main-footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "category.html", "path": "example_app/templates/blog/category.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-list-container\" class=\"category-list-container\">\n    <h1>Categories</h1>\n    <ul>\n        {% for category in categories %}\n            <li>\n                <a href=\"{% url 'category_detail' category.pk %}\" id=\"category-{{ category.pk }}\" class=\"category-link\">{{ category.name }}</a>\n                 {% if user.is_authenticated %}\n                    <a href=\"{% url 'category_delete' category.pk %}\" class=\"delete-link\">Delete</a>\n                 {% endif %}\n            </li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1>Latest Posts</h1>\n\n    <form id=\"search-form\" class=\"search-form\" method=\"post\" action=\"{% url 'search' %}\">\n        {% csrf_token %}\n        <input type=\"text\" id=\"search\" name=\"search\" placeholder=\"Search...\" class=\"search-input\">\n        <button type=\"submit\" class=\"search-button\">Search</button>\n    </form>\n\n    <div id=\"post-list\" class=\"post-list\">\n    {% for post in posts %}\n        <article id=\"post-{{ post.id }}\" class=\"post\">\n            <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2>\n            <p>{{ post.content|truncatewords:50 }}</p>\n            <small>Category: <a href=\"{% url 'category_detail' post.category.pk %}\">{{ post.category }}</a></small>\n            {% if user.is_authenticated %}\n                <a href=\"{% url 'post_delete' post.pk %}\" class=\"delete-link\">Delete</a>\n            {% endif %}\n        </article>\n    {% endfor %}\n    </div>\n</div>\n{% endblock %}"}, {"file": "post_detail.html", "path": "example_app/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n    <article id=\"post-detail-{{ post.id }}\" class=\"post-detail\">\n        <h1 id=\"post-title\">{{ post.title }}</h1>\n        <div id=\"post-content\">{{ post.content }}</div>\n\n        <h2 id=\"comment-section-title\">Comments</h2>\n        <div id=\"comments-container\">\n            {% for comment in comments %}\n                <div id=\"comment-{{comment.id}}\" class=\"comment\">\n                    <strong>{{ comment.author }}</strong>\n                    <p>{{ comment.content }}</p>\n                </div>\n            {% endfor %}\n\n             <form id=\"comment-form\" method=\"post\" class=\"comment-form\">\n                 {% csrf_token %}\n                {{ form.as_p }}\n                <button type=\"submit\">Add Comment</button>\n             </form>\n        </div>\n    </article>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n\nLOGIN_URL = '/admin/login/'  # Or another URL for your login view\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "category_detail.html", "path": "example_app/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-detail-container\" class=\"category-detail-container\">\n    <h1>{{ category.name }}</h1>\n\n    <div id=\"category-posts-list\" class=\"category-posts-list\">\n        {% for post in posts %}\n            <article id=\"post-{{ post.id }}\" class=\"post\">\n                <h2><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h2>\n                <p>{{ post.content|truncatewords:50 }}</p>\n            </article>\n        {% empty %}\n        <p id=\"no-posts-message\">No posts in this category yet.</p>\n        {% endfor %}\n    </div>\n</div>\n{% endblock %}"}]}