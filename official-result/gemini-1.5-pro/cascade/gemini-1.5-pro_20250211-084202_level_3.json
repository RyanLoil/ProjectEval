{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Your Weight (kg)', min_value=0, required=True)\n    height = forms.FloatField(label='Your Height (cm)', min_value=0, required=True)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\",\n    \"Invalid weight\": \"The weight can't be less than 0.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height'] / 100  # Convert cm to meters\n            if height > 0 and weight > 0:\n                bmi = weight / (height * height)\n                category = next((k for k, v in bmi_category.items() if bmi < v), None)\n                interpretation = bmi_interpretation[category]\n                return render(request, 'bmi_calculator.html', {'bmi': bmi, 'interpretation': interpretation, 'form': form})\n            elif height <= 0:\n                return render(request, 'bmi_calculator.html', {'error': bmi_interpretation['Invalid height'], 'form': form})\n            else:\n                return render(request, 'bmi_calculator.html', {'error': bmi_interpretation['Invalid weight'], 'form': form})\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form})\n\ndef advice(request):\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html>\n<head><title>Advice</title></head>\n<body id=\"advice-page\" class=\"advice-page\">\n    <!-- Content for advice page goes here -->\n    <p>This is the advice page.</p>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body id=\"bmi-calculator-page\" class=\"bmi-page\">\n    <div id=\"bmi-form-container\" class=\"form-container\">\n        <form method=\"post\" id=\"bmi-form\" class=\"bmi-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"calculate-button\">Calculate</button>\n        </form>\n        {% if bmi %}\n            <p id=\"bmi-result\">Your BMI: {{ bmi }}</p>\n            <p id=\"bmi-interpretation\">{{ interpretation }}</p>\n        {% endif %}\n        {% if error %}\n            <p id=\"error-message\" class=\"error-message\">{{ error }}</p>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html>\n<head><title>Homepage</title></head>\n<body id=\"homepage\" class=\"home-page\">\n  <div id=\"homepage-content\">\n    <p>Welcome to the BMI Calculator!</p>\n    <a href=\"{% url 'bmi_calculator' %}\" id=\"bmi-calculator-link\">Go to BMI Calculator</a>\n    <a href=\"{% url 'advice' %}\" id=\"advice-link\">Go to Advice Page</a>\n  </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', min_value=0.01)\n    source_currency = forms.ChoiceField(label='Source Currency', choices=CURRENCY_CHOICES)\n    target_currency = forms.ChoiceField(label='Target Currency', choices=CURRENCY_CHOICES)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    \"\"\"\n    Model for currency rate record\n    \"\"\"\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=10, decimal_places=6, verbose_name='Rate')\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Datetime')\n\n    def __str__(self):\n        return f\"{self.source_currency} to {self.target_currency} - {self.rate} - {self.datetime}\"\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import base64\nimport datetime\nimport io\nimport random\n\nfrom django.shortcuts import render, redirect\nfrom django.utils import timezone\nfrom django.views.generic import TemplateView\nfrom matplotlib import pyplot as plt\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated_rate(source_currency, target_currency):\n    # In real app, replace with API call\n    USD_BASE = {\n        'USD': 1.00, 'EUR': 0.85, 'GBP': 0.75, 'JPY': 110.00, \n        'AUD': 1.35, 'CNY': 7.00, 'CAD': 1.25, 'CHF': 0.92\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            rate = get_updated_rate(source_currency, target_currency)\n            converted_amount = amount * rate\n            CurrencyConvertRateModel.objects.create(\n                source_currency=source_currency, target_currency=target_currency, rate=rate\n            )\n            return render(request, self.template_name, {'form': form, 'converted_amount': converted_amount, 'rate': rate})\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        return render(request, self.template_name)\n\n\ndef plot_chart(source_currency, target_currency):\n    # Placeholder for plotting logic\n    plt.plot([1, 2, 3, 4])\n    plt.ylabel('some numbers')\n    buf = io.BytesIO()\n    plt.savefig(buf, format='png')\n    buf.seek(0)\n    string = base64.b64encode(buf.read())\n    uri = 'data:image/png;base64,' + urllib.parse.quote(string)\n    return uri\n\n\ndef info_view(request):  # Corrected function name\n    return render(request, 'info.html')\n\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-04 03:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=3, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=3, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=6, max_digits=10, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n</head>\n<body>\n  <div id=\"trends-container\" class=\"trends-container\">\n    {% if chart_uri %}\n      <img id=\"chart-image\" class=\"chart-image\" src=\"{{ chart_uri }}\" alt=\"Exchange Rate Trends Chart\">\n    {% else %}\n      <p id=\"no-data-message\" class=\"no-data-message\">No data available to generate the chart.</p>\n    {% endif %}\n  </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"converter-container\">\n        <h1 id=\"converter-title\" class=\"converter-title\">Currency Converter</h1>\n        <form id=\"converter-form\" class=\"converter-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"convert-button\" class=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n        {% if converted_amount %}\n            <div id=\"results-container\" class=\"results-container\">\n                <p id=\"converted-amount-label\" class=\"converted-amount-label\">Converted Amount: <span id=\"converted-amount-value\" class=\"converted-amount-value\">{{ converted_amount }}</span></p>\n                <p id=\"rate-label\" class=\"rate-label\">Exchange Rate: <span id=\"rate-value\" class=\"rate-value\">{{ rate }}</span></p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView, info_view\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', info_view, name='info'),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "info.html", "path": "example_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Info</title>\n</head>\n<body>\n    <div id=\"info-container\" class=\"info-container\">\n      <h1 id=\"info-title\" class=\"info-title\">Information</h1>\n      <p>This is a simple currency converter application.</p>\n    </div>\n</body>\n</html>\n"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.views import View\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return 'Please select at least one character type.'\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    generated_password = None\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase', False)\n        include_lowercase = request.POST.get('lowercase', False)\n        include_numbers = request.POST.get('numbers', False)\n        include_symbols = request.POST.get('symbols', False)\n\n        generated_password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)  \n\n    return render(request, 'generator.html', {'generated_password': generated_password})\n\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n#copy-message { display: none; color: green; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('generated-password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <h1 id=\"about-us-title\">About Us</h1>\n    <p id=\"about-us-content\">Learn about our mission and the team behind this amazing password generator!</p>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <h1 id=\"generator-title\">Password Generator</h1>\n    <form method=\"post\" id=\"generator-form\">\n        {% csrf_token %}\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" name=\"length\" id=\"length\" value=\"12\" min=\"1\" max=\"100\"><br><br>\n\n        <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" value=\"True\">\n        <label for=\"uppercase\">Include Uppercase</label><br>\n\n        <input type=\"checkbox\" name=\"lowercase\" id=\"lowercase\" value=\"True\">\n        <label for=\"lowercase\">Include Lowercase</label><br>\n\n        <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" value=\"True\">\n        <label for=\"numbers\">Include Numbers</label><br>\n\n        <input type=\"checkbox\" name=\"symbols\" id=\"symbols\" value=\"True\">\n        <label for=\"symbols\">Include Symbols</label><br><br>\n\n        <button type=\"submit\" id=\"generate-button\">Generate Password</button>\n    </form>\n\n    {% if generated_password %}\n        <p>Your generated password:</p>\n        <p id=\"generated-password\">{{ generated_password }}</p>\n        <button onclick=\"copyToClipboard()\" id=\"copy-button\">Copy to Clipboard</button>\n        <span id=\"copy-message\"></span>\n    {% endif %}\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <h1 id=\"home-title\">Welcome to the Password Generator!</h1>\n    <a href=\"/generator/\" id=\"generate-link\">Generate a Password</a>\n    <a href=\"/about-us/\" id=\"about-us-link\">About Us</a>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render\nfrom django.urls import reverse\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n        buffered = io.BytesIO()\n        img.save(buffered, format=\"PNG\")\n        img_str = base64.b64encode(buffered.getvalue()).decode()\n\n        context = {'qr_code': img_str}\n        return render(request, 'qr_app/generate.html', context)\n    return render(request, 'qr_app/generate.html')\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n        # Generate QR code (same logic as in generate_qr_code)\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )        \n        qr.add_data(data)\n        qr.make(fit=True)\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n        response = HttpResponse(content_type='image/png')\n        response['Content-Disposition'] = f'attachment; filename=\"qr_code.png\"'\n        img.save(response, 'PNG')\n        return response\n    return HttpResponseRedirect(reverse('generate_qr_code'))\n\n\ndef about(request):\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"about-container\">\n        <h1>About the QR Code Generator</h1>\n        <p>This simple tool allows you to generate QR codes for any text data.</p>\n        <p>Enter the data you wish to encode, customize the colors, and download your QR code.</p>\n\n        <h2>Frequently Asked Questions</h2>\n        <p>...</p>\n\n        <h2>Privacy Policy</h2>\n        <p>...</p>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input, select, button {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50; /* Green */\n            border: none;\n            color: white;\n            padding: 15px 32px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 16px;\n            cursor: pointer;\n        }\n        img{\n            display: block;\n            margin-left: auto;\n            margin-right: auto;\n            width: 50%;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"generate-container\" class=\"generate-container\">\n        <h1>QR Code Generator</h1>\n        <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <label for=\"data\">Data:</label>\n            <input type=\"text\" id=\"data\" name=\"data\" required>\n\n            <label for=\"fill_color\">Fill Color:</label>\n            <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n\n            <label for=\"back_color\">Background Color:</label>\n            <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\">\n            <button type=\"submit\">Generate</button>\n        </form>\n        {% if qr_code %}\n            <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n            <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n                {% csrf_token %}\n                <input type=\"hidden\" id=\"data\" name=\"data\" value=\"{{ data }}\">\n                <input type=\"hidden\" name=\"fill_color\" value=\"{{ fill_color }}\">\n                <input type=\"hidden\" name=\"back_color\" value=\"{{ back_color }}\">\n                <button id=\"download-btn\" type=\"submit\">Download</button>\n            </form>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1>Welcome to the QR Code Generator</h1>\n        <p>Create custom QR codes quickly and easily.</p>\n        <a href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n        <br>\n        <a href=\"{% url 'about' %}\">About Us</a>        \n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators are included by default but can be customized)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "qr_code_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()"}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n        elif 'markdown_file' in request.FILES:\n            uploaded_file = request.FILES['markdown_file']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            with open(os.path.join(settings.MEDIA_ROOT, filename), 'r') as f:\n                markdown_text = f.read()\n            html = markdown.markdown(markdown_text)  # Convert after reading\n            fs.delete(filename) #remove file after processing.\n            return render(request, 'convert.html', {'html': html})\n    return render(request, 'convert.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-section\" class=\"about-content\">\n        <h1>About this Markdown to HTML Converter</h1>\n        <p>This is a simple web application that allows you to convert Markdown text to HTML. You can either paste your Markdown directly into the text area or upload a Markdown file.  It leverages the python markdown library.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-section\" class=\"convert-content\">\n        <h1>Markdown to HTML Conversion</h1>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <label for=\"markdown_text\">Enter Markdown:</label><br>\n            <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"50\"></textarea><br><br>\n            <label for=\"markdown_file\">Or upload a Markdown file:</label>\n            <input type=\"file\" id=\"markdown_file\" name=\"markdown_file\"><br><br>\n            <input type=\"submit\" value=\"Convert\">\n        </form>\n\n        {% if html %}\n            <div id=\"html-output\" class=\"html-content\">\n                <h2>Converted HTML:</h2>\n                {{ html | safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-section\" class=\"home-content\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n        <p>This tool helps you easily convert Markdown text to HTML.  Get started by clicking one of the links below:</p>\n\n        <ul>\n            <li><a href=\"{% url 'convert' %}\">Convert Markdown</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item, \n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView\nfrom .models import TodoList, TodoItem\nfrom django.urls import reverse\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\n\ndef edit_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        todo.title = request.POST.get('title')\n        todo.description = request.POST.get('description')\n        todo.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todo': todo})\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        return context\n\n    def post(self, request, *args, **kwargs):\n        todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoItem.objects.create(todolist=todolist, title=title, description=description)\n        return redirect(reverse('view_todo_item', kwargs={'pk': todolist.pk}))\n\n\ndef delete_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = item.todolist.pk  # Get the pk of the related TodoList\n    item.delete()\n    return redirect(reverse('view_todo_item', kwargs={'pk': todolist_pk})) # Redirect back to task view\n\n\ndef edit_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        item.title = request.POST.get('title')\n        item.description = request.POST.get('description')\n        item.save()\n        return redirect(reverse('view_todo_item', kwargs={'pk': item.todolist.pk})) # Redirect back to task view\n    return render(request, 'edit_todo_item.html', {'item': item})\n\n\ndef complete_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    item.completed = not item.completed\n    item.save()\n    return redirect(reverse('view_todo_item', kwargs={'pk': item.todolist.pk}))\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        items = TodoItem.objects.all()\n        completed_count = items.filter(completed=True).count()\n        total_count = items.count()\n\n        if total_count > 0:\n            completion_rate = (completed_count / total_count) * 100\n        else:\n            completion_rate = 0\n\n        context['completion_rate'] = completion_rate\n        context['completed_count'] = completed_count\n        context['total_count'] = total_count\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"analysis-container\" class=\"analysis-container\">\n        <canvas id=\"completion-chart\" class=\"chart\"></canvas>\n    </div>\n     <div>\n        <p id=\"completion-summary\" class=\"summary\">Completed: {{ completed_count }} / {{ total_count }} ({{ completion_rate|floatformat:2 }}%)</p>\n    </div>\n\n    <script>\n        const ctx = document.getElementById('completion-chart').getContext('2d');\n        const completionRate = {{ completion_rate }};\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    data: [completionRate, 100 - completionRate],\n                    backgroundColor: ['#4CAF50', '#f44336']\n                }]\n            }\n        });\n    </script>\n\n    <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Return Home</a>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <div id=\"edit-todo-container\" class=\"edit-form-container\">\n        <form id=\"edit-todo-form\" class=\"edit-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"title\">Title:</label><br>\n            <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ todo.title }}\"><br><br>\n            <label for=\"description\">Description:</label><br>\n            <textarea id=\"description\" name=\"description\">{{ todo.description }}</textarea><br><br>\n            <input type=\"submit\" value=\"Save\">\n        </form>\n    </div>\n    <a id=\"cancel-link\" class=\"link\" href=\"{% url 'todo_list' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <div id=\"edit-item-container\" class=\"edit-form-container\">\n        <form id=\"edit-item-form\" class=\"edit-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"title\">Title:</label><br>\n            <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ item.title }}\"><br><br>\n            <label for=\"description\">Description:</label><br>\n            <textarea id=\"description\" name=\"description\">{{ item.description }}</textarea><br><br>\n            <input type=\"submit\" value=\"Save\">\n        </form>\n    </div>\n    <a id=\"cancel-link\" class=\"link\" href=\"{% url 'view_todo_item' item.todolist.pk %}\">Cancel</a>\n\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"welcome-message\" class=\"welcome\">Welcome to the Todo App</h1>\n        <a id=\"todo-list-link\" class=\"link\" href=\"{% url 'todo_list' %}\">View Todo Lists</a>\n        <a id=\"analysis-link\" class=\"link\" href=\"{% url 'analysis' %}\">View Task Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <div id=\"tasks-container\" class=\"task-container\">\n        <h2 id=\"todolist-title\" class=\"title\">{{ todolist.title }}</h2>\n\n        <ul id=\"tasks-list\" class=\"list\">\n            {% for item in object_list %}\n                <li id=\"task-item-{{ item.pk }}\" class=\"task-item\">\n                    <input type=\"checkbox\" id=\"completed-checkbox-{{ item.pk }}\" class=\"checkbox\" {% if item.completed %}checked{% endif %} onclick=\"window.location.href='{% url 'complete_todo_item' item.pk %}'\" />\n                    <span id=\"task-title-{{ item.pk }}\" class=\"task-title\">{{ item.title }}</span>\n                    <a id=\"edit-task-link-{{ item.pk }}\" class=\"edit-link\" href=\"{% url 'edit_todo_item' item.pk %}\">Edit</a>\n                    <a id=\"delete-task-link-{{ item.pk }}\" class=\"delete-link\" href=\"{% url 'delete_todo_item' item.pk %}\">Delete</a>\n                </li>\n            {% endfor %}\n        </ul>\n\n        <div id=\"new-task-form-container\" class=\"form-container\">\n            <form id=\"new-task-form\" class=\"form\" method=\"post\">\n                {% csrf_token %}\n                <label for=\"title\">New Task:</label><br>\n                <input type=\"text\" id=\"title\" name=\"title\"><br><br>\n                <label for=\"description\">Description:</label><br>\n                <textarea id=\"description\" name=\"description\"></textarea><br><br>\n                <input type=\"submit\" value=\"Add Task\">\n            </form>\n        </div>\n    </div>\n    <a id=\"back-link\" class=\"link\" href=\"{% url 'todo_list' %}\">Back to Todo Lists</a>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body>\n    <div id=\"todolist-container\" class=\"todolist-container\">\n        <h1 id=\"todolist-heading\" class=\"heading\">Todo Lists</h1>\n        <ul id=\"todolist-items\" class=\"items\">\n            {% for todolist in object_list %}\n            <li id=\"todolist-item-{{ todolist.pk }}\" class=\"list-item\">\n                <a id=\"todolist-link-{{ todolist.pk }}\" class=\"link\" href=\"{% url 'view_todo_item' todolist.pk %}\">{{ todolist.title }}</a>\n                <a id=\"edit-todo-link-{{ todolist.pk }}\" class=\"edit-link\" href=\"{% url 'edit_todo' todolist.pk %}\">Edit</a>\n                <a id=\"delete-todo-link-{{ todolist.pk }}\" class=\"delete-link\" href=\"{% url 'delete_todo' todolist.pk %}\">Delete</a>\n            </li>\n            {% endfor %}\n        </ul>\n        <div id=\"new-todolist-form-container\" class=\"form-container\">\n            <form id=\"new-todolist-form\" class=\"form\" method=\"post\">\n                {% csrf_token %}\n                <label for=\"title\">New List:</label><br>\n                <input type=\"text\" id=\"title\" name=\"title\"><br><br>\n                <label for=\"description\">Description:</label><br>\n                <textarea id=\"description\" name=\"description\"></textarea><br><br>\n                <input type=\"submit\" value=\"Create List\">\n            </form>\n        </div>\n    </div>\n    <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Return Home</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'  # Replace with a secure key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main function to execute Django commands\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    \"Model for representing the category of transactions.\"\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    \"Model for representing a financial transaction.\"\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    date = models.DateField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    description = models.TextField(blank=True, null=True)  # Add description field\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\n\nclass SupportRequest(models.Model):\n    \"Model for capturing support requests from users.\"\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Support request from {self.name} ({self.email})'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('signup/', views.SignupView.as_view(), name='signup'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),\n    path('charts/', views.ChartsView.as_view(), name='charts'),\n    path('settings/', views.SettingsView.as_view(), name='settings'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('download_report/', views.DownloadReportView.as_view(), name='download_report'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime, timedelta\n\nfrom django.contrib import messages\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\nfrom django.http import HttpResponse, HttpRequest\nfrom django.shortcuts import render, redirect\nfrom django.utils import timezone\nfrom django.views import View\n\nfrom .forms import LoginForm, SignupForm, SupportRequestForm\nfrom .models import Category, Transaction, SupportRequest\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    pass\n\n\nclass HomeView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'home.html')\n\n\nclass LoginView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        form = LoginForm()\n        return render(request, 'login.html', {'form': form})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            password = form.cleaned_data['password']\n            user = authenticate(request, username=username, password=password)\n            if user:\n                login(request, user)\n                return redirect('dashboard')  # Redirect to dashboard after successful login\n            else:\n                messages.error(request, 'Invalid username or password.')\n        return render(request, 'login.html', {'form': form})\n\n\nclass SignupView(View):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        form = SignupForm()\n        return render(request, 'signup.html', {'form': form})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        form = SignupForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n        return render(request, 'signup.html', {'form': form})\n\n\nclass LogoutView(LoginRequiredView):\n    def get(self, request):\n        logout(request)\n        return redirect('home')\n\n\nclass DashboardView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        transactions = Transaction.objects.filter(user=request.user)\n        context = {'transactions': transactions}\n        return render(request, 'dashboard.html', context)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n       # Handle adding/editing transactions\n        pass\n\n\nclass ChartsView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'charts.html')\n\n\nclass SettingsView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, 'settings.html')\n\n    def post(self, request: HttpRequest) -> HttpResponse: \n        # Handle settings update \n        pass\n\n\nclass SupportView(LoginRequiredView):\n    def get(self, request: HttpRequest) -> HttpResponse:\n        form = SupportRequestForm()\n        return render(request, 'support.html', {'form': form})\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        form = SupportRequestForm(request.POST)\n        if form.is_valid():\n            support_request = form.save()\n            return redirect('support')  # Or a thank you page\n        return render(request, 'support.html', {'form': form})\n\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request: HttpRequest) -> HttpResponse:\n        # Logic to download report (e.g., CSV)\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = 'attachment; filename=\"report.csv\"'\n\n        writer = csv.writer(response)\n        writer.writerow(['Amount', 'Category', 'Date'])\n\n        transactions = Transaction.objects.filter(user=request.user)\n        for transaction in transactions:\n            writer.writerow([transaction.amount, transaction.category, transaction.date])\n\n        return response\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\nfrom .models import SupportRequest\n\n\nclass LoginForm(forms.Form):\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput)\n\n\nclass SignupForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ('username', 'email')  # Add email to signup fields\n\n\nclass SupportRequestForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = ('name', 'email', 'message')\n"}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"charts-container\" class=\"charts-container\">\n        <canvas id=\"myChart\" class=\"chart\"></canvas>\n      </div>\n    \n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n    <div id=\"dashboard-container\" class=\"dashboard-container\">\n      </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <div id=\"login-container\" class=\"login-container\">\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Login</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n    <div id=\"settings-container\" class=\"settings-container\">\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n    <div id=\"signup-container\" class=\"signup-container\">\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Signup</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n    <div id=\"support-container\" class=\"support-container\">\n        <form id=\"support-form\" method=\"post\">\n          {% csrf_token %}\n          {{ form.as_p }}\n          <button type=\"submit\">Submit</button>\n      </form>\n      </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'  # Or specify the fields you want\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__'  # Or specify the fields you want"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue = models.TextField()\n\n    def __str__(self):\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\nclass PricingPageView(FormView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = '/pricing/'  # Redirect to the same page after submission\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your message has been sent!')\n        return super().form_valid(form)\n\nclass SupportView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = '/support/'\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted!')\n        return super().form_valid(form)\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body>\n    <div id=\"about-us-container\" class=\"about-us\">\n    \t<!-- Content of About Us Page: Display information about the team and company. -->\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body>\n    <div id=\"features-container\" class=\"features\">\n    \t<!-- Content of Features Page: List the features of AI Chatbot. -->\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body>\n    <div id=\"home-container\" class=\"home\">\n    \t<!-- Content of Home Page: Welcome message and navigation links. -->\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body>\n    <div id=\"pricing-container\" class=\"pricing\">\n        <!-- Content of Pricing Page: Display pricing plans -->\n    </div>\n    <div id=\"contact-form-container\" class=\"contact-form\">\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n        {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body>\n  <div id=\"support-container\" class=\"support\">\n    <div id=\"support-form-container\" class=\"support-form\">\n      <form method=\"post\">\n          {% csrf_token %}\n          {{ form.as_p }}\n          <button type=\"submit\">Submit</button>\n      </form>\n      {% if messages %}\n          <ul class=\"messages\">\n              {% for message in messages %}\n                  <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n              {% endfor %}\n          </ul>\n      {% endif %}\n    </div>\n\n    \t<!--  FAQ and previous support requests (Implementation omitted for brevity) -->\n  </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'  # Replace with a strong secret key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \\\n            \"available on your PYTHONPATH environment variable? Did you \" \\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label=\"Upload JSON File\")"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    review_text = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == \"POST\":\n        review_text = request.POST.get(\"review_text\")\n        Review.objects.create(project=project, review_text=review_text)\n        return redirect('home')\n    return render(request, 'review.html', {'project': project})\n\ndef home_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            try:\n                json_data = json.load(request.FILES['json_file'])\n                project, created = Project.objects.get_or_create(name=json_data['name'])\n                project.description = json_data.get('description', '')\n                project.save()\n                messages.success(request, 'Project uploaded successfully!')\n            except (json.JSONDecodeError, KeyError):\n                messages.error(request, 'Invalid JSON file format.')\n        else:\n            messages.error(request, 'Form is invalid.')\n    else:\n        form = JSONUploadForm()\n\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'form': form, 'projects': projects})\n\ndef about_view(request):\n    return render(request, 'about.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"content-container\">\n  <h1>About This Site</h1>\n  <p>This is a simple project review site built with Django.</p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n          <ul>\n            <li><a href=\"{% url 'home' %}\">Home</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n          </ul>\n        </nav>\n      </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n      <div id=\"messages-container\" class=\"messages-container\">\n          {% if messages %}\n              <ul id=\"message-list\" class=\"message-list\">\n                  {% for message in messages %}\n                      <li id=\"message-{{ forloop.counter }}\" class=\"message {{ message.tags }}\">{{ message }}</li>\n                  {% endfor %}\n              </ul>\n          {% endif %}\n      </div>\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"content-container\">\n  <h1 id=\"projects-title\">Projects</h1>\n    <ul id=\"project-list\" class=\"project-list\">\n    {% for project in projects %}\n        <li id=\"project-{{ project.id }}\" class=\"project-item\">\n            <a href=\"{% url 'review' project.id %}\">{{ project.name }}</a>\n            <p id=\"project-description-{{ project.id }}\" class=\"project-description\">{{ project.description }}</p>\n        </li>\n    {% endfor %}\n    </ul>\n    <div id=\"upload-form-container\" class=\"upload-form-container\">\n      <h2>Upload Project (JSON)</h2>\n      <form id=\"upload-form\" method=\"post\" enctype=\"multipart/form-data\">\n          {% csrf_token %}\n          {{ form.as_p }}\n          <button id=\"submit-button\" type=\"submit\">Upload</button>\n      </form>\n  </div>\n</div>\n{% endblock %}"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"content-container\">\n  <h1 id=\"review-title\">Review Project: {{ project.name }}</h1>\n  <form id=\"review-form\" method=\"post\">\n      {% csrf_token %}\n      <textarea id=\"review-text\" name=\"review_text\" rows=\"4\" cols=\"50\"></textarea><br>\n      <button id=\"submit-review\" type=\"submit\">Submit Review</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong secret key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')  # Add this line\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": ".content-container {\n    max-width: 800px;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n.project-list {  list-style-type: none; padding:0}\n.project-item{margin-bottom: 10px;}\n.project-description{font-style: italic}\n.upload-form-container{margin-top:20px;}\n.messages-container { margin-bottom: 20px; }\n.message { padding: 10px; margin-bottom: 10px; border-radius: 5px;}\n.message.success { background-color: #d4edda; border: 1px solid #c3e6cb; color: #155724; }\n.message.error { background-color: #f8d7da; border: 1px solid #f5c6cb; color: #721c24; }"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \\\n            \"available on your PYTHONPATH environment variable? Did you \" \\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim, Budget\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'status', 'created_at')\n    list_filter = ('status', 'category')\n    actions = ['approve_claims', 'reject_claims']\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='approved')\n        self.message_user(request, f'{queryset.count()} claims approved successfully.')\n\n    def reject_claims(self, request, queryset):\n        queryset.update(status='rejected')  # You might want to add a rejection reason input\n        self.message_user(request, f'{queryset.count()} claims rejected.')\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit')"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    CATEGORY_CHOICES = [\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    ]\n    STATUS_CHOICES = [\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    ]\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass Budget(models.Model):\n    CATEGORY_CHOICES = [\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    ]\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth.views import LogoutView\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', LogoutView.as_view(), name='logout'), # Added logout URL\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget\n\ndef check_budget_limit(category, amount):\n    try:\n        budget = Budget.objects.get(category=category)\n        return budget.limit >= budget.claim_set.aggregate(total=models.Sum('amount'))['total'] + amount\n    except Budget.DoesNotExist:\n        return False"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login, authenticate\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom django.urls import reverse\nfrom .utils import check_budget_limit\nfrom django.db import models # Import models\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        # ... (rest of your login_view code)\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Claim submitted successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user).order_by('-created_at')  # Order by creation date\n    return render(request, 'claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be edited.')\n        return redirect('claim_status')\n\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            updated_claim = form.save(commit=False)\n\n            if check_budget_limit(updated_claim.category, updated_claim.amount): # Check limit with updated amount\n                updated_claim.save()\n                messages.success(request, 'Claim updated successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be deleted.')\n        return redirect('claim_status')\n    \n    claim.delete()\n    messages.success(request, 'Claim deleted successfully.')\n    return redirect('claim_status')\n\n@login_required\ndef analysis_view(request):\n    approved_claims = Claim.objects.filter(status='approved').aggregate(total_approved=Sum('amount'))\n    budgets = Budget.objects.all().annotate(\n        spent=Sum('claim__amount', filter=models.Q(claim__status='approved'))\n    ).values('category', 'limit', 'spent')\n    \n    context = {\n        'total_approved': approved_claims['total_approved'] or 0,  # handle possible None value\n        'budgets': budgets\n    }\n    return render(request, 'analysis.html', context)"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.5 on 2025-01-26 23:19\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Analysis Report{% endblock %}\n\n{% block content %}\n<div id=\"analysis-container\" class=\"analysis-container\">\n    <h2 id=\"analysis-title\" class=\"analysis-title\">Analysis Report</h2>\n\n    <div id=\"total-approved-section\" class=\"section\">\n        <h3 id=\"total-approved-title\" class=\"section-title\">Total Approved Claims</h3>\n        <p id=\"total-approved-amount\" class=\"amount\">{{ total_approved }}</p>\n    </div>\n\n    <div id=\"budget-utilization-section\" class=\"section\">\n        <h3 id=\"budget-utilization-title\" class=\"section-title\">Budget Utilization</h3>\n        <table id=\"budget-table\" class=\"budget-table\">\n            <thead>\n                <tr>\n                    <th id=\"category-header\" class=\"header\">Category</th>\n                    <th id=\"limit-header\" class=\"header\">Limit</th>\n                    <th id=\"spent-header\" class=\"header\">Spent</th>\n                    <th id=\"remaining-header\" class=\"header\">Remaining</th>\n                    <th id=\"percentage-header\" class=\"header\">Percentage Used</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for budget in budgets %}\n                <tr id=\"budget-row-{{ forloop.counter }}\" class=\"budget-row\">\n                    <td id=\"category-{{ forloop.counter }}\" class=\"data\">{{ budget.category }}</td>\n                    <td id=\"limit-{{ forloop.counter }}\" class=\"data\">{{ budget.limit }}</td>\n                    <td id=\"spent-{{ forloop.counter }}\" class=\"data\">{{ budget.spent|default_if_none:0 }}</td>\n                    <td id=\"remaining-{{ forloop.counter }}\" class=\"data\">{{ budget.limit|sub:budget.spent|default_if_none:budget.limit }}</td>\n                    <td id=\"percentage-{{ forloop.counter }}\" class=\"data\">{% widthratio budget.spent|default_if_none:0 budget.limit 100 %}%</td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"base-title\" class=\"base-title\">{% block title %}Accounting System{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'example_app/css/styles.css' %}\">\n</head>\n<body id=\"base-body\" class=\"base-body\">\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <ul id=\"nav-list\" class=\"nav-list\">\n        {% if user.is_authenticated %}\n            <li id=\"home-link\" class=\"nav-item\"><a href=\"{% url 'home' %}\">Home</a></li>\n            <li id=\"submit-claim-link\" class=\"nav-item\"><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n            <li id=\"claim-status-link\" class=\"nav-item\"><a href=\"{% url 'claim_status' %}\">Claim Status</a></li>\n            <li id=\"analysis-link\" class=\"nav-item\"><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n            <li id=\"logout-link\" class=\"nav-item\"><a href=\"{% url 'logout' %}\">Logout</a></li>\n        {% else %}\n            <li id=\"signup-link\" class=\"nav-item\"><a href=\"{% url 'signup' %}\">Sign Up</a></li>\n            <li id=\"login-link\" class=\"nav-item\"><a href=\"{% url 'login' %}\">Login</a></li>\n        {% endif %}\n        </ul>\n    </nav>\n\n    <div id=\"content-container\" class=\"content-container\">\n        {% if messages %}\n        <div id=\"message-container\" class=\"message-container\">\n            <ul id=\"message-list\" class=\"message-list\">\n            {% for message in messages %}\n                <li id=\"message-{{ forloop.counter }}\" class=\"message {{ message.tags }}\">{{ message }}</li>\n            {% endfor %}\n            </ul>\n        </div>\n        {% endif %}\n\n        {% block content %}{% endblock %}\n    </div>\n\n</body>\n</html>"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n<div id=\"edit-claim-container\" class=\"edit-claim-container\">\n    <h2 id=\"edit-claim-title\" class=\"edit-claim-title\">Edit Claim</h2>\n    <form id=\"edit-claim-form\" class=\"edit-claim-form\" method=\"post\" action=\"\">\n        {% csrf_token %}\n        <div id=\"form-field-category\" class=\"form-field\">\n            <label for=\"{{ form.category.id_for_label }}\">Category:</label>\n            {{ form.category }}\n        </div>\n        <div id=\"form-field-amount\" class=\"form-field\">\n            <label for=\"{{ form.amount.id_for_label }}\">Amount:</label>\n            {{ form.amount }}\n        </div>\n        <div id=\"form-field-description\" class=\"form-field\">\n            <label for=\"{{ form.description.id_for_label }}\">Description:</label>\n            {{ form.description }}\n        </div>\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Update Claim</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n<div id=\"claim-status-container\" class=\"claim-status-container\">\n    <h2 id=\"claim-status-title\" class=\"claim-status-title\">Claim Status</h2>\n    <table id=\"claim-table\" class=\"claim-table\">\n        <thead>\n            <tr id=\"header-row\" class=\"header-row\">\n                <th id=\"category-header\" class=\"header\">Category</th>\n                <th id=\"amount-header\" class=\"header\">Amount</th>\n                <th id=\"description-header\" class=\"header\">Description</th>\n                <th id=\"status-header\" class=\"header\">Status</th>\n                <th id=\"actions-header\" class=\"header\">Actions</th>\n                <th id=\"created-at-header\" class=\"header\">Submitted</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for claim in claims %}\n            <tr id=\"claim-row-{{ forloop.counter }}\" class=\"claim-row\">\n                <td id=\"category-{{ forloop.counter }}\" class=\"data\">{{ claim.category }}</td>\n                <td id=\"amount-{{ forloop.counter }}\" class=\"data\">{{ claim.amount }}</td>\n                <td id=\"description-{{ forloop.counter }}\" class=\"data\">{{ claim.description }}</td>\n                <td id=\"status-{{ forloop.counter }}\" class=\"data\">{{ claim.status }}</td>\n                <td id=\"actions-{{ forloop.counter }}\" class=\"actions\">\n                    {% if claim.status == 'pending' %}\n                    <a id=\"edit-link-{{ claim.id }}\" class=\"action-link\" href=\"{% url 'edit_claim' claim.id %}\">Edit</a>\n                    <a id=\"delete-link-{{ claim.id }}\" class=\"action-link\" href=\"{% url 'delete_claim' claim.id %}\">Delete</a>\n                    {% endif %}\n                </td>\n                <td id=\"created-at-{{ forloop.counter }}\" class=\"data\">{{ claim.created_at }}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Home{% endblock %}\n\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1 id=\"welcome-title\">Welcome to the Accounting and Cashier Management System</h1>\n    {% if user.is_authenticated %}\n    <p id=\"logged-in-message\">You are logged in as {{ user.username }}.</p>\n    {% else %}\n    <a id=\"signup-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n    <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Login{% endblock %}\n\n{% block content %}\n<div id=\"login-container\" class=\"login-container\">\n    <h2 id=\"login-title\" class=\"login-title\">Login</h2>\n    <form id=\"login-form\" class=\"login-form\" method=\"post\" action=\"\">\n        {% csrf_token %}\n        <div id=\"form-field-username\" class=\"form-field\">\n            <label for=\"id_username\">Username:</label>\n            <input type=\"text\" name=\"username\" id=\"id_username\" required>\n        </div>\n        <div id=\"form-field-password\" class=\"form-field\">\n            <label for=\"id_password\">Password:</label>\n            <input type=\"password\" name=\"password\" id=\"id_password\" required>\n        </div>\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Login</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Signup{% endblock %}\n\n{% block content %}\n<div id=\"signup-container\" class=\"signup-container\">\n    <h2 id=\"signup-title\" class=\"signup-title\">Sign Up</h2>\n    <form id=\"signup-form\" class=\"signup-form\" method=\"post\" action=\"\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Sign Up</button>\n    </form>\n    <p id=\"login-prompt\">Already have an account? <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a></p>\n</div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n<div id=\"submit-claim-container\" class=\"submit-claim-container\">\n    <h2 id=\"submit-claim-title\" class=\"submit-claim-title\">Submit Claim</h2>\n    <form id=\"submit-claim-form\" class=\"submit-claim-form\" method=\"post\" action=\"\">\n        {% csrf_token %}\n        <div id=\"form-field-category\" class=\"form-field\">\n            <label for=\"{{ form.category.id_for_label }}\">Category:</label>\n            {{ form.category }}\n        </div>\n        <div id=\"form-field-amount\" class=\"form-field\">\n            <label for=\"{{ form.amount.id_for_label }}\">Amount:</label>\n            {{ form.amount }}\n        </div>\n        <div id=\"form-field-description\" class=\"form-field\">\n            <label for=\"{{ form.description.id_for_label }}\">Description:</label>\n            {{ form.description }}\n        </div>\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Submit Claim</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Collect static files here\nLOGIN_REDIRECT_URL = 'home' # added redirect\nLOGIN_URL = '/login/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/example_app/css/styles.css", "code": ".message-container {\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 20px;\n}\n\n.message {\n    list-style-type: none;\n    margin: 5px 0;\n}\n\n.success {\n    color: green;\n}\n\n.error {\n    color: red;\n}\n\n.claim-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n.claim-table th, .claim-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n}\n/* Styling for analysis.html */\n.analysis-container {\n    width: 80%; /* Adjust as needed */\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n}\n.section {\n    margin-bottom: 20px;\n}\n.budget-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n.budget-table th, .budget-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n}\n\n/* Add more styling as per your requirements */\n\n/* Navigation styling (example) */\n.main-nav {\n    background-color: #f0f0f0; /* Light gray background */\n    padding: 10px;\n}\n\n.nav-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex; /* Arrange items horizontally */\n    justify-content: space-around; /* Evenly distribute space */\n}\n\n.nav-item {\n    margin: 0 10px;\n}\n\n.nav-item a {\n    text-decoration: none;\n    color: #333; /* Dark gray text */\n    padding: 8px 12px;\n    border-radius: 4px; /* Rounded corners */\n    transition: background-color 0.3s ease; /* Smooth hover effect */\n}\n\n.nav-item a:hover {\n    background-color: #ddd; /* Lighter gray on hover */\n}"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"Class-based view to render the Hello World page.\"\"\"\n    def get(self, request):\n        \"\"\"Handle GET request to display Hello World.\"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\nh1 {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"hello-world-body\" class=\"main-body\">\n    <h1 id=\"hello-world-heading\" class=\"main-heading\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"hello-container\" class=\"content-container\">\n        <h1 id=\"hello-title\" class=\"title\">Hello, World!</h1>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"content-container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome Home</h1>\n         <a id=\"hello-link\" class=\"nav-link\" href=\"{% url 'helloworld' %}\">Go to Hello World</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\nSTATIC_ROOT =  os.path.join(BASE_DIR, 'staticfiles') # Added this line\n\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "\nimport os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(\"BashCrawl is a text-based adventure game.\")\n        print(\"Navigate using commands like 'cd', 'ls', and 'inventory'.\") \n\n    def print_game_help(self):\n        print(\"Available commands: ls, cd <directory>, inventory, help, quit\")\n\n    def list_contents(self):\n        items_here = self.items.get(self.current_dir, [])\n        print(\" \".join(self.directory_structure[self.current_dir] + items_here))\n\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n            print(f\"Current directory: {self.current_dir}\")\n        else:\n            print(\"Invalid directory.\")\n\n    def check_inventory(self):\n        print(\"Inventory:\")\n        if self.inventory:\n            for item in self.inventory:\n                print(f\"- {item}\")\n        else:\n            print(\"Your inventory is empty.\")\n\n    def play(self):\n        while True:\n            command = input(f\"{self.current_dir} $ \").split()\n            if not command:\n                continue\n\n            action = command[0]\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    self.change_directory(ROOT_DIR) # Go to root if no argument\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                break\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\")\n\n            # Item pickup logic\n            if self.current_dir in self.items and self.items[self.current_dir] not in self.inventory:\n                item = self.items[self.current_dir]\n                self.inventory.append(item)\n                print(f\"You found the {item}!\")\n\n    def main_menu(self):\n        while True:\n            self.print_main_menu()\n            choice = input(\"> \")\n            if choice == \"1\":\n                self.play()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                break\n            else:\n                print(\"Invalid choice.\")\n\ndef main():\n    game = BashCrawl()\n    game.main_menu()\n\nif __name__ == \"__main__\":\n    main()\n"}], "20": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'category', 'operations')  # Include 'operations' in list_display\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/blogpost/{}/change/\" class=\"edit-link\">Edit</a> '\\\n            '<a href=\"/post/{}/delete/\" class=\"delete-link\">Delete</a>', obj.id, obj.id\n        )\n    operations.short_description = 'Operations'\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'operations')  # Include 'operations' in list_display\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/category/{}/change/\" class=\"edit-link\">Edit</a> '\\\n            '<a href=\"/category/{}/delete/\" class=\"delete-link\">Delete</a>', obj.id, obj.id\n        )\n\n    operations.short_description = 'Operations'\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    pass\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name', 'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment', 'class': 'form-control'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'class': 'form-control'}),\n            'category': forms.Select(attrs={'class': 'form-control'}),\n        }\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        verbose_name_plural = 'Categories'\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)  # Add created_at field\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=255)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Comment by {self.author} on {self.post.title}\"\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return f\"Message from {self.name}\"\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from django.db.models import Count\nfrom django.db.models.functions import TruncMonth\n\ndef filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n\ndef get_archive_counts(posts):\n    archive_counts = posts.annotate(month=TruncMonth('created_at')).values('month').annotate(count=Count('id')).order_by('-month')\n    return archive_counts\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, Comment, ContactUs\nfrom .forms import CommentForm, BlogPostForm  # Import BlogPostForm\nfrom .utils import filter_by_date, get_archive_counts\n\ndef home(request):\n    posts = BlogPost.objects.all().order_by('-created_at')\n    if request.method == 'GET' and 'q' in request.GET:\n        query = request.GET.get('q')\n        posts = posts.filter(title__icontains=query) # Search by title\n\n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all().order_by('-created_at')  # Use related_name\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.post = post\n            comment.save()\n            return redirect('post_detail', pk=post.pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n@login_required\ndef post_delete(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    post.delete()\n    messages.success(request, 'Post deleted successfully.')\n    return redirect('admin:example_app_blogpost_changelist')  # Redirect to admin\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n@login_required\ndef category_delete(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    messages.success(request, 'Category deleted successfully.')\n    return redirect('admin:example_app_category_changelist')  # Redirect to admin\n\ndef archive(request):\n    posts = BlogPost.objects.all()\n    year = request.GET.get('year')\n    month = request.GET.get('month')\n    posts = filter_by_date(posts, year, month)\n    archive_counts = get_archive_counts(BlogPost.objects.all())\n    context = {\n        'posts': posts,\n        'archive_counts': archive_counts,\n        'selected_year': year,\n        'selected_month': month,\n    }\n    return render(request, 'blog/archive.html', context)\n\ndef about(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        contact = ContactUs(name=name, email=email, message=message)\n        contact.save()\n        messages.success(request, 'Your message has been sent successfully!')\n        return redirect('about') # Redirect to prevent multiple submissions on refresh\n    return render(request, 'blog/about.html')\n\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        posts = BlogPost.objects.filter(title__icontains=query)  # Search by title\n        return render(request, 'blog/home.html', {'posts': posts})  # Use home.html template to display search results\n    return redirect('home')  # Handle cases where search query is empty by redirecting to home\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\nheader {\n    background: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\nheader nav a {\n    color: #fff;\n    margin: 0 15px;\n    text-decoration: none;\n}\n\nmain {\n    padding: 20px;\n    background: #fff;\n    margin: 20px auto;\n    max-width: 800px;\n    border: 1px solid #ddd;\n}\n\nfooter {\n    text-align: center;\n    padding: 10px 0;\n    background: #333;\n    color: #fff;\n}\n"}, {"file": "about.html", "path": "example_app/templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-container\">\n    <h1>About Me</h1>\n    <p>This is the about page. You can write something about yourself here.</p>\n\n    <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\" class=\"form-control\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" class=\"form-control\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"message\">Message:</label>\n            <textarea id=\"message\" name=\"message\" class=\"form-control\" required></textarea>\n        </div>\n        <button id=\"submit-button\" type=\"submit\" class=\"btn btn-primary\">Send Message</button>\n    </form>\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n</div>\n{% endblock %}\n"}, {"file": "archive.html", "path": "example_app/templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n    <div id=\"archive-container\" class=\"archive-container\">\n        <h1>Archive</h1>\n\n        <h2>Monthly Archives</h2>\n        <ul>\n        {% for month in archive_counts %}\n            <li>\n                <a href=\"{% url 'archive' %}?year={{ month.month|date:'Y' }}&month={{ month.month|date:'m' }}\">\n                    {{ month.month|date:'Y-m' }} ({{ month.count }})\n                </a>\n            </li>\n        {% endfor %}\n        </ul>\n\n        <h2>Posts</h2>\n        {% for post in posts %}\n            <div id=\"post-{{ post.id }}\" class=\"post-preview\">\n                <h3><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h3>\n                <p class=\"post-meta\">Posted in <a href=\"{% url 'category_detail' post.category.pk %}\">{{ post.category }}</a> on {{ post.created_at|date:'F j, Y' }}</p>\n                <p>{{ post.content|truncatewords:50 }}</p>\n            </div>\n        {% empty %}\n            <p id=\"no-posts-message\">No posts found.</p>\n        {% endfor %}\n    </div>\n{% endblock %}\n"}, {"file": "base.html", "path": "example_app/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n          <a href=\"{% url 'home' %}\">Home</a>\n          <a href=\"{% url 'category' %}\">Categories</a>\n          <a href=\"{% url 'archive' %}\">Archive</a>\n          <a href=\"{% url 'about' %}\">About</a>\n          <form id=\"search-form\" class=\"search-form\" method=\"get\" action=\"{% url 'search' %}\">\n              <input id=\"search-input\" type=\"text\" name=\"q\" placeholder=\"Search...\">\n              <button id=\"search-button\" type=\"submit\">Search</button>\n          </form>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}{% endblock %}\n    </main>\n\n    <footer id=\"main-footer\" class=\"main-footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "category.html", "path": "example_app/templates/blog/category.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-list-container\" class=\"category-list-container\">\n    <h1>Categories</h1>\n    <ul>\n        {% for category in categories %}\n        <li id=\"category-{{ category.id }}\" class=\"category-item\">\n            <a href=\"{% url 'category_detail' category.pk %}\">{{ category.name }}</a>\n            {% if user.is_authenticated %}\n                <a href=\"{% url 'category_delete' category.pk %}\" class=\"delete-link\">Delete</a>\n            {% endif %}\n        </li>\n        {% empty %}\n            <li>No categories found.</li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1>Latest Posts</h1>\n    {% for post in posts %}\n        <div id=\"post-{{ post.id }}\" class=\"post-preview\">\n            <h3><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h3>\n            <p class=\"post-meta\">Posted in <a href=\"{% url 'category_detail' post.category.pk %}\">{{ post.category }}</a> on {{ post.created_at|date:'F j, Y' }}</p>\n            <p>{{ post.content|truncatewords:50 }}</p>\n            {% if user.is_authenticated %}\n                <a href=\"{% url 'post_delete' post.pk %}\" class=\"delete-link\">Delete</a>\n            {% endif %}\n        </div>\n    {% empty %}\n        <p id=\"no-posts-message\">No posts found.</p>\n    {% endfor %}\n</div>\n{% endblock %}\n"}, {"file": "post_detail.html", "path": "example_app/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"post-detail-container\" class=\"post-detail-container\">\n    <h1 id=\"post-title\">{{ post.title }}</h1>\n    <p id=\"post-meta\" class=\"post-meta\">Posted in <a id=\"post-category-link\" href=\"{% url 'category_detail' post.category.pk %}\">{{ post.category }}</a> on {{ post.created_at|date:'F j, Y' }}</p>\n    <div id=\"post-content\">{{ post.content }}</div>\n\n    <hr>\n    <div id=\"comments-section\" class=\"comments-section\">\n        <h2 id=\"comments-heading\">Comments</h2>\n        <ul id=\"comments-list\">\n            {% for comment in comments %}\n                <li id=\"comment-{{ comment.id }}\" class=\"comment\">\n                    <strong id=\"comment-author\">{{ comment.author }}</strong> - <span id=\"comment-date\">{{ comment.created_at|date:'F j, Y' }}</span>\n                    <p id=\"comment-content\">{{ comment.content }}</p>\n                </li>\n            {% empty %}\n                <li id=\"no-comments\">No comments yet.</li>\n            {% endfor %}\n        </ul>\n\n        <h2 id=\"leave-comment-heading\">Leave a Comment</h2>\n        <form id=\"comment-form\" method=\"post\" action=\"\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"comment-submit-button\" type=\"submit\">Post Comment</button>\n        </form>\n    </div>\n</div>\n{% endblock %}\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nLOGIN_URL = '/admin/login/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "category_detail.html", "path": "example_app/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-detail-container\" class=\"category-detail-container\">\n    <h1 id=\"category-title\">{{ category.name }}</h1>\n    {% for post in posts %}\n        <div id=\"post-{{ post.id }}\" class=\"post-preview\">\n            <h3><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h3>\n            <p class=\"post-meta\">Posted on {{ post.created_at|date:'F j, Y' }}</p>\n            <p>{{ post.content|truncatewords:50 }}</p>\n        </div>\n    {% empty %}\n        <p id=\"no-posts-message\">No posts found in this category.</p>\n    {% endfor %}\n</div>\n{% endblock %}"}]}