{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Your Weight (kg)', min_value=0)\n    height = forms.FloatField(label='Your Height (cm)', min_value=0)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\",\n    \"Invalid weight\": \"The weight can't be less than 0.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    bmi = None\n    interpretation = None\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height']\n            if height <=0:\n                interpretation = bmi_interpretation[\"Invalid height\"]\n            elif weight <= 0:\n                interpretation = bmi_interpretation[\"Invalid weight\"]\n            else:\n                bmi = (weight / (height/100)**2)\n                for category, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        interpretation = bmi_interpretation[category]\n                        break\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'interpretation': interpretation})\n\ndef advice(request):\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html>\n<head><title>Advice</title></head>\n<body>\n    <div id=\"advice-container\" class=\"advice-container\">\n        <!-- Content for advice based on BMI will go here -->\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"bmi-calculator-container\">\n        <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Calculate</button>\n        </form>\n        <div id=\"results-container\" class=\"results-container\">\n            {% if bmi %}\n                <p id=\"bmi-result\" class=\"bmi-result\">Your BMI: {{ bmi|floatformat:2 }}</p>\n                <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">{{ interpretation }}</p>\n            {% endif %}\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html>\n<head><title>Homepage</title></head>\n<body>\n    <div id=\"homepage-container\" class=\"homepage-container\">\n    <p>Learn about your Body Mass Index (BMI) and its implications for your health.</p>\n        <a id=\"bmi-calculator-link\" class=\"bmi-calculator-link\" href=\"{% url 'bmi_calculator' %}\">Calculate Your BMI</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.views import View\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = \"\"\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return \"Please select at least one character type\"\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    generated_password = None\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase')\n        include_lowercase = request.POST.get('lowercase')\n        include_numbers = request.POST.get('numbers')\n        include_symbols = request.POST.get('symbols')\n\n        generated_password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n\n    return render(request, 'generator.html', {'password': generated_password})\n\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n#copy-message { display: none; color: green; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <h1 id=\"about-us-title\">About Us</h1>\n    <p id=\"about-us-content\">This is the about us page for the password generator.</p>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <h1 id=\"generator-title\">Generate a Password</h1>\n    <form method=\"post\" id=\"generator-form\">\n        {% csrf_token %}\n        <label for=\"length\">Length:</label>\n        <input type=\"number\" name=\"length\" id=\"length\" value=\"12\" min=\"1\"><br><br>\n        <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" checked>\n        <label for=\"uppercase\">Uppercase</label><br>\n        <input type=\"checkbox\" name=\"lowercase\" id=\"lowercase\" checked>\n        <label for=\"lowercase\">Lowercase</label><br>\n        <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" checked>\n        <label for=\"numbers\">Numbers</label><br>\n        <input type=\"checkbox\" name=\"symbols\" id=\"symbols\" checked>\n        <label for=\"symbols\">Symbols</label><br><br>\n        <button type=\"submit\" id=\"generate-button\">Generate</button>\n    </form>\n    {% if password %}\n        <p>Your password is: <span id=\"password\">{{ password }}</span></p>\n        <button onclick=\"copyToClipboard()\" id=\"copy-button\">Copy to Clipboard</button>\n        <span id=\"copy-message\"></span>\n    {% endif %}\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <h1 id=\"home-title\">Welcome to the Password Generator!</h1>\n    <a href=\"{% url 'generator' %}\" id=\"generate-link\">Generate a Password</a>\n    <br>\n    <a href=\"{% url 'about_us' %}\" id=\"about-us-link\">About Us</a>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\n\ndef hex_to_rgb(value):\n    value = value.lstrip('#')\n    lv = len(value)\n    return tuple(int(value[i:i + lv // 3], 16) for i in range(0, lv, lv // 3))\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#FFFFFF')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        fill_rgb = hex_to_rgb(fill_color)\n        back_rgb = hex_to_rgb(back_color)\n\n        img = qr.make_image(fill_color=fill_rgb, back_color=back_rgb)\n\n        buffer = io.BytesIO()\n        img.save(buffer, 'PNG')\n        img_str = base64.b64encode(buffer.getvalue()).decode()\n\n        context = {'qr_code': img_str}\n        return render(request, 'qr_app/generate.html', context)\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')  # Get data from hidden input\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#FFFFFF')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n        fill_rgb = hex_to_rgb(fill_color)\n        back_rgb = hex_to_rgb(back_color)\n        img = qr.make_image(fill_color=fill_rgb, back_color=back_rgb)\n\n        buffer = io.BytesIO()\n        img.save(buffer, 'PNG')\n        response = HttpResponse(buffer.getvalue(), content_type='image/png')\n        response['Content-Disposition'] = f'attachment; filename=\"qrcode.png\"'\n        return response\n    return HttpResponse(\"No data to download\")\n\n\ndef about(request):\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"about-container\">\n        <h1>About the QR Code Generator</h1>\n        <p>This simple QR code generator allows you to create custom QR codes for various purposes.  You can encode URLs, text, contact information, and more.</p>\n        <h2>FAQ</h2>\n        <ul>\n            <li><strong>How do I use this?</strong>  Enter the data you want to encode in the generator form and press 'Generate'.</li>\n            <li><strong>What formats are supported?</strong> Currently, we support generating PNG images of QR codes.</li>\n            <li><strong>Can I customize the colors?</strong> Yes, you can adjust the foreground and background colors of your QR code.</li>\n        </ul>\n\n        <h2>Privacy Policy</h2>\n        <p>We do not store any of the data you use to generate QR codes.</p>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n        #qr-code-container{\n            display: flex;\n            justify-content: center; /* Horizontally center */\n            align-items: center; /* Vertically center */\n            min-height: 200px;\n            margin: 20px;\n            border: 1px solid #ddd;\n        }\n\n        img{\n            max-width: 300px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"generate-form\" class=\"generate-form\">\n        <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <label for=\"data\">Data:</label>\n            <input type=\"text\" id=\"data\" name=\"data\" required placeholder=\"Enter text or URL\">\n            <label for=\"fill_color\">Fill Color:</label>\n            <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n            <label for=\"back_color\">Background Color:</label>\n            <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#FFFFFF\">\n            <button type=\"submit\">Generate QR Code</button>\n        </form>\n    </div>\n\n    <div id=\"qr-code-container\" class=\"qr-code-container\">\n        {% if qr_code %}\n            <img id=\"qr-code-image\" class=\"qr-code-image\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"Generated QR Code\">\n            <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n                {% csrf_token %}\n                <input type=\"hidden\" name=\"data\" value=\"{{ data }}\">\n                <input type=\"hidden\" name=\"fill_color\" value=\"{{ fill_color }}\">\n                <input type=\"hidden\" name=\"back_color\" value=\"{{ back_color }}\">\n                <button type=\"submit\">Download</button>\n            </form>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1>Welcome to the QR Code Generator!</h1>\n        <p>Create custom QR codes quickly and easily.</p>\n        <a href=\"{% url 'generate_qr_code' %}\"><button>Generate QR Code</button></a>\n        <a href=\"{% url 'about' %}\"><button>About</button></a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n        elif 'markdown_file' in request.FILES:\n            uploaded_file = request.FILES['markdown_file']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            filepath = fs.path(filename)\n            with open(filepath, 'r') as f:\n                markdown_text = f.read()\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n\n    return render(request, 'convert.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"content-container\">\n        <h1>About This Markdown to HTML Converter</h1>\n        <p>This simple web application allows you to convert Markdown text to HTML. You can either directly paste your Markdown into the text area or upload a Markdown file.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"content-container\">\n        <h1>Markdown to HTML Converter</h1>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <label for=\"markdown_text_id\">Enter Markdown:</label><br>\n            <textarea id=\"markdown_text_id\" name=\"markdown_text\" rows=\"10\" cols=\"80\"></textarea><br><br>\n            <label for=\"markdown_file_id\">Or upload a file:</label>\n            <input type=\"file\" id=\"markdown_file_id\" name=\"markdown_file\"><br><br>\n            <input type=\"submit\" value=\"Convert\">\n        </form>\n\n        {% if html %}\n            <div id=\"html-output_id\" class=\"output-container\">\n                <h2>HTML Output:</h2>\n                {{ html | safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"content-container\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n        <p>Use the links below to navigate:</p>\n        <ul>\n            <li><a href=\"{% url 'convert' %}\">Convert Markdown</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong secret key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    # ... (rest of the middleware settings)\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    # ... (template settings)\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item, \n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView, UpdateView\nfrom .models import TodoList, TodoItem\nfrom .forms import TodoListForm, TodoItemForm\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n    context_object_name = 'todo_lists'\n\n    def post(self, request, *args, **kwargs):\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list')\n        return render(request, self.template_name, {'form': form})\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['form'] = TodoListForm()\n        return context\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\nclass TodoListUpdateView(UpdateView):\n    model = TodoList\n    fields = ['title', 'description', 'completed']\n    template_name = 'edit_todo.html'\n    success_url = '/todos/'\n\nedit_todo = TodoListUpdateView.as_view()\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n    context_object_name = 'todo_items'\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        context['form'] = TodoItemForm()\n        return context\n\n    def post(self, request, *args, **kwargs):\n        todolist_pk = self.kwargs['pk']\n        todolist = get_object_or_404(TodoList, pk=todolist_pk)\n        form = TodoItemForm(request.POST)\n        if form.is_valid():\n            todo_item = form.save(commit=False)\n            todo_item.todolist = todolist\n            todo_item.save()\n            return redirect('view_todo_item', pk=todolist_pk)\n        return render(request, self.template_name, {'form': form, 'todolist': todolist})\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todolist_pk)\n\nclass TodoItemUpdateView(UpdateView):\n    model = TodoItem\n    fields = ['title', 'description', 'completed']\n    template_name = 'edit_todo_item.html'\n    success_url = '/todos/'  # This redirects back to the list of lists\n\nedit_todo_item = TodoItemUpdateView.as_view()\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todo_item.todolist.pk)\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        completed_count = todo_items.filter(completed=True).count()\n        total_count = todo_items.count()\n\n        if total_count > 0:\n            completion_rate = (completed_count / total_count) * 100\n        else:\n            completion_rate = 0\n\n        context['completion_rate'] = completion_rate\n        # Add more analysis data as needed\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, TodoItem\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['title', 'description']\n\nclass TodoItemForm(forms.ModelForm):\n    class Meta:\n        model = TodoItem\n        fields = ['title', 'description']"}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"analysis-container\" class=\"analysis-container\">\n      <canvas id=\"completion-chart\" class=\"chart\"></canvas>\n    </div>\n\n    <script>\n        const ctx = document.getElementById('completion-chart').getContext('2d');\n        const completionRate = {{ completion_rate }};\n\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    data: [completionRate, 100 - completionRate],\n                    backgroundColor: ['#007bff', '#dc3545']\n                }]\n            }\n        });\n    </script>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Return Home</a>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <div id=\"edit-todo-container\" class=\"edit-container\">\n    <form method=\"post\" id=\"edit-todo-form\" class=\"edit-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-edit-todo\" class=\"submit-button\">Save Changes</button>\n    </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n<div id=\"edit-todo-item-container\" class=\"edit-container\">\n    <form method=\"post\" id=\"edit-todo-item-form\" class=\"edit-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-edit-todo-item\" class=\"submit-button\">Save Changes</button>\n    </form>\n</div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to Your Todo App</h1>\n        <a href=\"{% url 'todo_list' %}\" id=\"todo-list-link\" class=\"nav-link\">View Your Todo Lists</a>\n        <a href=\"{% url 'analysis' %}\" id=\"analysis-link\" class=\"nav-link\">View Task Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <div id=\"tasks-container\" class=\"tasks-container\">\n        <h2 id=\"todolist-title\" class=\"title\">{{ todolist.title }}</h2>\n\n        <ul id=\"tasks-list\" class=\"list-group\">\n            {% for item in todo_items %}\n            <li id=\"task-item-{{ item.id }}\" class=\"list-group-item\">\n                {{ item.title }} - {{ item.description }}\n                <span id=\"completion-status-{{ item.id }}\" class=\"badge {% if item.completed %}bg-success{% else %}bg-secondary{% endif %}\">\n                    {% if item.completed %}Completed{% else %}Pending{% endif %}\n                </span>\n                <div id=\"task-actions-{{ item.id }}\" class=\"actions\">\n                    <a href=\"{% url 'edit_todo_item' item.pk %}\" id=\"edit-task-{{ item.id }}\" class=\"btn btn-primary\">Edit</a>\n                    <a href=\"{% url 'delete_todo_item' item.pk %}\" id=\"delete-task-{{ item.id }}\" class=\"btn btn-danger\">Delete</a>\n                    <a href=\"{% url 'complete_todo_item' item.pk %}\" id=\"complete-task-{{ item.id }}\" class=\"btn btn-{% if item.completed %}warning{% else %}success{% endif %}\">\n                        {% if item.completed %}Mark as Pending{% else %}Mark as Complete{% endif %}\n                    </a>\n                    \n                </div>\n            </li>\n            {% endfor %}\n        </ul>\n\n        <div id=\"new-task-form-container\" class=\"form-container\">\n            <h3>Add a new task</h3>\n            <form method=\"post\" id=\"new-task-form\" class=\"form\">\n                {% csrf_token %}\n                {{ form.as_p }}\n                <button type=\"submit\" id=\"submit-new-task\" class=\"btn btn-primary\">Add Task</button>\n            </form>\n        </div>\n        <a href=\"{% url 'todo_list' %}\" id=\"back-to-lists-link\" class=\"nav-link\">Back to Lists</a>\n    </div>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body>\n    <div id=\"todo-lists-container\" class=\"lists-container\">\n        <h1 id=\"lists-title\" class=\"title\">Your Todo Lists</h1>\n\n        <ul id=\"todo-lists\" class=\"list-group\">\n        {% for todolist in todo_lists %}\n            <li id=\"todolist-item-{{ todolist.id }}\" class=\"list-group-item\">\n                <a href=\"{% url 'view_todo_item' todolist.pk %}\" id=\"view-todolist-{{ todolist.id }}\" class=\"list-link\">{{ todolist.title }}</a>\n                <div id=\"list-actions-{{ todolist.id }}\" class=\"actions\">\n                    <a href=\"{% url 'edit_todo' todolist.pk %}\" id=\"edit-todolist-{{ todolist.id }}\" class=\"btn btn-primary\">Edit</a>\n                    <a href=\"{% url 'delete_todo' todolist.pk %}\" id=\"delete-todolist-{{ todolist.id }}\" class=\"btn btn-danger\">Delete</a>                \n                </div>\n                \n            </li>\n        {% endfor %}\n        </ul>\n\n        <div id=\"new-list-form-container\" class=\"form-container\">\n            <h3>Create a new todo list</h3>\n            <form method=\"post\" id=\"new-list-form\" class=\"form\">\n                {% csrf_token %}\n                {{ form.as_p }}\n                <button type=\"submit\" id=\"submit-new-list\" class=\"btn btn-primary\">Create List</button>\n            </form>\n        </div>\n        <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Return Home</a>\n\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}], "7": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    date = models.DateField()\n    description = models.TextField(blank=True)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Support request from {self.name} ({self.email})'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('signup/', views.SignupView.as_view(), name='signup'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),\n    path('charts/', views.ChartsView.as_view(), name='charts'),\n    path('settings/', views.SettingsView.as_view(), name='settings'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('download_report/', views.DownloadReportView.as_view(), name='download_report'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime, timedelta\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\nfrom django.utils import timezone\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    login_url = '/login/'\n\nclass HomeView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\nclass LoginView(View):\n    def get(self, request):\n        return render(request, 'login.html')\n\n    def post(self, request):\n        # Add login logic here\n        pass\n\nclass SignupView(View):\n    def get(self, request):\n        return render(request, 'signup.html')\n\n    def post(self, request):\n         # Add signup logic here\n        pass\n\nclass LogoutView(LoginRequiredView):\n    def get(self, request):\n        logout(request)\n        return redirect('login')\n\nclass DashboardView(LoginRequiredView):\n    def get(self, request):\n        # Add dashboard logic here\n        return render(request, 'dashboard.html')\n\nclass ChartsView(LoginRequiredView):\n    def get(self, request):\n        return render(request, 'charts.html')\n\nclass SettingsView(LoginRequiredView):\n    def get(self, request):\n        return render(request, 'settings.html')\n\nclass SupportView(LoginRequiredView):\n    def get(self, request):\n        return render(request, 'support.html')\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request):\n        # Download report logic here\n        pass"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"charts-container\" class=\"charts-container\">\n      <canvas id=\"myChart\" class=\"chart\"></canvas>\n    </div>\n</body>\n</html>"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n    <div id=\"dashboard-container\" class=\"dashboard-container\">\n        <h1>Welcome to your Dashboard</h1>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n  <div id=\"home-container\" class=\"home-container\">\n    <h1>Welcome to the Home Page</h1>\n    <a href=\"{% url 'login' %}\" id=\"login-link\" class=\"nav-link\">Login</a>\n    <a href=\"{% url 'signup' %}\" id=\"signup-link\" class=\"nav-link\">Signup</a>\n    <a href=\"{% url 'support' %}\" id=\"support-link\" class=\"nav-link\">Support</a>\n  </div>\n</body>\n</html>"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <div id=\"login-container\" class=\"login-container\">\n      <form method=\"post\">\n          {% csrf_token %}\n          <label for=\"username\">Username:</label><br>\n          <input type=\"text\" id=\"username\" name=\"username\"><br>\n          <label for=\"password\">Password:</label><br>\n          <input type=\"password\" id=\"password\" name=\"password\"><br><br>\n          <input type=\"submit\" value=\"Submit\" id=\"submit-button\">\n      </form>\n    </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n    <div id=\"settings-container\" class=\"settings-container\">\n        <h1>User Settings</h1>\n    </div>\n</body>\n</html>"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n    <div id=\"signup-container\" class=\"signup-container\">\n      <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"username\">Username:</label><br>\n        <input type=\"text\" id=\"username\" name=\"username\"><br>\n        <label for=\"email\">Email:</label><br>\n        <input type=\"email\" id=\"email\" name=\"email\"><br>\n        <label for=\"password\">Password:</label><br>\n        <input type=\"password\" id=\"password\" name=\"password\"><br>\n        <label for=\"password2\">Confirm Password:</label><br>\n        <input type=\"password\" id=\"password2\" name=\"password2\"><br><br>\n        <input type=\"submit\" value=\"Submit\"  id=\"submit-button\">\n    </form>\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n    <div id=\"support-container\" class=\"support-container\">\n        <h1>Support Page</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '+=uymj0f8$v(7j6+_u6u#qnx-5^2!a&36_b8@*j-j@q0+dt+'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nLOGIN_REDIRECT_URL = '/dashboard/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "8": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']\n        widgets = {\n            'datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AddEventView, EditEventView, DeleteEventView, ListEventsView, EventDetailsView, HelpView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('calendar/add-event/', AddEventView.as_view(), name='add_event'),\n    path('calendar/edit-event/<int:event_id>/', EditEventView.as_view(), name='edit_event'),\n    path('calendar/delete-event/<int:event_id>/', DeleteEventView.as_view(), name='delete_event'),\n    path('calendar/view-events/', ListEventsView.as_view(), name='view_events'),\n    path('calendar/view-event-details/<int:event_id>/', EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', HelpView.faq, name='faq'),\n    path('help/user-guide/', HelpView.user_guide, name='user_guide'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.http import HttpResponse\nfrom django.contrib import messages\n\nfrom .forms import EventForm\nfrom .models import Event\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\nclass AddEventView(View):\n    def get(self, request):\n        form = EventForm()\n        return render(request, 'add_event.html', {'form': form})\n\n    def post(self, request):\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n        return render(request, 'add_event.html', {'form': form})\n\nclass EditEventView(View):\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventForm(instance=event)\n        return render(request, 'edit_event.html', {'form': form, 'event_id': event_id})\n\n    def post(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n        return render(request, 'edit_event.html', {'form': form, 'event_id': event_id})\n\nclass DeleteEventView(View):\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        event.delete()\n        return redirect('home')\n\nclass ListEventsView(View):\n    def get(self, request):\n        events = Event.objects.all()\n        return render(request, 'view_events.html', {'events': events})\n\nclass EventDetailsView(View):\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        return render(request, 'view_event_details.html', {'event': event})\n\nclass HelpView:\n    @staticmethod\n    def faq(request):\n        return render(request, 'faq.html')\n\n    @staticmethod\n    def user_guide(request):\n        return render(request, 'user_guide.html')"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-30 08:50\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "add_event.html", "path": "example_app/templates/add_event.html", "code": "<html>\n<head>\n<title>Add Event</title>\n</head>\n<body>\n    <h1>Add Event</h1>\n    <form id=\"add-event-form\" class=\"event-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-button\" type=\"submit\">Add Event</button>\n    </form>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "example_app/templates/edit_event.html", "code": "<html>\n<head>\n<title>Edit Event</title>\n</head>\n<body>\n    <h1>Edit Event</h1>\n    <form id=\"edit-event-form\" class=\"event-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-button\" type=\"submit\">Save Changes</button>\n    </form>\n</body>\n</html>"}, {"file": "faq.html", "path": "example_app/templates/faq.html", "code": "<html>\n<head>\n<title>FAQ</title>\n</head>\n<body>\n    <h1 id=\"faq-title\">Frequently Asked Questions</h1>\n    <!-- Add your FAQ content here -->\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head>\n<title>Home Page</title>\n</head>\n<body>\n    <h1 id=\"home-title\">Welcome to the Calendar App</h1>\n    <!-- Add calendar and other content here -->\n</body>\n</html>"}, {"file": "user_guide.html", "path": "example_app/templates/user_guide.html", "code": "<html>\n<head>\n<title>User Guide</title>\n</head>\n<body>\n    <h1 id=\"user-guide-title\">User Guide</h1>\n    <!-- Add user guide content here -->\n</body>\n</html>"}, {"file": "view_events.html", "path": "example_app/templates/view_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Event List</title>\n</head>\n<body>\n    <h1 id=\"event-list-title\">Event List</h1>\n    <ul id=\"event-list\">\n        {% for event in events %}\n            <li id=\"event-{{ event.id }}\" class=\"event-item\">\n                <a href=\"{% url 'view_event_details' event.id %}\">{{ event.title }}</a>\n            </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "view_event_details.html", "path": "example_app/templates/view_event_details.html", "code": "<html>\n<head>\n<title>Event Details</title>\n</head>\n<body>\n    <h1 id=\"event-details-title\">{{ event.title }}</h1>\n    <p id=\"event-description\">{{ event.description }}</p>\n    <p id=\"event-datetime\">{{ event.datetime }}</p>\n</body>\n</html>"}, {"file": "asgi.py", "path": "project_name/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "project_name/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_name.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "project_name/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project_name/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_wsgi_application()"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'  # Or specify the fields you need\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__'  # Or specify the fields you need"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue = models.TextField()\n\n    def __str__(self):\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomePageView.as_view(), name='home'),\n    path('features/', views.FeaturesPageView.as_view(), name='features'),\n    path('pricing/', views.PricingPageView.as_view(), name='pricing'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('about/', views.AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\nfrom django.contrib import messages # Import messages\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\nclass PricingPageView(FormView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = '/pricing/' # Redirect to the same page after successful submission\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your message has been sent successfully!') # Display success message      \n        return super().form_valid(form)\n\nclass SupportView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = '/support/'\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted!')\n        return super().form_valid(form)\n        \nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body>\n    <div id=\"about-us-container\" class=\"about-us\">\n        <!-- Content of About Us Page -->\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body>\n    <div id=\"features-container\" class=\"features\">\n      <!-- Content of Features Page -->\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body>\n    <div id=\"home-container\" class=\"home\">\n        <!-- Content of Home Page -->\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body>\n    <div id=\"pricing-container\" class=\"pricing\">\n        <!-- Content of Pricing Page -->\n        <form id=\"contact-form\" class=\"contact-form\" method=\"post\"> \n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n        {% if messages %}\n            <div id=\"message-container\" class=\"messages\">\n                {% for message in messages %}\n                    <p id=\"message-{{ forloop.counter }}\" class=\"message\">{{ message }}</p>\n                {% endfor %}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body>\n    <div id=\"support-container\" class=\"support\">\n        <form  id=\"support-form\" class=\"support-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n                {% if messages %}\n            <div id=\"message-container\" class=\"messages\">\n                {% for message in messages %}\n                    <p id=\"message-{{ forloop.counter }}\" class=\"message\">{{ message }}</p>\n                {% endfor %}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key' # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    \"\"\"User registration form.\"\"\"\n    pass\n\nclass LoginForm(forms.Form):\n    \"\"\"User login form.\"\"\"\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass MealForm(forms.ModelForm):\n    \"\"\"Form for logging meals.\"\"\"\n    class Meta:\n        model = Meal\n        fields = '__all__'\n\nclass ActivityForm(forms.ModelForm):\n    \"\"\"Form for logging activities.\"\"\"\n    class Meta:\n        model = Activity\n        fields = '__all__'\n\nclass ProfileForm(forms.ModelForm):\n    \"\"\"Form for updating user profile.\"\"\"\n    class Meta:\n        model = UserProfile\n        exclude = ('user',)\n\nclass PreferencesForm(forms.ModelForm):\n    \"\"\"Form for updating dietary preferences.\"\"\"\n    class Meta:\n        model = UserProfile  # Assuming preferences are part of UserProfile\n        fields = ('dietary_preferences',) # Replace with actual preference fields\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    # Add other profile fields here (e.g., dietary_preferences)\n    dietary_preferences = models.CharField(max_length=255, blank=True)\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    date = models.DateField()\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories_burned = models.IntegerField()\n    date = models.DateField()\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'), # Added logout URL\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_log, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_log, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\ndef get_weekly_calorie_chart(user):\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n    return week_data\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date, timedelta\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate, logout\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nimport matplotlib.pyplot as plt\nimport io\nimport base64\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            password = form.cleaned_data['password']\n            user = authenticate(request, username=username, password=password)\n            if user:\n                login(request, user)\n                return redirect('dashboard')\n            else:\n                messages.error(request, 'Invalid username or password.')\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n@login_required\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n\n@login_required\ndef dashboard(request):\n    # ... (Implementation for dashboard)\n    return render(request, 'dashboard.html')\n\n@login_required\ndef meal_log(request):\n    meals = Meal.objects.filter(user=request.user)\n    return render(request, 'meal_log.html', {'meals': meals})\n# ... (Other view implementations)\n\n@login_required\ndef weekly_calorie_chart(request):\n    chart_data = get_weekly_calorie_chart(request.user)\n    plt.plot(chart_data['dates'], chart_data['intake'], label='Intake')\n    plt.plot(chart_data['dates'], chart_data['expenditure'], label='Expenditure')\n    plt.xlabel('Date')\n    plt.ylabel('Calories')\n    plt.title('Weekly Calorie Chart')\n    plt.legend()\n    buffer = io.BytesIO()\n    plt.savefig(buffer, format='png')\n    buffer.seek(0)\n    chart_image = base64.b64encode(buffer.getvalue()).decode('utf-8')\n    plt.close()\n    return render(request, 'weekly_calorie_chart.html', {'chart_image': chart_image})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Activity Log</title>\n</head>\n<body>\n    <div id=\"activity-log-container\" class=\"container\">\n        <h2>Activity Log</h2>\n        <!-- Search bar -->\n        <input type=\"text\" id=\"activity-search\" class=\"search-bar\" placeholder=\"Search activities...\">\n        <table>\n            <thead>\n                <tr>\n                    <th>Activity</th>\n                    <th>Calories Burned</th>\n                    <th>Date</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody id=\"activity-log-body\">\n                {% for activity in activities %}\n                    <tr>\n                        <td>{{ activity.name }}</td>\n                        <td>{{ activity.calories_burned }}</td>\n                        <td>{{ activity.date }}</td>\n                        <td>\n                            <a href=\"{% url 'edit_activity' activity.id %}\">Edit</a> |\n                            <a href=\"{% url 'delete_activity' activity.id %}\">Delete</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n        <button id=\"add-activity-btn\" class=\"add-button\">Add Activity</button>\n    </div>\n</body>\n</html>\n"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Activity - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"add-activity-container\" class=\"container\">\n        <h2>Add Activity</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"submit-activity-btn\">Add</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Meal - Calorie Tracker</title>\n</head>\n<body>\n     <div id=\"add-meal-container\" class=\"container\">\n        <h2>Add Meal</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"submit-meal-btn\">Add</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Dashboard</title>\n</head>\n<body>\n    <div id=\"dashboard-container\" class=\"container\">\n        <h2>Dashboard</h2>\n        <p>Welcome, {{ user.username }}!</p>\n         <!-- Display summary information or quick stats -->\n    </div>\n</body>\n</html>\n"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Activity - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"edit-activity-container\" class=\"container\">\n        <h2>Edit Activity</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"update-activity-btn\">Update</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Meal - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"edit-meal-container\" class=\"container\">\n        <h2>Edit Meal</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"update-meal-btn\">Update</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\">Welcome to Calorie Tracker</h1>\n        <p id=\"home-description\">Track your daily calorie intake and expenditure.</p>\n        <a href=\"{% url 'signup' %}\" id=\"signup-link\" class=\"home-link\">Sign Up</a>\n        <a href=\"{% url 'login' %}\" id=\"login-link\" class=\"home-link\">Log In</a>\n    </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"login-container\" class=\"container\">\n        <h2>Login</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"login-btn\">Log In</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Meal Log</title>\n</head>\n<body>\n    <div id=\"meal-log-container\" class=\"container\">\n        <h2>Meal Log</h2>\n        <!-- Search bar -->\n        <input type=\"text\" id=\"meal-search\" class=\"search-bar\" placeholder=\"Search meals...\">\n        <table>\n            <thead>\n                <tr>\n                    <th>Meal</th>\n                    <th>Calories</th>\n                    <th>Date</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody id=\"meal-log-body\">\n                {% for meal in meals %}\n                <tr>\n                    <td>{{ meal.name }}</td>\n                    <td>{{ meal.calories }}</td>\n                    <td>{{ meal.date }}</td>\n                    <td>\n                        <a href=\"{% url 'edit_meal' meal.id %}\">Edit</a> |\n                        <a href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n                    </td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n        <button id=\"add-meal-btn\" class=\"add-button\">Add Meal</button>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Settings</title>\n</head>\n<body>\n    <div id=\"settings-container\" class=\"container\">\n        <h2>Settings</h2>\n        <a href=\"{% url 'update_profile' %}\" id = \"update-profile-link\">Update Profile</a>\n        <br>\n        <a href=\"{% url 'update_preferences' %}\" id=\"update-pref-link\">Update Preferences</a>\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"signup-container\" class=\"container\">\n        <h2>Sign Up</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"signup-btn\">Sign Up</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Tutorials - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"tutorials-container\" class=\"container\">\n      <h2>Tutorials/Help</h2>\n      </div>\n</body>\n</html>\n"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Preferences - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"update-pref-container\" class=\"container\">\n        <h2>Update Preferences</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id = \"update-pref-btn\">Update</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Profile - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"update-profile-container\" class=\"container\">\n        <h2>Update Profile</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id = \"update-profile-btn\">Update</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Weekly Calorie Chart - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"calorie-chart-container\" class=\"container\">\n        <h2>Weekly Calorie Chart</h2>\n        <img src=\"data:image/png;base64,{{ chart_image }}\" alt=\"Weekly Calorie Chart\">\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'\nLOGIN_REDIRECT_URL = '/dashboard/' # Added a redirect after login\nLOGOUT_REDIRECT_URL = '/'  # Add a redirect after logout\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label='Upload JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    status = models.CharField(max_length=50)\n    comments = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Review for {self.project.name} - {self.status}\"\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\n\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        # Process review submission\n        status = request.POST.get('status')\n        comments = request.POST.get('comments')\n        Review.objects.create(project=project, status=status, comments=comments)\n        messages.success(request, 'Review submitted successfully!')\n        return HttpResponseRedirect('/') # Redirect after submission\n    return render(request, 'review.html', {'project': project})\n\n\ndef home_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            handle_json_upload(request.FILES['json_file'])\n            return HttpResponseRedirect('/')  # Redirect after upload\n    else:\n        form = JSONUploadForm()\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'form': form, 'projects': projects})\n\n\ndef handle_json_upload(json_file):\n    try:\n        data = json.load(json_file)\n        for item in data:\n            project, created = Project.objects.get_or_create(name=item['name'])\n            project.description = item.get('description', '')\n            project.save()\n        messages.success(request, 'JSON file uploaded and processed successfully!')\n    except json.JSONDecodeError:\n        messages.error(request, 'Invalid JSON file format.')\n    except Exception as e:\n        messages.error(request, f'Error processing JSON file: {e}')\n\n\ndef about_view(request):\n    return render(request, 'about.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"content-container\">\n    <h1 id=\"about-title\" class=\"title\">About This Site</h1>\n    <p id=\"about-description\" class=\"description\">This site is designed for reviewing projects and providing feedback.  Upload your project data as a JSON file and then review each project individually.</p>\n</div>\n{% endblock %}\n"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title id=\"page-title\">Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"header\">\n        <nav id=\"main-nav\" class=\"nav\">\n            <ul id=\"nav-list\">\n                <li id=\"nav-home\" class=\"nav-item\"><a href=\"{% url 'home' %}\">Home</a></li>\n                <li id=\"nav-about\" class=\"nav-item\"><a href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </header>\n    <main id=\"main-content\" class=\"content\">\n        {% if messages %}\n        <div id=\"message-container\" class=\"messages\">\n            <ul id=\"message-list\">\n            {% for message in messages %}\n                <li id=\"message-{{ message.tags }}\" class=\"message {{ message.tags }}\">{{ message }}</li>\n            {% endfor %}\n            </ul>\n        </div>\n        {% endif %}\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"content-container\">\n    <h1 id=\"home-title\" class=\"title\">Project Listings</h1>\n    <div id=\"upload-form-container\" class=\"upload-form\">\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"upload-button\" type=\"submit\">Upload JSON</button>\n        </form>\n    </div>\n    <ul id=\"project-list\">\n    {% for project in projects %}\n        <li id=\"project-{{ project.id }}\" class=\"project-item\">\n            <a href=\"{% url 'review' project.id %}\">{{ project.name }}</a>\n           <p id=\"project-description-{{ project.id }}\" class=\"project-description\">{{ project.description }}</p>\n        </li>\n    {% endfor %}\n    </ul>\n</div>\n{% endblock %}\n"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"content-container\">\n    <h1 id=\"review-title\" class=\"title\">Review Project: {{ project.name }}</h1>\n    <form id=\"review-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" name=\"status\">\n            <option value=\"approved\">Approved</option>\n            <option value=\"rejected\">Rejected</option>\n            <option value=\"pending\">Pending</option>\n        </select><br>\n        <label for=\"comments\">Comments:</label><br>\n        <textarea id=\"comments\" name=\"comments\"></textarea><br>\n        <button id=\"submit-review\" type=\"submit\">Submit Review</button>\n    </form>\n</div>\n{% endblock %}\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": ".content-container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\n.title {\n    text-align: center; /* Center the titles */\n}\n\n/* Style for messages */\n.messages {\n    padding: 10px;\n    margin-bottom: 20px;\n}\n.message {\n    list-style-type: none;\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 5px;\n}\n.success {\n    background-color: lightgreen;\n    border: 1px solid green;\n}\n.error {\n    background-color: lightpink;\n    border: 1px solid red;\n}\n\n.project-item{\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 10px;\n    border-radius: 5px;\n}\n"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom .models import Claim, Budget\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'status', 'created_at', 'operations')\n    list_filter = ('status', 'category')\n    actions = [\"approve_claims\", \"reject_claims\"]\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/claim/{}/change/\">Edit</a> | '\n            '<a href=\"/admin/example_app/claim/{}/delete/\">Delete</a>',\n            obj.id, obj.id\n        )\n    operations.short_description = \"Operations\"\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='approved')\n        messages.success(request, f'{queryset.count()} claims approved successfully.')\n\n    def reject_claims(self, request, queryset):\n       queryset.update(status='rejected')\n       messages.success(request, f'{queryset.count()} claims rejected successfully.')\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit')"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\n\nCLAIM_CATEGORIES = (\n    ('travel', 'Travel Expenses'),\n    ('labor', 'Labor Expenses'),\n    ('management', 'Management Expenses'),\n    ('equipment', 'Equipment Expenses'),\n)\n\nCLAIM_STATUSES = (\n    ('pending', 'Pending'),\n    ('approved', 'Approved'),\n    ('rejected', 'Rejected'),\n)\n\nclass Claim(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CLAIM_CATEGORIES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=CLAIM_STATUSES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.category} - {self.amount}'\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=20, choices=CLAIM_CATEGORIES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.category} - {self.limit}'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'),  # Add logout url\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget\n\ndef check_budget_limit(category, amount):\n    try:\n        budget = Budget.objects.get(category=category)\n        spent_amount = Claim.objects.filter(category=category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        if (spent_amount + amount) > budget.limit:\n            return False  # Budget limit exceeded\n        return True  # Budget limit not exceeded\n    except Budget.DoesNotExist:\n        return True # No budget found for category, treat as unlimited"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom .utils import check_budget_limit\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home') # Redirect to home after signup\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Claim submitted successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user).order_by('-created_at')\n    return render(request, 'claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be edited.')\n        return redirect('claim_status')\n\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n\n            if check_budget_limit(form.cleaned_data['category'], form.cleaned_data['amount']):\n                form.save()\n                messages.success(request, 'Claim updated successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit will be exceeded for this category if this edit is made.')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    claim.delete()\n    messages.success(request, 'Claim deleted successfully.')\n    return redirect('claim_status')\n\n@login_required\ndef analysis_view(request):\n    budgets = Budget.objects.all()\n    total_approved_claims = Claim.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0.00\n    data = []\n\n    for budget in budgets:\n        budget_data = {}\n        budget_data['category'] = budget.category\n        budget_data['limit'] = budget.limit\n\n        approved_claims_for_budget = Claim.objects.filter(status='approved', category=budget.category).aggregate(Sum('amount'))['amount__sum'] or 0\n        budget_data['spent'] = approved_claims_for_budget\n        budget_data['remaining'] = budget.limit - approved_claims_for_budget\n        \n        data.append(budget_data)\n\n    return render(request, 'analysis.html', {'data': data, 'total_approved_claims': total_approved_claims})\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.5 on 2025-01-26 23:19\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Analysis Report{% endblock %}\n\n{% block content %}\n<div id=\"analysis-report\" class=\"report-container\">\n    <h2>Analysis Report</h2>\n    <p id=\"total-approved-claims\" class=\"total-claims\">Total Approved Claims: ${{ total_approved_claims }}</p>\n    \n    <table id=\"budget-utilization\" class=\"budget-table\">\n        <thead>\n            <tr>\n                <th>Category</th>\n                <th>Limit</th>\n                <th>Spent</th>\n                <th>Remaining</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for item in data %}\n                <tr>\n                    <td id=\"category-{{ item.category }}\" class=\"budget-category\">{{ item.category }}</td>\n                    <td id=\"limit-{{ item.category }}\" class=\"budget-limit\">${{ item.limit }}</td>\n                    <td id=\"spent-{{ item.category }}\" class=\"budget-spent\">${{ item.spent }}</td>\n                    <td id=\"remaining-{{ item.category }}\" class=\"budget-remaining\">${{ item.remaining }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Accounting System{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li id=\"nav-item-home\" class=\"nav-item\"><a href=\"{% url 'home' %}\">Home</a></li>\n                {% if user.is_authenticated %}\n                    <li id=\"nav-item-submit-claim\" class=\"nav-item\"><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n                    <li id=\"nav-item-claim-status\" class=\"nav-item\"><a href=\"{% url 'claim_status' %}\">Claim Status</a></li>\n                    <li id=\"nav-item-analysis\" class=\"nav-item\"><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n                    <li id=\"nav-item-logout\" class=\"nav-item\"><a href=\"{% url 'logout' %}\">Logout</a></li>\n                {% else %}\n                    <li id=\"nav-item-login\" class=\"nav-item\"><a href=\"{% url 'login' %}\">Login</a></li>\n                    <li id=\"nav-item-signup\" class=\"nav-item\"><a href=\"{% url 'signup' %}\">Signup</a></li>\n                {% endif %}\n            </ul>\n        </nav>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n        {% if messages %}\n            <div id=\"message-container\" class=\"message-container\">\n                {% for message in messages %}\n                   <p id=\"message-{{ message.tags }}\" class=\"message-{{ message.tags }}\">{{ message }}</p> \n                {% endfor %}\n            </div>\n        {% endif %}\n        {% block content %}{% endblock %}\n    </main>\n    <footer id=\"main-footer\" class=\"main-footer\">\n      <p>&copy; 2024 Example App</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n    <div id=\"edit-claim-form-container\" class=\"form-container\">\n    <h2>Edit Claim</h2>\n    <form id=\"edit-claim-form\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"form-field-category\" class=\"form-field\">{{ form.category.label_tag }} {{ form.category }}</div>\n        <div id=\"form-field-amount\" class=\"form-field\">{{ form.amount.label_tag }} {{ form.amount }}</div>\n        <div id=\"form-field-description\" class=\"form-field\">{{ form.description.label_tag }} {{ form.description }}</div>\n        <button id=\"submit-edit-claim\" type=\"submit\">Update Claim</button>\n    </form>\n    </div>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n    <div id=\"claim-status-container\" class=\"status-container\">\n        <h2>Claim Status</h2>\n        {% if claims %}\n            <table id=\"claim-status-table\" class=\"status-table\">\n                <thead>\n                    <tr>\n                        <th>Category</th>\n                        <th>Amount</th>\n                        <th>Description</th>\n                        <th>Status</th>\n                        <th>Created At</th>\n                        <th>Actions</th>\n                    </tr>\n                </thead>\n                <tbody>\n                {% for claim in claims %}\n                    <tr id=\"claim-row-{{ claim.id }}\" class=\"claim-row\">\n                        <td id=\"claim-category-{{ claim.id }}\" class=\"claim-data\">{{ claim.category }}</td>\n                        <td id=\"claim-amount-{{ claim.id }}\" class=\"claim-data\">{{ claim.amount }}</td>\n                        <td id=\"claim-description-{{ claim.id }}\" class=\"claim-data\">{{ claim.description }}</td>\n                        <td id=\"claim-status-{{ claim.id }}\" class=\"claim-data\">{{ claim.status }}</td>\n                        <td id=\"claim-created-at-{{ claim.id }}\" class=\"claim-data\">{{ claim.created_at }}</td>\n                        <td id=\"claim-actions-{{ claim.id }}\" class=\"claim-actions\">\n                            {% if claim.status == 'pending' %}\n                                <a id=\"edit-link-{{ claim.id }}\" href=\"{% url 'edit_claim' claim.id %}\">Edit</a>\n                                <a id=\"delete-link-{{ claim.id }}\" href=\"{% url 'delete_claim' claim.id %}\">Delete</a>\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n                </tbody>\n            </table>\n        {% else %}\n            <p id=\"no-claims-message\">No claims submitted yet.</p>\n        {% endif %}\n    </div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Home{% endblock %}\n\n{% block content %}\n<div id=\"home-container\" class=\"home-content\">\n  <h2>Welcome to the Accounting and Cashier Management System</h2>\n    {% if user.is_authenticated %}\n      <p>You are logged in as {{ user.username }}.</p>\n    {% else %}\n        <p id=\"home-intro\">Please <a id=\"login-link\" href=\"{% url 'login' %}\">login</a> or <a id=\"signup-link\" href=\"{% url 'signup' %}\">sign up</a> to continue.</p>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Login{% endblock %}\n\n{% block content %}\n<div id=\"login-form-container\" class=\"form-container\">\n<h2>Login</h2>\n<form id=\"login-form\" method=\"post\">\n    {% csrf_token %}\n    <div id=\"form-field-username\" class=\"form-field\">{{ form.username.label_tag }} {{ form.username }}</div>\n    <div id=\"form-field-password\" class=\"form-field\">{{ form.password.label_tag }} {{ form.password }}</div>\n    <button id=\"submit-login\" type=\"submit\">Login</button>\n</form>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Signup{% endblock %}\n\n{% block content %}\n<div id=\"signup-form-container\" class=\"form-container\">\n  <h2>Sign Up</h2>\n  <form id=\"signup-form\" method=\"post\">\n    {% csrf_token %}\n    <div id=\"form-field-username\" class=\"form-field\">{{ form.username.label_tag }} {{ form.username }}</div>\n    <div id=\"form-field-email\" class=\"form-field\">{{ form.email.label_tag }} {{ form.email }}</div>\n    <div id=\"form-field-password1\" class=\"form-field\">{{ form.password1.label_tag }} {{ form.password1 }}</div>\n    <div id=\"form-field-password2\" class=\"form-field\">{{ form.password2.label_tag }} {{ form.password2 }}</div>\n\n    <button id=\"submit-signup\" type=\"submit\">Sign Up</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n<div id=\"submit-claim-form-container\" class=\"form-container\">\n<h2>Submit Claim</h2>\n<form id=\"submit-claim-form\" method=\"post\">\n    {% csrf_token %}\n    <div id=\"form-field-category\" class=\"form-field\">{{ form.category.label_tag }} {{ form.category }}</div>\n    <div id=\"form-field-amount\" class=\"form-field\">{{ form.amount.label_tag }} {{ form.amount }}</div>\n    <div id=\"form-field-description\" class=\"form-field\">{{ form.description.label_tag }} {{ form.description }}</div>\n    <button id=\"submit-claim\" type=\"submit\">Submit Claim</button>\n</form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\nLOGIN_URL = '/login/'\n\nLOGIN_REDIRECT_URL = '/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "/* Basic styles for the body and message display */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.message-container {\n    margin-bottom: 20px;\n}\n\n.message-success {\n    color: green;\n}\n\n.message-error {\n    color: red;\n}\n\n.form-container {\n    width: 300px;\n    margin: 0 auto;\n}\n\n.form-field {\n    margin-bottom: 10px;\n}\n\n.status-container {\n  margin: 20px;\n}\n\n.status-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.status-table th, .status-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\n\n.report-container {\n  margin: 20px;\n}\n\n.budget-table {\n  width: 100%;\n  border-collapse: collapse;\n}\n\n.budget-table th, .budget-table td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: left;\n}\n\n.total-claims {\n  margin-bottom: 10px;\n}\n\n.main-header {\n  background-color: #f0f0f0; /* Example color, can be changed */\n  padding: 10px 0;\n}\n\n.main-nav {\n  width: 90%;\n  margin: 0 auto;\n}\n\n.nav-list {\n  list-style: none;\n  padding: 0;\n  margin: 0;\n  text-align: right; /* Align navigation items to the right */\n}\n\n.nav-item {\n  display: inline;\n  margin-left: 20px;\n}\n\n.main-content {\n  padding: 20px;\n}\n\n.home-content{\n  text-align: center; /* Center the home page content */\n}\n\n.main-footer {\n  text-align: center;\n  background-color: #333; /* Example dark color */\n  color: white;\n  padding: 10px 0;\n  position: fixed; /* Sticky footer */\n  left: 0;\n  bottom: 0;\n  width: 100%;\n}"}], "13": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nclass CustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = '__all__'\n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = '__all__'\n\nclass PurchaseRecordForm(forms.ModelForm):\n    class Meta:\n        model = PurchaseRecord\n        exclude = ['datetime']\n\nclass PreferredProductForm(forms.ModelForm):\n    class Meta:\n        model = PreferredProduct\n        fields = '__all__'"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    # Add other customer fields as needed\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    # Add other product fields as needed\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    datetime = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.customer} - {self.product}\"\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f\"{self.customer} prefers {self.product}\""}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Customer URLs\n    path('', views.customer_list, name='customer_list'),\n    path('customers/add/', views.add_customer, name='add_customer'),\n    path('customers/edit/<int:pk>/', views.edit_customer, name='edit_customer'),\n    path('customers/delete/<int:pk>/', views.delete_customer, name='delete_customer'),\n\n    # Product URLs\n    path('products/', views.product_list, name='product_list'),\n    path('products/add/', views.add_product, name='add_product'),\n    path('products/edit/<int:pk>/', views.edit_product, name='edit_product'),\n    path('products/delete/<int:pk>/', views.delete_product, name='delete_product'),\n\n    path('purchases/', views.purchase_record_list, name='purchase_record_list'),\n    path('purchases/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchases/edit/<int:pk>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchases/delete/<int:pk>/', views.delete_purchase_record, name='delete_purchase_record'),\n\n    path('preferred_products/', views.preferred_products_list, name='preferred_products_list'),\n    path('preferred_products/add/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred_products/edit/<int:pk>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred_products/delete/<int:pk>/', views.delete_preferred_product, name='delete_preferred_product'),\n\n    # Sales Analysis\n    path('sales-analysis/', views.generate_sales_report, name='generate_sales_report'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom .forms import CustomerForm, ProductForm, PurchaseRecordForm, PreferredProductForm\nfrom django.db.models import Sum\n\n# Customer Views\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'customers/customer_list.html', {'customers': customers})\n\ndef add_customer(request):\n    if request.method == 'POST':\n        form = CustomerForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm()\n    return render(request, 'customers/add_customer.html', {'form': form})\n\ndef edit_customer(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        form = CustomerForm(request.POST, instance=customer)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm(instance=customer)\n    return render(request, 'customers/edit_customer.html', {'form': form, 'customer': customer})\n\ndef delete_customer(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        customer.delete()\n        return redirect('customer_list')\n    return render(request, 'customers/delete_customer.html', {'customer': customer})\n\n# Product Views\n# ... (Similar structure as Customer Views)\n\n# PurchaseRecord Views\n# ... (Similar structure as Customer Views)\n\n# PreferredProduct Views\n# ... (Similar structure as Customer Views)\n\n\ndef generate_sales_report(request):\n    report = PurchaseRecord.objects.values('product__name').annotate(total_quantity=Sum('quantity'), total_sales=Sum('quantity') * Sum('product__price'))\n    return render(request, 'report.html', {'report': report})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "add_preferred_product.html", "path": "example_app/templates/add_preferred_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-preferred-product-container\" class=\"container\">\n    <h1>Add Preferred Product</h1>\n    <form method=\"post\" id=\"add-preferred-product-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\" class=\"button\">Add</button>\n    </form>\n    <a href=\"{% url 'preferred_products_list' %}\" id=\"back-to-list-link\" class=\"link\">Back to List</a>\n</div>\n{% endblock %}"}, {"file": "add_purchase_record.html", "path": "example_app/templates/add_purchase_record.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-purchase-record-container\" class=\"container\">\n  <h1>Add Purchase Record</h1>\n  <form method=\"post\" id=\"add-purchase-record-form\" class=\"form\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"submit-button\" class=\"button\">Add</button>\n  </form>\n  <a href=\"{% url 'purchase_record_list' %}\" id=\"back-to-list-link\" class=\"link\">Back to List</a>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CRM System</title>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar\">\n      <ul id=\"nav-list\" class=\"nav-menu\">\n          <li id=\"customer-list-link-item\" class=\"nav-item\"><a href=\"{% url 'customer_list' %}\" class=\"nav-link\">Customers</a></li>\n          <li id=\"product-list-link-item\" class=\"nav-item\"><a href=\"{% url 'product_list' %}\" class=\"nav-link\">Products</a></li>\n          <li id=\"purchase-record-list-link-item\" class=\"nav-item\"><a href=\"{% url 'purchase_record_list' %}\" class=\"nav-link\">Purchases</a></li>\n          <li id=\"prefrred-product-list-link-item\" class=\"nav-item\"><a href=\"{% url 'preferred_products_list' %}\" class=\"nav-link\">Preferred Products</a></li>\n          <li id=\"sales-report-link-item\" class=\"nav-item\"><a href=\"{% url 'generate_sales_report' %}\" class=\"nav-link\">Sales Report</a></li>\n      </ul>\n    </nav>\n    <div id=\"content-container\" class=\"container\">\n      {% block content %}\n      {% endblock %}\n    </div>\n</body>\n</html>\n"}, {"file": "edit_preferred_product.html", "path": "example_app/templates/edit_preferred_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-preferred-product-container\" class=\"container\">\n    <h1>Edit Preferred Product</h1>\n    <form method=\"post\" id=\"edit-preferred-product-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\" class=\"button\">Save</button>\n    </form>\n    <a href=\"{% url 'preferred_products_list' %}\" id=\"back-to-list-link\" class=\"link\">Back to List</a>\n</div>\n{% endblock %}"}, {"file": "edit_purchase_record.html", "path": "example_app/templates/edit_purchase_record.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-purchase-record-container\" class=\"container\">\n  <h1>Edit Purchase Record</h1>\n  <form method=\"post\" id=\"edit-purchase-record-form\" class=\"form\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"submit-button\" class=\"button\">Save</button>\n  </form>\n  <a href=\"{% url 'purchase_record_list' %}\" id=\"back-to-list-link\" class=\"link\">Back to List</a>\n</div>\n{% endblock %}"}, {"file": "preferred_products_list.html", "path": "example_app/templates/preferred_products_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"preferred-products-list-container\" class=\"container\">\n    <h1>Preferred Products</h1>\n    <a href=\"{% url 'add_preferred_product' %}\" id=\"add-preferred-product-link\" class=\"link\">Add Preferred Product</a>\n    <ul id=\"preferred-products-list\" class=\"list\">\n      {% for preferred_product in preferred_products %}\n          <li id=\"preferred-product-item-{{ preferred_product.id }}\" class=\"item\">\n              {{ preferred_product }} \n              <a href=\"{% url 'edit_preferred_product' preferred_product.pk %}\" id=\"edit-preferred-product-link-{{ preferred_product.id }}\" class=\"link\">Edit</a>\n              <a href=\"{% url 'delete_preferred_product' preferred_product.pk %}\" id=\"delete-preferred-product-link-{{ preferred_product.id }}\" class=\"link\">Delete</a>\n          </li>\n      {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "purchase_record_list.html", "path": "example_app/templates/purchase_record_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"purchase-records-list-container\" class=\"container\">\n  <h1>Purchase Records</h1>\n  <a href=\"{% url 'add_purchase_record' %}\" id=\"add-purchase-record-link\" class=\"link\">Add Purchase Record</a>\n  <ul id=\"purchase-records-list\" class=\"list\">\n    {% for purchase in purchases %}\n    <li id=\"purchase-record-item-{{ purchase.id }}\" class=\"item\">\n      {{ purchase }} \n      <a href=\"{% url 'edit_purchase_record' purchase.pk %}\" id=\"edit-purchase-record-link-{{ purchase.id }}\" class=\"link\">Edit</a> \n      <a href=\"{% url 'delete_purchase_record' purchase.pk %}\" id=\"delete-purchase-record-link-{{ purchase.id }}\" class=\"link\">Delete</a>\n    </li>\n    {% endfor %}\n  </ul>\n</div>\n{% endblock %}"}, {"file": "report.html", "path": "example_app/templates/report.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"sales-report-container\" class=\"container\">\n    <h1>Sales Report</h1>\n    <table id=\"sales-report-table\" class=\"table\">\n        <thead>\n          <tr id=\"table-header-row\" class=\"row\">\n            <th id=\"product-name-header\" class=\"header\">Product Name</th>\n            <th id=\"total-quantity-header\" class=\"header\">Total Quantity</th>\n            <th id=\"total-sales-header\" class=\"header\">Total Sales</th>\n          </tr>\n        </thead>\n        <tbody>\n        {% for item in report %}\n          <tr id=\"report-item-row-{{ forloop.counter }}\" class=\"row\">\n            <td id=\"product-name-cell-{{ forloop.counter }}\" class=\"cell\">{{ item.product__name }}</td>\n            <td id=\"total-quantity-cell-{{ forloop.counter }}\" class=\"cell\">{{ item.total_quantity }}</td>\n            <td id=\"total-sales-cell-{{ forloop.counter }}\" class=\"cell\">{{ item.total_sales }}</td>\n          </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "add_customer.html", "path": "example_app/templates/customers/add_customer.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-customer-container\" class=\"container\">\n    <h1>Add Customer</h1>\n    <form method=\"post\" id=\"add-customer-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\" class=\"button\">Add</button>\n    </form>\n    <a href=\"{% url 'customer_list' %}\" id=\"back-to-list-link\" class=\"link\">Back to List</a>\n</div>\n{% endblock %}"}, {"file": "customer_detail.html", "path": "example_app/templates/customers/customer_detail.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"customer-details-container\" class=\"container\">\n  <h1>Customer Details</h1>\n  <p>Name: {{ customer.name }}</p>\n  </div>\n{% endblock %}"}, {"file": "customer_list.html", "path": "example_app/templates/customers/customer_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"customer-list-container\" class=\"container\">\n    <h1>Customer List</h1>\n    <a href=\"{% url 'add_customer' %}\" id=\"add-customer-link\" class=\"link\">Add Customer</a>\n    <ul id=\"customer-list\" class=\"list\">\n    {% for customer in customers %}\n        <li id=\"customer-item-{{ customer.id }}\" class=\"item\">\n            {{ customer.name }}\n            <a href=\"{% url 'edit_customer' customer.pk %}\" id=\"edit-customer-link-{{ customer.id }}\" class=\"link\">Edit</a>\n            <a href=\"{% url 'delete_customer' customer.pk %}\" id=\"delete-customer-link-{{ customer.id }}\" class=\"link\">Delete</a>\n        </li>\n    {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "edit_customer.html", "path": "example_app/templates/customers/edit_customer.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-customer-container\" class=\"container\">\n    <h1>Edit Customer</h1>\n    <form method=\"post\" id=\"edit-customer-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\" class=\"button\">Save</button>\n    </form>\n    <a href=\"{% url 'customer_list' %}\" id=\"back-to-list-link\" class=\"link\">Back to List</a>\n</div>\n{% endblock %}"}, {"file": "add_product.html", "path": "example_app/templates/products/add_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"add-product-container\" class=\"container\">\n    <h1>Add Product</h1>\n    <form method=\"post\" id=\"add-product-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\" class=\"button\">Add</button>\n    </form>\n    <a href=\"{% url 'product_list' %}\" id=\"back-to-list-link\" class=\"link\">Back to List</a>\n</div>\n{% endblock %}"}, {"file": "edit_product.html", "path": "example_app/templates/products/edit_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"edit-product-container\" class=\"container\">\n    <h1>Edit Product</h1>\n    <form method=\"post\" id=\"edit-product-form\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\" class=\"button\">Save</button>\n    </form>\n    <a href=\"{% url 'product_list' %}\" id=\"back-to-list-link\" class=\"link\">Back to List</a>\n</div>\n{% endblock %}"}, {"file": "product_detail.html", "path": "example_app/templates/products/product_detail.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"product-details-container\" class=\"container\">\n  <h1>Product Details</h1>\n    <p>Name: {{ product.name }}</p>\n    <p>Price: {{ product.price }}</p>\n  </div>\n{% endblock %}"}, {"file": "product_list.html", "path": "example_app/templates/products/product_list.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"product-list-container\" class=\"container\">\n    <h1>Product List</h1>\n    <a href=\"{% url 'add_product' %}\" id=\"add-product-link\" class=\"link\">Add Product</a>\n    <ul id=\"product-list\" class=\"list\">\n    {% for product in products %}\n        <li id=\"product-item-{{ product.id }}\" class=\"item\">\n            {{ product.name }}\n            <a href=\"{% url 'edit_product' product.pk %}\" id=\"edit-product-link-{{ product.id }}\" class=\"link\">Edit</a>\n            <a href=\"{% url 'delete_product' product.pk %}\" id=\"delete-product-link-{{ product.id }}\" class=\"link\">Delete</a>\n        </li>\n    {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "delete_customer.html", "path": "example_app/templates/customers/delete_customer.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"delete-customer-container\" class=\"container\">\n    <h1>Delete Customer</h1>\n    <p>Are you sure you want to delete {{ customer.name }}?</p>\n    <form method=\"post\" id=\"delete-customer-form\" class=\"form\">\n        {% csrf_token %}\n        <button type=\"submit\" id=\"confirm-delete-button\" class=\"button\">Confirm Delete</button>\n    </form>\n    <a href=\"{% url 'customer_list' %}\" id=\"cancel-delete-link\" class=\"link\">Cancel</a>\n</div>\n{% endblock %}"}, {"file": "delete_product.html", "path": "example_app/templates/products/delete_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"delete-product-container\" class=\"container\">\n    <h1>Delete Product</h1>\n    <p>Are you sure you want to delete {{ product.name }}?</p>\n    <form method=\"post\" id=\"delete-product-form\" class=\"form\">\n        {% csrf_token %}\n        <button type=\"submit\" id=\"confirm-delete-button\" class=\"button\">Confirm Delete</button>\n    </form>\n    <a href=\"{% url 'product_list' %}\" id=\"cancel-delete-link\" class=\"link\">Cancel</a>\n</div>\n{% endblock %}"}, {"file": "delete_purchase_record.html", "path": "example_app/templates/delete_purchase_record.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"delete-purchase-record-container\" class=\"container\">\n    <h1>Delete Purchase Record</h1>\n    <p>Are you sure you want to delete this purchase record?</p>\n    <form method=\"post\" id=\"delete-purchase-record-form\" class=\"form\">\n        {% csrf_token %}\n        <button type=\"submit\" id=\"confirm-delete-button\" class=\"button\">Confirm Delete</button>\n    </form>\n    <a href=\"{% url 'purchase_record_list' %}\" id=\"cancel-delete-link\" class=\"link\">Cancel</a>\n</div>\n{% endblock %}"}, {"file": "delete_preferred_product.html", "path": "example_app/templates/delete_preferred_product.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"delete-preferred-product-container\" class=\"container\">\n    <h1>Delete Preferred Product</h1>\n    <p>Are you sure you want to delete this preferred product relation?</p>\n    <form method=\"post\" id=\"delete-preferred-product-form\" class=\"form\">\n        {% csrf_token %}\n        <button type=\"submit\" id=\"confirm-delete-button\" class=\"button\">Confirm Delete</button>\n    </form>\n    <a href=\"{% url 'preferred_products_list' %}\" id=\"cancel-delete-link\" class=\"link\">Cancel</a>\n</div>\n{% endblock %}"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\nh1 {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"main-body\" class=\"page-body\">\n    <h1 id=\"hello-world-title\" class=\"main-title\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        # ... (rest of the migration code)\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"helloworld-body\" class=\"main-content\">\n    <h1 id=\"helloworld-title\" class=\"title\">Hello, World!</h1>\n    <a id=\"home-link\" href=\"{% url 'home' %}\" class=\"nav-link\">Go to Home</a>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"home-body\" class=\"main-content\">\n    <h1 id=\"home-title\" class=\"title\">Welcome Home!</h1>\n    <a id=\"helloworld-link\" href=\"{% url 'helloworld' %}\" class=\"nav-link\">Go to Hello World</a>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# ... (Other settings)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(os.path.dirname(__file__), 'example_app/static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(\"BashCrawl Help:\")\n        print(\"Navigate using 'cd <directory>' or 'cd ..' to go back.\")\n        print(\"List directory contents with 'ls'.\")\n        print(\"View your inventory with 'inventory'.\")\n        print(\"Type 'help' for in-game commands.\")\n        print(\"Type 'quit' to exit.\")\n\n\n    def print_game_help(self):\n        print(\"Available Commands:\")\n        for command in self.commands:\n            print(f\"- {command}\")\n\n    def list_contents(self):\n        contents = self.directory_structure.get(self.current_dir, [])\n        if contents:\n            print(\" \".join(contents))\n        else:\n            print(\"This directory is empty.\")\n        if self.current_dir in self.items:\n            print(self.items[self.current_dir])\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.normpath(os.path.join(self.current_dir, target_dir))\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n        elif target_dir == \"..\":\n            self.current_dir = os.path.dirname(self.current_dir)\n        else:\n            print(\"Invalid directory.\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"Inventory:\")\n            for item in self.inventory:\n                print(f\"- {item}\")\n        else:\n            print(\"Your inventory is empty.\")\n\n    def play(self):\n        while True:\n            command = input(f\"{self.current_dir} $ \").split()\n            if not command:\n                continue\n\n            action = command[0].lower()\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    print(\"Please specify a directory.\")\n            elif action == \"inventory\":\n                 self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                break\n            else:\n                print(\"Invalid command.\")\n\n            if self.current_dir in self.items and self.items[self.current_dir] not in self.inventory:  # Check and collect items\n                item = self.items[self.current_dir]\n                self.inventory.append(item)\n                print(f\"You found the {item}!\")\n                del self.items[self.current_dir]  # Remove the collected item\n\n    def main_menu(self):\n        while True:\n            self.print_main_menu()\n            choice = input(\"> \")\n            if choice == \"1\":\n                self.play()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                break\n            else:\n                print(\"Invalid choice.\")\n\ndef main():\n    game = BashCrawl()\n    game.main_menu()\n\nif __name__ == \"__main__\":\n    main()\n"}], "19": [{"file": "19-stdanswer.py", "path": "19-stdanswer.py", "code": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"Check if a file exists.\"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n\n\ndef read_dataset(file_path):\n    \"\"\"Read the dataset from a CSV file.\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except FileNotFoundError:\n        raise\n    except Exception as e:\n        raise ValueError(f\"Error reading CSV: {e}\")\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"Validate that the dataset contains all required columns.\"\"\"\n    missing_columns = set(required_columns) - set(df.columns)\n    if missing_columns:\n        raise KeyError(f\"Missing columns in dataset: {', '.join(missing_columns)}\")\n\n\ndef preprocess_dataset(df):\n    \"\"\"Preprocess the dataset, including cleaning and formatting dates.\"\"\"\n    try:\n        df['Date of death'] = pd.to_datetime(df['Date of death'])\n        df['Week'] = df['Date of death'].dt.isocalendar().week\n        return df\n    except ValueError as e:\n        raise ValueError(f\"Invalid date format: {e}\")\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"Plot the weekly deaths and save as a histogram image file.\"\"\"\n    plt.figure(figsize=(10, 6))\n    plt.bar(weekly_deaths.index, weekly_deaths.values)\n    plt.xlabel(\"Week Number\")\n    plt.ylabel(\"Number of Deaths\")\n    plt.title(\"Weekly Deaths Histogram\")\n    plt.savefig(output_file)\n\n\ndef main():\n    \"\"\"Main execution function.\"\"\"\n    try:\n        check_file_existence(input_file)\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death\n2024-01-01\n2024-01-08\n2024-01-15\n2024-01-22\n2024-01-01\n2024-01-08\n2024-01-15\n2024-01-15\n2024-02-05\n2024-02-12\n2024-02-19\n2024-02-26\n2024-02-05\n2024-02-12\n2024-02-19\n2024-02-19"}], "20": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'category', 'operations')\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/blogpost/{}/change/\" class=\"edit-link\">Edit</a> '\\\n            '<a href=\"/post/{}/delete/\" class=\"delete-link\">Delete</a>', obj.id, obj.id\n        )\n    operations.short_description = 'Operations'\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'operations')\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/category/{}/change/\" class=\"edit-link\">Edit</a> '\\\n            '<a href=\"/category/{}/delete/\" class=\"delete-link\">Delete</a>', obj.id, obj.id\n        )\n    operations.short_description = 'Operations'\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    pass\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name', 'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment', 'class': 'form-control'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        verbose_name_plural = 'Categories'\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=255)\n    content = models.TextField()\n\n    def __str__(self):\n        return f'{self.author} on {self.post.title}'\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return f'Message from {self.name}'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "def filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, Comment, ContactUs\nfrom .forms import CommentForm, BlogPostForm\n\n\ndef home(request):\n    posts = BlogPost.objects.all()\n    if request.method == 'POST':\n        query = request.POST.get('query')\n        if query: \n            posts = posts.filter(title__icontains=query) \n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all()\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.post = post\n            comment.save()\n            return redirect('post_detail', pk=post.pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n@login_required\ndef post_delete(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    post.delete()\n    messages.success(request, 'Post deleted successfully.')\n    return redirect('/admin/example_app/blogpost/')\n\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n@login_required\ndef category_delete(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    messages.success(request, 'Category deleted successfully.')\n    return redirect('/admin/example_app/category/')\n\n\ndef archive(request):\n    posts = BlogPost.objects.annotate(month=TruncMonth('created_at')).values('month').annotate(c=Count('id')).order_by()\n    return render(request, 'blog/archive.html', {'posts': posts})\n\ndef about(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        contact = ContactUs(name=name, email=email, message=message)\n        contact.save()\n        messages.success(request, 'Your message has been sent successfully.')\n        return redirect('about') # Redirect to the same page to avoid resubmission on refresh\n    return render(request, 'blog/about.html')\n\ndef search(request):\n    query = request.GET.get('query')\n    posts = BlogPost.objects.filter(title__icontains=query)\n    return render(request, 'blog/home.html', {'posts': posts, 'query': query})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\nheader {\n    background: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\nheader nav a {\n    color: #fff;\n    margin: 0 15px;\n    text-decoration: none;\n}\n\nmain {\n    padding: 20px;\n    background: #fff;\n    margin: 20px auto;\n    max-width: 800px;\n    border: 1px solid #ddd;\n}\n\nfooter {\n    text-align: center;\n    padding: 10px 0;\n    background: #333;\n    color: #fff;\n}\n"}, {"file": "about.html", "path": "example_app/templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-container\">\n    <h1>About Me</h1>\n    <p>This is the about page. You can write something about yourself here.</p>\n    <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required><br>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" required><br>\n        <label for=\"message\">Message:</label><br>\n        <textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\" required></textarea><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n    {% if messages %}\n        <ul id=\"message-list\" class=\"message-list\">\n            {% for message in messages %}\n                <li id=\"message-item-{{ message.tags }}\" class=\"message-item {{ message.tags }}\">{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "archive.html", "path": "example_app/templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"archive-container\" class=\"archive-container\">\n    <h1>Archive</h1>\n    {% for post in posts %}\n        <div id=\"archive-item-{{post.month}}\" class=\"archive-item\">\n            <h2>{{ post.month }}</h2>\n           <p>Count: {{ post.c }}</p>\n        </div>\n    {% endfor %}\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n      <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n        <a id=\"categories-link\" href=\"{% url 'category' %}\">Categories</a>\n        <a id=\"archive-link\" href=\"{% url 'archive' %}\">Archive</a>\n        <a id=\"about-link\" href=\"{% url 'about' %}\">About</a>\n      </nav>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}{% endblock %}\n    </main>\n    <footer id=\"main-footer\" class=\"main-footer\">\n        <p id=\"copyright\" class=\"copyright\">&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "category.html", "path": "example_app/templates/blog/category.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"categories-container\" class=\"categories-container\">\n    <h1>Categories</h1>\n    <ul id=\"category-list\" class=\"category-list\">\n    {% for category in categories %}\n        <li id=\"category-item-{{ category.id }}\" class=\"category-item\"><a href=\"{% url 'category_detail' category.pk %}\">{{ category.name }}</a></li>\n    {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <form id=\"search-form\" class=\"search-form\" method=\"post\" action=\"{% url 'search' %}\">\n        {% csrf_token %}\n        <input type=\"text\" id=\"search-input\" name=\"query\" placeholder=\"Search posts...\" value=\"{{ query|default:'' }}\">\n        <button type=\"submit\">Search</button>\n    </form>\n    <ul id=\"post-list\" class=\"post-list\">\n        {% for post in posts %}\n            <li id=\"post-item-{{ post.id }}\" class=\"post-item\">\n                <a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a> <small>- {{ post.category }}</small>\n            </li>\n        {% empty %}\n            <li id=\"no-post-message\" class=\"no-post-message\">No posts found.</li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "post_detail.html", "path": "example_app/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"post-detail-container\" class=\"post-detail-container\">\n    <h1 id=\"post-title\">{{ post.title }}</h1>\n    <p id=\"post-content\">{{ post.content }}</p>\n    <div id=\"comments-section\" class=\"comments-section\">\n      <h2>Comments</h2>\n      <ul id=\"comment-list\">\n        {% for comment in comments %}\n          <li id=\"comment-item-{{comment.id}}\" class=\"comment-item\">\n            <p id=\"comment-author-{{comment.id}}\" class=\"comment-author\">{{ comment.author }}</p>\n            <p id=\"comment-content-{{comment.id}}\" class=\"comment-content\">{{ comment.content }}</p>\n          </li>\n        {% endfor %}\n      </ul>\n      <form id=\"comment-form\" class=\"comment-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-comment-button\" type=\"submit\">Add Comment</button>\n      </form>\n    </div>\n</div>\n{% endblock %}"}, {"file": "category_detail.html", "path": "example_app/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-detail-container\" class=\"category-detail-container\">\n  <h1 id=\"category-title\">{{ category.name }}</h1>\n  <ul id=\"category-posts-list\">\n    {% for post in posts %}\n    <li id=\"category-post-item-{{post.id}}\" class=\"category-post-item\">\n      <a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a>\n    </li>\n    {% endfor %}\n  </ul>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATICFILES_DIRS = [\n   os.path.join(BASE_DIR, \"example_app/static\")\n]\n\nLOGIN_URL = '/admin/login/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}]}