{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Your Weight (kg)', min_value=0)\n    height = forms.FloatField(label='Your Height (cm)', min_value=0)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\",\n    \"Invalid weight\": \"The weight can't be less than 0.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    bmi = None\n    interpretation = None\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height'] / 100  # Convert cm to meters\n            if weight > 0 and height > 0:\n                bmi = weight / (height * height)\n                for category, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        interpretation = bmi_interpretation[category]\n                        break\n            elif height <= 0:\n                interpretation = bmi_interpretation[\"Invalid height\"]\n            else:\n                interpretation = bmi_interpretation[\"Invalid weight\"]\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'interpretation': interpretation})\n\ndef advice(request):\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html>\n<head><title>Advice</title></head>\n<body id=\"advice-body\" class=\"advice-page\">\n    <h1 id=\"advice-title\" class=\"advice-title\">Health Advice</h1>\n    <p id=\"advice-text\" class=\"advice-text\">Specific advice based on calculated BMI will go here.</p>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body id=\"bmi-body\" class=\"bmi-page\">\n    <h1 id=\"bmi-title\" class=\"bmi-title\">BMI Calculator</h1>\n    <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"bmi-submit\" class=\"bmi-submit\" type=\"submit\">Calculate</button>\n    </form>\n    {% if bmi %}\n        <p id=\"bmi-result\" class=\"bmi-result\">Your BMI: {{ bmi|floatformat:2 }}</p>\n        <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">{{ interpretation }}</p>\n    {% endif %}\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html>\n<head><title>Homepage</title></head>\n<body  id=\"home-body\" class=\"home-page\">\n    <h1 id=\"home-title\" class=\"home-title\">Welcome to the BMI Calculator</h1>\n    <p id=\"home-intro\" class=\"home-intro\">Learn about your Body Mass Index (BMI).</p>\n    <a id=\"bmi-link\" class=\"bmi-link\" href=\"bmi-calculator/\">Calculate your BMI</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    #...\n    'example_app',\n]\n\n# ... (rest of the settings)\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Chinese Yuan'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc'),\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', min_value=0.01)\n    source_currency = forms.ChoiceField(label='Source Currency', choices=CURRENCY_CHOICES)\n    target_currency = forms.ChoiceField(label='Target Currency', choices=CURRENCY_CHOICES)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass CurrencyConvertRateModel(models.Model):\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=10, decimal_places=6, verbose_name='Rate')\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Datetime')\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency} ({self.rate}) at {self.datetime}'"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport datetime\nfrom io import BytesIO\nimport base64\nfrom matplotlib import pyplot as plt\nfrom django.shortcuts import render\nfrom django.views.generic import TemplateView\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated(source_currency, target_currency):\n    USD_BASE = {\n        'USD': 1.00, 'EUR': 0.85, 'GBP': 0.75, 'JPY': 110.00,\n        'AUD': 1.35, 'CNY': 7.00, 'CAD': 1.25, 'CHF': 0.92\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\ndef get_conversion_rate(source_currency, target_currency):\n    rate = CurrencyConvertRateModel.objects.filter(source_currency=source_currency, target_currency=target_currency).order_by('-datetime').first()\n    if rate:\n        return rate.rate\n    updated_rate = get_updated(source_currency, target_currency)\n    CurrencyConvertRateModel.objects.create(source_currency=source_currency, target_currency=target_currency, rate=updated_rate)\n    return updated_rate\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            rate = get_conversion_rate(source_currency, target_currency)\n            converted_amount = amount * rate\n            context = {'form': form, 'converted_amount': converted_amount, 'rate': rate}\n            return render(request, self.template_name, context)\n        return render(request, self.template_name, {'form': form})\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        plot = self.plot_chart('USD', 'EUR')  # Example currencies\n        return render(request, self.template_name, {'plot': plot})\n\n    @staticmethod\n    def plot_chart(source_currency, target_currency):\n        dates = []\n        rates = []\n        for i in range(30): # 30 days of data\n            date = datetime.date.today() - datetime.timedelta(i)\n            dates.append(date)\n            rates.append(get_updated(source_currency, target_currency))\n\n        plt.plot(dates, rates)\n        plt.xlabel('Date')\n        plt.ylabel('Exchange Rate')\n        plt.title(f'{source_currency} to {target_currency} Exchange Rate Trends')\n        buffer = BytesIO()\n        plt.savefig(buffer, format='png')\n        buffer.seek(0)\n        image_png = buffer.getvalue()\n        buffer.close()\n        graphic = base64.b64encode(image_png)\n        graphic = graphic.decode('utf-8')\n        plt.close()\n        return graphic"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0002_auto_20240905_0156.py", "path": "example_app/migrations/0002_auto_20240905_0156.py", "code": "# Generated by Django 3.2.13 on 2024-09-05 01:56\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        ('example_app', '0001_initial'),\n    ]\n\n    operations = [\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='id',\n            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='rate',\n            field=models.DecimalField(decimal_places=6, max_digits=10, verbose_name='Rate'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='source_currency',\n            field=models.CharField(max_length=3, verbose_name='Source Currency'),\n        ),\n        migrations.AlterField(\n            model_name='currencyconvertratemodel',\n            name='target_currency',\n            field=models.CharField(max_length=3, verbose_name='Target Currency'),\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n</head>\n<body>\n    <div id=\"chart-container\" class=\"chart-container\">\n        {% if plot %}\n            <img id=\"rate-chart\" class=\"rate-chart\" src=\"data:image/png;base64,{{ plot }}\" alt=\"Exchange Rate Trends Chart\">\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"converter-form\" class=\"converter-form\">\n        <form method=\"post\">\n            {% csrf_token %}\n            <div>\n                <label for=\"id_amount\">Amount:</label>\n                {{ form.amount }}\n            </div>\n            <div>\n                <label for=\"id_source_currency\">Source Currency:</label>\n                {{ form.source_currency }}\n            </div>\n            <div>\n                <label for=\"id_target_currency\">Target Currency:</label>\n               {{ form.target_currency }}\n            </div>\n            <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Convert</button>\n        </form>\n    </div>\n    <div id=\"result-container\" class=\"result-container\">\n        {% if converted_amount %}\n        <p id=\"converted-amount\" class=\"converted-amount\">Converted Amount: {{ converted_amount }}</p>\n        <p id=\"exchange-rate\" class=\"exchange-rate\">Exchange Rate: {{ rate }}</p>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"+\n            \"available on your PYTHONPATH environment variable? Did you \"+\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.views import View\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return 'Please select at least one character type.'\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    generated_password = ''\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase')\n        include_lowercase = request.POST.get('lowercase')\n        include_numbers = request.POST.get('numbers')\n        include_symbols = request.POST.get('symbols')\n\n        generated_password = generate_password(\n            length,\n            include_uppercase,\n            include_lowercase,\n            include_numbers,\n            include_symbols\n        )\n\n    return render(request, 'generator.html', {'generated_password': generated_password})\n\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; margin: 20px;}\nh1 { color: #333; }\n#copy-message { display: none; color: green; margin-top: 10px; }\n.container { display: flex; flex-direction: column; align-items: center; }\nlabel { margin-bottom: 5px; }\ninput[type=\"checkbox\"] { margin-right: 5px; }\nbutton { padding: 8px 16px; background-color: #4CAF50; color: white; border: none; cursor: pointer; margin-top: 10px;}\n#password-container { margin-top: 10px; border: 1px solid #ccc; padding: 10px; width: 300px; word-break: break-all; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"about-us-container\">\n        <h1 id=\"about-us-title\">About Us</h1>\n        <p id=\"about-us-text\">This is the about us page for the password generator.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <div class=\"container\" id=\"generator-container\">\n        <h1 id=\"generator-title\">Password Generator</h1>\n        <form method=\"post\" id=\"generator-form\">\n            {% csrf_token %}\n            <label for=\"length\">Length:</label>\n            <input type=\"number\" name=\"length\" id=\"length\" value=\"12\" min=\"1\" max=\"100\"><br>\n\n            <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" checked>\n            <label for=\"uppercase\">Uppercase</label><br>\n\n            <input type=\"checkbox\" name=\"lowercase\" id=\"lowercase\" checked>\n            <label for=\"lowercase\">Lowercase</label><br>\n\n            <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" checked>\n            <label for=\"numbers\">Numbers</label><br>\n\n            <input type=\"checkbox\" name=\"symbols\" id=\"symbols\" checked>\n            <label for=\"symbols\">Symbols</label><br>\n\n            <button type=\"submit\" id=\"generate-button\">Generate Password</button>\n        </form>\n\n        <div id=\"password-container\">\n          {% if generated_password %}\n              <p id=\"password\">{{ generated_password }}</p>\n              <button onclick=\"copyToClipboard()\" id=\"copy-button\">Copy Password</button>\n              <span id=\"copy-message\"></span>\n          {% endif %}\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n  <div class=\"container\" id=\"home-container\">\n      <h1 id=\"home-title\">Welcome to the Password Generator!</h1>\n      <a href=\"/generator/\" id=\"generate-link\">Generate a Password</a>\n      <a href=\"/about-us/\" id=\"about-us-link\">About Us</a>\n  </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        buffer = io.BytesIO()\n        img.save(buffer, format='PNG')\n        img_str = base64.b64encode(buffer.getvalue()).decode()\n\n        return render(request, 'qr_app/generate.html', {'qr_code': img_str})\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n        response = HttpResponse(content_type='image/png')\n        response['Content-Disposition'] = f'attachment; filename=\"qrcode.png\"'\n        img.save(response, 'PNG')\n        return response\n    return render(request, 'qr_app/generate.html')  # Redirect to generate page if accessed directly\n\n\ndef about(request):\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"about-content\">\n        <h1>About the QR Code Generator</h1>\n        <p>This is a simple QR code generator built with Django.  It allows you to create custom QR codes for various purposes.</p>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n\n        #qr-code-container{\n            display: flex;\n            justify-content: center; /* Horizontally center */\n            align-items: center;     /* Vertically center */\n            height: 200px;        /* Example height */\n        }\n    </style>\n</head>\n<body>\n    <div id=\"generate-form\" class=\"form-container\">\n        <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <label for=\"data\">Data:</label>\n            <input type=\"text\" id=\"data\" name=\"data\" required>\n\n            <label for=\"fill_color\">Fill Color:</label>\n            <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n\n            <label for=\"back_color\">Background Color:</label>\n            <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\">\n\n            <button type=\"submit\">Generate QR Code</button>\n        </form>\n    </div>\n\n    {% if qr_code %}\n    <div id=\"qr-code-container\">\n        <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\" />\n    </div>\n        <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n          {% csrf_token %}\n          <input type=\"hidden\" name=\"data\" value=\"{{ data }}\">\n          <input type=\"hidden\" name=\"fill_color\" value=\"{{ fill_color }}\">  \n          <input type=\"hidden\" name=\"back_color\" value=\"{{ back_color }}\">\n          <button type=\"submit\">Download QR Code</button>\n      </form>\n    {% endif %}\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-content\">\n        <h1>Welcome to the QR Code Generator</h1>\n        <a href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n         <br/>\n        <a href=\"{% url 'about' %}\">About Us</a> \n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong secret key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "qr_code_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()"}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n        elif 'file_upload' in request.FILES:\n            uploaded_file = request.FILES['file_upload']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            with open(fs.path(filename), 'r') as f:\n                markdown_text = f.read()\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n    return render(request, 'convert.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"content-container\">\n        <h1>About this Markdown to HTML Converter</h1>\n        <p>This simple web application allows you to convert Markdown text to HTML. You can either paste your Markdown directly into the text area or upload a Markdown file.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"content-container\">\n        <h1>Markdown to HTML Converter</h1>\n\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" name=\"markdown_text\" rows=\"10\" cols=\"80\" placeholder=\"Enter Markdown here...\"></textarea><br>\n            <input type=\"file\" id=\"file-upload\" name=\"file_upload\"><br>\n            <input type=\"submit\" value=\"Convert\">\n        </form>\n\n        {% if html %}\n            <div id=\"html-output\" class=\"output-container\">\n                <h2>HTML Output:</h2>\n                {{ html | safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"content-container\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n        <p>This tool helps you easily convert Markdown text to HTML.  Click below to get started.</p>\n        <a href=\"{% url 'convert' %}\">Convert Markdown</a><br>\n        <a href=\"{% url 'about' %}\">About</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" +\n            \"available on your PYTHONPATH environment variable? Did you \" +\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item,\n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView, CreateView, UpdateView\nfrom .models import TodoList, TodoItem\nfrom django.urls import reverse_lazy\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\n\nclass TodoListUpdate(UpdateView):\n    model = TodoList\n    fields = ['title', 'description']\n    success_url = reverse_lazy('todo_list')\n    template_name = 'edit_todo.html'\n\n\nedit_todo = TodoListUpdate.as_view()\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        return context\n\n    def post(self, request, *args, **kwargs):\n        todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoItem.objects.create(todolist=todolist, title=title, description=description)\n        return redirect('view_todo_item', pk=todolist.pk)\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todolist_pk)\n\n\nclass TodoItemUpdate(UpdateView):\n    model = TodoItem\n    fields = ['title', 'description', 'completed']\n    template_name = 'edit_todo_item.html'\n\n    def get_success_url(self):\n        return reverse_lazy('view_todo_item', kwargs={'pk': self.object.todolist.pk})\n\n\nedit_todo_item = TodoItemUpdate.as_view()\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todo_item.todolist.pk)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        completed_count = todo_items.filter(completed=True).count()\n        total_count = todo_items.count()\n\n        if total_count > 0:\n            completion_rate = (completed_count / total_count) * 100\n        else:\n            completion_rate = 0\n\n        context['completion_rate'] = completion_rate\n        # Add more analysis data as needed\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"analysis-container\" class=\"analysis-container\">\n      <canvas id=\"completion-rate-chart\" class=\"chart\"></canvas>\n    </div>\n    <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Return Home</a>\n\n    <script>\n        const ctx = document.getElementById('completion-rate-chart').getContext('2d');\n        const completionRate = {{ completion_rate }};\n\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    data: [completionRate, 100 - completionRate],\n                    backgroundColor: [\n                        'rgb(54, 162, 235)',\n                        'rgb(255, 99, 132)'\n                    ],\n                    hoverOffset: 4\n                }]\n            },\n            options: {\n                plugins: {\n                    title: {\n                        display: true,\n                        text: 'Task Completion Rate'\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n  <div id=\"edit-todo-container\" class=\"edit-todo-container\">\n    <form id=\"edit-todo-form\" class=\"edit-todo-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-todo\" class=\"submit-button\" type=\"submit\">Save Changes</button>\n    </form>\n  </div>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'todo_list' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n  <div id=\"edit-todo-item-container\" class=\"edit-todo-item-container\">\n    <form id=\"edit-todo-item-form\" class=\"edit-todo-item-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"submit-edit\" class=\"submit-button\" type=\"submit\">Save Changes</button>\n    </form>\n  </div>\n    <a id=\"cancel-edit\" class=\"cancel-link\" href=\"{% url 'view_todo_item' pk=object.todolist.pk %}\">Cancel</a>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-title\">Welcome to Your Todo App</h1>\n        <a id=\"todo-list-link\" class=\"nav-link\" href=\"{% url 'todo_list' %}\">View Your Todo Lists</a>\n        <a id=\"analysis-link\" class=\"nav-link\" href=\"{% url 'analysis' %}\">View Task Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n  <div id=\"task-list-container\" class=\"task-list-container\">\n    <h2 id=\"todolist-title\">{{ todolist.title }}</h2>\n    <ul id=\"task-list\" class=\"task-list\">\n      {% for task in object_list %}\n      <li id=\"task-{{ task.id }}\" class=\"task-item\">\n        {{ task.title }}\n        <a id=\"edit-task-{{ task.id }}\" class=\"action-link\" href=\"{% url 'edit_todo_item' pk=task.pk %}\">Edit</a>\n        <a id=\"delete-task-{{ task.id }}\" class=\"action-link\" href=\"{% url 'delete_todo_item' pk=task.pk %}\">Delete</a>\n        <a id=\"complete-task-{{ task.id }}\" class=\"action-link\" href=\"{% url 'complete_todo_item' pk=task.pk %}\">{% if task.completed %}Mark as Incomplete{% else %}Mark as Complete{% endif %}</a>\n      </li>\n      {% endfor %}\n    </ul>\n\n    <form id=\"new-task-form\" class=\"new-task-form\" method=\"post\">\n        {% csrf_token %}\n        <input id=\"new-task-title\" type=\"text\" name=\"title\" placeholder=\"New task title\" required>\n        <textarea id=\"new-task-description\" name=\"description\" placeholder=\"New task description\"></textarea>\n        <button id=\"submit-new-task\" class=\"submit-button\" type=\"submit\">Add Task</button>\n    </form>\n    <div class=\"list-actions\">\n      <a id=\"edit-todolist-{{ todolist.id }}\" class=\"action-link\" href=\"{% url 'edit_todo' pk=todolist.pk %}\">Edit List</a>\n      <a id=\"delete-todolist-{{ todolist.id }}\" class=\"action-link\" href=\"{% url 'delete_todo' pk=todolist.pk %}\">Delete List</a>\n    </div>\n  </div>\n  <a id=\"back-to-lists\" class=\"back-link\" href=\"{% url 'todo_list' %}\">Back to Lists</a>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body>\n  <div id=\"todo-list-page-container\" class=\"todo-list-page-container\">\n    <h1 id=\"list-page-title\" class=\"list-page-title\">Your Todo Lists</h1>\n    <ul id=\"todo-lists\" class=\"todo-lists\">\n        {% for todolist in object_list %}\n        <li id=\"todolist-{{ todolist.id }}\" class=\"todo-list-item\">\n            <a id=\"view-todolist-{{ todolist.id }}\" class=\"todo-list-link\" href=\"{% url 'view_todo_item' pk=todolist.pk %}\">{{ todolist.title }}</a>\n            <span>{% if todolist.completed %} (Completed){% endif %}</span>\n        </li>\n        {% endfor %}\n    </ul>\n\n    <form id=\"new-list-form\" class=\"new-list-form\" method=\"post\">\n        {% csrf_token %}\n        <input id=\"new-list-title\" class=\"input-field\" type=\"text\" name=\"title\" placeholder=\"New list title\" required>\n        <textarea id=\"new-list-description\" class=\"textarea-field\" name=\"description\" placeholder=\"New list description\"></textarea>\n        <button id=\"submit-new-list\" class=\"submit-button\" type=\"submit\">Create List</button>\n    </form>\n  </div>\n    <a id=\"home-page-link\" class=\"home-link\" href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    date = models.DateField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    description = models.TextField(blank=True)\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Support request from {self.name} ({self.email})'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('signup/', views.SignupView.as_view(), name='signup'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),\n    path('charts/', views.ChartsView.as_view(), name='charts'),\n    path('settings/', views.SettingsView.as_view(), name='settings'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('download_report/', views.DownloadReportView.as_view(), name='download_report'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime, timedelta\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\nfrom .forms import LoginForm, SignupForm, SupportRequestForm, TransactionForm  # Assuming you'll create these\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    pass\n\nclass HomeView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n# ... (Other views with basic implementation for now)"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"charts-container\" class=\"charts-container\">\n      <canvas id=\"myChart\" class=\"chart\"></canvas>\n    </div>\n</body>\n</html>"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n  <div id=\"dashboard\" class=\"dashboard\">\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n  <div id=\"home-page\" class=\"home\">\n   </div>\n</body>\n</html>"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n<div id=\"login-form\" class = \"login\">\n     </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n    <div id=\"settings\" class=\"settings\">\n  </div>\n</body>\n</html>"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n  <div id=\"signup-form\" class=\"signup\">\n </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n <div id=\"support-area\" class=\"support\">\n  </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here' # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n# ... (Rest of the settings)"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "8": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']\n        widgets = {\n            'datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'})\n        }"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AddEventView, EditEventView, DeleteEventView, ListEventsView, EventDetailsView, HelpView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('calendar/add-event/', AddEventView.as_view(), name='add_event'),\n    path('calendar/edit-event/<int:event_id>/', EditEventView.as_view(), name='edit_event'),\n    path('calendar/delete-event/<int:event_id>/', DeleteEventView.as_view(), name='delete_event'),\n    path('calendar/view-events/', ListEventsView.as_view(), name='view_events'),\n    path('calendar/view-event-details/<int:event_id>/', EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', HelpView.faq, name='faq'),\n    path('help/user-guide/', HelpView.user_guide, name='user_guide'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.http import HttpResponse\nfrom django.contrib import messages\n\nfrom .forms import EventForm\nfrom .models import Event\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\nclass AddEventView(View):\n    def get(self, request):\n        form = EventForm()\n        return render(request, 'add_event.html', {'form': form})\n\n    def post(self, request):\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')  # Redirect to a success page\n        return render(request, 'add_event.html', {'form': form})\n\nclass EditEventView(View):\n    # ... similar structure as AddEventView ...\n\nclass DeleteEventView(View):\n    # ... logic for deleting events ...\n\nclass ListEventsView(View):\n    # ... logic for listing and searching events ...\n\nclass EventDetailsView(View):\n    # ... logic for displaying event details ...\n\nclass HelpView:\n    @staticmethod\n    def faq(request):\n        return render(request, 'faq.html')\n\n    @staticmethod\n    def user_guide(request):\n        return render(request, 'user_guide.html')"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-30 08:50\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "add_event.html", "path": "example_app/templates/add_event.html", "code": "<html>\n<head>\n<title>Add Event</title>\n</head>\n<body>\n    <div id=\"add-event-container\" class=\"add-event-form\">\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submit-button\" type=\"submit\" class=\"submit-button\">Add Event</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "example_app/templates/edit_event.html", "code": "<html>\n<head>\n<title>Edit Event</title>\n</head>\n<body>\n<!-- Similar structure as add_event.html -->\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head>\n    <title>Home Page</title>\n</head>\n<body>\n    <div id=\"home-container\">\n    </div>\n</body>\n</html>"}, {"file": "faq.html", "path": "example_app/templates/faq.html", "code": "<html>\n<head>\n<title>FAQ</title>\n</head>\n<body>\n    <div id=\"faq-container\" class=\"faq-content\"> \n        </div>\n</body>\n</html>"}, {"file": "user_guide.html", "path": "example_app/templates/user_guide.html", "code": "<html>\n<head>\n    <title>User Guide</title>\n</head>\n<body>\n    <div id=\"user-guide-container\" class=\"user-guide-content\">\n    </div>\n</body>\n</html>"}, {"file": "view_events.html", "path": "example_app/templates/view_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Event List</title>\n</head>\n<body>\n    <div id=\"event-list-container\" class=\"event-list\">\n        </div>\n</body>\n</html>"}, {"file": "view_event_details.html", "path": "example_app/templates/view_event_details.html", "code": "<html>\n<head>\n<title>Event Details</title>\n</head>\n<body>\n    <div id=\"event-details-container\" class=\"event-details\">\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "project_name/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "project_name/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_name.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators as before)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "project_name/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project_name/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_wsgi_application()"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__' # Or specify the fields you need\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__' # Or specify the fields you need"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue = models.TextField()\n\n    def __str__(self):\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.urls import reverse_lazy\nfrom django.views.generic import TemplateView, FormView, CreateView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\nclass PricingPageView(CreateView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('pricing') # Redirect to the same page after successful submission\n\n    def form_valid(self, form):\n        messages.success(self.request, 'Your message has been sent!')\n        return super().form_valid(form)\n\n\nclass SupportView(CreateView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('support')\n\n    def form_valid(self, form):\n         messages.success(self.request, 'Your support request has been submitted!')\n         return super().form_valid(form)\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body>\n    <div id=\"about-us-container\" class=\"about-us\">\n        <!-- Content of About Us Page -->\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body>\n    <div id=\"features-container\" class=\"features\">\n        <!-- Content of Features Page -->\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body>\n    <div id=\"home-container\" class=\"home\">\n        <!-- Content of Home Page -->\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body>\n    <div id=\"pricing-container\" class=\"pricing\">\n        <!-- Content of Pricing Page -->\n        <form id=\"contact-form\" class=\"contact-form\" method=\"post\"> \n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n        {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body>\n    <div id=\"support-container\" class=\"support\">\n         <form id=\"support-form\" class=\"support-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n        {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key' # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    \"\"\"\n    User registration form.\n    \"\"\"\n    pass\n\nclass LoginForm(forms.Form):\n    \"\"\"\n    User login form.\n    \"\"\"\n    username = forms.CharField(max_length=150)\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass MealForm(forms.ModelForm):\n    \"\"\"\n    Form for logging meals with specific fields and widgets.\n    \"\"\"\n    class Meta:\n        model = Meal\n        fields = '__all__'\n\nclass ActivityForm(forms.ModelForm):\n    \"\"\"\n    Form for logging activities with specific fields and widgets.\n    \"\"\"\n    class Meta:\n        model = Activity\n        fields = '__all__'\n\nclass ProfileForm(forms.ModelForm):\n    \"\"\"\n    Form for updating user profile and preferences.\n    \"\"\"\n    class Meta:\n        model = UserProfile\n        exclude = ('user',)\n\nclass PreferencesForm(forms.ModelForm):\n    \"\"\"\n    Form for updating dietary preferences.\n    \"\"\"\n    class Meta:\n        model = UserProfile  # Assuming preferences are part of UserProfile\n        fields = ('dietary_preferences',) # Replace with actual preference fields"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    # Add other profile fields here (e.g., dietary preferences)\n    dietary_preferences = models.CharField(max_length=255, blank=True)\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    date = models.DateField()\n    # Add other meal-related fields\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories_burned = models.IntegerField()\n    date = models.DateField()\n    # Add other activity-related fields"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth.views import LogoutView\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', LogoutView.as_view(next_page='home'), name='logout'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_log, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_log, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\ndef get_weekly_calorie_chart(user):\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n\n    return week_data"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date, timedelta\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nimport matplotlib.pyplot as plt\nimport io\nimport base64\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')\n            else:\n                messages.error(request, 'Invalid username or password.')\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n@login_required\ndef dashboard(request):\n    today = date.today()\n    week_ago = today - timedelta(days=7)\n    meals = Meal.objects.filter(user=request.user, date__range=[week_ago, today]).order_by('-date')\n    activities = Activity.objects.filter(user=request.user, date__range=[week_ago, today]).order_by('-date')\n    return render(request, 'dashboard.html', {'meals': meals, 'activities': activities})\n\n@login_required\ndef meal_log(request):\n    meals = Meal.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'meal_log.html', {'meals': meals})\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('meal_log')  # Redirect to the meal log page\n    else:\n        form = MealForm()\n    return render(request, 'add_meal.html', {'form': form})\n\n@login_required\ndef edit_meal(request, id):\n    meal = Meal.objects.get(id=id, user=request.user)  # Ensure user owns the meal\n    if request.method == 'POST':\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            form.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'edit_meal.html', {'form': form, 'meal': meal})\n\n@login_required\ndef delete_meal(request, id):\n    meal = Meal.objects.get(id=id, user=request.user)  # Ensure user owns the meal\n    meal.delete()\n    return redirect('meal_log')\n\n@login_required\ndef activity_log(request):\n    activities = Activity.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'activity_log.html', {'activities': activities})\n\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False)\n            activity.user = request.user\n            activity.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm()\n    return render(request, 'add_activity.html', {'form': form})\n\n@login_required\ndef edit_activity(request, id):\n    activity = Activity.objects.get(id=id, user=request.user)\n    if request.method == 'POST':\n        form = ActivityForm(request.POST, instance=activity)\n        if form.is_valid():\n            form.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm(instance=activity)\n    return render(request, 'edit_activity.html', {'form': form, 'activity': activity})\n\n\n@login_required\ndef delete_activity(request, id):\n    activity = Activity.objects.get(id=id, user=request.user)\n    activity.delete()\n    return redirect('activity_log')\n\n@login_required\ndef settings(request):\n    return render(request, 'settings.html')\n\n@login_required\n\n@login_required\ndef meal_search(request):\n    # Implement meal search functionality here\n    return render(request, 'meal_log.html')  # Replace with appropriate template\n\n@login_required\ndef activity_search(request):\n    # Implement activity search functionality here\n    return render(request, 'activity_log.html')  # Replace with appropriate template\n\ndef tutorials(request):\n    return render(request, 'tutorials.html')\n\n@login_required\ndef update_profile(request):\n    profile = request.user.profile\n    if request.method == 'POST':\n        form = ProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Profile updated successfully!')\n            return redirect('settings')\n    else:\n        form = ProfileForm(instance=profile)\n    return render(request, 'update_profile.html', {'form': form})\n\n@login_required\ndef update_preferences(request):\n    profile = request.user.profile\n    if request.method == 'POST':\n        form = PreferencesForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            return redirect('settings')\n    else:\n        form = PreferencesForm(instance=profile)  # Create a PreferencesForm instance\n    return render(request, 'update_preferences.html', {'form': form})\n\n@login_required\ndef weekly_calorie_chart(request):\n    chart_data = get_weekly_calorie_chart(request.user)\n    plt.figure(figsize=(10, 5))\n    plt.plot(chart_data['dates'], chart_data['intake'], label='Calorie Intake')\n    plt.plot(chart_data['dates'], chart_data['expenditure'], label='Calories Burned')\n    plt.xlabel('Date')\n    plt.ylabel('Calories')\n    plt.title('Weekly Calorie Chart')\n    plt.legend()\n    buffer = io.BytesIO()\n    plt.savefig(buffer, format='png')\n    buffer.seek(0)\n    image_png = buffer.getvalue()\n    buffer.close()\n    graphic = base64.b64encode(image_png)\n    graphic = graphic.decode('utf-8')\n    return render(request, 'weekly_calorie_chart.html', {'graphic': graphic, 'chart_data': chart_data})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Activity Log</title>\n</head>\n<body>\n    <div id=\"activity-log-container\" class=\"container\">\n        <h1>Activity Log</h1>\n        <button id=\"add-activity-button\" class=\"btn btn-primary\">Add Activity</button>\n        <div id=\"search-container\" class=\"search-container\"> <input type=\"text\" id=\"search-input\" placeholder=\"Search Activities\" class=\"form-control search-input\"> </div>\n        <table id=\"activity-table\" class=\"table table-striped\">\n            <thead>\n                <tr>\n                  <th>Date</th>\n                  <th>Activity</th>\n                  <th>Calories Burned</th>\n                  <th>Actions</th>\n                </tr>\n              </thead>\n            <tbody>\n                {% for activity in activities %}\n                    <tr>\n                        <td>{{ activity.date }}</td>\n                        <td>{{ activity.name }}</td>\n                        <td>{{ activity.calories_burned }}</td>\n                        <td>\n                            <a href=\"{% url 'edit_activity' activity.id %}\">Edit</a> |\n                            <a href=\"{% url 'delete_activity' activity.id %}\">Delete</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n</body>\n</html>"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Activity - Calorie Tracker</title>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Add Activity</h1>\n    <form id=\"add-activity-form\" method=\"post\" class=\"add-form\"> \n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"submit-button\" type=\"submit\" class=\"btn btn-primary\">Add Activity</button>\n    </form>\n  </div>\n</body>\n</html>"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Meal - Calorie Tracker</title>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Add Meal</h1>\n    <form id=\"add-meal-form\" method=\"post\" class=\"add-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-meal-button\" type=\"submit\" class=\"btn btn-primary\">Add Meal</button>\n    </form>\n  </div>\n</body>\n</html>"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Dashboard</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"dashboard-title\">Dashboard</h1>\n        <div id=\"meals-section\" class=\"dashboard-section\">\n            <h2>Recent Meals</h2>\n            <ul id=\"meals-list\">\n                {% for meal in meals %}\n                    <li>{{ meal.name }} - {{ meal.calories }} calories ({{ meal.date }})</li>\n                {% endfor %}\n            </ul>\n        </div>\n        <div id=\"activities-section\" class=\"dashboard-section\">\n            <h2>Recent Activities</h2>\n            <ul id=\"activities-list\">\n                {% for activity in activities %}\n                    <li>{{ activity.name }} - {{ activity.calories_burned }} calories burned ({{ activity.date }})</li>\n                {% endfor %}\n            </ul>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Activity - Calorie Tracker</title>\n</head>\n<body>\n <div class=\"container\">\n    <h1>Edit Activity</h1>\n    <form id=\"edit-activity-form\" method=\"post\" class=\"edit-form\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"update-activity-button\" type=\"submit\" class=\"btn btn-primary\">Update Activity</button>\n    </form>\n </div>\n</body>\n</html>"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Meal - Calorie Tracker</title>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Edit Meal</h1>\n    <form method=\"post\" id=\"edit-meal-form\" class=\"edit-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"update-meal-button\" class=\"btn btn-primary\">Update Meal</button>\n    </form>\n  </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Home</title>\n</head>\n<body>\n    <div class=\"container\">\n      <h1 id=\"home-title\">Welcome to the Calorie Tracker!</h1>\n      {% if user.is_authenticated %}\n          <p>Hello, {{ user.username }}! <a href=\"{% url 'logout' %}\">Logout</a></p>\n          <a href=\"{% url 'dashboard' %}\">Go to Dashboard</a>\n      {% else %}\n          <a href=\"{% url 'login' %}\">Login</a>\n          <a href=\"{% url 'signup' %}\">Sign Up</a>\n      {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Calorie Tracker</title>\n</head>\n<body>\n    <div class=\"container\">\n      <h1>Login</h1>\n      <form method=\"post\" id=\"login-form\" class=\"login-form\"> \n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"login-button\" class=\"btn btn-primary\">Login</button>\n      </form>\n    </div>\n</body>\n</html>"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Meal Log</title>\n</head>\n<body>\n  <div id=\"meal-log-container\" class=\"container\">\n    <h1>Meal Log</h1>\n    <button id=\"add-meal-button\" class=\"btn btn-primary\">Add Meal</button> \n    <input type=\"text\" id=\"search-meals-input\" placeholder=\"Search Meals\" class=\"form-control search-input\">\n    <table id=\"meal-log-table\" class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>Date</th>\n          <th>Meal</th>\n          <th>Calories</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for meal in meals %}\n        <tr>\n          <td>{{ meal.date }}</td>\n          <td>{{ meal.name }}</td>\n          <td>{{ meal.calories }}</td>\n          <td>\n            <a href=\"{% url 'edit_meal' meal.id %}\">Edit</a> |\n            <a href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n          </td>\n        </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Settings</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Settings</h1>\n        <div>\n          <a href=\"{% url 'update_profile' %}\">Update Profile</a>\n        </div>\n        <div>\n          <a href=\"{% url 'update_preferences' %}\">Update Preferences</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Calorie Tracker</title>\n</head>\n<body>\n    <div class=\"container\">\n      <h1>Sign Up</h1>\n      <form method=\"post\" id=\"signup-form\" class=\"signup-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"signup-button\" class=\"btn btn-primary\">Sign Up</button>\n      </form>\n    </div>\n</body>\n</html>"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Tutorials - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"tutorials-container\" class=\"container\">\n        <h1>Tutorials/Help</h1>\n        <section id=\"getting-started-section\" class=\"tutorial-section\">\n            <h2>Getting Started</h2>\n            <p>Learn the basics of using our Calorie Tracker...</p>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Preferences - Calorie Tracker</title>\n</head>\n<body>\n<div class=\"container\">\n    <h1>Update Preferences</h1>\n    <form method=\"post\" id=\"preferences-form\" class=\"preferences-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"update-preferences-button\" class=\"btn btn-primary\">Update Preferences</button>\n    </form>\n</div>\n</body>\n</html>"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Profile - Calorie Tracker</title>\n</head>\n<body>\n  <div class=\"container\">\n    <h1>Update Profile</h1>\n    <form method=\"post\" id=\"profile-form\" class=\"profile-form\"> \n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\" id=\"update-profile-button\" class=\"btn btn-primary\">Update Profile</button>\n    </form>\n  </div>\n</body>\n</html>"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Weekly Calorie Chart - Calorie Tracker</title>\n</head>\n<body>\n  <div id=\"chart-container\" class=\"container\">\n    <h1>Weekly Calorie Chart</h1>\n    <div id=\"chart-image-container\">\n      <img src=\"data:image/png;base64,{{ graphic }}\" alt=\"Weekly Calorie Chart\" id=\"calorie-chart-image\">\n    </div>\n    <div id=\"chart-data-container\" class=\"chart-data-container\"></div>\n  </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label='Upload JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    status = models.CharField(max_length=50)  # e.g., 'passed', 'failed', 'pending'\n    notes = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"Review for {self.project.name}\""}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        # Process review submission (add logic here)\n        return HttpResponseRedirect('/') # Redirect after processing\n    return render(request, 'review.html', {'project': project})\n\ndef home_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            handle_json_upload(request.FILES['json_file'])\n    else:\n        form = JSONUploadForm()\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'form': form, 'projects': projects})\n\ndef handle_json_upload(json_file):\n    try:\n        data = json.load(json_file)\n        project, created = Project.objects.get_or_create(name=data.get('name'))\n        project.description = data.get('description', '')\n        project.save()\n        messages.success(request, 'Project uploaded successfully!')  # Add request parameter\n    except Exception as e:\n        messages.error(request, f'Error uploading project: {e}') # Add request parameter\n\ndef about_view(request):\n    return render(request, 'about.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-container\">\n    <h1>About This Site</h1>\n    <p>This is a simple project review site built with Django.</p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n           <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                <li><a href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1>Project Listings</h1>\n    <ul id=\"project-list\" class=\"project-list\">\n        {% for project in projects %}\n            <li><a href=\"{% url 'review' project.id %}\">{{ project.name }}</a></li>\n        {% endfor %}\n    </ul>\n\n    <h2>Upload Project</h2>\n    <form id=\"upload-form\" class=\"upload-form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Upload</button>\n    </form>\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"review-container\">\n    <h2>Reviewing: {{ project.name }}</h2>\n    <p id=\"project-description\" class=\"project-description\">{{ project.description }}</p>\n\n    <form id=\"review-form\" class=\"review-form\" method=\"post\">\n      {% csrf_token %}\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" name=\"status\">\n            <option value=\"passed\">Passed</option>\n            <option value=\"failed\">Failed</option>\n            <option value=\"pending\">Pending</option>\n        </select><br><br>\n        <label for=\"notes\">Notes:</label><br>\n        <textarea id=\"notes\" name=\"notes\"></textarea><br><br>\n        <input type=\"submit\" value=\"Submit Review\">\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "/* Basic styling for the project */\nbody {\n    font-family: sans-serif;\n}\n.main-header{\n    background-color: #f0f0f0;\n    padding: 10px;\n}\n.main-nav ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n.main-nav li {\n    display: inline;\n    margin-right: 20px;\n}\n.home-container, .about-container, .review-container{\n    padding: 20px;\n}\n.messages {\n    list-style: none;\n    padding: 0;\n}\n.messages li {\n    margin-bottom: 5px;\n}\n.messages .success{\n    color:green\n}\n.messages .error{\n    color: red\n}\n"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\nfrom .models import Claim, Budget\n\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'description', 'status', 'created_at', 'operations')\n    list_filter = ('status', 'category', 'user')\n    actions = [approve_claims, reject_claims]\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/claim/{}/change/\">Edit</a> | '\\\n            '<a href=\"/admin/example_app/claim/{}/delete/\">Delete</a>',\n            obj.id, obj.id\n        )\n    operations.short_description = 'Operations'\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='approved')\n        messages.success(request, 'Selected claims approved.')\n\n    def reject_claims(self, request, queryset):\n        queryset.update(status='rejected')\n        messages.success(request, 'Selected claims rejected.')\n    \napprove_claims.short_description = \"Approve selected claims\"\nreject_claims.short_description = \"Reject selected claims\"\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit', 'spent', 'remaining')\n\n    def spent(self, obj):\n        total_spent = Claim.objects.filter(category=obj.category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        return total_spent\n\n    def remaining(self, obj):\n        return obj.limit - self.spent(obj)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models import Sum\n\n\nclass Claim(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    )\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n\nclass Budget(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='home'), name='logout'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget\n\n\ndef check_budget_limit(category, amount):\n    try:\n        budget = Budget.objects.get(category=category)\n        total_spent = budget.claim_set.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        return total_spent + amount <= budget.limit\n    except Budget.DoesNotExist:\n        return True"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login, authenticate\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom .utils import check_budget_limit\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Claim submitted successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user)\n    return render(request, 'claim_status.html', {'claims': claims})\n\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be edited.')\n        return redirect('claim_status')\n\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            updated_claim = form.save(commit=False)\n            if check_budget_limit(updated_claim.category, updated_claim.amount):\n                updated_claim.save()\n                messages.success(request, 'Claim updated successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    claim.delete()\n    messages.success(request, 'Claim deleted successfully.')\n    return redirect('claim_status')\n\n\n@login_required\ndef analysis_view(request):\n    budgets = Budget.objects.all()\n    total_approved_claims = Claim.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n    analysis_data = []\n    for budget in budgets:\n        spent = budget.claim_set.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        remaining = budget.limit - spent\n        analysis_data.append({'category': budget.get_category_display(), 'limit': budget.limit, 'spent': spent, 'remaining': remaining})\n    return render(request, 'analysis.html', {'analysis_data': analysis_data, 'total_approved_claims': total_approved_claims})"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.5 on 2025-01-26 23:19\n\nimport django.db.models.deletion\nfrom django.conf import settings\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Analysis Report{% endblock %}\n\n{% block content %}\n    <div id=\"analysis-report\" class=\"report-container\">\n        <h2>Analysis Report</h2>\n        <p id=\"total-approved-claims\" class=\"total-claims\">Total Approved Claims: ${{ total_approved_claims }}</p>\n    \n        <table id=\"budget-analysis-table\" class=\"analysis-table\">\n            <thead>\n                <tr>\n                    <th id=\"category-header\">Category</th>\n                    <th id=\"limit-header\">Limit</th>\n                    <th id=\"spent-header\">Spent</th>\n                    <th id=\"remaining-header\">Remaining</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for item in analysis_data %}\n                    <tr id=\"budget-item-{{ forloop.counter }}\" class=\"budget-item\">\n                        <td id=\"category-{{ forloop.counter }}\" class=\"category\">{{ item.category }}</td>\n                        <td id=\"limit-{{ forloop.counter }}\" class=\"limit\">${{ item.limit }}</td>\n                        <td id=\"spent-{{ forloop.counter }}\" class=\"spent\">${{ item.spent }}</td>\n                        <td id=\"remaining-{{ forloop.counter }}\" class=\"remaining\">${{ item.remaining }}</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"page-title\">{% block title %}Accounting System{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"main-body\">\n    <nav id=\"main-nav\" class=\"navbar\">\n        <ul id=\"nav-list\" class=\"nav-list\">\n          <li id=\"home-link\" class=\"nav-item\"><a href=\"{% url 'home' %}\">Home</a></li>\n          {% if user.is_authenticated %}\n              <li id=\"submit-claim-link\" class=\"nav-item\"><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n              <li id=\"claim-status-link\" class=\"nav-item\"><a href=\"{% url 'claim_status' %}\">Claim Status</a></li>\n              <li id=\"analysis-link\" class=\"nav-item\"><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n              <li id=\"logout-link\" class=\"nav-item\"><a href=\"{% url 'logout' %}\">Logout</a></li>\n          {% else %}\n              <li id=\"signup-link\" class=\"nav-item\"><a href=\"{% url 'signup' %}\">Sign Up</a></li>\n              <li id=\"login-link\" class=\"nav-item\"><a href=\"{% url 'login' %}\">Login</a></li>\n          {% endif %}\n        </ul>\n      </nav>\n      {% if messages %}\n        <div id=\"message-container\" class=\"messages\">\n          <ul id=\"message-list\">\n            {% for message in messages %}\n              <li id=\"message-item-{{ forloop.counter }}\" class=\"{{ message.tags }}\">{{ message }}</li>\n            {% endfor %}\n          </ul>\n        </div>\n      {% endif %}\n      <main id=\"main-content\">{% block content %}{% endblock %}</main>\n</body>\n</html>\n"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Edit Claim{% endblock %}\n\n{% block content %}\n    <div id=\"edit-claim-form\" class=\"form-container\">\n        <h2>Edit Claim</h2>\n        <form method=\"post\" id=\"edit-claim\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"submit-edit\">Update Claim</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Claim Status{% endblock %}\n\n{% block content %}\n<div id=\"claim-status-container\" class=\"status-container\">\n    <h2>Claim Status</h2>\n    <table id=\"claim-status-table\" class=\"status-table\"> \n        <thead>\n            <tr>\n                <th id=\"category-header\">Category</th>\n                <th id=\"amount-header\">Amount</th>\n                <th id=\"description-header\">Description</th>\n                <th id=\"status-header\">Status</th>\n                <th id=\"actions-header\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for claim in claims %}\n            <tr id=\"claim-item-{{ forloop.counter }}\" class=\"claim-item\">\n                <td id=\"category-{{ forloop.counter }}\">{{ claim.category }}</td>\n                <td id=\"amount-{{ forloop.counter }}\">{{ claim.amount }}</td>\n                <td id=\"description-{{ forloop.counter }}\">{{ claim.description }}</td>\n                <td id=\"status-{{ forloop.counter }}\">{{ claim.status }}</td>\n                <td id=\"actions-{{ forloop.counter }}\">\n                    {% if claim.status == 'pending' %}\n                    <a id=\"edit-link-{{ claim.id }}\" href=\"{% url 'edit_claim' claim.id %}\">Edit</a> |\n                    <a id=\"delete-link-{{ claim.id }}\" href=\"{% url 'delete_claim' claim.id %}\">Delete</a>\n                    {% endif %}\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Accounting and Cashier Management - Home{% endblock %}\n\n{% block content %}\n    <div id=\"home-container\" class=\"home-content\"> \n        <h1 id=\"home-title\">Welcome to the Accounting and Cashier Management System</h1>\n        {% if user.is_authenticated %}\n            <p id=\"logged-in-message\">You are logged in as {{ user.username }}.</p>\n        {% else %}\n            <a id=\"signup-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n            <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a>\n        {% endif %}\n    </div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Login{% endblock %}\n\n{% block content %}\n<div id=\"login-form\" class=\"form-container\">\n    <h2>Login</h2>\n    <form method=\"post\" id=\"login\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"login-button\" type=\"submit\">Login</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Sign Up{% endblock %}\n\n{% block content %}\n<div id=\"signup-form\" class=\"form-container\">\n    <h2>Sign Up</h2>\n    <form method=\"post\" id=\"signup\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"signup-button\">Sign Up</button>\n    </form>\n    <p id=\"login-prompt\">Already have an account? <a href=\"{% url 'login' %}\">Login here</a>.</p>\n</div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n\n{% block title %}Submit Claim{% endblock %}\n\n{% block content %}\n<div id=\"submit-claim-form\" class=\"form-container\">\n    <h2>Submit Claim</h2>\n    <form method=\"post\" id=\"claim-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-claim-button\" type=\"submit\">Submit Claim</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\nLOGIN_URL = '/login/'\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": ".navbar {\n    background-color: #f0f0f0;\n    padding: 10px;\n  }\n  \n  .nav-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n  }\n  \n  .nav-item {\n    margin-right: 20px;\n  }\n  .messages {\n    padding: 10px;\n    margin-bottom: 20px;\n  }\n  \n  .success {\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n    color: #155724;\n  }\n  \n  .error {\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n    color: #721c24;\n  }\n  .form-container {\n    width: 50%;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n  }\n  \n  .form-container label {\n    display: block;\n    margin-bottom: 5px;\n  }\n  \n  .form-container input[type=\"text\"],\n  .form-container input[type=\"number\"],\n  .form-container textarea {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n    margin-bottom: 10px;\n  }\n  \n  .form-container button[type=\"submit\"] {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n  \n  .status-container {\n    width: 80%;\n    margin: 0 auto;\n    padding: 20px;\n  }\n  \n  .status-table {\n    width: 100%;\n    border-collapse: collapse;\n  }\n  \n  .status-table th,\n  .status-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n  }\n  \n  .status-table th {\n    background-color: #f2f2f2;\n  }\n  \n  .report-container {\n    width: 80%;\n    margin: 0 auto;\n    padding: 20px;\n  }\n  \n  .analysis-table {\n    width: 100%;\n    border-collapse: collapse;\n  }\n  \n  .analysis-table th,\n  .analysis-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n  }\n  \n  .analysis-table th {\n    background-color: #f2f2f2;\n  }\n  \n  .total-claims {\n    font-size: 1.2em;\n    margin-bottom: 10px;\n  }"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\nh1 {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"body-element\" class=\"main-body\">\n    <h1 id=\"hello-world-heading\" class=\"title\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"helloworld-body\">\n    <div id=\"helloworld-container\" class=\"content-container\">\n        <h1 id=\"helloworld-title\" class=\"title\">Hello, World!</h1>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body  id=\"home-body\">\n     <div id=\"home-container\" class=\"content-container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome Home</h1>\n         <a id=\"helloworld-link\" class=\"nav-link\" href=\"{% url 'helloworld' %}\">Hello World</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\nSTATIC_ROOT =  os.path.join(BASE_DIR, 'staticfiles')\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(\"BashCrawl Help:\")\n        print(\"Navigate using 'cd' followed by the directory name.\")\n        # ... (Add more help)\n\n    def print_game_help(self):\n        print(\"Available commands: ls, cd, inventory, help, quit\")\n\n    def list_contents(self):\n        contents = self.directory_structure.get(self.current_dir, [])\n        if contents:\n            print(\" \".join(contents))\n        else:\n            print(\"Nothing here.\")\n        if self.current_dir in self.items:\n            print(self.items[self.current_dir])\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n        else:\n            print(\"Invalid directory.\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"Your inventory:\")\n            for item in self.inventory:\n                print(item)\n        else:\n            print(\"Your inventory is empty.\")\n\n\n    def play(self):\n        while True:\n            command = input(f\"{self.current_dir} $ \").split()\n            if not command:\n                continue\n\n            action = command[0].lower()\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    print(\"cd where?\")\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                break\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\")\n            if self.current_dir in self.items and self.items[self.current_dir] not in self.inventory:\n                self.inventory.append(self.items[self.current_dir])\n                print(f\"You found the {self.items[self.current_dir]}!\")\n                del self.items[self.current_dir]\n\n    def main_menu(self):\n        while True:\n            self.print_main_menu()\n            choice = input(\"> \")\n            if choice == \"1\":\n                self.play()\n                break #Exit to main menu after game ends.\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                break\n            else:\n                print(\"Invalid choice.\")\n\ndef main():\n    game = BashCrawl()\n    game.main_menu()\n\nif __name__ == \"__main__\":\n    main()\n"}], "20": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'category', 'operations')  # Added 'operations' to list_display\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/blogpost/{}/change/\" class=\"edit-link\">Edit</a> '\\\n            '<a href=\"/post/{}/delete/\" class=\"delete-link\">Delete</a>'\n            .format(obj.id, obj.id)\n        )\n    operations.short_description = 'Operations'\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'operations')  # Added 'operations' to list_display\n\n    def operations(self, obj):\n        return format_html(\n           '<a href=\"/admin/example_app/category/{}/change/\" class=\"edit-link\">Edit</a> '\\\n           '<a href=\"/category/{}/delete/\" class=\"delete-link\">Delete</a>'\n           .format(obj.id, obj.id)\n        )\n    operations.short_description = 'Operations'\n\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    pass\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name', 'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment', 'class': 'form-control'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'class': 'form-control'}),\n            'category': forms.Select(attrs={'class': 'form-control'}),\n        }\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        verbose_name_plural = 'Categories'\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)  # Add created_at field\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=255)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.author} on {self.post.title}\"\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return f\"Message from {self.name}\"\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from django.db.models import Count\nfrom django.db.models.functions import TruncMonth\n\ndef filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n\ndef get_archive_counts(posts):\n    archive_counts = posts.annotate(month=TruncMonth('created_at')).values('month').annotate(count=Count('id'))\n    return archive_counts\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, ContactUs, Comment\nfrom .forms import CommentForm, BlogPostForm\nfrom .utils import filter_by_date, get_archive_counts  # Import the utility functions\n\n\ndef home(request):\n    posts = BlogPost.objects.all().order_by('-created_at')\n    if request.method == 'GET' and 'q' in request.GET:\n        query = request.GET.get('q')\n        posts = posts.filter(title__icontains=query)\n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all()\n    new_comment = None\n    if request.method == 'POST':\n        comment_form = CommentForm(data=request.POST)\n        if comment_form.is_valid():\n            new_comment = comment_form.save(commit=False)\n            new_comment.post = post\n            new_comment.save()\n            return redirect('post_detail', pk=post.pk)  # Redirect to the same page\n    else:\n        comment_form = CommentForm()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'new_comment': new_comment, 'comment_form': comment_form})\n\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n@login_required\ndef post_delete(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    post.delete()\n    messages.success(request, 'Post deleted successfully.')  # Add success message\n    return redirect('admin:example_app_blogpost_changelist') # Redirect to the admin changelist view for the BlogPost model\n\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n@login_required\ndef category_delete(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    messages.success(request, 'Category deleted successfully.')\n    return redirect('admin:example_app_category_changelist')\n\ndef archive(request):\n    posts = BlogPost.objects.all()\n    year = request.GET.get('year')\n    month = request.GET.get('month')\n\n    filtered_posts = filter_by_date(posts, year, month)\n    archive_counts = get_archive_counts(posts)  # Calculate archive counts\n    context = {\n        'posts': filtered_posts,\n        'year': year,\n        'month': month,\n        'archive_counts': archive_counts,\n    }\n\n    return render(request, 'blog/archive.html', context)\n\n\ndef about(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        contact = ContactUs(name=name, email=email, message=message)\n        contact.save()\n        # Optionally, send an email notification or redirect to a thank you page\n        messages.success(request, 'Your message has been sent successfully!')\n        return redirect('about')\n    return render(request, 'blog/about.html')\n\n\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        posts = BlogPost.objects.filter(title__icontains=query)\n        return render(request, 'blog/home.html', {'posts': posts, 'query': query})\n    return redirect('home')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\nheader {\n    background: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\nheader nav a {\n    color: #fff;\n    margin: 0 15px;\n    text-decoration: none;\n}\n\nmain {\n    padding: 20px;\n    background: #fff;\n    margin: 20px auto;\n    max-width: 800px;\n    border: 1px solid #ddd;\n}\n\narticle {\n    margin-bottom: 20px;\n    padding-bottom: 10px;\n    border-bottom: 1px solid #eee;\n}\n.post-title {\n    font-size: 1.8em;\n    margin-bottom: 10px;\n}\n\nfooter {\n    text-align: center;\n    padding: 10px 0;\n    background: #333;\n    color: #fff;\n}\n/* Styles for forms */\n.form-control {\n    width: 100%;\n    padding: 10px;\n    margin-bottom: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\ntextarea.form-control {\n    height: 120px;\n}\n"}, {"file": "about.html", "path": "example_app/templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<main id=\"about-main\">\n    <h1 id=\"about-title\" class=\"page-title\">About Me</h1>\n    <p id=\"about-intro\" class=\"page-intro\">Welcome to my blog! I'm passionate about sharing my thoughts and experiences.</p>\n    <form id=\"contact-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\" class=\"form-control\" required><br>\n        <label for=\"email\">Email:</label><br>\n        <input type=\"email\" id=\"email\" name=\"email\" class=\"form-control\" required><br>\n        <label for=\"message\">Message:</label><br>\n        <textarea id=\"message\" name=\"message\" class=\"form-control\" required></textarea><br>\n        <button type=\"submit\" id=\"submit-button\" class=\"submit-button\">Send Message</button>\n    </form>\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n</main>\n{% endblock %}"}, {"file": "archive.html", "path": "example_app/templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<main id=\"archive-main\">\n    <h1>Archive</h1>\n    <div id=\"archive-list\">\n    {% for month in archive_counts %}\n      <a href=\"{% url 'archive' %}?year={{ month.month.year }}&month={{ month.month.month }}\" id=\"archive-link-{{month.month.year}}-{{month.month.month}}\">{{ month.month|date:'F Y' }} ({{ month.count }})</a>\n    {% endfor %}\n    </div>\n    {% if posts %}\n    <ul id=\"post-list\">\n        {% for post in posts %}\n        <li id=\"post-item-{{post.id}}\">\n            <a href=\"{% url 'post_detail' post.pk %}\" id=\"post-link-{{post.id}}\">{{ post.title }}</a>\n        </li>\n        {% endfor %}\n    </ul>\n    {% else %}\n        <p>No posts found for this period.</p>\n    {% endif %}\n</main>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My Blog{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\">\n        <nav id=\"main-nav\">\n            <a href=\"{% url 'home' %}\" id=\"home-link\">Home</a>\n            <a href=\"{% url 'category' %}\" id=\"categories-link\">Categories</a>\n            <a href=\"{% url 'archive' %}\" id=\"archive-link\">Archive</a>\n            <a href=\"{% url 'about' %}\" id=\"about-link\">About</a>\n        </nav>\n    </header>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n    <footer id=\"main-footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>"}, {"file": "category.html", "path": "example_app/templates/blog/category.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<main id=\"category-main\">\n    <h1>Categories</h1>\n    <ul id=\"category-list\">\n    {% for category in categories %}\n        <li id=\"category-item-{{category.id}}\">\n            <a href=\"{% url 'category_detail' category.pk %}\" id=\"category-link-{{category.id}}\">{{ category.name }}</a>\n        </li>\n    {% empty %}\n      <li>No categories found.</li>\n    {% endfor %}\n    </ul>\n</main>\n{% endblock %}"}, {"file": "category_detail.html", "path": "example_app/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<main id=\"category-detail-main\">\n    <h1 id=\"category-title\">{{ category.name }}</h1>\n    <ul id=\"post-list\">\n        {% for post in posts %}\n        <li id=\"post-item-{{ post.pk }}\"><a href=\"{% url 'post_detail' post.pk %}\" id=\"post-detail-link-{{post.pk}}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n</main>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<main id=\"home-main\">\n    <form id=\"search-form\" method=\"get\" action=\"{% url 'search' %}\">\n        <input type=\"text\" id=\"search-box\" name=\"q\" placeholder=\"Search...\">\n        <button id=\"search-button\" type=\"submit\">Search</button>\n    </form>\n    <div id=\"post-list-container\">\n    <ul id=\"post-list\">\n        {% for post in posts %}\n            <article id=\"post-{{ post.id }}\" class=\"post\">\n            <h2 class=\"post-title\"><a href=\"{% url 'post_detail' post.pk %}\" id=\"post-link-{{post.pk}}\">{{ post.title }}</a></h2>\n                <p class=\"post-content\">{{ post.content|truncatewords:50 }}</p>\n                <p class=\"post-category\">Category: <a href=\"{% url 'category_detail' post.category.id %}\">{{ post.category }}</a></p>\n            </article>\n        {% empty %}\n            <li>No posts found.</li>\n        {% endfor %}\n    </ul>\n    </div>\n</main>\n{% endblock %}"}, {"file": "post_detail.html", "path": "example_app/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n    <article id=\"post-detail-{{ post.id }}\">\n        <h1 id=\"post-title\">{{ post.title }}</h1>\n        <p id=\"post-content\">{{ post.content }}</p>\n        <p id=\"post-category\">Category: {{ post.category.name }}</p>\n\n        <h2 id=\"comment-section-title\">Comments</h2>\n        <ul id=\"comment-list\">\n            {% for comment in comments %}\n            <li id=\"comment-item-{{comment.id}}\">\n                <p id=\"comment-author\">{{ comment.author }}</p>\n                <p id=\"comment-content\">{{ comment.content }}</p>\n            </li>\n            {% empty %}\n            <li>No comments yet.</li>\n            {% endfor %}\n        </ul>\n\n        <form id=\"new-comment-form\" method=\"post\">\n            {% csrf_token %}\n            {{ comment_form.as_p }}\n            <button type=\"submit\" id=\"submit-comment-button\">Add Comment</button>\n        </form>\n    </article>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nLOGIN_URL = '/admin/login/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}]}