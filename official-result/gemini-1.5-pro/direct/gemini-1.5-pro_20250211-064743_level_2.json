{"1": [{"file": "manage.py", "path": "bmi_calculator/manage.py", "code": "#!/usr/bin/env python\n\nimport os\nimport sys\n\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y@qnd1%2_!945g9u6k%h^(n=6i_z0z6&186o-j@*!t)+m!f8k'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi.urls')),\n]\n"}, {"file": "urls.py", "path": "bmi_calculator/bmi/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calculator/', views.calculator, name='calculator'),\n]\n"}, {"file": "views.py", "path": "bmi_calculator/bmi/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'bmi/home.html')\n\ndef calculator(request):\n    bmi = None\n    category = None\n\n    if request.method == 'POST':\n        height = float(request.POST.get('height'))\n        weight = float(request.POST.get('weight'))\n        unit = request.POST.get('unit')\n\n        if unit == 'metric':\n            bmi = weight / (height/100)**2\n        elif unit == 'imperial':\n            bmi = (weight * 703) / (height**2) \n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif bmi < 25:\n            category = 'Normal'\n        elif bmi < 30:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n    context = {'bmi': bmi, 'category': category}\n    return render(request, 'bmi/calculator.html', context)\n"}, {"file": "home.html", "path": "bmi_calculator/bmi/templates/bmi/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-title\">Welcome to the BMI Calculator</h1>\n        <p id=\"home-intro\" class=\"home-intro\">This calculator helps you determine your Body Mass Index (BMI).</p>\n        <a id=\"navigate-to-calculator\" class=\"navigate-to-calculator\" href=\"{% url 'calculator' %}\">Go to Calculator</a>\n    </div>\n</body>\n</html>\n"}, {"file": "calculator.html", "path": "bmi_calculator/bmi/templates/bmi/calculator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"calculator-container\" class=\"calculator-container\">\n        <h1 id=\"calculator-title\" class=\"calculator-title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"unit-selection\" class=\"unit-selection\">\n                <label for=\"unit-metric\" id=\"unit-metric-label\" class=\"unit-label\">Metric:</label>\n                <input type=\"radio\" name=\"unit\" id=\"unit-metric\" value=\"metric\" checked>\n                <label for=\"unit-imperial\" id=\"unit-imperial-label\" class=\"unit-label\">Imperial:</label>\n                <input type=\"radio\" name=\"unit\" id=\"unit-imperial\" value=\"imperial\"> \n            </div>\n            <div id=\"height-input\" class=\"input-field\">\n                <label for=\"height\" id=\"height-label\" class=\"input-label\">Height (cm/inches):</label>\n                <input type=\"number\" name=\"height\" id=\"height\" class=\"input-box\" required>\n            </div>\n            <div id=\"weight-input\" class=\"input-field\">\n                <label for=\"weight\" id=\"weight-label\" class=\"input-label\">Weight (kg/lbs):</label>\n                <input type=\"number\" name=\"weight\" id=\"weight\" class=\"input-box\" required>\n            </div>\n            <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Calculate</button>\n        </form>\n\n        {% if bmi %}\n            <div id=\"results-container\" class=\"results-container\">\n                <p id=\"bmi-result\" class=\"result-text\">Your BMI: {{ bmi|floatformat:2 }}</p>\n                <p id=\"bmi-category\" class=\"result-text\">Category: {{ category }}</p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"currency_converter.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "# ... (Standard Django settings - DATABASES, STATIC_URL, etc.)\n\nINSTALLED_APPS = [\n    # ... (Other apps)\n    'converter',\n]\n\n# ... (Rest of the Django settings)"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('currency_details/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings, name='settings'),\n]\n"}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'converter/home.html')\n\ndef currency_details(request):\n    return render(request, 'converter/currency_details.html')\n\ndef settings(request):\n    return render(request, 'converter/settings.html')\n"}, {"file": "home.html", "path": "currency_converter/converter/templates/converter/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"currency-converter\" class=\"converter\">\n        <label for=\"base-currency\" id=\"base-currency-label\" class=\"currency-label\">Base Currency:</label>\n        <select id=\"base-currency\" class=\"currency-select\"></select>\n\n        <label for=\"target-currency\" id=\"target-currency-label\" class=\"currency-label\">Target Currency:</label>\n        <select id=\"target-currency\" class=\"currency-select\"></select>\n\n        <label for=\"amount\" id=\"amount-label\" class=\"amount-label\">Amount:</label>\n        <input type=\"number\" id=\"amount\" class=\"amount-input\">\n\n        <button id=\"convert-button\" class=\"convert-button\">Convert</button>\n\n        <div id=\"conversion-result\" class=\"conversion-result\"></div>\n        <div id=\"exchange-rate-info\" class=\"exchange-rate-info\"></div>\n    </div>\n    <a href=\"{% url 'currency_details' %}\" id=\"currency-details-link\">Currency Details</a> <a href=\"{% url 'settings' %}\" id=\"settings-link\">Settings</a>\n</body>\n</html>\n"}, {"file": "currency_details.html", "path": "currency_converter/converter/templates/converter/currency_details.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Details</title>\n</head>\n<body>\n    <div id=\"currency-details\" class=\"details\"></div> <div id=\"historical-rates\" class=\"rates\"></div>\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "currency_converter/converter/templates/converter/settings.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <div id=\"default-currencies\" class=\"settings-section\">\n      </div>\n    <div id=\"update-frequency\" class=\"settings-section\">\n      </div>\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>\n"}, {"file": "asgi.py", "path": "currency_converter/currency_converter/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_asgi_application()\n"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()\n"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n    path('generatedpassword/', views.generatedpassword, name='generatedpassword'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport random\n\n# Create your views here.\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\ndef about(request):\n    return render(request, 'generator/about.html')\n\ndef password(request):\n\n    characters = list('abcdefghijklmnopqrstuvwxyz')\n\n    if request.GET.get('uppercase'):\n        characters.extend(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    if request.GET.get('special'):\n        characters.extend(list('!@#$%^&*()'))\n    if request.GET.get('numbers'):\n        characters.extend(list('0123456789'))\n\n    length = int(request.GET.get('length', 12))\n\n    thepassword = ''\n    for x in range(length):\n        thepassword += random.choice(characters)\n\n    return render(request, 'generator/password.html', {'password': thepassword})\n\n\ndef generatedpassword(request):\n  return render(request, 'generator/generatedpassword.html')\n"}, {"file": "home.html", "path": "password_generator/generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n</head>\n<body>\n  <div id=\"home-container\" class=\"container\">\n    <h1 id=\"home-title\" class=\"title\">Welcome to the Password Generator</h1>\n    <a id=\"generate-password-button\" class=\"button\" href=\"{% url 'password' %}\">Generate Password</a>\n    <a id=\"about-button\" class=\"button\" href=\"{% url 'about' %}\">About</a>\n  </div>\n</body>\n</html>\n"}, {"file": "password.html", "path": "password_generator/generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n</head>\n<body>\n  <div id=\"password-options-container\" class=\"container\">\n    <form action=\"{% url 'password' %}\" method=\"get\">\n        <label for=\"length\" id=\"length-label\">Length:</label>\n        <select id=\"length\" name=\"length\">\n            <option value=\"8\">8</option>\n            <option value=\"10\">10</option>\n            <option value=\"12\" selected=\"selected\">12</option>\n            <option value=\"14\">14</option>\n            <option value=\"16\">16</option>\n          </select><br>\n      <input id=\"uppercase\" type=\"checkbox\" name=\"uppercase\">\n      <label for=\"uppercase\" id=\"uppercase-label\">Include Uppercase</label><br>\n      <input id=\"numbers\" type=\"checkbox\" name=\"numbers\">\n      <label for=\"numbers\" id=\"numbers-label\">Include Numbers</label><br>\n      <input id=\"special\" type=\"checkbox\" name=\"special\">\n      <label for=\"special\" id=\"special-label\">Include Symbols</label><br>\n      <input id=\"generate-button\" type=\"submit\" value=\"Generate Password\">\n    </form>\n  </div>\n</body>\n</html>\n"}, {"file": "generatedpassword.html", "path": "password_generator/generator/templates/generator/generatedpassword.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Generated Password</title>\n</head>\n<body>\n  <div id=\"generated-password-container\" class=\"container\">\n      <h2 id=\"generated-password-title\">Your generated password:</h2>\n      <p id=\"generated-password\">{{ password }}</p>\n      <!-- Add copy to clipboard functionality here --> \n  </div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "password_generator/generator/templates/generator/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About</title>\n</head>\n<body>\n  <div id=\"about-container\" class=\"container\">\n    <h1 id=\"about-title\" class=\"title\">About this Password Generator</h1>\n      <p id=\"about-description\">This is a simple password generator built using Django.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "password_generator/password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "password_generator/generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "password_generator/generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    name = 'generator'\n"}, {"file": "models.py", "path": "password_generator/generator/models.py", "code": ""}, {"file": "tests.py", "path": "password_generator/generator/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "urls.py", "path": "password_generator/generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n\n]\n"}], "4": [{"file": "manage.py", "path": "qr_code_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "qr_code_generator/qr_code_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y@qnd)b$@l5_#j6$4n7x7z-82g14$@i5g9@1h*0l)^-b(8u*('\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcode_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')], \n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "qr_code_generator/qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrcode_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "qr_code_generator/qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "qr_code_generator/qr_code_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "urls.py", "path": "qr_code_generator/qrcode_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('qr_code/', views.qr_code, name='qr_code'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "qr_code_generator/qrcode_app/views.py", "code": "import qrcode\nfrom django.shortcuts import render\nfrom io import BytesIO\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'qrcode_app/home.html')\n\ndef qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        box_size = int(request.POST.get('box_size', 10))  # Default box size\n        border_size = int(request.POST.get('border', 4)) # Default border size\n        error_correction = request.POST.get('error_correction', 'M') # Default Error Correction\n        fill_color = request.POST.get('fill_color', 'black') # Default Fill color\n        back_color = request.POST.get('back_color', 'white') # Default Back color\n\n        if data:\n          qr = qrcode.QRCode(\n              version=1,\n              error_correction={\n                'L': qrcode.constants.ERROR_CORRECT_L,\n                'M': qrcode.constants.ERROR_CORRECT_M,\n                'Q': qrcode.constants.ERROR_CORRECT_Q,\n                'H': qrcode.constants.ERROR_CORRECT_H\n              }[error_correction],\n              box_size=min(box_size,128),\n              border=min(border_size, 10),\n          )\n          qr.add_data(data)\n          qr.make(fit=True)\n\n          img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n          buffer = BytesIO()\n          img.save(buffer, 'PNG')\n          buffer.seek(0)\n\n          response = HttpResponse(buffer.read(), content_type='image/png')\n          response['Content-Disposition'] = f'attachment; filename=\"qrcode.png\"'\n          return response\n\n    return render(request, 'qrcode_app/qr_code.html')\n\n\ndef about(request):\n  return render(request, 'qrcode_app/about.html')\n"}, {"file": "home.html", "path": "qr_code_generator/templates/qrcode_app/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>QR Code Generator</title>\n</head>\n<body>\n  <div id=\"home-container\" class=\"home-container\">\n      <h1 id=\"home-title\" class=\"home-title\">Welcome to the QR Code Generator</h1>\n      <p id=\"home-intro\" class=\"home-intro\">This website allows you to easily generate QR codes for any text or URL.</p>\n      <a href=\"{% url 'qr_code' %}\"><button id=\"generate-qr-button\" class=\"generate-qr-button\">Generate QR Code</button></a>\n      <br>\n      <a href=\"{% url 'about' %}\"><button id=\"about-button\" class=\"about-button\">About</button></a> \n  </div>\n</body>\n</html>\n"}, {"file": "qr_code.html", "path": "qr_code_generator/templates/qrcode_app/qr_code.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>QR Code Generator</title>\n</head>\n<body>\n<div id=\"qr-code-container\" class=\"qr-code-container\">\n    <h1 id=\"qr-code-title\" class=\"qr-code-title\">QR Code Generator</h1>\n  <form method=\"post\" id=\"qr-code-form\" class=\"qr-code-form\">\n    {% csrf_token %}\n    <label for=\"data\" id=\"data-label\" class=\"data-label\">Enter text or URL:</label><br>\n    <input type=\"text\" id=\"data\" name=\"data\" class=\"data-input\" required><br><br>\n    \n    <label for=\"box_size\" id=\"box-size-label\" class=\"box-size-label\">Box Size (Max 128):</label><br>\n    <input type=\"number\" id=\"box_size\" name=\"box_size\" class=\"box-size-input\" min=\"1\" max=\"128\" value=\"10\" required><br><br>\n\n    <label for=\"error_correction\" id=\"error-correction-label\" class=\"error_correction-label\">Error Correction:</label><br>\n    <select id=\"error_correction\" name=\"error_correction\" class=\"error_correction-select\">\n      <option value=\"L\">Small</option>\n      <option value=\"M\" selected>Medium</option>\n      <option value=\"Q\">Large</option>\n      <option value=\"H\">Extra Large</option>\n    </select><br><br>\n\n    <label for=\"border\" id=\"border-label\" class=\"border-label\">Border Size (Max 10):</label><br>\n    <input type=\"number\" id=\"border\" name=\"border\" class=\"border-input\"  min=\"1\" max=\"10\" value=\"4\" required><br><br>\n\n    <label for=\"fill_color\" id=\"fill-color-label\" class=\"fill-color-label\">Fill Color:</label><br>\n    <input type=\"color\" id=\"fill_color\" name=\"fill_color\" class=\"fill-color-input\" value=\"#000000\" required><br><br>\n\n    <label for=\"back_color\" id=\"back-color-label\" class=\"back-color-label\">Back Color:</label><br>\n    <input type=\"color\" id=\"back_color\" name=\"back_color\" class=\"back-color-input\" value=\"#ffffff\" required><br><br>\n\n\n    <button type=\"submit\" id=\"generate-button\" class=\"generate-button\">Generate QR Code</button>\n  </form>\n  <div id = \"qr-code-display\" class=\"qr-code-display\"></div>\n    <a href=\"{% url 'home' %}\"><button id=\"home-button\" class=\"home-button\">Home</button></a>\n    <br>\n    <a href=\"{% url 'about' %}\"><button id=\"about-button\" class=\"about-button\">About</button></a>\n\n  </div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "qr_code_generator/templates/qrcode_app/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>About</title>\n</head>\n<body>\n<div id=\"about-container\" class=\"about-container\">\n    <h1 id=\"about-title\" class=\"about-title\">About this website</h1>\n    <div id=\"about-description\" class=\"about-description\">\n        <p>This is a simple QR code generator website built with Django. It allows you to create QR codes for text or URLs. Simply enter the data you wish to encode, click \"Generate QR Code\", and the QR code will be displayed. You can then download it.</p>\n    </div>\n    <div id=\"privacy-policy\" class=\"privacy-policy\">\n        <h2>Privacy Policy</h2>\n        <p>Your entered data is only used to generate the QR code and is not stored or shared anywhere.</p>\n    </div>\n    <div id=\"terms-of-service\" class=\"terms-of-service\">\n        <h2>Terms of Service</h2>\n        <p>By using this website, you agree to use it responsibly and not for any illegal or harmful activities.</p>\n    </div>\n\n    <a href=\"{% url 'home' %}\"><button id=\"home-button\" class=\"home-button\">Home</button></a>\n    <br>\n    <a href=\"{% url 'qr_code' %}\"><button id=\"qr-code-button\" class=\"qr-code-button\">QR Code Generator</button></a>\n\n</div>\n</body>\n</html>\n"}], "6": [{"file": "manage.py", "path": "todo_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"todo_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "todo_project/todo_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = \"your_secret_key\"\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "todo_project/todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]"}, {"file": "urls.py", "path": "todo_project/todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('todo_lists/', views.todo_lists, name='todo_lists'),\n    path('todo_list/<int:list_id>/', views.todo_list, name='todo_list'),  # Add this line\n    path('add_task/<int:list_id>/', views.add_task, name='add_task'), # Add this line\n    # ... other URL patterns\n]"}, {"file": "views.py", "path": "todo_project/todo_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'todo_app/home.html')\n\ndef todo_lists(request):\n    return render(request, 'todo_app/todo_lists.html')\n\ndef todo_list(request, list_id):  # Add this view\n    # Logic to retrieve and display tasks for the given list_id\n    return render(request, 'todo_app/todo_list.html', {'list_id': list_id})\n\ndef add_task(request, list_id): # Add this view\n    # Logic to add a new task to the specified list\n    return render(request, 'todo_app/add_task.html', {'list_id': list_id})\n\n# ... other views as needed"}, {"file": "home.html", "path": "todo_project/todo_app/templates/todo_app/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <div id=\"dashboard\" class=\"dashboard\">\n          </div>\n        <div id=\"navigation\" class=\"navigation\">\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "todo_lists.html", "path": "todo_project/todo_app/templates/todo_app/todo_lists.html", "code": "<html>\n<head><title>Todo Lists</title></head>\n<body>\n  <div id=\"todo-lists-container\" class=\"todo-lists-container\">\n        </div>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "todo_project/todo_app/templates/todo_app/todo_list.html", "code": "<html>\n<head><title>Todo List {{ list_id }}</title></head>\n<body>\n    <div id=\"todo-list-container-{{ list_id }}\" class=\"todo-list-container\">\n      </div>\n</body>\n</html>"}, {"file": "add_task.html", "path": "todo_project/todo_app/templates/todo_app/add_task.html", "code": "<html>\n<head><title>Add Task to List {{ list_id }}</title></head>\n<body>\n    <div id=\"add-task-container-{{ list_id }}\" class=\"add-task-container\">\n      </div>\n</body>\n</html>"}, {"file": "apps.py", "path": "todo_project/todo_app/apps.py", "code": "from django.apps import AppConfig\n\nclass TodoAppConfig(AppConfig):\n    name = 'todo_app'"}, {"file": "admin.py", "path": "todo_project/todo_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "todo_project/todo_app/models.py", "code": "# Create your models here."}, {"file": "tests.py", "path": "todo_project/todo_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "wsgi.py", "path": "todo_project/todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "todo_project/todo_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "todo_project/todo_project/__init__.py", "code": ""}], "8": [{"file": "manage.py", "path": "calendar_app/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"calendar_app.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "calendar_app/calendar_app/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # Removed for brevity\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')"}, {"file": "urls.py", "path": "calendar_app/calendar_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('events.urls')), \n]\n"}, {"file": "apps.py", "path": "calendar_app/events/apps.py", "code": "from django.apps import AppConfig\n\nclass EventsConfig(AppConfig):\n    name = 'events'"}, {"file": "admin.py", "path": "calendar_app/events/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "calendar_app/events/models.py", "code": "from django.db import models\n\n# Create your models here. \n# Example: \n# class Event(models.Model):\n#     title = models.CharField(max_length=200)\n#     date = models.DateField()\n#     description= models.TextField()\n"}, {"file": "views.py", "path": "calendar_app/events/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport datetime\n\ndef home(request):\n    current_date = datetime.date.today()\n    return render(request, 'events/home.html', {'current_date': current_date})\n\n# Add other views for calendar, event details, etc. here"}, {"file": "urls.py", "path": "calendar_app/events/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    # ... other paths for calendar, event details, etc.\n]"}, {"file": "home.html", "path": "calendar_app/events/templates/events/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar App</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-title\">Welcome to the Calendar App</h1>\n        <p id=\"current-date\" class=\"current-date\">Current Date: {{ current_date }}</p>\n        <a href=\"#calendar\" id=\"calendar-link\" class=\"calendar-link\">Go to Calendar</a>\n    </div>\n</body>\n</html>"}, {"file": "wsgi.py", "path": "calendar_app/calendar_app/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "calendar_app/calendar_app/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n\napplication = get_asgi_application()"}], "9": [{"file": "manage.py", "path": "mysite/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"mysite.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "mysite/mysite/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'website',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "mysite/mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('website.urls')),\n]\n"}, {"file": "urls.py", "path": "mysite/website/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about/', views.about, name='about'),\n    path('support/', views.support, name='support'),\n]\n"}, {"file": "views.py", "path": "mysite/website/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'website/home.html')\n\ndef features(request):\n    return render(request, 'website/features.html')\n\ndef pricing(request):\n    return render(request, 'website/pricing.html')\n\ndef about(request):\n    return render(request, 'website/about.html')\n\ndef support(request):\n    return render(request, 'website/support.html')\n"}, {"file": "home.html", "path": "mysite/website/templates/website/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-title\">AI Chatbot</h1>\n        <p id=\"product-overview\" class=\"product-overview\">Discover the power of our AI Chatbot. It's designed to...\n        </p>\n    </div>\n</body>\n</html>\n"}, {"file": "features.html", "path": "mysite/website/templates/website/features.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Features</title>\n</head>\n<body>\n    <div id=\"features-container\" class=\"features-container\">\n        <h1 id=\"features-title\" class=\"features-title\">Key Features</h1>\n        <ul id=\"feature-list\" class=\"feature-list\">\n            <li id=\"feature-1\" class=\"feature-item\">Feature 1</li>\n            <li id=\"feature-2\" class=\"feature-item\">Feature 2</li>\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "pricing.html", "path": "mysite/website/templates/website/pricing.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Pricing</title>\n</head>\n<body>\n    <div id=\"pricing-container\" class=\"pricing-container\">\n        <h1 id=\"pricing-title\" class=\"pricing-title\">Pricing Plans</h1>\n        <div id=\"pricing-plans\" class=\"pricing-plans\">\n        </div>\n        <form id=\"contact-sales\" class=\"contact-sales-form\" action=\"/contact\" method=\"post\">\n            <button type=\"submit\">Contact Sales</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "mysite/website/templates/website/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"about-container\">\n        <h1 id=\"about-title\" class=\"about-title\">About Us</h1>\n        <p id=\"company-background\" class=\"company-background\">Learn about our company and the passionate team...\n        </p>\n    </div>\n</body>\n</html>\n"}, {"file": "support.html", "path": "mysite/website/templates/website/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n    <div id=\"support-container\" class=\"support-container\">\n        <h1 id=\"support-title\" class=\"support-title\">Support</h1>\n        <div id=\"faq\" class=\"faq-section\">\n            </div>\n        <form id=\"support-message\" class=\"support-message-form\" action=\"/support_message\" method=\"post\">\n            <button type=\"submit\">Send Support Message</button>\n        </form>\n\n    </div>\n</body>\n</html>\n"}, {"file": "asgi.py", "path": "mysite/mysite/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_asgi_application()\n"}, {"file": "wsgi.py", "path": "mysite/mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "mysite/mysite/__init__.py", "code": ""}, {"file": "__init__.py", "path": "mysite/website/__init__.py", "code": ""}, {"file": "admin.py", "path": "mysite/website/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "mysite/website/apps.py", "code": "from django.apps import AppConfig\n\n\nclass WebsiteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'website'\n"}, {"file": "models.py", "path": "mysite/website/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "mysite/website/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}], "11": [{"file": "manage.py", "path": "test_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"test_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "test_project/test_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'fake_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'home',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'test_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'test_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = []\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "test_project/test_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('home.urls')),\n]"}, {"file": "urls.py", "path": "test_project/home/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "test_project/home/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home/home.html')\n\ndef about(request):\n    return render(request, 'home/about.html')"}, {"file": "home.html", "path": "test_project/home/templates/home/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title id=\"pageTitle\">Welcome</title>\n</head>\n<body>\n    <h1 id=\"welcomeMessage\">Welcome Message</h1>\n\n    <form id=\"testCodeForm\" method=\"post\">\n        <label for=\"statusSelect\">Status:</label>\n        <select id=\"statusSelect\" name=\"status\">\n            <option value=\"select\">Select</option>\n            <option value=\"pass\">Pass</option>\n            <option value=\"fail\">Fail</option>\n        </select>\n        <button id=\"submitButton\" type=\"submit\">Submit</button><br>\n\n        <label for=\"importFile\">Import JSON:</label>\n        <input type=\"file\" id=\"importFile\" name=\"import_file\" accept=\".json\"><br>\n\n        <label for=\"reviewNotes\">Review Notes:</label>\n        <textarea id=\"reviewNotes\" name=\"review_notes\"></textarea>\n    </form>\n\n</body>\n</html>"}, {"file": "about.html", "path": "test_project/home/templates/home/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title id=\"aboutPageTitle\">About Us</title>\n</head>\n<body>\n    <div id=\"aboutContent\">\n    This is the about page. Here you can find information about the website.  \n    </div>\n</body>\n</html>"}, {"file": "apps.py", "path": "test_project/home/apps.py", "code": "from django.apps import AppConfig\n\nclass HomeConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'home'"}, {"file": "__init__.py", "path": "test_project/home/__init__.py", "code": ""}, {"file": "admin.py", "path": "test_project/home/admin.py", "code": "from django.contrib import admin"}, {"file": "models.py", "path": "test_project/home/models.py", "code": "from django.db import models"}, {"file": "tests.py", "path": "test_project/home/tests.py", "code": "from django.test import TestCase"}, {"file": "views.py", "path": "test_project/home/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\n\ndef home(request):\n    return render(request, 'home/home.html')\n\ndef about(request):\n\n    return render(request, 'home/about.html')"}, {"file": "asgi.py", "path": "test_project/test_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "test_project/test_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "test_project/test_project/__init__.py", "code": ""}], "12": [{"file": "manage.py", "path": "expense_tracker/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"expense_tracker.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "expense_tracker/expense_tracker/settings.py", "code": "# ... (Standard Django settings)\n\nINSTALLED_APPS = [\n    # ... (Other apps)\n    'users',\n    'claims',\n    'budget',\n]\n\n# ... (Other settings)"}, {"file": "urls.py", "path": "expense_tracker/expense_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('users.urls')), # Home page and authentication\n    path('employee/', include('claims.urls')),\n    path('admin_portal/', include('budget.urls')), \n]"}, {"file": "models.py", "path": "expense_tracker/users/models.py", "code": "from django.contrib.auth.models import AbstractUser\n\nclass CustomUser(AbstractUser):\n    pass # Add custom fields as needed"}, {"file": "urls.py", "path": "expense_tracker/users/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login, name='login'),\n    # ... other auth related urls\n]"}, {"file": "views.py", "path": "expense_tracker/users/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'users/home.html')\n\n# other view functions..."}, {"file": "home.html", "path": "expense_tracker/users/templates/users/home.html", "code": "<div id=\"home-container\" class=\"home-container\">\n  <h1 id=\"welcome-message\" class=\"welcome-message\">Welcome to Expense Tracker</h1>\n  <a id=\"login-link\" class=\"auth-link\" href=\"{% url 'login' %}\">Log In</a>\n  <a id=\"signup-link\" class=\"auth-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n</div>"}, {"file": "models.py", "path": "expense_tracker/claims/models.py", "code": "# Define models for claims etc"}, {"file": "models.py", "path": "expense_tracker/budget/models.py", "code": "# Define models for budget, expenses, etc."}, {"file": "urls.py", "path": "expense_tracker/claims/urls.py", "code": "# Define URL patterns for employee portal"}, {"file": "urls.py", "path": "expense_tracker/budget/urls.py", "code": "# Define URL patterns for admin portal"}, {"file": "views.py", "path": "expense_tracker/claims/views.py", "code": "# Define view functions for employee portal"}, {"file": "views.py", "path": "expense_tracker/budget/views.py", "code": "# Define view functions for admin portal"}, {"file": "asgi.py", "path": "expense_tracker/expense_tracker/asgi.py", "code": "# ... (Standard Django asgi.py)"}, {"file": "wsgi.py", "path": "expense_tracker/expense_tracker/wsgi.py", "code": "# ... (Standard Django wsgi.py)"}], "14": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"helloworld.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "helloworld/helloworld/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = \"!6xmo&@ki5k=q5!h#j-u#g_88%e+uwp+_825*a%87z0+p^o=w\"\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    \"django.contrib.admin\",\n    \"django.contrib.auth\",\n    \"django.contrib.contenttypes\",\n    \"django.contrib.sessions\",\n    \"django.contrib.messages\",\n    \"django.contrib.staticfiles\",\n    \"core\",\n]\n\nMIDDLEWARE = [\n    \"django.middleware.security.SecurityMiddleware\",\n    \"django.contrib.sessions.middleware.SessionMiddleware\",\n    \"django.middleware.common.CommonMiddleware\",\n    \"django.middleware.csrf.CsrfViewMiddleware\",\n    \"django.contrib.auth.middleware.AuthenticationMiddleware\",\n    \"django.contrib.messages.middleware.MessageMiddleware\",\n    \"django.middleware.clickjacking.XFrameOptionsMiddleware\",\n]\n\nROOT_URLCONF = \"helloworld.urls\"\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = \"helloworld.wsgi.application\"\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.sqlite3\",\n        \"NAME\": os.path.join(BASE_DIR, \"db.sqlite3\"),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.MinimumLengthValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.CommonPasswordValidator\",\n    },\n    {\n        \"NAME\": \"django.contrib.auth.password_validation.NumericPasswordValidator\",\n    },\n]\n\nLANGUAGE_CODE = \"en-us\"\n\nTIME_ZONE = \"UTC\"\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = \"/static/\""}, {"file": "urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"core.urls\")),\n]"}, {"file": "urls.py", "path": "helloworld/core/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path(\"\", views.index, name=\"index\"),\n]"}, {"file": "views.py", "path": "helloworld/core/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, \"core/index.html\")"}, {"file": "index.html", "path": "helloworld/core/templates/core/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title id=\"title-tag\">Hello World</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n        }\n        #hello-world-container{\n            padding: 20px;\n            border-radius: 8px;\n            background-color: white;\n        }\n        #hello-world-text{\n            font-size: 2em; /* Responsive font size */\n            color: #333;\n        }\n        @media (max-width: 768px) {\n            #hello-world-text {\n                font-size: 1.5em;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div id=\"hello-world-container\" class=\"hello-world-container\">\n        <h1 id=\"hello-world-text\" class=\"hello-world-text\">Hello World</h1>\n    </div>\n</body>\n</html>"}], "15": [{"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myproject.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'some_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom myapp import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'myapp/home.html')\n\ndef helloworld(request):\n    return render(request, 'myapp/helloworld.html')"}, {"file": "home.html", "path": "myproject/myapp/templates/myapp/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <a id=\"helloworld-button\" class=\"button\" href=\"{% url 'helloworld' %}\">Hello World Page</a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myproject/myapp/templates/myapp/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"helloworld-message\" class=\"message\">Hello World!</h1>\n</body>\n</html>"}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'"}, {"file": "admin.py", "path": "myproject/myapp/admin.py", "code": "from django.contrib import admin\n# Register your models here."}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": ""}, {"file": "models.py", "path": "myproject/myapp/models.py", "code": ""}, {"file": "tests.py", "path": "myproject/myapp/tests.py", "code": ""}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'myapp/home.html')\n\ndef helloworld(request):\n    return render(request, 'myapp/helloworld.html')"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "asgi.py", "path": "myproject/myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()"}], "18": [{"file": "index.html", "path": "index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Bash Crawl</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div id=\"main-menu\" class=\"page\">\n        <h1>Bash Crawl</h1>\n        <button id=\"start-game\" class=\"menu-button\">Start Game</button>\n        <button id=\"instructions\" class=\"menu-button\">Instructions</button>\n        <button id=\"exit-game\" class=\"menu-button\">Exit Game</button>\n    </div>\n    <div id=\"game-environment\" class=\"page\" style=\"display:none;\">\n        <div id=\"game-output\" class=\"game-area\"></div>\n        <input id=\"command-input\" class=\"command-area\" type=\"text\">\n        <button id=\"submit-command\" class=\"command-area\">Submit</button>\n        <div id=\"inventory\" class=\"inventory-area\"></div>\n\n    </div>\n    <div id=\"help-support\" class=\"page\" style=\"display:none;\">\n       <p>Help and Support information goes here.</p>\n       <button id=\"back-to-game\" class=\"menu-button\">Back to Game</button>\n\n    </div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>"}, {"file": "style.css", "path": "style.css", "code": "body {\n    font-family: monospace;\n    background-color: #000;\n    color: #fff;\n}\n\n.page {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: center;\n    height: 100vh;  /* Ensure pages take full viewport height */\n}\n\n.game-area, .command-area, .inventory-area {\n    margin-top: 10px; /* Space between elements */\n    padding: 10px; /* Add some padding */\n    border: 1px solid #ccc; /* Add a border */\n    width: 80%; /* Take up most of the container width */\n    background-color: #222; /* Darker background */\n    color: #eee; /* Lighter text */\n}\n\n.menu-button {\n    background-color: #4CAF50; /* Green */\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n}"}, {"file": "script.js", "path": "script.js", "code": "// Initialize game state\nlet currentRoom = 'start';\nlet inventory = [];\n\n// Function to update game output\nfunction updateOutput(text) {\n    const gameOutput = document.getElementById('game-output');\n    gameOutput.innerHTML += '<p>' + text + '</p>';\n}\n\n// Function to handle commands\nfunction parseCommand(command) {\n    switch(command.toLowerCase()) {\n        case 'start game':\n            document.getElementById('main-menu').style.display = 'none';\n            document.getElementById('game-environment').style.display = 'flex'; // Show\n            updateOutput(\"Welcome to Bash Crawl!\");\n            updateOutput(\"You are in the starting room.\");\n            break;\n        case 'instructions':\n           // Handle displaying instructions\n            alert('Game instructions will be added here.')\n            break;\n        case 'exit game':\n            window.close();\n            break;\n        case 'move north':\n        case 'move south':\n        case 'move east':\n        case 'move west':\n            updateOutput(\"You moved \" + command.substring(5).toLowerCase() + \".\");\n            // Implement room change logic here\n            break;\n        case 'look around':\n            updateOutput(\"You are in a dimly lit room.\");\n            break;            \n        case 'pick item':\n                if (currentRoom == 'start'){\n                    inventory.push('key');\n                    updateOutput('You picked up a key.');\n                    currentRoom = 'nextRoom'  // Change this if you want multiple items/rooms\n                } else {\n                    updateOutput('There are no items here');\n                }\n                updateInventory();\n            break;\n        case 'check inventory':\n            updateInventory();\n            break;\n        default:\n            updateOutput(\"Invalid command.\");\n    }\n}\n\nfunction updateInventory(){\n    const inventoryDiv = document.getElementById('inventory');\n    inventoryDiv.innerHTML = '<p>Inventory:' + inventory.join(', ') + '</p>';\n\n}\n\n// Event listeners for buttons\ndocument.getElementById('start-game').addEventListener('click', () => {\n    parseCommand('start game');\n});\ndocument.getElementById('instructions').addEventListener('click', () => {\n    parseCommand('instructions');\n});\ndocument.getElementById('exit-game').addEventListener('click', () => {\n    parseCommand('exit game');\n});\ndocument.getElementById('submit-command').addEventListener('click', () => {\n    const commandInput = document.getElementById('command-input');\n    parseCommand(commandInput.value);\n    commandInput.value = ''; // Clear the input field\n});\n\ndocument.getElementById('command-input').addEventListener('keyup', (event) => {\n    if (event.key === 'Enter') { // Check if Enter key is pressed\n        document.getElementById('submit-command').click(); // Trigger the button click\n    }\n});\n\n\n"}], "19": [{"file": "main.py", "path": "batch_program/main.py", "code": "# Main program to execute the batch process\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom validate_dataset import ValidateDataset\nfrom process_data import ProcessData\nfrom calculate_weekly_deaths import CalculateWeeklyDeaths\n\n\ndef ReadDeathlistData(filepath):\n    try:\n        df = pd.read_csv(filepath)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File not found at {filepath}\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred while reading the file: {e}\")\n        return None\n\n\ndef GenerateHistogram(weekly_deaths):\n    plt.figure(figsize=(10, 6))\n    plt.bar(weekly_deaths.index, weekly_deaths.values)\n    plt.xlabel(\"Week\")\n    plt.ylabel(\"Number of Deaths\")\n    plt.title(\"Weekly Deaths\")\n    plt.savefig(\"weekly_deaths_histogram.png\")  # Save to a file\n    return plt\n\n\ndef OutputHistogram(plt):\n    plt.show()\n\n\nif __name__ == \"__main__\":\n    filepath = \"Deathlist.csv\"\n    data = ReadDeathlistData(filepath)\n\n    if data is not None:\n        validator = ValidateDataset()\n        if validator.validate(data):\n            processor = ProcessData()\n            processed_data = processor.process(data)\n\n            calculator = CalculateWeeklyDeaths()\n            weekly_deaths = calculator.calculate(processed_data)\n\n            histogram = GenerateHistogram(weekly_deaths)\n            OutputHistogram(histogram)\n        else:\n            print(\"Dataset validation failed.\")\n"}, {"file": "validate_dataset.py", "path": "batch_program/validate_dataset.py", "code": "class ValidateDataset:\n    def validate(self, data):\n        # Implement validation logic here. Check for required columns, data types, etc.\n        # This is a placeholder, replace with your actual validation rules.\n        required_columns = [\"Date of Death\", \"Age at Death\"] #Example\n        if all(col in data.columns for col in required_columns):\n            return True  # Replace with actual validation result\n        else:\n            return False"}, {"file": "process_data.py", "path": "batch_program/process_data.py", "code": "import pandas as pd\n\nclass ProcessData:\n    def process(self, data):\n        # Implement data processing logic here\n        # This is a placeholder, replace with your actual data processing code\n        try:\n            # Example processing: converting 'Date of Death' to datetime objects\n            data[\"Date of Death\"] = pd.to_datetime(data[\"Date of Death\"])\n            return data\n        except KeyError as e:\n            print(f\"Missing required column: {e}\")\n            return None # or handle the error appropriately\n        except Exception as e:\n            print(f\"An error occurred during data processing: {e}\")\n            return None\n\n"}, {"file": "calculate_weekly_deaths.py", "path": "batch_program/calculate_weekly_deaths.py", "code": "import pandas as pd\n\nclass CalculateWeeklyDeaths:\n    def calculate(self, data):\n        # Implement weekly deaths calculation logic here\n        # This is a placeholder, replace with your actual calculation code\n        try:\n            weekly_deaths = data.groupby(pd.Grouper(key=\"Date of Death\", freq=\"W\")).size()\n            return weekly_deaths\n        except KeyError as e:\n            print(f\"Missing required column: {e}\")\n            return None  # or handle the error as needed\n        except Exception as e:\n            print(f\"An error occurred during weekly death calculation: {e}\")\n            return None\n"}, {"file": "Deathlist.csv", "path": "batch_program/Deathlist.csv", "code": "Date of Death,Age at Death\n2024-01-01,75\n2024-01-08,82\n2024-01-08,65\n2024-01-15,90\n2024-01-15,78\n2024-01-22,54\n2024-01-29,88\n2024-02-05,72\n"}, {"file": "requirements.txt", "path": "batch_program/requirements.txt", "code": "pandas\nmatplotlib"}]}