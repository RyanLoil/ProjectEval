{"1": [{"file": "manage.py", "path": "bmi_calculator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y@)6w%2)05#97+3i-q(3j%c3@n9f7%h)m4l18m6^#u_w)i5!b'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi.urls')),\n]\n"}, {"file": "urls.py", "path": "bmi_calculator/bmi/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]\n"}, {"file": "views.py", "path": "bmi_calculator/bmi/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef bmi_calculator(request):\n    if request.method == 'POST':\n        weight = float(request.POST.get('weight'))\n        height = float(request.POST.get('height'))\n        bmi = weight / (height ** 2)\n        return render(request, 'bmi/bmi_calculator.html', {'bmi': bmi})\n    return render(request, 'bmi/bmi_calculator.html')\n"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/bmi/templates/bmi/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1>BMI Calculator</h1>\n        <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"weight-input-container\" class=\"input-container\">\n              <label for=\"weight\">Weight (kg):</label><br>\n              <input type=\"number\" id=\"weight\" name=\"weight\" class=\"weight-input\" required><br>\n            </div>\n            <div id=\"height-input-container\" class=\"input-container\"> \n              <label for=\"height\">Height (m):</label><br>\n              <input type=\"number\" step=\"0.01\" id=\"height\" name=\"height\" class=\"height-input\" required><br>\n            </div>\n            <button id=\"calculate-button\" class=\"calculate-button\" type=\"submit\">Calculate</button><br>\n        </form>\n      \n        {% if bmi %}\n          <div id=\"bmi-result-container\" class=\"result-container\"> \n            <p id=\"bmi-result\" class=\"bmi-result\">Your BMI is: {{ bmi }}</p>\n          </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "wsgi.py", "path": "bmi_calculator/bmi_calculator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "bmi_calculator/bmi_calculator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "bmi_calculator/bmi_calculator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "bmi_calculator/bmi/__init__.py", "code": ""}, {"file": "apps.py", "path": "bmi_calculator/bmi/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BmiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bmi'\n"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"password_generator.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\\n            available on your PYTHONPATH environment variable? Did you \\\n            forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y@qnd)w1^05(r1m-u=s8%7+p3+^y!c@k(68c#13$m19=b-w2'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport random\n\n# Create your views here.\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\ndef about(request):\n    return render(request, 'generator/about.html')\n\n\ndef password(request):\n\n    characters = list('abcdefghijklmnopqrstuvwxyz')\n\n    if request.GET.get('uppercase'):\n        characters.extend(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    if request.GET.get('special'):\n        characters.extend(list('!@#$%^&*()'))\n    if request.GET.get('numbers'):\n        characters.extend(list('0123456789'))\n\n    length = int(request.GET.get('length',12))\n\n    thepassword = ''\n    for x in range(length):\n        thepassword += random.choice(characters)\n\n    return render(request, 'generator/password.html', {'password':thepassword})\n"}, {"file": "home.html", "path": "password_generator/generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password Generator</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n      <h1 id=\"title\" class=\"title\">Password Generator</h1>\n      <form action=\"password\" method=\"get\">\n          <div id=\"length-container\" class=\"length-container\">\n            <label for=\"length\" id=\"length-label\" class=\"length-label\">Password length:</label>\n            <select name=\"length\" id=\"length\" class=\"length\">\n                <option value=\"6\">6</option>\n                <option value=\"7\">7</option>\n                <option value=\"8\">8</option>\n                <option value=\"9\">9</option>\n                <option value=\"10\">10</option>\n                <option value=\"11\">11</option>\n                <option value=\"12\" selected=\"selected\">12</option>\n                <option value=\"13\">13</option>\n                <option value=\"14\">14</option>\n            </select>\n          </div>\n\n          <div>\n          <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" class=\"uppercase\">\n          <label for=\"uppercase\" id=\"uppercase-label\" class=\"uppercase-label\">Uppercase</label><br>\n          <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" class=\"numbers\">\n          <label for=\"numbers\" id=\"numbers-label\" class=\"numbers-label\">Numbers</label><br>\n          <input type=\"checkbox\" name=\"special\" id=\"special\" class=\"special\">\n          <label for=\"special\" id=\"special-label\" class=\"special-label\">Special Characters</label><br>\n          </div>\n\n          <input type=\"submit\" value=\"Generate Password\" id=\"submit\" class=\"submit\"><br>\n          <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"about-link\">About</a>\n      </form>\n    </div>\n</body>\n</html>\n"}, {"file": "password.html", "path": "password_generator/generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Password</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"password-header\" class=\"password-header\">Your password is:</h1>\n        <h2 id=\"password\" class=\"password\">{{ password }}</h2>\n        <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Home</a>\n    </div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "password_generator/generator/templates/generator/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n      <h1 id=\"title\" class=\"title\">About Page</h1>\n      <p id=\"description\" class=\"description\">This is a simple password generator built using Django.</p>\n      <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Home</a>\n    </div>\n</body>\n</html>\n"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "password_generator/password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "apps.py", "path": "password_generator/generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    name = 'generator'\n"}, {"file": "admin.py", "path": "password_generator/generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "password_generator/generator/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "password_generator/generator/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "qrcode_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "qrcode_generator/qrcode_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y#9t_i3g9#wmyz5x&@-t_e-4w7#u$q_z^%j77!j4=5u9(i!_'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcode_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcode_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "qrcode_generator/qrcode_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom core import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n]"}, {"file": "views.py", "path": "qrcode_generator/core/views.py", "code": "import qrcode\nfrom django.shortcuts import render\nfrom io import BytesIO\nimport base64\n\ndef home(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')  # Get data from the form\n        img = qrcode.make(data)\n        buffered = BytesIO()\n        img.save(buffered, format=\"PNG\")\n        img_str = base64.b64encode(buffered.getvalue()).decode()\n        context = {'qr_code': img_str, 'data': data} \n        return render(request, 'core/home.html', context)\n    return render(request, 'core/home.html')\n"}, {"file": "home.html", "path": "qrcode_generator/core/templates/core/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1>QR Code Generator</h1>\n        <form method=\"post\" id=\"qr-form\" class=\"qr-form\">\n            {% csrf_token %}\n            <label for=\"data\" id=\"data-label\" class=\"data-label\">Enter data:</label><br>\n            <input type=\"text\" id=\"data\" name=\"data\" class=\"data-input\" required><br><br>\n            <button type=\"submit\" id=\"submit-btn\" class=\"submit-btn\">Generate QR Code</button>\n        </form>\n\n        {% if qr_code %}\n            <div id=\"qr-code-container\" class=\"qr-code-container\">\n                <h2 id=\"qr-code-title\" class=\"qr-code-title\">Generated QR Code for: <span id=\"qr-data\" class=\"qr-data\">{{ data }}</span></h2>\n                <img id=\"qr-code-img\" class=\"qr-code-img\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "qrcode_generator/core/__init__.py", "code": ""}, {"file": "__init__.py", "path": "qrcode_generator/qrcode_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "qrcode_generator/qrcode_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "wsgi.py", "path": "qrcode_generator/qrcode_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n\napplication = get_wsgi_application()\n"}], "5": [{"file": "manage.py", "path": "markdown_converter/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\\n            available on your PYTHONPATH environment variable? Did you \\\n            forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "markdown_converter/markdown_converter/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y#m7z_!o03)%9+5w39xpp_4c3d9#v(7(30f$imz-7z+u0j%k3'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "markdown_converter/markdown_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "urls.py", "path": "markdown_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.convert, name='convert'),\n]"}, {"file": "views.py", "path": "markdown_converter/converter/views.py", "code": "from django.shortcuts import render\nimport markdown\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'converter/convert.html', {'html_output': html_output, 'markdown_text': markdown_text})\n    return render(request, 'converter/convert.html')"}, {"file": "convert.html", "path": "markdown_converter/converter/templates/converter/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Markdown Converter</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"converter-container\">\n        <h1 id=\"converter-title\" class=\"converter-title\">Markdown Converter</h1>\n        <form id=\"converter-form\" class=\"converter-form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" class=\"markdown-text\" name=\"markdown_text\">{{ markdown_text|default:'' }}</textarea><br>\n            <button id=\"convert-button\" class=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n        <div id=\"html-output\" class=\"html-output\">\n            {{ html_output|safe }}\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "wsgi.py", "path": "markdown_converter/markdown_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "markdown_converter/markdown_converter/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "markdown_converter/markdown_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "markdown_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "markdown_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "markdown_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    name = 'converter'"}, {"file": "models.py", "path": "markdown_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "markdown_converter/converter/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}], "8": [{"file": "manage.py", "path": "mycalendar/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mycalendar.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "mycalendar/mycalendar/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y9*q7!%g6y=-z-b%u!z7x@n#v2g08i&4n&37&bp+8v!w3h-y)'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendarapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mycalendar.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mycalendar.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "mycalendar/mycalendar/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendarapp.urls')),\n]\n"}, {"file": "urls.py", "path": "mycalendar/calendarapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar_view'),\n]\n"}, {"file": "views.py", "path": "mycalendar/calendarapp/views.py", "code": "import calendar\nfrom datetime import date\nfrom django.shortcuts import render\n\ndef calendar_view(request, year=date.today().year, month=date.today().month):\n    current_month = calendar.monthcalendar(year, month)\n    month_name = calendar.month_name[month]\n\n    context = {\n        'year': year,\n        'month_name': month_name,\n        'current_month': current_month,\n    }\n    return render(request, 'calendarapp/calendar.html', context)\n"}, {"file": "calendar.html", "path": "mycalendar/calendarapp/templates/calendarapp/calendar.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Monthly Calendar</title>\n</head>\n<body>\n    <h1 id=\"month-title\">{{ month_name }} {{ year }}</h1>\n    <table id=\"calendar-table\" class=\"calendar\">\n      <thead id=\"calendar-head\">\n        <tr id=\"weekdays-row\">\n          {% for day in ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] %}\n            <th id=\"weekday-{{ forloop.counter }}\" class=\"weekday\">{{ day }}</th>\n          {% endfor %}\n        </tr>\n      </thead>\n      <tbody id=\"calendar-body\">\n        {% for week in current_month %}\n          <tr id=\"week-{{ forloop.parentloop.counter }}\" class=\"week\">\n            {% for day in week %}\n              {% if day == 0 %}\n                <td id=\"day-empty-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"empty\">&nbsp;</td>\n              {% else %}\n                <td id=\"day-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"day\">{{ day }}</td>\n              {% endif %}\n            {% endfor %}\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n</body>\n</html>\n"}, {"file": "asgi.py", "path": "mycalendar/mycalendar/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mycalendar.settings')\n\napplication = get_asgi_application()\n"}, {"file": "wsgi.py", "path": "mycalendar/mycalendar/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mycalendar.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "mycalendar/mycalendar/__init__.py", "code": ""}, {"file": "__init__.py", "path": "mycalendar/calendarapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "mycalendar/calendarapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "mycalendar/calendarapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalendarappConfig(AppConfig):\n    name = 'calendarapp'\n"}, {"file": "models.py", "path": "mycalendar/calendarapp/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "mycalendar/calendarapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}], "9": [{"file": "manage.py", "path": "my_ai_chatbot_website/manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_ai_chatbot_website.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/settings.py", "code": "import os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot_website',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'my_ai_chatbot_website.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'my_ai_chatbot_website.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_website.urls')),\n]"}, {"file": "urls.py", "path": "my_ai_chatbot_website/chatbot_website/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "views.py", "path": "my_ai_chatbot_website/chatbot_website/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'chatbot_website/index.html')\n"}, {"file": "index.html", "path": "my_ai_chatbot_website/templates/chatbot_website/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot Introduction</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\"> \n</head>\n<body>\n    <header id=\"header\" class=\"main-header\">\n        <h1 id=\"main-title\" class=\"title\">Introducing Our AI Chatbot</h1>\n    </header>\n    <section id=\"introduction\" class=\"section\">\n        <p id=\"intro-paragraph\" class=\"paragraph\">Discover the future of customer interaction with our cutting-edge AI chatbot. Designed to enhance user experience and streamline communication, our chatbot offers a seamless and intelligent way to engage with your audience.</p> \n    </section>\n\n    <section id=\"features\" class=\"section\">\n        <h2 id=\"features-title\" class=\"subtitle\">Key Features</h2>\n        <ul id=\"features-list\" class=\"feature-list\">\n            <li id=\"feature-1\" class=\"feature-item\">24/7 Availability</li>\n            <li id=\"feature-2\" class=\"feature-item\">Instant Responses</li>\n            <li id=\"feature-3\" class=\"feature-item\">Personalized Interactions</li>\n            <li id=\"feature-4\" class=\"feature-item\">Multilingual Support</li>\n        </ul>\n    </section>\n\n    <footer id=\"footer\" class=\"main-footer\">\n        <p id=\"copyright\" class=\"copyright\">&copy; 2024 Your Company</p>\n    </footer>\n</body>\n</html>"}, {"file": "style.css", "path": "my_ai_chatbot_website/static/style.css", "code": "/* Basic styling for demonstration */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.main-header {\n    background-color: #f0f0f0;\n    padding: 20px;\n    text-align: center;\n}\n\n.section {\n    padding: 20px;\n}\n\n.feature-list {\n    list-style-type: none; /* Remove bullet points */\n    padding: 0; \n}\n\n.feature-item {\n    margin-bottom: 10px;\n}"}, {"file": "asgi.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_ai_chatbot_website.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_ai_chatbot_website.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/__init__.py", "code": ""}, {"file": "__init__.py", "path": "my_ai_chatbot_website/chatbot_website/__init__.py", "code": ""}, {"file": "apps.py", "path": "my_ai_chatbot_website/chatbot_website/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ChatbotWebsiteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot_website'"}, {"file": "admin.py", "path": "my_ai_chatbot_website/chatbot_website/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "my_ai_chatbot_website/chatbot_website/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "my_ai_chatbot_website/chatbot_website/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n    'chartjs'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\n"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),\n]\n"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Food(models.Model):\n    name = models.CharField(max_length=200)\n    calories = models.IntegerField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True) # Add user relationship\n\n    def __str__(self):\n        return self.name\n\nclass Consumption(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    food_consumed = models.ForeignKey(Food, on_delete=models.CASCADE)\n    quantity = models.IntegerField(default=1)\n    date_consumed = models.DateField(auto_now_add=True)\n"}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Food, Consumption\nfrom django.contrib.auth.decorators import login_required\nfrom django.db.models import Sum\nfrom django.http import JsonResponse\nfrom chartjs.views.lines import BaseLineChartView\n\n@login_required(login_url='/admin/login/')\ndef index(request):\n    if request.method == \"POST\":\n        food_consumed = request.POST['food_consumed']\n        quantity = int(request.POST.get('quantity', 1))\n        consumption = Consumption(user=request.user, food_consumed=Food.objects.get(name=food_consumed), quantity=quantity)\n        consumption.save()\n        return redirect('/')\n\n    foods = Food.objects.filter(user=request.user) # Filter by logged in user\n    date = request.GET.get('date', None) # Handle optional date filtering\n    if date:\n       consumptions = Consumption.objects.filter(user=request.user, date_consumed=date)\n    else:\n        consumptions = Consumption.objects.filter(user=request.user)\n\n    total_calories = consumptions.aggregate(sum=Sum('food_consumed__calories') * Sum('quantity'))['sum'] or 0  # Calculate total calories\n    return render(request, 'tracker/index.html', {'foods': foods, 'consumptions': consumptions, 'total_calories': total_calories})\n\n\ndef add_food(request):\n    if request.method == \"POST\":\n        food_name = request.POST['food-name']\n        calories = request.POST['calories']\n        food = Food(name=food_name, calories=int(calories), user=request.user) # Associate with logged in user\n        food.save()\n        return redirect('/')\n\n    return render(request, 'tracker/add_food.html')\n\n\nclass CalorieLineChartView(BaseLineChartView):\n    def get_labels(self):\n        \"\"\"Return 7 labels for the x-axis.\"\"\"\n        return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"]\n\n    def get_providers(self):\n        \"\"\"Return names of datasets.\"\"\"\n        return [\"Central\", \"Eastside\", \"Westside\"]\n\n    def get_data(self):\n        \"\"\"Return 3 datasets to plot.\"\"\"\n\n        return [[75, 44, 92, 11, 44, 95, 35],  #Central\n                [41, 92, 18, 3, 73, 87, 92],   # Eastside\n                [87, 21, 94, 3, 90, 13, 65]] # Westside\n\ndef calorie_chart_json(request):\n        consumptions = Consumption.objects.all()\n        labels = []\n        data = []\n\n        for consumption in consumptions:\n                labels.append(consumption.date_consumed)\n                data.append(consumption.food_consumed.calories * consumption.quantity)\n        return JsonResponse(data={'labels': labels, 'data': data})\n"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom .views import CalorieLineChartView, calorie_chart_json\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('add_food/', views.add_food, name='add_food'),\n      path('calorie_chart/', calorie_chart_json, name='calorie_chart_json'),\n    path('line_chart/', CalorieLineChartView.as_view(), name='calorie_line_chart'),\n]\n"}, {"file": "index.html", "path": "calorie_tracker/tracker/templates/tracker/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calorie Tracker</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1>Calorie Tracker</h1>\n\n    <form method=\"post\" id=\"consumption-form\" class=\"consumption-form\">\n        {% csrf_token %}\n        <select id=\"food_consumed\" name=\"food_consumed\" class=\"food-select\">\n            {% for food in foods %}\n                <option value=\"{{ food.name }}\">{{ food.name }} ({{ food.calories }} calories)</option>\n            {% endfor %}\n        </select>\n        <input id=\"quantity\" type=\"number\" name=\"quantity\" value=\"1\" min=\"1\" class=\"quantity-input\">\n        <button id=\"submit-btn\" type=\"submit\" class=\"submit-btn\">Add</button>\n    </form>\n\n    <h2>Today's Consumptions</h2>\n    <ul id=\"consumption-list\" class=\"consumption-list\">\n        {% for consumption in consumptions %}\n            <li id=\"consumption-item-{{ consumption.id }}\" class=\"consumption-item\">{{ consumption.food_consumed.name }} - {{ consumption.quantity }} - {{ consumption.food_consumed.calories }} calories</li>\n        {% endfor %}\n    </ul>\n\n    <div>\n        <h2>Total Calories Consumed: <span id=\"total-calories\">{{ total_calories }}</span></h2>\n        <div style=\"width: 400px;\">\n    <canvas id=\"calorieChart\"></canvas>\n</div>\n    </div>\n\n<script>\nconst ctx = document.getElementById('calorieChart');\n\n$.ajax({\n    url: 'calorie_chart/',\n    type: 'GET',\n    dataType: 'json',\n    success: function (data) {\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: data.labels,\n                datasets: [{\n                    label: 'Calorie Intake',\n                    data: data.data,\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n})\n</script>\n</body>\n</html>\n"}, {"file": "add_food.html", "path": "calorie_tracker/tracker/templates/tracker/add_food.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Add Food</title>\n</head>\n<body>\n    <h1>Add New Food</h1>\n    <form method=\"post\" id=\"add-food-form\">\n        {% csrf_token %}\n        <label for=\"food-name\">Food Name:</label><br>\n        <input type=\"text\" id=\"food-name\" name=\"food-name\" required><br>\n        <label for=\"calories\">Calories:</label><br>\n        <input type=\"number\" id=\"calories\" name=\"calories\" required><br><br>\n        <input type=\"submit\" value=\"Submit\" id=\"submit-food\">\n    </form>\n</body>\n</html>\n"}], "11": [{"file": "manage.py", "path": "review_app/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"review_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "review_project/review_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "review_project/review_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review_app.urls')),\n]"}, {"file": "urls.py", "path": "review_project/review_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.review, name='review'),\n]"}, {"file": "views.py", "path": "review_project/review_app/views.py", "code": "import json\nfrom django.shortcuts import render\n\ndef review(request):\n    json_data = request.session.get('json_data') # Retrieve data from session\n\n    if not json_data:  # Get data from POST if not in session \n        json_data_str = request.POST.get('json_data', '[{\"project_id\":\"\"}]') # Default to empty if no data provided\n        try:\n            json_data = json.loads(json_data_str)\n            request.session['json_data'] = json_data  # Store data in the session\n        except json.JSONDecodeError:\n            return render(request, 'review_app/error.html', {'error': 'Invalid JSON data provided.'})\n\n    \n    return render(request, 'review_app/review.html', {'json_data': json_data})\n"}, {"file": "review.html", "path": "review_project/review_app/templates/review_app/review.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Code Review</title>\n</head>\n<body>\n    <h1>Code Review</h1>\n\n    {% for project in json_data %}\n        <h2>Project ID: {{ project.project_id }}</h2>\n        <h3>Project Type: {{ project.project_type }}</h3>\n        <p>Prompt: {{ project.nl_prompt }}</p>\n\n        {% for test in project.testcode %}\n            <h4>Page: {{ test.page }}</h4>\n            <ul>\n                {% for function in test.function %}\n                    <li>\n                        <h5>Function: {{ function.function }}</h5>\n                        <pre id=\"test-code-{{ forloop.counter }}\" class=\"test-code\">{{ function.test }}</pre>\n                        <select id=\"status-{{ forloop.counter }}\" class=\"status-select\">\n                            <option value=\"Select\">Select</option>\n                            <option value=\"Pass\">Pass</option>\n                            <option value=\"Fail\">Fail</option>\n                        </select>\n                                            \n                        {% if function.parameter %}\n                            <p>Parameters:</p>\n                            <ul>\n                                {% for param in function.parameter %}\n                                    <li>\n                                        {{ param.name }}: {{ param.description }}\n                                    </li>\n                                {% endfor %}\n                            </ul>\n                        {% endif %}\n                    </li>\n                {% endfor %}\n            </ul>\n        {% endfor %}\n    {% endfor %}\n</body>\n</html>"}, {"file": "error.html", "path": "review_project/review_app/templates/review_app/error.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Error</title>\n</head>\n<body>\n    <h1>Error</h1>\n    <p>{{ error }}</p>\n</body>\n</html>"}], "17": [{"file": "run.bat", "path": "./run.bat", "code": "@echo off\npython main.py"}, {"file": "main.py", "path": "./main.py", "code": "# Import necessary libraries\nimport pandas as pd\nimport statsmodels.formula.api as smf\nfrom openpyxl.workbook import Workbook\n\n# Load the dataset\ndata = pd.read_excel(\"Gamedata.xlsx\")\n\n# Create lagged result variable\ndata[\"result_lag\"] = data[\"result\"].shift(1)\ndata.dropna(inplace=True)\n\n# Define the formula for the logistic regression (replace with your actual column names)\nformula = \"result_lag ~ col1 + col2 + col3\" # Example, replace col1, col2, col3...\n\n# Fit the logistic regression model\nmodel = smf.logit(formula=formula, data=data).fit()\n\n# Get the model summary\nsummary = model.summary()\n\n# Create a new Excel workbook\nworkbook = Workbook()\nsheet = workbook.active\n\n# Write the summary to the Excel sheet\nrows = str(summary).split('\\n')\nfor row in rows:\n    sheet.append(row.split())\n\n# Save the summary to an Excel file\nworkbook.save(\"Logistic.xlsx\")"}, {"file": "Gamedata.xlsx", "path": "./Gamedata.xlsx", "code": null}, {"file": "requirements.txt", "path": "./requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}], "18": [{"file": "game.py", "path": "./game.py", "code": "# coding:utf-8\nimport random\nimport os\n\nclass Player:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100\n        self.attack = 10\n        self.gold = 0\n\n    def attack_enemy(self, enemy):\n        damage = random.randint(self.attack - 2, self.attack + 2)\n        enemy.health -= damage\n        print(f\"You attacked {enemy.name} for {damage} damage.\")\n\n\nclass Enemy:\n    def __init__(self, name, health, attack, gold):\n        self.name = name\n        self.health = health\n        self.attack = attack\n        self.gold = gold\n\n    def attack_player(self, player):\n        damage = random.randint(self.attack - 2, self.attack + 2)\n        player.health -= damage\n        print(f\"{self.name} attacked you for {damage} damage.\")\n\n\ndef clear_screen():\n    os.system('cls' if os.name == 'nt' else 'clear')\n\ndef game():\n    player_name = input(\"Enter your name: \")\n    player = Player(player_name)\n\n    while player.health > 0:\n        enemy = Enemy(\"Goblin\", 20, 5, 10)\n        print(f\"You encountered a {enemy.name}!\")\n\n        while enemy.health > 0 and player.health > 0:\n            action = input(\"Attack or Run (a/r)? \").lower()\n\n            if action == \"a\":\n                player.attack_enemy(enemy)\n                if enemy.health <= 0:\n                    print(f\"You defeated the {enemy.name}! You found {enemy.gold} gold.\")\n                    player.gold += enemy.gold\n                    break\n                enemy.attack_player(player)\n\n            elif action == \"r\":\n                print(\"You ran away!\")\n                break\n            else:\n                print(\"Invalid action!\")\n\n        if player.health <= 0:\n            print(\"You died!\")\n            break\n\n        if input(\"Continue adventuring (y/n)? \").lower() != \"y\":\n            break\n\n    print(f\"Game Over.  You collected {player.gold} gold.\")\n\ngame()\n\n"}], "19": [{"file": "create_histogram.bat", "path": "./create_histogram.bat", "code": "@echo off\n\nsetlocal EnableDelayedExpansion\n\n:: Set input CSV file\nset CSV_FILE=Deathlist.csv\n\n:: Set date format (adjust if needed)\nset DATE_FORMAT=yyyy-mm-dd\n\n:: Initialize week counts\nfor /L %%w in (1,1,52) do (\n  set \"week_%%w=0\"\n)\n\n:: Read the CSV file\nfor /F \"skip=1 tokens=1 delims=,\" %%a in (%CSV_FILE%) do (\n  :: Extract date\n  set \"death_date=%%a\"\n\n  :: Calculate week number (using PowerShell as a helper)\n  for /F \"usebackq delims=\" %%i in (`powershell -Command \"[datetime]::ParseExact('!death_date!','%DATE_FORMAT%',$null).GetWeekOfYear()\"`) do (\n    set /a week_num=%%i\n  )\n\n  :: Increment week count\n  set /a week_!week_num!=!week_!week_num!+1\n)\n\n:: Print histogram\necho Weekly Death Histogram:\nfor /L %%w in (1,1,52) do (\n  set \"bar=\"\n  for /L %%b in (1,1,!week_%%w!) do (\n    set \"bar=!bar!#\"\n  )\n  echo Week %%w: !bar! (!week_%%w!)\n)\n\nendlocal\n"}, {"file": "Deathlist.csv", "path": "./Deathlist.csv", "code": "\"Date of death\",\"Cause of death\",\"Name\"\n2023-01-05,\"Heart attack\",\"John Smith\"\n2023-01-12,\"Car accident\",\"Jane Doe\"\n2023-01-19,\"Pneumonia\",\"Robert Jones\"\n2023-02-02,\"Stroke\",\"Mary Brown\"\n2023-02-09,\"Cancer\",\"David Williams\"\n2023-02-16,\"Influenza\",\"Linda Davis\"\n2023-02-23,\"Diabetes\",\"Michael Miller\"\n2023-03-02,\"Alzheimer's\",\"Barbara Wilson\"\n2023-03-09,\"Suicide\",\"Christopher Moore\"\n2023-03-16,\"Homicide\",\"Patricia Taylor\"\n2023-03-23,\"Drug overdose\",\"Joseph Anderson\"\n2023-03-30,\"Heart failure\",\"Margaret Thomas\"\n2023-04-06,\"Respiratory illness\",\"Charles Jackson\"\n2023-04-13,\"Kidney disease\",\"Dorothy White\"\n2023-04-20,\"Liver disease\",\"Paul Harris\"\n2023-04-27,\"Accidents\",\"Deborah Martin\"\n2023-05-04,\"Natural causes\",\"Ronald Thompson\"\n2023-05-11,\"Unknown\",\"Sharon Garcia\"\n"}]}