{"1": [{"file": "manage.py", "path": "bmi_calculator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"bmi_calculator.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '=-_e9c#qow40+j6y%+1@k5#g=p(z6)p@&69#0n)yd*2l2y(h-'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi.urls')),\n]"}, {"file": "urls.py", "path": "bmi_calculator/bmi/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "views.py", "path": "bmi_calculator/bmi/views.py", "code": "from django.shortcuts import render\n\ndef bmi_calculator(request):\n    bmi = None\n    if request.method == 'POST':\n        weight = float(request.POST.get('weight'))\n        height = float(request.POST.get('height'))\n        bmi = (weight / (height * height))\n    return render(request, 'bmi/bmi_calculator.html', {'bmi': bmi})"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/bmi/templates/bmi/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-container\" class=\"container\">\n        <h1 id=\"bmi-title\" class=\"title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" class=\"form\" method=\"post\">\n            {% csrf_token %}\n            <label id=\"weight-label\" class=\"label\" for=\"weight\">Weight (kg):</label><br>\n            <input id=\"weight-input\" class=\"input\" type=\"text\" name=\"weight\" required><br>\n            <label id=\"height-label\" class=\"label\" for=\"height\">Height (m):</label><br>\n            <input id=\"height-input\" class=\"input\" type=\"text\" name=\"height\" required><br><br>\n            <button id=\"submit-button\" class=\"button\" type=\"submit\">Calculate</button>\n        </form>\n        {% if bmi %}\n            <p id=\"bmi-result\" class=\"result\">Your BMI: {{ bmi }}</p>\n        {% endif %}\n    </div>\n</body>\n</html>"}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"currency_converter.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "# ... (Standard Django settings - DATABASES, STATIC_URL, etc.)\n\nINSTALLED_APPS = [\n    # ... (Other apps)\n    'converter',\n]\n\n# ... (Other settings)"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.convert, name='convert'),\n]"}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\n\n# Simulated currency rates (replace with actual API call)\nRATES = {\n    'USD': 1.0,\n    'EUR': 0.85,\n    'GBP': 0.73,\n    'JPY': 145.0,\n}\n\ndef convert(request):\n    if request.method == 'POST':\n        amount = float(request.POST.get('amount', 0))\n        from_currency = request.POST.get('from_currency', 'USD')\n        to_currency = request.POST.get('to_currency', 'USD')\n\n        if from_currency in RATES and to_currency in RATES:\n            converted_amount = amount * RATES[to_currency] / RATES[from_currency]\n            context = {\n                'amount': amount,\n                'from_currency': from_currency,\n                'to_currency': to_currency,\n                'converted_amount': converted_amount,\n            }\n        else:\n            context = {'error': 'Invalid currency code.'}\n    else:\n        context = {}\n    return render(request, 'converter/index.html', context)"}, {"file": "index.html", "path": "currency_converter/converter/templates/converter/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n    <form method=\"post\" id=\"converter-form\" class=\"converter-form\">\n        {% csrf_token %}\n        <label for=\"amount-input\">Amount:</label>\n        <input type=\"number\" id=\"amount-input\" name=\"amount\" class=\"amount-input\" value=\"{{ amount|default:1 }}\" required><br><br>\n\n        <label for=\"from-currency-select\">From:</label>\n        <select id=\"from-currency-select\" name=\"from_currency\" class=\"currency-select\">\n            <option value=\"USD\" {% if from_currency == 'USD' %}selected{% endif %}>USD</option>\n            <option value=\"EUR\" {% if from_currency == 'EUR' %}selected{% endif %}>EUR</option>\n            <option value=\"GBP\" {% if from_currency == 'GBP' %}selected{% endif %}>GBP</option>\n            <option value=\"JPY\" {% if from_currency == 'JPY' %}selected{% endif %}>JPY</option>\n        </select><br><br>\n\n        <label for=\"to-currency-select\">To:</label>\n        <select id=\"to-currency-select\" name=\"to_currency\" class=\"currency-select\">\n            <option value=\"USD\" {% if to_currency == 'USD' %}selected{% endif %}>USD</option>\n            <option value=\"EUR\" {% if to_currency == 'EUR' %}selected{% endif %}>EUR</option>\n            <option value=\"GBP\" {% if to_currency == 'GBP' %}selected{% endif %}>GBP</option>\n            <option value=\"JPY\" {% if to_currency == 'JPY' %}selected{% endif %}>JPY</option>\n        </select><br><br>\n\n        <button type=\"submit\" id=\"convert-button\" class=\"convert-button\">Convert</button><br><br>\n\n        {% if converted_amount %}\n            <p id=\"result-paragraph\" class=\"result-paragraph\">{{ amount }} {{ from_currency }} = {{ converted_amount }} {{ to_currency }}</p>\n        {% endif %}\n        {% if error %}\n            <p id=\"error-paragraph\" class=\"error-paragraph\" style=\"color: red;\">{{ error }}</p>\n        {% endif %}\n    </form>\n</body>\n</html>"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('generator.urls')),\n]\n"}, {"file": "urls.py", "path": "password_generator/generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport random\n\n# Create your views here.\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\ndef about(request):\n    return render(request, 'generator/about.html')\n\n\ndef password(request):\n\n    characters = list('abcdefghijklmnopqrstuvwxyz')\n\n    if request.GET.get('uppercase'):\n        characters.extend(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    if request.GET.get('special'):\n        characters.extend(list('!@#$%^&*()'))\n    if request.GET.get('numbers'):\n        characters.extend(list('0123456789'))\n\n    length = int(request.GET.get('length', 12))\n\n    thepassword = ''\n    for x in range(length):\n        thepassword += random.choice(characters)\n\n    return render(request, 'generator/password.html', {'password': thepassword})\n"}, {"file": "home.html", "path": "password_generator/generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title id=\"home-title\" class=\"title\">Password Generator</title>\n</head>\n<body>\n  <div id=\"container\" class=\"container\">\n    <h1 id=\"main-title\" class=\"title\">Password Generator</h1>\n    <form action=\"password\" id=\"password-form\" class=\"form\">\n        <select name=\"length\" id=\"length-select\" class=\"select\">\n          <option value=\"6\">6</option>\n          <option value=\"7\">7</option>\n          <option value=\"8\">8</option>\n          <option value=\"9\">9</option>\n          <option value=\"10\">10</option>\n          <option value=\"11\">11</option>\n          <option value=\"12\" selected=\"selected\">12</option>\n          <option value=\"13\">13</option>\n          <option value=\"14\">14</option>\n        </select>\n        Length\n        <br>\n        <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase-checkbox\" class=\"checkbox\">\n        Uppercase\n        <br>\n        <input type=\"checkbox\" name=\"numbers\" id=\"numbers-checkbox\" class=\"checkbox\">\n        Numbers\n        <br>\n        <input type=\"checkbox\" name=\"special\" id=\"special-checkbox\" class=\"checkbox\">\n        Special Characters\n        <br>\n        <input type=\"submit\" value=\"Generate Password\" id=\"submit-button\" class=\"button\">\n    </form>\n      <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"link\">About</a>\n    </div>\n</body>\n</html>\n"}, {"file": "password.html", "path": "password_generator/generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title id=\"password-title\" class=\"title\">Your Password</title>\n</head>\n<body>\n<div id=\"container\" class=\"container\">\n  <h1 id=\"main-title\" class=\"title\">Your Password</h1>\n    <h3 id=\"password-display\" class=\"display\">{{ password }}</h3>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"link\">Home</a>\n</div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "password_generator/generator/templates/generator/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title id=\"about-title\" class=\"title\">About</title>\n</head>\n<body>\n<div id=\"container\" class=\"container\">\n    <h1 id=\"main-title\" class=\"title\">About Page</h1>\n    <p id=\"about-text\" class=\"text\">\n        This is a simple password generator built with Django.  It allows you to generate random passwords with various options, including length, uppercase letters, numbers, and special characters.\n    </p>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"link\">Home</a>\n</div>\n</body>\n</html>\n"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "password_generator/password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "qrcode_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "qrcode_generator/qrcode_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcode_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcode_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcode_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "qrcode_generator/qrcode_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom qrcode_app import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.generate_qrcode, name='generate_qrcode'),\n]\n"}, {"file": "views.py", "path": "qrcode_generator/qrcode_app/views.py", "code": "import qrcode\nfrom django.shortcuts import render\nfrom io import BytesIO\nimport base64\n\ndef generate_qrcode(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        img = qrcode.make(data)\n        buffered = BytesIO()\n        img.save(buffered, format=\"PNG\")\n        img_str = base64.b64encode(buffered.getvalue()).decode()\n        context = {'qrcode': img_str, 'data': data}\n        return render(request, 'qrcode_app/qrcode.html', context)\n    return render(request, 'qrcode_app/qrcode.html')\n"}, {"file": "qrcode.html", "path": "qrcode_generator/qrcode_app/templates/qrcode_app/qrcode.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n    <h1 id=\"title\" class=\"title\">QR Code Generator</h1>\n    <form id=\"qrcode-form\" class=\"qrcode-form\" method=\"post\">\n        {% csrf_token %}\n        <label id=\"data-label\" class=\"data-label\" for=\"data\">Enter data:</label><br>\n        <input id=\"data\" class=\"data\" type=\"text\" name=\"data\" value=\"{{ data|default:'' }}\"><br>\n        <button id=\"submit\" class=\"submit\" type=\"submit\">Generate QR Code</button>\n    </form>\n\n    {% if qrcode %}\n        <div id=\"qrcode-image\" class=\"qrcode-image\">\n            <img id=\"qrcode-img\" class=\"qrcode-img\" src=\"data:image/png;base64,{{ qrcode }}\" alt=\"QR Code\">\n        </div>\n    {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "apps.py", "path": "qrcode_generator/qrcode_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrcodeAppConfig(AppConfig):\n    name = 'qrcode_app'\n"}, {"file": "admin.py", "path": "qrcode_generator/qrcode_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "__init__.py", "path": "qrcode_generator/qrcode_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "qrcode_generator/qrcode_generator/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "qrcode_generator/qrcode_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "qrcode_generator/qrcode_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n\napplication = get_asgi_application()\n"}], "5": [{"file": "manage.py", "path": "markdown_converter/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "markdown_converter/markdown_converter/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y@qnd)o%f!b1lc#p$z(%@)h=c65x&2!7m+n6^6n@7^o63k$u+'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "markdown_converter/markdown_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "urls.py", "path": "markdown_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.convert, name='convert'),\n]\n"}, {"file": "views.py", "path": "markdown_converter/converter/views.py", "code": "from django.shortcuts import render\nimport markdown\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'converter/convert.html', {'html_output': html_output, 'markdown_text': markdown_text})\n    return render(request, 'converter/convert.html')\n"}, {"file": "convert.html", "path": "markdown_converter/converter/templates/converter/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Markdown Converter</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"converter-container\">\n        <h1 id=\"converter-title\" class=\"converter-title\">Markdown to HTML Converter</h1>\n        <form id=\"converter-form\" class=\"converter-form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-input\" class=\"markdown-input\" name=\"markdown_text\" rows=\"10\" cols=\"50\">{{ markdown_text|default:\"\" }}</textarea><br>\n            <button id=\"convert-button\" class=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n        <div id=\"html-output\" class=\"html-output\">\n            {{ html_output|safe }}\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "wsgi.py", "path": "markdown_converter/markdown_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "markdown_converter/markdown_converter/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "markdown_converter/markdown_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "markdown_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "markdown_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "markdown_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'\n"}, {"file": "models.py", "path": "markdown_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "markdown_converter/converter/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}], "6": [{"file": "manage.py", "path": "todo_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"todo_project.settings\")\n\n    from django.core.management import execute_from_command_line\n\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "todo_project/todo_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n    'chartjs',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "todo_project/todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]"}, {"file": "models.py", "path": "todo_project/todo_app/models.py", "code": "from django.db import models\n\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todo_project/todo_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Task\nfrom .forms import TaskForm\nfrom django.db.models import Count\nfrom chartjs.views.lines import BaseLineChartView\n\nclass LineChartJSONView(BaseLineChartView):\n    def get_labels(self):\n        \"\"\"Return 7 labels for the x-axis.\"\"\"\n        return [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"]\n\n    def get_providers(self):\n        \"\"\"Return names of datasets.\"\"\"\n        return [\"Central\", \"Eastside\", \"Westside\"]\n\n    def get_data(self):\n        \"\"\"Return 3 datasets to plot.\"\"\"\n\n        return [\n            [75, 44, 92, 11, 44, 95, 35],\n            [41, 92, 18, 3, 73, 87, 92],\n            [87, 21, 94, 3, 90, 13, 65],\n        ]\n\ndef index(request):\n    tasks = Task.objects.all()\n    form = TaskForm()\n\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            form.save()\n        return redirect('/')\n\n    completed_tasks = Task.objects.filter(completed=True).count()\n    incomplete_tasks = Task.objects.filter(completed=False).count()\n\n    context = {'tasks': tasks, 'form': form, 'completed_tasks': completed_tasks, 'incomplete_tasks': incomplete_tasks }\n    return render(request, 'todo_app/list.html', context)\n\n\ndef updateTask(request, pk):\n    task = Task.objects.get(id=pk)\n\n    form = TaskForm(instance=task)\n\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('/')\n\n    context = {'form': form}\n\n    return render(request, 'todo_app/update_task.html', context)\n\ndef deleteTask(request, pk):\n    item = Task.objects.get(id=pk)\n\n    if request.method == 'POST':\n        item.delete()\n        return redirect('/')\n\n    context = {'item': item}\n    return render(request, 'todo_app/delete.html', context)"}, {"file": "forms.py", "path": "todo_project/todo_app/forms.py", "code": "from django import forms\nfrom django.forms import ModelForm\n\nfrom .models import *\n\nclass TaskForm(forms.ModelForm):\n    title = forms.CharField(widget=forms.TextInput(attrs={'placeholder': 'Add new task...'}))\n    class Meta:\n        model = Task\n        fields = '__all__'"}, {"file": "urls.py", "path": "todo_project/todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom .views import LineChartJSONView\n\nurlpatterns = [\n    path('', views.index, name=\"list\"),\n    path('update_task/<str:pk>/', views.updateTask, name=\"update_task\"),\n    path('delete/<str:pk>/', views.deleteTask, name=\"delete\"),\n    path('line_chart_json/', LineChartJSONView.as_view(), name='line_chart_json'),\n]"}, {"file": "list.html", "path": "todo_project/todo_app/templates/todo_app/list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>ToDo App</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <div id=\"header\" class=\"header\">\n            <h2>ToDo List</h2>\n        </div>\n\n        <form method=\"POST\" action=\"\">\n            {% csrf_token %}\n            {{ form }}\n            <input id=\"submit-btn\" class=\"submit-btn\" type=\"submit\" value=\"Add Task\">\n        </form>\n        \n        <div id=\"task-list\" class=\"task-list\">\n            {% for task in tasks %}\n            <div id=\"task-{{ task.id }}\" class=\"task\">\n                <div id=\"task-title\" class=\"task-title\">\n                    {% if task.completed == True %}\n                    <strike>{{ task.title }}</strike>\n                    {% else %}\n                    {{ task.title }}\n                    {% endif %}\n                </div>\n                <a id=\"update-link\" class=\"update-link\" href=\"/update_task/{{task.id}}/\">Update</a>\n                <a  id=\"delete-link\" class=\"delete-link\" href=\"/delete/{{task.id}}/\">Delete</a>\n            </div>\n            {% endfor %}\n        </div>\n        <canvas id=\"myChart\" width=\"400\" height=\"400\"></canvas>\n        <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n\n        <script>\n    var ctx = document.getElementById('myChart').getContext('2d');\n    var myChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: ['Completed', 'Incomplete'],\n            datasets: [{\n                label: '# of Tasks',\n                data: [{{ completed_tasks }}, {{ incomplete_tasks }}],\n                backgroundColor: [\n                    'rgba(75, 192, 192, 0.2)',\n                    'rgba(255, 99, 132, 0.2)',\n               \n                ],\n                borderColor: [\n                    'rgba(75, 192, 192, 1)',\n                    'rgba(255, 99, 132, 1)',\n                  \n                ],\n                borderWidth: 1\n            }]\n        },\n        options: {\n            scales: {\n                y: {\n                    beginAtZero: true\n                }\n            }\n        }\n    });\n</script>\n    </div>\n\n</body>\n</html>"}, {"file": "update_task.html", "path": "todo_project/todo_app/templates/todo_app/update_task.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Update Task</title>\n</head>\n<body>\n    <form method=\"POST\" action=\"\">\n        {% csrf_token %}\n        {{ form }}\n        <input type=\"submit\" name=\"Update Task\">\n    </form>\n</body>\n</html>"}, {"file": "delete.html", "path": "todo_project/todo_app/templates/todo_app/delete.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Delete Task</title>\n</head>\n<body>\n    <h3>Are you sure you want to delete \"{{item.title}}\"</h3>\n    <form method=\"POST\" action=\"\">\n        {% csrf_token %}\n        <input id=\"delete-confirm\" class=\"delete-confirm\" type=\"submit\" value=\"Confirm\">\n    </form>\n\n    <a  id=\"cancel-delete\" class=\"cancel-delete\" href=\"/\">Cancel</a>\n</body>\n</html>"}, {"file": "apps.py", "path": "todo_project/todo_app/apps.py", "code": "from django.apps import AppConfig\n\nclass TodoAppConfig(AppConfig):\n    name = 'todo_app'"}, {"file": "admin.py", "path": "todo_project/todo_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Task\n\nadmin.site.register(Task)"}, {"file": "__init__.py", "path": "todo_project/todo_app/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "todo_project/todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "todo_project/todo_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "todo_project/todo_project/__init__.py", "code": ""}], "7": [{"file": "manage.py", "path": "budget_control/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "budget_control/budget_control/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "budget_control/budget_control/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget.urls')),\n]\n"}, {"file": "wsgi.py", "path": "budget_control/budget_control/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "budget_control/budget/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BudgetConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget'\n"}, {"file": "admin.py", "path": "budget_control/budget/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "budget_control/budget/models.py", "code": "from django.db import models\n\n# Create your models here. # Example Model\nclass Transaction(models.Model):\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    transaction_type = models.CharField(max_length=10, choices=[('income', 'Income'), ('expense', 'Expense')])\n"}, {"file": "views.py", "path": "budget_control/budget/views.py", "code": "from django.shortcuts import render\nfrom .models import Transaction # Import your model\nimport datetime\n\ndef index(request):\n    # Example data for the chart\n    transactions = Transaction.objects.all().order_by('date') # Retrieve transactions, ordered by date\n    balance = 0\n    balance_history = []\n    dates = []\n\n    for transaction in transactions:\n        balance += transaction.amount if transaction.transaction_type == 'income' else -transaction.amount\n        balance_history.append(balance)\n        dates.append(transaction.date.strftime('%Y-%m-%d')) # Format date for chart\n\n    context = {\n        'balance_history': balance_history,\n        'dates': dates\n    }\n    return render(request, 'budget/index.html', context)\n"}, {"file": "urls.py", "path": "budget_control/budget/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "budget_control/templates/budget/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Budget Control</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"chart-container\" class=\"chart-container\">\n        <canvas id=\"balanceChart\" class=\"balance-chart\"></canvas>\n    </div>\n<script>\n    var ctx = document.getElementById('balanceChart').getContext('2d');\n    var chart = new Chart(ctx, {\n        type: 'line',\n        data: {\n            labels: {{ dates|safe }},\n            datasets: [{\n                label: 'Balance',\n                data: {{ balance_history }},\n                borderColor: 'rgb(75, 192, 192)',\n                tension: 0.1\n            }]\n        },\n        options: {}\n    });\n</script>\n</body>\n</html>\n"}], "11": [{"file": "manage.py", "path": "review_tool/manage.py", "code": "#!/usr/bin/env python\n\nimport os\nimport sys\n\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "review_tool/review_tool/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'u5#i4i+a3w=n0f!p0q7f^(t&m92^#h&f2@7f-s+v+57i03*r'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_tool.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_tool.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "review_tool/review_tool/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review.urls')),\n]"}, {"file": "urls.py", "path": "review_tool/review/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.review, name='review'),\n]"}, {"file": "views.py", "path": "review_tool/review/views.py", "code": "import json\nfrom django.shortcuts import render\n\n\ndef review(request):\n    json_data = '''\n[  # Your JSON data here. Replace this example.\n    {\n        \"project_id\": \"3\",\n        \"testcode\": [\n            {\n                \"page\": \"Home\",\n                \"function\": [\n                    {\n                        \"function\": \"Display Welcome Message\",\n                        \"test\": \"# test code here\",\n                        \"parameter\": []\n                    }\n                ]\n            }\n        ]\n    }\n]\n'''  # Replace with your actual JSON handling\n    data = json.loads(json_data)\n    context = {'data': data}\n    return render(request, 'review/review.html', context)"}, {"file": "review.html", "path": "review_tool/review/templates/review/review.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Code Review</title>\n    <style>\n        /* Basic styling for better readability */\n        body { font-family: sans-serif; }\n        .code-block { background-color: #f0f0f0; padding: 10px; margin-bottom: 10px; white-space: pre-wrap; }\n        .status-select { margin-right: 10px; }\n    </style>\n</head>\n<body>\n    <h1>Code Review</h1>\n\n    {% for project in data %}\n        <h2>Project ID: {{ project.project_id }}</h2>\n        {% for test in project.testcode %}\n            <h3>Page: {{ test.page }}</h3>\n            {% for function in test.function %}\n                <div>\n                    <h4>Function: {{ function.function }}</h4>\n                    <pre class=\"code-block\" id=\"code-{{ forloop.counter }}\">{{ function.test }}</pre>\n                    <div>\n                        Status:\n                        <select class=\"status-select\" id=\"status-{{ forloop.counter }}\">\n                            <option value=\"Select\">Select</option>\n                            <option value=\"Pass\">Pass</option>\n                            <option value=\"Fail\">Fail</option>\n                        </select>\n\n                    </div>\n                </div>\n            {% endfor %}\n        {% endfor %}\n    {% endfor %}\n\n</body>\n</html>"}, {"file": "asgi.py", "path": "review_tool/review_tool/asgi.py", "code": "\"\"\nASGI config for review_tool project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/howto/deployment/asgi/\n\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "review_tool/review_tool/wsgi.py", "code": "\"\"\nWSGI config for review_tool project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.0/howto/deployment/wsgi/\n\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n\napplication = get_wsgi_application()"}], "14": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "helloworld/helloworld/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = '8h#p7y6^l5$8!5+jcx=i79y-k6i@2i&p(y_tw0g3q#%7q#f$5'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'core',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/2.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/2.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JS, Images)\n# https://docs.djangoproject.com/en/2.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom core import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "helloworld/core/views.py", "code": "from django.shortcuts import render\n\ndef helloworld(request):\n    return render(request, 'core/helloworld.html')\n"}, {"file": "helloworld.html", "path": "helloworld/core/templates/core/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body id=\"body-id\" class=\"body-class\">\n    <h1 id=\"heading-id\" class=\"heading-class\">Hello World!</h1>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "helloworld/core/__init__.py", "code": ""}, {"file": "__init__.py", "path": "helloworld/helloworld/__init__.py", "code": ""}, {"file": "asgi.py", "path": "helloworld/helloworld/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_asgi_application()\n"}, {"file": "wsgi.py", "path": "helloworld/helloworld/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_wsgi_application()\n"}], "17": [{"file": "run.bat", "path": "./run.bat", "code": "@echo off\npython process_data.py"}, {"file": "process_data.py", "path": "./process_data.py", "code": "import pandas as pd\nimport statsmodels.api as sm\n\n# Load the dataset\ntry:\n    df = pd.read_excel(\"Gamedata.xlsx\")\nexcept FileNotFoundError:\n    print(\"Error: Gamedata.xlsx not found.\")\n    exit()\n\n# Lag the dependent variable\ndf['result_lag'] = df['result'].shift(-1)\ndf.dropna(inplace=True)\n\n# Define independent and dependent variables\nX = df.drop(['result', 'result_lag'], axis=1)\nX = sm.add_constant(X)  # Add a constant for the intercept\ny = df['result_lag']\n\n# Create and fit the logistic regression model\nmodel = sm.Logit(y, X)\nresults = model.fit()\n\n# Print the model summary to the console\nprint(results.summary())\n\n# Save the model summary to an Excel file\ntry:\n    summary_df = pd.DataFrame(results.summary().tables[1])\n    summary_df.to_excel(\"Logistic.xlsx\", index=False, header=False)\n    with open(\"Logistic_summary.txt\", \"w\") as f:\n        f.write(str(results.summary()))\nexcept Exception as e:\n    print(f\"Error saving summary: {e}\")\n\nprint(\"Logistic regression complete. Summary saved to Logistic.xlsx and Logistic_summary.txt\")"}, {"file": "Gamedata.xlsx", "path": "./Gamedata.xlsx", "code": ""}, {"file": "requirements.txt", "path": "./requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}, {"file": ".gitignore", "path": "./.gitignore", "code": "__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.ipynb_checkpoints\nLogistic.xlsx\nLogistic_summary.txt"}, {"file": "README.md", "path": "./README.md", "code": "# Logistic Regression on Game Data\n\nThis project performs logistic regression on game data from `Gamedata.xlsx`.  It lags the `result` variable by one period and uses all other columns as independent variables.\n\n## Requirements\n\n* Python 3\n* pandas\n* statsmodels\n* openpyxl\n\n## Installation\n\n1. Create a virtual environment:\n```bash\npython -m venv .venv\n```\n2. Activate the virtual environment:\n- Windows:\n```bash\n.venv\\Scripts\\activate\n```\n- macOS/Linux:\n```bash\nsource .venv/bin/activate\n```\n3. Install the required packages:\n```bash\npip install -r requirements.txt\n```\n\n## Usage\n\n1. Place your `Gamedata.xlsx` file in the project directory.\n2. Run the batch script:\n```bash\nrun.bat\n```\n\n## Output\n\n* **Logistic.xlsx:** Contains the summary table of the logistic regression model.\n* **Logistic_summary.txt:** Contains the complete text output of the logistic regression model summary.  This is useful if the Excel output truncates any information.\n* Console output: The model summary will also be printed to the console.\n\n## Note\n\nThe `Gamedata.xlsx` file is not included in this repository. You'll need to provide your own data file."}], "18": [{"file": "game.py", "path": "./game.py", "code": "# coding=utf-8\n\nimport random\nimport os\n\nclass Player:\n    def __init__(self, name):\n        self.name = name\n        self.health = 100\n        self.attack = 10\n        self.defense = 5\n        self.gold = 0\n        self.position = (0, 0)  # Initial position\n\n    def is_alive(self):\n        return self.health > 0\n\n    def move(self, dx, dy, map_size):\n        new_x = self.position[0] + dx\n        new_y = self.position[1] + dy\n\n        if 0 <= new_x < map_size and 0 <= new_y < map_size: # Boundary check\n            self.position = (new_x, new_y)\n            return True  # Move successful\n        else:\n            return False  # Move failed (out of bounds)\n\nclass Monster:\n    def __init__(self, name, health, attack, defense):\n        self.name = name\n        self.health = health\n        self.attack = attack\n        self.defense = defense\n\n    def is_alive(self):\n        return self.health > 0\n\n\ndef clear_screen():\n    os.system('cls' if os.name == 'nt' else 'clear')\n\ndef combat(player, monster):\n    while player.is_alive() and monster.is_alive():\n        player_damage = max(0, player.attack - monster.defense)\n        monster.health -= player_damage\n        print(f\"You hit the {monster.name} for {player_damage} damage!\")\n\n        if not monster.is_alive():\n            print(f\"You defeated the {monster.name}!\")\n            player.gold += 10  # Reward\n            return\n\n        monster_damage = max(0, monster.attack - player.defense)\n        player.health -= monster_damage\n        print(f\"The {monster.name} hit you for {monster_damage} damage!\")\n\n        if not player.is_alive():\n            print(\"You died!\")\n            return\n\n\ndef game():\n    clear_screen()\n    player_name = input(\"Enter your name: \")\n    player = Player(player_name)\n    map_size = 10\n\n    while player.is_alive():\n        print(f\"Health: {player.health}, Gold: {player.gold}, Position: {player.position}\")\n\n        action = input(\"Enter command (n/s/e/w): \").lower()\n\n        if action == 'n':\n            if player.move(0, -1, map_size):\n                encounter_chance = random.randint(1, 10) # Adjustable encounter rate\n                if encounter_chance <= 3:\n                    monster = Monster(\"Goblin\", 20, 5, 2)  # Example monster\n                    combat(player, monster)\n            else:\n                print(\"Cannot move further north\")\n        # Similar code for other directions (s/e/w)\n        elif action == 's':\n            if player.move(0, 1, map_size):\n                encounter_chance = random.randint(1,10)\n                if encounter_chance <= 3:\n                    monster = Monster(\"Skeleton\", 30, 7, 3) # Another example monster\n                    combat(player, monster)\n            else:\n                print(\"Cannot move further south\")\n        elif action == 'e':\n            if player.move(1,0, map_size):\n                encounter_chance = random.randint(1,10)\n                if encounter_chance <= 3:\n                    monster = Monster(\"Zombie\", 25, 6, 1) # Another example monster\n                    combat(player, monster)\n            else:\n                print(\"Cannot move further east\")\n        elif action == 'w':\n            if player.move(-1,0, map_size):\n                encounter_chance = random.randint(1,10)\n                if encounter_chance <= 3:\n                    monster = Monster(\"Spider\", 15, 4, 4) # Another example monster\n                    combat(player, monster)\n            else:\n                print(\"Cannot move further west\")\n        else:\n            print(\"Invalid command!\")\n\n\nif __name__ == \"__main__\":\n    game()\n"}]}