{"4": [{"file": "manage.py", "path": "qrcode_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "qrcode_generator/qrcode_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcode_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcode_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcode_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "qrcode_generator/qrcode_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrcode_app.urls')),\n]\n"}, {"file": "urls.py", "path": "qrcode_generator/qrcode_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.generate_qrcode, name='generate_qrcode'),\n]\n"}, {"file": "views.py", "path": "qrcode_generator/qrcode_app/views.py", "code": "import qrcode\nfrom django.shortcuts import render\nfrom io import BytesIO\nimport base64\n\ndef generate_qrcode(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        if data:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=10,\n                border=4,\n            )\n            qr.add_data(data)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n            buffered = BytesIO()\n            img.save(buffered, format=\"PNG\")\n            img_str = base64.b64encode(buffered.getvalue()).decode()\n\n            context = {'qr_code': img_str, 'data': data}\n            return render(request, 'qrcode_app/qrcode.html', context)\n    return render(request, 'qrcode_app/index.html')\n"}, {"file": "index.html", "path": "qrcode_generator/qrcode_app/templates/qrcode_app/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"container\" class=\"main-container\">\n      <h1 id=\"title\" class=\"title\">QR Code Generator</h1>\n      <form method=\"post\" id=\"qrcode-form\" class=\"qrcode-form\">\n          {% csrf_token %}\n          <label for=\"data\" id=\"data-label\" class=\"data-label\">Enter data:</label><br>\n          <input type=\"text\" id=\"data\" name=\"data\" class=\"data-input\" required><br>\n          <button type=\"submit\" id=\"submit-btn\" class=\"submit-btn\">Generate QR Code</button>\n      </form>\n    </div>\n</body>\n</html>\n"}, {"file": "qrcode.html", "path": "qrcode_generator/qrcode_app/templates/qrcode_app/qrcode.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Generated QR Code</title>\n</head>\n<body>\n  <div id=\"qr-container\" class=\"qr-container\">\n      <h2 id=\"qr-title\" class=\"qr-title\">Generated QR Code for: <span id=\"data-display\" class=\"data-display\">{{ data }}</span></h2>\n      <img id=\"qr-code-img\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\" class=\"qr-code-img\"><br>\n      <a id=\"download-link\" href=\"data:image/png;base64,{{ qr_code }}\" download=\"qrcode.png\" class=\"download-link\">Download QR Code</a> \n  </div>\n</body>\n</html>\n"}, {"file": "wsgi.py", "path": "qrcode_generator/qrcode_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "qrcode_generator/qrcode_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "qrcode_generator/qrcode_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "qrcode_generator/qrcode_generator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "qrcode_generator/qrcode_generator/migrations/__init__.py", "code": ""}, {"file": "admin.py", "path": "qrcode_generator/qrcode_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "qrcode_generator/qrcode_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrcodeAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qrcode_app'\n"}, {"file": "models.py", "path": "qrcode_generator/qrcode_app/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "qrcode_generator/qrcode_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}], "5": [{"file": "manage.py", "path": "markdown_converter/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "markdown_converter/markdown_converter/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "markdown_converter/markdown_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "urls.py", "path": "markdown_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.convert, name='convert'),\n]\n"}, {"file": "views.py", "path": "markdown_converter/converter/views.py", "code": "from django.shortcuts import render\nimport markdown\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_text = markdown.markdown(markdown_text)\n        return render(request, 'converter/convert.html', {'html_text': html_text, 'markdown_text': markdown_text})\n    return render(request, 'converter/convert.html')\n"}, {"file": "convert.html", "path": "markdown_converter/converter/templates/converter/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Markdown Converter</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"converter\">\n        <h1 id=\"converter-title\" class=\"title\">Markdown Converter</h1>\n        <form id=\"converter-form\" class=\"form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-input\" class=\"markdown-input\" name=\"markdown_text\" placeholder=\"Enter Markdown here\u2026\">{{ markdown_text }}</textarea><br>\n            <button id=\"convert-button\" class=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n        <div id=\"html-output\" class=\"html-output\">\n            {{ html_text | safe }}\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "apps.py", "path": "markdown_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\nclass ConverterConfig(AppConfig):\n    name = 'converter'\n"}, {"file": "admin.py", "path": "markdown_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "markdown_converter/converter/models.py", "code": ""}, {"file": "tests.py", "path": "markdown_converter/converter/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "__init__.py", "path": "markdown_converter/converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "markdown_converter/markdown_converter/__init__.py", "code": ""}, {"file": "asgi.py", "path": "markdown_converter/markdown_converter/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_asgi_application()\n"}, {"file": "wsgi.py", "path": "markdown_converter/markdown_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_wsgi_application()\n"}], "6": [{"file": "manage.py", "path": "todo_app/", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "todo_app/todo_app/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tasks',\n    'rest_framework',\n    'django_filters',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_app.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "todo_app/todo_app/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tasks.urls')),\n]\n"}, {"file": "wsgi.py", "path": "todo_app/todo_app/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_app.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "admin.py", "path": "todo_app/tasks/", "code": "from django.contrib import admin\nfrom .models import Task\n\nadmin.site.register(Task)\n"}, {"file": "apps.py", "path": "todo_app/tasks/", "code": "from django.apps import AppConfig\n\n\nclass TasksConfig(AppConfig):\n    name = 'tasks'\n"}, {"file": "models.py", "path": "todo_app/tasks/", "code": "from django.db import models\n\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title\n"}, {"file": "tests.py", "path": "todo_app/tasks/", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "urls.py", "path": "todo_app/tasks/", "code": "from django.urls import path\nfrom . import views\nfrom rest_framework import routers\n\nrouter = routers.DefaultRouter()\nrouter.register(r'tasks', views.TaskViewSet)\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('api/', include(router.urls)),\n\n]"}, {"file": "views.py", "path": "todo_app/tasks/", "code": "from django.shortcuts import render\nfrom .models import Task\nfrom rest_framework import viewsets, filters\nfrom .serializers import TaskSerializer\n\n\ndef index(request):\n    tasks = Task.objects.all()\n    return render(request, 'tasks/index.html', {'tasks': tasks})\n\nclass TaskViewSet(viewsets.ModelViewSet):\n    queryset = Task.objects.all()\n    serializer_class = TaskSerializer\n    filter_backends = [filters.SearchFilter]\n    search_fields = ['title']\n"}, {"file": "serializers.py", "path": "todo_app/tasks/", "code": "from rest_framework import serializers\nfrom .models import Task\n\nclass TaskSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Task\n        fields = '__all__'\n"}, {"file": "index.html", "path": "todo_app/tasks/templates/tasks/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App</title>\n</head>\n<body>\n    <h1>Todo List</h1>\n    <ul id=\"task-list\">\n        {% for task in tasks %}\n            <li id=\"task-{{ task.id }}\" class=\"task-item\">{{ task.title }} - {{ task.completed }}</li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n"}], "7": [{"file": "manage.py", "path": "budget_control/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"budget_control.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "budget_control/budget_control/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "budget_control/budget_control/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget.urls')),\n]\n"}, {"file": "wsgi.py", "path": "budget_control/budget_control/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "budget_control/budget/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BudgetConfig(AppConfig):\n    name = 'budget'\n"}, {"file": "admin.py", "path": "budget_control/budget/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "budget_control/budget/models.py", "code": "from django.db import models\n\n# Create your models here.\nclass Transaction(models.Model):\n    date = models.DateField()\n    description = models.CharField(max_length=200)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    transaction_type = models.CharField(max_length=10, choices=[('income', 'Income'), ('expense', 'Expense')])\n\n    def __str__(self):\n        return self.description"}, {"file": "views.py", "path": "budget_control/budget/views.py", "code": "from django.shortcuts import render\nfrom .models import Transaction\nfrom django.http import JsonResponse\nimport json\n\ndef index(request):\n    transactions = Transaction.objects.all()\n    return render(request, 'budget/index.html', {'transactions': transactions})\n\ndef transaction_data(request):\n    transactions = Transaction.objects.all().order_by('date')\n    data = []\n    balance = 0\n    for transaction in transactions:\n        balance += transaction.amount if transaction.transaction_type == 'income' else -transaction.amount\n        data.append({'x': transaction.date.strftime('%Y-%m-%d'), 'y': balance})\n    return JsonResponse({'data': data})\n\n"}, {"file": "urls.py", "path": "budget_control/budget/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('transaction_data/', views.transaction_data, name='transaction_data'),\n]\n\n"}, {"file": "index.html", "path": "budget_control/budget/templates/budget/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Budget Control</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"chart-container\" class=\"chart-container\">\n        <canvas id=\"balanceChart\" class=\"balance-chart\"></canvas>\n    </div>\n  <script>\n    fetch('/transaction_data/')\n        .then(response => response.json())\n        .then(data => {\n          const ctx = document.getElementById('balanceChart').getContext('2d');\n          const chart = new Chart(ctx, {\n              type: 'line',\n              data: {\n                  datasets: [{\n                      label: 'Balance',\n                      data: data.data,\n                      borderColor: 'rgb(75, 192, 192)',\n                      tension: 0.1\n                  }]\n              },\n                options: {\n                  scales: {\n                    x: {\n                      type: 'time',\n                      time: {\n                        unit: 'day'\n                      }\n                    }\n                  }\n              }\n          });\n        });\n  </script>\n</body>\n</html>\n"}], "8": [{"file": "manage.py", "path": "/mycalendar/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mycalendar.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "/mycalendar/mycalendar/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\nSECRET_KEY = 'YOUR_SECRET_KEY_HERE'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendarapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mycalendar.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mycalendar.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "/mycalendar/mycalendar/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendarapp.urls')),\n]\n"}, {"file": "urls.py", "path": "/mycalendar/calendarapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar'),\n]\n"}, {"file": "views.py", "path": "/mycalendar/calendarapp/views.py", "code": "import calendar\nfrom django.shortcuts import render\n\ndef calendar_view(request, year=None, month=None):\n    if year is None:\n        year = request.GET.get('year')\n    if month is None:\n        month = request.GET.get('month')\n\n    if year is None or month is None:\n        current_date = calendar.datetime.date.today()\n        year = current_date.year\n        month = current_date.month #Corrected to get the month number not name \n\n\n    year = int(year)\n    month = int(month)\n\n    cal = calendar.monthcalendar(year, month)\n    return render(request, 'calendarapp/calendar.html', {'calendar': cal, 'year':year, 'month':month})\n\n"}, {"file": "calendar.html", "path": "/mycalendar/calendarapp/templates/calendarapp/calendar.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Monthly Calendar</title>\n</head>\n<body>\n    <h1>{{ month }}/{{ year }}</h1>\n\n    <table id=\"calendar-table\" class=\"calendar-table\">\n      <thead id=\"calendar-head\" class=\"calendar-head\">\n        <tr>\n          {% for day in ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'] %}\n            <th id=\"day-header-{{ forloop.counter }}\" class=\"day-header\">{{ day }}</th>\n          {% endfor %}\n        </tr>\n      </thead>\n      <tbody id=\"calendar-body\" class=\"calendar-body\">\n        {% for week in calendar %}\n          <tr id=\"week-row-{{ forloop.counter }}\" class=\"week-row\">\n            {% for day in week %}\n              <td id=\"day-cell-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"day-cell\">\n                  {% if day != 0 %}\n                    {{ day }}\n                  {% endif %}\n              </td>\n            {% endfor %}\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n</body>\n</html>\n"}, {"file": "wsgi.py", "path": "/mycalendar/mycalendar/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mycalendar.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "/mycalendar/mycalendar/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mycalendar.settings')\n\napplication = get_asgi_application()\n"}], "9": [{"file": "manage.py", "path": "my_ai_chatbot_website/", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_ai_chatbot_website.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot_website',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'my_ai_chatbot_website.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'my_ai_chatbot_website.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]"}, {"file": "urls.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_website.urls')),\n]"}, {"file": "urls.py", "path": "my_ai_chatbot_website/chatbot_website/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "views.py", "path": "my_ai_chatbot_website/chatbot_website/", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'chatbot_website/index.html')"}, {"file": "index.html", "path": "my_ai_chatbot_website/templates/chatbot_website/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot Introduction</title>\n</head>\n<body>\n    <div id=\"header\" class=\"header\">\n      <h1 id=\"title\" class=\"title\">Introducing Our AI Chatbot</h1>\n    </div>\n\n    <div id=\"features\" class=\"features\">\n      <h2 id=\"features-title\" class=\"subtitle\">Key Features</h2>\n      <ul id=\"features-list\" class=\"list\">\n        <li id=\"feature1\" class=\"feature-item\">24/7 Availability</li>\n        <li id=\"feature2\" class=\"feature-item\">Instant Responses</li>\n        <li id=\"feature3\" class=\"feature-item\">Personalized Experience</li>\n      </ul>\n    </div>\n\n    <div id=\"benefits\" class=\"benefits\">\n        <h2 id=\"benefits-title\" class=\"subtitle\">Benefits</h2>\n          <p id=\"benefit1\" class=\"benefit-item\">Improved Customer Service</p>\n          <p id=\"benefit2\" class=\"benefit-item\">Increased Efficiency</p>\n    </div>\n\n\n    <div id=\"cta\" class=\"cta\">\n      <button id=\"cta-button\" class=\"button\">Get Started</button>\n    </div>\n</body>\n</html>"}, {"file": "wsgi.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_ai_chatbot_website.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_ai_chatbot_website.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "my_ai_chatbot_website/my_ai_chatbot_website/", "code": ""}, {"file": "__init__.py", "path": "my_ai_chatbot_website/chatbot_website/", "code": ""}, {"file": "apps.py", "path": "my_ai_chatbot_website/chatbot_website/", "code": "from django.apps import AppConfig\n\nclass ChatbotWebsiteConfig(AppConfig):\n    name = 'chatbot_website'\n    default_auto_field = 'django.db.models.BigAutoField'"}, {"file": "admin.py", "path": "my_ai_chatbot_website/chatbot_website/", "code": ""}, {"file": "models.py", "path": "my_ai_chatbot_website/chatbot_website/", "code": ""}, {"file": "tests.py", "path": "my_ai_chatbot_website/chatbot_website/", "code": ""}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n    'chartjs',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),\n]\n"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Food(models.Model):\n    name = models.CharField(max_length=200)\n    calories = models.IntegerField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass CalorieIntake(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    food = models.ForeignKey(Food, on_delete=models.CASCADE)\n    quantity = models.IntegerField(default=1)  # Add quantity field\n    date = models.DateField()\n"}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Food, CalorieIntake\nfrom django.contrib.auth.decorators import login_required\nfrom django.db.models import Sum\nfrom django.http import JsonResponse\nfrom chartjs.views.lines import BaseLineChartView\nimport datetime\n\n@login_required\ndef index(request):\n    foods = Food.objects.filter(user=request.user) # Filter foods by current user\n    intakes = CalorieIntake.objects.filter(user=request.user, date=datetime.date.today()).order_by('-pk')  # Show today's intakes\n    total_calories = intakes.aggregate(Sum('food__calories'))['food__calories__sum'] or 0 # Show today's total\n    context = {\n        'foods': foods,\n        'intakes': intakes, \n        'total_calories': total_calories,\n    }\n    return render(request, 'tracker/index.html', context)\n\n@login_required\ndef add_food(request):\n    if request.method == 'POST':\n        name = request.POST['food_name']\n        calories = request.POST['calories']\n        food = Food(name=name, calories=calories, user=request.user)  # Assign food to user\n        food.save()\n        return redirect('index') # Redirect to home\n    return render(request, 'tracker/add_food.html')\n\n@login_required\ndef log_intake(request):\n    if request.method == 'POST':\n        food_id = request.POST['food']\n        quantity = int(request.POST['quantity'])\n        food = Food.objects.get(id=food_id)\n        intake = CalorieIntake(user=request.user, food=food, date=datetime.date.today(), quantity=quantity)\n        intake.save()\n        return redirect('index') # Redirect to home\n\nclass CalorieChartJSONView(BaseLineChartView):\n    def get_labels(self):\n        \"\"\"Return 7 labels for the x-axis.\"\"\"\n        days = []\n        for i in range(7):\n            day = datetime.date.today() - datetime.timedelta(days=i)\n            days.insert(0, day.strftime(\"%Y-%m-%d\"))\n        return days\n\n    def get_providers(self):\n        \"\"\"Return names of datasets.\"\"\"\n        return [\"Calories\"]\n\n    def get_data(self):\n        \"\"\"Return 7 data points for the datasets.\"\"\"\n        days = []\n        data = []\n        for i in range(7):\n            day = datetime.date.today() - datetime.timedelta(days=i)\n            days.insert(0, day)\n            calories = CalorieIntake.objects.filter(user=self.request.user, date=day).aggregate(Sum('food__calories'))['food__calories__sum'] or 0\n            data.insert(0, calories)\n        return [data]  # Must return a list of datasets\n"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom .views import CalorieChartJSONView\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('add_food/', views.add_food, name='add_food'),\n    path('log_intake/', views.log_intake, name='log_intake'),\n    path('api/chart/data/', CalorieChartJSONView.as_view(), name='calorie_chart_json'),\n]\n"}, {"file": "index.html", "path": "calorie_tracker/tracker/templates/tracker/index.html", "code": "{% extends 'base.html' %}\n{% load static %}\n\n{% block content %}\n<div class=\"container mt-5\" id=\"main-content\">\n    <h1 id=\"page-title\">Calorie Tracker</h1>\n    <canvas id=\"calorieChart\" width=\"400\" height=\"200\"></canvas>\n    <div class=\"row\">\n        <div class=\"col-md-6\">\n            <h2 id=\"food-list-title\">Food List</h2>\n            <ul id=\"food-list\">\n                {% for food in foods %}\n                    <li id=\"food-item-{{ food.id }}\" class=\"food-item\">\n                        {{ food.name }} - {{ food.calories }} calories\n                    </li>\n                {% endfor %}\n            </ul>\n            <a href=\"{% url 'add_food' %}\" class=\"btn btn-primary\" id=\"add-food-button\">Add Food</a>\n        </div>\n        <div class=\"col-md-6\">\n            <h2 id=\"intake-history-title\">Intake History (Today)</h2>\n            <ul id=\"intake-history\">\n                {% for intake in intakes %}\n                    <li id=\"intake-item-{{ intake.id }}\" class=\"intake-item\">\n                        {{ intake.food.name }} x {{intake.quantity}} - {{ intake.food.calories * intake.quantity}} calories \n                    </li>\n                {% endfor %}\n            </ul>\n            <form method=\"post\" action=\"{% url 'log_intake' %}\" id=\"log-intake-form\">\n                {% csrf_token %}\n                <div class=\"form-group\">\n                    <label for=\"food\" id=\"food-label\">Food:</label>\n                    <select name=\"food\" id=\"food-select\" class=\"form-control\">\n                       {% for food in foods %} \n                            <option value=\"{{ food.id }}\">{{ food.name }}</option>\n                         {% endfor %}\n                    </select>\n                    <label for=\"quantity\" id=\"quantity-label\">Quantity:</label>\n                    <input type=\"number\" name=\"quantity\" id=\"quantity-input\" value=\"1\" min=\"1\" class=\"form-control\"> \n                </div>\n                <button type=\"submit\" class=\"btn btn-success\" id=\"log-intake-button\">Log Intake</button>\n            </form>\n            <div id=\"total-calories\">\n                <strong>Total Calories (Today): <span id=\"total-calorie-count\">{{ total_calories }}</span></strong>\n            </div>\n        </div>\n    </div>\n</div>\n<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n<script>\n    var endpoint = '/api/chart/data/';\n    var defaultData = [];\n    $.ajax({\n        method: \"GET\",\n        url: endpoint,\n        success: function(data){\n            labels = data.labels\n            defaultData = data.datasets[0].data // Access correct dataset data\n            setChart()\n        },\n        error: function(error_data){\n            console.log(\"error\")\n            console.log(error_data)\n        }\n    })\n    function setChart() {\n        var ctx = document.getElementById('calorieChart').getContext('2d');\n        var myChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Calories Consumed',\n                    data: defaultData,\n                    borderColor: 'rgb(75, 192, 192)',\n                    tension: 0.1\n                }]\n            },\n            options: {\n                    scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    }\n\n</script>\n{% endblock %}\n"}, {"file": "add_food.html", "path": "calorie_tracker/tracker/templates/tracker/add_food.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mt-5\">\n    <h1 id=\"add-food-title\">Add Food</h1>\n    <form method=\"post\" id=\"add-food-form\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"food_name\" id=\"food-name-label\">Food Name:</label>\n            <input type=\"text\" name=\"food_name\" class=\"form-control\" id=\"food-name-input\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"calories\" id=\"calories-label\">Calories:</label>\n            <input type=\"number\" name=\"calories\" class=\"form-control\" id=\"calories-input\" required>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" id=\"submit-food-button\">Submit</button>\n    </form>\n</div>\n{% endblock %}\n"}, {"file": "base.html", "path": "calorie_tracker/tracker/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calorie Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"/\">Calorie Tracker</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n          <ul class=\"navbar-nav\">\n            {% if user.is_authenticated %}\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n            </li>\n            {% else %}\n            <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n            </li>\n            {% endif %}\n          </ul>\n        </div>\n      </nav>\n    {% block content %}{% endblock %}\n</body>\n</html>\n"}], "11": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"password_generator.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y+u6@62t6_8!b#g@5e^m$r+v-z2(3^q1%7$69$z+(x+t%h-j)'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review.urls')),\n]\n"}, {"file": "urls.py", "path": "password_generator/review/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.review_page, name='review'),\n]\n"}, {"file": "views.py", "path": "password_generator/review/views.py", "code": "import json\nfrom django.shortcuts import render\n\ndef review_page(request):\n    json_data = '''\n    [{\"project_id\": \"3\", \"project_type\": \"website\", \"nl_prompt\": \"Create a website for a password generator.\", \"framework_technical_stack\": [{\"language\": \"Python\", \"technical_stack\": \"Django\"}], \"nl_checklist\": [{\"page\": \"Home\", \"required\": true, \"function\": [{\"function\": \"Display Welcome Message\", \"description\": \"Show a welcome message or introduction to the password generator.\", \"required\": false}, {\"function\": \"Navigation Button\", \"description\": \"Button to the password generator page.\", \"required\": true}]}, {\"page\": \"About\", \"required\": false, \"function\": [{\"function\": \"Description\", \"description\": \"Provide information about the purpose and functionality of the website.\", \"required\": false}]}], \"testcode\": [{\"page\": \"Home\", \"function\": [{\"function\": \"Display Welcome Message\", \"test\": \"def test_display_welcome_message(driver, test_url,swelcome_message_id):\\r\\n    driver.get(test_url)\\r\\n    welcome_message = driver.find_element(By.ID,swelcome_message_id)\\r\\n    assert welcome_message.is_displayed()\", \"parameter\": [{\"name\": \"test_url\", \"description\": \"the url for test\"}, {\"name\": \"swelcome_message_id\", \"description\": \"the id of the welcome message element\"}]}, {\"function\": \"Navigation Button\", \"test\": \"def test_navigation_button(driver, test_url,navigation_button_id, generator_id):\\r\\n    driver.get(test_url)\\r\\n    generate_button = driver.find_element(By.ID,navigation_button_id)\\r\\n    assert generate_button.is_displayed()\\r\\n    generate_button.click()\\r\\n    time.sleep(1)\\r\\n    generator = driver.find_element(By.ID,generator_id)\\r\\n    assert generator.is_displayed()\", \"parameter\": [{\"name\": \"test_url\", \"description\": \"the url for test\"}, {\"name\": \"navigation_button_id\", \"description\": \"the button id for navigation to generator\"}]}]}, {\"page\": \"About\", \"function\": [{\"function\": \"About Link\", \"test\": \"def test_about_link(driver, test_url, about_link_id):\\r\\n    driver.get(test_url)\\r\\n    about_link = driver.find_element(By.ID, about_link_id)\\r\\n    assert about_link.is_displayed()\\r\\n    about_link.click()\", \"parameter\": [{\"name\": \"test_url\", \"description\": \"the url for test\"}, {\"name\": \"about_link_id\", \"description\": \"the hyperlink id of about page in the home page\"}]}, {\"function\": \"Description\", \"test\": \"def test_description(driver, description_id):\\r\\n    description = driver.find_element(By.ID, description_id)\\r\\n    assert description.is_displayed()\", \"parameter\": [{\"name\": \"description_id\", \"description\": \"the id of the discription element\"}]}]}]}\n    '''\n    data = json.loads(json_data)\n    return render(request, 'review/review.html', {'data': data})\n"}, {"file": "review.html", "path": "password_generator/templates/review/review.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Code Review</title>\n</head>\n<body>\n    <h1>Code Review</h1>\n\n    {% for project in data %}\n        <h2>Project ID: {{ project.project_id }}</h2>\n        <p>Project Type: {{ project.project_type }}</p>\n        <p>Prompt: {{ project.nl_prompt }}</p>\n\n        <h3>Test Code Review</h3>\n        {% for testcase in project.testcode %}\n            <h4>Page: {{ testcase.page }}</h4>\n            <ul>\n            {% for function in testcase.function %}\n                <li>\n                    <p>Function: {{ function.function }}</p>\n                    <pre id=\"test-code-{{ forloop.counter }}\" class=\"test-code\">{{ function.test }}</pre>\n                    <p>Status:\n                        <select id=\"status-{{ forloop.counter }}\" class=\"status-select\">\n                            <option value=\"Select\">Select</option>\n                            <option value=\"Pass\">Pass</option>\n                            <option value=\"Fail\">Fail</option>\n                        </select>\n                    </p>\n                       <div>\n                           Parameters:\n                           <ul>\n                           {% for parameter in function.parameter %}\n                               <li>Name: {{ parameter.name }}, Description: {{ parameter.description }}</li>\n                           {% endfor %}\n                           </ul>\n                       </div>\n                </li>\n            {% endfor %}\n            </ul>\n        {% endfor %}\n    {% endfor %}\n</body>\n</html>\n"}], "13": [{"file": "manage.py", "path": "crm_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "crm_project/crm_project/settings.py", "code": "# ... (Standard Django settings - DATABASES, STATIC_URL, etc.)\n\nINSTALLED_APPS = [\n    # ...\n    'crm_app',\n]\n\n# ... (Other settings)"}, {"file": "urls.py", "path": "crm_project/crm_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('crm_app.urls')),\n]"}, {"file": "models.py", "path": "crm_project/crm_app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10)\n    company = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=20)\n    preferred_products = models.ManyToManyField('Product', related_name='preferred_by')\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n"}, {"file": "admin.py", "path": "crm_project/crm_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\n"}, {"file": "apps.py", "path": "crm_project/crm_app/apps.py", "code": "from django.apps import AppConfig\n\nclass CrmAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'crm_app'\n"}, {"file": "urls.py", "path": "crm_project/crm_app/urls.py", "code": "from django.urls import path\nfrom . import views # Make sure this import is present\n\nurlpatterns = [\n    # ... other URL patterns\n]"}, {"file": "views.py", "path": "crm_project/crm_app/views.py", "code": "from django.shortcuts import render\n# ... other imports as needed\n\ndef index(request):\n    return render(request, 'crm_app/index.html') # Or the path to your template\n"}, {"file": "index.html", "path": "crm_project/crm_app/templates/crm_app/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>CRM System</title>\n</head>\n<body>\n    <h1>Customer Relationship Management</h1>\n\n    <div id=\"customer-form\" class=\"form-container\">\n      </div>\n    \n    <div id=\"product-form\" class=\"form-container\">\n      </div>\n\n      <div id=\"purchase-form\" class=\"form-container\">\n      </div>\n\n</body>\n</html>\n"}], "14": [{"file": "manage.py", "path": "mysite/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "mysite/mysite/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y$p&@93$h0#m9!6y#5(w7u35p%0^n(y2^z7f@*d_q!g!_xcv)'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "mysite/mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworld.urls')),\n]"}, {"file": "wsgi.py", "path": "mysite/mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "mysite/helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "views.py", "path": "mysite/helloworld/views.py", "code": "from django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    return render(request, 'helloworld/index.html')"}, {"file": "index.html", "path": "mysite/helloworld/templates/helloworld/index.html", "code": "<html>\n<head><title>Hello World</title></head>\n<body>\n    <h1 id=\"hello-title\" class=\"title\">Hello World</h1>\n</body>\n</html>"}, {"file": "__init__.py", "path": "mysite/helloworld/__init__.py", "code": ""}, {"file": "__init__.py", "path": "mysite/mysite/__init__.py", "code": ""}, {"file": "apps.py", "path": "mysite/helloworld/apps.py", "code": "from django.apps import AppConfig\n\nclass HelloworldConfig(AppConfig):\n    name = 'helloworld'"}, {"file": "admin.py", "path": "mysite/helloworld/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "mysite/helloworld/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "mysite/helloworld/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}], "15": [{"file": "manage.py", "path": "mysite/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "mysite/mysite/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'y9)p@-z#6-n=87z+u0x&o-c203*y&l!k$@7)c#_p5!w3o0=v-'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "mysite/mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworld.urls')),\n]\n"}, {"file": "urls.py", "path": "mysite/helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "mysite/helloworld/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'helloworld/index.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld/helloworld.html')\n"}, {"file": "index.html", "path": "mysite/helloworld/templates/helloworld/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Index</title>\n</head>\n<body id=\"index-body\" class=\"index-body\">\n    <a id=\"helloworld-link\" class=\"helloworld-link\" href=\"{% url 'helloworld' %}\">\n        <button id=\"helloworld-button\" class=\"helloworld-button\">Go to Hello World</button>\n    </a>\n</body>\n</html>\n"}, {"file": "helloworld.html", "path": "mysite/helloworld/templates/helloworld/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body id=\"helloworld-body\" class=\"helloworld-body\">\n    <h1 id=\"helloworld-heading\" class=\"helloworld-heading\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "mysite/mysite/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "mysite/mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "mysite/mysite/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "mysite/helloworld/__init__.py", "code": ""}, {"file": "admin.py", "path": "mysite/helloworld/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "mysite/helloworld/apps.py", "code": "from django.apps import AppConfig\n\nclass HelloworldConfig(AppConfig):\n    name = 'helloworld'\n"}, {"file": "models.py", "path": "mysite/helloworld/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "mysite/helloworld/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}], "17": [{"file": "run.bat", "path": "./run.bat", "code": "@echo off\npython main.py"}, {"file": "main.py", "path": "./main.py", "code": "# Import necessary libraries\nimport pandas as pd\nimport statsmodels.api as sm\nimport openpyxl\n\n# Load the dataset\ntry:\n    data = pd.read_excel(\"Gamedata.xlsx\")\nexcept FileNotFoundError:\n    print(\"Error: Gamedata.xlsx not found. Please ensure the file exists in the same directory as the script.\")\n    exit()\n\n# Lag the dependent variable 'result'\ndata['result_lag'] = data['result'].shift(1)\ndata = data.dropna() # Remove rows with NaN values due to lagging\n\n# Define independent and dependent variables\nX = data.drop(['result', 'result_lag'], axis=1)\nX = sm.add_constant(X)  # Add a constant to the independent variables\ny = data['result_lag']\n\n# Create and fit the logistic regression model\nmodel = sm.Logit(y, X)\nresults = model.fit()\n\n# Get the model summary\nsummary = results.summary()\n\n# Save the summary to an Excel file\nwith open(\"summary.txt\", \"w\") as f:\n    f.write(str(summary))\n\n# Load the summary and write to Logistic.xlsx\nwb = openpyxl.Workbook()\nws = wb.active\n\nsummary_lines = open('summary.txt').readlines()\nfor line in summary_lines:\n    ws.append([line.strip()]) # Writes each line of the summary to a separate row\n\nwb.save(\"Logistic.xlsx\")\nprint(\"Logistic regression summary saved to Logistic.xlsx\")\n"}, {"file": "Gamedata.xlsx", "path": "./Gamedata.xlsx", "code": ""}], "18": [{"file": "game.py", "path": "./game.py", "code": "# coding=utf-8\n\nimport random\nimport os\n\n\ndef clear_screen():\n    os.system('cls' if os.name == 'nt' else 'clear')\n\ndef display_board(board):\n    clear_screen()\n    print(\"  0 1 2\")\n    for i, row in enumerate(board):\n        print(i, end=\" \")\n        for cell in row:\n            print(cell, end=\" \")\n        print()\n\ndef get_player_move():\n    while True:\n        try:\n            row = int(input(\"Enter row (0-2): \"))\n            col = int(input(\"Enter column (0-2): \"))\n            if 0 <= row <= 2 and 0 <= col <= 2:\n                return row, col\n            else:\n                print(\"Invalid input. Please enter numbers between 0 and 2.\")\n        except ValueError:\n            print(\"Invalid input. Please enter numbers.\")\n\ndef check_win(board, player):\n    for row in board:\n        if all(cell == player for cell in row):\n            return True\n    for col in range(3):\n        if all(board[row][col] == player for row in range(3)):\n            return True\n    if all(board[i][i] == player for i in range(3)) or all(board[i][2 - i] == player for i in range(3)):\n        return True\n    return False\n\ndef check_tie(board):\n    for row in board:\n        if '.' in row:\n            return False\n    return True\n\ndef main():\n    board = [['.' for _ in range(3)] for _ in range(3)]\n    players = ['X', 'O']\n    current_player = random.choice(players)\n\n    while True:\n        display_board(board)\n        print(f\"Player {current_player}'s turn\")\n\n        row, col = get_player_move()\n        if board[row][col] == '.':\n            board[row][col] = current_player\n\n            if check_win(board, current_player):\n                display_board(board)\n                print(f\"Player {current_player} wins!\")\n                break\n\n            if check_tie(board):\n                display_board(board)\n                print(\"It's a tie!\")\n                break\n\n            current_player = players[(players.index(current_player) + 1) % 2]\n        else:\n            print(\"That spot is already taken. Try again.\")\n\nif __name__ == \"__main__\":\n    main()\n"}], "19": [{"file": "death_histogram.bat", "path": "./death_histogram.bat", "code": "@echo off\n\nsetlocal EnableDelayedExpansion\n\n:: Initialize week counts\nfor /L %%w in (1, 1, 53) do (\n  set \"week%%w=0\"\n)\n\n:: Read the CSV file\nfor /F \"skip=1 tokens=1 delims=,\" %%a in (Deathlist.csv) do (\n  :: Convert date to week number using PowerShell (adjust date format if needed)\n  for /F \"usebackq tokens=1\" %%w in (`powershell -Command \"[datetime]::ParseExact('%%a', 'yyyy-MM-dd', $null).GetWeekOfYear()\"`) do (\n    set /a \"week%%w+=1\"\n  )\n)\n\n:: Print the histogram\necho Weekly Death Histogram:\nfor /L %%w in (1, 1, 53) do (\n  echo Week %%w: !week%%w! [!week%%w!]\n  REM The following loop creates the histogram bars, you can adjust the character used\n  for /L %%i in (1, 1, !week%%w!) do (\n    set /p \"dummy=X\" <nul\n  )\n  echo.\n)\n\nendlocal"}, {"file": "Deathlist.csv", "path": "./Deathlist.csv", "code": "Date of death\n2023-01-05\n2023-01-10\n2023-01-15\n2023-02-20\n2023-02-27\n2023-03-08\n2023-03-15\n2023-04-02\n2023-04-09\n2023-04-16\n2023-05-03\n2023-05-10\n2023-05-17\n2023-06-06\n2023-06-13\n2023-06-20\n2023-07-04\n2023-07-11\n2023-07-18\n2023-08-01\n2023-08-08\n2023-08-15\n2023-09-05\n2023-09-12\n2023-09-19\n2023-10-03\n2023-10-10\n2023-10-17\n2023-11-07\n2023-11-14\n2023-11-21\n2023-12-05\n2023-12-12\n2023-12-19"}, {"file": "README.md", "path": "./README.md", "code": "# Weekly Death Histogram\n\nThis batch script generates a histogram of weekly deaths based on a CSV file named `Deathlist.csv`.  The CSV file should contain a column named \"Date of death\" with dates in `yyyy-MM-dd` format.\n\n## Requirements\n\n* Windows operating system with PowerShell.\n\n## Usage\n\n1.  Save the `death_histogram.bat` script and `Deathlist.csv` in the same directory.\n2.  Double-click `death_histogram.bat` to run the script.\n3.  The histogram will be printed to the console.\n\n## Customization\n\n*   **Date format:** If your date format is different, adjust the `yyyy-MM-dd` format string in the PowerShell command within the script.\n*   **Histogram character:** You can change the character used for the histogram bars by modifying the `set /p \"dummy=X\" <nul` line.\n\n## Note:\nThis script uses PowerShell to determine the week number.  Ensure that PowerShell is enabled on your system. The script assumes the first day of the week is Sunday. You may need to adapt the PowerShell script if your locale uses a different first day of the week.\n"}]}