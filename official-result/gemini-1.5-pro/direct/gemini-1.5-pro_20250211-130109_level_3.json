{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass BMICalculatorForm(forms.Form):\n    weight = forms.FloatField(label='Your Weight (kg)', min_value=0)\n    height = forms.FloatField(label='Your Height (cm)', min_value=0)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMICalculatorForm\n\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\",\n    \"Invalid weight\": \"The weight can't be less than 0.\"\n}\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef bmi_calculator(request):\n    bmi = None\n    interpretation = None\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height']\n            if height <= 0:\n                interpretation = bmi_interpretation[\"Invalid height\"]\n            elif weight <= 0:\n                interpretation = bmi_interpretation[\"Invalid weight\"]\n            else:\n                bmi = weight / ((height / 100) ** 2) \n                for category, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        interpretation = bmi_interpretation[category]\n                        break\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'interpretation': interpretation})\n\ndef advice(request):\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html>\n<head><title>Advice</title></head>\n<body id=\"advice-body\" class=\"advice-page\">\n    <h1 id=\"advice-title\" class=\"advice-title\">Health Advice</h1>\n    <p id=\"advice-text\" class=\"advice-text\">Specific advice content would go here, tailored to the BMI category.</p>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html>\n<head><title>BMI Calculator</title></head>\n<body id=\"bmi-calc-body\" class=\"bmi-calculator-page\">\n    <h1 id=\"bmi-calc-title\" class=\"bmi-calculator-title\">BMI Calculator</h1>\n    <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Calculate</button>\n    </form>\n    {% if bmi %}\n        <p id=\"bmi-result\" class=\"bmi-result\">Your BMI: {{ bmi|floatformat:2 }}</p>\n        <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">{{ interpretation }}</p>\n    {% endif %}\n    <button id=\"reset-button\" class=\"reset-button\" type=\"reset\" onclick=\"location.reload()\">Reset</button>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html>\n<head><title>Homepage</title></head>\n<body  id=\"home-body\" class=\"home-page\">\n    <h1 id=\"home-title\" class=\"home-title\">Welcome to the BMI Calculator</h1>\n    <p id=\"home-intro\" class=\"home-intro\">Learn about your Body Mass Index (BMI).</p>\n    <a id=\"bmi-calc-link\" class=\"bmi-calc-link\" href=\"{% url 'bmi_calculator' %}\">Calculate Your BMI</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \n            \"available on your PYTHONPATH environment variable? Did you \" \n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Chinese Yuan'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc'),\n]\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', min_value=0.01)\n    source_currency = forms.ChoiceField(label='From', choices=CURRENCY_CHOICES)\n    target_currency = forms.ChoiceField(label='To', choices=CURRENCY_CHOICES)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass CurrencyConvertRateModel(models.Model):\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=20, decimal_places=10, verbose_name='Rate')\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Datetime')\n\n    class Meta:\n        verbose_name = 'Currency Convert Rate'\n        verbose_name_plural = 'Currency Convert Rates'\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency}: {self.rate} at {self.datetime}'"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport datetime\nfrom io import BytesIO\nimport base64\nfrom django.shortcuts import render\nfrom django.views.generic import TemplateView\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\nimport matplotlib.pyplot as plt\n\n\ndef get_updated_rate(source_currency, target_currency):\n    usd_base = {\n        'USD': 1.00, 'EUR': 0.85, 'GBP': 0.75, 'JPY': 110.00,\n        'AUD': 1.35, 'CNY': 7.00, 'CAD': 1.25, 'CHF': 0.92\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / usd_base[source_currency] * usd_base[target_currency])\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            rate = get_updated_rate(source_currency, target_currency)\n            converted_amount = amount * rate\n            CurrencyConvertRateModel.objects.create(\n                source_currency=source_currency, target_currency=target_currency, rate=rate\n            )\n            return render(request, self.template_name, {'form': form, 'converted_amount': converted_amount, 'rate': rate})\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        source_currency = request.GET.get('source_currency', 'USD')\n        target_currency = request.GET.get('target_currency', 'EUR')\n        chart = self.create_chart(source_currency, target_currency)\n        return render(request, self.template_name, {'chart': chart, 'source_currency': source_currency, 'target_currency': target_currency})\n\n    def create_chart(self, source_currency, target_currency):\n        dates = [datetime.date.today() - datetime.timedelta(days=i) for i in range(7)]\n        rates = [get_updated_rate(source_currency, target_currency) for _ in range(7)]\n        plt.plot(dates, rates)\n        plt.xlabel('Date')\n        plt.ylabel('Rate')\n        plt.title(f'{source_currency} to {target_currency} Exchange Rate')\n        buffer = BytesIO()\n        plt.savefig(buffer, format='png')\n        buffer.seek(0)\n        image_png = buffer.getvalue()\n        buffer.close()\n        graphic = base64.b64encode(image_png)\n        graphic = graphic.decode('utf-8')\n        plt.clf() \n        return graphic"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.5 on 2024-09-25 00:23\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=3, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=3, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=10, max_digits=20, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n</head>\n<body>\n    <div id=\"trend-chart-container\" class=\"chart-container\">\n        {% if chart %}\n            <img id=\"trend-chart\" class=\"trend-chart\" src=\"data:image/png;base64,{{ chart }}\" alt=\"Exchange Rate Trend Chart\">\n        {% endif %}\n     </div>\n    <form id=\"currency-selection-form\" class=\"currency-selection-form\" method=\"get\" action=\"\">\n        <label for=\"source_currency\">From:</label>\n        <select name=\"source_currency\" id=\"source_currency\">\n            {% for currency, name in form.source_currency.field.choices %}\n                <option value=\"{{ currency }}\" {% if currency == source_currency %}selected{% endif %}>{{ name }}</option>\n            {% endfor %}\n        </select>\n\n        <label for=\"target_currency\">To:</label>\n        <select name=\"target_currency\" id=\"target_currency\">\n            {% for currency, name in form.target_currency.field.choices %}\n                <option value=\"{{ currency }}\" {% if currency == target_currency %}selected{% endif %}>{{ name }}</option>\n            {% endfor %}\n        </select>\n        <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Show</button>\n    </form>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"converter-container\">\n    <h1 id=\"converter-title\">Currency Converter</h1>\n    <form id=\"converter-form\" class=\"converter-form\" method=\"post\" action=\"\">\n        {% csrf_token %}\n        <div id=\"amount-field\" class=\"form-field\">\n            {{ form.amount.label_tag }}\n            {{ form.amount }}\n        </div>\n        <div id=\"source-currency-field\" class=\"form-field\">\n            {{ form.source_currency.label_tag }}\n            {{ form.source_currency }}\n        </div>\n        <div id=\"target-currency-field\" class=\"form-field\">\n            {{ form.target_currency.label_tag }}\n            {{ form.target_currency }}\n        </div>\n        <button id=\"convert-button\" class=\"convert-button\" type=\"submit\">Convert</button>\n    </form>\n\n    {% if converted_amount %}\n    <div id=\"result-container\" class=\"result-container\">\n        <p id=\"result-text\" class=\"result-text\">Converted Amount: {{ converted_amount|floatformat:2 }}</p>\n        <p id=\"rate-text\" class=\"rate-text\">Exchange Rate: {{ rate|floatformat:2 }}</p>\n    </div>\n    {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    return render(request, 'qr_app/home.html')\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        buffer = io.BytesIO()\n        img.save(buffer, 'PNG')\n        img_str = base64.b64encode(buffer.getvalue()).decode()\n\n        return render(request, 'qr_app/generate.html', {'qr_code': img_str})\n\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fill_color = request.POST.get('fill_color', '#000000')\n        back_color = request.POST.get('back_color', '#ffffff')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n        response = HttpResponse(content_type='image/png')\n        response['Content-Disposition'] = f'attachment; filename=\"qrcode.png\"'\n        img.save(response, 'PNG')\n        return response\n\n    return HttpResponse(\"No data provided for download.\")\n\n\ndef about(request):\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"about-container\">\n        <h1>About Our QR Code Generator</h1>\n        <p>This is a simple QR code generator built with Django.</p>\n        <h2>FAQ</h2>\n        <p>No FAQ yet!</p>\n        <h2>Policies</h2>\n        <p>No specific policies at the moment.</p>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select, button {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n            box-sizing: border-box;\n        }\n\n        button {\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n\n        img {\n            display: block;\n            margin: 20px auto;\n            max-width: 300px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"generate-form\" class=\"generate-form\">\n    <form method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n        {% csrf_token %}\n        <label for=\"data\">Data:</label>\n        <input type=\"text\" id=\"data\" name=\"data\" required>\n\n        <label for=\"fill_color\">Fill Color:</label>\n        <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n\n        <label for=\"back_color\">Background Color:</label>\n        <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\">\n\n        <button type=\"submit\">Generate QR Code</button>\n    </form>\n\n    {% if qr_code %}\n        <div id=\"qr-code-container\" class=\"qr-code-container\">\n            <img id=\"qr-code-image\" class=\"qr-code-image\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n        <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n        {% csrf_token %}\n        <input type=\"hidden\" name=\"data\" value=\"{{ data }}\">\n        <input type=\"hidden\" name=\"fill_color\" value=\"{{ fill_color }}\">\n        <input type=\"hidden\" name=\"back_color\" value=\"{{ back_color }}\">\n        <button id=\"download-button\" class=\"download-button\" type=\"submit\">Download</button>\n    </form>\n        </div>\n\n    {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n      <h1>Welcome to the QR Code Generator</h1>\n      <ul>\n          <li><a href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a></li>\n          <li><a href=\"{% url 'about' %}\">About Us</a></li>\n      </ul>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong secret key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "asgi.py", "path": "qr_code_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()"}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        if 'markdown_text' in request.POST:\n            markdown_text = request.POST['markdown_text']\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n        elif 'file_upload' in request.FILES:\n            uploaded_file = request.FILES['file_upload']\n            fs = FileSystemStorage()\n            filename = fs.save(uploaded_file.name, uploaded_file)\n            filepath = fs.path(filename)\n            with open(filepath, 'r') as f:\n                markdown_text = f.read()\n            html = markdown.markdown(markdown_text)\n            return render(request, 'convert.html', {'html': html})\n\n    return render(request, 'convert.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"content-container\">\n        <h1>About this Markdown to HTML Converter</h1>\n        <p>This is a simple web application that allows you to convert Markdown text to HTML. You can either paste your Markdown directly into the text area or upload a Markdown file.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"content-container\">\n        <h1>Convert Markdown to HTML</h1>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <label for=\"markdown_text\">Enter Markdown:</label><br>\n            <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"80\"></textarea><br><br>\n            <label for=\"file_upload\">Upload Markdown File:</label>\n            <input type=\"file\" id=\"file_upload\" name=\"file_upload\"><br><br>\n            <input type=\"submit\" value=\"Convert\">\n        </form>\n        {% if html %}\n            <div id=\"html-output\" class=\"output-container\">\n                <h2>HTML Output:</h2>\n                {{ html | safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"content-container\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n        <p>Use this tool to easily convert your Markdown text to HTML.</p>\n        <a href=\"{% url 'convert' %}\">Convert</a> <br>\n        <a href=\"{% url 'about' %}\">About</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'  # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media/')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()\n"}, {"file": null, "path": "media", "code": null}, {"file": null, "path": "example_app/migrations", "code": null}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title\n\nclass TodoItem(models.Model):\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item, \n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.views.generic import TemplateView, ListView\nfrom .models import TodoList, TodoItem\nfrom django.urls import reverse\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n\n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\ndef edit_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        todo.title = request.POST.get('title')\n        todo.description = request.POST.get('description')\n        todo.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todo': todo})\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        return context\n\n    def post(self, request, *args, **kwargs):\n        todolist_id = self.kwargs['pk']\n        todolist = get_object_or_404(TodoList, pk=todolist_id)\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoItem.objects.create(todolist=todolist, title=title, description=description)\n        return redirect(reverse('view_todo_item', kwargs={'pk': todolist_id}))\n\ndef delete_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    todolist_id = item.todolist.id\n    item.delete()\n    return redirect(reverse('view_todo_item', kwargs={'pk': todolist_id}))\n\ndef edit_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        item.title = request.POST.get('title')\n        item.description = request.POST.get('description')\n        item.save()\n        return redirect(reverse('view_todo_item', kwargs={'pk': item.todolist.id}))\n    return render(request, 'edit_todo_item.html', {'item': item})\n\ndef complete_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    item.completed = not item.completed\n    item.save()\n    return redirect(reverse('view_todo_item', kwargs={'pk': item.todolist.id}))\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        all_items = TodoItem.objects.all()\n        completed_items = all_items.filter(completed=True)\n        context['completion_rate'] = (completed_items.count() / all_items.count()) * 100 if all_items.count() else 0\n        return context"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\" id=\"analysis-container\">\n        <canvas id=\"completion-chart\" class=\"analysis-chart\"></canvas>\n        <div id=\"completion-rate\" class=\"analysis-data\">Completion Rate: {{ completion_rate|floatformat:2 }}%</div>\n<a href=\"{% url 'home' %}\" id=\"return-home\" class=\"nav-link\">Return Home</a>\n    </div>\n\n    <script>\n        const ctx = document.getElementById('completion-chart').getContext('2d');\n        const completionRate = {{ completion_rate|floatformat:2 }};\n        new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    data: [completionRate, 100 - completionRate],\n                    backgroundColor: ['#007bff', '#dc3545'],\n                }]\n            },\n        });\n    </script>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <form method=\"post\" id=\"edit-todo-form\" class=\"todo-form\">\n        {% csrf_token %}\n        <div id=\"title-field\" class=\"form-group\">\n        <label for=\"id_title\">Title:</label>\n        <input type=\"text\" name=\"title\" maxlength=\"200\" required id=\"id_title\" value=\"{{ todo.title }}\" class=\"form-control\">  </div>      <div id=\"description-field\" class=\"form-group\">      <label for=\"id_description\">Description:</label>        <textarea name=\"description\" cols=\"40\" rows=\"10\" id=\"id_description\" class=\"form-control\">{{ todo.description }}</textarea>  </div>      <button type=\"submit\" id=\"submit-edit\" class=\"btn btn-primary\">Save Changes</button>\n    </form>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <form method=\"post\" id=\"edit-todo-item-form\" class=\"todo-item-form\">\n        {% csrf_token %}\n          <div id=\"item-title-field\" class=\"form-group\">          <label for=\"id_title\">Title:</label>       <input type=\"text\" name=\"title\" maxlength=\"200\" required id=\"id_title\" value=\"{{ item.title }}\" class=\"form-control\"> </div>       <div id=\"item-description-field\" class=\"form-group\">       <label for=\"id_description\">Description:</label>        <textarea name=\"description\" cols=\"40\" rows=\"10\" id=\"id_description\" class=\"form-control\">{{ item.description }}</textarea> </div>       <button type=\"submit\" id=\"submit-item-edit\" class=\"btn btn-primary\">Save Changes</button>\n    </form>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id = \"home-container\" class=\"container\">    <h1 id=\"home-heading\">Welcome to Your Todo App</h1>\n    <div id=\"nav-links\">    <a href=\"{% url 'todo_list' %}\" id=\"todo-list-link\" class=\"nav-link\">View Todo Lists</a><br>\n    <a href=\"{% url 'analysis' %}\" id=\"analysis-link\" class=\"nav-link\">View Task Analysis</a>  </div>  </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <div id=\"task-container\" class=\"container\">\n    <h2 id=\"list-title\">{{ todolist.title }}</h2>\n    <ul id=\"task-list\" class=\"list-group\">\n        {% for task in todolist_list %}\n            <li id=\"task-item-{{ task.id }}\" class=\"list-group-item\">\n                <input type=\"checkbox\" id=\"complete-task-{{ task.id }}\" class=\"complete-task\" {% if task.completed %}checked{% endif %} onclick=\"window.location.href='{% url 'complete_todo_item' task.id %}'\" >\n                <label for=\"complete-task-{{ task.id }}\" id=\"task-label-{{ task.id }}\">{{ task.title }}</label>\n                <div class=\"task-actions\">\n                <a href=\"{% url 'edit_todo_item' task.id %}\" id=\"edit-task-{{ task.id }}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                <a href=\"{% url 'delete_todo_item' task.id %}\" id=\"delete-task-{{ task.id }}\" class=\"btn btn-sm btn-danger\">Delete</a>      </div>\n            </li>\n        {% endfor %}\n    </ul>\n\n    <form method=\"post\" id=\"new-task-form\" class=\"task-form\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n        <label for=\"id_title\">Title:</label>\n        <input type=\"text\" name=\"title\" maxlength=\"200\" required id=\"id_title\" class=\"form-control\">\n      </div>\n      <div class=\"form-group\">\n        <label for=\"id_description\">Description:</label>\n        <textarea name=\"description\" cols=\"40\" rows=\"10\" id=\"id_description\" class=\"form-control\"></textarea>\n      </div>\n        <button type=\"submit\" id=\"submit-task\" class=\"btn btn-primary\">Add Task</button>\n    </form>\n    <a href=\"{% url 'todo_list' %}\" id=\"return-list\" class=\"nav-link\">Back to Lists</a>\n  </div>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo Lists</title>\n</head>\n<body>\n    <div id = \"list-container\" class=\"container\">\n    <h1 id = \"list-heading\">Todo Lists</h1>\n    <ul id=\"list-items\" class=\"list-group\">\n        {% for todo in object_list %}\n            <li id=\"list-item-{{ todo.id }}\" class=\"list-group-item\">\n                <a href=\"{% url 'view_todo_item' todo.id %}\" id=\"view-task-{{ todo.id }}\">{{ todo.title }}</a>\n                <div id=\"list-actions-{{todo.id}}\" class=\"list-actions\">\n                <a href=\"{% url 'edit_todo' todo.id %}\" id=\"edit-list-{{ todo.id }}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                <a href=\"{% url 'delete_todo' todo.id %}\" id=\"delete-list-{{ todo.id }}\" class=\"btn btn-sm btn-danger\">Delete</a>\n              </div>\n            </li>\n        {% endfor %}\n    </ul>\n\n    <form method=\"post\" id=\"new-list-form\" class=\"todo-list-form\">\n        {% csrf_token %}\n        <div id=\"new-list-title-field\" class=\"form-group\">\n        <label for=\"id_title\">Title:</label>\n        <input type=\"text\" name=\"title\" maxlength=\"200\" required id=\"id_title\" class=\"form-control\">\n        </div>\n        <div id=\"new-list-description-field\" class=\"form-group\">\n        <label for=\"id_description\">Description:</label>\n        <textarea name=\"description\" cols=\"40\" rows=\"10\" id=\"id_description\" class=\"form-control\"></textarea>\n        </div>\n        <button type=\"submit\" id=\"submit-new-list\" class=\"btn btn-primary\">Create List</button>\n    </form>\n    <a href=\"{% url 'home' %}\" id=\"return-home-from-list\" class=\"nav-link\">Return Home</a>\n  </div>\n</body>\n</html>"}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main function to execute Django commands\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    date = models.DateField()\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    description = models.TextField(blank=True)  # Optional description\n\n    def __str__(self):\n        return f'{self.amount} - {self.category} on {self.date.strftime(\"%Y-%m-%d\")}'\n\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Support request from {self.name} ({self.email})'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('signup/', views.SignupView.as_view(), name='signup'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('dashboard/', views.DashboardView.as_view(), name='dashboard'),\n    path('charts/', views.ChartsView.as_view(), name='charts'),\n    path('settings/', views.SettingsView.as_view(), name='settings'),\n    path('support/', views.SupportView.as_view(), name='support'),\n    path('download_report/', views.DownloadReportView.as_view(), name='download_report'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime, timedelta\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.views.generic import View\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\nfrom .forms import LoginForm, SignupForm, SupportRequestForm, TransactionForm  # Assuming forms.py created\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    login_url = '/login/'\n\nclass HomeView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\n# ... (Other view code implementing forms and logic)\n\n\nclass DownloadReportView(LoginRequiredView):\n    def post(self, request):\n        # Get the date range from the POST data\n\n        # ... (Add code to handle POST data for the date range)\n        response = HttpResponse(content_type='text/csv')\n        response['Content-Disposition'] = 'attachment; filename=\"report.csv\"'\n\n        writer = csv.writer(response)\n        # ...(Code to write data to the CSV)\n\n        return response\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import SupportRequest, Transaction\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\nclass LoginForm(forms.Form):\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput)\n\n\nclass SignupForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ('username', 'email',)\n\nclass SupportRequestForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = ['name', 'email', 'message']\n\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['amount', 'category', 'date', 'description']"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"charts-container\" class=\"charts-container\">\n      <canvas id=\"myChart\" class=\"transaction-chart\"></canvas>\n         </div>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n    <div id=\"dashboard-container\" class=\"dashboard\">\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n     <div id=\"home-container\" class=\"home\">\n    </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n   <div id=\"login-container\" class=\"login\">\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Login</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n <div id=\"settings-container\" class=\"settings\">\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n     <div id=\"signup-container\" class=\"signup\">\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Signup</button>\n        </form>\n     </div>\n</body>\n</html>\n"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n<div id=\"support-container\" class=\"support\">\n    <form method=\"post\" id=\"support-form\" class=\"support-form\">  \n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Submit</button>\n    </form>\n</div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \\\n            \"available on your PYTHONPATH environment variable? Did you \" \\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    class Meta:\n        model = ContactSales\n        fields = '__all__'  # Or specify the fields explicitly\n\nclass SupportForm(forms.ModelForm):\n    class Meta:\n        model = SupportRequest\n        fields = '__all__'  # Or specify the fields explicitly"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass ContactSales(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return self.name\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue = models.TextField()\n\n    def __str__(self):\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.urls import reverse_lazy\nfrom django.views.generic import TemplateView, FormView, CreateView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\nclass FeaturesPageView(TemplateView):\n    template_name = 'features.html'\n\nclass PricingPageView(CreateView):\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('pricing') # redirect to self on success\n\nclass SupportView(CreateView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('support') # redirect to self on success\n\nclass AboutUsPageView(TemplateView):\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body>\n    <div id=\"about-us-container\" class=\"about-us\">\n    \t<!-- Content of About Us Page: Display information about the team and company. -->\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body>\n    <div id=\"features-container\" class=\"features\">\n        <!-- Content of Features Page: List the features of AI Chatbot. -->\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body>\n    <div id=\"home-container\" class=\"home\">\n    \t<!-- Content of Home Page: Welcome message and navigation links. -->\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body>\n    <div id=\"pricing-container\" class=\"pricing\">\n        <!-- Content of Pricing Page: Display pricing plans -->\n        <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body>\n    <div id=\"support-container\" class=\"support\">\n        <!-- Content of Support Page: Support form, FAQ, and previous support requests. -->\n        <form id=\"support-form\" class=\"support-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'  # Replace with a strong, randomly generated key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    \"\"\"\n    User registration form.\n    \"\"\"\n    pass\n\nclass LoginForm(forms.Form):\n    \"\"\"\n    User login form.\n    \"\"\"\n    username = forms.CharField()\n    password = forms.CharField(widget=forms.PasswordInput)\n\nclass MealForm(forms.ModelForm):\n    \"\"\"\n    Form for logging meals with specific fields and widgets.\n    \"\"\"\n    class Meta:\n        model = Meal\n        fields = '__all__'\n\nclass ActivityForm(forms.ModelForm):\n    \"\"\"\n    Form for logging activities with specific fields and widgets.\n    \"\"\"\n    class Meta:\n        model = Activity\n        fields = '__all__'\n\nclass ProfileForm(forms.ModelForm):\n    \"\"\"\n    Form for updating user profile and preferences.\n    \"\"\"\n    class Meta:\n        model = UserProfile\n        exclude = ('user',)\n\nclass PreferencesForm(forms.ModelForm):\n    \"\"\"\n    Form for updating dietary preferences. (Placeholder - integrate with profile)\n    \"\"\"\n    class Meta:\n        model = UserProfile \n        fields = [] # Add preference fields here\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    instance.profile.save()\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='profile')\n    # Add other profile fields here (e.g., dietary preferences)\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    date = models.DateField()\n    # ... other fields as needed\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    calories_burned = models.IntegerField()\n    date = models.DateField()\n    # ... other fields as needed\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth.views import LogoutView\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', LogoutView.as_view(), name='logout'), # Add logout url\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_log, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_log, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\n\ndef get_weekly_calorie_chart(user):\n    \"\"\"\n    Generate weekly calorie chart data for a specified user.\n    \"\"\"\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n\n    return week_data\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nimport matplotlib.pyplot as plt\nimport io\nimport base64\nfrom datetime import timedelta, date\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Activity, UserProfile\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')  # Redirect to dashboard after signup\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            username = form.cleaned_data['username']\n            password = form.cleaned_data['password']\n            user = authenticate(request, username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')  # Redirect to dashboard after login\n            else:\n                messages.error(request, 'Invalid username or password.')\n    else:\n        form = LoginForm()\n    return render(request, 'login.html', {'form': form})\n\n@login_required\ndef dashboard(request):\n    return render(request, 'dashboard.html')\n\n@login_required\ndef meal_log(request):\n    meals = Meal.objects.filter(user=request.user)\n    return render(request, 'meal_log.html', {'meals': meals})\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm()\n    return render(request, 'add_meal.html', {'form': form})\n\n@login_required\ndef edit_meal(request, id):\n    meal = Meal.objects.get(id=id, user=request.user) # Ensure user owns the meal\n    if request.method == 'POST':\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            form.save()\n            return redirect('meal_log')\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'edit_meal.html', {'form': form, 'meal': meal})\n\n@login_required\ndef delete_meal(request, id):\n    meal = Meal.objects.get(id=id, user=request.user) # Ensure user owns the meal    \n    meal.delete()\n    return redirect('meal_log')\n\n@login_required\ndef activity_log(request):\n    activities = Activity.objects.filter(user=request.user)\n    return render(request, 'activity_log.html', {'activities': activities})\n\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False)\n            activity.user = request.user\n            activity.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm()\n    return render(request, 'add_activity.html', {'form': form})\n\n@login_required\ndef edit_activity(request, id):\n    activity = Activity.objects.get(id=id, user=request.user) # Ensure user owns the activity    \n    if request.method == 'POST':\n        form = ActivityForm(request.POST, instance=activity)\n        if form.is_valid():\n            form.save()\n            return redirect('activity_log')\n    else:\n        form = ActivityForm(instance=activity)    \n    return render(request, 'edit_activity.html', {'form': form, 'activity': activity})\n\n@login_required\ndef delete_activity(request, id):\n    activity = Activity.objects.get(id=id, user=request.user) # Ensure user owns the activity    \n    activity.delete()\n    return redirect('activity_log')\n\n@login_required\ndef settings(request):\n    return render(request, 'settings.html')\n\n@login_required\ndef meal_search(request):\n    # Implement meal search logic here\n    return render(request, 'meal_log.html')\n\n\n@login_required\ndef activity_search(request):\n    # Implement activity search logic here\n    return render(request, 'activity_log.html')\n\ndef tutorials(request):\n    return render(request, 'tutorials.html')\n\n@login_required\ndef update_profile(request):\n    profile = request.user.profile # Access user profile\n    if request.method == 'POST':\n        form = ProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Profile updated successfully!')\n            return redirect('settings')\n    else:\n        form = ProfileForm(instance=profile)\n    return render(request, 'update_profile.html', {'form': form})\n\n@login_required\ndef update_preferences(request):\n    profile = request.user.profile\n    if request.method == 'POST':\n        form = PreferencesForm(request.POST, instance=profile) # Use PreferencesForm\n        if form.is_valid():\n            form.save()\n            # ... handle preference update ...\n            return redirect('settings')  # Or another appropriate page\n    else:\n        form = PreferencesForm(instance=profile) # Use PreferencesForm\n    return render(request, 'update_preferences.html', {'form': form})\n\n\n\n@login_required\ndef weekly_calorie_chart(request):\n    chart_data = get_weekly_calorie_chart(request.user)\n    plt.figure(figsize=(10, 5))\n    plt.plot(chart_data['dates'], chart_data['intake'], label='Calorie Intake')\n    plt.plot(chart_data['dates'], chart_data['expenditure'], label='Calorie Expenditure')\n    plt.xlabel('Date')\n    plt.ylabel('Calories')\n    plt.title('Weekly Calorie Chart')\n    plt.legend()\n\n    buffer = io.BytesIO()\n    plt.savefig(buffer, format='png')\n    buffer.seek(0)\n    image_png = buffer.getvalue()\n    buffer.close()\n\n    graphic = base64.b64encode(image_png)\n    graphic = graphic.decode('utf-8')\n\n    return render(request, 'weekly_calorie_chart.html', {'graphic': graphic})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Activity Log</title>\n</head>\n<body>\n    <div id=\"activity-log-container\" class=\"container\">\n        <h1>Activity Log</h1>\n        <a id=\"add-activity-link\" class=\"btn btn-primary\" href=\"{% url 'add_activity' %}\">Add Activity</a>\n        <div id=\"activity-table-container\" class=\"table-responsive\"> \n        <table id=\"activity-table\" class=\"table\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Activity</th>\n                    <th>Calories Burned</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n               {% for activity in activities %}\n               <tr id=\"activity-row-{{ activity.id }}\">\n                   <td id=\"activity-date-{{ activity.id }}\">{{ activity.date }}</td>\n                   <td id=\"activity-name-{{ activity.id }}\">{{ activity.name }}</td>\n                   <td id=\"activity-calories-{{ activity.id }}\">{{ activity.calories_burned }}</td>\n                   <td id=\"activity-actions-{{ activity.id }}\">\n                       <a id=\"edit-activity-{{ activity.id }}\" class=\"btn btn-sm btn-secondary\" href=\"{% url 'edit_activity' activity.id %}\">Edit</a>\n                       <a id=\"delete-activity-{{ activity.id }}\" class=\"btn btn-sm btn-danger\" href=\"{% url 'delete_activity' activity.id %}\">Delete</a> \n                   </td>\n               </tr>\n               {% endfor %}\n           </tbody>\n        </table>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Activity - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"add-activity-container\" class=\"container\">\n    <h1>Add Activity</h1>\n    <form id=\"add-activity-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-activity\" type=\"submit\">Add Activity</button>\n    </form>\n    </div>\n</body>\n</html>\n"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Meal - Calorie Tracker</title>\n</head>\n<body>\n  <div id=\"add-meal-container\" class=\"container\">      \n    <h1>Add Meal</h1>\n    <form id=\"add-meal-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-meal\" type=\"submit\">Add Meal</button>\n    </form>\n  </div>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Dashboard</title>\n</head>\n<body>\n    <div id=\"dashboard-container\" class=\"container\">\n        <h1>Welcome to Your Dashboard</h1>\n        <!--- Add dashboard content here -->\n    </div>\n</body>\n</html>\n"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Activity - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"edit-activity-container\" class=\"container\"> \n    <h1>Edit Activity</h1>\n    <form id=\"edit-activity-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-activity\" type=\"submit\">Save Changes</button>\n    </form>\n    </div>\n</body>\n</html>\n"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Meal - Calorie Tracker</title>\n</head>\n<body>\n  <div id=\"edit-meal-container\" class=\"container\">      \n    <h1>Edit Meal</h1>\n    <form id=\"edit-meal-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-edit-meal\" type=\"submit\">Save Changes</button>\n    </form>\n  </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1>Welcome to the Calorie Tracker!</h1>\n        {% if user.is_authenticated %}\n            <p>Hello, {{ user.username }}! <a href=\"{% url 'logout' %}\">Logout</a></p>\n            <a id=\"dashboard-link\" href=\"{% url 'dashboard' %}\">Go to Dashboard</a>\n        {% else %}\n            <a id=\"signup-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n            <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"login-container\" class=\"container\"> \n        <h1>Login</h1>\n        <form id=\"login-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submit-login\" type=\"submit\">Login</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Meal Log</title>\n</head>\n<body>\n    <div id=\"meal-log-container\" class=\"container\">\n    <h1>Meal Log</h1>\n      <a id=\"add-meal-link\" class=\"btn btn-primary\" href=\"{% url 'add_meal' %}\">Add Meal</a>\n      <div id=\"meal-table-container\" class=\"table-responsive\">\n          <table id=\"meal-table\" class=\"table\">\n             <thead>\n                 <tr>\n                     <th>Date</th>\n                     <th>Meal</th>\n                     <th>Calories</th>\n                     <th>Actions</th>\n                 </tr>\n             </thead>\n             <tbody>\n                {% for meal in meals %}\n                <tr id=\"meal-row-{{ meal.id }}\">\n                    <td id=\"meal-date-{{ meal.id }}\">{{ meal.date }}</td>\n                    <td id=\"meal-name-{{ meal.id }}\">{{ meal.name }}</td>\n                    <td id=\"meal-calories-{{ meal.id }}\">{{ meal.calories }}</td>\n                    <td id=\"meal-actions-{{ meal.id }}\">\n                        <a id=\"edit-meal-{{ meal.id }}\" class=\"btn btn-sm btn-secondary\" href=\"{% url 'edit_meal' meal.id %}\">Edit</a>\n                        <a id=\"delete-meal-{{ meal.id }}\" class=\"btn btn-sm btn-danger\" href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n                    </td>\n                </tr>\n                {% endfor %}\n            </tbody>\n         </table>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Settings</title>\n</head>\n<body>\n    <div id=\"settings-container\" class=\"container\">\n    <h1>Settings</h1>\n\n    <div id=\"profile-update-section\">\n      <h2>Update Profile</h2>\n      <a id=\"update-profile-link\" class=\"btn btn-primary\" href=\"{% url 'update_profile' %}\">Update Profile</a>\n    </div>\n\n    <div id=\"preferences-update-section\">\n        <h2>Update Preferences</h2>\n        <a id=\"update-preferences-link\" class=\"btn btn-primary\" href=\"{% url 'update_preferences' %}\">Update Preferences</a>\n    </div>\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"signup-container\" class=\"container\">\n    <h1>Sign Up</h1>\n    <form id=\"signup-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-signup\" type=\"submit\">Sign Up</button>\n    </form>\n    </div>\n</body>\n</html>\n"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Tutorials - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"tutorials-container\" class=\"container\">\n    <h1>Tutorials/Help</h1>\n    </div>\n</body>\n</html>\n"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Preferences - Calorie Tracker</title>\n</head>\n<body>\n    <div id=\"update-pref-container\" class=\"container\"> \n        <h1>Update Preferences</h1>\n        <form id=\"update-pref-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submit-update-pref\" type=\"submit\">Update Preferences</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Profile - Calorie Tracker</title>\n</head>\n<body>\n  <div id=\"update-profile-container\" class=\"container\">      \n    <h1>Update Profile</h1>\n    <form id=\"update-profile-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-update-profile\" type=\"submit\">Update Profile</button>\n    </form>\n  </div>\n</body>\n</html>\n"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Weekly Calorie Chart - Calorie Tracker</title>\n</head>\n<body>\n  <div id=\"weekly-chart-container\" class=\"container\">      \n    <h1>Weekly Calorie Chart</h1>\n    <img id=\"calorie-chart-image\" src=\"data:image/png;base64,{{ graphic }}\" alt=\"Weekly Calorie Chart\">\n  </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/' # Ensure this setting is present\n\nLOGIN_REDIRECT_URL = 'dashboard' # Redirect after login\nLOGOUT_REDIRECT_URL = 'home' # Redirect after logout"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    json_file = forms.FileField(label='Upload JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    name = models.CharField(max_length=255)\n    description = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    status = models.CharField(max_length=50)\n    comments = models.TextField(blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Review for {self.project.name} - {self.status}'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\n\n\ndef review_view(request, project_id):\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        # Process review submission (Implementation needed)\n        return HttpResponseRedirect('/')  # Redirect after processing\n    return render(request, 'review.html', {'project': project})\n\n\ndef home_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            # handle_json_upload(form.cleaned_data['json_file'])\n            # messages.success(request, 'JSON file uploaded successfully!')\n            pass  # Implement file handling\n    else:\n        form = JSONUploadForm()\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'form': form, 'projects': projects})\n\n\ndef about_view(request):\n    return render(request, 'about.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-container\">\n    <h1>About This Site</h1>\n    <p>This is a simple project review site.</p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n      <nav id=\"main-nav\" class=\"main-nav\">\n          <ul>\n            <li><a href=\"{% url 'home' %}\">Home</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n          </ul>\n      </nav>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n      {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1>Project Listings</h1>\n    <ul id=\"project-list\" class=\"project-list\">\n        {% for project in projects %}\n            <li><a href=\"{% url 'review' project.id %}\">{{ project.name }}</a></li>\n        {% endfor %}\n    </ul>\n\n    <h2>Upload Project JSON</h2>\n    <form id=\"upload-form\" class=\"upload-form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Upload</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"review-container\">\n  <h2>Review: {{ project.name }}</h2>\n    <form id=\"review-form\" class=\"review-form\" method=\"post\">\n      {% csrf_token %}\n      <button type=\"submit\">Submit Review</button>\n  </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "/* Basic styling for demonstration */\nbody {\n    font-family: sans-serif;\n}\n\n.home-container, .about-container, .review-container {\n  padding: 20px;\n}\n"}], "12": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \" \\\n            \"available on your PYTHONPATH environment variable? Did you \" \\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'\n\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim, Budget\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('user', 'category', 'amount', 'status', 'created_at')\n    list_filter = ('status', 'category')\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('category', 'limit')"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Claim\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n\nclass SignUpForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ['username', 'email']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    STATUS_CHOICES = (\n        ('pending', 'Pending'),\n        ('approved', 'Approved'),\n        ('rejected', 'Rejected'),\n    )\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\nclass Budget(models.Model):\n    CATEGORY_CHOICES = (\n        ('travel', 'Travel Expenses'),\n        ('labor', 'Labor Expenses'),\n        ('management', 'Management Expenses'),\n        ('equipment', 'Equipment Expenses'),\n    )\n    category = models.CharField(max_length=20, choices=CATEGORY_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim_status/', views.claim_status, name='claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('delete_claim/<int:claim_id>/', views.delete_claim, name='delete_claim'),\n    path('analysis/', views.analysis_view, name='analysis'),\n    path('logout/', views.logout_view, name='logout'),\n]"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "from .models import Budget\n\ndef check_budget_limit(category, amount):\n    try:\n        budget = Budget.objects.get(category=category)\n        return budget.limit >= amount\n    except Budget.DoesNotExist:\n        return False"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.db.models import Sum\nfrom django.http import HttpResponseRedirect\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom django.contrib.auth import login, authenticate, logout\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, SignUpForm\nfrom .utils import check_budget_limit\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = SignUpForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = SignUpForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('home')\n        else:\n            messages.error(request, 'Invalid username or password.')\n    return render(request, 'login.html')\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            if check_budget_limit(claim.category, claim.amount):\n                claim.save()\n                messages.success(request, 'Claim submitted successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n@login_required\ndef claim_status(request):\n    claims = Claim.objects.filter(user=request.user)\n    return render(request, 'claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    if claim.status != 'pending':\n        messages.error(request, 'Only pending claims can be edited.')\n        return redirect('claim_status')\n\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            updated_claim = form.save(commit=False)\n            if check_budget_limit(updated_claim.category, updated_claim.amount):\n                updated_claim.save()\n                messages.success(request, 'Claim updated successfully.')\n                return redirect('claim_status')\n            else:\n                messages.error(request, 'Budget limit exceeded for this category.')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'claim_edit.html', {'form': form, 'claim': claim})\n\n@login_required\ndef delete_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, user=request.user)\n    claim.delete()\n    messages.success(request, 'Claim deleted successfully.')\n    return redirect('claim_status')\n\n@login_required\ndef analysis_view(request):\n    total_approved_claims = Claim.objects.filter(status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n    budget_data = []\n    for choice in Budget.CATEGORY_CHOICES:\n        category = choice[0]\n        budget = Budget.objects.get(category=category)\n        spent = Claim.objects.filter(category=category, status='approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        budget_data.append({'category': category, 'limit': budget.limit, 'spent': spent})\n\n    return render(request, 'analysis.html', {'total_approved_claims': total_approved_claims, 'budget_data': budget_data})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.5 on 2023-09-28 17:06\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('limit', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('category', models.CharField(choices=[('travel', 'Travel Expenses'), ('labor', 'Labor Expenses'), ('management', 'Management Expenses'), ('equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField()),\n                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),\n                ('rejection_reason', models.TextField(blank=True, null=True)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "{% extends \"base.html\" %}\n{% block title %}Analysis Report{% endblock %}\n{% block content %}\n<div id=\"analysis-report\" class=\"report-container\">\n    <h2>Analysis Report</h2>\n    <div id=\"total-approved-claims\" class=\"report-section\">\n        <h3>Total Approved Claims</h3>\n        <p id=\"total-approved-amount\" class=\"report-value\">{{ total_approved_claims }}</p>\n    </div>\n    <div id=\"budget-utilization\" class=\"report-section\">\n        <h3>Budget Utilization</h3>\n        <table>\n            <thead>\n                <tr>\n                    <th>Category</th>\n                    <th>Limit</th>\n                    <th>Spent</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for budget in budget_data %}\n                <tr>\n                    <td id=\"category-{{ budget.category }}\" class=\"category-cell\">{{ budget.category }}</td>\n                    <td id=\"limit-{{ budget.category }}\" class=\"limit-cell\">{{ budget.limit }}</td>\n                    <td id=\"spent-{{ budget.category }}\" class=\"spent-cell\">{{ budget.spent }}</td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li id=\"nav-home\" class=\"nav-item\"><a href=\"{% url 'home' %}\">Home</a></li>\n                {% if user.is_authenticated %}\n                <li id=\"nav-submit-claim\" class=\"nav-item\"><a href=\"{% url 'submit_claim' %}\">Submit Claim</a></li>\n                <li id=\"nav-claim-status\" class=\"nav-item\"><a href=\"{% url 'claim_status' %}\">Claim Status</a></li>\n                <li id=\"nav-analysis\" class=\"nav-item\"><a href=\"{% url 'analysis' %}\">Analysis</a></li>\n                <li id=\"nav-logout\" class=\"nav-item\"><a href=\"{% url 'logout' %}\">Logout</a></li>\n                {% else %}\n                <li id=\"nav-login\" class=\"nav-item\"><a href=\"{% url 'login' %}\">Login</a></li>\n                <li id=\"nav-signup\" class=\"nav-item\"><a href=\"{% url 'signup' %}\">Signup</a></li>\n                {% endif %}\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n        {% if messages %}\n            <div id=\"message-container\" class=\"message-container\">\n                {% for message in messages %}\n                    <div id=\"message-{{ message.tags }}\" class=\"message message-{{ message.tags }}\">\n                        {{ message }}\n                    </div>\n                {% endfor %}\n            </div>\n        {% endif %}\n        {% block content %}{% endblock %}\n    </main>\n\n    <footer id=\"main-footer\" class=\"main-footer\">\n        <!-- Footer content here -->\n    </footer>\n</body>\n</html>"}, {"file": "claim_edit.html", "path": "example_app/templates/claim_edit.html", "code": "{% extends \"base.html\" %}\n{% block title %}Edit Claim{% endblock %}\n{% block content %}\n<div id=\"edit-claim-form-container\" class=\"form-container\">\n    <h2 id=\"edit-claim-title\">Edit Claim</h2>\n    <form id=\"edit-claim-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"{{ form.category.id_for_label }}\">Category:</label><br>\n            {{ form.category }}\n        </div>\n        <div class=\"form-group\">\n            <label for=\"{{ form.amount.id_for_label }}\">Amount:</label><br>\n            {{ form.amount }}\n        </div>\n        <div class=\"form-group\">\n            <label for=\"{{ form.description.id_for_label }}\">Description:</label><br>\n            {{ form.description }}\n        </div>\n        <button id=\"submit-edit-claim\" type=\"submit\">Update Claim</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "claim_status.html", "path": "example_app/templates/claim_status.html", "code": "{% extends \"base.html\" %}\n{% block title %}Claim Status{% endblock %}\n{% block content %}\n<div id=\"claim-status-container\" class=\"status-container\">\n    <h2 id=\"claim-status-title\">Claim Status</h2>\n    <table id=\"claim-status-table\" class=\"status-table\">\n        <thead>\n            <tr id=\"claim-status-header-row\">\n                <th id=\"claim-id-header\">ID</th>\n                <th id=\"claim-category-header\">Category</th>\n                <th id=\"claim-amount-header\">Amount</th>\n                <th id=\"claim-description-header\">Description</th>\n                <th id=\"claim-status-header\">Status</th>\n                <th id=\"claim-actions-header\">Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for claim in claims %}\n            <tr id=\"claim-row-{{ claim.id }}\" class=\"claim-row\">\n                <td id=\"claim-id-{{ claim.id }}\">{{ claim.id }}</td>\n                <td id=\"claim-category-{{ claim.id }}\">{{ claim.category }}</td>\n                <td id=\"claim-amount-{{ claim.id }}\">{{ claim.amount }}</td>\n                <td id=\"claim-description-{{ claim.id }}\">{{ claim.description }}</td>\n                <td id=\"claim-status-{{ claim.id }}\">{{ claim.status }}</td>\n                <td id=\"claim-actions-{{ claim.id }}\">\n                    {% if claim.status == 'pending' %}\n                        <a href=\"{% url 'edit_claim' claim.id %}\">Edit</a>\n                        <a href=\"{% url 'delete_claim' claim.id %}\">Delete</a>\n                    {% endif %}\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "{% extends \"base.html\" %}\n{% block title %}Home{% endblock %}\n{% block content %}\n<div id=\"home-container\" class=\"home-container\">\n    <h1 id=\"home-title\">Welcome to the Accounting and Cashier Management System</h1>\n    {% if user.is_authenticated %}\n    <p id=\"home-greeting\">Hello, {{ user.username }}!</p>\n    {% else %}\n    <div id=\"home-auth-links\" class=\"auth-links-container\">\n        <a id=\"home-login-link\" class=\"auth-link\" href=\"{% url 'login' %}\">Login</a>\n        <a id=\"home-signup-link\" class=\"auth-link\" href=\"{% url 'signup' %}\">Signup</a>\n    </div>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "{% extends \"base.html\" %}\n{% block title %}Login{% endblock %}\n{% block content %}\n<div id=\"login-form-container\" class=\"form-container\">\n    <h2 id=\"login-title\">Login</h2>\n    <form id=\"login-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"username\">Username:</label><br>\n            <input type=\"text\" id=\"username\" name=\"username\" required><br>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"password\">Password:</label><br>\n            <input type=\"password\" id=\"password\" name=\"password\" required><br><br>\n        </div>\n        <input type=\"submit\" id=\"login-submit\" value=\"Login\">\n    </form>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "{% extends \"base.html\" %}\n{% block title %}Signup{% endblock %}\n{% block content %}\n<div id=\"signup-form-container\" class=\"form-container\">\n    <h2 id=\"signup-title\">Sign Up</h2>\n    <form id=\"signup-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"signup-submit\" type=\"submit\">Sign Up</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "example_app/templates/submit_claim.html", "code": "{% extends \"base.html\" %}\n{% block title %}Submit Claim{% endblock %}\n{% block content %}\n<div id=\"submit-claim-form-container\" class=\"form-container\">\n    <h2 id=\"submit-claim-title\">Submit Claim</h2>\n    <form id=\"submit-claim-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"submit-claim-button\" type=\"submit\">Submit</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "styles.css", "path": "static/css/styles.css", "code": "/* Basic styling for the entire app */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.form-container {\n    width: 50%;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"],\ntextarea,\nselect {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\nbutton[type=\"submit\"] {\n    background-color: #4CAF50; /* Green */\n    border: none;\n    color: white;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n    border-radius: 4px;\n}\n\n.message-container {\n    width: 50%;\n    margin: 10px auto;\n    padding: 10px;\n    border-radius: 5px;\n}\n\n.message {\n    padding: 10px;\n    margin-bottom: 10px;\n    border-radius: 4px;\n}\n\n.message-success {\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n    color: #155724;\n}\n\n.message-error {\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n    color: #721c24;\n}\n\n/* Styling for claim status table */\n.status-container {\n    width: 80%;\n    margin: 20px auto;\n}\n\n.status-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.status-table th, .status-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n}\n\n.status-table tr:nth-child(even) {\n    background-color: #f2f2f2;\n}\n\n/* Styling for analysis report */\n.report-container {\n    width: 80%;\n    margin: 20px auto;\n}\n\n.report-section {\n    margin-bottom: 20px;\n}\n\n.report-value {\n    font-size: 20px;\n    font-weight: bold;\n}\n"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\nh1 {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"hello-world-body\" class=\"main-body\">\n    <h1 id=\"hello-world-heading\" class=\"page-title\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'  # Replace with a strong secret key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    # ... (password validators)\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='transactions_user')\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.amount} - {self.description}'\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='support_request_user')\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.name} - {self.email}'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Category, Transaction, SupportRequest\n\nadmin.site.register(Category)\nadmin.site.register(Transaction)\nadmin.site.register(SupportRequest)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'example_app'\n"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2024-11-13 19:27\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh; /* Ensure content takes up at least full viewport height */\n    background-color: #f0f8ff;\n}\n\n.container {\n    text-align: center; /* Center content within the container */\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n\n/* Style for navigation links */\n.nav-links {\n    margin-top: 20px;\n}\n\n.nav-links a {\n    display: inline-block; /* Make links sit next to each other */\n    padding: 10px 20px;\n    margin: 0 10px;\n    background-color: #4CAF50; /* Green background */\n    color: white;\n    text-decoration: none;\n    border-radius: 5px;\n    transition: background-color 0.3s ease; /* Smooth background transition */\n}\n\n.nav-links a:hover {\n    background-color: #45a049; /* Darker green on hover */\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"helloworld-container\">\n        <h1 id=\"helloworld-title\">Hello, World!</h1>\n        <div class=\"nav-links\" id=\"helloworld-nav\">\n            <a href=\"{% url 'home' %}\" id=\"home-link\">Home</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 id=\"home-title\">Welcome Home!</h1>\n        <div class=\"nav-links\" id=\"home-nav\">\n            <a href=\"{% url 'helloworld' %}\" id=\"helloworld-link\">Hello World</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = (os.path.join(BASE_DIR, 'example_app/static'),)\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "# coding=utf-8\nimport os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        print(\"Welcome to BashCrawl!\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        print(\"BashCrawl is a text-based adventure game.\")\n        print(\"Navigate using commands like 'cd', 'ls', and 'inventory'.\")\n\n    def print_game_help(self):\n        print(\"Available commands: ls, cd [directory], inventory, help, quit\")\n\n    def list_contents(self):\n        items_here = self.items.get(self.current_dir, [])\n        print(\" \".join(self.directory_structure[self.current_dir] + items_here))\n\n    def change_directory(self, target_dir):\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n            print(f\"Current directory: {self.current_dir}\")\n        else:\n            print(\"Invalid directory.\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"Inventory:\")\n            for item in self.inventory:\n                print(f\"- {item}\")\n        else:\n            print(\"Your inventory is empty.\")\n\n\n    def play(self):\n        while True:\n            command = input(f\"{self.current_dir} $ \").split()\n            if not command:\n                continue\n\n            action = command[0]\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    self.change_directory(ROOT_DIR)  # Go to root if no argument\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                break\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\")\n\n            # Item pickup logic\n            if self.current_dir in self.items and self.items[self.current_dir] not in self.inventory:\n                item = self.items[self.current_dir]\n                self.inventory.append(item)\n                print(f\"You picked up the {item}!\")\n                del self.items[self.current_dir] # Remove the item after pickup\n\n    def main_menu(self):\n        while True:\n            self.print_main_menu()\n            choice = input(\"> \")\n            if choice == \"1\":\n                self.play()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                break\n            else:\n                print(\"Invalid choice.\")\n\ndef main():\n    game = BashCrawl()\n    game.main_menu()\n\nif __name__ == \"__main__\":\n    main()\n"}], "19": [{"file": "19-stdanswer.py", "path": "19-stdanswer.py", "code": "# coding=utf-8\nimport os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"Check if a file exists at the given file path.\"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"Error: File '{file_path}' not found.\")\n\n\ndef read_dataset(file_path):\n    \"\"\"Read the dataset from a CSV file and return a DataFrame.\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except pd.errors.EmptyDataError:\n        raise ValueError(\"Error: Input CSV file is empty.\")\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"Validate that the dataset contains all required columns.\"\"\"\n    missing_cols = set(required_columns) - set(df.columns)\n    if missing_cols:\n        raise KeyError(f\"Error: The following columns are missing in the dataset: {', '.join(missing_cols)}\")\n\n\ndef preprocess_dataset(df):\n    \"\"\"Preprocess the dataset, including cleaning and formatting dates.\"\"\"\n    try:\n        df['Date of death'] = pd.to_datetime(df['Date of death'], format='%Y-%m-%d')\n    except ValueError:\n        raise ValueError(\"Error: Invalid date format in 'Date of death' column. Please use YYYY-MM-DD.\")\n    df['Week'] = df['Date of death'].dt.isocalendar().week\n    return df\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"Plot the weekly deaths and save as a histogram image file.\"\"\"\n    plt.figure(figsize=(10, 6))\n    plt.bar(weekly_deaths.index, weekly_deaths.values)\n    plt.xlabel('Week Number')\n    plt.ylabel('Number of Deaths')\n    plt.title('Weekly Deaths Histogram')\n    plt.xticks(weekly_deaths.index)\n    plt.savefig(output_file)\n\n\ndef main():\n    \"\"\"Main execution function to process the dataset and plot the histogram.\"\"\"\n    try:\n        check_file_existence(input_file)\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death\n2024-01-01\n2024-01-08\n2024-01-15\n2024-01-15\n2024-01-22\n2024-01-29\n2024-02-05\n2024-02-12\n2024-02-19\n2024-02-19\n2024-02-26\n2024-03-04\n2024-03-11\n2024-03-11\n"}], "20": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\\\n            \"available on your PYTHONPATH environment variable? Did you \"\\\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom django.utils.html import format_html\n\nfrom .models import BlogPost, Category, Comment\n\n@admin.register(BlogPost)\nclass BlogPostAdmin(admin.ModelAdmin):\n    list_display = ('title', 'category', 'operations')\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/blogpost/{}/change/\" class=\"edit-link\">Edit</a> '\\\n            '<a href=\"/post/{}/delete/\" class=\"delete-link\">Delete</a>',\n            obj.id, obj.id\n        )\n\n    operations.short_description = 'Operations'\n    operations.allow_tags = True\n\n@admin.register(Category)\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ('name', 'operations')\n\n    def operations(self, obj):\n        return format_html(\n            '<a href=\"/admin/example_app/category/{}/change/\" class=\"edit-link\">Edit</a> '\\\n            '<a href=\"/category/{}/delete/\" class=\"delete-link\">Delete</a>',\n            obj.id, obj.id\n        )\n\n    operations.short_description = 'Operations'\n    operations.allow_tags = True\n\n@admin.register(Comment)\nclass CommentAdmin(admin.ModelAdmin):\n    pass\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'placeholder': 'Your Name', 'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'placeholder': 'Your Comment', 'class': 'form-control'}),\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'class': 'form-control'}),\n            'category': forms.Select(attrs={'class': 'form-control'}),\n        }\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    class Meta:\n        verbose_name_plural = 'Categories'\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    author = models.CharField(max_length=255)\n    content = models.TextField()\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n\n    def __str__(self):\n        return f'{self.author} on {self.post.title}'\n\nclass ContactUs(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        return f'Message from {self.name}'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n    path('category/', views.category, name='category'),\n    path('category/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/<int:pk>/delete/', views.category_delete, name='category_delete'),\n    path('archive/', views.archive, name='archive'),\n    path('about/', views.about, name='about'),\n    path('search/', views.search, name='search'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "def filter_by_date(posts, year=None, month=None):\n    if year:\n        posts = posts.filter(created_at__year=year)\n    if month:\n        posts = posts.filter(created_at__month=month)\n    return posts\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.db.models.functions import TruncMonth\nfrom django.http import Http404, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .models import BlogPost, Category, Comment, ContactUs\nfrom .forms import CommentForm, BlogPostForm\n\n\ndef home(request):\n    posts = BlogPost.objects.all()\n    if request.method == 'POST':\n        search_query = request.POST.get('search', '')\n        posts = posts.filter(title__icontains=search_query)\n    return render(request, 'blog/home.html', {'posts': posts})\n\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all()\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(False)\n            comment.post = post\n            comment.save()\n            return redirect('post_detail', pk=pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\n\ndef category(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category.html', {'categories': categories})\n\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n\ndef archive(request):\n    posts = BlogPost.objects.annotate(month=TruncMonth('created_at')).order_by('-created_at')\n    archive_data = posts.values('month').annotate(count=Count('id'))\n    return render(request, 'blog/archive.html', {'archive_data': archive_data, 'posts': posts})\n\n\ndef about(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        ContactUs.objects.create(name=name, email=email, message=message)\n        messages.success(request, 'Your message has been sent successfully!')\n        return redirect('about')\n    return render(request, 'blog/about.html')\n\n\ndef search(request):\n    query = request.GET.get('q')\n    posts = BlogPost.objects.filter(title__icontains=query) if query else []\n    return render(request, 'blog/home.html', {'posts': posts, 'query': query})\n\n@login_required\ndef post_delete(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    post.delete()\n    return redirect('/admin/example_app/blogpost/')  # Redirect to admin blog post list\n\n@login_required\ndef category_delete(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    return redirect('/admin/example_app/category/')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "/* Add your CSS styles here */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    line-height: 1.6;\n    background-color: #f4f4f4;\n}\n\n.container {\n    max-width: 900px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\nheader {\n    background-color: #333;\n    color: white;\n    padding: 10px 0;\n    text-align: center;\n}\n\nnav a {\n    color: white;\n    text-decoration: none;\n    margin: 0 15px;\n}\n\nmain {\n    background-color: white;\n    margin-top: 20px;\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\nfooter {\n    text-align: center;\n    margin-top: 20px;\n    padding: 10px 0;\n    background-color: #333;\n    color: white;\n}\n"}, {"file": "about.html", "path": "example_app/templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"about-content\">\n    <h1>About Me</h1>\n    <p>This is a simple blog built with Django.</p>\n    <form method=\"post\" id=\"contact-form\" class=\"contact-form\">\n        {% csrf_token %}\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" class=\"form-control\" required><br>\n        <label for=\"email\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" class=\"form-control\" required><br>\n        <label for=\"message\">Message:</label>\n        <textarea id=\"message\" name=\"message\" class=\"form-control\" required></textarea><br>\n        <button type=\"submit\">Submit</button>\n    </form>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "archive.html", "path": "example_app/templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"archive-container\" class=\"archive-content\">\n    <h1>Archive</h1>\n    <ul id=\"archive-list\" class=\"archive-list\">\n        {% for item in archive_data %}\n        <li>\n            <a href=\"?year={{ item.month.year }}&month={{ item.month.month }}\">{{ item.month|date:\"F Y\" }} ({{ item.count }})</a>\n        </li>\n        {% endfor %}\n    </ul>\n\n    {% if posts %}\n    <div id=\"post-list\" class=\"post-list\">\n        <h2>Posts</h2>\n        {% for post in posts %}\n        <div id=\"post-{{ post.id }}\" class=\"post-item\">\n            <h3><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h3>\n            <p>{{ post.created_at|date:\"F d, Y\" }}</p>\n        </div>\n        {% endfor %}\n    </div>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "example_app/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}{% endblock %}</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n<div class=\"container\">\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n            <a href=\"{% url 'home' %}\">Home</a>\n            <a href=\"{% url 'category' %}\">Categories</a>\n            <a href=\"{% url 'archive' %}\">Archive</a>\n            <a href=\"{% url 'about' %}\">About</a>\n        </nav>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}{% endblock %}\n    </main>\n    <footer id=\"main-footer\" class=\"main-footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</div>\n</body>\n</html>\n"}, {"file": "category.html", "path": "example_app/templates/blog/category.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-container\" class=\"category-content\">\n    <h1>Categories</h1>\n    <ul id=\"category-list\" class=\"category-list\">\n        {% for category in categories %}\n        <li id=\"category-{{ category.id }}\" class=\"category-item\">\n            <a href=\"{% url 'category_detail' category.pk %}\">{{ category.name }}</a>\n        </li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "category_detail.html", "path": "example_app/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"category-detail-container\" class=\"category-detail-content\">\n  <h1>{{ category.name }}</h1>\n\n  <div id=\"post-list\" class=\"post-list\">\n    {% for post in posts %}\n      <div id=\"post-{{ post.id }}\" class=\"post-item\">\n        <h3><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h3>\n        <p>{{ post.content|truncatewords:50 }}</p>\n      </div>\n    {% empty %}\n      <p>No posts in this category yet.</p>\n    {% endfor %}\n  </div>\n</div>\n{% endblock %}"}, {"file": "home.html", "path": "example_app/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"home-content\">\n    <form method=\"post\" id=\"search-form\" class=\"search-form\">\n        {% csrf_token %}\n        <input type=\"text\" name=\"search\" id=\"search-input\" class=\"search-input\" placeholder=\"Search...\">\n        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n    </form>\n    <div id=\"post-list\" class=\"post-list\">\n    {% for post in posts %}\n        <div id=\"post-{{ post.id }}\" class=\"post-item\">\n            <h3><a href=\"{% url 'post_detail' post.pk %}\">{{ post.title }}</a></h3>\n            <p class=\"post-meta\">Category: {{ post.category.name }}</p>\n            <p>{{ post.content|truncatewords:50 }}</p>\n        </div>\n    {% empty %}\n        <p>No posts available.</p>\n    {% endfor %}\n    </div>\n</div>\n{% endblock %}"}, {"file": "post_detail.html", "path": "example_app/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n{% block content %}\n<div id=\"post-detail-container\" class=\"post-detail-content\">\n    <h1 id=\"post-title\" class=\"post-title\">{{ post.title }}</h1>\n    <p class=\"post-meta\">Category: {{ post.category.name }}</p>\n    <div id=\"post-content\" class=\"post-content\">{{ post.content }}</div>\n\n    <h2 id=\"comment-section-title\" class=\"comment-section-title\">Comments</h2>\n    <div id=\"comment-list\" class=\"comment-list\">\n        {% for comment in comments %}\n        <div id=\"comment-{{ comment.id }}\" class=\"comment-item\">\n            <p class=\"comment-author\">{{ comment.author }}</p>\n            <p class=\"comment-content\">{{ comment.content }}</p>\n        </div>\n        {% empty %}\n        <p id=\"no-comments\" class=\"no-comments\">No comments yet.</p>\n        {% endfor %}\n    </div>\n\n    <h2 id=\"add-comment-title\" class=\"add-comment-title\">Add Comment</h2>\n    <form method=\"post\" id=\"comment-form\" class=\"comment-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-comment\" class=\"submit-comment\">Submit</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nLOGIN_URL = '/admin/login/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}]}