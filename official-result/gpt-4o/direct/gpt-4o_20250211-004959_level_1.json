{"1": [{"file": "manage.py", "path": "bmi_calculator/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "bmi_calculator/bmi_calculator/__init__.py", "code": ""}, {"file": "settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),\n]\n"}, {"file": "wsgi.py", "path": "bmi_calculator/bmi_calculator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "bmi_calculator/calculator/__init__.py", "code": ""}, {"file": "admin.py", "path": "bmi_calculator/calculator/admin.py", "code": "# Register your models here."}, {"file": "apps.py", "path": "bmi_calculator/calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calculator'\n"}, {"file": "models.py", "path": "bmi_calculator/calculator/models.py", "code": "# Create your models here."}, {"file": "tests.py", "path": "bmi_calculator/calculator/tests.py", "code": "# Create your tests here."}, {"file": "views.py", "path": "bmi_calculator/calculator/views.py", "code": "from django.shortcuts import render\n\n\ndef calculate_bmi(request):\n    bmi = None\n    if request.method == 'POST':\n        weight = float(request.POST.get('weight'))\n        height = float(request.POST.get('height'))\n        if height > 0:\n            bmi = round(weight / (height * height), 2)\n    return render(request, 'calculator/calculate_bmi.html', {'bmi': bmi})\n"}, {"file": "urls.py", "path": "bmi_calculator/calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calculate_bmi, name='calculate_bmi'),\n]\n"}, {"file": "calculate_bmi.html", "path": "bmi_calculator/calculator/templates/calculator/calculate_bmi.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1 id=\"title\" class=\"title\">BMI Calculator</h1>\n    <form id=\"bmiForm\" class=\"bmi-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"input\">\n            <label for=\"weight\" id=\"weightLabel\">Weight (kg):</label>\n            <input type=\"number\" id=\"weight\" class=\"weight\" name=\"weight\" required step=\"any\">\n        </div>\n        <div class=\"input\">\n            <label for=\"height\" id=\"heightLabel\">Height (m):</label>\n            <input type=\"number\" id=\"height\" class=\"height\" name=\"height\" required step=\"any\">\n        </div>\n        <button type=\"submit\" id=\"calculateButton\" class=\"calculate-button\">Calculate</button>\n    </form>\n    {% if bmi is not None %}\n        <h2 id=\"result\" class=\"result\">Your BMI is: {{ bmi }}</h2>\n    {% endif %}\n</body>\n</html>\n"}], "2": [{"file": "settings.py", "path": "currency_converter_project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "currency_converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "currency_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter_project/__init__.py", "code": ""}, {"file": "apps.py", "path": "converter_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter_app'\n"}, {"file": "urls.py", "path": "converter_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n"}, {"file": "views.py", "path": "converter_app/views.py", "code": "from django.shortcuts import render\n\n# Simulated currency rates\ndata = {\n    'usd_to_eur': 0.85,\n    'eur_to_usd': 1.18,\n}\n\ndef home(request):\n    if request.method == 'POST':\n        amount = float(request.POST.get('amount', 0))\n        from_currency = request.POST.get('from_currency')\n        to_currency = request.POST.get('to_currency')\n        rate_key = f'{from_currency}_to_{to_currency}'\n        rate = data.get(rate_key, 1)\n        converted_amount = amount * rate\n        context = {\n            'amount': amount,\n            'from_currency': from_currency,\n            'to_currency': to_currency,\n            'converted_amount': converted_amount,\n        }\n        return render(request, 'converter_app/home.html', context)\n    return render(request, 'converter_app/home.html')\n"}, {"file": "home.html", "path": "templates/converter_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\">\n</head>\n<body>\n<div class=\"container mt-5\">\n    <h1 id=\"main-title\" class=\"mb-4 text-center\">Currency Converter</h1>\n    <form id=\"converter-form\" class=\"mb-3\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"mb-3\">\n            <label for=\"amount\" class=\"form-label\">Amount</label>\n            <input type=\"number\" id=\"amount\" name=\"amount\" class=\"form-control\" required>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"from_currency\" class=\"form-label\">From</label>\n            <select id=\"from_currency\" name=\"from_currency\" class=\"form-select\">\n                <option value=\"usd\">USD</option>\n                <option value=\"eur\">EUR</option>\n            </select>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"to_currency\" class=\"form-label\">To</label>\n            <select id=\"to_currency\" name=\"to_currency\" class=\"form-select\">\n                <option value=\"eur\">EUR</option>\n                <option value=\"usd\">USD</option>\n            </select>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Convert</button>\n    </form>\n    {% if converted_amount %}\n        <p id=\"conversion-result\" class=\"alert alert-info\">\n            {{ amount }} {{ from_currency|upper }} is equal to {{ converted_amount }} {{ to_currency|upper }}\n        </p>\n    {% endif %}\n</div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "converter_app/__init__.py", "code": ""}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "\"\"\"\nDjango's command-line utility for administrative tasks.\n\"\"\"\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "\"\"\"\nDjango settings for password_generator project.\n\nGenerated by 'django-admin startproject' using Django 3.2.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.2/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/3.2/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-REPLACE_WITH_YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "\"\"\"\nURL configuration for password_generator project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/3.2/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "\"\"\"\nWSGI config for password_generator project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/3.2/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport random\n\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\n\ndef password(request):\n    characters = list('abcdefghijklmnopqrstuvwxyz')\n    if request.GET.get('uppercase'):\n        characters.extend(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    if request.GET.get('numbers'):\n        characters.extend(list('0123456789'))\n    if request.GET.get('special'):\n        characters.extend(list('!@#$%^&*()'))\n\n    length = int(request.GET.get('length', 12))\n    thepassword = ''.join(random.choice(characters) for _ in range(length))\n\n    return render(request, 'generator/password.html', {'password': thepassword})\n\n\ndef about(request):\n    return render(request, 'generator/about.html')\n"}, {"file": "urls.py", "path": "password_generator/generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "home.html", "path": "password_generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Generate a Password</h1>\n        <form action=\"/password/\">\n            <label for=\"length\">Password length:</label>\n            <input id=\"length\" class=\"length\" type=\"number\" name=\"length\" value=\"12\" min=\"6\" max=\"20\">\n            <br>\n            <input id=\"uppercase\" class=\"uppercase\" type=\"checkbox\" name=\"uppercase\"> Include Uppercase Letters\n            <br>\n            <input id=\"numbers\" class=\"numbers\" type=\"checkbox\" name=\"numbers\"> Include Numbers\n            <br>\n            <input id=\"special\" class=\"special\" type=\"checkbox\" name=\"special\"> Include Special Characters\n            <br><br>\n            <button id=\"generate\" class=\"generate\" type=\"submit\">Generate</button>\n        </form>\n        <a href=\"/about/\">About</a>\n    </div>\n</body>\n</html>\n"}, {"file": "password.html", "path": "password_generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Password</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Your Password:</h1>\n        <p id=\"password\" class=\"password\">{{ password }}</p>\n        <a href=\"/\">Generate Another Password</a>\n    </div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "password_generator/templates/generator/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">About</h1>\n        <p>This is a simple password generator built with Django.</p>\n        <a href=\"/\">Back to home</a>\n    </div>\n</body>\n</html>\n"}], "4": [{"file": "manage.py", "path": "qr_generator/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "qr_generator/qr_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "qr_generator/qr_generator/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "qr_generator/qr_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('generator.urls')),\n]\n"}, {"file": "wsgi.py", "path": "qr_generator/qr_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "qr_generator/generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "qr_generator/generator/admin.py", "code": "from django.contrib import admin\n"}, {"file": "apps.py", "path": "qr_generator/generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'generator'\n"}, {"file": "models.py", "path": "qr_generator/generator/models.py", "code": ""}, {"file": "tests.py", "path": "qr_generator/generator/tests.py", "code": ""}, {"file": "views.py", "path": "qr_generator/generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport qrcode\n\n\ndef index(request):\n    context = {}\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        if data:\n            img = qrcode.make(data)\n            response = HttpResponse(content_type='image/png')\n            img.save(response, \"PNG\")\n            return response\n    return render(request, 'generator/index.html', context)\n"}, {"file": "__init__.py", "path": "qr_generator/generator/migrations/__init__.py", "code": ""}, {"file": "urls.py", "path": "qr_generator/generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "qr_generator/templates/generator/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css\">\n</head>\n<body class=\"bg-gray-100\">\n    <div class=\"container mx-auto p-4\">\n        <h1 id=\"header\" class=\"text-center text-3xl font-bold mb-4\">QR Code Generator</h1>\n        <form id=\"qr-form\" method=\"post\" class=\"bg-white p-6 rounded shadow-md\">\n            {% csrf_token %}\n            <div class=\"mb-4\">\n                <label for=\"data\" class=\"block font-medium mb-2\">Enter Data:</label>\n                <input id=\"data\" name=\"data\" type=\"text\" class=\"border border-gray-300 p-2 w-full\" required>\n            </div>\n            <button type=\"submit\" class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\">Generate QR Code</button>\n        </form>\n    </div>\n</body>\n</html>\n"}], "5": [{"file": "manage.py", "path": "markdown_html_converter/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "markdown_html_converter/markdown_html_converter/__init__.py", "code": ""}, {"file": "asgi.py", "path": "markdown_html_converter/markdown_html_converter/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n\napplication = get_asgi_application()\n"}, {"file": "settings.py", "path": "markdown_html_converter/markdown_html_converter/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-<your-secret-key>'  \n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_html_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_html_converter.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "markdown_html_converter/markdown_html_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "wsgi.py", "path": "markdown_html_converter/markdown_html_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "markdown_html_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "markdown_html_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "markdown_html_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'\n"}, {"file": "models.py", "path": "markdown_html_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "markdown_html_converter/converter/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "markdown_html_converter/converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport markdown\n\n\ndef index(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return JsonResponse({'html_output': html_output})\n    return render(request, 'converter/index.html')\n"}, {"file": "urls.py", "path": "markdown_html_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "markdown_html_converter/templates/converter/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .container { max-width: 800px; margin: 0 auto; padding: 20px; }\n        .input-area, .output-area { margin-bottom: 20px; }\n        textarea { width: 100%; height: 200px; }\n        .button-container { text-align: center; }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"container\">\n        <h1 class=\"title\" id=\"title\">Markdown to HTML Converter</h1>\n        <div class=\"input-area\" id=\"input-area\">\n            <h2 class=\"subtitle\" id=\"subtitle-input\">Enter Markdown</h2>\n            <textarea id=\"markdown-text\" class=\"markdown-text\"></textarea>\n        </div>\n        <div class=\"button-container\" id=\"button-container\">\n            <button onclick=\"convertMarkdown()\" class=\"convert-button\" id=\"convert-button\">Convert</button>\n        </div>\n        <div class=\"output-area\" id=\"output-area\">\n            <h2 class=\"subtitle\" id=\"subtitle-output\">HTML Output</h2>\n            <div id=\"html-output\" class=\"html-output\"></div>\n        </div>\n    </div>\n    <script>\n        function convertMarkdown() {\n            const markdownText = document.getElementById('markdown-text').value;\n            fetch('', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value\n                },\n                body: new URLSearchParams({ 'markdown_text': markdownText })\n            })\n            .then(response => response.json())\n            .then(data => {\n                document.getElementById('html-output').innerHTML = data.html_output;\n            });\n        }\n    </script>\n</body>\n</html>\n"}], "6": [{"file": "manage.py", "path": "todo/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "todo/todo/__init__.py", "code": ""}, {"file": "settings.py", "path": "todo/todo/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todoapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "todo/todo/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todoapp.urls')),\n]\n"}, {"file": "wsgi.py", "path": "todo/todo/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "todo/todoapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "todo/todoapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Todo\n\nadmin.site.register(Todo)\n"}, {"file": "apps.py", "path": "todo/todoapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoappConfig(AppConfig):\n    name = 'todoapp'\n"}, {"file": "models.py", "path": "todo/todoapp/models.py", "code": "from django.db import models\n\n\nclass Todo(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title\n"}, {"file": "tests.py", "path": "todo/todoapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "todo/todoapp/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Todo\nfrom .forms import TodoForm\n\n\ndef index(request):\n    todos = Todo.objects.all()\n    return render(request, 'todoapp/index.html', {'todos': todos})\n\n\ndef add_todo(request):\n    if request.method == 'POST':\n        form = TodoForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('index')\n    else:\n        form = TodoForm()\n    return render(request, 'todoapp/add_todo.html', {'form': form})\n"}, {"file": "forms.py", "path": "todo/todoapp/forms.py", "code": "from django import forms\nfrom .models import Todo\n\n\nclass TodoForm(forms.ModelForm):\n    class Meta:\n        model = Todo\n        fields = ['title', 'description', 'completed']\n"}, {"file": "urls.py", "path": "todo/todoapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('add/', views.add_todo, name='add_todo'),\n]\n"}, {"file": "index.html", "path": "todo/todoapp/templates/todoapp/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1 id=\"todo-header\" class=\"todo-header-class\">Todo List</h1>\n    <a id=\"add-todo-link\" class=\"todo-link-class\" href=\"{% url 'add_todo' %}\">Add Todo</a>\n    <ul id=\"todo-list\" class=\"todo-list-class\">\n        {% for todo in todos %}\n        <li id=\"todo-item-{{todo.id}}\" class=\"todo-item-class\">{{ todo.title }} - {{ todo.description }} - {{ todo.completed }}</li>\n        {% endfor %}\n    </ul>\n    <canvas id=\"todo-chart\" class=\"todo-chart-class\"></canvas>\n    <script>\n        const ctx = document.getElementById('todo-chart').getContext('2d');\n        const chart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Pending'],\n                datasets: [{\n                    label: 'Todo Stats',\n                    data: [\n                        {{ todos|length_percentage:True }},\n                        {{ todos|length_percentage:False }}\n                    ],\n                    backgroundColor: ['#36A2EB','#FF6384'],\n                    hoverOffset: 4\n                }]\n            },\n        });\n    </script>\n</body>\n</html>\n"}, {"file": "add_todo.html", "path": "todo/todoapp/templates/todoapp/add_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Add Todo</title>\n</head>\n<body>\n    <h1 id=\"add-todo-header\" class=\"add-todo-header-class\">Add Todo</h1>\n    <form id=\"add-todo-form\" class=\"add-todo-form-class\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-todo-button\" class=\"submit-todo-button-class\">Add</button>\n    </form>\n    <a id=\"back-link\" class=\"back-link-class\" href=\"{% url 'index' %}\">Back to Todo List</a>\n</body>\n</html>\n"}, {"file": "length_percentage.py", "path": "todo/todoapp/templatetags/length_percentage.py", "code": "from django import template\nregister = template.Library()\n\n@register.filter\ndef length_percentage(todos, completed=True):\n    total = len(todos)\n    completed_length = len([todo for todo in todos if todo.completed])\n    return (completed_length if completed else total - completed_length) / total * 100 if total > 0 else 0\n"}, {"file": "__init__.py", "path": "todo/todoapp/templatetags/__init__.py", "code": ""}], "7": [{"file": "manage.py", "path": "budget_control/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "budget_control/budget_control/__init__.py", "code": ""}, {"file": "settings.py", "path": "budget_control/budget_control/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "budget_control/budget_control/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget.urls')),\n]"}, {"file": "wsgi.py", "path": "budget_control/budget_control/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "budget_control/budget/__init__.py", "code": ""}, {"file": "admin.py", "path": "budget_control/budget/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction\n\nadmin.site.register(Transaction)"}, {"file": "apps.py", "path": "budget_control/budget/apps.py", "code": "from django.apps import AppConfig\n\nclass BudgetConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget'"}, {"file": "models.py", "path": "budget_control/budget/models.py", "code": "from django.db import models\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.date} - {self.description} : {self.amount}'"}, {"file": "tests.py", "path": "budget_control/budget/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "budget_control/budget/views.py", "code": "from django.shortcuts import render\nfrom .models import Transaction\n\ndef index(request):\n    transactions = Transaction.objects.all()\n    return render(request, 'budget/index.html', {'transactions': transactions})"}, {"file": "urls.py", "path": "budget_control/budget/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "index.html", "path": "budget_control/budget/templates/budget/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1 id=\"title\" class=\"budget-title\">Budget Control</h1>\n\n    <div id=\"transactions\" class=\"transactions-list\">\n      <h2 id=\"transactions-title\" class=\"transactions-title\">Transactions</h2>\n      <ul id=\"transactions-list\" class=\"list\">\n        {% for transaction in transactions %}\n            <li class=\"transaction-item\">{{ transaction.date }} - {{ transaction.description }} : {{ transaction.amount }}</li>\n        {% endfor %}\n      </ul>\n    </div>\n\n    <canvas id=\"balanceChart\" class=\"balance-chart\" width=\"400\" height=\"200\"></canvas>\n\n    <script>\n        const ctx = document.getElementById('balanceChart').getContext('2d');\n        const balanceChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: [{% for transaction in transactions %}'{{ transaction.date }}',{% endfor %}],\n                datasets: [{\n                    label: 'Balance Over Time',\n                    data: [{% for transaction in transactions %}{{ transaction.amount }},{% endfor %}],\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "0001_initial.py", "path": "budget_control/budget/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('date', models.DateField()),\n                ('description', models.CharField(max_length=255)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "budget_control/budget/migrations/__init__.py", "code": ""}], "8": [{"file": "manage.py", "path": "calendar_app/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "calendar_app/calendar_app/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_month',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "calendar_app/calendar_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_month.urls')),\n]\n"}, {"file": "wsgi.py", "path": "calendar_app/calendar_app/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calendar_app/calendar_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "calendar_app/calendar_month/__init__.py", "code": ""}, {"file": "admin.py", "path": "calendar_app/calendar_month/admin.py", "code": "from django.contrib import admin"}, {"file": "apps.py", "path": "calendar_app/calendar_month/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalendarMonthConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calendar_month'"}, {"file": "models.py", "path": "calendar_app/calendar_month/models.py", "code": "from django.db import models"}, {"file": "tests.py", "path": "calendar_app/calendar_month/tests.py", "code": "from django.test import TestCase"}, {"file": "views.py", "path": "calendar_app/calendar_month/views.py", "code": "from django.shortcuts import render\nimport calendar\nfrom datetime import datetime\n\n\ndef index(request):\n    now = datetime.now()\n    current_year = now.year\n    current_month = now.month\n\n    cal = calendar.monthcalendar(current_year, current_month)\n    month_name = calendar.month_name[current_month]\n\n    context = {\n        'year': current_year,\n        'month': month_name,\n        'calendar': cal,\n    }\n\n    return render(request, 'calendar_month/index.html', context)"}, {"file": "urls.py", "path": "calendar_app/calendar_month/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "index.html", "path": "calendar_app/templates/calendar_month/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            text-align: center;\n            padding: 8px;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"calendar-title\" class=\"calendar-title\">Calendar for {{ month }} {{ year }}</h1>\n    <table id=\"calendar-table\" class=\"calendar-table\">\n        <thead>\n            <tr id=\"weekdays-row\" class=\"weekdays-row\">\n                <th class=\"weekday\">Mon</th>\n                <th class=\"weekday\">Tue</th>\n                <th class=\"weekday\">Wed</th>\n                <th class=\"weekday\">Thu</th>\n                <th class=\"weekday\">Fri</th>\n                <th class=\"weekday\">Sat</th>\n                <th class=\"weekday\">Sun</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for week in calendar %}\n                <tr class=\"week\">\n                    {% for day in week %}\n                        {% if day == 0 %}\n                            <td class=\"empty-day\"></td>\n                        {% else %}\n                            <td class=\"day\">{{ day }}</td>\n                        {% endif %}\n                    {% endfor %}\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>"}], "9": [{"file": "manage.py", "path": "chatbot_project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "chatbot_project/chatbot_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "chatbot_project/chatbot_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key-here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n"}, {"file": "urls.py", "path": "chatbot_project/chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot.urls')),\n]\n"}, {"file": "wsgi.py", "path": "chatbot_project/chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "chatbot_project/chatbot/__init__.py", "code": ""}, {"file": "apps.py", "path": "chatbot_project/chatbot/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ChatbotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot'\n"}, {"file": "urls.py", "path": "chatbot_project/chatbot/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n"}, {"file": "views.py", "path": "chatbot_project/chatbot/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n"}, {"file": "home.html", "path": "chatbot_project/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot Introduction</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"header-class\">\n        <h1 id=\"title\" class=\"title-class\">Welcome to AI Chatbot</h1>\n    </header>\n    <section id=\"intro-section\" class=\"intro-class\">\n        <h2 id=\"intro-title\" class=\"intro-title-class\">Meet your AI Chatbot</h2>\n        <p id=\"intro-paragraph\" class=\"intro-text-class\">Our chatbot is designed to assist you around the clock, providing information and answering your questions instantly.</p>\n    </section>\n    <footer id=\"main-footer\" class=\"footer-class\">\n        <p id=\"footer-paragraph\" class=\"footer-text-class\">&copy; 2023 AI Chatbot. All rights reserved.</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "style.css", "path": "chatbot_project/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\n.header-class {\n    background-color: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\n.title-class {\n    margin: 0;\n}\n\n.intro-class {\n    padding: 20px;\n    text-align: center;\n}\n\n.intro-title-class {\n    font-size: 24px;\n    margin-bottom: 10px;\n}\n\n.intro-text-class {\n    font-size: 16px;\n    color: #555;\n}\n\n.footer-class {\n    background-color: #333;\n    color: #fff;\n    text-align: center;\n    padding: 5px;\n    position: fixed;\n    width: 100%;\n    bottom: 0;\n}\n.footer-text-class {\n    margin: 0;\n}\n"}], "10": [{"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),\n]"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calorie_tracker/calorie_tracker/__init__.py", "code": ""}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\n\nclass Meal(models.Model):\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.name} ({self.calories} cal)\""}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render\nfrom .models import Meal\n\n\ndef index(request):\n    meals = Meal.objects.all().order_by('-date')\n    total_calories = sum(meal.calories for meal in meals)\n    context = {\n        'meals': meals,\n        'total_calories': total_calories,\n    }\n    return render(request, 'tracker/index.html', context)"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "admin.py", "path": "calorie_tracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Meal\n\nadmin.site.register(Meal)"}, {"file": "__init__.py", "path": "calorie_tracker/tracker/__init__.py", "code": ""}, {"file": "index.html", "path": "calorie_tracker/tracker/templates/tracker/index.html", "code": "<!DOCTYPE html>\n<html Lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Calorie Tracker</title>\n    <link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'>\n</head>\n<body>\n    <div id='main' class='container'>\n        <h1 id='title' class='mt-5'>Calorie Tracker</h1>\n        <div id='meal-list' class='mt-3'>\n            <h2 id='subtotal' class='mb-3'>Total Calories: {{ total_calories }}</h2>\n            <ul class='list-group'>\n                {% for meal in meals %}\n                    <li class='list-group-item'>{{ meal.name }} - {{ meal.calories }} cal</li>\n                {% endfor %}\n            </ul>\n        </div>\n        <div id='chart' class='mt-5'>\n            <canvas id='calorieChart' width='400' height='200'></canvas>\n        </div>\n    </div>\n    <script src='https://code.jquery.com/jquery-3.2.1.slim.min.js'></script>\n    <script src='https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js'></script>\n    <script src='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js'></script>\n    <script src='https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js'></script>\n    <script>\n        var ctx = document.getElementById('calorieChart').getContext('2d');\n        var calorieChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: [{% for meal in meals %} '{{ meal.name }}', {% endfor %}],\n                datasets: [{\n                    label: 'Calories Consumed',\n                    data: [{% for meal in meals %} {{ meal.calories }}, {% endfor %}],\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "__init__.py", "path": "calorie_tracker/calorie_tracker/__init__.py", "code": ""}, {"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}], "11": [{"file": "manage.py", "path": "project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "project/project/__init__.py", "code": ""}, {"file": "settings.py", "path": "project/project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "project/project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review.urls')),\n]"}, {"file": "wsgi.py", "path": "project/project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "project/review/__init__.py", "code": ""}, {"file": "admin.py", "path": "project/review/admin.py", "code": "from django.contrib import admin\nfrom .models import TestCodeReview\n\nadmin.site.register(TestCodeReview)"}, {"file": "apps.py", "path": "project/review/apps.py", "code": "from django.apps import AppConfig\n\nclass ReviewConfig(AppConfig):\n    name = 'review'"}, {"file": "models.py", "path": "project/review/models.py", "code": "from django.db import models\n\nclass TestCodeReview(models.Model):\n    project_id = models.CharField(max_length=255)\n    page = models.CharField(max_length=255)\n    function_name = models.CharField(max_length=255)\n    test_code = models.TextField()\n    status = models.CharField(max_length=50, choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')], default='Select')\n\n    def __str__(self):\n        return f'{self.project_id} - {self.function_name}'"}, {"file": "views.py", "path": "project/review/views.py", "code": "from django.shortcuts import render\nfrom .models import TestCodeReview\n\n# Sample view for displaying test code reviews\ndef review_list(request):\n    reviews = TestCodeReview.objects.all()\n    return render(request, 'review/review_list.html', {'reviews': reviews})"}, {"file": "urls.py", "path": "project/review/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.review_list, name='review_list'),\n]"}, {"file": "0001_initial.py", "path": "project/review/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TestCodeReview',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('project_id', models.CharField(max_length=255)),\n                ('page', models.CharField(max_length=255)),\n                ('function_name', models.CharField(max_length=255)),\n                ('test_code', models.TextField()),\n                ('status', models.CharField(choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')], default='Select', max_length=50)),\n            ],\n        ),\n    ]"}, {"file": "review_list.html", "path": "project/review/templates/review/review_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Review List</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\n</head>\n<body>\n<div class=\"container mt-5\">\n    <h1 class=\"mb-4\">Test Code Review</h1>\n    <table class=\"table table-bordered\">\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>Project ID</th>\n                <th>Page</th>\n                <th>Function Name</th>\n                <th>Test Code</th>\n                <th>Status</th>\n            </tr>\n        </thead>\n        <tbody>\n        {% for review in reviews %}\n            <tr>\n                <td>{{ review.id }}</td>\n                <td>{{ review.project_id }}</td>\n                <td>{{ review.page }}</td>\n                <td>{{ review.function_name }}</td>\n                <td><pre>{{ review.test_code }}</pre></td>\n                <td>\n                    <select id=\"status_{{ review.id }}\" class=\"form-control\">\n                        <option value=\"Pass\" {% if review.status == 'Pass' %}selected{% endif %}>Pass</option>\n                        <option value=\"Fail\" {% if review.status == 'Fail' %}selected{% endif %}>Fail</option>\n                        <option value=\"Select\" {% if review.status == 'Select' %}selected{% endif %}>Select</option>\n                    </select>\n                </td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</div>\n</body>\n</html>"}], "12": [{"file": "manage.py", "path": "mysite/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "mysite/mysite/__init__.py", "code": ""}, {"file": "settings.py", "path": "mysite/mysite/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expenses',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "mysite/mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('expenses.urls')),\n]\n"}, {"file": "wsgi.py", "path": "mysite/mysite/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "mysite/expenses/__init__.py", "code": ""}, {"file": "admin.py", "path": "mysite/expenses/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim, ExpenseCategory\n\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ['employee', 'category', 'amount', 'status']\n    list_filter = ['status', 'category']\n    actions = ['approve_claims', 'reject_claims']\n\n    def approve_claims(self, request, queryset):\n        queryset.update(status='Approved')\n\n    def reject_claims(self, request, queryset):\n        queryset.update(status='Rejected')\n\nadmin.site.register(Claim, ClaimAdmin)\nadmin.site.register(ExpenseCategory)\n"}, {"file": "apps.py", "path": "mysite/expenses/apps.py", "code": "from django.apps import AppConfig\n\nclass ExpensesConfig(AppConfig):\n    name = 'expenses'\n"}, {"file": "models.py", "path": "mysite/expenses/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass ExpenseCategory(models.Model):\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.name\n\nclass Claim(models.Model):\n    STATUS_CHOICES = [\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected'),\n    ]\n\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.ForeignKey(ExpenseCategory, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='Pending')\n    date_submitted = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.employee.username} - {self.category.name} - {self.status}\"\n"}, {"file": "tests.py", "path": "mysite/expenses/tests.py", "code": "from django.test import TestCase\nfrom django.contrib.auth.models import User\nfrom .models import Claim, ExpenseCategory\n\nclass ClaimTestCase(TestCase):\n    def setUp(self):\n        user = User.objects.create(username='test_user')\n        category = ExpenseCategory.objects.create(name='Travel Expenses')\n        Claim.objects.create(\n            employee=user,\n            category=category,\n            amount=100,\n            description='Business trip',\n            status='Pending'\n        )\n\n    def test_claim_creation(self):\n        claim = Claim.objects.get(description='Business trip')\n        self.assertEqual(claim.status, 'Pending')\n        self.assertEqual(claim.amount, 100)\n"}, {"file": "views.py", "path": "mysite/expenses/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Claim, ExpenseCategory\nfrom .forms import ClaimForm\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            return redirect('claim_list')\n    else:\n        form = ClaimForm()\n    return render(request, 'expenses/submit_claim.html', {'form': form})\n\n@login_required\ndef claim_list(request):\n    claims = Claim.objects.all()\n    return render(request, 'expenses/claim_list.html', {'claims': claims})\n\n@login_required\ndef budget_analysis(request):\n    approved_claims = Claim.objects.filter(status='Approved')\n    total_spent = sum(claim.amount for claim in approved_claims)\n    budget = 10000  # Example budget\n    remaining_budget = budget - total_spent\n    return render(request, 'expenses/budget_analysis.html', {\n        'total_spent': total_spent,\n        'remaining_budget': remaining_budget,\n    })\n"}, {"file": "urls.py", "path": "mysite/expenses/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('submit/', views.submit_claim, name='submit_claim'),\n    path('claims/', views.claim_list, name='claim_list'),\n    path('budget/', views.budget_analysis, name='budget_analysis'),\n]\n"}, {"file": "forms.py", "path": "mysite/expenses/forms.py", "code": "from django import forms\nfrom .models import Claim\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['category', 'amount', 'description']\n"}, {"file": "submit_claim.html", "path": "mysite/templates/expenses/submit_claim.html", "code": "<h2 id=\"submit-claim-title\">Submit Claim</h2>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"submit-claim-btn\" class=\"btn btn-primary\">Submit</button>\n</form>\n"}, {"file": "claim_list.html", "path": "mysite/templates/expenses/claim_list.html", "code": "<h2 id=\"claim-list-title\">Claim List</h2>\n<table id=\"claim-list-table\" class=\"table\">\n    <thead>\n        <tr>\n            <th id=\"column-employee\">Employee</th>\n            <th id=\"column-category\">Category</th>\n            <th id=\"column-amount\">Amount</th>\n            <th id=\"column-status\">Status</th>\n        </tr>\n    </thead>\n    <tbody>\n        {% for claim in claims %}\n        <tr>\n            <td>{{ claim.employee.username }}</td>\n            <td>{{ claim.category.name }}</td>\n            <td>{{ claim.amount }}</td>\n            <td>{{ claim.status }}</td>\n        </tr>\n        {% endfor %}\n    </tbody>\n</table>\n"}, {"file": "budget_analysis.html", "path": "mysite/templates/expenses/budget_analysis.html", "code": "<h2 id=\"budget-analysis-title\">Budget Analysis</h2>\n<p>Total Spent: <span id=\"total-spent\">{{ total_spent }}</span></p>\n<p>Remaining Budget: <span id=\"remaining-budget\">{{ remaining_budget }}</span></p>\n"}], "13": [{"file": "models.py", "path": "mycrm/myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=100)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10)\n    company = models.CharField(max_length=100)\n    phone_number = models.CharField(max_length=15)\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n    category = models.CharField(max_length=100)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE, related_name='purchases')\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE, related_name='purchases')\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n"}, {"file": "admin.py", "path": "mycrm/myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\n"}, {"file": "views.py", "path": "mycrm/myapp/views.py", "code": "from django.shortcuts import render\nfrom .models import Customer, Product, PurchaseRecord\n\ndef index(request):\n    customers = Customer.objects.all()\n    products = Product.objects.all()\n    purchases = PurchaseRecord.objects.all()\n    return render(request, 'index.html', {'customers': customers, 'products': products, 'purchases': purchases})\n\n# Additional views for analytics can be created as needed\n"}, {"file": "urls.py", "path": "mycrm/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    # Additional URL patterns for views can be added here\n]\n"}, {"file": "index.html", "path": "mycrm/myapp/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CRM Dashboard</title>\n    <style>/* Add CSS styles here */</style>\n</head>\n<body>\n    <h1 id=\"crmTitle\" class=\"page-title\">CRM Dashboard</h1>\n    <section id=\"customersSection\" class=\"customer-list\">\n        <h2 class=\"section-title\">Customers</h2>\n        <ul>\n            {% for customer in customers %}\n            <li class=\"customer-item\">{{ customer.name }} - {{ customer.company }}</li>\n            {% endfor %}\n        </ul>\n    </section>\n    <section id=\"productsSection\" class=\"product-list\">\n        <h2 class=\"section-title\">Products</h2>\n        <ul>\n            {% for product in products %}\n            <li class=\"product-item\">{{ product.name }} - {{ product.category }} - ${{ product.recommended_price }}</li>\n            {% endfor %}\n        </ul>\n    </section>\n    <section id=\"purchasesSection\" class=\"purchase-list\">\n        <h2 class=\"section-title\">Purchases</h2>\n        <ul>\n            {% for purchase in purchases %}\n            <li class=\"purchase-item\">{{ purchase.customer.name }} bought {{ purchase.product.name }} - Quantity: {{ purchase.quantity }} - Amount: ${{ purchase.amount }}</li>\n            {% endfor %}\n        </ul>\n    </section>\n    <!-- Additional sections for marketing analytics as needed -->\n</body>\n</html>\n"}, {"file": "settings.py", "path": "mycrm/mycrm/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XContentOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mycrm.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mycrm.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "mycrm/mycrm/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "mycrm/mycrm/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mycrm.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "mycrm/myapp/apps.py", "code": "from django.apps import AppConfig\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"}, {"file": "__init__.py", "path": "mycrm/mycrm/__init__.py", "code": ""}, {"file": "__init__.py", "path": "mycrm/myapp/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "helloword_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloword_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "helloword_project/helloword_project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloword_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloword_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloword_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "helloword_project/helloword_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloword_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "helloword_project/helloword_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom helloword_app.views import hello_world\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', hello_world, name='hello_world'),\n]"}, {"file": "views.py", "path": "helloword_project/helloword_app/views.py", "code": "from django.http import HttpResponse\n\ndef hello_world(request):\n    return HttpResponse('<html><body><h1 id=\"title\" class=\"title\">Hello, World!</h1></body></html>')"}, {"file": "apps.py", "path": "helloword_project/helloword_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HellowordAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloword_app'"}, {"file": "__init__.py", "path": "helloword_project/helloword_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "helloword_project/helloword_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"myproject.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloapp.urls')),\n]\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/helloapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myproject/helloapp/admin.py", "code": "from django.contrib import admin\n"}, {"file": "apps.py", "path": "myproject/helloapp/apps.py", "code": "from django.apps import AppConfig\n\nclass HelloappConfig(AppConfig):\n    name = 'helloapp'\n"}, {"file": "models.py", "path": "myproject/helloapp/models.py", "code": ""}, {"file": "tests.py", "path": "myproject/helloapp/tests.py", "code": ""}, {"file": "views.py", "path": "myproject/helloapp/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "urls.py", "path": "myproject/helloapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]\n"}, {"file": "home.html", "path": "myproject/helloapp/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <button id=\"btn-hello\" class=\"btn\" onclick=\"window.location.href='{% url 'helloworld' %}';\">Go to HelloWorld</button>\n</body>\n</html>\n"}, {"file": "helloworld.html", "path": "myproject/helloapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1 id=\"hello-world\" class=\"title\">Hello, World!</h1>\n</body>\n</html>\n"}], "16": [{"file": "main.py", "path": "src/main.py", "code": "import pandas as pd\n\ndef read_and_transform_excel(input_file, output_file):\n    # Read the Excel file\n    df = pd.read_excel(input_file)\n    \n    # Create an empty DataFrame with weekdays as rows and time periods as columns\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    time_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n    \n    # Initialize a multi-index DataFrame for the output table\n    subject_table = pd.DataFrame(index=weekdays, columns=time_periods)\n    \n    # Populate the subject_table with subjects from the input\n    for index, row in df.iterrows():\n        weekday = row['Weekday']\n        time_period = row['Time']\n        subject_name = row['Name']\n        \n        # Place the subject name in the correct location in the subject table\n        subject_table.loc[weekday, time_period] = subject_name\n    \n    # Write the transformed data to a new Excel file\n    subject_table.to_excel(output_file)\n\n# Driver code to execute the function\nif __name__ == '__main__':\n    input_file = 'Spring Semester Subjects.xlsx'\n    output_file = 'TransformedSubjects.xlsx'\n    read_and_transform_excel(input_file, output_file)\n"}, {"file": "requirements.txt", "path": "src/requirements.txt", "code": "pandas==1.3.2\nopenpyxl==3.0.7\n"}, {"file": "README.md", "path": "src/README.md", "code": "# Spreadsheet Transformer Project\n\nThis project reads an Excel file containing a list of subjects for the Spring semester, transforms it into a two-dimensional subject table based on weekdays and time periods, and outputs the result into another Excel file.\n\n## Prerequisites\n- Python 3.x\n- Required Python packages (listed in `requirements.txt`)\n\n## Setup and Use\n\n1. Navigate to the `src` directory.\n2. Install the required Python packages:\n   ```\n   pip install -r requirements.txt\n   ```\n3. Run the transformation script:\n   ```\n   python main.py\n   ```\n\nEnsure the input file `Spring Semester Subjects.xlsx` is located in the `src` directory.\n\nThe transformed data will be saved as `TransformedSubjects.xlsx`.\n"}], "17": [{"file": "run.bat", "path": "project/run.bat", "code": "@echo off\npython project/model.py\npause"}, {"file": "model.py", "path": "project/model.py", "code": "import pandas as pd\nimport statsmodels.api as sm\n\n# Read data\ndata = pd.read_excel('Gamedata.xlsx')\n\n# Create lag for the dependent variable 'result'\ndata['result_lag'] = data['result'].shift(-1)\n\n# Drop the original 'result' now\nlagged_data = data.dropna().drop(columns=['result'])\n\ny = lagged_data['result_lag']\nX = lagged_data.drop(columns=['result_lag'])\n\n# Add constant\nX = sm.add_constant(X)\n\n# Logistic Regression\nmodel = sm.Logit(y, X)\nresult = model.fit()\n\n# Save summary to Excel\nsummary_df = pd.read_html(result.summary().tables[1].as_html())[0]\nsummary_df.to_excel('Logistic.xlsx', index=False)\n"}, {"file": "requirements.txt", "path": "project/requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}], "18": [{"file": "main.py", "path": "bashcrawl/main.py", "code": "import sys\n\nclass Room:\n    def __init__(self, description, exits):\n        self.description = description\n        self.exits = exits\n\n    def __str__(self):\n        return self.description\n\ndef move(current_room, direction):\n    if direction in current_room.exits:\n        return current_room.exits[direction]\n    else:\n        print(\"You can't go that way.\")\n        return current_room\n\ndef main():\n    # Define the rooms\n    rooms = {\n        'entrance': Room(\"You are at the entrance of a dark cave.\", {'north': 'chamber'}),\n        'chamber': Room(\"You find yourself in a dimly lit chamber with ancient markings.\", {'south': 'entrance', 'east': 'treasure_room'}),\n        'treasure_room': Room(\"This room is sparkling with gold and jewels.\", {'west': 'chamber'})\n    }\n\n    current_room_key = 'entrance'\n    print(\"Welcome to BashCrawl!\")\n\n    while True:\n        current_room = rooms[current_room_key]\n        print(current_room)\n\n        command = input(\"Enter a command (north, south, east, west, quit): \").strip().lower()\n        if command in ['north', 'south', 'east', 'west']:\n            current_room_key = move(current_room, command)\n        elif command == 'quit':\n            print(\"Thanks for playing!\")\n            sys.exit()\n        else:\n            print(\"Invalid command.\")\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "__init__.py", "path": "bashcrawl/__init__.py", "code": "# This file is intentionally left blank to signify that this directory is a package."}, {"file": "README.md", "path": "bashcrawl/README.md", "code": "# BashCrawl Game\n\nThis is a simple console-based game implemented in Python.\n\n## How to Play\n\nNavigate through the rooms using commands like `north`, `south`, `east`, and `west`. Type `quit` to exit the game.\n\n## Game Description\n\nYou start at the entrance of a mysterious cave. Try to find the treasure room!\n"}], "20": [{"file": "manage.py", "path": "my_blog/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_blog.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "my_blog/my_blog/__init__.py", "code": ""}, {"file": "settings.py", "path": "my_blog/my_blog/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'my_blog.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'my_blog.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "my_blog/my_blog/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('blog/', include('blog.urls')),\n]\n"}, {"file": "wsgi.py", "path": "my_blog/my_blog/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'my_blog.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "my_blog/blog/__init__.py", "code": ""}, {"file": "admin.py", "path": "my_blog/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)\n"}, {"file": "apps.py", "path": "my_blog/blog/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    name = 'blog'\n"}, {"file": "models.py", "path": "my_blog/blog/models.py", "code": "from django.db import models\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n"}, {"file": "tests.py", "path": "my_blog/blog/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "my_blog/blog/views.py", "code": "from django.shortcuts import render\nfrom .models import Post\n\n\ndef post_list(request):\n    posts = Post.objects.all()\n    return render(request, 'blog/post_list.html', {'posts': posts})\n"}, {"file": "__init__.py", "path": "my_blog/blog/migrations/__init__.py", "code": ""}, {"file": "urls.py", "path": "my_blog/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.post_list, name='post_list'),\n]\n"}, {"file": "post_list.html", "path": "my_blog/blog/templates/blog/post_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blog Posts</title>\n</head>\n<body id=\"body-main\" class=\"main-body-class\">\n    <h1 id=\"header-main\" class=\"header-class\">Blog Posts</h1>\n    <div id=\"post-container\" class=\"post-container-class\">\n        {% for post in posts %}\n            <div id=\"post-{{ post.id }}\" class=\"post-class\">\n                <h2 id=\"post-title-{{ post.id }}\" class=\"post-title-class\">{{ post.title }}</h2>\n                <p id=\"post-content-{{ post.id }}\" class=\"post-content-class\">{{ post.content }}</p>\n                <small id=\"post-date-{{ post.id }}\" class=\"post-date-class\">{{ post.created_at }}</small>\n            </div>\n        {% endfor %}\n    </div>\n</body>\n</html>\n"}]}