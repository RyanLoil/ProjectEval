{"1": [{"file": "settings.py", "path": "bmi_calculator_project/bmi_calculator_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "bmi_calculator_project/bmi_calculator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom calculator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n]"}, {"file": "__init__.py", "path": "bmi_calculator_project/bmi_calculator_project/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "bmi_calculator_project/bmi_calculator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "bmi_calculator_project/calculator/__init__.py", "code": ""}, {"file": "views.py", "path": "bmi_calculator_project/calculator/views.py", "code": "from django.shortcuts import render\n\n\ndef index(request):\n    bmi = None\n    if request.method == 'POST':\n        weight = float(request.POST.get('weight'))\n        height = float(request.POST.get('height')) / 100\n        bmi = round(weight / (height * height), 2)\n    return render(request, 'calculator/index.html', {'bmi': bmi})"}, {"file": "index.html", "path": "bmi_calculator_project/calculator/templates/calculator/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\n</head>\n<body>\n<div class=\"container mt-5\">\n    <h1 id=\"title\" class=\"text-center\">BMI Calculator</h1>\n    <form method=\"POST\" class=\"mt-4\">\n        <div class=\"form-group\">\n            <label for=\"weight\" class=\"control-label\">Weight (kg):</label>\n            <input type=\"number\" step=\"0.1\" id=\"weight\" name=\"weight\" class=\"form-control\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"height\" class=\"control-label\">Height (cm):</label>\n            <input type=\"number\" step=\"0.1\" id=\"height\" name=\"height\" class=\"form-control\" required>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Calculate</button>\n    </form>\n    {% if bmi is not None %}\n    <div class=\"mt-3 alert alert-info\">\n        <strong>BMI:</strong> {{ bmi }}\n    </div>\n    {% endif %}\n</div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "bmi_calculator_project/bmi_calculator_project/__init__.py", "code": ""}, {"file": "apps.py", "path": "bmi_calculator_project/calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    name = 'calculator'"}, {"file": "__init__.py", "path": "bmi_calculator_project/calculator/migrations/__init__.py", "code": ""}, {"file": "manage.py", "path": "bmi_calculator_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key-here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom converter import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n]\n"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter/currency_converter/__init__.py", "code": ""}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\n\n# Simulate currency rates\nRATES = {\n    'USD': 1.0,\n    'EUR': 0.85,\n    'JPY': 110.0,\n    'GBP': 0.75\n}\n\ndef index(request):\n    context = {'rates': RATES}\n    if request.method == 'POST':\n        from_currency = request.POST.get('from_currency')\n        to_currency = request.POST.get('to_currency')\n        amount = float(request.POST.get('amount', 0))\n\n        rate = RATES[to_currency] / RATES[from_currency]\n        converted_amount = amount * rate\n\n        context.update({\n            'from_currency': from_currency,\n            'to_currency': to_currency,\n            'amount': amount,\n            'converted_amount': converted_amount\n        })\n\n    return render(request, 'converter/index.html', context)\n"}, {"file": "__init__.py", "path": "currency_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "currency_converter/converter/admin.py", "code": "from django.contrib import admin\n"}, {"file": "apps.py", "path": "currency_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'\n"}, {"file": "models.py", "path": "currency_converter/converter/models.py", "code": ""}, {"file": "tests.py", "path": "currency_converter/converter/tests.py", "code": ""}, {"file": "index.html", "path": "currency_converter/templates/converter/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1 id=\"title\" class=\"title\">Currency Converter</h1>\n\n    <form method=\"POST\">\n        {% csrf_token %}\n        <label for=\"from_currency\" id=\"from_currency_label\" class=\"form-label\">From:</label>\n        <select name=\"from_currency\" id=\"from_currency\" class=\"form-select\">\n            {% for currency in rates.keys %}\n                <option value=\"{{ currency }}\">{{ currency }}</option>\n            {% endfor %}\n        </select>\n\n        <label for=\"to_currency\" id=\"to_currency_label\" class=\"form-label\">To:</label>\n        <select name=\"to_currency\" id=\"to_currency\" class=\"form-select\">\n            {% for currency in rates.keys %}\n                <option value=\"{{ currency }}\">{{ currency }}</option>\n            {% endfor %}\n        </select>\n\n        <label for=\"amount\" id=\"amount_label\" class=\"form-label\">Amount:</label>\n        <input type=\"number\" name=\"amount\" id=\"amount\" class=\"form-input\">\n\n        <button type=\"submit\" id=\"convert_button\" class=\"form-button\">Convert</button>\n    </form>\n\n    {% if converted_amount %}\n        <h2 id=\"result\" class=\"result\">Converted Amount: {{ converted_amount }}</h2>\n    {% endif %}\n</body>\n</html>\n"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('generatedpassword/', views.password, name='password'),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "password_generator/generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "password_generator/generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'generator'\n"}, {"file": "models.py", "path": "password_generator/generator/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "password_generator/generator/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nimport random\n\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\n\ndef password(request):\n    characters = list('abcdefghijklmnopqrstuvwxyz')\n    generated_password = ''\n\n    length = int(request.GET.get('length', 12))\n\n    if request.GET.get('uppercase'):\n        characters.extend(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    if request.GET.get('numbers'):\n        characters.extend(list('0123456789'))\n    if request.GET.get('special'):\n        characters.extend(list('!@#$%^&*()_+'))\n\n    for x in range(length):\n        generated_password += random.choice(characters)\n\n    return render(request, 'generator/password.html', {'password': generated_password})\n"}, {"file": "__init__.py", "path": "password_generator/generator/migrations/__init__.py", "code": ""}, {"file": "home.html", "path": "password_generator/generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n\n<div id=\"container\" class=\"container mt-5\">\n    <h1 id=\"title\" class=\"text-center\">Password Generator</h1>\n    <form id=\"form\" method=\"GET\" action=\"generatedpassword\">\n        <div id=\"length-group\" class=\"form-group\">\n            <label for=\"length\">Password Length:</label>\n            <input type=\"number\" id=\"length\" class=\"form-control\" name=\"length\" value=\"12\" min=\"6\" max=\"24\">\n        </div>\n        <div id=\"options\" class=\"form-check\">\n            <input type=\"checkbox\" class=\"form-check-input\" id=\"uppercase\" name=\"uppercase\">\n            <label class=\"form-check-label\" for=\"uppercase\">Include Uppercase Letters</label><br>\n            <input type=\"checkbox\" class=\"form-check-input\" id=\"numbers\" name=\"numbers\">\n            <label class=\"form-check-label\" for=\"numbers\">Include Numbers</label><br>\n            <input type=\"checkbox\" class=\"form-check-input\" id=\"special\" name=\"special\">\n            <label class=\"form-check-label\" for=\"special\">Include Special Characters</label><br>\n        </div>\n        <button id=\"submit\" type=\"submit\" class=\"btn btn-primary mt-3\">Generate Password</button>\n    </form>\n</div>\n\n</body>\n</html>\n"}, {"file": "password.html", "path": "password_generator/generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generated</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n\n<div id=\"container\" class=\"container mt-5\">\n    <h1 id=\"title\" class=\"text-center\">Your Password is Ready!</h1>\n    <div id=\"password-display\" class=\"alert alert-success text-center\">\n        <strong>{{ password }}</strong>\n    </div>\n    <div id=\"back-button\" class=\"text-center\">\n        <a href=\"/\" class=\"btn btn-secondary\">Go Back</a>\n    </div>\n</div>\n\n</body>\n</html>\n"}], "4": [{"file": "manage.py", "path": "qrcodegenerator/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcodegenerator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "qrcodegenerator/qrcodegenerator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcodegenerator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcodegenerator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "qrcodegenerator/qrcodegenerator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n]\n"}, {"file": "wsgi.py", "path": "qrcodegenerator/qrcodegenerator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcodegenerator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "qrcodegenerator/generator/apps.py", "code": "from django.apps import AppConfig\n\nclass GeneratorConfig(AppConfig):\n    name = 'generator'\n"}, {"file": "__init__.py", "path": "qrcodegenerator/qrcodegenerator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "qrcodegenerator/generator/__init__.py", "code": ""}, {"file": "views.py", "path": "qrcodegenerator/generator/views.py", "code": "from django.shortcuts import render\nimport qrcode\nfrom io import BytesIO\nfrom django.http import HttpResponse\n\n\ndef index(request):\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        if data:\n            img = qrcode.make(data)\n            buffer = BytesIO()\n            img.save(buffer, format='PNG')\n            img_str = buffer.getvalue()\n            response = HttpResponse(img_str, content_type='image/png')\n            return response\n    return render(request, 'index.html')\n"}, {"file": "index.html", "path": "qrcodegenerator/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        .container {\n            width: 50%;\n            margin: auto;\n            text-align: center;\n        }\n        .form-control {\n            width: 100%;\n            padding: 10px;\n            margin-top: 20px;\n        }\n        .btn {\n            padding: 10px 20px;\n            margin-top: 20px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">QR Code Generator</h1>\n        <form method=\"POST\">\n            {% csrf_token %}\n            <textarea id=\"data-input\" name=\"data\" class=\"form-control\" rows=\"4\" placeholder=\"Enter your data here...\"></textarea><br>\n            <input id=\"generate-btn\" type=\"submit\" class=\"btn\" value=\"Generate QR Code\">\n        </form>\n    </div>\n</body>\n</html>\n"}], "5": [{"file": "Dockerfile", "path": "markdown_html_converter/Dockerfile", "code": "FROM python:3.9-slim\nWORKDIR /app\nCOPY requirements.txt ./\nRUN pip install --no-cache-dir -r requirements.txt\nCOPY . .\nCMD [ \"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\" ]"}, {"file": "docker-compose.yml", "path": "markdown_html_converter/docker-compose.yml", "code": "version: '3.1'\nservices:\n  web:\n    build: .\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - .:/code"}, {"file": "requirements.txt", "path": "markdown_html_converter/requirements.txt", "code": "Django>=3.2,<4.0\nMarkdown"}, {"file": "manage.py", "path": "markdown_html_converter/manage.py", "code": "import os\nimport sys\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"markdown_html_converter.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django.\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "markdown_html_converter/markdown_html_converter/__init__.py", "code": ""}, {"file": "settings.py", "path": "markdown_html_converter/markdown_html_converter/settings.py", "code": "from pathlib import Path\nBASE_DIR = Path(__file__).resolve(strict=True).parent.parent\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'markdown_html_converter.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'markdown_html_converter.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "markdown_html_converter/markdown_html_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "wsgi.py", "path": "markdown_html_converter/markdown_html_converter/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "markdown_html_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "markdown_html_converter/converter/admin.py", "code": ""}, {"file": "apps.py", "path": "markdown_html_converter/converter/apps.py", "code": "from django.apps import AppConfig\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'"}, {"file": "models.py", "path": "markdown_html_converter/converter/models.py", "code": ""}, {"file": "views.py", "path": "markdown_html_converter/converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport markdown\n\ndef index(request):\n    return render(request, 'index.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        md_text = request.POST.get('markdown', '')\n        html_text = markdown.markdown(md_text)\n        return JsonResponse({'html': html_text})"}, {"file": "urls.py", "path": "markdown_html_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('convert/', views.convert, name='convert'),\n]"}, {"file": "index.html", "path": "markdown_html_converter/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        #markdown-input, #html-output {\n            min-height: 250px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"heading\" class=\"mt-5\">Markdown to HTML Converter</h1>\n        <div class=\"row\">\n            <div class=\"col-sm-6\">\n                <textarea id=\"markdown-input\" class=\"form-control\" placeholder=\"Enter Markdown...\"></textarea>\n            </div>\n            <div class=\"col-sm-6\">\n                <div id=\"html-output\" class=\"form-control\" readonly></div>\n            </div>\n        </div>\n        <button id=\"convert-btn\" class=\"btn btn-primary mt-3\">Convert</button>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\n    <script>\n        $(document).ready(function() {\n            $('#convert-btn').click(function() {\n                $.ajax({\n                    type: 'POST',\n                    url: '/convert/',\n                    data: {\n                        'markdown': $('#markdown-input').val(),\n                        'csrfmiddlewaretoken': '{{ csrf_token }}'\n                    },\n                    success: function(response) {\n                        $('#html-output').html(response.html);\n                    }\n                });\n            });\n        });\n    </script>\n</body>\n</html>"}, {"file": "__init__.py", "path": "markdown_html_converter/converter/migrations/__init__.py", "code": ""}], "6": [{"file": "manage.py", "path": "todolist/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todolist.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "todolist/todolist/__init__.py", "code": ""}, {"file": "settings.py", "path": "todolist/todolist/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todolist.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todolist.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "todolist/todolist/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo.urls')),\n]\n"}, {"file": "wsgi.py", "path": "todolist/todolist/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todolist.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "todolist/todo/__init__.py", "code": ""}, {"file": "admin.py", "path": "todolist/todo/admin.py", "code": "from django.contrib import admin\nfrom .models import Task\n\nadmin.site.register(Task)\n"}, {"file": "apps.py", "path": "todolist/todo/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoConfig(AppConfig):\n    name = 'todo'\n"}, {"file": "models.py", "path": "todolist/todo/models.py", "code": "from django.db import models\n\n\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title\n"}, {"file": "tests.py", "path": "todolist/todo/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "todolist/todo/views.py", "code": "from django.shortcuts import render\nfrom .models import Task\n\n\ndef index(request):\n    tasks = Task.objects.all()\n    return render(request, 'todo/index.html', {'tasks': tasks})\n"}, {"file": "urls.py", "path": "todolist/todo/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "index.html", "path": "todolist/todo/templates/todo/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.css\">\n</head>\n<body>\n    <h1 id=\"header\" class=\"header\">Todo List</h1>\n    <ul id=\"taskList\" class=\"task-list\">\n        {% for task in tasks %}\n            <li id=\"task{{ task.id }}\" class=\"task\">\n                <h2 class=\"task-title\">{{ task.title }}</h2>\n                <p class=\"task-desc\">{{ task.description }}</p>\n                <p class=\"task-status\">{{ task.completed|yesno:\"Completed,Not Completed\" }}</p>\n            </li>\n        {% endfor %}\n    </ul>\n\n    <canvas id=\"taskChart\" class=\"task-chart\"></canvas>\n\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.5.1/chart.min.js\"></script>\n    <script>\n        const ctx = document.getElementById('taskChart').getContext('2d');\n        const taskChart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Not Completed'],\n                datasets: [{\n                    label: '# of Tasks',\n                    data: [\n                        {% for task in tasks %}{% if task.completed %}1,{% endif %}{% endfor %}0,  // Completed Count\n                        {% for task in tasks %}{% if not task.completed %}1,{% endif %}{% endfor %}0   // Not Completed Count\n                    ],\n                    backgroundColor: ['rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],\n                    borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n            }\n        });\n    </script>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "todolist/todo/migrations/__init__.py", "code": ""}], "7": [{"file": "manage.py", "path": "budgetapp/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budgetapp.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "budgetapp/budgetapp/__init__.py", "code": ""}, {"file": "settings.py", "path": "budgetapp/budgetapp/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budgetapp.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budgetapp.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "budgetapp/budgetapp/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget.urls')),\n]\n"}, {"file": "wsgi.py", "path": "budgetapp/budgetapp/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budgetapp.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "budgetapp/budget/__init__.py", "code": ""}, {"file": "admin.py", "path": "budgetapp/budget/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction\n\nadmin.site.register(Transaction)\n"}, {"file": "apps.py", "path": "budgetapp/budget/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BudgetConfig(AppConfig):\n    name = 'budget'\n"}, {"file": "models.py", "path": "budgetapp/budget/models.py", "code": "from django.db import models\n\n\nclass Transaction(models.Model):\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.description}: {self.amount}\"\n"}, {"file": "views.py", "path": "budgetapp/budget/views.py", "code": "from django.shortcuts import render\nfrom .models import Transaction\n\n\ndef index(request):\n    transactions = Transaction.objects.all()\n    return render(request, 'budget/index.html', {'transactions': transactions})\n"}, {"file": "urls.py", "path": "budgetapp/budget/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "budgetapp/templates/budget/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"app-container\" class=\"container\">\n        <h1 id=\"app-title\" class=\"title\">Budget Control Application</h1>\n        <canvas id=\"balanceChart\" class=\"chart\"></canvas>\n        <script>\n            const ctx = document.getElementById('balanceChart').getContext('2d');\n            const data = {\n                labels: {% for transaction in transactions %}'{{ transaction.date }}',{% endfor %},\n                datasets: [{\n                    label: 'Balance',\n                    data: {% for transaction in transactions %}{{ transaction.amount }},{% endfor %},\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    tension: 0.1\n                }]\n            };\n            const config = {\n                type: 'line',\n                data: data,\n            };\n            const balanceChart = new Chart(ctx, config);\n        </script>\n    </div>\n</body>\n</html>\n"}], "8": [{"file": "manage.py", "path": "calendar_app/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "calendar_app/calendar_app/__init__.py", "code": ""}, {"file": "settings.py", "path": "calendar_app/calendar_app/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'monthly_calendar',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_app.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "calendar_app/calendar_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('monthly_calendar.urls')),\n]\n"}, {"file": "wsgi.py", "path": "calendar_app/calendar_app/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "calendar_app/monthly_calendar/__init__.py", "code": ""}, {"file": "admin.py", "path": "calendar_app/monthly_calendar/admin.py", "code": "from django.contrib import admin\n# Register your models here.\n"}, {"file": "apps.py", "path": "calendar_app/monthly_calendar/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MonthlyCalendarConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'monthly_calendar'\n"}, {"file": "models.py", "path": "calendar_app/monthly_calendar/models.py", "code": "from django.db import models\n# Create your models here.\n"}, {"file": "tests.py", "path": "calendar_app/monthly_calendar/tests.py", "code": "from django.test import TestCase\n# Create your tests here.\n"}, {"file": "views.py", "path": "calendar_app/monthly_calendar/views.py", "code": "from django.shortcuts import render\nimport calendar\nimport datetime\n\n\ndef index(request):\n    now = datetime.datetime.now()\n    cal = calendar.HTMLCalendar(calendar.SUNDAY)\n    current_year = now.year\n    current_month = now.month\n    html_cal = cal.formatmonth(current_year, current_month)\n    return render(request, 'monthly_calendar/index.html', {'calendar': html_cal})\n"}, {"file": "urls.py", "path": "calendar_app/monthly_calendar/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "calendar_app/monthly_calendar/templates/monthly_calendar/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <style>\n        .calendar-table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        .calendar-table th, .calendar-table td {\n            border: 1px solid #dcdcdc;\n            padding: 10px;\n            text-align: center;\n        }\n        .header-row {\n            background-color: #f4f4f4;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"calendar\" class=\"calendar-container\">\n        {{ calendar|safe }}\n    </div>\n</body>\n</html>\n"}], "9": [{"file": "manage.py", "path": "chatbot_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "chatbot_project/chatbot_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "chatbot_project/chatbot_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'replace-this-with-a-secure-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "chatbot_project/chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot.urls')),\n]"}, {"file": "wsgi.py", "path": "chatbot_project/chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "chatbot_project/chatbot/__init__.py", "code": ""}, {"file": "admin.py", "path": "chatbot_project/chatbot/admin.py", "code": "from django.contrib import admin"}, {"file": "apps.py", "path": "chatbot_project/chatbot/apps.py", "code": "from django.apps import AppConfig\n\nclass ChatbotConfig(AppConfig):\n    name = 'chatbot'"}, {"file": "models.py", "path": "chatbot_project/chatbot/models.py", "code": "from django.db import models"}, {"file": "tests.py", "path": "chatbot_project/chatbot/tests.py", "code": "from django.test import TestCase"}, {"file": "urls.py", "path": "chatbot_project/chatbot/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "views.py", "path": "chatbot_project/chatbot/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'chatbot/index.html')"}, {"file": "index.html", "path": "chatbot_project/templates/chatbot/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"{% static 'chatbot/style.css' %}\">\n    <title>AI Chatbot Introduction</title>\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"title\" class=\"title\">Welcome to Our AI Chatbot</h1>\n    </header>\n    <main id=\"main\" class=\"main-content\">\n        <section id=\"intro\" class=\"intro\">\n            <h2 id=\"sub-title\" class=\"sub-title\">About Our Chatbot</h2>\n            <p id=\"description\" class=\"description\">Discover how our AI Chatbot can enhance your customer support experience with seamless interactions and intelligent responses.</p>\n        </section>\n    </main>\n    <footer id=\"footer\" class=\"footer\">\n        <p id=\"footer-text\" class=\"footer-text\">&copy; 2023 AI Chatbot Corporation. All Rights Reserved.</p>\n    </footer>\n</body>\n</html>"}, {"file": "style.css", "path": "chatbot_project/static/chatbot/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\n.header {\n    background-color: #282c34;\n    padding: 20px;\n    text-align: center;\n    color: white;\n}\n.title {\n    margin: 0;\n}\n.main-content {\n    flex: 1;\n    padding: 20px;\n}\n.intro {\n    max-width: 600px;\n    margin: 0 auto;\n}\n.sub-title {\n    margin-bottom: 10px;\n}\n.description {\n    font-size: 18px;\n    line-height: 1.6;\n}\n.footer {\n    background-color: #f1f1f1;\n    text-align: center;\n    padding: 10px;\n}\n.footer-text {\n    margin: 0;\n}"}], "10": [{"file": "manage.py", "path": "calorietracker/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorietracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "calorietracker/calorietracker/__init__.py", "code": ""}, {"file": "settings.py", "path": "calorietracker/calorietracker/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorietracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorietracker.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "calorietracker/calorietracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),\n]"}, {"file": "wsgi.py", "path": "calorietracker/calorietracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorietracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calorietracker/tracker/__init__.py", "code": ""}, {"file": "admin.py", "path": "calorietracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import FoodLog\n\nadmin.site.register(FoodLog)"}, {"file": "apps.py", "path": "calorietracker/tracker/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TrackerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tracker'"}, {"file": "models.py", "path": "calorietracker/tracker/models.py", "code": "from django.db import models\n\n\nclass FoodLog(models.Model):\n    name = models.CharField(max_length=100)\n    calories = models.PositiveIntegerField()\n    date = models.DateField()\n\n    def __str__(self):\n        return f\"{self.name} - {self.calories} calories\""}, {"file": "tests.py", "path": "calorietracker/tracker/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "calorietracker/tracker/views.py", "code": "from django.shortcuts import render\nfrom .models import FoodLog\n\n\ndef index(request):\n    logs = FoodLog.objects.all()\n    return render(request, 'index.html', {'logs': logs})"}, {"file": "urls.py", "path": "calorietracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "index.html", "path": "calorietracker/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calorie Tracker</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"mt-5\" id=\"title\">Calorie Tracker</h1>\n        <table class=\"table table-striped\" id=\"logs-table\">\n            <thead>\n                <tr>\n                    <th scope=\"col\" id=\"name-header\">Food</th>\n                    <th scope=\"col\" id=\"calories-header\">Calories</th>\n                    <th scope=\"col\" id=\"date-header\">Date</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for log in logs %}\n                <tr>\n                    <td class=\"food-name\">{{ log.name }}</td>\n                    <td class=\"food-calories\">{{ log.calories }}</td>\n                    <td class=\"food-date\">{{ log.date }}</td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n\n        <canvas id=\"calorieChart\" class=\"mt-5\"></canvas>\n\n    </div>\n    <script>\n        const logs = {{ logs|safe }};\n        const ctx = document.getElementById('calorieChart').getContext('2d');\n\n        const calorieChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: logs.map(log => log.date),\n                datasets: [{\n                    label: 'Calorie Intake',\n                    data: logs.map(log => log.calories),\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "__init__.py", "path": "calorietracker/tracker/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "calorietracker/tracker/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='FoodLog',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('calories', models.PositiveIntegerField()),\n                ('date', models.DateField()),\n            ],\n        ),\n    ]"}], "11": [{"file": "manage.py", "path": "reviewer/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reviewer.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "reviewer/reviewer/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'django-insecure-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'project_review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'reviewer.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'reviewer.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "reviewer/reviewer/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('project_review.urls')),\n]"}, {"file": "wsgi.py", "path": "reviewer/reviewer/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'reviewer.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "reviewer/reviewer/__init__.py", "code": ""}, {"file": "apps.py", "path": "reviewer/project_review/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ProjectReviewConfig(AppConfig):\n    name = 'project_review'"}, {"file": "urls.py", "path": "reviewer/project_review/urls.py", "code": "from django.urls import path\nfrom .views import review_tests\n\nurlpatterns = [\n    path('', review_tests, name='review_tests'),\n]"}, {"file": "views.py", "path": "reviewer/project_review/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport json\n\n# Example JSON data to use for testing\njson_data = [\n    {\n        \"project_id\": \"3\",\n        \"project_type\": \"website\",\n        \"nl_prompt\": \"Create a website for a password generator.\",\n        \"framework_technical_stack\": [\n            {\n                \"language\": \"Python\",\n                \"technical_stack\": \"Django\"\n            }\n        ],\n        \"nl_checklist\": [\n            {\n                \"page\": \"Home\",\n                \"required\": true,\n                \"function\": [\n                    {\n                        \"function\": \"Display Welcome Message\",\n                        \"description\": \"Show a welcome message or introduction to the password generator.\",\n                        \"required\": false\n                    },\n                    {\n                        \"function\": \"Navigation Button\",\n                        \"description\": \"Button to the password generator page.\",\n                        \"required\": true\n                    }\n                ]\n            },\n            {\n                \"page\": \"About\",\n                \"required\": false,\n                \"function\": [\n                    {\n                        \"function\": \"Description\",\n                        \"description\": \"Provide information about the purpose and functionality of the website.\",\n                        \"required\": false\n                    }\n                ]\n            }\n        ],\n        \"testcode\": [\n            {\n                \"page\": \"Home\",\n                \"function\": [\n                    {\n                        \"function\": \"Display Welcome Message\",\n                        \"test\": \"def test_display_welcome_message(driver, test_url,swelcome_message_id):\\r\\n    driver.get(test_url)\\r\\n    welcome_message = driver.find_element(By.ID,swelcome_message_id)\\r\\n    assert welcome_message.is_displayed()\",\n                        \"parameter\": [\n                            {\n                                \"name\": \"test_url\",\n                                \"description\": \"the url for test\"\n                            },\n                            {\n                                \"name\": \"swelcome_message_id\",\n                                \"description\": \"the id of the welcome message element\"\n                            }\n                        ]\n                    },\n                    {\n                        \"function\": \"Navigation Button\",\n                        \"test\": \"def test_navigation_button(driver, test_url,navigation_button_id, generator_id):\\r\\n    driver.get(test_url)\\r\\n    generate_button = driver.find_element(By.ID,navigation_button_id)\\r\\n    assert generate_button.is_displayed()\\r\\n    generate_button.click()\\r\\n    time.sleep(1)\\r\\n    generator = driver.find_element(By.ID,generator_id)\\r\\n    assert generator.is_displayed()\",\n                        \"parameter\": [\n                            {\n                                \"name\": \"test_url\",\n                                \"description\": \"the url for test\"\n                            },\n                            {\n                                \"name\": \"navigation_button_id\",\n                                \"description\": \"the button id for navigation to generator\"\n                            }\n                        ]\n                    }\n                ]\n            },\n            {\n                \"page\": \"About\",\n                \"function\": [\n                    {\n                        \"function\": \"About Link\",\n                        \"test\": \"def test_about_link(driver, test_url, about_link_id):\\r\\n    driver.get(test_url)\\r\\n    about_link = driver.find_element(By.ID, about_link_id)\\r\\n    assert about_link.is_displayed()\\r\\n    about_link.click()\",\n                        \"parameter\": [\n                            {\n                                \"name\": \"test_url\",\n                                \"description\": \"the url for test\"\n                            },\n                            {\n                                \"name\": \"about_link_id\",\n                                \"description\": \"the hyperlink id of about page in the home page\"\n                            }\n                        ]\n                    },\n                    {\n                        \"function\": \"Description\",\n                        \"test\": \"def test_description(driver, description_id):\\r\\n    description = driver.find_element(By.ID, description_id)\\r\\n    assert description.is_displayed()\",\n                        \"parameter\": [\n                            {\n                                \"name\": \"description_id\",\n                                \"description\": \"the id of the discription element\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n]\n\n\ndef review_tests(request):\n    return render(request, 'project_review/review.html', {'json_data': json_data})\n"}, {"file": "review.html", "path": "reviewer/project_review/templates/project_review/review.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Project Review</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css\">\n</head>\n<body>\n<div class=\"container\">\n    <h1 class=\"mt-4\">Project Test Code Review</h1>\n    <div class=\"row\">\n        <div class=\"col-12\">\n            {% for project in json_data %}\n                <div class=\"card my-4\">\n                    <div class=\"card-header\">\n                        Project ID: {{ project.project_id }} - {{ project.nl_prompt }}\n                    </div>\n                    <div class=\"card-body\">\n                        {% for testcode in project.testcode %}\n                            <h5>Page: {{ testcode.page }}</h5>\n                            <ul class=\"list-group\">\n                                {% for function in testcode.function %}\n                                    <li class=\"list-group-item\">\n                                        <h6>{{ function.function }}</h6>\n                                        <pre class=\"pre-scrollable\">{{ function.test }}</pre>\n                                        <div class=\"btn-group btn-group-toggle\" data-toggle=\"buttons\">\n                                            <label class=\"btn btn-secondary\">\n                                                <input type=\"radio\" name=\"status_{{ function.function }}\" value=\"Pass\" autocomplete=\"off\"> Pass\n                                            </label>\n                                            <label class=\"btn btn-secondary\">\n                                                <input type=\"radio\" name=\"status_{{ function.function }}\" value=\"Fail\" autocomplete=\"off\"> Fail\n                                            </label>\n                                            <label class=\"btn btn-secondary active\">\n                                                <input type=\"radio\" name=\"status_{{ function.function }}\" value=\"Select\" autocomplete=\"off\"> Select\n                                            </label>\n                                        </div>\n                                    </li>\n                                {% endfor %}\n                            </ul>\n                        {% endfor %}\n                    </div>\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n</div>\n<script src=\"https://code.jquery.com/jquery-3.2.1.slim.min.js\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js\"></script>\n<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "__init__.py", "path": "reviewer/project_review/__init__.py", "code": ""}], "12": [{"file": "manage.py", "path": "accounting_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"accounting_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "accounting_project/accounting/__init__.py", "code": ""}, {"file": "models.py", "path": "accounting_project/accounting/models.py", "code": "from django.db import models\n\nclass Claim(models.Model):\n    STATUS_CHOICES = [\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected'),\n    ]\n\n    CATEGORY_CHOICES = [\n        ('Travel', 'Travel Expenses'),\n        ('Labor', 'Labor Expenses'),\n        ('Management', 'Management Expenses'),\n        ('Equipment', 'Equipment Expenses'),\n    ]\n\n    category = models.CharField(max_length=50, choices=CATEGORY_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='Pending')\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.category}: {self.amount} - {self.status}\"\n"}, {"file": "views.py", "path": "accounting_project/accounting/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Claim\nfrom django.http import HttpResponse\n\ndef submit_claim(request):\n    if request.method == 'POST':\n        category = request.POST.get('category')\n        amount = request.POST.get('amount')\n        description = request.POST.get('description')\n        new_claim = Claim(category=category, amount=amount, description=description)\n        new_claim.save()\n        return redirect('claims')\n    return render(request, 'accounting/submit_claim.html')\n\n\ndef view_claims(request):\n    claims = Claim.objects.all()\n    return render(request, 'accounting/claims_list.html', {'claims': claims})\n\n\ndef admin_panel(request):\n    claims = Claim.objects.all()\n    return render(request, 'accounting/admin_panel.html', {'claims': claims})\n\n\ndef update_claim_status(request, claim_id, new_status):\n    claim = Claim.objects.get(id=claim_id)\n    claim.status = new_status\n    claim.save()\n    return redirect('admin_panel')\n"}, {"file": "urls.py", "path": "accounting_project/accounting/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('submit/', views.submit_claim, name='submit_claim'),\n    path('claims/', views.view_claims, name='claims'),\n    path('admin/', views.admin_panel, name='admin_panel'),\n    path('update_claim/<int:claim_id>/<str:new_status>/', views.update_claim_status, name='update_claim_status'),\n]\n"}, {"file": "admin.py", "path": "accounting_project/accounting/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim\n\nadmin.site.register(Claim)\n"}, {"file": "apps.py", "path": "accounting_project/accounting/apps.py", "code": "from django.apps import AppConfig\n\n\nclass AccountingConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'accounting'\n"}, {"file": "__init__.py", "path": "accounting_project/accounting_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "accounting_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'accounting',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'accounting_project.urls'\n\nTEMPLATES = [\n    {\n        \"BACKEND\": \"django.template.backends.django.DjangoTemplates\",\n        \"DIRS\": [os.path.join(BASE_DIR, \"templates\")],\n        \"APP_DIRS\": True,\n        \"OPTIONS\": {\n            \"context_processors\": [\n                \"django.template.context_processors.debug\",\n                \"django.template.context_processors.request\",\n                \"django.contrib.auth.context_processors.auth\",\n                \"django.contrib.messages.context_processors.messages\",\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'accounting_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "accounting_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('accounting.urls')),\n]\n"}, {"file": "wsgi.py", "path": "accounting_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'accounting_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "submit_claim.html", "path": "accounting_project/templates/accounting/submit_claim.html", "code": "<html>\n<head>\n    <title>Submit Claim</title>\n</head>\n<body>\n<h1 id=\"submit-claim-title\" class=\"title\">Submit a Claim</h1>\n<form method=\"post\" id=\"submit-claim-form\" class=\"form\">\n    {% csrf_token %}\n    <label for=\"category\" class=\"form-label\">Category:</label>\n    <select name=\"category\" id=\"category\" class=\"form-select\">\n        <option value=\"Travel\">Travel Expenses</option>\n        <option value=\"Labor\">Labor Expenses</option>\n        <option value=\"Management\">Management Expenses</option>\n        <option value=\"Equipment\">Equipment Expenses</option>\n    </select>\n    <br>\n    <label for=\"amount\" class=\"form-label\">Amount:</label>\n    <input type=\"number\" name=\"amount\" step=\"0.01\" id=\"amount\" class=\"form-input\">\n    <br>\n    <label for=\"description\" class=\"form-label\">Description:</label>\n    <textarea name=\"description\" id=\"description\" class=\"form-textarea\"></textarea>\n    <br>\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</form>\n</body>\n</html>\n"}, {"file": "claims_list.html", "path": "accounting_project/templates/accounting/claims_list.html", "code": "<html>\n<head>\n    <title>Claims List</title>\n</head>\n<body>\n<h1 id=\"claims-list-title\" class=\"title\">Claims List</h1>\n<table id=\"claims-table\" class=\"table\">\n    <thead>\n    <tr>\n        <th class=\"table-header\">Category</th>\n        <th class=\"table-header\">Amount</th>\n        <th class=\"table-header\">Description</th>\n        <th class=\"table-header\">Status</th>\n    </tr>\n    </thead>\n    <tbody>\n    {% for claim in claims %}\n        <tr>\n            <td class=\"table-data\">{{ claim.category }}</td>\n            <td class=\"table-data\">${{ claim.amount }}</td>\n            <td class=\"table-data\">{{ claim.description }}</td>\n            <td class=\"table-data\">{{ claim.status }}</td>\n        </tr>\n    {% endfor %}\n    </tbody>\n</table>\n</body>\n</html>\n"}, {"file": "admin_panel.html", "path": "accounting_project/templates/accounting/admin_panel.html", "code": "<html>\n<head>\n    <title>Admin Panel</title>\n</head>\n<body>\n<h1 id=\"admin-panel-title\" class=\"title\">Admin Panel</h1>\n<table id=\"admin-table\" class=\"table\">\n    <thead>\n    <tr>\n        <th class=\"table-header\">Category</th>\n        <th class=\"table-header\">Amount</th>\n        <th class=\"table-header\">Description</th>\n        <th class=\"table-header\">Status</th>\n        <th class=\"table-header\">Actions</th>\n    </tr>\n    </thead>\n    <tbody>\n    {% for claim in claims %}\n        <tr>\n            <td class=\"table-data\">{{ claim.category }}</td>\n            <td class=\"table-data\">${{ claim.amount }}</td>\n            <td class=\"table-data\">{{ claim.description }}</td>\n            <td class=\"table-data\">{{ claim.status }}</td>\n            <td class=\"table-data\">\n                <a href=\"{% url 'update_claim_status' claim.id 'Approved' %}\" class=\"btn btn-success\">Approve</a>\n                <a href=\"{% url 'update_claim_status' claim.id 'Rejected' %}\" class=\"btn btn-danger\">Reject</a>\n            </td>\n        </tr>\n    {% endfor %}\n    </tbody>\n</table>\n</body>\n</html>\n"}], "13": [{"file": "manage.py", "path": "crm_project/manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"crm_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "crm_project/crm_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "crm_project/crm_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crm_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'crm_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'crm_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "crm_project/crm_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('crm_app.urls')),\n]"}, {"file": "wsgi.py", "path": "crm_project/crm_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "crm_project/crm_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "crm_project/crm_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)"}, {"file": "apps.py", "path": "crm_project/crm_app/apps.py", "code": "from django.apps import AppConfig\n\nclass CrmAppConfig(AppConfig):\n    name = 'crm_app'"}, {"file": "models.py", "path": "crm_project/crm_app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10)\n    company = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=20)\n    preferred_products = models.ManyToManyField('Product', blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f\"{self.customer} purchased {self.product}\""}, {"file": "tests.py", "path": "crm_project/crm_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "crm_project/crm_app/views.py", "code": "from django.shortcuts import render\nfrom .models import Customer, Product, PurchaseRecord\n\n# Define views for your CRM application.\n\n# You can create views for listing, adding, updating customers, products, etc."}, {"file": "urls.py", "path": "crm_project/crm_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Define your URL patterns here.\n]"}, {"file": "0001_initial.py", "path": "crm_project/crm_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\nimport django.db.models.deletion\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Customer',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('birthday', models.DateField()),\n                ('age', models.IntegerField()),\n                ('sex', models.CharField(max_length=10)),\n                ('company', models.CharField(max_length=255)),\n                ('phone_number', models.CharField(max_length=20)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('category', models.CharField(max_length=255)),\n                ('recommended_price', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='PurchaseRecord',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('datetime', models.DateTimeField(auto_now_add=True)),\n                ('quantity', models.IntegerField()),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm_app.Customer')),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='crm_app.Product')),\n            ],\n        ),\n        migrations.AddField(\n            model_name='customer',\n            name='preferred_products',\n            field=models.ManyToManyField(blank=True, to='crm_app.Product'),\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "crm_project/crm_app/migrations/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django...\") from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "helloworld/helloworld/__init__.py", "code": ""}, {"file": "settings.py", "path": "helloworld/helloworld/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom helloapp.views import hello_world\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('helloworld/', hello_world, name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "helloworld/helloworld/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "helloworld/helloworld/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "helloworld/helloapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "helloworld/helloapp/admin.py", "code": ""}, {"file": "apps.py", "path": "helloworld/helloapp/apps.py", "code": "from django.apps import AppConfig\n\nclass HelloappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloapp'"}, {"file": "models.py", "path": "helloworld/helloapp/models.py", "code": ""}, {"file": "views.py", "path": "helloworld/helloapp/views.py", "code": "from django.http import HttpResponse\n\ndef hello_world(request):\n    html = \"\"\"<html><body><div id='hello-container' class='container'><h1 id='hello-title' class='title'>Hello, World!</h1></div></body></html>\"\"\"\n    return HttpResponse(html)"}, {"file": "tests.py", "path": "helloworld/helloapp/tests.py", "code": ""}, {"file": "migrations/__init__.py", "path": "helloworld/helloapp/migrations/__init__.py", "code": ""}], "15": [{"file": "__init__.py", "path": "myproject/myapp/migrations/__init__.py", "code": ""}, {"file": "admin.py", "path": "myproject/myapp/admin.py", "code": ""}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"}, {"file": "models.py", "path": "myproject/myapp/models.py", "code": ""}, {"file": "tests.py", "path": "myproject/myapp/tests.py", "code": ""}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\n\ndef index(request):\n    return render(request, 'index.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "index.html", "path": "myproject/myapp/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <button id=\"jumpButton\" class=\"btn-primary\" onclick=\"location.href='/helloworld/'\">Go to HelloWorld</button>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myproject/myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1 id=\"helloTitle\" class=\"title\">Hello, World!</h1>\n</body>\n</html>"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.helloworld, name='helloworld')\n]\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "16": [{"file": "main.py", "path": "src/main.py", "code": "import pandas as pd\n\ndef read_subjects(file_path):\n    subjects_df = pd.read_excel(file_path)\n    return subjects_df\n\ndef pivot_subjects(subjects_df):\n    pivot_table = subjects_df.pivot(index='Weekday', columns='Time', values='Name')\n    return pivot_table\n\ndef write_subjects(pivot_table, output_path):\n    pivot_table.to_excel(output_path)\n\ndef main():\n    input_file = 'Spring Semester Subjects.xlsx'\n    output_file = 'Output Subjects.xlsx'\n\n    subjects_df = read_subjects(input_file)\n    pivot_table = pivot_subjects(subjects_df)\n    write_subjects(pivot_table, output_file)\n\nif __name__ == '__main__':\n    main()"}, {"file": "requirements.txt", "path": "src/requirements.txt", "code": "pandas\nopenpyxl"}, {"file": "README.md", "path": "src/README.md", "code": "# Subject Table Transformer\n\nThis Python project reads an Excel file containing a list of subjects, transforms the data into a two-dimensional table based on weekdays and class periods, and outputs the result into another Excel file.\n\n## Prerequisites\n\n- Python 3.x\n- Pandas library\n- Openpyxl library\n\n## Setup and Execution\n\n1. Install the required packages:\n```\npip install -r requirements.txt\n```\n\n2. Place the 'Spring Semester Subjects.xlsx' in the same directory as 'main.py'.\n\n3. Run the program:\n```\npython main.py\n```\n\n4. The output file 'Output Subjects.xlsx' will be created in the same directory."}, {"file": "Spring Semester Subjects.xlsx", "path": "src/Spring Semester Subjects.xlsx", "code": "Note: This is a placeholder for your actual input Excel file. Please replace it with your 'Spring Semester Subjects.xlsx' file."}], "17": [{"file": "main.py", "path": "project/src/main.py", "code": "\nimport pandas as pd\nimport statsmodels.api as sm\n\n# Load the dataset\ndef load_data(file_path):\n    return pd.read_excel(file_path)\n\n# Prepare data with a dependent variable lag\ndef prepare_data(data):\n    data['result_lag'] = data['result'].shift(1)\n    data = data.dropna()\n    independent_vars = data.columns.difference(['result'])\n    X = data[independent_vars]\n    X = sm.add_constant(X)\n    y = data['result']\n    return X, y\n\n# Fit logistic regression model\ndef fit_logistic_model(X, y):\n    model = sm.Logit(y, X)\n    result = model.fit()\n    return result\n\n# Save model summary to Excel\ndef save_summary_to_excel(summary, output_path):\n    df_summary = pd.DataFrame(summary.tables[0]._rows)\n    with pd.ExcelWriter(output_path, engine='openpyxl') as writer:\n        df_summary.to_excel(writer, index=False, header=False)\n\n\ndef main():\n    data = load_data('Gamedata.xlsx')\n    X, y = prepare_data(data)\n    model = fit_logistic_model(X, y)\n    save_summary_to_excel(model.summary(), 'Logistic.xlsx')\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "requirements.txt", "path": "project/src/requirements.txt", "code": "\npandas\nopenpyxl\nstatsmodels\n"}, {"file": "README.md", "path": "project/README.md", "code": "\n# Logistic Regression Project\n\nThis project reads a dataset from an Excel file 'Gamedata.xlsx', performs a logistic regression using the 'result' column as the dependent variable (with a one-period lag), and outputs the model's summary to 'Logistic.xlsx'.\n\n## Structure\n\n- `src/main.py`: Contains the primary script for executing the logic.\n- `src/requirements.txt`: Lists required Python libraries.\n\n## Setup and Execution\n\n1. Ensure you have Python installed with pip.\n2. Navigate to the `src` directory.\n3. Install dependencies using `pip install -r requirements.txt`.\n4. Run the program using `python main.py`.\n"}], "18": [{"file": "main.py", "path": "bashcrawl/main.py", "code": "from game import Game\n\ndef main():\n    game = Game()\n    game.start()\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "game.py", "path": "bashcrawl/game.py", "code": "from room import Room\n\nclass Game:\n    def __init__(self):\n        self.rooms = {\n            \"outside\": Room(\"Outside\", \"You are standing outside a spooky mansion.\"),\n            \"foyer\": Room(\"Foyer\", \"A dimly lit foyer full of shadows.\"),\n            \"hallway\": Room(\"Hallway\", \"A long and narrow hallway.\"),\n        }\n\n        self.current_room = self.rooms[\"outside\"]\n        self.rooms[\"outside\"].add_exit(\"north\", self.rooms[\"foyer\"])\n        self.rooms[\"foyer\"].add_exit(\"south\", self.rooms[\"outside\"])\n        self.rooms[\"foyer\"].add_exit(\"east\", self.rooms[\"hallway\"])\n\n    def start(self):\n        while True:\n            print(self.current_room.name)\n            print(self.current_room.description)\n            command = input(\"Where do you want to go? \").strip().lower()\n\n            if command in self.current_room.exits:\n                self.current_room = self.current_room.exits[command]\n            else:\n                print(\"You can't go that way.\")"}, {"file": "room.py", "path": "bashcrawl/room.py", "code": "class Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.exits = {}\n\n    def add_exit(self, direction, room):\n        self.exits[direction] = room"}], "19": [{"file": "read_csv.py", "path": "project/read_csv.py", "code": "import pandas as pd\nimport plotly.express as px\n\ndef read_and_plot(csv_file):\n    # Read the dataset\n    data = pd.read_csv(csv_file, parse_dates=['Date of death'])\n    \n    # Create a new column for the week from the date of death\n    data['Week'] = data['Date of death'].dt.to_period('W').apply(lambda r: r.start_time)\n\n    # Count deaths per week\n    weekly_deaths = data['Week'].value_counts().sort_index()\n\n    # Create a histogram using Plotly\n    fig = px.bar(weekly_deaths, \n                 title='Weekly Deaths Histogram',\n                 labels={'value': 'Number of Deaths', 'index': 'Week'},\n                 template='plotly_white')\n\n    # Save the HTML file to display the histogram\n    fig.write_html('project/output/histogram.html')\n\nif __name__ == '__main__':\n    # Execute the function with the path to the CSV file\n    read_and_plot('project/deathlist.csv')\n"}, {"file": "index.html", "path": "project/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Weekly Deaths Histogram</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .container { width: 80%; margin: auto; background: #f2f2f2; padding: 20px; }\n        .header { text-align: center; }\n    </style>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"header\" class=\"header\">Weekly Deaths Histogram</h1>\n        <iframe id=\"histogram\" class=\"histogram-frame\" src=\"output/histogram.html\" width=\"100%\" height=\"600px\" frameborder=\"0\"></iframe>\n    </div>\n</body>\n</html>"}, {"file": "requirements.txt", "path": "project/requirements.txt", "code": "pandas\nplotly"}], "20": [{"file": "manage.py", "path": "blog_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "blog_project/blog_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "blog_project/blog_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key-here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blog_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'blog_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static'),]"}, {"file": "urls.py", "path": "blog_project/blog_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "wsgi.py", "path": "blog_project/blog_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "blog_project/blog/__init__.py", "code": ""}, {"file": "admin.py", "path": "blog_project/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)"}, {"file": "apps.py", "path": "blog_project/blog/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    name = 'blog'"}, {"file": "models.py", "path": "blog_project/blog/models.py", "code": "from django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    date_posted = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "blog_project/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='blog-home'),\n]"}, {"file": "views.py", "path": "blog_project/blog/views.py", "code": "from django.shortcuts import render\nfrom .models import Post\n\ndef home(request):\n    context = {\n        'posts': Post.objects.all()\n    }\n    return render(request, 'blog/home.html', context)"}, {"file": "home.html", "path": "blog_project/templates/blog/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blog Home</title>\n    <link rel=\"stylesheet\" href=\"{{ STATIC_URL }}style.css\">\n</head>\n<body>\n    <div id=\"main-container\" class=\"container\">\n        <h1 id=\"main-heading\" class=\"heading\">Blog Home</h1>\n        {% for post in posts %}\n            <div id=\"post-{{ post.id }}\" class=\"post\">\n                <h2 id=\"post-title-{{ post.id }}\" class=\"post-title\">{{ post.title }}</h2>\n                <p id=\"post-content-{{ post.id }}\" class=\"post-content\">{{ post.content }}</p>\n                <small id=\"post-date-{{ post.id }}\" class=\"post-date\">Posted on {{ post.date_posted }}</small>\n            </div>\n            <hr>\n        {% endfor %}\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "blog_project/static/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    padding: 20px;\n    background-color: #f9f9f9;\n}\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    padding: 20px;\n}\n.heading {\n    text-align: center;\n    color: #333;\n}\n.post {\n    margin-bottom: 20px;\n}\n.post-title {\n    font-size: 1.5em;\n    color: #333;\n}\n.post-content {\n    color: #666;\n}\n.post-date {\n    color: #aaa;\n    font-size: 0.8em;\n}"}]}