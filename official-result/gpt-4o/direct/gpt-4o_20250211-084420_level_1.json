{"1": [{"file": "manage.py", "path": "bmicalculator/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmicalculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "bmicalculator/bmicalculator/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmicalculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmicalculator.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "bmicalculator/bmicalculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),\n]\n"}, {"file": "wsgi.py", "path": "bmicalculator/bmicalculator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmicalculator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "bmicalculator/bmicalculator/__init__.py", "code": ""}, {"file": "apps.py", "path": "bmicalculator/calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calculator'\n"}, {"file": "__init__.py", "path": "bmicalculator/calculator/__init__.py", "code": ""}, {"file": "views.py", "path": "bmicalculator/calculator/views.py", "code": "from django.shortcuts import render\n\ndef bmi_calculator(request):\n    bmi_result = None\n    if request.method == 'POST':\n        height = float(request.POST.get('height'))\n        weight = float(request.POST.get('weight'))\n        bmi_result = weight / (height * height)\n    return render(request, 'calculator/bmi_calculator.html', {'bmi_result': bmi_result})\n"}, {"file": "urls.py", "path": "bmicalculator/calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]\n"}, {"file": "bmi_calculator.html", "path": "bmicalculator/templates/calculator/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"bmi-calculator\">\n        <h1 id=\"bmi-calculator-title\" class=\"title\">BMI Calculator</h1>\n        <form method=\"post\">\n            <label for=\"height\" id=\"height-label\" class=\"label\">Height (m):</label>\n            <input type=\"number\" step=\"0.01\" name=\"height\" id=\"height-input\" class=\"input\" required>\n            <br>\n            <label for=\"weight\" id=\"weight-label\" class=\"label\">Weight (kg):</label>\n            <input type=\"number\" step=\"0.1\" name=\"weight\" id=\"weight-input\" class=\"input\" required>\n            <br>\n            <button type=\"submit\" id=\"calculate-button\" class=\"button\">Calculate BMI</button>\n        </form>\n        {% if bmi_result is not None %}\n            <h2 id=\"bmi-result-label\" class=\"result\">Your BMI: {{ bmi_result }}</h2>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "bmicalculator/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "currency_converter/currency_converter/__init__.py", "code": ""}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nauth_password_validators = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "currency_converter/converter/admin.py", "code": "from django.contrib import admin\n"}, {"file": "apps.py", "path": "currency_converter/converter/apps.py", "code": "from django.apps import AppConfig\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'\n"}, {"file": "models.py", "path": "currency_converter/converter/models.py", "code": "from django.db import models\n"}, {"file": "tests.py", "path": "currency_converter/converter/tests.py", "code": "from django.test import TestCase\n"}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n    currency_data = {\n        'USD': 1.0,\n        'EUR': 0.9,\n        'JPY': 110.0\n    }\n    if request.method == 'POST':\n        amount = float(request.POST.get('amount', 0))\n        from_currency = request.POST.get('from_currency')\n        to_currency = request.POST.get('to_currency')\n\n        conversion_rate = currency_data[to_currency] / currency_data[from_currency]\n        converted_amount = amount * conversion_rate\n        context = {\n            'amount': amount,\n            'from_currency': from_currency,\n            'to_currency': to_currency,\n            'conversion_rate': conversion_rate,\n            'converted_amount': converted_amount,\n            'currency_data': currency_data\n        }\n    else:\n        context = {'currency_data': currency_data}\n\n    return render(request, 'converter/index.html', context)\n"}, {"file": "index.html", "path": "currency_converter/templates/converter/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <style>\n        body { font-family: Arial, sans-serif; }\n        .container { width: 300px; margin: 0 auto; padding-top: 50px; }\n        #conversion-form { display: flex; flex-direction: column; }\n        #conversion-form input, #conversion-form select { margin: 5px 0; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"heading\">Currency Converter</h1>\n        <form id=\"conversion-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"amount\" class=\"form-label\">Amount:</label>\n            <input type=\"number\" id=\"amount\" class=\"form-control\" name=\"amount\" step=\"any\" required>\n\n            <label for=\"from_currency\" class=\"form-label\">From Currency:</label>\n            <select id=\"from_currency\" class=\"form-select\" name=\"from_currency\" required>\n                {% for code in currency_data.keys %}\n                    <option value=\"{{ code }}\">{{ code }}</option>\n                {% endfor %}\n            </select>\n\n            <label for=\"to_currency\" class=\"form-label\">To Currency:</label>\n            <select id=\"to_currency\" class=\"form-select\" name=\"to_currency\" required>\n                {% for code in currency_data.keys %}\n                    <option value=\"{{ code }}\">{{ code }}</option>\n                {% endfor %}\n            </select>\n\n            <button type=\"submit\" class=\"convert-button\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n        <div id=\"result\">\n            <h2 class=\"result-heading\">Conversion Result</h2>\n            <p class=\"result-text\">{{ amount }} {{ from_currency }} = {{ converted_amount }} {{ to_currency }}</p>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key-here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "password_generator/generator/admin.py", "code": ""}, {"file": "apps.py", "path": "password_generator/generator/apps.py", "code": "from django.apps import AppConfig\n\nclass GeneratorConfig(AppConfig):\n    name = 'generator'\n"}, {"file": "models.py", "path": "password_generator/generator/models.py", "code": ""}, {"file": "tests.py", "path": "password_generator/generator/tests.py", "code": ""}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nimport random\n\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\n\ndef password(request):\n    characters = list('abcdefghijklmnopqrstuvwxyz')\n\n    if request.GET.get('uppercase'):\n        characters.extend(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    if request.GET.get('numbers'):\n        characters.extend(list('0123456789'))\n    if request.GET.get('special'):\n        characters.extend(list('!@#$%^&*()'))\n\n    length = int(request.GET.get('length', 12))\n\n    thepassword = ''\n    for x in range(length):\n        thepassword += random.choice(characters)\n\n    return render(request, 'generator/password.html', {'password': thepassword})\n"}, {"file": "__init__.py", "path": "password_generator/generator/migrations/__init__.py", "code": ""}, {"file": "home.html", "path": "password_generator/generator/templates/generator/home.html", "code": "<h1 id=\"title\" class=\"title\">Welcome to the Password Generator</h1>\n\n<form id=\"password-form\" class=\"password-form\" method=\"get\" action=\"/password/\">\n    <label for=\"length\" id=\"length-label\" class=\"length-label\">Password length:</label>\n    <input type=\"number\" id=\"length\" class=\"length-input\" name=\"length\" min=\"6\" max=\"30\" value=\"12\">\n\n    <label for=\"uppercase\" id=\"uppercase-label\" class=\"uppercase-label\">\n        <input type=\"checkbox\" id=\"uppercase\" class=\"uppercase-checkbox\" name=\"uppercase\">Include Uppercase Letters\n    </label>\n\n    <label for=\"numbers\" id=\"numbers-label\" class=\"numbers-label\">\n        <input type=\"checkbox\" id=\"numbers\" class=\"numbers-checkbox\" name=\"numbers\">Include Numbers\n    </label>\n\n    <label for=\"special\" id=\"special-label\" class=\"special-label\">\n        <input type=\"checkbox\" id=\"special\" class=\"special-checkbox\" name=\"special\">Include Special Characters\n    </label>\n\n    <button type=\"submit\" id=\"generate-button\" class=\"generate-button\">Generate Password</button>\n</form>\n"}, {"file": "password.html", "path": "password_generator/generator/templates/generator/password.html", "code": "<h1 id=\"password-title\" class=\"password-title\">Your Password</h1>\n<p id=\"generated-password\" class=\"generated-password\">{{ password }}</p>\n<a href=\"/\" id=\"back-link\" class=\"back-link\">Generate another password</a>\n"}], "4": [{"file": "manage.py", "path": "qr_generator/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "qr_generator/qr_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "qr_generator/qr_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_generator.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "qr_generator/qr_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "qr_generator/qr_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "qr_generator/qr_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "qr_generator/qr_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "qr_generator/qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'\n"}, {"file": "models.py", "path": "qr_generator/qr_app/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "qr_generator/qr_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "qr_generator/qr_app/views.py", "code": "from django.shortcuts import render\nimport qrcode\nfrom io import BytesIO\nfrom django.http import HttpResponse\nfrom django.template import loader\n\n\ndef generate_qr_code(request):\n    context = {}\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color='black', back_color='white')\n        buffer = BytesIO()\n        img.save(buffer)\n        buffer.seek(0)\n        return HttpResponse(buffer, content_type='image/png')\n    else:\n        return render(request, 'qr_app/index.html', context)\n"}, {"file": "urls.py", "path": "qr_generator/qr_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.generate_qr_code, name='generate_qr_code'),\n]\n"}, {"file": "index.html", "path": "qr_generator/templates/qr_app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.3/css/bulma.min.css\">\n</head>\n<body>\n    <section class=\"section\">\n        <div class=\"container\">\n            <h1 class=\"title\" id=\"page-title\">QR Code Generator</h1>\n            <form method=\"post\" id=\"qr-form\">\n                {% csrf_token %}\n                <div class=\"field\">\n                    <label class=\"label\" for=\"data-input\">Data to encode:</label>\n                    <div class=\"control\">\n                        <input class=\"input\" type=\"text\" name=\"data\" id=\"data-input\" placeholder=\"Enter data here\">\n                    </div>\n                </div>\n                <div class=\"field is-grouped\">\n                    <div class=\"control\">\n                        <button type=\"submit\" class=\"button is-link\" id=\"generate-button\">Generate QR Code</button>\n                    </div>\n                </div>\n            </form>\n            <div id=\"qr-output\">\n                <!-- QR code image will be displayed here -->\n                {% if data %}\n                    <img src=\"data:image/png;base64,{{ data|safe }}\" id=\"qr-image\" class=\"image\">\n                {% endif %}\n            </div>\n        </div>\n    </section>\n</body>\n</html>\n"}], "5": [{"file": "manage.py", "path": "markdown_html_converter/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "markdown_html_converter/converter_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "markdown_html_converter/converter_project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'converter_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "markdown_html_converter/converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom converter_app import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n    path('convert/', views.convert, name='convert'),\n]"}, {"file": "wsgi.py", "path": "markdown_html_converter/converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "markdown_html_converter/converter_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "markdown_html_converter/converter_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "markdown_html_converter/converter_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter_app'"}, {"file": "models.py", "path": "markdown_html_converter/converter_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "markdown_html_converter/converter_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "markdown_html_converter/converter_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport markdown\n\n\ndef index(request):\n    return render(request, 'converter_app/index.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        # Adding id and class to each HTML tag for recommendation\n        soup = BeautifulSoup(html, 'html.parser')\n        for tag in soup.find_all():\n            tag['id'] = f'id-{tag.name}'\n            tag['class'] = f'class-{tag.name}'\n        html_with_attrs = str(soup)\n        return JsonResponse({'html': html_with_attrs})\n    return JsonResponse({'error': 'Invalid request'}, status=400)"}, {"file": "index.html", "path": "markdown_html_converter/templates/converter_app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n</head>\n<body>\n    <h1 id=\"header\" class=\"header\">Markdown to HTML Converter</h1>\n    <form id=\"form-convert\" class=\"form-convert\" method=\"post\" action=\"/convert/\">\n        <textarea id=\"textarea-markdown\" class=\"textarea-markdown\" name=\"markdown_text\" rows=\"10\" cols=\"50\" placeholder=\"Enter your markdown here...\"></textarea><br>\n        <button id=\"button-convert\" class=\"button-convert\" type=\"submit\">Convert</button>\n    </form>\n    <div id=\"div-html-output\" class=\"div-html-output\">\n        <h2 id=\"header-html-output\" class=\"header-html-output\">HTML Output</h2>\n        <div id=\"html-output\" class=\"html-output\"></div>\n    </div>\n    <script>\n        document.getElementById('form-convert').onsubmit = async function(event) {\n            event.preventDefault();\n            const markdownText = document.getElementById('textarea-markdown').value;\n            const response = await fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                },\n                body: new URLSearchParams({markdown_text: markdownText})\n            });\n            const result = await response.json();\n            document.getElementById('html-output').innerHTML = result.html;\n        }\n    </script>\n</body>\n</html>"}], "6": [{"file": "manage.py", "path": "todoproject/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todoproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\n\"\n            \"available on your PYTHONPATH environment variable? Did you \\n\"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "todoproject/todoproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "todoproject/todoproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todoapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todoproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todoproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "todoproject/todoproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todoapp.urls')),\n]"}, {"file": "wsgi.py", "path": "todoproject/todoproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todoproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "todoproject/todoapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "todoproject/todoapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Todo\n\nadmin.site.register(Todo)"}, {"file": "apps.py", "path": "todoproject/todoapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todoapp'"}, {"file": "models.py", "path": "todoproject/todoapp/models.py", "code": "from django.db import models\n\n\nclass Todo(models.Model):\n    task = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.task"}, {"file": "tests.py", "path": "todoproject/todoapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "todoproject/todoapp/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Todo\n\n\ndef index(request):\n    todos = Todo.objects.all()\n    completed_tasks = todos.filter(completed=True).count()\n    total_tasks = todos.count()\n    context = {\n        'todos': todos,\n        'completed_tasks': completed_tasks,\n        'total_tasks': total_tasks,\n    }\n    return render(request, 'todoapp/index.html', context)\n\n\ndef add_task(request):\n    if request.method == 'POST':\n        task = request.POST.get('task')\n        Todo.objects.create(task=task)\n    return redirect('/')\n\n\ndef toggle_task(request, task_id):\n    task = Todo.objects.get(id=task_id)\n    task.completed = not task.completed\n    task.save()\n    return redirect('/')\n\n\ndef delete_task(request, task_id):\n    task = Todo.objects.get(id=task_id)\n    task.delete()\n    return redirect('/')"}, {"file": "urls.py", "path": "todoproject/todoapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('add/', views.add_task, name='add_task'),\n    path('toggle/<int:task_id>/', views.toggle_task, name='toggle_task'),\n    path('delete/<int:task_id>/', views.delete_task, name='delete_task'),\n]"}, {"file": "index.html", "path": "todoproject/todoapp/templates/todoapp/index.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Todo Application</title>\n</head>\n<body>\n    <h1 id='heading' class='title'>Todo List</h1>\n    <form id='form' action='add/' method='POST'>\n        {% csrf_token %}\n        <input id='new-task' class='input-field' type='text' name='task' required>\n        <button id='add-button' class='btn' type='submit'>Add Task</button>\n    </form>\n    <ul id='task-list' class='list'>\n        {% for todo in todos %}\n            <li id='task-{{ todo.id }}' class='list-item'>\n                {{ todo.task }} - \n                {% if todo.completed %}\n                    <span id='completed-{{ todo.id }}' class='completed'>Completed</span>\n                {% else %}\n                    <span id='not-completed-{{ todo.id }}' class='not-completed'>Not Completed</span>\n                {% endif %}\n                <a href='toggle/{{ todo.id }}/' id='toggle-{{ todo.id }}' class='toggle-link'>Toggle</a>\n                <a href='delete/{{ todo.id }}/' id='delete-{{ todo.id }}' class='delete-link'>Delete</a>\n            </li>\n        {% endfor %}\n    </ul>\n    <div id='chart-container' class='chart-container' style='width:50%; height:400px;'>\n        <canvas id='task-chart'></canvas>\n    </div>\n    <script src='https://cdn.jsdelivr.net/npm/chart.js'></script>\n    <script>\n        var ctx = document.getElementById('task-chart').getContext('2d');\n        var taskChart = new Chart(ctx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Completed', 'Not Completed'],\n                datasets: [{\n                    data: [{{ completed_tasks }}, {{ total_tasks-completed_tasks }}],\n                    backgroundColor: ['#4caf50', '#f44336'],\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                legend: { position: 'top' },\n            }\n        });\n    </script>\n</body>\n</html>"}], "7": [{"file": "manage.py", "path": "budget_control/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "budget_control/budget_control/__init__.py", "code": ""}, {"file": "settings.py", "path": "budget_control/budget_control/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'django-insecure-12345'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "budget_control/budget_control/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom budget.views import home\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', home, name='home'),\n]\n"}, {"file": "wsgi.py", "path": "budget_control/budget_control/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "budget_control/budget/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BudgetConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget'\n"}, {"file": "models.py", "path": "budget_control/budget/models.py", "code": "from django.db import models\n\n\nclass Transaction(models.Model):\n    date = models.DateTimeField(auto_now_add=True)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.CharField(max_length=255)\n\n    def __str__(self):\n        return f\"{self.description} - {self.amount}\"\n"}, {"file": "views.py", "path": "budget_control/budget/views.py", "code": "from django.shortcuts import render\nfrom .models import Transaction\n\n\ndef home(request):\n    transactions = Transaction.objects.all()\n    balance = sum(t.amount for t in transactions)\n    return render(request, 'budget/home.html', {'transactions': transactions, 'balance': balance})\n"}, {"file": "admin.py", "path": "budget_control/budget/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction\n\nadmin.site.register(Transaction)\n"}, {"file": "home.html", "path": "budget_control/budget/templates/budget/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1 id=\"title\" class=\"header-title\">Budget Control Application</h1>\n    <div id=\"transactions-container\" class=\"container\">\n        <h2 id=\"transaction-list-header\" class=\"header-subtitle\">Transactions</h2>\n        <ul id=\"transaction-list\" class=\"transaction-list\">\n            {% for transaction in transactions %}\n                <li>{{ transaction.date }} - {{ transaction.description }}: ${{ transaction.amount }}</li>\n            {% endfor %}\n        </ul>\n        <h3 id=\"balance-header\" class=\"header-balance\">Current Balance: ${{ balance }}</h3>\n    </div>\n    <div id=\"chart-container\" class=\"container\">\n        <canvas id=\"balance-chart\" class=\"chart\"></canvas>\n    </div>\n    <script>\n        const ctx = document.getElementById('balance-chart').getContext('2d');\n        const transactions = {{ transactions|json_script:\"transactions\" }};\n        const labels = transactions.map(t => t.date.split('T')[0]);\n        const data = transactions.map(t => t.amount);\n        const cumulativeData = data.map((sum => value => sum += value)(0));\n\n        new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Balance over time',\n                    data: cumulativeData,\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    tension: 0.1\n                }]\n            }\n        });\n    </script>\n</body>\n</html>\n"}], "8": [{"file": "manage.py", "path": "calendar_app/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "calendar_app/calendar/__init__.py", "code": ""}, {"file": "admin.py", "path": "calendar_app/calendar/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "apps.py", "path": "calendar_app/calendar/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalendarConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calendar'"}, {"file": "models.py", "path": "calendar_app/calendar/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    name = models.CharField(max_length=255)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.name"}, {"file": "tests.py", "path": "calendar_app/calendar/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "calendar_app/calendar/views.py", "code": "from django.shortcuts import render\nfrom .models import Event\n\n\ndef calendar_view(request):\n    events = Event.objects.all()\n    return render(request, 'calendar/calendar.html', {'events': events})"}, {"file": "__init__.py", "path": "calendar_app/calendar/migrations/__init__.py", "code": ""}, {"file": "settings.py", "path": "calendar_app/calendar_app/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "calendar_app/calendar_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom calendar import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.calendar_view, name='calendar'),\n]"}, {"file": "wsgi.py", "path": "calendar_app/calendar_app/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "calendar_app/calendar_app/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n\napplication = get_asgi_application()"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar/calendar.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/normalize/8.0.1/normalize.min.css\">\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"calendar-container\">\n        <table id=\"calendar-table\" class=\"calendar-table\">\n            <thead id=\"calendar-table-head\" class=\"calendar-table-head\">\n                <tr id=\"calendar-week-days\" class=\"calendar-week-days\">\n                    <th>Sun</th>\n                    <th>Mon</th>\n                    <th>Tue</th>\n                    <th>Wed</th>\n                    <th>Thu</th>\n                    <th>Fri</th>\n                    <th>Sat</th>\n                </tr>\n            </thead>\n            <tbody id=\"calendar-table-body\" class=\"calendar-table-body\">\n                <!-- Days will be filled by backend -->\n                {% for event in events %}\n                <tr>\n                    <td id=\"event-{{ forloop.counter }}\" class=\"event\">{{ event.name }}<br>{{ event.start_time|date:\"Y-m-d\" }} {{ event.start_time|time:\"H:i\" }}</td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "calendar_app/calendar_app/__init__.py", "code": ""}], "9": [{"file": "manage.py", "path": "chatbot_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "chatbot_project/chatbot_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'website',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "chatbot_project/chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('website.urls')),\n]\n"}, {"file": "wsgi.py", "path": "chatbot_project/chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "chatbot_project/website/apps.py", "code": "from django.apps import AppConfig\n\nclass WebsiteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'website'\n"}, {"file": "urls.py", "path": "chatbot_project/website/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n"}, {"file": "views.py", "path": "chatbot_project/website/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n"}, {"file": "home.html", "path": "chatbot_project/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot Introduction</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\n</head>\n<body>\n    <header id=\"header\" class=\"bg-primary text-white text-center py-5\">\n        <div class=\"container\">\n            <h1 class=\"display-4\">Welcome to AI Chatbot</h1>\n            <p class=\"lead\">Revolutionizing Communication and Interaction</p>\n        </div>\n    </header>\n    <section id=\"features\" class=\"py-5\">\n        <div class=\"container\">\n            <div class=\"row\">\n                <div class=\"col-md-4 mb-4\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Feature 1</h5>\n                            <p class=\"card-text\">AI Chatbot provides seamless interaction with users, enhancing the user experience.</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-4 mb-4\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Feature 2</h5>\n                            <p class=\"card-text\">24/7 availability to ensure users can always get the help or information they need.</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-4 mb-4\">\n                    <div class=\"card\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\">Feature 3</h5>\n                            <p class=\"card-text\">Advanced AI capabilities for understanding complex queries and providing accurate responses.</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </section>\n    <footer id=\"footer\" class=\"bg-dark text-white text-center py-3\">\n        <div class=\"container\">\n            <p>&copy; 2023 AI Chatbot. All Rights Reserved.</p>\n        </div>\n    </footer>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "chatbot_project/chatbot_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "chatbot_project/website/__init__.py", "code": ""}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "calorie_tracker/calorie_tracker/__init__.py", "code": ""}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),\n]"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calorie_tracker/tracker/__init__.py", "code": ""}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\n\n\nclass Entry(models.Model):\n    food_item = models.CharField(max_length=200)\n    calories = models.IntegerField()\n    date = models.DateField()\n\n    def __str__(self):\n        return f\"{self.food_item} ({self.calories} cal)\""}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render\nfrom .models import Entry\n\n\ndef tracker_home(request):\n    entries = Entry.objects.all().order_by('-date')\n    return render(request, 'tracker/home.html', {'entries': entries})"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.tracker_home, name='tracker-home'),\n]"}, {"file": "admin.py", "path": "calorie_tracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Entry\n\nadmin.site.register(Entry)"}, {"file": "home.html", "path": "calorie_tracker/tracker/templates/tracker/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calorie Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.css\">\n</head>\n<body>\n    <div id=\"app-container\" class=\"container\">\n        <h1 id=\"app-title\" class=\"title\">Calorie Tracker</h1>\n        <div id=\"entry-list\" class=\"entry-list\">\n            {% for entry in entries %}\n                <div class=\"entry-item\" id=\"entry-{{ entry.id }}\">\n                    <h2 class=\"entry-food-item\">{{ entry.food_item }}</h2>\n                    <p class=\"entry-calories\">Calories: {{ entry.calories }}</p>\n                    <p class=\"entry-date\">Date: {{ entry.date }}</p>\n                </div>\n            {% endfor %}\n        </div>\n        <canvas id=\"caloriesChart\" class=\"chart\"></canvas>\n    </div>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.min.js\"></script>\n    <script>\n        var ctx = document.getElementById('caloriesChart').getContext('2d');\n        var chart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: {{ entries|map(attribute='date')|list|safe }},\n                datasets: [{\n                    label: 'Calories Over Time',\n                    data: {{ entries|map(attribute='calories')|list|safe }},\n                    borderColor: 'rgb(75, 192, 192)',\n                    tension: 0.1\n                }]\n            },\n            options: {}\n        });\n    </script>\n</body>\n</html>"}, {"file": "__init__.py", "path": "calorie_tracker/tracker/migrations/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "review_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "review_project/review_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'reviews',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "review_project/review_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom reviews import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('review/', views.review_test, name='review_test'),\n]\n"}, {"file": "wsgi.py", "path": "review_project/review_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "review_project/review_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "review_project/reviews/__init__.py", "code": ""}, {"file": "views.py", "path": "review_project/reviews/views.py", "code": "from django.shortcuts import render\nimport json\n\n# Mock JSON data\nDATA = '[{\"project_id\": \"3\", \"testcode\": [{\"page\": \"Home\", \"function\": [{\"function\": \"Display Welcome Message\", \"test\": \"def test_display_welcome_message(driver, test_url,swelcome_message_id):\\r\\n    driver.get(test_url)\\r\\n    welcome_message = driver.find_element(By.ID,swelcome_message_id)\\r\\n    assert welcome_message.is_displayed()\"}]}]}]'\n\ndef review_test(request):\n    project_data = json.loads(DATA)\n    return render(request, 'reviews/review_test.html', {'project_data': project_data})\n"}, {"file": "review_test.html", "path": "review_project/templates/reviews/review_test.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Review Test Code</title>\n    <style>\n        .test-case { margin-bottom: 20px; }\n        .status-btn { margin-right: 10px; }\n    </style>\n</head>\n<body>\n    <h1>Review Test Code</h1>\n    {% for project in project_data %}\n        <h2>Project ID: {{ project.project_id }}</h2>\n        {% for test in project.testcode %}\n            <h3>Page: {{ test.page }}</h3>\n            {% for func in test.function %}\n                <div class=\"test-case\" id=\"case-{{ forloop.counter0 }}\">\n                    <h4>Function: {{ func.function }}</h4>\n                    <pre>{{ func.test }}</pre>\n                    <button class=\"status-btn\" id=\"pass-btn-{{ forloop.counter0 }}\">Pass</button>\n                    <button class=\"status-btn\" id=\"fail-btn-{{ forloop.counter0 }}\">Fail</button>\n                    <button class=\"status-btn\" id=\"select-btn-{{ forloop.counter0 }}\">Select</button>\n                </div>\n            {% endfor %}\n        {% endfor %}\n    {% endfor %}\n    <script>\n        document.querySelectorAll('.status-btn').forEach(button => {\n            button.addEventListener('click', () => {\n                alert('Status: ' + button.textContent);\n            });\n        });\n    </script>\n</body>\n</html>\n"}, {"file": "apps.py", "path": "review_project/reviews/apps.py", "code": "from django.apps import AppConfig\n\nclass ReviewsConfig(AppConfig):\n    name = 'reviews'\n"}, {"file": "models.py", "path": "review_project/reviews/models.py", "code": "# Models could be added here if needed in the future.\n"}, {"file": "admin.py", "path": "review_project/reviews/admin.py", "code": "# Admin configurations can be added here.\n"}, {"file": "tests.py", "path": "review_project/reviews/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "urls.py", "path": "review_project/reviews/urls.py", "code": "from django.urls import path\n\n# urlpatterns can be added here if needed.\n"}, {"file": "migrations/__init__.py", "path": "review_project/reviews/migrations/__init__.py", "code": "# This package holds the migration files.\n"}], "12": [{"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expenses'\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware'\n]\nROOT_URLCONF = 'project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\n"}, {"file": "models.py", "path": "expenses/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass ExpenseClaim(models.Model):\n    CATEGORY_CHOICES = [\n        ('Travel', 'Travel expenses'),\n        ('Labor', 'Labor expenses'),\n        ('Management', 'Management expenses'),\n        ('Equipment', 'Equipment expenses')\n    ]\n    STATUS_CHOICES = [\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected')\n    ]\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(choices=CATEGORY_CHOICES, max_length=20)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    status = models.CharField(choices=STATUS_CHOICES, max_length=10, default='Pending')\n    submitted = models.DateField(auto_now_add=True)\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.category} by {self.employee.username} - {self.status}'\n"}, {"file": "views.py", "path": "expenses/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import ExpenseClaim\nfrom .forms import ExpenseForm\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ExpenseForm(request.POST)\n        if form.is_valid():\n            expense_claim = form.save(commit=False)\n            expense_claim.employee = request.user\n            expense_claim.save()\n            return redirect('view_claims')\n    else:\n        form = ExpenseForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n@login_required\ndef admin_view_claims(request):\n    if not request.user.is_staff:\n        return redirect('login')\n    claims = ExpenseClaim.objects.all()\n    return render(request, 'admin_view_claims.html', {'claims': claims})\n\n@login_required\ndef change_status(request, claim_id, status):\n    if not request.user.is_staff:\n        return redirect('login')\n    claim = ExpenseClaim.objects.get(id=claim_id)\n    claim.status = status\n    claim.save()\n    return redirect('admin_view_claims')\n\n@login_required\ndef analyze_budget(request):\n    if not request.user.is_staff:\n        return redirect('login')\n    categories = ['Travel', 'Labor', 'Management', 'Equipment']\n    balances = {category: sum(claim.amount for claim in ExpenseClaim.objects.filter(category=category, status='Approved')) for category in categories}\n    return render(request, 'analyze_budget.html', {'balances': balances})\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom expenses import views as expense_views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('submit_claim/', expense_views.submit_claim, name='submit_claim'),\n    path('view_claims/', expense_views.admin_view_claims, name='admin_view_claims'),\n    path('change_status/<int:claim_id>/<str:status>/', expense_views.change_status, name='change_status'),\n    path('analyze_budget/', expense_views.analyze_budget, name='analyze_budget'),\n]\n"}, {"file": "forms.py", "path": "expenses/forms.py", "code": "from django import forms\nfrom .models import ExpenseClaim\n\nclass ExpenseForm(forms.ModelForm):\n    class Meta:\n        model = ExpenseClaim\n        fields = ['category', 'amount', 'description']\n"}, {"file": "submit_claim.html", "path": "templates/submit_claim.html", "code": "<h1>Submit Expense Claim</h1>\n<form method=\"post\" action=\"\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit</button>\n</form>\n"}, {"file": "admin_view_claims.html", "path": "templates/admin_view_claims.html", "code": "<h1>View Expense Claims</h1>\n<table>\n    <tr>\n        <th>Employee</th>\n        <th>Category</th>\n        <th>Amount</th>\n        <th>Status</th>\n        <th>Actions</th>\n    </tr>\n    {% for claim in claims %}\n    <tr>\n        <td>{{ claim.employee.username }}</td>\n        <td>{{ claim.category }}</td>\n        <td>{{ claim.amount }}</td>\n        <td>{{ claim.status }}</td>\n        <td>\n            <a href=\"{% url 'change_status' claim.id 'Approved' %}\">Approve</a>\n            <a href=\"{% url 'change_status' claim.id 'Rejected' %}\">Reject</a>\n        </td>\n    </tr>\n    {% endfor %}\n</table>\n"}, {"file": "analyze_budget.html", "path": "templates/analyze_budget.html", "code": "<h1>Budget Analysis</h1>\n<table>\n    <tr>\n        <th>Category</th>\n        <th>Approved Total</th>\n    </tr>\n    {% for category, amount in balances.items %}\n    <tr>\n        <td>{{ category }}</td>\n        <td>{{ amount }}</td>\n    </tr>\n    {% endfor %}\n</table>\n"}], "13": [{"file": "manage.py", "path": "clientcrm/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'clientcrm.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "clientcrm/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crm',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'clientcrm.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'clientcrm.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "clientcrm/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('crm/', include('crm.urls')),\n]\n"}, {"file": "wsgi.py", "path": "clientcrm/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'clientcrm.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "clientcrm/__init__.py", "code": ""}, {"file": "apps.py", "path": "crm/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CrmConfig(AppConfig):\n    name = 'crm'\n"}, {"file": "models.py", "path": "crm/models.py", "code": "from django.db import models\n\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10)\n    company = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=20)\n\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.FloatField()\n\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.FloatField()\n"}, {"file": "admin.py", "path": "crm/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\n"}, {"file": "views.py", "path": "crm/views.py", "code": "from django.shortcuts import render\nfrom .models import Customer, Product, PurchaseRecord\n\n\n# Create your views here.\n\ndef index(request):\n    customers = Customer.objects.all()\n    return render(request, 'crm/index.html', {'customers': customers})\n"}, {"file": "urls.py", "path": "crm/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "templates/crm/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CRM System</title>\n</head>\n<body>\n    <h1>Customer List</h1>\n    <table id=\"customer-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>ID</th>\n                <th>Name</th>\n                <th>Company</th>\n                <th>Phone Number</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for customer in customers %}\n                <tr>\n                    <td class=\"customer-id\">{{ customer.id }}</td>\n                    <td class=\"customer-name\">{{ customer.name }}</td>\n                    <td class=\"customer-company\">{{ customer.company }}</td>\n                    <td class=\"customer-phone\">{{ customer.phone_number }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>"}, {"file": "__init__.py", "path": "crm/__init__.py", "code": ""}, {"file": "tests.py", "path": "crm/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "migrations/__init__.py", "path": "crm/migrations/__init__.py", "code": ""}], "14": [{"file": "settings.py", "path": "helloworld_project/helloworld_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloapp',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'helloworld_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nSTATIC_URL = 'static/'\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "helloworld_project/helloworld_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloapp.urls')),\n]"}, {"file": "__init__.py", "path": "helloworld_project/helloworld_project/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "helloworld_project/helloworld_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "helloworld_project/helloworld_project/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "helloworld_project/helloapp/__init__.py", "code": ""}, {"file": "urls.py", "path": "helloworld_project/helloapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.helloworld_view, name='helloworld'),\n]"}, {"file": "views.py", "path": "helloworld_project/helloapp/views.py", "code": "from django.shortcuts import render\n\ndef helloworld_view(request):\n    return render(request, 'helloapp/helloworld.html')"}, {"file": "helloworld.html", "path": "helloworld_project/templates/helloapp/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <div id=\"message-container\" class=\"message-container\">\n        <h1 id=\"hello-world-message\" class=\"hello-world-message\">Hello, World!</h1>\n    </div>\n</body>\n</html>"}, {"file": "manage.py", "path": "helloworld_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}], "15": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'replace-this-with-a-random-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'\n"}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": ""}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloword/', views.helloword, name='helloword'),\n]\n"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'myapp/home.html')\n\ndef helloword(request):\n    return render(request, 'myapp/helloword.html')\n"}, {"file": "home.html", "path": "myproject/myapp/templates/myapp/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <button id=\"jump-button\" class=\"btn btn-primary\" onclick=\"location.href='{% url 'helloword' %}'\">Jump to Hello World</button>\n</body>\n</html>\n"}, {"file": "helloword.html", "path": "myproject/myapp/templates/myapp/helloword.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"hello-heading\" class=\"heading\">Hello, World!</h1>\n</body>\n</html>\n"}], "16": [{"file": "transform_subjects.py", "path": "/projects/subject_transformer/transform_subjects.py", "code": "import pandas as pd\n\ndef transform_subjects(input_file, output_file):\n    df = pd.read_excel(input_file)\n    period_order = {\"First period\": 0, \"Second period\": 1, \"Third period\": 2, \"Fourth period\": 3}\n    df['Period Index'] = df['Time'].map(period_order)\n    df_sorted = df.sort_values(by=['Weekday', 'Period Index'])\n    df_sorted.drop('Period Index', axis=1, inplace=True)\n    df_sorted.to_excel(output_file, index=False)\n\nif __name__ == \"__main__\":\n    input_file = \"Spring Semester Subjects.xlsx\"\n    output_file = \"Transformed Spring Semester Subjects.xlsx\"\n    transform_subjects(input_file, output_file)"}, {"file": "requirements.txt", "path": "/projects/subject_transformer/requirements.txt", "code": "pandas\nopenpyxl"}, {"file": "README.md", "path": "/projects/subject_transformer/README.md", "code": "# Subject Transformer\n\nThis project transforms the subject schedule in an Excel file into a sorted output file.\n\n## Requirements\n\n- Python 3.x\n- pandas\n- openpyxl\n\n## Usage\n\n1. Prepare your subject list in `Spring Semester Subjects.xlsx`.\n2. Run the script with `python transform_subjects.py`.\n3. Check `Transformed Spring Semester Subjects.xlsx` for the output.\n"}], "20": [{"file": "manage.py", "path": "blog_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "blog_project/blog_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "blog_project/blog_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blog_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'blog_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "blog_project/blog_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "wsgi.py", "path": "blog_project/blog_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "blog_project/blog/__init__.py", "code": ""}, {"file": "admin.py", "path": "blog_project/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)"}, {"file": "apps.py", "path": "blog_project/blog/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    name = 'blog'"}, {"file": "models.py", "path": "blog_project/blog/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(default=timezone.now)\n\n    def __str__(self):\n        return self.title"}, {"file": "tests.py", "path": "blog_project/blog/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "urls.py", "path": "blog_project/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n]"}, {"file": "views.py", "path": "blog_project/blog/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom .models import Post\n\n\ndef home(request):\n    posts = Post.objects.all()\n    return render(request, 'blog/home.html', {'posts': posts})\n\n\ndef post_detail(request, pk):\n    post = get_object_or_404(Post, pk=pk)\n    return render(request, 'blog/post_detail.html', {'post': post})"}, {"file": "__init__.py", "path": "blog_project/blog/migrations/__init__.py", "code": ""}, {"file": "home.html", "path": "blog_project/templates/blog/home.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Blog Home</title>\n</head>\n<body>\n    <h1 id='blog-title' class='title'>Blog</h1>\n    <div id='blog-posts' class='post-list'>\n        {% for post in posts %}\n        <div id='post-{{ post.id }}' class='post'>\n            <h2 class='post-title'><a href='{% url 'post_detail' post.pk %}'>{{ post.title }}</a></h2>\n        </div>\n        {% endfor %}\n    </div>\n</body>\n</html>"}, {"file": "post_detail.html", "path": "blog_project/templates/blog/post_detail.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>{{ post.title }}</title>\n</head>\n<body>\n    <h1 id='post-title' class='title'>{{ post.title }}</h1>\n    <p id='post-content' class='content'>{{ post.content }}</p>\n    <a href='{% url 'home' %}'>Back to home</a>\n</body>\n</html>"}]}