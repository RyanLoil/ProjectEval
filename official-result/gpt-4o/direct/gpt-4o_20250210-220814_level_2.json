{"1": [{"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home_page(request):\n    return render(request, 'home.html')\n\ndef bmi_calculator_page(request):\n    return render(request, 'bmi_calculator.html')\n\ndef calculate_bmi(request):\n    if request.method == 'POST':\n        height = float(request.POST['height'])\n        weight = float(request.POST['weight'])\n        units = request.POST['units']\n        \n        if units == 'metric':\n            bmi = weight / (height / 100) ** 2\n        else:\n            bmi = (weight / (height * height)) * 703\n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif 18.5 <= bmi < 24.9:\n            category = 'Normal weight'\n        elif 25 <= bmi < 29.9:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n        return render(request, 'bmi_calculator.html', {\n            'bmi': bmi,\n            'category': category,\n            'height': height,\n            'weight': weight,\n            'units': units\n        })\n    \n    return render(request, 'bmi_calculator.html')"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home'),\n    path('bmi-calculator/', views.bmi_calculator_page, name='bmi_calculator_page'),\n    path('calculate-bmi/', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "home.html", "path": "bmi_calculator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n</head>\n<body>\n    <div id=\"intro\" class=\"intro\">\n        <h1>Welcome to the BMI Calculator</h1>\n        <p>This tool calculates your Body Mass Index (BMI) based on your height and weight.</p>\n    </div>\n    <div id=\"navigate\" class=\"navigate\">\n        <a href=\"{% url 'bmi_calculator_page' %}\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <form id=\"bmiForm\" class=\"bmi-form\" action=\"{% url 'calculate_bmi' %}\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"height-input\" class=\"form-group\">\n            <label for=\"height\">Height:</label>\n            <input type=\"number\" name=\"height\" id=\"height\" required value=\"{{ height|default:\"\" }}\" placeholder=\"in cm or inches\">\n        </div>\n        <div id=\"weight-input\" class=\"form-group\">\n            <label for=\"weight\">Weight:</label>\n            <input type=\"number\" name=\"weight\" id=\"weight\" required value=\"{{ weight|default:\"\" }}\" placeholder=\"in kg or lbs\">\n        </div>\n        <div id=\"units-input\" class=\"form-group\">\n            <label for=\"units\">Units:</label>\n            <select name=\"units\" id=\"units\">\n                <option value=\"metric\" {% if units == 'metric' %}selected{% endif %}>Metric (cm, kg)</option>\n                <option value=\"imperial\" {% if units == 'imperial' %}selected{% endif %}>Imperial (inch, lbs)</option>\n            </select>\n        </div>\n        <div id=\"submit\" class=\"form-group\">\n            <button type=\"submit\">Calculate BMI</button>\n        </div>\n        <div id=\"reset\" class=\"form-group\">\n            <button type=\"reset\">Reset</button>\n        </div>\n    </form>\n\n    {% if bmi %}\n    <div id=\"result\" class=\"result\">\n        <h2>Your BMI is: {{ bmi|floatformat:2 }}</h2>\n        <p>You are categorized as: {{ category }}</p>\n    </div>\n    {% endif %}\n</body>\n</html>"}, {"file": "models.py", "path": "bmi_calculator/models.py", "code": "# This example does not require a database model.\n# Typically, you would use models.py to define any data structures if needed.\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "INSTALLED_APPS = [\n    # other apps\n    'django.contrib.staticfiles',\n    'bmi_calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "bmi_calculator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "bmi_calculator/migrations/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "currency_converter/currency_converter/__init__.py", "code": ""}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "currency_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "currency_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    name = 'converter'\n"}, {"file": "models.py", "path": "currency_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "currency_converter/converter/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('currency-details/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings, name='settings'),\n]\n"}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'converter/home.html')\n\n\ndef currency_details(request):\n    return render(request, 'converter/currency_details.html')\n\n\ndef settings(request):\n    return render(request, 'converter/settings.html')\n"}, {"file": "home.html", "path": "currency_converter/templates/converter/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n    <div id=\"base-currency\" class=\"currency-selection\">\n        <label for=\"base\">Select Base Currency:</label>\n        <select id=\"base\" class=\"base-currency\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <!-- Add more currencies as needed -->\n        </select>\n    </div>\n    <div id=\"target-currency\" class=\"currency-selection\">\n        <label for=\"target\">Select Target Currency:</label>\n        <select id=\"target\" class=\"target-currency\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <!-- Add more currencies as needed -->\n        </select>\n    </div>\n    <div id=\"amount-input\" class=\"input-amount\">\n        <label for=\"amount\">Enter Amount:</label>\n        <input type=\"number\" id=\"amount\" class=\"amount\">\n    </div>\n    <button id=\"convert-button\" class=\"convert\">Convert</button>\n    <div id=\"conversion-result\" class=\"result\">\n        <p>Conversion Result: <span id=\"result-value\"></span></p>\n    </div>\n    <div id=\"exchange-rate-info\" class=\"exchange-info\">\n        <p>Exchange Rate Info: <span id=\"exchange-rate\"></span></p>\n    </div>\n</body>\n</html>\n"}, {"file": "currency_details.html", "path": "currency_converter/templates/converter/currency_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Details</title>\n</head>\n<body>\n    <h1>Currency Details</h1>\n    <div id=\"currency-info\" class=\"currency-info\">\n        <p>Currency Information:</p>\n        <!-- Additional currency information goes here -->\n    </div>\n    <div id=\"historical-exchange-rates\" class=\"historical-rates\">\n        <p>Historical Exchange Rates:</p>\n        <!-- Historical exchange rate details go here -->\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "currency_converter/templates/converter/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Settings</title>\n</head>\n<body>\n    <h1>Settings</h1>\n    <div id=\"default-currencies\" class=\"default-currencies\">\n        <label for=\"default-base\">Set Default Base Currency:</label>\n        <select id=\"default-base\" class=\"default-base\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <!-- Add more currencies as needed -->\n        </select>\n        <label for=\"default-target\">Set Default Target Currency:</label>\n        <select id=\"default-target\" class=\"default-target\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <!-- Add more currencies as needed -->\n        </select>\n    </div>\n    <div id=\"update-frequency\" class=\"update-frequency\">\n        <label for=\"frequency\">Set Update Frequency:</label>\n        <select id=\"frequency\" class=\"select-frequency\">\n            <option value=\"hourly\">Hourly</option>\n            <option value=\"daily\">Daily</option>\n            <option value=\"weekly\">Weekly</option>\n        </select>\n    </div>\n</body>\n</html>\n"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('generator.urls')),\n]"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "password_generator/generator/admin.py", "code": "from django.contrib import admin\n"}, {"file": "apps.py", "path": "password_generator/generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'generator'"}, {"file": "models.py", "path": "password_generator/generator/models.py", "code": ""}, {"file": "tests.py", "path": "password_generator/generator/tests.py", "code": "from django.test import TestCase\n"}, {"file": "urls.py", "path": "password_generator/generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('options/', views.password_options, name='options'),\n    path('generated/', views.generated_password, name='generated'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\n\ndef password_options(request):\n    return render(request, 'generator/password_options.html')\n\n\ndef generated_password(request):\n    password = ''\n    # Logic for generating password based on options...\n    return render(request, 'generator/generated_password.html', {'password': password})\n\n\ndef about(request):\n    return render(request, 'generator/about.html')"}, {"file": "base.html", "path": "password_generator/templates/generator/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    <header>\n        <h1>Password Generator</h1>\n    </header>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}, {"file": "home.html", "path": "password_generator/templates/generator/home.html", "code": "{% extends 'generator/base.html' %}\n\n{% block content %}\n<div id=\"home-page\" class=\"page\">\n    <p id=\"welcome-message\" class=\"welcome\">Welcome to the Password Generator!</p>\n    <a id=\"navigate-button\" class=\"button\" href=\"{% url 'options' %}\">Go to Password Options</a>\n</div>\n{% endblock %}"}, {"file": "password_options.html", "path": "password_generator/templates/generator/password_options.html", "code": "{% extends 'generator/base.html' %}\n\n{% block content %}\n<div id=\"options-page\" class=\"page\">\n    <form id=\"options-form\" class=\"form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"length\">Password Length:</label>\n        <input id=\"length-input\" class=\"input\" type=\"number\" name=\"length\" min=\"1\" required><br>\n\n        <input id=\"include-uppercase\" class=\"checkbox\" type=\"checkbox\" name=\"uppercase\" checked>\n        <label for=\"include-uppercase\">Include Uppercase</label><br>\n\n        <input id=\"include-lowercase\" class=\"checkbox\" type=\"checkbox\" name=\"lowercase\" checked>\n        <label for=\"include-lowercase\">Include Lowercase</label><br>\n\n        <input id=\"include-numbers\" class=\"checkbox\" type=\"checkbox\" name=\"numbers\" checked>\n        <label for=\"include-numbers\">Include Numbers</label><br>\n\n        <input id=\"include-symbols\" class=\"checkbox\" type=\"checkbox\" name=\"symbols\" checked>\n        <label for=\"include-symbols\">Include Symbols</label><br>\n\n        <button id=\"generate-button\" class=\"button\" type=\"submit\">Generate Password</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "generated_password.html", "path": "password_generator/templates/generator/generated_password.html", "code": "{% extends 'generator/base.html' %}\n\n{% block content %}\n<div id=\"generated-page\" class=\"page\">\n    <p id=\"generated-password\" class=\"password\">Your generated password: {{ password }}</p>\n    <button id=\"copy-button\" class=\"button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n    <script>\n        function copyToClipboard() {\n            const passwordText = document.getElementById('generated-password').textContent;\n            navigator.clipboard.writeText(passwordText);\n            alert('Password copied to clipboard!');\n        }\n    </script>\n</div>\n{% endblock %}"}, {"file": "about.html", "path": "password_generator/templates/generator/about.html", "code": "{% extends 'generator/base.html' %}\n\n{% block content %}\n<div id=\"about-page\" class=\"page\">\n    <p id=\"description\" class=\"description\">This website generates secure passwords based on user-selected options.</p>\n</div>\n{% endblock %}"}], "4": [{"file": "manage.py", "path": "qr_code_generator/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "qr_code_generator/qr_code_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "qr_code_generator/qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom qrapp import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr_code, name='generate_qr_code'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "__init__.py", "path": "qr_code_generator/qr_code_generator/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "qr_code_generator/qr_code_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "qr_code_generator/qr_code_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "qr_code_generator/qrapp/__init__.py", "code": ""}, {"file": "models.py", "path": "qr_code_generator/qrapp/models.py", "code": "# No models required for this application\n"}, {"file": "views.py", "path": "qr_code_generator/qrapp/views.py", "code": "from django.shortcuts import render, redirect\nimport qrcode\nfrom django.http import HttpResponse\nimport io\nfrom django.conf import settings\n\n\ndef home(request):\n    return render(request, 'qrapp/home.html')\n\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('qr_data')\n        box_size = int(request.POST.get('box_size', 10))\n        border_size = int(request.POST.get('border_size', 4))\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n        error_correction = request.POST.get('error_correction', 'M')\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction={'L': qrcode.constants.ERROR_CORRECT_L,\n                              'M': qrcode.constants.ERROR_CORRECT_M,\n                              'Q': qrcode.constants.ERROR_CORRECT_Q,\n                              'H': qrcode.constants.ERROR_CORRECT_H}[error_correction],\n            box_size=box_size,\n            border=border_size,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        buffer = io.BytesIO()\n        img.save(buffer, 'PNG')\n        return HttpResponse(buffer.getvalue(), content_type='image/png')\n    return redirect('home')\n\n\ndef about(request):\n    return render(request, 'qrapp/about.html')\n"}, {"file": "admin.py", "path": "qr_code_generator/qrapp/admin.py", "code": "# No models to register for admin site\n"}, {"file": "apps.py", "path": "qr_code_generator/qrapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrappConfig(AppConfig):\n    name = 'qrapp'\n"}, {"file": "tests.py", "path": "qr_code_generator/qrapp/tests.py", "code": "# Simple test setup for viewing purpose\nfrom django.test import TestCase\n\n\nclass SimpleTest(TestCase):\n    def test_home_page(self):\n        response = self.client.get('/')\n        self.assertEqual(response.status_code, 200)\n\n    def test_generate_page(self):\n        response = self.client.post('/generate/', {'qr_data': 'https://example.com'})\n        self.assertEqual(response.status_code, 200)\n"}, {"file": "home.html", "path": "qr_code_generator/templates/qrapp/home.html", "code": "<h1 id=\"intro\" class=\"intro\">Welcome to QR Code Generator!</h1>\n<p class=\"description\">This website allows you to create personalized QR codes for free.</p>\n<a id=\"generate-btn\" class=\"btn\" href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>"}, {"file": "about.html", "path": "qr_code_generator/templates/qrapp/about.html", "code": "<h1 id=\"description\" class=\"description\">About Us</h1>\n<p class=\"details\">This website provides a tool for generating QR codes. Enter the data, select your preferences, and generate your QR code!</p>\n<h2 id=\"privacy-policy\" class=\"privacy-policy\">Privacy Policy</h2>\n<p>Your data is only used to create your QR code and is not stored.</p>\n<h2 id=\"terms-of-service\" class=\"terms-of-service\">Terms of Service</h2>\n<p>Use this tool at your own risk.</p>"}, {"file": "generate_qr_code.html", "path": "qr_code_generator/templates/qrapp/generate_qr_code.html", "code": "<h1 id=\"generator\" class=\"generator\">QR Code Generator</h1>\n<form method=\"post\">\n    {% csrf_token %}\n    <label for=\"qr_data\" class=\"label\">Enter URL/Text:</label>\n    <input id=\"qr_data\" class=\"input\" type=\"text\" name=\"qr_data\" required>\n    <label for=\"box_size\" class=\"label\">Box Size (max 128):</label>\n    <input id=\"box_size\" class=\"input\" type=\"number\" name=\"box_size\" max=\"128\" value=\"10\">\n    <label for=\"border_size\" class=\"label\">Border Size (max 10):</label>\n    <input id=\"border_size\" class=\"input\" type=\"number\" name=\"border_size\" max=\"10\" value=\"4\">\n    <label for=\"fill_color\" class=\"label\">Fill Color:</label>\n    <input id=\"fill_color\" class=\"input\" type=\"color\" name=\"fill_color\" value=\"#000000\">\n    <label for=\"back_color\" class=\"label\">Back Color:</label>\n    <input id=\"back_color\" class=\"input\" type=\"color\" name=\"back_color\" value=\"#ffffff\">\n    <label for=\"error_correction\" class=\"label\">Error Correction:</label>\n    <select id=\"error_correction\" class=\"select\" name=\"error_correction\">\n        <option value=\"L\">Low</option>\n        <option value=\"M\" selected>Medium</option>\n        <option value=\"Q\">Quartile</option>\n        <option value=\"H\">High</option>\n    </select>\n    <button id=\"generate_qr\" class=\"btn\" type=\"submit\">Generate QR Code</button>\n</form>"}], "5": [{"file": "manage.py", "path": "markdown_converter/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "markdown_converter/markdown_converter/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-#v#n%=&amp;n+^3+45s7o(5)%_n6@m3bpqw*!q7ppmvp=52^4j&#38ea'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_converter.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "markdown_converter/markdown_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom converter import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "wsgi.py", "path": "markdown_converter/markdown_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "markdown_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'\n"}, {"file": "views.py", "path": "markdown_converter/converter/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert(request):\n    return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "home.html", "path": "markdown_converter/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Converter - Home</title>\n</head>\n<body>\n    <div id=\"welcome-message\" class=\"welcome\">\n        <h1>Welcome to the Markdown to HTML Converter!</h1>\n    </div>\n    <div id=\"introduction\" class=\"intro\">\n        <p>This tool allows you to convert your Markdown text into HTML format easily.</p>\n    </div>\n    <div id=\"navigation-links\" class=\"navigation\">\n        <ul>\n            <li><a href=\"{% url 'convert' %}\">Convert</a></li>\n            <li><a href=\"{% url 'about' %}\">About</a></li>\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "markdown_converter/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Converter - Convert</title>\n</head>\n<body>\n    <div id=\"markdown-input\" class=\"markdown\">\n        <textarea id=\"markdown-text\" class=\"textarea\" placeholder=\"Enter your Markdown here...\"></textarea>\n    </div>\n    <div id=\"convert-button\" class=\"convert\">\n        <button onclick=\"convertMarkdownToHTML()\">Convert to HTML</button>\n    </div>\n    <div id=\"html-output\" class=\"html\">\n        <h2>HTML Output:</h2>\n        <div id=\"html-content\" class=\"content\"></div>\n    </div>\n    <div id=\"upload-file\" class=\"upload\">\n        <input type=\"file\" id=\"file-upload\" class=\"file-input\" accept=\".md\">\n    </div>\n    <div id=\"download-html\" class=\"download\">\n        <button onclick=\"downloadHTML()\">Download HTML</button>\n    </div>\n    <script>\n        function convertMarkdownToHTML() {\n            var markdownText = document.getElementById('markdown-text').value;\n            // Conversion logic goes here\n            document.getElementById('html-content').innerHTML = markdownText; // dummy action\n        }\n\n        function downloadHTML() {\n            // Download logic goes here\n        }\n    </script>\n</body>\n</html>\n"}, {"file": "about.html", "path": "markdown_converter/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Converter - About</title>\n</head>\n<body>\n    <div id=\"team-info\" class=\"team\">\n        <h1>About Us</h1>\n        <p>Information about the team who developed this converter.</p>\n    </div>\n    <div id=\"faq-section\" class=\"faq\">\n        <h2>FAQ</h2>\n        <ul>\n            <li>Q1: What is Markdown?</li>\n            <li>Q2: How to use this converter?</li>\n        </ul>\n    </div>\n</body>\n</html>\n"}], "6": [{"file": "settings.py", "path": "todo_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]"}, {"file": "wsgi.py", "path": "todo_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "todo_project/__init__.py", "code": ""}, {"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import TodoList, Task\n\n# Home Page - View Dashboard and navigate to Todo Lists\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'todo_app/home.html', { 'todo_lists': todo_lists })\n\n# Todo List Page - Create New List and View Tasks\ndef todo_list(request, pk):\n    todo_list = TodoList.objects.get(id=pk)\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        Task.objects.create(name=name, todo_list=todo_list)\n        return redirect('todo_list', pk=todo_list.id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todo_app/todo_list.html', { 'todo_list': todo_list, 'tasks': tasks })\n\n# Task Management functions\ndef add_task(request, list_pk):\n    if request.method == 'POST':\n        todo_list = TodoList.objects.get(id=list_pk)\n        task_name = request.POST.get('task_name')\n        Task.objects.create(name=task_name, todo_list=todo_list)\n    return redirect('todo_list', pk=list_pk)\n\ndef edit_task(request, list_pk, task_pk):\n    task = Task.objects.get(id=task_pk)\n    if request.method == 'POST':\n        task.name = request.POST.get('task_name')\n        task.save()\n        return redirect('todo_list', pk=list_pk)\n    return render(request, 'todo_app/edit_task.html', { 'task': task })\n\ndef delete_task(request, list_pk, task_pk):\n    task = Task.objects.get(id=task_pk)\n    task.delete()\n    return redirect('todo_list', pk=list_pk)\n\ndef complete_task(request, list_pk, task_pk):\n    task = Task.objects.get(id=task_pk)\n    task.completed = True\n    task.save()\n    return redirect('todo_list', pk=list_pk)"}, {"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('todo_list/<int:pk>/', views.todo_list, name='todo_list'),\n    path('add_task/<int:list_pk>/', views.add_task, name='add_task'),\n    path('edit_task/<int:list_pk>/<int:task_pk>/', views.edit_task, name='edit_task'),\n    path('delete_task/<int:list_pk>/<int:task_pk>/', views.delete_task, name='delete_task'),\n    path('complete_task/<int:list_pk>/<int:task_pk>/', views.complete_task, name='complete_task'),\n]"}, {"file": "home.html", "path": "todo_app/templates/todo_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo Dashboard</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\">\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">Dashboard</h1>\n    <ul id=\"todo-lists\" class=\"todo-lists\">\n        {% for list in todo_lists %}\n            <li><a href=\"{% url 'todo_list' list.id %}\" class=\"navigation-link\">{{ list.name }}</a></li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "todo_app/templates/todo_app/todo_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\">\n</head>\n<body>\n    <h1 id=\"list-title\" class=\"list-title\">{{ todo_list.name }}</h1>\n    <form id=\"add-task-form\" class=\"add-task-form\" method=\"post\">\n        {% csrf_token %}\n        <input id=\"new-task-input\" class=\"new-task-input\" type=\"text\" name=\"name\" placeholder=\"New Task\">\n        <button id=\"add-task-button\" class=\"add-task-button\" type=\"submit\">Add Task</button>\n    </form>\n    <ul id=\"tasks\" class=\"tasks\">\n        {% for task in tasks %}\n            <li id=\"task-{{ task.id }}\" class=\"task-item {{ 'completed' if task.completed else '' }}\">{{ task.name }}\n                <a href=\"{% url 'edit_task' todo_list.id task.id %}\" class=\"task-edit-link\">Edit</a>\n                <a href=\"{% url 'delete_task' todo_list.id task.id %}\" class=\"task-delete-link\">Delete</a>\n                <a href=\"{% url 'complete_task' todo_list.id task.id %}\" class=\"task-complete-link\">Complete</a>\n            </li>\n        {% endfor %}\n    </ul>\n    <a href=\"/\" class=\"navigation-link\">Back to Dashboard</a>\n</body>\n</html>"}, {"file": "edit_task.html", "path": "todo_app/templates/todo_app/edit_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Task</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\">\n</head>\n<body>\n    <h1 id=\"edit-task-title\" class=\"edit-task-title\">Edit Task</h1>\n    <form id=\"edit-task-form\" class=\"edit-task-form\" method=\"post\">\n        {% csrf_token %}\n        <input id=\"edit-task-input\" class=\"edit-task-input\" type=\"text\" name=\"task_name\" value=\"{{ task.name }}\">\n        <button id=\"edit-task-button\" class=\"edit-task-button\" type=\"submit\">Save Changes</button>\n    </form>\n    <a href=\"{% url 'todo_list' task.todo_list.id %}\" class=\"navigation-link\">Back to List</a>\n</body>\n</html>"}, {"file": "apps.py", "path": "todo_app/apps.py", "code": "from django.apps import AppConfig\n\nclass TodoAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todo_app'"}, {"file": "admin.py", "path": "todo_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)"}, {"file": "tests.py", "path": "todo_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "__init__.py", "path": "todo_app/__init__.py", "code": ""}, {"file": "style.css", "path": "todo_app/static/style.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\nul { list-style-type: none; }\nli { margin: 10px 0; }\na.navigation-link { text-decoration: none; color: blue; }\na.task-edit-link, a.task-delete-link, a.task-complete-link { margin-left: 10px; color: gray; text-decoration: none; }\na.task-complete-link { color: green; }\nform { margin: 20px 0; }\ninput[type=\"text\"] { padding: 5px; }\nbutton { padding: 5px 10px; }\n.task-item.completed { text-decoration: line-through; }"}], "7": [{"file": "settings.py", "path": "myproject/settings.py", "code": "import os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nINSTALLED_APPS = ['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'myapp']\nMIDDLEWARE = ['django.middleware.security.SecurityMiddleware', ...]\nROOT_URLCONF = 'myproject.urls'\nTEMPLATES = [{'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', ...]}], ...]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nurlpatterns = [path('admin/', admin.site.urls), path('', include('myapp.urls'))]\n"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    date = models.DateField()\n    ..."}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\nfrom .models import Transaction\n\ndef home_view(request):\n    return render(request, 'home.html')\n\ndef dashboard_view(request):\n    transactions = Transaction.objects.all()\n    return render(request, 'dashboard.html', {'transactions': transactions})"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\nurlpatterns = [path('', views.home_view, name='home'), path('dashboard/', views.dashboard_view, name='dashboard')]\n"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <link rel='stylesheet' href='{% static 'style.css' %}'>\n    <title>{% block title %}My App{% endblock %}</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>\n"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h1>Home</h1>\n<div id='home-container' class='home-class'>\n    <a href='{% url 'dashboard' %}'>Go to Dashboard</a>\n</div>\n{% endblock %}\n"}], "9": [{"file": "manage.py", "path": "project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \\n            available on your PYTHONPATH environment variable? Did you \\n            forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'website',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom website import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about/', views.about, name='about'),\n    path('support/', views.support, name='support'),\n]\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "apps.py", "path": "website/apps.py", "code": "from django.apps import AppConfig\n\nclass WebsiteConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'website'\n"}, {"file": "__init__.py", "path": "website/__init__.py", "code": ""}, {"file": "views.py", "path": "website/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef features(request):\n    return render(request, 'features.html')\n\ndef pricing(request):\n    return render(request, 'pricing.html')\n\ndef about(request):\n    return render(request, 'about.html')\n\ndef support(request):\n    return render(request, 'support.html')\n"}, {"file": "urls.py", "path": "website/urls.py", "code": ""}, {"file": "home.html", "path": "templates/home.html", "code": "<html>\n<head><title>Home</title></head>\n<body>\n    <div id=\"product-overview\" class=\"content-section\">\n        <h1>AI Chatbot Overview</h1>\n        <p>Learn about our AI Chatbot's capabilities and benefits.</p>\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "templates/features.html", "code": "<html>\n<head><title>Features</title></head>\n<body>\n    <div id=\"key-features\" class=\"content-section\">\n        <h1>Key Features</h1>\n        <ul>\n            <li>Feature 1</li>\n            <li>Feature 2</li>\n            <li>Feature 3</li>\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "templates/pricing.html", "code": "<html>\n<head><title>Pricing</title></head>\n<body>\n    <div id=\"pricing-plans\" class=\"content-section\">\n        <h1>Pricing Plans</h1>\n        <p>Different pricing plans and subscription options.</p>\n\n        <div id=\"contact-sales\" class=\"contact-form\">\n            <h2>Contact Sales</h2>\n            <form>\n                <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required>\n                <input type=\"email\" name=\"email\" placeholder=\"Your Email\" required>\n                <textarea name=\"message\" placeholder=\"Your Message\"></textarea>\n                <button type=\"submit\">Send</button>\n            </form>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<html>\n<head><title>About Us</title></head>\n<body>\n    <div id=\"company-background\" class=\"content-section\">\n        <h1>About Us</h1>\n        <p>Information about the company and the team behind the AI Chatbot.</p>\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "templates/support.html", "code": "<html>\n<head><title>Support</title></head>\n<body>\n    <div id=\"faq\" class=\"content-section\">\n        <h1>FAQ</h1>\n        <p>Answers to frequently asked questions about the AI Chatbot.</p>\n    </div>\n\n    <div id=\"support-message\" class=\"support-form\">\n        <h2>Support Message</h2>\n        <form>\n            <input type=\"text\" name=\"name\" placeholder=\"Your Name\" required>\n            <input type=\"email\" name=\"email\" placeholder=\"Your Email\" required>\n            <textarea name=\"message\" placeholder=\"Your Message\"></textarea>\n            <button type=\"submit\">Send</button>\n        </form>\n    </div>\n</body>\n</html>"}], "10": [{"file": "manage.py", "path": "caloriecounter/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'caloriecounter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "caloriecounter/caloriecounter/__init__.py", "code": ""}, {"file": "settings.py", "path": "caloriecounter/caloriecounter/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'home',\n    'dashboard',\n    'meallog',\n    'activitylog',\n    'analysis',\n    'settingsapp',\n    'helpapp',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'caloriecounter.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'caloriecounter.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "caloriecounter/caloriecounter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('home.urls')),\n    path('dashboard/', include('dashboard.urls')),\n    path('meallog/', include('meallog.urls')),\n    path('activitylog/', include('activitylog.urls')),\n    path('analysis/', include('analysis.urls')),\n    path('settingsapp/', include('settingsapp.urls')),\n    path('helpapp/', include('helpapp.urls')),\n]"}, {"file": "wsgi.py", "path": "caloriecounter/caloriecounter/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'caloriecounter.settings')\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "caloriecounter/home/__init__.py", "code": ""}, {"file": "views.py", "path": "caloriecounter/home/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home/home.html')"}, {"file": "urls.py", "path": "caloriecounter/home/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home')\n]"}, {"file": "home.html", "path": "caloriecounter/home/templates/home/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" href=\"{% static 'home/style.css' %}\">\n</head>\n<body>\n    <header id=\"header-home\" class=\"header\">\n        <h1 class=\"title\">Welcome to Calorie Tracker</h1>\n    </header>\n    <section id=\"features\" class=\"features section\">\n        <div class=\"container\">\n            <h2 class=\"subtitle\">Features Overview</h2>\n            <nav>\n                <ul class=\"navigation\">\n                    <li class=\"nav-item\"><a href=\"{% url 'signup' %}\" id=\"signup-link\">Sign Up</a></li>\n                    <li class=\"nav-item\"><a href=\"{% url 'login' %}\" id=\"login-link\">Log In</a></li>\n                </ul>\n            </nav>\n        </div>\n    </section>\n</body>\n</html>"}, {"file": "models.py", "path": "caloriecounter/home/models.py", "code": "from django.db import models\n\n# Create your models here if needed."}, {"file": "admin.py", "path": "caloriecounter/home/admin.py", "code": "from django.contrib import admin\n\n# Register your models here if needed."}, {"file": "apps.py", "path": "caloriecounter/home/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HomeConfig(AppConfig):\n    name = 'home'"}, {"file": "tests.py", "path": "caloriecounter/home/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "style.css", "path": "caloriecounter/home/static/home/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n}\n.header {\n    background-color: #f8f9fa;\n    padding: 20px;\n    text-align: center;\n}\n.title {\n    font-size: 2em;\n    color: #333;\n}\n.features {\n    padding: 20px;\n}\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n}\n.subtitle {\n    font-size: 1.5em;\n}\n.navigation {\n    list-style: none;\n    padding: 0;\n}\n.nav-item {\n    display: inline;\n    margin-right: 20px;\n}\n.nav-item a {\n    text-decoration: none;\n    color: #007bff;\n}\n.nav-item a:hover {\n    text-decoration: underline;\n}"}], "11": [{"file": "manage.py", "path": "project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "project/project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, \"templates\")],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "project/project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom app import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "wsgi.py", "path": "project/project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "project/project/__init__.py", "code": ""}, {"file": "views.py", "path": "project/app/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "apps.py", "path": "project/app/apps.py", "code": "from django.apps import AppConfig\n\nclass AppConfig(AppConfig):\n    name = 'app'\n"}, {"file": "__init__.py", "path": "project/app/__init__.py", "code": ""}, {"file": "home.html", "path": "project/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"welcome-message\" class=\"display-4\">Welcome to Our Website</h1>\n        <form method=\"post\" id=\"testcode-form\">\n            <div class=\"form-group\">\n                <label for=\"status-select\">Select Status for the Testcode</label>\n                <select id=\"status-select\" class=\"form-control\">\n                    <option value=\"Select\">Select</option>\n                    <option value=\"Pass\">Pass</option>\n                    <option value=\"Fail\">Fail</option>\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"review-note\">Note for Reviewing</label>\n                <textarea id=\"review-note\" class=\"form-control\" rows=\"3\"></textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "project/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <h1>About Page</h1>\n    <p>This is the about page that describes the function and other information of the website.</p>\n</body>\n</html>\n"}], "12": [{"file": "manage.py", "path": "expense_management/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_management.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "expense_management/expense_management/__init__.py", "code": ""}, {"file": "settings.py", "path": "expense_management/expense_management/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'home',\n    'employee_portal',\n    'admin_portal',\n    'budget_control',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_management.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'expense_management.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "expense_management/expense_management/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('home.urls')),\n    path('employee/', include('employee_portal.urls')),\n    path('admin/portal/', include('admin_portal.urls')),\n    path('budget/', include('budget_control.urls')),\n]"}, {"file": "wsgi.py", "path": "expense_management/expense_management/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_management.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "expense_management/expense_management/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_management.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "expense_management/home/__init__.py", "code": ""}, {"file": "apps.py", "path": "expense_management/home/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HomeConfig(AppConfig):\n    name = 'home'"}, {"file": "urls.py", "path": "expense_management/home/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.view_home, name='view_home'),\n    path('signup/', views.sign_up, name='sign_up'),\n    path('login/', views.log_in, name='log_in'),\n]"}, {"file": "views.py", "path": "expense_management/home/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate\nfrom django.contrib.auth.forms import UserCreationForm\n\n\ndef view_home(request):\n    return render(request, 'home/index.html')\n\n\ndef sign_up(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('view_home')\n    else:\n        form = UserCreationForm()\n    return render(request, 'home/signup.html', {'form': form})\n\n\ndef log_in(request):\n    if request.method == 'POST':\n        username = request.POST['username']\n        password = request.POST['password']\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('view_home')\n    return render(request, 'home/login.html')"}, {"file": "index.html", "path": "expense_management/templates/home/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home Page</title>\n</head>\n<body>\n    <h1 id='welcome-message'>Welcome to the Expense Management System</h1>\n    <a id='login-link' class='link' href='/login/'>Log In</a>\n    <a id='signup-link' class='link' href='/signup/'>Sign Up</a>\n</body>\n</html>"}, {"file": "signup.html", "path": "expense_management/templates/home/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Sign Up</title>\n</head>\n<body>\n    <h2 id='signup-header'>Sign Up</h2>\n    <form id='signup-form' method='post'>\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type='submit' class='btn'>Sign Up</button>\n    </form>\n</body>\n</html>"}, {"file": "login.html", "path": "expense_management/templates/home/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Log In</title>\n</head>\n<body>\n    <h2 id='login-header'>Log In</h2>\n    <form id='login-form' method='post'>\n        {% csrf_token %}\n        <label for='id_username'>Username:</label>\n        <input id='id_username' type='text' name='username' required><br>\n        <label for='id_password'>Password:</label>\n        <input id='id_password' type='password' name='password' required><br>\n        <button type='submit' class='btn'>Log In</button>\n    </form>\n</body>\n</html>"}, {"file": "__init__.py", "path": "expense_management/employee_portal/__init__.py", "code": ""}, {"file": "apps.py", "path": "expense_management/employee_portal/apps.py", "code": "from django.apps import AppConfig\n\n\nclass EmployeePortalConfig(AppConfig):\n    name = 'employee_portal'"}, {"file": "urls.py", "path": "expense_management/employee_portal/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('submit-claim/', views.submit_claim, name='submit_claim'),\n    path('view-claim-status/', views.view_claim_status, name='view_claim_status'),\n    path('edit-claim/', views.edit_claim, name='edit_claim'),\n]"}, {"file": "views.py", "path": "expense_management/employee_portal/views.py", "code": "from django.shortcuts import render\n\n\ndef submit_claim(request):\n    return render(request, 'employee_portal/submit_claim.html')\n\n\ndef view_claim_status(request):\n    return render(request, 'employee_portal/view_claim_status.html')\n\n\ndef edit_claim(request):\n    return render(request, 'employee_portal/edit_claim.html')"}, {"file": "submit_claim.html", "path": "expense_management/templates/employee_portal/submit_claim.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Submit Claim</title>\n</head>\n<body>\n    <h2 id='submit-claim-header'>Submit a Claim</h2>\n    <form id='claim-form' method='post'>\n        {% csrf_token %}\n        <!-- Claim fields would go here -->\n        <button type='submit' class='btn'>Submit Claim</button>\n    </form>\n</body>\n</html>"}, {"file": "view_claim_status.html", "path": "expense_management/templates/employee_portal/view_claim_status.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>View Claim Status</title>\n</head>\n<body>\n    <h2 id='view-claim-status-header'>Claim Status</h2>\n    <!-- Status data would be rendered here -->\n</body>\n</html>"}, {"file": "edit_claim.html", "path": "expense_management/templates/employee_portal/edit_claim.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Claim</title>\n</head>\n<body>\n    <h2 id='edit-claim-header'>Edit Claim</h2>\n    <form id='edit-claim-form' method='post'>\n        {% csrf_token %}\n        <!-- Editable claim fields would go here -->\n        <button type='submit' class='btn'>Edit Claim</button>\n    </form>\n</body>\n</html>"}, {"file": "__init__.py", "path": "expense_management/admin_portal/__init__.py", "code": ""}, {"file": "apps.py", "path": "expense_management/admin_portal/apps.py", "code": "from django.apps import AppConfig\n\n\nclass AdminPortalConfig(AppConfig):\n    name = 'admin_portal'"}, {"file": "urls.py", "path": "expense_management/admin_portal/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('approve-claim/', views.approve_claim, name='approve_claim'),\n    path('reject-claim/', views.reject_claim, name='reject_claim'),\n    path('view-claim-details/', views.view_claim_details, name='view_claim_details'),\n    path('search-filter-claims/', views.search_filter_claims, name='search_filter_claims'),\n]"}, {"file": "views.py", "path": "expense_management/admin_portal/views.py", "code": "from django.shortcuts import render\n\n\ndef approve_claim(request):\n    return render(request, 'admin_portal/approve_claim.html')\n\n\ndef reject_claim(request):\n    return render(request, 'admin_portal/reject_claim.html')\n\n\ndef view_claim_details(request):\n    return render(request, 'admin_portal/view_claim_details.html')\n\n\ndef search_filter_claims(request):\n    return render(request, 'admin_portal/search_filter_claims.html')"}, {"file": "approve_claim.html", "path": "expense_management/templates/admin_portal/approve_claim.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Approve Claim</title>\n</head>\n<body>\n    <h2 id='approve-claim-header'>Approve Claim</h2>\n    <!-- Approval process UI goes here -->\n</body>\n</html>"}, {"file": "reject_claim.html", "path": "expense_management/templates/admin_portal/reject_claim.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Reject Claim</title>\n</head>\n<body>\n    <h2 id='reject-claim-header'>Reject Claim</h2>\n    <form id='reject-claim-form' method='post'>\n        {% csrf_token %}\n        <label for='reason'>Reason for Rejection:</label>\n        <textarea id='reason' name='reason' required></textarea>\n        <button type='submit' class='btn'>Reject Claim</button>\n    </form>\n</body>\n</html>"}, {"file": "view_claim_details.html", "path": "expense_management/templates/admin_portal/view_claim_details.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>View Claim Details</title>\n</head>\n<body>\n    <h2 id='view-claim-details-header'>Claim Details</h2>\n    <!-- Claim details information shown here -->\n</body>\n</html>"}, {"file": "search_filter_claims.html", "path": "expense_management/templates/admin_portal/search_filter_claims.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Search and Filter Claims</title>\n</head>\n<body>\n    <h2 id='search-filter-header'>Search and Filter Claims</h2>\n    <form id='search-filter-form' method='get'>\n        <!-- Search and filter fields go here -->\n        <button type='submit' class='btn'>Search</button>\n    </form>\n</body>\n</html>"}, {"file": "__init__.py", "path": "expense_management/budget_control/__init__.py", "code": ""}, {"file": "apps.py", "path": "expense_management/budget_control/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BudgetControlConfig(AppConfig):\n    name = 'budget_control'"}, {"file": "urls.py", "path": "expense_management/budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('analyze-expense/', views.analyze_expense, name='analyze_expense'),\n    path('generate-reports/', views.generate_reports, name='generate_reports'),\n    path('set-budget-limits/', views.set_budget_limits, name='set_budget_limits'),\n    path('send-budget-alerts/', views.send_budget_alerts, name='send_budget_alerts'),\n]"}, {"file": "views.py", "path": "expense_management/budget_control/views.py", "code": "from django.shortcuts import render\n\n\ndef analyze_expense(request):\n    return render(request, 'budget_control/analyze_expense.html')\n\n\ndef generate_reports(request):\n    return render(request, 'budget_control/generate_reports.html')\n\n\ndef set_budget_limits(request):\n    return render(request, 'budget_control/set_budget_limits.html')\n\n\ndef send_budget_alerts(request):\n    return render(request, 'budget_control/send_budget_alerts.html')"}, {"file": "analyze_expense.html", "path": "expense_management/templates/budget_control/analyze_expense.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Analyze Expense Balances</title>\n</head>\n<body>\n    <h2 id='analyze-expense-header'>Analyze Expenses</h2>\n    <!-- Expense analysis UI goes here -->\n</body>\n</html>"}, {"file": "generate_reports.html", "path": "expense_management/templates/budget_control/generate_reports.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Generate Reports</title>\n</head>\n<body>\n    <h2 id='generate-reports-header'>Generate Reports</h2>\n    <!-- Report generation UI goes here -->\n</body>\n</html>"}, {"file": "set_budget_limits.html", "path": "expense_management/templates/budget_control/set_budget_limits.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Set Budget Limits</title>\n</head>\n<body>\n    <h2 id='set-budget-limits-header'>Set Budget Limits</h2>\n    <form id='budget-limits-form' method='post'>\n        {% csrf_token %}\n        <!-- Budget limit inputs go here -->\n        <button type='submit' class='btn'>Set Limits</button>\n    </form>\n</body>\n</html>"}, {"file": "send_budget_alerts.html", "path": "expense_management/templates/budget_control/send_budget_alerts.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Send Budget Alerts</title>\n</head>\n<body>\n    <h2 id='send-budget-alerts-header'>Budget Alerts</h2>\n    <!-- Budget alert settings UI goes here -->\n</body>\n</html>"}], "13": [{"file": "settings.py", "path": "my_project/my_project/settings.py", "code": "# Django settings for your project."}, {"file": "urls.py", "path": "my_project/my_project/urls.py", "code": "from django.urls import path, include\nurlpatterns = [path('customer/', include('customer.urls'))]"}, {"file": "models.py", "path": "my_project/customer/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=100)"}, {"file": "views.py", "path": "my_project/customer/views.py", "code": "from django.shortcuts import render\nfrom .models import Customer\n\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'customer_list.html', {'customers': customers})"}, {"file": "urls.py", "path": "my_project/customer/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [path('', views.customer_list, name='customer_list')]"}, {"file": "customer_list.html", "path": "my_project/customer/templates/customer_list.html", "code": "<!-- HTML template for customer list -->\n<ul>\n{% for customer in customers %}\n    <li id='customer-{{ customer.id }}' class='customer-item'>{{ customer.name }}</li>\n{% endfor %}\n</ul>"}], "14": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "helloworld/helloworld/__init__.py", "code": ""}, {"file": "settings.py", "path": "helloworld/helloworld/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-+k=#8&u3fne*%1!9f+#t=2v!0@5s#c-wqz=-ueyv79m^z'  # Example key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworldapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom helloworldapp.views import hello_world\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', hello_world, name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "helloworld/helloworld/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "helloworld/helloworldapp/__init__.py", "code": ""}, {"file": "views.py", "path": "helloworld/helloworldapp/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'helloworldapp/index.html')\n"}, {"file": "apps.py", "path": "helloworld/helloworldapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloworldappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworldapp'\n"}, {"file": "index.html", "path": "helloworld/templates/helloworldapp/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            margin: 0;\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f9;\n        }\n        #hello-text {\n            color: #333;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"hello-text\" class=\"hello-text\">Hello World</div>\n</body>\n</html>\n"}], "15": [{"file": "manage.py", "path": "helloworld_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "helloworld_project/helloworld_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "helloworld_project/helloworld_project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'mainapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "helloworld_project/helloworld_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom mainapp import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]\n"}, {"file": "wsgi.py", "path": "helloworld_project/helloworld_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "helloworld_project/helloworld_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "helloworld_project/mainapp/__init__.py", "code": ""}, {"file": "views.py", "path": "helloworld_project/mainapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'mainapp/home.html')\n\ndef helloworld(request):\n    return render(request, 'mainapp/helloworld.html')\n"}, {"file": "__init__.py", "path": "helloworld_project/mainapp/migrations/__init__.py", "code": ""}, {"file": "home.html", "path": "helloworld_project/mainapp/templates/mainapp/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">Welcome to the Home Page</h1>\n    <button id=\"hello-world-button\" class=\"nav-button\" onclick=\"location.href='{% url 'helloworld' %}'\">Go to HelloWorld</button>\n</body>\n</html>\n"}, {"file": "helloworld.html", "path": "helloworld_project/mainapp/templates/mainapp/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1 id=\"hello-world-title\" class=\"hello-world-title\">HelloWorld</h1>\n</body>\n</html>\n"}], "16": [{"file": "validation.py", "path": "project/validation.py", "code": "import os\nimport pandas as pd\n\ndef check_file_existence(filepath):\n    return os.path.exists(filepath)\n\ndef validate_headers(df):\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n    return list(df.columns) == expected_headers\n\ndef validate_time_column(df):\n    valid_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n    return df['Time'].isin(valid_times).all()\n\ndef validate_data_integrity(df):\n    # Ensure all data fields are filled\n    return df.notnull().all().all()\n\ndef validate_null_value(df):\n    return not df.isnull().values.any()\n"}, {"file": "transformation.py", "path": "project/transformation.py", "code": "import pandas as pd\n\ndef transform_to_two_dimension_table(df):\n    pivot_table = df.pivot_table(index='Weekday', columns='Time', values='Name', aggfunc='first')\n    return pivot_table\n\ndef data_mapping(df):\n    return transform_to_two_dimension_table(df)\n"}, {"file": "output.py", "path": "project/output.py", "code": "import pandas as pd\n\ndef create_output_excel_file(filepath):\n    writer = pd.ExcelWriter(filepath, engine='xlsxwriter')\n    return writer\n\ndef save_table_to_excel(writer, table_df):\n    table_df.to_excel(writer, sheet_name='Subjects')\n    writer.save()\n"}, {"file": "main.py", "path": "project/main.py", "code": "import pandas as pd\nfrom validation import check_file_existence, validate_headers, validate_time_column, validate_data_integrity, validate_null_value\nfrom transformation import transform_to_two_dimension_table, data_mapping\nfrom output import create_output_excel_file, save_table_to_excel\n\ninput_file = 'Spring Semester Subjects.xlsx'\noutput_file = 'Transformed_Schedule.xlsx'\n\n# Input File Validation\nif not check_file_existence(input_file):\n    print('Input file does not exist.')\n    exit(1)\n\nsubjects_df = pd.read_excel(input_file)\n\nif not validate_headers(subjects_df):\n    print('Invalid headers in input file.')\n    exit(1)\n\nif not validate_time_column(subjects_df):\n    print(\"'Time' column contains invalid entries.\")\n    exit(1)\n\nif not validate_data_integrity(subjects_df):\n    print('Data integrity validation failed.')\n    exit(1)\n\nif not validate_null_value(subjects_df):\n    print('Null values found in input file.')\n    exit(1)\n\n# Data Transformation\ntransformed_table = data_mapping(subjects_df)\n\n# Output File Creation\nwriter = create_output_excel_file(output_file)\nsave_table_to_excel(writer, transformed_table)\n\nprint('Transformed schedule saved to', output_file)\n"}], "17": [{"file": "data_preparation.py", "path": "src/dataprep/data_preparation.py", "code": "import pandas as pd\n\nclass DataPreparation:\n\n    def __init__(self, file_name):\n        self.file_name = file_name\n        self.dataset = None\n\n    def read_dataset(self):\n        try:\n            self.dataset = pd.read_excel(self.file_name)\n        except FileNotFoundError:\n            raise Exception(f\"File {self.file_name} not found.\")\n\n    def lag_dependent_variable(self):\n        if 'result' not in self.dataset.columns:\n            raise Exception(\"'result' column not found in dataset.\")\n        self.dataset['LaggedResult'] = self.dataset['result'].shift(1)\n\n    def validate_and_prepare(self):\n        if self.dataset.isnull().values.any():\n            raise Exception(\"Null values found in dataset.\")\n        if self.dataset.empty:\n            raise Exception(\"Dataset is empty.\")\n        independent_vars = self.dataset.drop(['result', 'LaggedResult'], axis=1)\n        return independent_vars, self.dataset['LaggedResult']\n\n"}, {"file": "model_creation.py", "path": "src/model/model_creation.py", "code": "import statsmodels.api as sm\n\nclass ModelCreation:\n\n    def __init__(self, independent_vars, dependent_var):\n        self.independent_vars = independent_vars\n        self.dependent_var = dependent_var\n        self.model = None\n\n    def create_logistic_model(self):\n        self.independent_vars = sm.add_constant(self.independent_vars)  # Add intercept\n        self.model = sm.Logit(self.dependent_var, self.independent_vars).fit()\n\n    def generate_model_summary(self):\n        return self.model.summary()\n\n"}, {"file": "output.py", "path": "src/output/output.py", "code": "class Output:\n\n    def __init__(self, summary):\n        self.summary = summary\n\n    def write_summary(self, file_name):\n        try:\n            with open(file_name, 'w') as file:\n                file.write(self.summary.as_text())\n        except IOError:\n            raise Exception(f\"Could not write to file {file_name}.\")\n\n"}, {"file": "main.py", "path": "src/main.py", "code": "from dataprep.data_preparation import DataPreparation\nfrom model.model_creation import ModelCreation\nfrom output.output import Output\n\ndef main():\n    # Step 1: Data Preparation\n    dataprep = DataPreparation('Gamedata.xlsx')\n    dataprep.read_dataset()\n    dataprep.lag_dependent_variable()\n    ind_vars, dep_var = dataprep.validate_and_prepare()\n\n    # Step 2: Model Creation\n    model_creation = ModelCreation(ind_vars, dep_var)\n    model_creation.create_logistic_model()\n    summary = model_creation.generate_model_summary()\n\n    # Step 3: Output\n    output = Output(summary)\n    output.write_summary('Logistic.xlsx')\n\nif __name__ == '__main__':\n    main()\n\n"}], "18": [{"file": "main.py", "path": "src/main.py", "code": "\nimport game_environment\nimport game_logic\n\ndef main_menu():\n    print('Main Menu')\n    print('1. Start Game')\n    print('2. Instructions')\n    print('3. Exit Game')\n    choice = input('Select an option: ')\n    if choice == '1':\n        game_environment.start_game()\n    elif choice == '2':\n        show_instructions()\n    elif choice == '3':\n        exit_game()\n    else:\n        print('Invalid choice')\n        main_menu()\n\ndef show_instructions():\n    print('Game Instructions: ...')\n    main_menu()\n\ndef exit_game():\n    print('Exiting game...')\n    exit()\n\nif __name__ == '__main__':\n    main_menu()\n"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "\nimport game_logic\n\ndef start_game():\n    print('Game started')\n    while True:\n        command = input('Enter command: ')\n        if command == 'move':\n            move_player()\n        elif command == 'look':\n            look_around()\n        elif command == 'inventory':\n            check_inventory()\n        elif command == 'exit':\n            break\n        else:\n            game_logic.parse_command(command)\n\ndef move_player():\n    print('Moving player to the next room')\n\ndef look_around():\n    print('Looking around the room')\n\ndef pick_item():\n    print('Picking up an item')\n\ndef check_inventory():\n    print('Checking inventory')\n"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "\n\ndef parse_command(command):\n    print(f'Parsed command: {command}')\n    update_game_state()\n\ndef update_game_state():\n    print('Game state updated')\n"}, {"file": "help.py", "path": "src/help.py", "code": "\n\ndef display_help():\n    print('Help Information: ...')\n"}, {"file": "index.html", "path": "src/index.html", "code": "\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Game UI</title>\n    <style>\n        .menu-button { margin: 10px; }\n    </style>\n</head>\n<body>\n    <div id=\"main-menu\" class=\"menu-container\">\n        <button id=\"start-game\" class=\"menu-button\">Start Game</button>\n        <button id=\"instructions\" class=\"menu-button\">Instructions</button>\n        <button id=\"exit-game\" class=\"menu-button\">Exit Game</button>\n    </div>\n    <div id=\"game-environment\" class=\"environment-container\">\n        <button id=\"move-player\" class=\"action-button\">Move Player</button>\n        <button id=\"look-around\" class=\"action-button\">Look Around</button>\n        <button id=\"check-inventory\" class=\"action-button\">Check Inventory</button>\n    </div>\n</body>\n</html>\n"}], "20": [{"file": "manage.py", "path": "blog_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "blog_project/blog/__init__.py", "code": ""}, {"file": "settings.py", "path": "blog_project/blog_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blog_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'blog_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "blog_project/blog_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),  # Include urls from the blog app\n]\n"}, {"file": "wsgi.py", "path": "blog_project/blog_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "blog_project/blog/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    name = 'blog'\n"}, {"file": "models.py", "path": "blog_project/blog/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    categories = models.ManyToManyField(Category)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE)\n    author = models.CharField(max_length=100)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.post}'\n"}, {"file": "admin.py", "path": "blog_project/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Comment, Category\n\nadmin.site.register(BlogPost)\nadmin.site.register(Comment)\nadmin.site.register(Category)\n"}, {"file": "urls.py", "path": "blog_project/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('archive/', views.archive, name='archive'),\n]\n"}, {"file": "views.py", "path": "blog_project/blog/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom .models import BlogPost, Category\n\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-created_at')[:5]\n    return render(request, 'blog/home.html', {'latest_posts': latest_posts})\n\n\ndef post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    return render(request, 'blog/post_detail.html', {'post': post})\n\n\ndef about(request):\n    return render(request, 'blog/about.html', {})\n\n\ndef categories(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/categories.html', {'categories': categories})\n\n\ndef archive(request):\n    posts = BlogPost.objects.order_by('-created_at')\n    return render(request, 'blog/archive.html', {'posts': posts})\n"}, {"file": "home.html", "path": "blog_project/templates/blog/home.html", "code": "<html>\n<head>\n    <title>Blog Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">Latest Blog Posts</h1>\n    <ul id=\"latest-posts\" class=\"latest-posts\">\n      {% for post in latest_posts %}\n        <li id=\"post-{{ post.id }}\" class=\"post-item\">\n            <a href=\"{% url 'post_detail' post.pk %}\" id=\"post-link-{{ post.id }}\" class=\"post-link\">{{ post.title }}</a>\n        </li>\n      {% endfor %}\n    </ul>\n</body>\n</html>\n"}, {"file": "post_detail.html", "path": "blog_project/templates/blog/post_detail.html", "code": "<html>\n<head>\n    <title>{{ post.title }}</title>\n</head>\n<body>\n    <h1 id=\"post-title\" class=\"post-title\">{{ post.title }}</h1>\n    <p id=\"post-content\" class=\"post-content\">{{ post.content }}</p>\n    <h2 id=\"comments-title\" class=\"comments-title\">Comments</h2>\n    <ul id=\"comments-list\" class=\"comments-list\">\n      {% for comment in post.comment_set.all %}\n      <li id=\"comment-{{ comment.id }}\" class=\"comment-item\">\n          <strong id=\"comment-author-{{ comment.id }}\" class=\"comment-author\">{{ comment.author }}</strong>\n          <p id=\"comment-content-{{ comment.id }}\" class=\"comment-content\">{{ comment.content }}</p>\n      </li>\n      {% endfor %}\n    </ul>\n</body>\n</html>\n"}, {"file": "about.html", "path": "blog_project/templates/blog/about.html", "code": "<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"about-title\">About the Author</h1>\n    <p id=\"about-content\" class=\"about-content\">Details about the author.</p>\n</body>\n</html>\n"}, {"file": "categories.html", "path": "blog_project/templates/blog/categories.html", "code": "<html>\n<head>\n    <title>Categories</title>\n</head>\n<body>\n    <h1 id=\"categories-title\" class=\"categories-title\">Blog Categories</h1>\n    <ul id=\"categories-list\" class=\"categories-list\">\n      {% for category in categories %}\n      <li id=\"category-{{ category.id }}\" class=\"category-item\">\n          <a href=\"{% url 'categories' %}?category={{ category.name }}\" id=\"category-link-{{ category.id }}\" class=\"category-link\">{{ category.name }}</a>\n      </li>\n      {% endfor %}\n    </ul>\n</body>\n</html>\n"}, {"file": "archive.html", "path": "blog_project/templates/blog/archive.html", "code": "<html>\n<head>\n    <title>Archive</title>\n</head>\n<body>\n    <h1 id=\"archive-title\" class=\"archive-title\">Archived Posts</h1>\n    <ul id=\"archive-list\" class=\"archive-list\">\n      {% for post in posts %}\n      <li id=\"archive-{{ post.id }}\" class=\"archive-item\">\n          <a href=\"{% url 'post_detail' post.pk %}\" id=\"archive-link-{{ post.id }}\" class=\"archive-link\">{{ post.title }}</a>\n          <span id=\"archive-date-{{ post.id }}\" class=\"archive-date\">{{ post.created_at }}</span>\n      </li>\n      {% endfor %}\n    </ul>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "blog_project/blog_project/__init__.py", "code": ""}, {"file": "tests.py", "path": "blog_project/blog/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "apps.py", "path": "blog_project/blog_project/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogProjectConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog_project'\n"}]}