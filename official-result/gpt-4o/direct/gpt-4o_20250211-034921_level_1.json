{"1": [{"file": "manage.py", "path": "bmicalculator/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmicalculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "bmicalculator/bmicalculator/__init__.py", "code": ""}, {"file": "settings.py", "path": "bmicalculator/bmicalculator/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-please_change_this_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmicalculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmicalculator.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "bmicalculator/bmicalculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),\n]\n"}, {"file": "wsgi.py", "path": "bmicalculator/bmicalculator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmicalculator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "bmicalculator/calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calculator'\n"}, {"file": "__init__.py", "path": "bmicalculator/calculator/__init__.py", "code": ""}, {"file": "views.py", "path": "bmicalculator/calculator/views.py", "code": "from django.shortcuts import render\n\ndef bmi_calculator(request):\n    bmi = None\n    if request.method == \"POST\":\n        height = float(request.POST.get(\"height\", \"0\"))\n        weight = float(request.POST.get(\"weight\", \"0\"))\n        if height > 0:\n            bmi = weight / (height / 100)**2\n    return render(request, 'calculator/bmi_calculator.html', {'bmi': bmi})\n"}, {"file": "urls.py", "path": "bmicalculator/calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]\n"}, {"file": "bmi_calculator.html", "path": "bmicalculator/templates/calculator/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-calculator\" class=\"bmi-calculator\">\n        <h1 class=\"bmi-calculator__title\">BMI Calculator</h1>\n        <form method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"height\" class=\"form-group__label\">Height (cm):</label>\n                <input type=\"number\" id=\"height\" class=\"form-group__input\" name=\"height\" step=\"0.01\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"weight\" class=\"form-group__label\">Weight (kg):</label>\n                <input type=\"number\" id=\"weight\" class=\"form-group__input\" name=\"weight\" step=\"0.01\" required>\n            </div>\n            <button type=\"submit\" class=\"bmi-calculator__button\">Calculate BMI</button>\n        </form>\n        {% if bmi is not None %}\n            <div class=\"result\">\n                <h2>Your BMI is: {{ bmi|floatformat:2 }}</h2>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key-here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter/currency_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "currency_converter/converter/__init__.py", "code": ""}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\n\nSIMULATED_RATES = {\n    'USD': 1.0,\n    'EUR': 0.85,\n    'JPY': 110.0\n}\n\ndef index(request):\n    context = {'currencies': SIMULATED_RATES.keys()}\n    return render(request, 'converter/index.html', context)\n\ndef convert(request):\n    if request.method == 'POST':\n        amount = float(request.POST['amount'])\n        from_currency = request.POST['from_currency']\n        to_currency = request.POST['to_currency']\n        converted_amount = amount * SIMULATED_RATES[to_currency] / SIMULATED_RATES[from_currency]\n        context = {\n            'converted_amount': converted_amount,\n            'from_currency': from_currency,\n            'to_currency': to_currency,\n            'amount': amount,\n            'currencies': SIMULATED_RATES.keys()\n        }\n        return render(request, 'converter/index.html', context)\n    return render(request, 'converter/index.html')\n"}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('convert/', views.convert, name='convert'),\n]\n"}, {"file": "index.html", "path": "currency_converter/templates/converter/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Currency Converter</title>\n    <style>\n        .form-group { margin-bottom: 15px; }\n        .converter-form { max-width: 300px; margin: auto; }\n        .result { font-size: 1.2em; }\n    </style>\n</head>\n<body>\n    <div class=\"converter-form\">\n        <h2 class=\"title\">Currency Converter</h2>\n        <form method=\"post\" action=\"{% url 'convert' %}\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"amount\" class=\"form-label\">Amount:</label>\n                <input type=\"number\" id=\"amount\" name=\"amount\" required/>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"from_currency\" class=\"form-label\">From:</label>\n                <select id=\"from_currency\" name=\"from_currency\">\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\">{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"to_currency\" class=\"form-label\">To:</label>\n                <select id=\"to_currency\" name=\"to_currency\">\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\">{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n            <button type=\"submit\">Convert</button>\n        </form>\n        {% if converted_amount %}\n            <div class=\"result\">\n                {{ amount }} {{ from_currency }} is {{ converted_amount }} {{ to_currency }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "currency_converter/converter/migrations/__init__.py", "code": ""}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nimport random\n\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\n\ndef password(request):\n    characters = list('abcdefghijklmnopqrstuvwxyz')\n    length = int(request.GET.get('length', 12))\n\n    if request.GET.get('uppercase'):\n        characters.extend(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    if request.GET.get('numbers'):\n        characters.extend(list('0123456789'))\n    if request.GET.get('special'):\n        characters.extend(list('!@#$%^&*()'))\n\n    the_password = ''.join(random.choice(characters) for _ in range(length))\n\n    return render(request, 'generator/password.html', {'password': the_password})\n"}, {"file": "home.html", "path": "password_generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Password Generator</h1>\n        <form id=\"optionsForm\" class=\"options-form\" action=\"/password/\">\n            <label for=\"length\">Password Length:</label>\n            <input id=\"length\" class=\"length-input\" type=\"number\" name=\"length\" value=\"12\">\n            <br>\n            <input id=\"uppercase\" class=\"uppercase-checkbox\" type=\"checkbox\" name=\"uppercase\"> Include Uppercase\n            <br>\n            <input id=\"numbers\" class=\"numbers-checkbox\" type=\"checkbox\" name=\"numbers\"> Include Numbers\n            <br>\n            <input id=\"special\" class=\"special-checkbox\" type=\"checkbox\" name=\"special\"> Include Special Characters\n            <br>\n            <button id=\"generateBtn\" class=\"generate-btn\" type=\"submit\">Generate Password</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "password.html", "path": "password_generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Password</title>\n</head>\n<body>\n    <div id=\"resultContainer\" class=\"result-container\">\n        <h1 id=\"yourPassword\" class=\"your-password\">Your Password</h1>\n        <p id=\"password\" class=\"password\">{{ password }}</p>\n        <a id=\"backLink\" class=\"back-link\" href=\"/\">Generate another password</a>\n    </div>\n</body>\n</html>\n"}], "4": [{"file": "manage.py", "path": "qrcode_generator/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "qrcode_generator/qrcode_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "qrcode_generator/qrcode_generator/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key-here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcode_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcode_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "qrcode_generator/qrcode_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrapp.urls')),\n]\n"}, {"file": "wsgi.py", "path": "qrcode_generator/qrcode_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "qrcode_generator/qrapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "qrcode_generator/qrapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "qrcode_generator/qrapp/apps.py", "code": "from django.apps import AppConfig\n\nclass QrappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qrapp'\n"}, {"file": "models.py", "path": "qrcode_generator/qrapp/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "tests.py", "path": "qrcode_generator/qrapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "qrcode_generator/qrapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport qrcode\nimport io\n\n\ndef generate_qr(request):\n    text = request.POST.get('qrcode_text', '')\n    if text:\n        qr = qrcode.make(text)\n        buf = io.BytesIO()\n        qr.save(buf)\n        image_stream = buf.getvalue()\n        return HttpResponse(image_stream, content_type='image/png')\n    return render(request, 'qrapp/index.html')\n"}, {"file": "urls.py", "path": "qrcode_generator/qrapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.generate_qr, name='generate_qr'),\n]\n"}, {"file": "index.html", "path": "qrcode_generator/templates/qrapp/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        .container {\n            max-width: 600px;\n            margin-top: 50px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"main-container\" class=\"container\">\n        <h1 id=\"title\" class=\"text-center mb-4\">QR Code Generator</h1>\n        <form method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"qrcode_text\">Enter text</label>\n                <input id=\"qrcode_text\" name=\"qrcode_text\" type=\"text\" class=\"form-control\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Generate QR Code</button>\n        </form>\n        {% if text %}\n        <div id=\"qr-code\" class=\"mt-4\">\n            <img src=\"\" alt=\"QR Code\" />\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}], "5": [{"file": "manage.py", "path": "markdown_html_converter/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "markdown_html_converter/markdown_html_converter/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_html_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_html_converter.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "markdown_html_converter/markdown_html_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom converter import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n    path('convert/', views.convert, name='convert'),\n]\n"}, {"file": "wsgi.py", "path": "markdown_html_converter/markdown_html_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "markdown_html_converter/markdown_html_converter/__init__.py", "code": ""}, {"file": "models.py", "path": "markdown_html_converter/converter/models.py", "code": "# No models needed for this simple application\n"}, {"file": "views.py", "path": "markdown_html_converter/converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom markdown2 import markdown\n\n\ndef index(request):\n    return render(request, 'index.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown(markdown_text)\n        return JsonResponse({'html': html})\n    return JsonResponse({'error': 'Invalid method'}, status=400)\n"}, {"file": "apps.py", "path": "markdown_html_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'\n"}, {"file": "__init__.py", "path": "markdown_html_converter/converter/__init__.py", "code": ""}, {"file": "index.html", "path": "markdown_html_converter/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n<div id=\"app\" class=\"container mt-5\">\n    <h1 id=\"title\" class=\"mb-4\">Markdown to HTML Converter</h1>\n    <div id=\"markdown-input\" class=\"form-group\">\n        <label for=\"markdown\">Markdown Input:</label>\n        <textarea id=\"markdown\" class=\"form-control\" rows=\"10\"></textarea>\n    </div>\n    <button id=\"convert-btn\" class=\"btn btn-primary mb-4\">Convert</button>\n    <h3 id=\"html-title\">HTML Output:</h3>\n    <div id=\"html-output\" class=\"border p-3\"></div>\n</div>\n<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\n<script>\n    $(document).ready(function() {\n        $('#convert-btn').on('click', function() {\n            var markdownText = $('#markdown').val();\n            $.post('/convert/', {markdown_text: markdownText}, function(data) {\n                $('#html-output').html(data.html);\n            });\n        });\n    });\n</script>\n</body>\n</html>\n"}], "6": [{"file": "manage.py", "path": "todo/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "todo/todo/__init__.py", "code": ""}, {"file": "settings.py", "path": "todo/todo/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key-here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todoapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "todo/todo/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todoapp.urls')),\n]\n"}, {"file": "wsgi.py", "path": "todo/todo/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "todo/todoapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "todo/todoapp/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoItem\n\nadmin.site.register(TodoItem)\n"}, {"file": "apps.py", "path": "todo/todoapp/apps.py", "code": "from django.apps import AppConfig\n\nclass TodoappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todoapp'\n"}, {"file": "models.py", "path": "todo/todoapp/models.py", "code": "from django.db import models\n\nclass TodoItem(models.Model):\n    title = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title\n"}, {"file": "tests.py", "path": "todo/todoapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "todo/todoapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import TodoItem\n\n\ndef index(request):\n    return render(request, 'todoapp/index.html')\n\n\ndef todo_data(request):\n    data = list(TodoItem.objects.all().values('title', 'completed'))\n    return JsonResponse(data, safe=False)\n"}, {"file": "__init__.py", "path": "todo/todoapp/migrations/__init__.py", "code": ""}, {"file": "urls.py", "path": "todo/todoapp/urls.py", "code": "from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('data/', views.todo_data, name='todo_data'),\n]\n"}, {"file": "index.html", "path": "todo/templates/todoapp/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        .container {\n            max-width: 700px;\n            margin: 0 auto;\n            padding: 20px;\n            text-align: center;\n        }\n        .todo-item {\n            display: flex;\n            justify-content: space-between;\n            padding: 10px;\n            border-bottom: 1px solid #ccc;\n        }\n        .completed {\n            text-decoration: line-through;\n            color: gray;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app\" class=\"container\">\n        <h1>Todo List</h1>\n        <div id=\"todo-list\"></div>\n        <h2>Completion Chart</h2>\n        <canvas id=\"todoChart\" class=\"todo-chart\"></canvas>\n    </div>\n\n    <script>\n        document.addEventListener('DOMContentLoaded', function() {\n            fetch('/data/')\n                .then(response => response.json())\n                .then(data => {\n                    const todoList = document.getElementById('todo-list');\n                    let completedCount = 0;\n\n                    data.forEach(item => {\n                        const div = document.createElement('div');\n                        div.id = `todo-${item.title}`;\n                        div.classList.add('todo-item');\n                        if (item.completed) {\n                            div.classList.add('completed');\n                            completedCount++;\n                        }\n                        div.innerText = item.title;\n                        todoList.appendChild(div);\n                    });\n\n                    const ctx = document.getElementById('todoChart').getContext('2d');\n                    const chart = new Chart(ctx, {\n                        type: 'pie',\n                        data: {\n                            labels: ['Completed', 'Incomplete'],\n                            datasets: [{\n                                data: [completedCount, data.length - completedCount],\n                                backgroundColor: ['#36a2eb', '#ff6384'],\n                            }]\n                        },\n                        options: {\n                            responsive: true,\n                            maintainAspectRatio: false,\n                        }\n                    });\n                });\n        });\n    </script>\n</body>\n</html>"}], "7": [{"file": "settings.py", "path": "budget_control_app/budget_control_app/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control_app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "budget_control_app/budget_control_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget.urls')),\n]"}, {"file": "wsgi.py", "path": "budget_control_app/budget_control_app/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control_app.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "budget_control_app/budget_control_app/__init__.py", "code": ""}, {"file": "views.py", "path": "budget_control_app/budget/views.py", "code": "from django.shortcuts import render\n\n\ndef dashboard(request):\n    return render(request, 'dashboard.html')"}, {"file": "urls.py", "path": "budget_control_app/budget/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n]"}, {"file": "models.py", "path": "budget_control_app/budget/models.py", "code": "from django.db import models\n\n\nclass Transaction(models.Model):\n    name = models.CharField(max_length=100)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.name} - {self.amount}\""}, {"file": "admin.py", "path": "budget_control_app/budget/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction\n\nadmin.site.register(Transaction)"}, {"file": "dashboard.html", "path": "budget_control_app/budget/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control Dashboard</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        .container {\n            margin-top: 50px;\n        }\n        .chart-container {\n            position: relative;\n            margin: auto;\n            height: 40vh;\n            width: 80vw;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"dashboard-title\" class=\"text-center\">Budget Control Dashboard</h1>\n        <div id=\"chart-container\" class=\"chart-container\">\n            <canvas id=\"balanceChart\"></canvas>\n        </div>\n    </div>\n    <script>\n        const ctx = document.getElementById('balanceChart').getContext('2d');\n        const balanceChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [{\n                    label: 'Balance Over Time',\n                    data: [1000, 900, 1200, 1100, 1300, 1250, 1350], // Example data\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "apps.py", "path": "budget_control_app/budget/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BudgetConfig(AppConfig):\n    name = 'budget'"}, {"file": "__init__.py", "path": "budget_control_app/budget/__init__.py", "code": ""}, {"file": "manage.py", "path": "budget_control_app/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}], "8": [{"file": "manage.py", "path": "calendar_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "calendar_project/calendar_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "calendar_project/calendar_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "calendar_project/calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "calendar_project/calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "calendar_project/calendar_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "calendar_project/calendar_app/apps.py", "code": "from django.apps import AppConfig\n\nclass CalendarAppConfig(AppConfig):\n    name = 'calendar_app'\n"}, {"file": "urls.py", "path": "calendar_project/calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "views.py", "path": "calendar_project/calendar_app/views.py", "code": "from django.shortcuts import render\n\n\ndef index(request):\n    return render(request, 'calendar_app/index.html')\n"}, {"file": "index.html", "path": "calendar_project/templates/calendar_app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <link rel=\"stylesheet\" href=\"/static/calendar_app/style.css\">\n</head>\n\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"title\" class=\"title\">Monthly Calendar</h1>\n    </header>\n    <main id=\"main\" class=\"main\">\n        <section id=\"calendar\" class=\"calendar\">\n            <div id=\"calendar-heading\" class=\"calendar-heading\">\n                <button id=\"prev-month\" class=\"button\">&lt;</button>\n                <h2 id=\"month-year\" class=\"month-year\">October 2023</h2>\n                <button id=\"next-month\" class=\"button\">&gt;</button>\n            </div>\n            <div id=\"calendar-grid\" class=\"calendar-grid\">\n                <!-- Calendar grid of days -->\n            </div>\n        </section>\n    </main>\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 Monthly Calendar Application</p>\n    </footer>\n</body>\n\n</html>\n"}, {"file": "style.css", "path": "calendar_project/static/calendar_app/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f9;\n}\n\n.header {\n    background: #333;\n    color: #fff;\n    text-align: center;\n    padding: 1rem 0;\n}\n\n.main {\n    margin: 20px;\n    padding: 20px;\n    background: #fff;\n    border-radius: 8px;\n}\n\n.calendar {\n    max-width: 600px;\n    margin: 0 auto;\n}\n\n.calendar-heading {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    margin-bottom: 20px;\n}\n\n.button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.button:hover {\n    background-color: #0056b3;\n}\n\n.calendar-grid {\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n    gap: 10px;\n}\n"}], "9": [{"file": "manage.py", "path": "chatbot_project/manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"chatbot_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "settings.py", "path": "chatbot_project/chatbot_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "chatbot_project/chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom chatbot import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n]\n"}, {"file": "wsgi.py", "path": "chatbot_project/chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "chatbot_project/chatbot_project/__init__.py", "code": ""}, {"file": "apps.py", "path": "chatbot_project/chatbot/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ChatbotConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot'\n"}, {"file": "views.py", "path": "chatbot_project/chatbot/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n"}, {"file": "__init__.py", "path": "chatbot_project/chatbot/__init__.py", "code": ""}, {"file": "urls.py", "path": "chatbot_project/chatbot/urls.py", "code": ""}, {"file": "home.html", "path": "chatbot_project/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot Product</title>\n    <link href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <div id=\"main-content\" class=\"container\">\n        <header id=\"header\" class=\"jumbotron text-center mt-4\">\n            <h1 class=\"display-4\">Welcome to AI Chatbot</h1>\n            <p class=\"lead\">Your personal assistant powered by AI technology.</p>\n        </header>\n        <section id=\"features\" class=\"row\">\n            <div class=\"col-md-4\">\n                <div class=\"card mb-4 box-shadow\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Feature 1</h5>\n                        <p class=\"card-text\">Description of the feature 1.</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"card mb-4 box-shadow\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Feature 2</h5>\n                        <p class=\"card-text\">Description of the feature 2.</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"card mb-4 box-shadow\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Feature 3</h5>\n                        <p class=\"card-text\">Description of the feature 3.</p>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>\n"}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "calorie_tracker/calorie_tracker/__init__.py", "code": ""}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / \"db.sqlite3\",\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('tracker/', include('tracker.urls')),\n]\n"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "calorie_tracker/tracker/__init__.py", "code": ""}, {"file": "admin.py", "path": "calorie_tracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import FoodEntry\n\nadmin.site.register(FoodEntry)\n"}, {"file": "apps.py", "path": "calorie_tracker/tracker/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TrackerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tracker'\n"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\n\nclass FoodEntry(models.Model):\n    name = models.CharField(max_length=100)\n    calories = models.FloatField()\n    date = models.DateField()\n\n    def __str__(self):\n        return f\"{self.name} ({self.calories} kcal)\"\n"}, {"file": "tests.py", "path": "calorie_tracker/tracker/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render\nfrom .models import FoodEntry\n\n\ndef index(request):\n    entries = FoodEntry.objects.all()\n    return render(request, 'tracker/index.html', {'entries': entries})"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "calorie_tracker/tracker/templates/tracker/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calorie Tracker</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1 id=\"header\" class=\"main-header\">Calorie Tracker</h1>\n    <div id=\"entries-container\" class=\"entries-list\">\n        <ul>\n            {% for entry in entries %}\n                <li class=\"entry-item\" id=\"entry-{{ entry.id }}\">{{ entry.name }}: {{ entry.calories }} kcal on {{ entry.date }}</li>\n            {% endfor %}\n        </ul>\n    </div>\n    <canvas id=\"calorieChart\" class=\"calorie-chart\"></canvas>\n    <script>\n        const ctx = document.getElementById('calorieChart').getContext('2d');\n        const calorieChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: [{% for entry in entries %}'{{ entry.name }}',{% endfor %}],\n                datasets: [{\n                    label: 'Calories Consumed',\n                    data: [{% for entry in entries %}{{ entry.calories }},{% endfor %}],\n                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}], "11": [{"file": "manage.py", "path": "code_review/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'code_review.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "code_review/code_review/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-p@55w0rd1234567890'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'code_review.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'code_review.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "code_review/code_review/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('review/', include('review_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "code_review/code_review/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'code_review.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "code_review/code_review/__init__.py", "code": ""}, {"file": "apps.py", "path": "code_review/review_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ReviewAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'review_app'\n"}, {"file": "models.py", "path": "code_review/review_app/models.py", "code": "from django.db import models\n\nclass TestCode(models.Model):\n    STATUS_CHOICES = [\n        ('Pass', 'Pass'),\n        ('Fail', 'Fail'),\n        ('Select', 'Select'),\n    ]\n    \n    test_name = models.CharField(max_length=255)\n    code = models.TextField()\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='Select')\n\n    def __str__(self):\n        return self.test_name\n"}, {"file": "admin.py", "path": "code_review/review_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TestCode\n\nadmin.site.register(TestCode)\n"}, {"file": "views.py", "path": "code_review/review_app/views.py", "code": "from django.shortcuts import render\nfrom .models import TestCode\n\n\ndef review_view(request):\n    testcodes = TestCode.objects.all()\n    return render(request, 'review_app/review_page.html', {'testcodes': testcodes})\n"}, {"file": "urls.py", "path": "code_review/review_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.review_view, name='review_view'),\n]\n"}, {"file": "review_page.html", "path": "code_review/templates/review_app/review_page.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Review Page</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.9.3/css/bulma.min.css\">\n</head>\n<body>\n    <section class=\"section\">\n        <div class=\"container\">\n            <h1 class=\"title\">Code Review</h1>\n            <table class=\"table is-fullwidth is-striped\">\n                <thead>\n                    <tr>\n                        <th>Test Name</th>\n                        <th>Code</th>\n                        <th>Status</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {% for testcode in testcodes %}\n                    <tr id=\"testcode-{{ testcode.id }}\" class=\"testcode\">\n                        <td>{{ testcode.test_name }}</td>\n                        <td>\n                            <pre id=\"code-{{ testcode.id }}\" class=\"code\">{{ testcode.code }}</pre>\n                        </td>\n                        <td>\n                            <div class=\"select\">\n                                <select id=\"status-{{ testcode.id }}\" class=\"status\">\n                                    <option value=\"Pass\" {% if testcode.status == 'Pass' %}selected{% endif %}>Pass</option>\n                                    <option value=\"Fail\" {% if testcode.status == 'Fail' %}selected{% endif %}>Fail</option>\n                                    <option value=\"Select\" {% if testcode.status == 'Select' %}selected{% endif %}>Select</option>\n                                </select>\n                            </div>\n                        </td>\n                    </tr>\n                    {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </section>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "code_review/review_app/__init__.py", "code": ""}, {"file": "migrations/__init__.py", "path": "code_review/review_app/migrations/__init__.py", "code": ""}], "12": [{"file": "manage.py", "path": "accounting/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'accounting.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "accounting/accounting/__init__.py", "code": ""}, {"file": "settings.py", "path": "accounting/accounting/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'YOUR_SECRET_KEY'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'claims',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'accounting.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'accounting.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "accounting/accounting/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('claims.urls')),\n]\n"}, {"file": "wsgi.py", "path": "accounting/accounting/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'accounting.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "accounting/claims/__init__.py", "code": ""}, {"file": "admin.py", "path": "accounting/claims/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim\n\nadmin.site.register(Claim)\n"}, {"file": "apps.py", "path": "accounting/claims/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ClaimsConfig(AppConfig):\n    name = 'claims'\n"}, {"file": "models.py", "path": "accounting/claims/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    EXPENSE_TYPES = [\n        ('Travel', 'Travel Expenses'),\n        ('Labor', 'Labor Expenses'),\n        ('Management', 'Management Expenses'),\n        ('Equipment', 'Equipment Expenses'),\n    ]\n\n    STATUS_TYPES = [\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected'),\n    ]\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=50, choices=EXPENSE_TYPES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=10, choices=STATUS_TYPES, default='Pending')\n    date_created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f\"{self.user.username}: {self.claim_type} - {self.status}\"\n"}, {"file": "tests.py", "path": "accounting/claims/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "accounting/claims/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Claim\nfrom .forms import ClaimForm\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            claim.save()\n            return redirect('claim_list')\n    else:\n        form = ClaimForm()\n    return render(request, 'claims/submit_claim.html', {'form': form})\n\n@login_required\ndef claim_list(request):\n    claims = Claim.objects.all()\n    return render(request, 'claims/claim_list.html', {'claims': claims})\n\n@login_required\ndef claim_detail(request, pk):\n    claim = get_object_or_404(Claim, pk=pk)\n    return render(request, 'claims/claim_detail.html', {'claim': claim})\n\n@login_required\ndef approve_claim(request, pk):\n    claim = get_object_or_404(Claim, pk=pk)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('claim_list')\n\n@login_required\ndef reject_claim(request, pk):\n    claim = get_object_or_404(Claim, pk=pk)\n    claim.status = 'Rejected'\n    claim.save()\n    return redirect('claim_list')\n"}, {"file": "urls.py", "path": "accounting/claims/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.claim_list, name='claim_list'),\n    path('claim/<int:pk>/', views.claim_detail, name='claim_detail'),\n    path('submit/', views.submit_claim, name='submit_claim'),\n    path('claim/<int:pk>/approve/', views.approve_claim, name='approve_claim'),\n    path('claim/<int:pk>/reject/', views.reject_claim, name='reject_claim'),\n]\n"}, {"file": "forms.py", "path": "accounting/claims/forms.py", "code": "from django import forms\nfrom .models import Claim\n\nclass ClaimForm(forms.ModelForm):\n\n    class Meta:\n        model = Claim\n        fields = ['claim_type', 'amount', 'description']\n        labels = {\n            'claim_type': 'Claim Type',\n            'amount': 'Amount',\n            'description': 'Description',\n        }\n"}, {"file": "submit_claim.html", "path": "accounting/claims/templates/claims/submit_claim.html", "code": "{% extends 'base_generic.html' %}\n\n{% block content %}\n  <h1 id=\"submit-claim-title\" class=\"title\">Submit Claim</h1>\n  <form method=\"post\" id=\"submit-claim-form\" class=\"submit-claim\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n  </form>\n{% endblock %}\n"}, {"file": "claim_list.html", "path": "accounting/claims/templates/claims/claim_list.html", "code": "{% extends 'base_generic.html' %}\n\n{% block content %}\n  <h1 id=\"claim-list-title\" class=\"title\">Claim List</h1>\n  <table id=\"claim-list-table\" class=\"table\">\n    <thead>\n      <tr>\n        <th>Type</th>\n        <th>Amount</th>\n        <th>Description</th>\n        <th>Status</th>\n        <th>Actions</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for claim in claims %}\n      <tr>\n        <td>{{ claim.claim_type }}</td>\n        <td>{{ claim.amount }}</td>\n        <td>{{ claim.description }}</td>\n        <td>{{ claim.status }}</td>\n        <td>\n          <a href=\"{% url 'claim_detail' claim.pk %}\" class=\"btn btn-info\">Detail</a>\n          {% if claim.status == \"Pending\" %}\n          <a href=\"{% url 'approve_claim' claim.pk %}\" class=\"btn btn-success\">Approve</a>\n          <a href=\"{% url 'reject_claim' claim.pk %}\" class=\"btn btn-danger\">Reject</a>\n          {% endif %}\n        </td>\n      </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n{% endblock %}\n"}, {"file": "claim_detail.html", "path": "accounting/claims/templates/claims/claim_detail.html", "code": "{% extends 'base_generic.html' %}\n\n{% block content %}\n  <h1 id=\"claim-detail-title\" class=\"title\">Claim Detail</h1>\n  <p>Type: {{ claim.claim_type }}</p>\n  <p>Amount: {{ claim.amount }}</p>\n  <p>Description: {{ claim.description }}</p>\n  <p>Status: {{ claim.status }}</p>\n  <p>Date Created: {{ claim.date_created }}</p>\n{% endblock %}\n"}, {"file": "base_generic.html", "path": "accounting/claims/templates/base_generic.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Accounting System</title>\n    <link href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n  <div id=\"main-container\" class=\"container\">\n      <header id=\"header\" class=\"mt-4\">\n        <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <a class=\"navbar-brand\" href=\"#\">Accounting System</a>\n          <div class=\"collapse navbar-collapse\">\n            <ul class=\"navbar-nav mr-auto\">\n              <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"{% url 'claim_list' %}\">Claims</a>\n              </li>\n              <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"{% url 'submit_claim' %}\">Submit Claim</a>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </header>\n      <main id=\"content\">\n        {% block content %}{% endblock %}\n      </main>\n  </div>\n</body>\n</html>\n"}], "13": [{"file": "manage.py", "path": "crm/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "crm/crm/__init__.py", "code": ""}, {"file": "settings.py", "path": "crm/crm/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'clients',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'crm.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'crm.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "crm/crm/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('clients/', include('clients.urls')),\n]"}, {"file": "wsgi.py", "path": "crm/crm/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "crm/clients/__init__.py", "code": ""}, {"file": "admin.py", "path": "crm/clients/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)"}, {"file": "apps.py", "path": "crm/clients/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ClientsConfig(AppConfig):\n    name = 'clients'"}, {"file": "models.py", "path": "crm/clients/models.py", "code": "from django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=6)\n    company = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=20)\n    preferred_products = models.ManyToManyField(Product, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.product.name} - {self.customer.name}'"}, {"file": "urls.py", "path": "crm/clients/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "views.py", "path": "crm/clients/views.py", "code": "from django.shortcuts import render\n\nfrom .models import Customer, Product, PurchaseRecord\n\ndef index(request):\n    customers = Customer.objects.all()\n    return render(request, 'clients/index.html', {'customers': customers})"}, {"file": "index.html", "path": "crm/templates/clients/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Client Management System</title>\n</head>\n<body>\n    <h1 id=\"main-title\" class=\"main-heading\">Client Management</h1>\n    <table id=\"customers-table\" class=\"table table-striped\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Birthday</th>\n                <th>Age</th>\n                <th>Sex</th>\n                <th>Company</th>\n                <th>Phone Number</th>\n           </tr>\n        </thead>\n        <tbody>\n            {% for customer in customers %}\n            <tr>\n                <td>{{ customer.name }}</td>\n                <td>{{ customer.birthday }}</td>\n                <td>{{ customer.age }}</td>\n                <td>{{ customer.sex }}</td>\n                <td>{{ customer.company }}</td>\n                <td>{{ customer.phone_number }}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>"}, {"file": "tests.py", "path": "crm/clients/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "__init__.py", "path": "crm/clients/migrations/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "helloworld_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \n            available on your PYTHONPATH environment variable? Did you \n            forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "helloworld_project/helloworld_project/settings.py", "code": "from pathlib import Path\n\n# Base Directory\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Security Key and Debug\nSECRET_KEY = 'django-insecure-your-secret-key-here'\nDEBUG = True\n\n# Allowed Hosts\nALLOWED_HOSTS = []\n\n# Installed Apps\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld_app',  # Our app\n]\n\n# Middleware\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# URL Configuration\nROOT_URLCONF = 'helloworld_project.urls'\n\n# Templates\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# WSGI Application\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password Validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\n# Static Files\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "helloworld_project/helloworld_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom helloworld_app import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.hello_world, name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "helloworld_project/helloworld_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "helloworld_project/helloworld_project/__init__.py", "code": ""}, {"file": "views.py", "path": "helloworld_project/helloworld_app/views.py", "code": "from django.http import HttpResponse\n\ndef hello_world(request):\n    return HttpResponse('<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Hello World</title></head><body><div id=\"message-container\" class=\"message-container-class\"><h1 id=\"hello-title\" class=\"hello-title-class\">helloword</h1></div></body></html>')\n"}, {"file": "__init__.py", "path": "helloworld_project/helloworld_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "helloworld_project/helloworld_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloworldAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworld_app'\n"}, {"file": "asgi.py", "path": "helloworld_project/helloworld_project/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\napplication = get_asgi_application()\n"}], "15": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'replace-this-with-your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myproject/myapp/admin.py", "code": "from django.contrib import admin\n"}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\nclass MyAppConfig(AppConfig):\n    name = 'myapp'\n"}, {"file": "models.py", "path": "myproject/myapp/models.py", "code": ""}, {"file": "tests.py", "path": "myproject/myapp/tests.py", "code": ""}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloword(request):\n    return HttpResponse('Hello Word!')\n"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloword/', views.helloword, name='helloword'),\n]\n"}, {"file": "home.html", "path": "myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <button id=\"jumpButton\" class=\"btn\" onclick=\"location.href='{% url 'helloword' %}'\">Go to Hello Word</button>\n</body>\n</html>\n"}], "16": [{"file": "batch_script.bat", "path": "scripts/batch_script.bat", "code": "@echo off\npython process_excel.py\npause"}, {"file": "process_excel.py", "path": "scripts/process_excel.py", "code": "import pandas as pd\n\ndef read_and_transform(input_file, output_file):\n    # Read the Excel file\n    df = pd.read_excel(input_file)\n    \n    # Pivot the table to create a two-dimensional subject table based on Weekday and Time\n    pivot_df = df.pivot(index='Time', columns='Weekday', values='Name')\n\n    # Write the output to a new Excel file\n    pivot_df.to_excel(output_file, sheet_name='Subject Table')\n\nif __name__ == '__main__':\n    input_file = 'data/Spring Semester Subjects.xlsx'\n    output_file = 'output/Transformed Subjects.xlsx'\n    read_and_transform(input_file, output_file)"}, {"file": "README.md", "path": "README.md", "code": "# Project: Excel Subject Processor\n\nThis project includes a batch script and a Python script to process an Excel file containing a list of subjects, and to output a transformed two-dimensional table.\n\n## Instructions\n\n1. Place the input Excel file `Spring Semester Subjects.xlsx` in the `data` directory.\n2. Run `batch_script.bat` to execute the project.\n3. The output will be generated in the `output` directory as `Transformed Subjects.xlsx`.\n\n## File Structure\n- `scripts/batch_script.bat`: The batch file to execute the process.\n- `scripts/process_excel.py`: The Python script that performs the data processing.\n- `data/`: Directory for input data files.\n- `output/`: Directory where the processed data will be saved.\n"}, {"file": "index.html", "path": "docs/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Excel Subject Processor</title>\n    <link rel=\"stylesheet\" href=\"styles/style.css\">\n</head>\n<body>\n    <header id=\"header\" class=\"site-header\">\n        <h1 class=\"title\">Excel Subject Processor</h1>\n    </header>\n    <main id=\"main-content\" class=\"main-content\">\n        <section id=\"instructions\" class=\"instructions-section\">\n            <p class=\"instructions-text\">Follow the instructions in README to run the project and transform the Excel file.</p>\n        </section>\n    </main>\n    <footer id=\"footer\" class=\"site-footer\">\n        <p class=\"footer-text\">&copy; 2023 Excel Subject Processor</p>\n    </footer>\n</body>\n</html>"}, {"file": "style.css", "path": "docs/styles/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n}\n.title {\n    text-align: center;\n    margin-top: 20px;\n}\n.instructions-text {\n    padding: 20px;\n}\n.footer-text {\n    text-align: center;\n    padding: 10px;\n}"}], "17": [{"file": "main.py", "path": "project/src/main.py", "code": "# main.py\nimport pandas as pd\nimport statsmodels.api as sm\nfrom process_data import process_data\n\nif __name__ == '__main__':\n    # Read dataset\n    df = pd.read_excel('../data/Gamedata.xlsx')\n    \n    # Process data (create lagged 'result' column)\n    df_processed = process_data(df)\n    \n    # Define dependence and independence variables\n    y = df_processed['result_lagged']\n    X = df_processed.drop(columns=['result', 'result_lagged'])\n    \n    # Add constant to the model\n    X = sm.add_constant(X)\n    \n    # Fit logistic model\n    logit_model = sm.Logit(y, X)\n    result = logit_model.fit()\n    \n    # Output the summary to an Excel file\n    with pd.ExcelWriter('../output/Logistic.xlsx') as writer:\n        summary_df = pd.DataFrame(str(result.summary()).split('\\n'))\n        summary_df.to_excel(writer, index=False, header=False, sheet_name='Logistic Summary')\n"}, {"file": "process_data.py", "path": "project/src/process_data.py", "code": "# process_data.py\nimport pandas as pd\n\ndef process_data(df):\n    df['result_lagged'] = df['result'].shift(-1)\n    df = df.dropna()  # Drop rows with NaN values\n    return df\n"}, {"file": "requirements.txt", "path": "project/requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}, {"file": "README.md", "path": "project/README.md", "code": "# Logistic Regression Model Project\n\n## Description\nThis project reads a dataset from `Gamedata.xlsx`, processes it to include a lagged dependence variable, builds a logistic regression model, and outputs the model summary to `Logistic.xlsx`.\n\n## Usage\n1. Ensure all required libraries are installed:\n   ```\n   pip install -r requirements.txt\n   ```\n2. Place `Gamedata.xlsx` file in `data/` directory.\n3. Run the `main.py` script:\n   ```\n   python src/main.py\n   ```\n4. The output will be saved as `Logistic.xlsx` in the `output/` directory.\n\n## Structure\n- `src/`: Contains source code files.\n- `data/`: Place the input dataset here.\n- `output/`: The directory where the output file will be saved.\n"}], "18": [{"file": "game.py", "path": "bashcrawl/game.py", "code": "class Room:\n    def __init__(self, name, description, exits):\n        self.name = name\n        self.description = description\n        self.exits = exits\n\nclass Game:\n    def __init__(self):\n        self.rooms = self.create_rooms()\n        self.current_room = self.rooms[\"living_room\"]\n\n    def create_rooms(self):\n        rooms = {\n            \"living_room\": Room(\n                \"Living Room\",\n                \"You are in a cozy living room. There's a couch and a TV.\",\n                {\"north\": \"kitchen\", \"east\": \"bedroom\"}\n            ),\n            \"kitchen\": Room(\n                \"Kitchen\",\n                \"You are in the kitchen. There's a smell of freshly baked cookies.\",\n                {\"south\": \"living_room\"}\n            ),\n            \"bedroom\": Room(\n                \"Bedroom\",\n                \"You are in a quiet bedroom with a comfortable bed.\",\n                {\"west\": \"living_room\"}\n            ),\n        }\n        return rooms\n\n    def play(self):\n        print(\"Welcome to Bashcrawl!\")\n        while True:\n            print(f\"\\n{self.current_room.name}\")\n            print(self.current_room.description)\n            command = input(\"\\nEnter a command: \").strip().lower()\n            if command in self.current_room.exits:\n                self.current_room = self.rooms[self.current_room.exits[command]]\n            elif command == \"quit\":\n                print(\"Thanks for playing!\")\n                break\n            else:\n                print(\"Invalid command. Try again.\")\n\ndef main():\n    game = Game()\n    game.play()\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "__init__.py", "path": "bashcrawl/__init__.py", "code": ""}], "19": [{"file": "main.py", "path": "project/src/main.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n# Read the dataset\nfile_path = '../data/Deathlist.csv'\ndata = pd.read_csv(file_path)\n\ndata['Date of death'] = pd.to_datetime(data['Date of death'])\ndata['week'] = data['Date of death'].dt.isocalendar().week\ndeaths_per_week = data.groupby('week').size()\n\n# Plot the data\nplt.figure(figsize=(10, 6))\ndeaths_per_week.plot(kind='bar', color='skyblue')\nplt.title('Weekly Deaths')\nplt.xlabel('Week Number')\nplt.ylabel('Number of Deaths')\nplt.xticks(rotation=45)\nplt.tight_layout()\nplt.savefig('../output/weekly_deaths_histogram.png')\nplt.show()"}, {"file": "Deathlist.csv", "path": "project/data/Deathlist.csv", "code": "Date of death,Other Fields\n2023-01-01,Sample Field 1\n2023-01-02,Sample Field 2\n2023-01-08,Sample Field 3\n2023-01-09,Sample Field 4\n2023-01-15,Sample Field 5\n2023-01-16,Sample Field 6\n"}, {"file": "readme.txt", "path": "project/readme.txt", "code": "This project reads the 'Deathlist.csv' dataset, calculates weekly death counts, and generates a histogram.\n\nTo run the project:\n1. Install Python 3.x\n2. Install required libraries: pandas, matplotlib\n3. Execute src/main.py\n4. Check the output image in the output directory."}], "20": [{"file": "manage.py", "path": "myblog_project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblog_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "myblog_project/myblog_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "myblog_project/myblog_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myblog_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myblog_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "myblog_project/myblog_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]\n"}, {"file": "wsgi.py", "path": "myblog_project/myblog_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblog_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myblog_project/blog/__init__.py", "code": ""}, {"file": "admin.py", "path": "myblog_project/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)\n"}, {"file": "apps.py", "path": "myblog_project/blog/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    name = 'blog'\n"}, {"file": "models.py", "path": "myblog_project/blog/models.py", "code": "from django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n"}, {"file": "tests.py", "path": "myblog_project/blog/tests.py", "code": "from django.test import TestCase\n"}, {"file": "views.py", "path": "myblog_project/blog/views.py", "code": "from django.shortcuts import render\nfrom .models import Post\n\n\ndef blog_list(request):\n    posts = Post.objects.all()\n    return render(request, 'blog/blog_list.html', {'posts': posts})\n"}, {"file": "urls.py", "path": "myblog_project/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.blog_list, name='blog_list'),\n]\n"}, {"file": "blog_list.html", "path": "myblog_project/templates/blog/blog_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blog</title>\n</head>\n<body>\n    <h1 id=\"blog-title\" class=\"blog-title\">My Blog</h1>\n    <div id=\"blog-posts\" class=\"blog-posts\">\n        {% for post in posts %}\n            <article id=\"post-{{ post.id }}\" class=\"blog-post\">\n                <h2 id=\"post-title-{{ post.id }}\" class=\"post-title\">{{ post.title }}</h2>\n                <div id=\"post-content-{{ post.id }}\" class=\"post-content\">\n                    {{ post.content }}\n                </div>\n                <small id=\"post-date-{{ post.id }}\" class=\"post-date\">{{ post.created_at }}</small>\n            </article>\n        {% endfor %}\n    </div>\n</body>\n</html>\n"}, {"file": "0001_initial.py", "path": "myblog_project/blog/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Post',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('content', models.TextField()),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "myblog_project/blog/migrations/__init__.py", "code": ""}]}