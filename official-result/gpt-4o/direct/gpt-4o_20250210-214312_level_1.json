{"1": [{"file": "settings.py", "path": "bmi_calculator_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'django-insecure-...'  # Change this to your own secret key\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = 'static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "bmi_calculator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom bmi_app import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "wsgi.py", "path": "bmi_calculator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "bmi_calculator_project/__init__.py", "code": ""}, {"file": "views.py", "path": "bmi_app/views.py", "code": "from django.shortcuts import render\n\n\ndef bmi_calculator(request):\n    bmi = None\n    if request.method == 'POST':\n        weight = float(request.POST.get('weight'))\n        height = float(request.POST.get('height'))\n        bmi = weight / (height * height)\n    return render(request, 'bmi_calculator.html', {'bmi': bmi})"}, {"file": "__init__.py", "path": "bmi_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "bmi_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BmiAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bmi_app'"}, {"file": "bmi_calculator.html", "path": "templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <style>\n        .container { max-width: 600px; margin: 50px auto; padding: 20px; border: 1px solid #ccc; border-radius: 10px; }\n        .form-group { margin-bottom: 15px; }\n        .btn { background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; }\n        .result { margin-top: 20px; font-size: 18px; }\n    </style>\n</head>\n<body>\n\n<div class=\"container\">\n    <h1>BMI Calculator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"weight\" id=\"weight-label\">Weight (kg):</label>\n            <input type=\"number\" step=\"0.1\" id=\"weight\" name=\"weight\" class=\"input\" required>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"height\" id=\"height-label\">Height (m):</label>\n            <input type=\"number\" step=\"0.01\" id=\"height\" name=\"height\" class=\"input\" required>\n        </div>\n        <button type=\"submit\" class=\"btn\">Calculate BMI</button>\n    </form>\n    {% if bmi is not None %}\n        <div class=\"result\" id=\"bmi-result\">\n            Your BMI is: {{ bmi|floatformat:2 }}\n        </div>\n    {% endif %}\n</div>\n\n</body>\n</html>"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom converter import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.index, name='index'),\n]"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "currency_converter/currency_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "currency_converter/converter/__init__.py", "code": ""}, {"file": "models.py", "path": "currency_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\n\n# Simulated exchange rates dictionary\ndummy_exchange_rates = {\n    'USD': {'EUR': 0.85, 'JPY': 110.53, 'GBP': 0.75},\n    'EUR': {'USD': 1.18, 'JPY': 130.02, 'GBP': 0.88},\n    'JPY': {'USD': 0.0091, 'EUR': 0.0077, 'GBP': 0.0068},\n    'GBP': {'USD': 1.34, 'EUR': 1.14, 'JPY': 147.84},\n}\n\n\ndef index(request):\n    converted_amount = None\n    if request.method == 'POST':\n        from_currency = request.POST.get('from_currency')\n        to_currency = request.POST.get('to_currency')\n        amount = float(request.POST.get('amount'))\n        rate = dummy_exchange_rates.get(from_currency, {}).get(to_currency)\n        if rate:\n            converted_amount = amount * rate\n    return render(request, 'index.html', {\n        'converted_amount': converted_amount,\n        'exchange_rates': dummy_exchange_rates.keys()\n    })"}, {"file": "admin.py", "path": "currency_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "currency_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'"}, {"file": "tests.py", "path": "currency_converter/converter/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\n\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "index.html", "path": "currency_converter/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <style>\n        #converter-form { max-width: 300px; margin: 0 auto; }\n        .form-group { margin-bottom: 15px; }\n        .result { font-weight: bold; }\n    </style>\n</head>\n<body>\n    <h1 id=\"title\">Currency Converter</h1>\n    <form id=\"converter-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"from_currency\">From Currency:</label>\n            <select id=\"from_currency\" name=\"from_currency\" class=\"form-control\">\n                {% for currency in exchange_rates %}\n                    <option value=\"{{ currency }}\">{{ currency }}</option>\n                {% endfor %}\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"to_currency\">To Currency:</label>\n            <select id=\"to_currency\" name=\"to_currency\" class=\"form-control\">\n                {% for currency in exchange_rates %}\n                    <option value=\"{{ currency }}\">{{ currency }}</option>\n                {% endfor %}\n            </select>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"amount\">Amount:</label>\n            <input type=\"number\" id=\"amount\" name=\"amount\" class=\"form-control\" step=\"0.01\" required>\n        </div>\n        <button type=\"submit\" id=\"convert-button\" class=\"btn\">Convert</button>\n    </form>\n\n    {% if converted_amount is not None %}\n        <p class=\"result\">Converted Amount: {{ converted_amount }}</p>\n    {% endif %}\n</body>\n</html>"}], "3": [{"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "password_generator/password_generator/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\n\ndef password(request):\n    length = int(request.GET.get('length', 12))\n    characters = string.ascii_lowercase\n\n    if request.GET.get('uppercase'):\n        characters += string.ascii_uppercase\n    if request.GET.get('numbers'):\n        characters += string.digits\n    if request.GET.get('special'):\n        characters += string.punctuation\n\n    the_password = ''.join(random.choice(characters) for _ in range(length))\n\n    return render(request, 'generator/password.html', {'password': the_password})\n"}, {"file": "home.html", "path": "password_generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"title\" class=\"main-title\">Password Generator</h1>\n    <form action=\"password/\">\n        <label for=\"length\" id=\"length-label\" class=\"form-label\">Password Length:</label>\n        <input type=\"number\" id=\"length\" class=\"input-number\" name=\"length\" min=\"6\" max=\"30\" value=\"12\">\n        <br><br>\n        <input type=\"checkbox\" id=\"uppercase\" class=\"checkbox\" name=\"uppercase\">\n        <label for=\"uppercase\" id=\"uppercase-label\" class=\"checkbox-label\">Include Uppercase Letters</label>\n        <br>\n        <input type=\"checkbox\" id=\"numbers\" class=\"checkbox\" name=\"numbers\">\n        <label for=\"numbers\" id=\"numbers-label\" class=\"checkbox-label\">Include Numbers</label>\n        <br>\n        <input type=\"checkbox\" id=\"special\" class=\"checkbox\" name=\"special\">\n        <label for=\"special\" id=\"special-label\" class=\"checkbox-label\">Include Special Characters</label>\n        <br><br>\n        <button type=\"submit\" id=\"generate-btn\" class=\"btn\">Generate Password</button>\n    </form>\n</body>\n</html>\n"}, {"file": "password.html", "path": "password_generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Password</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"title\" class=\"main-title\">Your Generated Password</h1>\n    <p id=\"password-display\" class=\"password-text\">{{ password }}</p>\n    <a href=\"/\" id=\"back-link\" class=\"navigation-link\">Generate another password</a>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "password_generator/generator/migrations/__init__.py", "code": ""}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "manage.py", "path": "password_generator/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "4": [{"file": "manage.py", "path": "qr_generator/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "qr_generator/qr_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "qr_generator/qr_generator/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve(strict=True).parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcodeapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_generator.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "qr_generator/qr_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrcodeapp.urls')),\n]\n"}, {"file": "wsgi.py", "path": "qr_generator/qr_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "qr_generator/qrcodeapp/__init__.py", "code": ""}, {"file": "views.py", "path": "qr_generator/qrcodeapp/views.py", "code": "from django.shortcuts import render\nimport qrcode\nfrom io import BytesIO\nfrom django.http import HttpResponse\nfrom django.template import loader\n\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        img = qrcode.make(data)\n\n        # Save to buffer\n        buffer = BytesIO()\n        img.save(buffer, format='PNG')\n        image_stream = buffer.getvalue()\n\n        # Display page with QR code\n        response = HttpResponse(content_type='image/png')\n        response.write(image_stream)\n        return response\n\n    return render(request, 'index.html', {})\n"}, {"file": "urls.py", "path": "qr_generator/qrcodeapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.generate_qr_code, name='generate_qr_code'),\n]\n"}, {"file": "index.html", "path": "qr_generator/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"qr-form-container\" class=\"form-container\">\n        <h1 id=\"title\" class=\"title\">QR Code Generator</h1>\n        <form id=\"qr-form\" class=\"qr-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"data\" id=\"data-label\" class=\"label\">Enter data to encode:</label><br>\n            <input type=\"text\" name=\"data\" id=\"data-input\" class=\"input\"><br>\n            <input type=\"submit\" value=\"Generate QR Code\" id=\"submit-button\" class=\"button\">\n        </form>\n    </div>\n</body>\n</html>\n"}], "5": [{"file": "manage.py", "path": "markdown_html_converter_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "markdown_html_converter_project/markdown_html_converter_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_html_converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_html_converter_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "markdown_html_converter_project/markdown_html_converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "wsgi.py", "path": "markdown_html_converter_project/markdown_html_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "markdown_html_converter_project/markdown_html_converter_project/__init__.py", "code": ""}, {"file": "views.py", "path": "markdown_html_converter_project/converter/views.py", "code": "from django.shortcuts import render\nfrom markdown2 import markdown\n\n\ndef index(request):\n    html_content = \"\"\n    markdown_text = \"\"\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_content = markdown(markdown_text)\n    return render(request, 'converter/index.html', {'html_content': html_content, 'markdown_text': markdown_text})\n"}, {"file": "urls.py", "path": "markdown_html_converter_project/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "markdown_html_converter_project/converter/templates/converter/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n<div class=\"container mt-4\">\n    <h1 id=\"main-title\" class=\"text-center mb-4\">Markdown to HTML Converter</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"markdown-text\" id=\"markdown-label\" class=\"form-label\">Markdown Text:</label>\n            <textarea name=\"markdown_text\" id=\"markdown-text\" class=\"form-control\" rows=\"10\">{{ markdown_text }}</textarea>\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Convert</button>\n    </form>\n    <h3 id=\"output-title\" class=\"mt-4\">HTML Output:</h3>\n    <div id=\"html-output\" class=\"border p-4 rounded\">\n        {{ html_content|safe }}\n    </div>\n</div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "markdown_html_converter_project/converter/__init__.py", "code": ""}, {"file": "apps.py", "path": "markdown_html_converter_project/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    name = 'converter'\n"}, {"file": "__init__.py", "path": "markdown_html_converter_project/converter/migrations/__init__.py", "code": ""}], "6": [{"file": "manage.py", "path": "todoproject/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todoproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "todoproject/todoproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "todoproject/todoproject/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-xyz123'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'chartkick',\n    'todo',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todoproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todoproject.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / \"static\"]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "todoproject/todoproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo.urls')),\n]"}, {"file": "wsgi.py", "path": "todoproject/todoproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todoproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "todoproject/todo/__init__.py", "code": ""}, {"file": "admin.py", "path": "todoproject/todo/admin.py", "code": "from django.contrib import admin\nfrom .models import Todo\n\nadmin.site.register(Todo)"}, {"file": "apps.py", "path": "todoproject/todo/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todo'"}, {"file": "models.py", "path": "todoproject/todo/models.py", "code": "from django.db import models\n\n\nclass Todo(models.Model):\n    title = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todoproject/todo/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Todo\nfrom .forms import TodoForm\n\n\ndef index(request):\n    todos = Todo.objects.all()\n    return render(request, 'todo/index.html', {'todos': todos})\n\n\ndef add_todo(request):\n    if request.method == 'POST':\n        form = TodoForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('index')\n    else:\n        form = TodoForm()\n    return render(request, 'todo/add_todo.html', {'form': form})"}, {"file": "forms.py", "path": "todoproject/todo/forms.py", "code": "from django import forms\nfrom .models import Todo\n\n\nclass TodoForm(forms.ModelForm):\n    class Meta:\n        model = Todo\n        fields = ['title', 'description', 'completed']"}, {"file": "urls.py", "path": "todoproject/todo/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('add/', views.add_todo, name='add_todo'),\n]"}, {"file": "index.html", "path": "todoproject/templates/todo/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chartkick@5.0.1/dist/chartkick.min.js\"></script>\n    <script src=\"https://www.gstatic.com/charts/loader.js\"></script>\n</head>\n<body>\n    <div class=\"container mt-5\" id=\"main-container\">\n        <h1 class=\"text-center\">Todo List</h1>\n        <div class=\"text-right mb-3\">\n            <a href=\"{% url 'add_todo' %}\" class=\"btn btn-primary\" id=\"add-todo-btn\">Add Todo</a>\n        </div>\n        <div class=\"list-group\">\n            {% for todo in todos %}\n            <a href=\"#\" class=\"list-group-item list-group-item-action\" id=\"todo-{{ todo.id }}\">\n                <h5 class=\"mb-1\">{{ todo.title }}</h5>\n                <p class=\"mb-1\">{{ todo.description }}</p>\n                <small>{{ todo.created_at }}</small>\n            </a>\n            {% endfor %}\n        </div>\n        <div id=\"todo-chart\" style=\"height: 400px;\"></div>\n    </div>\n\n    <script type=\"text/javascript\">\n        document.addEventListener('DOMContentLoaded', function() {\n            var completed = {{ todos|length }};\n            var pending = {{ todos|length }} - {% for todo in todos %}{% if todo.completed %}1{% else %}0{% endif %}{% endfor %};\n\n            new Chartkick.PieChart(\"todo-chart\", [\n                [\"Completed\", completed],\n                [\"Pending\", pending]\n            ]);\n        });\n    </script>\n</body>\n</html>"}, {"file": "add_todo.html", "path": "todoproject/templates/todo/add_todo.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Todo</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\" id=\"form-container\">\n        <h1 class=\"text-center\">Add Todo</h1>\n        <form method=\"post\" class=\"mt-3\" id=\"todo-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" class=\"btn btn-success mt-2\" id=\"submit-btn\">Add</button>\n        </form>\n    </div>\n</body>\n</html>"}], "7": [{"file": "manage.py", "path": "budget_control/manage.py", "code": "\"\"\"\nDjango's command-line utility for administrative tasks.\n\"\"\"\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "budget_control/budget_control/__init__.py", "code": ""}, {"file": "settings.py", "path": "budget_control/budget_control/settings.py", "code": "\"\"\"\nDjango settings for budget_control project.\n\"\"\"\nimport os\nfrom pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "budget_control/budget_control/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget.urls')),\n]\n"}, {"file": "wsgi.py", "path": "budget_control/budget_control/wsgi.py", "code": "\"\"\"\nWSGI config for budget_control project.\n\"\"\"\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "budget_control/budget/__init__.py", "code": ""}, {"file": "admin.py", "path": "budget_control/budget/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction\n\nadmin.site.register(Transaction)\n"}, {"file": "apps.py", "path": "budget_control/budget/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BudgetConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget'\n"}, {"file": "models.py", "path": "budget_control/budget/models.py", "code": "from django.db import models\n\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f\"{self.description} ({self.amount})\"\n"}, {"file": "views.py", "path": "budget_control/budget/views.py", "code": "from django.shortcuts import render\nfrom .models import Transaction\n\n\ndef index(request):\n    transactions = Transaction.objects.all()\n    balance = sum(transaction.amount for transaction in transactions)\n    return render(request, 'budget/index.html', {'transactions': transactions, 'balance': balance})\n"}, {"file": "urls.py", "path": "budget_control/budget/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "budget_control/templates/budget/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <style>\n        #chart {\n            width: 100%;\n            height: 400px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"title\" class=\"title\">Budget Control</h1>\n    <div id=\"balance-info\" class=\"balance-info\">\n        <h2 id=\"balance\" class=\"balance\">Balance: {{ balance }}</h2>\n    </div>\n    <div id=\"transaction-list\" class=\"transaction-list\">\n        <ul>\n            {% for transaction in transactions %}\n                <li id=\"transaction-{{ transaction.id }}\" class=\"transaction-item\">\n                    {{ transaction.date }} - {{ transaction.description }}: {{ transaction.amount }}\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n    <div id=\"chart\" class=\"chart\"></div>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script>\n        const ctx = document.getElementById('chart').getContext('2d');\n        const balanceData = {\n            labels: {{ transactions|map:'date'|join:\",\" }},\n            datasets: [{\n                label: 'Balance Over Time',\n                data: {{ transactions|map:'amount'|join:\",\" }},\n                borderColor: 'rgba(75, 192, 192, 1)',\n                borderWidth: 2,\n            }]\n        };\n        new Chart(ctx, {\n            type: 'line',\n            data: balanceData,\n        });\n    </script>\n</body>\n</html>\n"}, {"file": "0001_initial.py", "path": "budget_control/budget/migrations/0001_initial.py", "code": "# Generated by Django A.B on YYYY-MM-DD HH:MM\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('date', models.DateField()),\n                ('description', models.CharField(max_length=255)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "budget_control/budget/migrations/__init__.py", "code": ""}], "8": [{"file": "manage.py", "path": "calendar_app/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "calendar_app/calendar_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "calendar_app/calendar_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "calendar_app/calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar.urls')),\n]\n"}, {"file": "wsgi.py", "path": "calendar_app/calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "calendar_app/calendar/__init__.py", "code": ""}, {"file": "admin.py", "path": "calendar_app/calendar/admin.py", "code": "from django.contrib import admin\n"}, {"file": "apps.py", "path": "calendar_app/calendar/apps.py", "code": "from django.apps import AppConfig\n\nclass CalendarConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calendar'\n"}, {"file": "models.py", "path": "calendar_app/calendar/models.py", "code": "from django.db import models\n"}, {"file": "views.py", "path": "calendar_app/calendar/views.py", "code": "from django.shortcuts import render\nimport calendar\nfrom datetime import datetime\n\n\ndef month_calendar(request):\n    year = datetime.now().year\n    month = datetime.now().month\n    cal = calendar.monthcalendar(year, month)\n    context = {'month': month, 'year': year, 'calendar': cal}\n    return render(request, 'calendar/month_calendar.html', context)\n"}, {"file": "urls.py", "path": "calendar_app/calendar/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.month_calendar, name='month_calendar'),\n]\n"}, {"file": "month_calendar.html", "path": "calendar_app/templates/calendar/month_calendar.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <style>\n        .calendar-table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        .calendar-table, .calendar-table th, .calendar-table td {\n            border: 1px solid black;\n        }\n        .calendar-header {\n            background-color: #f2f2f2;\n        }\n        .calendar-day {\n            height: 100px;\n            vertical-align: top;\n            padding: 5px;\n        }\n    </style>\n</head>\n<body>\n    <h1 id=\"monthly-title\">Calendar for {{ month }}/{{ year }}</h1>\n    <table class=\"calendar-table\" id=\"calendar-table\">\n        <thead>\n            <tr class=\"calendar-header\">\n                <th id=\"sun\">Sun</th>\n                <th id=\"mon\">Mon</th>\n                <th id=\"tue\">Tue</th>\n                <th id=\"wed\">Wed</th>\n                <th id=\"thu\">Thu</th>\n                <th id=\"fri\">Fri</th>\n                <th id=\"sat\">Sat</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for week in calendar %}\n            <tr>\n                {% for day in week %}\n                <td class=\"calendar-day\" id=\"day-{{ day }}\">\n                    {% if day != 0 %}\n                        {{ day }}\n                    {% endif %}\n                </td>\n                {% endfor %}\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>\n"}], "9": [{"file": "manage.py", "path": "aichatbot/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aichatbot.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "aichatbot/aichatbot/__init__.py", "code": ""}, {"file": "settings.py", "path": "aichatbot/aichatbot/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'aichatbot.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'aichatbot.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "aichatbot/aichatbot/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot.urls')),\n]\n"}, {"file": "wsgi.py", "path": "aichatbot/aichatbot/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aichatbot.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "aichatbot/aichatbot/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'aichatbot.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "aichatbot/chatbot/__init__.py", "code": ""}, {"file": "models.py", "path": "aichatbot/chatbot/models.py", "code": ""}, {"file": "views.py", "path": "aichatbot/chatbot/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'chatbot/home.html')\n"}, {"file": "urls.py", "path": "aichatbot/chatbot/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\n"}, {"file": "home.html", "path": "aichatbot/templates/chatbot/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot Introduction</title>\n    <link rel=\"stylesheet\" href=\"static/css/style.css\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"main-title\" class=\"main-title\">Welcome to AI Chatbot</h1>\n    </header>\n    <section id=\"introduction\" class=\"introduction\">\n        <p>Experience the future of customer service and interaction with our state-of-the-art AI Chatbot.</p>\n    </section>\n    <section id=\"features\" class=\"features\">\n        <h2>Features</h2>\n        <ul>\n            <li id=\"feature-nlp\" class=\"feature\">Advanced Natural Language Processing</li>\n            <li id=\"feature-ml\" class=\"feature\">Machine Learning Capabilities</li>\n            <li id=\"feature-integration\" class=\"feature\">Easy Integration</li>\n        </ul>\n    </section>\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 AI Chatbot. All Rights Reserved.</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "style.css", "path": "aichatbot/chatbot/static/css/style.css", "code": "body { font-family: Arial, sans-serif; margin: 0; padding: 0; }\n.header { background-color: #4CAF50; color: white; padding: 10px 0; text-align: center; }\n.introduction { padding: 20px; text-align: center; }\n.features { background-color: #f4f4f9; padding: 20px; }\n.features ul { list-style-type: none; padding: 0; }\n.features li { margin: 5px 0; }\n.footer { background-color: #333; color: white; text-align: center; padding: 10px 0; position: fixed; width: 100%; bottom: 0; }\n"}, {"file": "__init__.py", "path": "aichatbot/chatbot/static/__init__.py", "code": ""}, {"file": "__init__.py", "path": "aichatbot/chatbot/migrations/__init__.py", "code": ""}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-abc123'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n    'rest_framework',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('tracker.urls')),  # API endpoints\n    path('', include('tracker.urls')),  # Main app endpoints\n]"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calorie_tracker/calorie_tracker/__init__.py", "code": ""}, {"file": "apps.py", "path": "calorie_tracker/tracker/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TrackerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tracker'"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\n\n\nclass CalorieEntry(models.Model):\n    date = models.DateField(auto_now_add=True)\n    description = models.CharField(max_length=255)\n    calories = models.IntegerField()\n\n    def __str__(self):\n        return f\"{self.description}: {self.calories} calories on {self.date}\""}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render\nfrom .models import CalorieEntry\n\n\ndef index(request):\n    entries = CalorieEntry.objects.all()\n    context = {\n        'entries': entries\n    }\n    return render(request, 'tracker/index.html', context)"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom .import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "index.html", "path": "calorie_tracker/templates/tracker/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calorie Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.css\">\n</head>\n<body>\n    <div id=\"app\" class=\"tracker-app\">\n        <h1 id=\"title\" class=\"tracker-title\">Calorie Tracker</h1>\n        <ul id=\"entry_list\" class=\"entry-list\">\n            {% for entry in entries %}\n            <li class=\"entry-item\">{{ entry.description }} - {{ entry.calories }} calories</li>\n            {% endfor %}\n        </ul>\n        <canvas id=\"caloriesChart\" class=\"calories-chart\"></canvas>\n    </div>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js\"></script>\n    <script>\n        const ctx = document.getElementById('caloriesChart').getContext('2d');\n        const caloriesData = {\n            labels: [{% for entry in entries %}'{{ entry.description }}',{% endfor %}],\n            datasets: [{\n                label: 'Calories',\n                data: [{% for entry in entries %}{{ entry.calories }},{% endfor %}],\n                backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                borderColor: 'rgba(255, 99, 132, 1)',\n                borderWidth: 1\n            }]\n        };\n        const config = {\n            type: 'bar',\n            data: caloriesData,\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        };\n        new Chart(ctx, config);\n    </script>\n</body>\n</html>"}, {"file": "__init__.py", "path": "calorie_tracker/tracker/__init__.py", "code": ""}, {"file": "__init__.py", "path": "calorie_tracker/tracker/migrations/__init__.py", "code": ""}, {"file": "admin.py", "path": "calorie_tracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import CalorieEntry\n\nadmin.site.register(CalorieEntry)"}, {"file": "tests.py", "path": "calorie_tracker/tracker/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}], "11": [{"file": "manage.py", "path": "manual_review/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'manual_review.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "manual_review/manual_review/__init__.py", "code": ""}, {"file": "settings.py", "path": "manual_review/manual_review/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'manual_review.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'manual_review.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "manual_review/manual_review/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('review/', include('review.urls')),\n]\n"}, {"file": "wsgi.py", "path": "manual_review/manual_review/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'manual_review.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "apps.py", "path": "manual_review/review/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ReviewConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'review'\n"}, {"file": "models.py", "path": "manual_review/review/models.py", "code": "from django.db import models\n\n\nclass Project(models.Model):\n    project_id = models.CharField(max_length=255)\n    project_type = models.CharField(max_length=255)\n\n\nclass TestCode(models.Model):\n    project = models.ForeignKey(Project, related_name='testcodes', on_delete=models.CASCADE)\n    page = models.CharField(max_length=255)\n    function = models.CharField(max_length=255)\n    test = models.TextField()\n\n\nclass TestStatus(models.Model):\n    test_code = models.ForeignKey(TestCode, related_name='statuses', on_delete=models.CASCADE)\n    status = models.CharField(max_length=32, choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')], default='Select')\n"}, {"file": "views.py", "path": "manual_review/review/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom .models import Project, TestCode\n\n\ndef review_page(request, project_id):\n    project = get_object_or_404(Project, project_id=project_id)\n    testcodes = project.testcodes.all()\n    return render(request, 'review/review_page.html', {'project': project, 'testcodes': testcodes})\n"}, {"file": "urls.py", "path": "manual_review/review/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('<int:project_id>/', views.review_page, name='review_page'),\n]\n"}, {"file": "review_page.html", "path": "manual_review/templates/review/review_page.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Review Page</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n\n<body>\n    <div class=\"container\">\n        <h1 id=\"project-title\" class=\"mb-4\">Project: {{ project.project_type }}</h1>\n\n        {% for testcode in testcodes %}\n        <div id=\"testcode-{{ testcode.id }}\" class=\"card mb-3\">\n            <div class=\"card-body\">\n                <h5 id=\"function-name-{{ testcode.id }}\" class=\"card-title\">Function: {{ testcode.function }}</h5>\n                <p id=\"testcode-text-{{ testcode.id }}\" class=\"card-text\">\n                    <pre><code>{{ testcode.test }}</code></pre>\n                </p>\n                <div id=\"status-buttons-{{ testcode.id }}\" class=\"btn-group\" role=\"group\" aria-label=\"Test Status\">\n                    <button type=\"button\" class=\"btn btn-success\">Pass</button>\n                    <button type=\"button\" class=\"btn btn-danger\">Fail</button>\n                    <button type=\"button\" class=\"btn btn-warning\">Select</button>\n                </div>\n            </div>\n        </div>\n        {% endfor %}\n    </div>\n</body>\n\n</html>\n"}, {"file": "admin.py", "path": "manual_review/review/admin.py", "code": "from django.contrib import admin\nfrom .models import Project, TestCode, TestStatus\n\n\nadmin.site.register(Project)\nadmin.site.register(TestCode)\nadmin.site.register(TestStatus)\n"}, {"file": "__init__.py", "path": "manual_review/review/__init__.py", "code": ""}, {"file": "__init__.py", "path": "manual_review/manual_review/__init__.py", "code": ""}, {"file": "__init__.py", "path": "manual_review/manual_review/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'manual_review.settings')\n\napplication = get_asgi_application()\n"}, {"file": "tests.py", "path": "manual_review/review/tests.py", "code": "# This is where you'd write tests for your Django app\n"}, {"file": "__init__.py", "path": "manual_review/review/migrations/__init__.py", "code": ""}], "12": [{"file": "manage.py", "path": "claim_management/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'claim_management.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "claim_management/claim_management/__init__.py", "code": ""}, {"file": "settings.py", "path": "claim_management/claim_management/settings.py", "code": "...\n# Basic settings for the Django project\nINSTALLED_APPS = [..., 'claims',]\nMIDDLEWARE = [...]\nROOT_URLCONF = 'claim_management.urls'\nTEMPLATES = [...]\nWSGI_APPLICATION = 'claim_management.wsgi.application'\nDATABASES = {...}\n..."}, {"file": "urls.py", "path": "claim_management/claim_management/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('claims/', include('claims.urls')),\n]"}, {"file": "wsgi.py", "path": "claim_management/claim_management/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'claim_management.settings')\napplication = get_wsgi_application()"}, {"file": "apps.py", "path": "claim_management/claims/apps.py", "code": "from django.apps import AppConfig\n\nclass ClaimsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'claims'"}, {"file": "models.py", "path": "claim_management/claims/models.py", "code": "from django.db import models\n\nSTATUS_CHOICES = (\n    ('Pending', 'Pending'),\n    ('Approved', 'Approved'),\n    ('Rejected', 'Rejected'),\n)\n\nclass Claim(models.Model):\n    claim_type = models.CharField(max_length=50, choices=[('Travel Expenses', 'Travel Expenses'), ('Labor Expenses', 'Labor Expenses'), ('Management Expenses', 'Management Expenses'), ('Equipment Expenses', 'Equipment Expenses')])\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')\n    created_at = models.DateTimeField(auto_now_add=True)\n    \n    def __str__(self):\n        return f'{self.claim_type} - {self.amount}'"}, {"file": "views.py", "path": "claim_management/claims/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Claim\nfrom .forms import ClaimForm\n\n\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('claim_submitted')\n    else:\n        form = ClaimForm()\n    return render(request, 'claims/submit_claim.html', {'form': form})\n\n\ndef admin_page(request):\n    claims = Claim.objects.all()\n    return render(request, 'claims/admin_page.html', {'claims': claims})\n\n\ndef approve_claim(request, claim_id):\n    claim = Claim.objects.get(id=claim_id)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('admin_page')\n\n\ndef reject_claim(request, claim_id):\n    claim = Claim.objects.get(id=claim_id)\n    claim.status = 'Rejected'\n    claim.save()\n    return redirect('admin_page')"}, {"file": "forms.py", "path": "claim_management/claims/forms.py", "code": "from django import forms\nfrom .models import Claim\n\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['claim_type', 'amount', 'description']"}, {"file": "urls.py", "path": "claim_management/claims/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('submit/', views.submit_claim, name='submit_claim'),\n    path('admin_page/', views.admin_page, name='admin_page'),\n    path('approve/<int:claim_id>/', views.approve_claim, name='approve_claim'),\n    path('reject/<int:claim_id>/', views.reject_claim, name='reject_claim'),\n]"}, {"file": "submit_claim.html", "path": "claim_management/claims/templates/claims/submit_claim.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Submit Claim</title>\n</head>\n<body>\n    <h1 id='submit-claim-heading'>Submit a Claim</h1>\n    <form id='claim-form' method='post'>{% csrf_token %}\n        {{ form.as_p }}\n        <button type='submit' id='submit-claim-button'>Submit</button>\n    </form>\n</body>\n</html>"}, {"file": "admin_page.html", "path": "claim_management/claims/templates/claims/admin_page.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Admin Page</title>\n</head>\n<body>\n    <h1 id='admin-page-heading'>Admin Page</h1>\n    <table id='claims-table'>\n        <thead>\n            <tr>\n                <th>Claim Type</th>\n                <th>Amount</th>\n                <th>Description</th>\n                <th>Status</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for claim in claims %}\n            <tr class='claim-row'>\n                <td>{{ claim.claim_type }}</td>\n                <td>{{ claim.amount }}</td>\n                <td>{{ claim.description }}</td>\n                <td>{{ claim.status }}</td>\n                <td id='action-buttons'>\n                    <a href=\"{% url 'approve_claim' claim.id %}\" class='approve-btn'>Approve</a>\n                    <a href=\"{% url 'reject_claim' claim.id %}\" class='reject-btn'>Reject</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>"}], "13": [{"file": "__init__.py", "path": "crm_project/crm_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "crm_project/crm_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crm_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'crm_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'crm_project.wsgi.application'\n\ndatabase_and_other_settings = ''\"DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "crm_project/crm_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('crm_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "crm_project/crm_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "crm_project/crm_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "crm_project/crm_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\n"}, {"file": "apps.py", "path": "crm_project/crm_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CrmAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'crm_app'\n"}, {"file": "models.py", "path": "crm_project/crm_app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=100)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10) # More robust implementation could use a choice field\n    company = models.CharField(max_length=100)\n    phone_number = models.CharField(max_length=15)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=100)\n    category = models.CharField(max_length=50)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer} - {self.product} - {self.quantity}'\n"}, {"file": "views.py", "path": "crm_project/crm_app/views.py", "code": "from django.shortcuts import render\nfrom .models import PurchaseRecord\n\n\ndef index(request):\n    purchase_records = PurchaseRecord.objects.all()\n    return render(request, 'crm_app/index.html', {'purchase_records': purchase_records})\n"}, {"file": "urls.py", "path": "crm_project/crm_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n"}, {"file": "index.html", "path": "crm_project/crm_app/templates/crm_app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CRM Dashboard</title>\n</head>\n<body>\n    <h1 id=\"dashboard-title\" class=\"dashboard-title\">CRM Dashboard</h1>\n    <table id=\"purchase-records\" class=\"table table-striped\">\n        <thead>\n        <tr>\n            <th>Customer</th>\n            <th>Product</th>\n            <th>Quantity</th>\n            <th>Amount</th>\n            <th>Date</th>\n        </tr>\n        </thead>\n        <tbody>\n        {% for record in purchase_records %}\n            <tr>\n                <td class=\"customer-name\">{{ record.customer.name }}</td>\n                <td class=\"product-name\">{{ record.product.name }}</td>\n                <td class=\"quantity\">{{ record.quantity }}</td>\n                <td class=\"amount\">{{ record.amount }}</td>\n                <td class=\"datetime\">{{ record.datetime }}</td>\n            </tr>\n        {% endfor %}\n        </tbody>\n    </table>\n</body>\n</html>\n"}, {"file": "manage.py", "path": "crm_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            'available on your PYTHONPATH environment variable? Did you '\n            'forget to activate a virtual environment?'\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "14": [{"file": "manage.py", "path": "helloworld_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "helloworld_project/helloworld_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\n\nASGI_APPLICATION = 'helloworld_project.asgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "helloworld_project/helloworld_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom helloworld import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.hello_world, name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "helloworld_project/helloworld_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "helloworld_project/helloworld_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "views.py", "path": "helloworld_project/helloworld/views.py", "code": "from django.http import HttpResponse\n\n\ndef hello_world(request):\n    return HttpResponse('<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Hello World</title></head><body><h1 id=\"hello-title\" class=\"main-title\">Hello, World!</h1></body></html>')\n"}, {"file": "apps.py", "path": "helloworld_project/helloworld/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloworldConfig(AppConfig):\n    name = 'helloworld'\n"}, {"file": "__init__.py", "path": "helloworld_project/helloworld/__init__.py", "code": ""}, {"file": "__init__.py", "path": "helloworld_project/helloworld_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "helloworld_project/helloworld_project/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "helloworld/helloworld/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld.wsgi.application'\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "helloworld/helloworld/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "helloworld/helloworld/__init__.py", "code": ""}, {"file": "apps.py", "path": "helloworld/app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass AppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'app'\n"}, {"file": "__init__.py", "path": "helloworld/app/__init__.py", "code": ""}, {"file": "views.py", "path": "helloworld/app/views.py", "code": "from django.shortcuts import render\n\n\ndef index(request):\n    return render(request, 'index.html')\n\n\ndef helloword(request):\n    return render(request, 'helloword.html')\n"}, {"file": "urls.py", "path": "helloworld/app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloword/', views.helloword, name='helloword'),\n]\n"}, {"file": "index.html", "path": "helloworld/app/templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Index</title>\n</head>\n<body>\n    <button id=\"btn-jump\" class=\"btn btn-primary\" onclick=\"location.href='{% url 'helloword' %}'\">Go to Hello World</button>\n</body>\n</html>\n"}, {"file": "helloword.html", "path": "helloworld/app/templates/helloword.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"hello-title\" class=\"title\">Hello World!</h1>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "helloworld/app/migrations/__init__.py", "code": ""}], "18": [{"file": "main.py", "path": "bashcrawl/main.py", "code": "import os\n\nclass Game:\n    def __init__(self):\n        self.current_room = 'living_room'\n        self.rooms = {\n            'living_room': {\n                'description': 'You are in the living room. There is a couch and a TV here.',\n                'exits': {'north': 'kitchen'}\n            },\n            'kitchen': {\n                'description': 'You are in the kitchen. There is a delicious smell.',\n                'exits': {'south': 'living_room', 'east': 'office'}\n            },\n            'office': {\n                'description': 'You are in a small office with a desk and a computer.',\n                'exits': {'west': 'kitchen'}\n            }\n        }\n\n    def start(self):\n        print(\"Welcome to BashCrawl!\")\n        while True:\n            self.describe_current_room()\n            command = input('> ').strip().lower()\n            if command in ('quit', 'exit'):\n                print(\"Thanks for playing!\")\n                break\n            elif command.startswith('go '):\n                direction = command.split(' ')[1]\n                self.move(direction)\n            else:\n                print(\"I don't understand that command.\")\n\n    def describe_current_room(self):\n        room = self.rooms[self.current_room]\n        print(room['description'])\n        exits = ', '.join(room['exits'].keys())\n        print(f'Exits: {exits}')\n\n    def move(self, direction):\n        if direction in self.rooms[self.current_room]['exits']:\n            self.current_room = self.rooms[self.current_room]['exits'][direction]\n        else:\n            print(\"You can't go that way.\")\n\nif __name__ == '__main__':\n    Game().start()\n"}, {"file": "__init__.py", "path": "bashcrawl/__init__.py", "code": ""}], "19": [{"file": "app.py", "path": "project_directory/app.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\ndef plot_deaths_histogram(csv_file):\n    # Read the CSV file\n    df = pd.read_csv(csv_file, parse_dates=['Date of death'])\n    # Set the date as index\n    df.set_index('Date of death', inplace=True)\n    # Resample the data weekly and count deaths\n    weekly_deaths = df.resample('W').size()\n    # Plot the data\n    plt.figure(figsize=(10, 5))\n    plt.bar(weekly_deaths.index, weekly_deaths.values, width=5, color='skyblue')\n    plt.title('Weekly Deaths Histogram')\n    plt.xlabel('Week')\n    plt.ylabel('Number of Deaths')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n# Main execution\nif __name__ == '__main__':\n    plot_deaths_histogram('Deathlist.csv')"}, {"file": "requirements.txt", "path": "project_directory/requirements.txt", "code": "pandas\nmatplotlib"}, {"file": "index.html", "path": "project_directory/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Deaths Histogram</title>\n</head>\n<body>\n    <div id=\"chart-container\" class=\"chart-container\">\n        <h1 id=\"chart-title\" class=\"chart-title\">Weekly Deaths Histogram</h1>\n        <!-- Chart will be displayed using matplotlib -->\n    </div>\n</body>\n</html>"}], "20": [{"file": "manage.py", "path": "blog_project/manage.py", "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "blog_project/blog_project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blog_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'blog_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "blog_project/blog_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]\n"}, {"file": "wsgi.py", "path": "blog_project/blog_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "blog_project/blog_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "models.py", "path": "blog_project/blog/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    created_at = models.DateTimeField(default=timezone.now)\n\n    def __str__(self):\n        return self.title\n"}, {"file": "admin.py", "path": "blog_project/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)\n"}, {"file": "views.py", "path": "blog_project/blog/views.py", "code": "from django.shortcuts import render\nfrom .models import Post\n\n\ndef home(request):\n    posts = Post.objects.all()\n    return render(request, 'blog/home.html', {'posts': posts})\n"}, {"file": "urls.py", "path": "blog_project/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='blog-home'),\n]\n"}, {"file": "home.html", "path": "blog_project/templates/blog/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Blog Home</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div id=\"container\" class=\"container mt-4\">\n        <h1 id=\"page-title\" class=\"mb-4\">Latest Posts</h1>\n        {% for post in posts %}\n            <div id=\"post-{{ post.id }}\" class=\"card mb-4\">\n                <div class=\"card-body\">\n                    <h2 id=\"post-title-{{ post.id }}\" class=\"card-title\">{{ post.title }}</h2>\n                    <p id=\"post-content-{{ post.id }}\" class=\"card-text\">{{ post.content }}</p>\n                    <small id=\"post-date-{{ post.id }}\" class=\"text-muted\">Posted on {{ post.created_at }}</small>\n                </div>\n            </div>\n        {% endfor %}\n    </div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "blog_project/blog_project/__init__.py", "code": ""}, {"file": "__init__.py", "path": "blog_project/blog/__init__.py", "code": ""}, {"file": "apps.py", "path": "blog_project/blog/apps.py", "code": "from django.apps import AppConfig\n\nclass BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'\n"}, {"file": "__init__.py", "path": "blog_project/blog/migrations/__init__.py", "code": ""}]}