{"1": [{"file": "settings.py", "path": "bmicalculator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-random-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmicalculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmicalculator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "bmicalculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),\n]\n"}, {"file": "apps.py", "path": "calculator/apps.py", "code": "from django.apps import AppConfig\n\nclass CalculatorConfig(AppConfig):\n    name = 'calculator'\n"}, {"file": "urls.py", "path": "calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home'),\n    path('bmi-calculator/', views.bmi_calculator_page, name='bmi_calculator'),\n]\n"}, {"file": "views.py", "path": "calculator/views.py", "code": "from django.shortcuts import render\n\nBMI_CATEGORIES = {\n    'Underweight': (0, 18.4),\n    'Normal weight': (18.5, 24.9),\n    'Overweight': (25, 29.9),\n    'Obesity': (30, 100),\n}\n\ndef home_page(request):\n    return render(request, 'calculator/home.html')\n\ndef bmi_calculator_page(request):\n    bmi_value = None\n    category = None\n    if request.method == 'POST':\n        height = float(request.POST.get('height', 0))\n        weight = float(request.POST.get('weight', 0))\n        unit_height = request.POST.get('unit_height', 'cm')\n        unit_weight = request.POST.get('unit_weight', 'kg')\n        \n        if unit_height == 'inches':\n            height *= 2.54\n        if unit_weight == 'lbs':\n            weight *= 0.453592\n        \n        bmi_value = weight / ((height / 100) ** 2)\n\n        for cat, (low, high) in BMI_CATEGORIES.items():\n            if low <= bmi_value <= high:\n                category = cat\n                break\n\n    return render(request, 'calculator/bmi_calculator.html', {\n        'bmi_value': bmi_value,\n        'category': category\n    })\n"}, {"file": "home.html", "path": "calculator/templates/calculator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css\">\n</head>\n<body class=\"bg-gray-100\">\n    <div id=\"home-page\" class=\"w-full max-w-md mx-auto p-6 bg-white shadow-md mt-10\">\n        <h1 class=\"text-xl font-bold\">BMI Calculator</h1>\n        <p id=\"view-intro\" class=\"mt-4\">Display an introduction to the BMI calculator and how it works.</p>\n        <a id=\"nav-to-calculator\" class=\"block mt-6 text-center text-white bg-blue-500 py-2 px-4 rounded\" href=\"{% url 'bmi_calculator' %}\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>\n"}, {"file": "bmi_calculator.html", "path": "calculator/templates/calculator/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css\">\n</head>\n<body class=\"bg-gray-100\">\n    <div id=\"bmi-calculator-page\" class=\"w-full max-w-md mx-auto p-6 bg-white shadow-md mt-10\">\n        <h1 class=\"text-xl font-bold\">BMI Calculator</h1>\n        <form method=\"post\" class=\"mt-6\">\n            {% csrf_token %}\n            <div class=\"mb-4\">\n                <label for=\"height\" class=\"block text-sm font-medium text-gray-700\">Height</label>\n                <input type=\"number\" name=\"height\" id=\"input-height\" class=\"block w-full mt-1 border-gray-300 rounded-md shadow-sm\" required>\n                <select name=\"unit_height\" class=\"mt-2 w-full\">\n                    <option value=\"cm\">cm</option>\n                    <option value=\"inches\">inches</option>\n                </select>\n            </div>\n            <div class=\"mb-4\">\n                <label for=\"weight\" class=\"block text-sm font-medium text-gray-700\">Weight</label>\n                <input type=\"number\" name=\"weight\" id=\"input-weight\" class=\"block w-full mt-1 border-gray-300 rounded-md shadow-sm\" required>\n                <select name=\"unit_weight\" class=\"mt-2 w-full\">\n                    <option value=\"kg\">kg</option>\n                    <option value=\"lbs\">lbs</option>\n                </select>\n            </div>\n            <div class=\"flex items-center justify-between\">\n                <button type=\"submit\" id=\"submit-data\" class=\"w-full text-white bg-blue-500 py-2 px-4 rounded\">Calculate BMI</button>\n                <button type=\"reset\" id=\"reset-form\" class=\"w-full ml-2 text-white bg-gray-500 py-2 px-4 rounded\">Reset</button>\n            </div>\n        </form>\n\n        {% if bmi_value is not None %}\n        <div id=\"result-display\" class=\"mt-6\">\n            <p id=\"display-bmi-result\" class=\"font-bold\">Your BMI is: {{ bmi_value|floatformat:2 }}</p>\n            <p id=\"display-bmi-category\" class=\"mt-2 text-sm\">Category: {{ category }}</p>\n            {% if category %}\n            <p id=\"provide-interpretation\" class=\"mt-4 text-sm\">Interpretation: Based on your BMI, you are considered {{ category.lower() }}.</p>\n            {% endif %}\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "bmicalculator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "calculator/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "bmicalculator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmicalculator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "bmicalculator/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmicalculator.settings')\n\napplication = get_asgi_application()\n"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmicalculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'django-insecure-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter/currency_converter/__init__.py", "code": ""}, {"file": "models.py", "path": "currency_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here if needed in the future.\n"}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\n\ndef home_page(request):\n    return render(request, 'home_page.html')\n\ndef currency_details_page(request):\n    return render(request, 'currency_details_page.html')\n\ndef settings_page(request):\n    return render(request, 'settings_page.html')\n"}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home'),\n    path('currency-details/', views.currency_details_page, name='currency_details'),\n    path('settings/', views.settings_page, name='settings'),\n]\n"}, {"file": "home_page.html", "path": "currency_converter/templates/home_page.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n    <div>\n        <label for=\"base_currency\" class=\"currency-label\">Base Currency:</label>\n        <select id=\"base_currency\" class=\"currency-select\"></select>\n    </div>\n    <div>\n        <label for=\"target_currency\" class=\"currency-label\">Target Currency:</label>\n        <select id=\"target_currency\" class=\"currency-select\"></select>\n    </div>\n    <div>\n        <label for=\"amount\" class=\"amount-label\">Amount:</label>\n        <input type=\"number\" id=\"amount\" class=\"amount-input\">\n    </div>\n    <button id=\"convert_button\" class=\"convert-button\">Convert</button>\n    <div id=\"conversion_result\" class=\"conversion-result\"></div>\n    <div id=\"exchange_rate_info\" class=\"exchange-rate-info\"></div>\n</body>\n</html>\n"}, {"file": "currency_details_page.html", "path": "currency_converter/templates/currency_details_page.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Details Page</title>\n</head>\n<body>\n    <h1>Currency Details</h1>\n    <div id=\"currency_information\" class=\"currency-information\"></div>\n    <div id=\"historical_exchange_rates\" class=\"historical-exchange-rates\"></div>\n</body>\n</html>\n"}, {"file": "settings_page.html", "path": "currency_converter/templates/settings_page.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Settings Page</title>\n</head>\n<body>\n    <h1>Settings</h1>\n    <div>\n        <label for=\"default_base_currency\" class=\"default-currency-label\">Default Base Currency:</label>\n        <select id=\"default_base_currency\" class=\"default-currency-select\"></select>\n    </div>\n    <div>\n        <label for=\"default_target_currency\" class=\"default-currency-label\">Default Target Currency:</label>\n        <select id=\"default_target_currency\" class=\"default-currency-select\"></select>\n    </div>\n    <div>\n        <label for=\"update_frequency\" class=\"update-frequency-label\">Update Frequency:</label>\n        <select id=\"update_frequency\" class=\"update-frequency-select\">\n            <option value=\"hourly\">Hourly</option>\n            <option value=\"daily\">Daily</option>\n        </select>\n    </div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "currency_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "currency_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here if needed in the future.\n"}, {"file": "apps.py", "path": "currency_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'\n"}, {"file": "tests.py", "path": "currency_converter/converter/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "settings.py", "path": "password_generator/config/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'config.urls'\n\ntemplates_path = BASE_DIR / 'templates'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [templates_path],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'config.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    BASE_DIR / \"static\",\n]\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "password_generator/config/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('options/', views.password_options, name='password_options'),\n    path('generated/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/config/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/config/__init__.py", "code": ""}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generated_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase', 'off') == 'on'\n    include_lowercase = request.GET.get('lowercase', 'off') == 'on'\n    include_numbers = request.GET.get('numbers', 'off') == 'on'\n    include_symbols = request.GET.get('symbols', 'off') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    password = ''.join(random.choice(characters) for _ in range(length))\n\n    return render(request, 'generated_password.html', {'password': password})\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "home.html", "path": "password_generator/templates/home.html", "code": "<html>\n<head>\n    <title>Password Generator Home</title>\n</head>\n<body>\n    <h1 id=\"welcome-message\" class=\"welcome-message\">Welcome to the Password Generator</h1>\n    <a id=\"nav-btn\" class=\"nav-btn\" href=\"{% url 'password_options' %}\">Go to Password Generator</a>\n</body>\n</html>\n"}, {"file": "password_options.html", "path": "password_generator/templates/password_options.html", "code": "<html>\n<head>\n    <title>Password Options</title>\n</head>\n<body>\n    <h1 id=\"options-header\" class=\"options-header\">Choose Your Password Options</h1>\n    <form action=\"{% url 'generated_password' %}\" method=\"get\">\n        <label for=\"length\" id=\"length-label\" class=\"length-label\">Password Length:</label>\n        <input id=\"length-input\" class=\"length-input\" type=\"number\" name=\"length\" min=\"1\" max=\"128\" value=\"12\" required>\n        <br>\n\n        <input id=\"uppercase-check\" class=\"uppercase-check\" type=\"checkbox\" name=\"uppercase\">\n        <label for=\"uppercase-check\" id=\"uppercase-label\" class=\"uppercase-label\">Include Uppercase Letters</label>\n        <br>\n\n        <input id=\"lowercase-check\" class=\"lowercase-check\" type=\"checkbox\" name=\"lowercase\">\n        <label for=\"lowercase-check\" id=\"lowercase-label\" class=\"lowercase-label\">Include Lowercase Letters</label>\n        <br>\n\n        <input id=\"numbers-check\" class=\"numbers-check\" type=\"checkbox\" name=\"numbers\">\n        <label for=\"numbers-check\" id=\"numbers-label\" class=\"numbers-label\">Include Numbers</label>\n        <br>\n\n        <input id=\"symbols-check\" class=\"symbols-check\" type=\"checkbox\" name=\"symbols\">\n        <label for=\"symbols-check\" id=\"symbols-label\" class=\"symbols-label\">Include Symbols</label>\n        <br>\n\n        <button id=\"generate-btn\" class=\"generate-btn\" type=\"submit\">Generate Password</button>\n    </form>\n</body>\n</html>\n"}, {"file": "generated_password.html", "path": "password_generator/templates/generated_password.html", "code": "<html>\n<head>\n    <title>Generated Password</title>\n</head>\n<body>\n    <h1 id=\"password-title\" class=\"password-title\">Your Generated Password</h1>\n    <p id=\"password-display\" class=\"password-display\">{{ password }}</p>\n    <button id=\"copy-btn\" class=\"copy-btn\" onclick=\"copyPassword()\">Copy to Clipboard</button>\n\n    <script>\n        function copyPassword() {\n            const passwordElement = document.getElementById('password-display');\n            const textarea = document.createElement('textarea');\n            textarea.value = passwordElement.textContent;\n            document.body.appendChild(textarea);\n            textarea.select();\n            document.execCommand('copy');\n            document.body.removeChild(textarea);\n            alert('Password copied to clipboard!');\n        }\n    </script>\n</body>\n</html>\n"}, {"file": "about.html", "path": "password_generator/templates/about.html", "code": "<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-header\" class=\"about-header\">About This Site</h1>\n    <p id=\"about-description\" class=\"about-description\">This site helps you to generate strong passwords for your accounts.</p>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}], "4": [{"file": "settings.py", "path": "qr_code_generator_project/qr_code_generator_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_code_generator_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "qr_code_generator_project/qr_code_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom qr_code_generator_app import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('generate/', views.qr_code_generator, name='qr_code_generator'),\n]"}, {"file": "views.py", "path": "qr_code_generator_project/qr_code_generator_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport qrcode\nfrom io import BytesIO\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef qr_code_generator(request):\n    if request.method == 'POST':\n        text = request.POST.get('text', '')\n        box_size = int(request.POST.get('box_size', 10))\n        border_size = int(request.POST.get('border_size', 4))\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n        error_correction = request.POST.get('error_correction', 'M')\n\n        if error_correction == 'small':\n            error_correction_level = qrcode.constants.ERROR_CORRECT_L\n        elif error_correction == 'medium':\n            error_correction_level = qrcode.constants.ERROR_CORRECT_M\n        else:\n            error_correction_level = qrcode.constants.ERROR_CORRECT_Q\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=error_correction_level,\n            box_size=box_size,\n            border=border_size,\n        )\n        qr.add_data(text)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        buffer = BytesIO()\n        img.save(buffer)\n        img_data = buffer.getvalue()\n\n        return HttpResponse(img_data, content_type='image/png')\n\n    return render(request, 'qr_code_generator.html')\n"}, {"file": "home.html", "path": "qr_code_generator_project/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home_title\" class=\"title\">Welcome to QR Code Generator</h1>\n    <p id=\"introduction_text\" class=\"description\">Simple, welcoming text explaining what the website does.</p>\n    <button id=\"navigate_button\" class=\"button\" onclick=\"window.location.href='{% url 'qr_code_generator' %}'\">Generate QR Code</button>\n</body>\n</html>\n"}, {"file": "qr_code_generator.html", "path": "qr_code_generator_project/templates/qr_code_generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1 id=\"qr_generator_title\" class=\"title\">QR Code Generator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"text\">Text or URL:</label>\n        <input id=\"text_input\" class=\"input\" type=\"text\" name=\"text\" required><br>\n\n        <label for=\"box_size\">Box Size:</label>\n        <input id=\"box_size_input\" class=\"input\" type=\"number\" name=\"box_size\" min=\"1\" max=\"128\" value=\"10\"><br>\n\n        <label for=\"border_size\">Border Size:</label>\n        <input id=\"border_size_input\" class=\"input\" type=\"number\" name=\"border_size\" min=\"1\" max=\"10\" value=\"4\"><br>\n\n        <label for=\"fill_color\">Fill Color:</label>\n        <input id=\"fill_color_input\" class=\"input\" type=\"text\" name=\"fill_color\" value=\"black\"><br>\n\n        <label for=\"back_color\">Back Color:</label>\n        <input id=\"back_color_input\" class=\"input\" type=\"text\" name=\"back_color\" value=\"white\"><br>\n\n        <label for=\"error_correction\">Error Correction:</label>\n        <select id=\"error_correction_select\" class=\"select\" name=\"error_correction\">\n            <option value=\"small\">Small</option>\n            <option value=\"medium\" selected>Medium</option>\n            <option value=\"large\">Large</option>\n        </select><br>\n\n        <button id=\"generate_button\" class=\"button\" type=\"submit\">Generate QR Code</button>\n    </form>\n\n    <div id=\"qr_code_display\" class=\"display_area\">\n        {% if messages %}\n            {% for message in messages %}\n                <p>{{ message }}</p>\n            {% endfor %}\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "qr_code_generator_project/qr_code_generator_project/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "qr_code_generator_project/qr_code_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "qr_code_generator_project/qr_code_generator_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "urls.py", "path": "qr_code_generator_project/qr_code_generator_app/urls.py", "code": ""}, {"file": "models.py", "path": "qr_code_generator_project/qr_code_generator_app/models.py", "code": ""}, {"file": "apps.py", "path": "qr_code_generator_project/qr_code_generator_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrCodeGeneratorAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_code_generator_app'\n"}, {"file": "admin.py", "path": "qr_code_generator_project/qr_code_generator_app/admin.py", "code": ""}, {"file": "tests.py", "path": "qr_code_generator_project/qr_code_generator_app/tests.py", "code": ""}, {"file": "__init__.py", "path": "qr_code_generator_project/qr_code_generator_app/__init__.py", "code": ""}, {"file": "manage.py", "path": "qr_code_generator_project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}], "5": [{"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = ['django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'converter',]\nMIDDLEWARE = ['django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware',]\nROOT_URLCONF = 'myproject.urls'\nTEMPLATES = [{ 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')], 'APP_DIRS': True, 'OPTIONS': { 'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages',],},},]\nWSGI_APPLICATION = 'myproject.wsgi.application'\nDATABASES = {'default': { 'ENGINE': 'django.db.backends.sqlite3', 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),}}\nAUTH_PASSWORD_VALIDATORS = [{'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},{'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},{'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},{'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom converter import views\nurlpatterns = [ path('admin/', admin.site.urls), path('', views.home, name='home'), path('convert/', views.convert, name='convert'), path('about/', views.about, name='about'), ]"}, {"file": "views.py", "path": "myproject/converter/views.py", "code": "from django.shortcuts import render\nimport markdown2\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_input', '')\n        html_output = markdown2.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_output': html_output})\n    return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown to HTML Converter - Home</title>\n</head>\n<body>\n    <div id=\"welcome-message\" class=\"welcome-message\">\n        <h1>Welcome to the Markdown to HTML Converter</h1>\n    </div>\n    <div id=\"introduction\" class=\"introduction\">\n        <p>This tool allows you to convert Markdown text into HTML easily.</p>\n    </div>\n    <div id=\"navigation\" class=\"navigation\">\n        <a href=\"/convert/\">Convert</a> |\n        <a href=\"/about/\">About</a>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "myproject/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown to HTML Converter - Convert</title>\n</head>\n<body>\n    <div id=\"markdown-input-area\" class=\"markdown-input-area\">\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <textarea name=\"markdown_input\" rows=\"10\" cols=\"100\" placeholder=\"Enter your Markdown text here\"></textarea>\n            <div id=\"convert-button\" class=\"convert-button\">\n                <button type=\"submit\">Convert</button>\n            </div>\n        </form>\n    </div>\n    <div id=\"html-output-area\" class=\"html-output-area\">\n        <h2>HTML Output</h2>\n        <div>{{ html_output|safe }}</div>\n    </div>\n    <div id=\"optional-features\" class=\"optional-features\">\n        <h3>Optional Features</h3>\n        <p>Feature to upload a Markdown file and download HTML output will be added later.</p>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "myproject/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About - Markdown to HTML Converter</title>\n</head>\n<body>\n    <div id=\"team-info\" class=\"team-info\">\n        <h1>About Us</h1>\n        <p>Information about the team will be updated soon.</p>\n    </div>\n    <div id=\"faq\" class=\"faq\">\n        <h2>FAQ</h2>\n        <p>Frequently Asked Questions will be added soon.</p>\n    </div>\n</body>\n</html>"}], "6": [{"file": "manage.py", "path": "todolist/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todolist.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "todolist/todolist/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todolist.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todolist.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "todolist/todolist/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo.urls')),\n]"}, {"file": "wsgi.py", "path": "todolist/todolist/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todolist.settings')\n\napplication = get_wsgi_application()"}, {"file": "apps.py", "path": "todolist/todo/apps.py", "code": "from django.apps import AppConfig\n\nclass TodoConfig(AppConfig):\n    name = 'todo'"}, {"file": "__init__.py", "path": "todolist/todolist/__init__.py", "code": ""}, {"file": "__init__.py", "path": "todolist/todo/__init__.py", "code": ""}, {"file": "models.py", "path": "todolist/todo/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, related_name='tasks', on_delete=models.CASCADE)\n    title = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title"}, {"file": "admin.py", "path": "todolist/todo/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)"}, {"file": "views.py", "path": "todolist/todo/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import TodoList, Task\n\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'todo/home.html', {'todo_lists': todo_lists})\n\n\ndef view_todo_list(request, list_id):\n    todo_list = TodoList.objects.get(id=list_id)\n    tasks = todo_list.tasks.all()\n    return render(request, 'todo/todo_list.html', {'todo_list': todo_list, 'tasks': tasks})\n\n\ndef add_task(request, list_id):\n    todo_list = TodoList.objects.get(id=list_id)\n    if request.method == 'POST':\n        title = request.POST['title']\n        description = request.POST.get('description', '')\n        Task.objects.create(todo_list=todo_list, title=title, description=description)\n        return redirect('view_todo_list', list_id=list_id)\n    return render(request, 'todo/add_task.html', {'todo_list': todo_list})\n\n\ndef edit_task(request, list_id, task_id):\n    task = Task.objects.get(id=task_id)\n    if request.method == 'POST':\n        task.title = request.POST['title']\n        task.description = request.POST.get('description', '')\n        task.completed = 'completed' in request.POST\n        task.save()\n        return redirect('view_todo_list', list_id=list_id)\n    return render(request, 'todo/edit_task.html', {'task': task})\n\n\ndef delete_task(request, list_id, task_id):\n    task = Task.objects.get(id=task_id)\n    task.delete()\n    return redirect('view_todo_list', list_id=list_id)"}, {"file": "urls.py", "path": "todolist/todo/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('list/<int:list_id>/', views.view_todo_list, name='view_todo_list'),\n    path('list/<int:list_id>/add/', views.add_task, name='add_task'),\n    path('list/<int:list_id>/edit/<int:task_id>/', views.edit_task, name='edit_task'),\n    path('list/<int:list_id>/delete/<int:task_id>/', views.delete_task, name='delete_task'),\n]"}, {"file": "home.html", "path": "todolist/todo/templates/todo/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Todo Home</title>\n    <style>\n        .todo-list { list-style-type: none; }\n    </style>\n</head>\n<body>\n    <h1 id=\"dashboardTitle\" class=\"dashboard-title\">Dashboard</h1>\n    <ul id=\"todoLists\" class=\"todo-list\">\n        {% for list in todo_lists %}\n            <li>\n                <a href=\"{% url 'view_todo_list' list.id %}\" id=\"listLink{{ list.id }}\" class=\"list-link\">{{ list.name }}</a>\n            </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "todolist/todo/templates/todo/todo_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{{ todo_list.name }}</title>\n    <style>\n        .task-list { list-style-type: none; }\n    </style>\n</head>\n<body>\n    <h1 id=\"listTitle\" class=\"list-title\">{{ todo_list.name }}</h1>\n    <a href=\"{% url 'add_task' todo_list.id %}\" id=\"addTaskLink\" class=\"add-task-link\">Add Task</a>\n    <ul id=\"taskList\" class=\"task-list\">\n        {% for task in tasks %}\n            <li id=\"taskItem{{ task.id }}\" class=\"task-item\">\n                <p id=\"taskTitle{{ task.id }}\" class=\"task-title\">{{ task.title }}</p>\n                <p id=\"taskDescription{{ task.id }}\" class=\"task-description\">{{ task.description }}</p>\n                <p id=\"taskStatus{{ task.id }}\" class=\"task-status\">Status: {% if task.completed %}Completed{% else %}Incomplete{% endif %}</p>\n                <a href=\"{% url 'edit_task' todo_list.id task.id %}\" id=\"editTaskLink{{ task.id }}\" class=\"edit-task-link\">Edit</a>\n                <a href=\"{% url 'delete_task' todo_list.id task.id %}\" id=\"deleteTaskLink{{ task.id }}\" class=\"delete-task-link\">Delete</a>\n            </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "add_task.html", "path": "todolist/todo/templates/todo/add_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Task</title>\n</head>\n<body>\n    <h1 id=\"addTaskTitle\" class=\"add-task-title\">Add a new task to {{ todo_list.name }}</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"taskTitle\">Title:</label>\n        <input type=\"text\" name=\"title\" id=\"taskTitle\" class=\"task-title\"><br>\n        <label for=\"taskDescription\">Description:</label>\n        <textarea name=\"description\" id=\"taskDescription\" class=\"task-description\"></textarea><br>\n        <input type=\"submit\" value=\"Add Task\" id=\"submitTaskButton\" class=\"submit-task-button\">\n    </form>\n</body>\n</html>"}, {"file": "edit_task.html", "path": "todolist/todo/templates/todo/edit_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Task</title>\n</head>\n<body>\n    <h1 id=\"editTaskTitle\" class=\"edit-task-title\">Edit Task: {{ task.title }}</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"taskTitle\">Title:</label>\n        <input type=\"text\" name=\"title\" value=\"{{ task.title }}\" id=\"taskTitle\" class=\"task-title\"><br>\n        <label for=\"taskDescription\">Description:</label>\n        <textarea name=\"description\" id=\"taskDescription\" class=\"task-description\">{{ task.description }}</textarea><br>\n        <label>\n            <input type=\"checkbox\" name=\"completed\" id=\"taskCompleted\" class=\"task-completed\" {% if task.completed %}checked{% endif %}> Completed\n        </label><br>\n        <input type=\"submit\" value=\"Save Changes\" id=\"saveChangesButton\" class=\"save-changes-button\">\n    </form>\n</body>\n</html>"}], "7": [{"file": "manage.py", "path": "budget_control/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "budget_control/budget_control/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'control'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "budget_control/budget_control/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('control.urls')),\n]"}, {"file": "wsgi.py", "path": "budget_control/budget_control/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "budget_control/budget_control/__init__.py", "code": ""}, {"file": "apps.py", "path": "budget_control/control/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ControlConfig(AppConfig):\n    name = 'control'"}, {"file": "models.py", "path": "budget_control/control/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.category} - {self.amount}'"}, {"file": "views.py", "path": "budget_control/control/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Transaction, Category\n\n@login_required\ndef view_dashboard(request):\n    transactions = Transaction.objects.filter(user=request.user)\n    categories = Category.objects.filter(user=request.user)\n    balance = sum(t.amount for t in transactions)\n    return render(request, 'control/dashboard.html', {'transactions': transactions, 'categories': categories, 'balance': balance})\n\n@login_required\ndef add_transaction(request):\n    # Logic for adding a transaction\n    return render(request, 'control/add_transaction.html')\n\n@login_required\ndef view_balance_chart(request):\n    # Logic for viewing balance chart\n    return render(request, 'control/balance_chart.html')\n\n# Additional view functions..."}, {"file": "urls.py", "path": "budget_control/control/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'control'\n\nurlpatterns = [\n    path('', views.view_dashboard, name='view_dashboard'),\n    path('add_transaction/', views.add_transaction, name='add_transaction'),\n    path('balance_chart/', views.view_balance_chart, name='view_balance_chart'),\n    # Additional URL patterns...\n]"}, {"file": "dashboard.html", "path": "budget_control/control/templates/control/dashboard.html", "code": "<!-- dashboard.html -->\n<h1 id=\"dashboard-title\" class=\"dashboard-title\">Dashboard</h1>\n<div id=\"dashboard-balance\" class=\"dashboard-balance\">Current Balance: {{ balance }}</div>\n<div id=\"transaction-list\" class=\"transaction-list\">\n    <h2 id=\"transaction-header\" class=\"transaction-header\">Transactions</h2>\n    <ul id=\"transaction-items\" class=\"transaction-items\">\n        {% for transaction in transactions %}\n        <li id=\"transaction-{{ transaction.id }}\" class=\"transaction-item\">\n            {{ transaction.date }} - {{ transaction.amount }} ({{ transaction.category }})\n        </li>\n        {% endfor %}\n    </ul>\n</div>"}, {"file": "__init__.py", "path": "budget_control/control/__init__.py", "code": ""}, {"file": "admin.py", "path": "budget_control/control/admin.py", "code": "from django.contrib import admin\nfrom .models import Category, Transaction\n\nadmin.site.register(Category)\nadmin.site.register(Transaction)"}, {"file": "add_transaction.html", "path": "budget_control/control/templates/control/add_transaction.html", "code": "<!-- add_transaction.html -->\n<h1 id=\"add-transaction-title\" class=\"add-transaction-title\">Add Transaction</h1>\n<form id=\"transaction-form\" class=\"transaction-form\" method=\"post\">\n    {% csrf_token %}\n    <!-- fields for transaction details -->\n    <button type=\"submit\" id=\"submit-button\" class=\"submit-button\">Add</button>\n</form>"}], "8": [{"file": "settings.py", "path": "calendar_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "calendar_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "apps.py", "path": "calendar_app/apps.py", "code": "from django.apps import AppConfig\n\nclass CalendarAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calendar_app'"}, {"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Event\n\n# Home Page\ndef home(request):\n    context = {'current_date': timezone.now()}\n    return render(request, 'calendar_app/home.html', context)\n\n# Calendar Page\ndef calendar_view(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/calendar.html', {'events': events})\n\n# Add Event\ndef add_event(request):\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        start_time = request.POST.get('start_time')\n        end_time = request.POST.get('end_time')\n        Event.objects.create(title=title, description=description,\n                             start_time=start_time, end_time=end_time)\n        return redirect('home')\n    return render(request, 'calendar_app/add_event.html')\n\n# Event Details\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendar_app/event_details.html', {'event': event})\n\n# Edit Event\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.title = request.POST.get('title')\n        event.description = request.POST.get('description')\n        event.start_time = request.POST.get('start_time')\n        event.end_time = request.POST.get('end_time')\n        event.save()\n        return redirect('event_details', event_id=event.id)\n    return render(request, 'calendar_app/edit_event.html', {'event': event})\n\n# Delete Event\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    event.delete()\n    return redirect('home')\n\n# List All Events\ndef list_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/list_events.html', {'events': events})\n\n# Search Events\ndef search_events(request):\n    if request.method == 'POST':\n        query = request.POST.get('query')\n        events = Event.objects.filter(title__icontains=query)\n        return render(request, 'calendar_app/search_results.html', {'events': events, 'query': query})\n    return redirect('home')"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('edit_event/<int:event_id>/', views.edit_event, name='edit_event'),\n    path('delete_event/<int:event_id>/', views.delete_event, name='delete_event'),\n    path('list_events/', views.list_events, name='list_events'),\n    path('search_events/', views.search_events, name='search_events'),\n]"}, {"file": "home.html", "path": "templates/calendar_app/home.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Home</title>\n    <link rel='stylesheet' href='/static/calendar_app/style.css'>\n</head>\n<body>\n    <div id='home-container' class='main-container'>\n        <h1 id='current-date' class='title'>Current Date: {{ current_date }}</h1>\n        <a id='calendar-access' class='button' href='{% url 'calendar' %}'>Quick Access to Calendar</a>\n    </div>\n</body>\n</html>"}, {"file": "calendar.html", "path": "templates/calendar_app/calendar.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Calendar</title>\n    <link rel='stylesheet' href='/static/calendar_app/style.css'>\n</head>\n<body>\n    <div id='calendar-container' class='main-container'>\n        <h1 id='calendar-title' class='title'>Calendar</h1>\n        <div id='calendar-controls' class='controls'>\n            <a href='{% url 'add_event' %}'>Add Event</a>\n            <!-- Add month and year selectors here -->\n        </div>\n        <ul id='event-list' class='event-list'>\n            {% for event in events %}\n                <li><a href='{% url 'event_details' event.id %}'>{{ event.title }}</a></li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "add_event.html", "path": "templates/calendar_app/add_event.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Add Event</title>\n    <link rel='stylesheet' href='/static/calendar_app/style.css'>\n</head>\n<body>\n    <div id='add-event-container' class='main-container'>\n        <h1 id='add-event-title' class='title'>Add New Event</h1>\n        <form id='add-event-form' class='form' method='post'>\n            {% csrf_token %}\n            <input type='text' name='title' placeholder='Title' required>\n            <textarea name='description' placeholder='Description'></textarea>\n            <input type='datetime-local' name='start_time' required>\n            <input type='datetime-local' name='end_time' required>\n            <button type='submit'>Add Event</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "event_details.html", "path": "templates/calendar_app/event_details.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Event Details</title>\n    <link rel='stylesheet' href='/static/calendar_app/style.css'>\n</head>\n<body>\n    <div id='event-details-container' class='main-container'>\n        <h1 id='event-title' class='title'>{{ event.title }}</h1>\n        <p id='event-description' class='description'>{{ event.description }}</p>\n        <p id='event-start-time' class='time'>Start: {{ event.start_time }}</p>\n        <p id='event-end-time' class='time'>End: {{ event.end_time }}</p>\n        <div id='event-actions' class='actions'>\n            <a href='{% url 'edit_event' event.id %}'>Edit</a>\n            <a href='{% url 'delete_event' event.id %}'>Delete</a>\n            <a href='{% url 'list_events' %}'>List All Events</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "templates/calendar_app/edit_event.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Edit Event</title>\n    <link rel='stylesheet' href='/static/calendar_app/style.css'>\n</head>\n<body>\n    <div id='edit-event-container' class='main-container'>\n        <h1 id='edit-event-title' class='title'>Edit Event</h1>\n        <form id='edit-event-form' class='form' method='post'>\n            {% csrf_token %}\n            <input type='text' name='title' value='{{ event.title }}' required>\n            <textarea name='description'>{{ event.description }}</textarea>\n            <input type='datetime-local' name='start_time' value='{{ event.start_time|date:\"Y-m-d\\TH:i\" }}' required>\n            <input type='datetime-local' name='end_time' value='{{ event.end_time|date:\"Y-m-d\\TH:i\" }}' required>\n            <button type='submit'>Save Changes</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "list_events.html", "path": "templates/calendar_app/list_events.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>List of Events</title>\n    <link rel='stylesheet' href='/static/calendar_app/style.css'>\n</head>\n<body>\n    <div id='list-events-container' class='main-container'>\n        <h1 id='list-events-title' class='title'>All Events</h1>\n        <ul id='full-event-list' class='event-list'>\n            {% for event in events %}\n                <li><a href='{% url 'event_details' event.id %}'>{{ event.title }}</a></li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "static/calendar_app/style.css", "code": "body {font-family: Arial, sans-serif;}\n.main-container {margin: 0 auto; max-width: 800px; padding: 20px;}\n.title {margin-bottom: 20px;}\n.form input, .form textarea {display: block; width: 100%; margin-bottom: 10px;}\n.button {display: block; margin: 10px 0; text-decoration: none; color: #fff; background-color: #007bff; padding: 10px; text-align: center;}\n.button:hover {background-color: #0056b3;}"}], "9": [{"file": "settings.py", "path": "project/project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'mainapp',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "project/project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom mainapp import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('about/', views.about, name='about'),\n    path('support/', views.support, name='support'),\n]"}, {"file": "views.py", "path": "project/mainapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'mainapp/home.html')\n\ndef features(request):\n    return render(request, 'mainapp/features.html')\n\ndef pricing(request):\n    return render(request, 'mainapp/pricing.html')\n\ndef about(request):\n    return render(request, 'mainapp/about.html')\n\ndef support(request):\n    return render(request, 'mainapp/support.html')"}, {"file": "home.html", "path": "project/mainapp/templates/mainapp/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"product-overview\" class=\"section\">\n        <h1>AI Chatbot Overview</h1>\n        <p>Display a brief overview of the AI Chatbot's capabilities and benefits.</p>\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "project/mainapp/templates/mainapp/features.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Features</title>\n</head>\n<body>\n    <div id=\"key-features\" class=\"section\">\n        <h1>AI Chatbot Features</h1>\n        <p>Showcase the main features of the AI Chatbot.</p>\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "project/mainapp/templates/mainapp/pricing.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pricing</title>\n</head>\n<body>\n    <div id=\"pricing-plans\" class=\"section\">\n        <h1>Pricing Plans</h1>\n        <p>Display different pricing plans and subscription options.</p>\n    </div>\n    <div id=\"contact-sales\" class=\"section\">\n        <h2>Contact Sales</h2>\n        <form>\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\">\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\">\n            <button type=\"submit\">Submit</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "project/mainapp/templates/mainapp/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"company-background\" class=\"section\">\n        <h1>About Us</h1>\n        <p>Show information about the company and team behind the AI Chatbot.</p>\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "project/mainapp/templates/mainapp/support.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Support</title>\n</head>\n<body>\n    <div id=\"faq\" class=\"section\">\n        <h1>FAQ</h1>\n        <p>Provide answers to frequently asked questions about the AI Chatbot.</p>\n    </div>\n    <div id=\"support-message\" class=\"section\">\n        <h2>Need Assistance?</h2>\n        <form>\n            <label for=\"query\">Your Query:</label>\n            <textarea id=\"query\" name=\"query\"></textarea>\n            <button type=\"submit\">Submit</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "models.py", "path": "project/mainapp/models.py", "code": "# No models needed for this basic setup"}, {"file": "admin.py", "path": "project/mainapp/admin.py", "code": "# No admin setup needed for this basic setup"}, {"file": "apps.py", "path": "project/mainapp/apps.py", "code": "from django.apps import AppConfig\n\nclass MainAppConfig(AppConfig):\n    name = 'mainapp'"}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "calorie_tracker/calorie_tracker/__init__.py", "code": ""}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),\n]\n"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "calorie_tracker/tracker/__init__.py", "code": ""}, {"file": "admin.py", "path": "calorie_tracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Meal, Activity\n\nadmin.site.register(Meal)\nadmin.site.register(Activity)\n"}, {"file": "apps.py", "path": "calorie_tracker/tracker/apps.py", "code": "from django.apps import AppConfig\n\nclass TrackerConfig(AppConfig):\n    name = 'tracker'\n"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\n\nclass Meal(models.Model):\n    name = models.CharField(max_length=255)\n    calories = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Activity(models.Model):\n    name = models.CharField(max_length=255)\n    calories_burned = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n"}, {"file": "tests.py", "path": "calorie_tracker/tracker/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Meal, Activity\n\n# Home Page\n\ndef home(request):\n    return render(request, 'tracker/home.html')\n\n# Dashboard\n\ndef dashboard(request):\n    if request.user.is_authenticated:\n        meals = Meal.objects.all()\n        activities = Activity.objects.all()\n        return render(request, 'tracker/dashboard.html', {'meals': meals, 'activities': activities})\n    else:\n        return redirect('home')\n\n# Meal Log\n\ndef meal_log(request):\n    meals = Meal.objects.all()\n    return render(request, 'tracker/meal_log.html', {'meals': meals})\n\n# Activity Log\n\ndef activity_log(request):\n    activities = Activity.objects.all()\n    return render(request, 'tracker/activity_log.html', {'activities': activities})\n\n# Analysis\n\ndef analysis(request):\n    return render(request, 'tracker/analysis.html')\n\n# Settings\n\ndef settings_page(request):\n    return render(request, 'tracker/settings.html')\n\n# Help\n\ndef help_page(request):\n    return render(request, 'tracker/help.html')\n"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal-log/', views.meal_log, name='meal_log'),\n    path('activity-log/', views.activity_log, name='activity_log'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('settings/', views.settings_page, name='settings'),\n    path('help/', views.help_page, name='help'),\n]\n"}, {"file": "home.html", "path": "calorie_tracker/templates/tracker/home.html", "code": "<!-- Home Page -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" href=\"/static/css/style.css\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"page-container\">\n        <div id=\"welcome-message\" class=\"welcome\">\n            <h1>Welcome to Calorie Tracker</h1>\n            <p>Discover features to help you maintain your goals</p>\n        </div>\n        <div id=\"auth-options\" class=\"authentication-options\">\n            <a href=\"{% url 'signup' %}\" id=\"signup-link\" class=\"auth-link\">Sign Up</a>\n            <a href=\"{% url 'login' %}\" id=\"login-link\" class=\"auth-link\">Log In</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "calorie_tracker/templates/tracker/dashboard.html", "code": "<!-- Dashboard Page -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dashboard</title>\n    <link rel=\"stylesheet\" href=\"/static/css/style.css\">\n</head>\n<body>\n    <div id=\"dashboard-container\" class=\"page-container\">\n        <h1 id=\"dashboard-title\" class=\"title\">Dashboard</h1>\n        <div id=\"calorie-intake\" class=\"calorie-intake\">\n            <h2>Daily Calorie Intake</h2>\n            <!-- Display calorie intake -->\n        </div>\n        <div id=\"recent-meals\" class=\"recent-meals\">\n            <h2>Recent Meals</h2>\n            <!-- List recent meals -->\n        </div>\n        <div id=\"recent-activities\" class=\"recent-activities\">\n            <h2>Recent Activities</h2>\n            <!-- List recent activities -->\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "style.css", "path": "calorie_tracker/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    line-height: 1.6;\n    margin: 0;\n    padding: 0;\n}\n\n.page-container {\n    max-width: 960px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\n.title, h1, h2 {\n    color: #333;\n}\n\na.auth-link {\n    margin-right: 10px;\n}\n"}], "11": [{"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom myapp import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "myproject/myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title id=\"title-home\" class=\"page-title\">Welcome to the Home Page</title>\n</head>\n<body>\n<h1 id=\"welcome-message\" class=\"welcome\">Welcome to the Test Application</h1>\n\n<form id=\"status-form\" class=\"form\" method=\"post\">\n    {% csrf_token %}\n    <select id=\"select-status\" class=\"status-select\" name=\"status\">\n        <option value=\"Select\">Select</option>\n        <option value=\"Pass\">Pass</option>\n        <option value=\"Fail\">Fail</option>\n    </select>\n    <button type=\"submit\" id=\"submit-button\" class=\"btn-submit\">Submit</button>\n</form>\n\n{% if form_import.is_valid %}\n<form id=\"import-form\" class=\"form\" method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    <input type=\"file\" id=\"file-import\" class=\"file-import\" name=\"json_file\" accept=\".json\">\n    <button type=\"submit\" id=\"import-submit\" class=\"btn-submit\">Import</button>\n</form>\n{% endif %}\n\n<input type=\"text\" id=\"note-input\" class=\"note-input\" placeholder=\"Enter your review notes here\">\n\n</body>\n</html>"}, {"file": "about.html", "path": "myproject/myapp/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title id=\"title-about\" class=\"page-title\">About Page</title>\n</head>\n<body>\n<h1 id=\"about-header\" class=\"header\">About this Application</h1>\n<p>This application is designed for reviewing and testing purposes.</p>\n</body>\n</html>"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'"}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}], "12": [{"file": "models.py", "path": "project/app/models.py", "code": "from django.db import models\n\nclass User(models.Model):\n    username = models.CharField(max_length=100)\n    password = models.CharField(max_length=100)\n\nclass Claim(models.Model):\n    CLAIM_CHOICES = [\n        ('Travel', 'Travel'),\n        ('Labor', 'Labor'),\n        ('Management', 'Management'),\n        ('Equipment', 'Equipment')\n    ]\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    type = models.CharField(choices=CLAIM_CHOICES, max_length=20)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    status = models.CharField(max_length=20, default='pending')\n    reason = models.TextField(null=True, blank=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=50)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n    balance = models.DecimalField(max_digits=10, decimal_places=2)\n"}, {"file": "views.py", "path": "project/app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .models import User, Claim, Budget\n\n# Home\ndef home(request):\n    return render(request, 'home.html')\n\ndef sign_up(request):\n    if request.method == 'POST':\n        # Handle sign-up logic\n        pass \n    return render(request, 'sign_up.html')\n\n# Employee Portal\ndef submit_claim(request):\n    if request.method == 'POST':\n        # Handle claim submission logic\n        pass\n    return render(request, 'submit_claim.html')\n\ndef view_claim_status(request):\n    claims = Claim.objects.filter(user=request.user)\n    return render(request, 'view_claim_status.html', {'claims': claims})\n\n# Admin Portal\ndef approve_claim(request, claim_id):\n    # Handle claim approval logic\n    return redirect('admin_page')\n\ndef reject_claim(request, claim_id):\n    # Handle claim rejection logic\n    return redirect('admin_page')\n\n# Budget Control\ndef analyze_expense_balances(request):\n    # Analyze expenses\n    return render(request, 'analyze_expense_balances.html')\n"}, {"file": "urls.py", "path": "project/app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('sign_up/', views.sign_up, name='sign_up'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('view_claim_status/', views.view_claim_status, name='view_claim_status'),\n    path('approve_claim/<int:claim_id>/', views.approve_claim, name='approve_claim'),\n    path('reject_claim/<int:claim_id>/', views.reject_claim, name='reject_claim'),\n    path('analyze_expense_balances/', views.analyze_expense_balances, name='analyze_expense_balances'),\n]\n"}, {"file": "home.html", "path": "project/app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"welcome-message\" class=\"home-message\">\n        <h1>Welcome to the Employee Portal</h1>\n        <a id=\"login-link\" class=\"nav-link\" href=\"/login\">Log In</a>\n        <a id=\"signup-link\" class=\"nav-link\" href=\"/sign_up\">Sign Up</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "manage.py", "path": "project/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "wsgi.py", "path": "project/project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}], "13": [{"file": "manage.py", "path": "ecommerce/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "ecommerce/ecommerce/__init__.py", "code": ""}, {"file": "settings.py", "path": "ecommerce/ecommerce/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'replace_with_your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'customer_management',\n    'product_management',\n    'purchase_records',\n    'preferred_products_management',\n    'sales_analysis',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'ecommerce.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'ecommerce.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "ecommerce/ecommerce/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('customer_management.urls')),\n    path('', include('product_management.urls')),\n    path('', include('purchase_records.urls')),\n    path('', include('preferred_products_management.urls')),\n    path('', include('sales_analysis.urls')),\n]"}, {"file": "wsgi.py", "path": "ecommerce/ecommerce/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'ecommerce.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "ecommerce/customer_management/__init__.py", "code": ""}, {"file": "apps.py", "path": "ecommerce/customer_management/apps.py", "code": "from django.apps import AppConfig\n\nclass CustomerManagementConfig(AppConfig):\n    name = 'customer_management'"}, {"file": "models.py", "path": "ecommerce/customer_management/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10)\n    company = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=20)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "ecommerce/customer_management/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer\nfrom .forms import CustomerForm\n\n\ndef add_customer(request):\n    if request.method == 'POST':\n        form = CustomerForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('view_customers')\n    else:\n        form = CustomerForm()\n    return render(request, 'customer_management/add_customer.html', {'form': form})\n\n\ndef edit_customer(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        form = CustomerForm(request.POST, instance=customer)\n        if form.is_valid():\n            form.save()\n            return redirect('view_customers')\n    else:\n        form = CustomerForm(instance=customer)\n    return render(request, 'customer_management/edit_customer.html', {'form': form})\n\n\ndef delete_customer(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        customer.delete()\n        return redirect('view_customers')\n    return render(request, 'customer_management/delete_customer.html', {'customer': customer})\n\n\ndef view_customers(request):\n    customers = Customer.objects.all()\n    return render(request, 'customer_management/view_customers.html', {'customers': customers})"}, {"file": "forms.py", "path": "ecommerce/customer_management/forms.py", "code": "from django import forms\nfrom .models import Customer\n\nclass CustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = ['name', 'birthday', 'age', 'sex', 'company', 'phone_number']"}, {"file": "urls.py", "path": "ecommerce/customer_management/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('customers/add/', views.add_customer, name='add_customer'),\n    path('customers/edit/<int:pk>/', views.edit_customer, name='edit_customer'),\n    path('customers/delete/<int:pk>/', views.delete_customer, name='delete_customer'),\n    path('customers/', views.view_customers, name='view_customers'),\n]"}, {"file": "base.html", "path": "ecommerce/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>E-commerce System</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"/\">E-commerce</a>\n        <div class=\"collapse navbar-collapse\">\n            <ul class=\"navbar-nav mr-auto\">\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"/customers/\">Customers</a></li>\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"/products/\">Products</a></li>\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"/purchases/\">Purchases</a></li>\n                <li class=\"nav-item\"><a class=\"nav-link\" href=\"/sales/\">Sales Analysis</a></li>\n            </ul>\n        </div>\n    </nav>\n\n    <div class=\"container mt-4\">\n    {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js\" integrity=\"sha384-qh0o2BQDrldGadolMkAyU78KuxNrmC/vc1Ma6BmRbi5jXDpTpCfte5S3EMyFuhao\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "view_customers.html", "path": "ecommerce/templates/customer_management/view_customers.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<h2 id=\"customer-list-header\" class=\"mb-4\">Customer List</h2>\n<table id=\"customer-table\" class=\"table table-striped\">\n    <thead>\n    <tr>\n        <th class=\"customer-id\">ID</th>\n        <th class=\"customer-name\">Name</th>\n        <th class=\"customer-birthday\">Birthday</th>\n        <th class=\"customer-age\">Age</th>\n        <th class=\"customer-sex\">Sex</th>\n        <th class=\"customer-company\">Company</th>\n        <th class=\"customer-phone_number\">Phone Number</th>\n        <th>Actions</th>\n    </tr>\n    </thead>\n    <tbody>\n    {% for customer in customers %}\n    <tr>\n        <td class=\"customer-id\">{{ customer.id }}</td>\n        <td class=\"customer-name\">{{ customer.name }}</td>\n        <td class=\"customer-birthday\">{{ customer.birthday }}</td>\n        <td class=\"customer-age\">{{ customer.age }}</td>\n        <td class=\"customer-sex\">{{ customer.sex }}</td>\n        <td class=\"customer-company\">{{ customer.company }}</td>\n        <td class=\"customer-phone_number\">{{ customer.phone_number }}</td>\n        <td>\n            <a id=\"btn-edit-customer-{{ customer.id }}\" class=\"btn btn-primary btn-sm\" href=\"{% url 'edit_customer' customer.id %}\">Edit</a>\n            <a id=\"btn-delete-customer-{{ customer.id }}\" class=\"btn btn-danger btn-sm\" href=\"{% url 'delete_customer' customer.id %}\">Delete</a>\n        </td>\n    </tr>\n    {% endfor %}\n    </tbody>\n</table>\n<a id=\"btn-add-customer\" class=\"btn btn-success\" href=\"{% url 'add_customer' %}\">Add Customer</a>\n{% endblock %}"}], "14": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve(strict=True).parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-verysecretkey'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom helloapp import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.hello_world, name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/helloapp/__init__.py", "code": ""}, {"file": "views.py", "path": "myproject/helloapp/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'helloapp/index.html')\n"}, {"file": "index.html", "path": "myproject/templates/helloapp/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Hello World Page\">\n    <title>Hello World</title>\n    <style>\n        body, html {\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            height: 100%;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n        }\n\n        #hello-world {\n            font-size: 3em;\n            color: #333;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"hello-world\" class=\"hello-world\">Hello World</div>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/helloapp/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'pages',  # Add pages app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom pages import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.home, name='home'),\n    path('hello/', views.hello_world, name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/pages/__init__.py", "code": ""}, {"file": "views.py", "path": "myproject/pages/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'pages/home.html')\n\n\ndef hello_world(request):\n    return render(request, 'pages/hello_world.html')\n"}, {"file": "home.html", "path": "myproject/templates/pages/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <button id=\"btnHelloWorld\" class=\"button\" onclick=\"window.location.href='{% url 'hello_world' %}'\">Go to HelloWorld</button>\n</body>\n</html>\n"}, {"file": "hello_world.html", "path": "myproject/templates/pages/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1 id=\"helloMessage\" class=\"message\">HelloWorld</h1>\n</body>\n</html>\n"}, {"file": "__init__.py", "path": "myproject/templates/__init__.py", "code": ""}], "16": [{"file": "input_validation.py", "path": "src/input_validation.py", "code": "import os\nimport pandas as pd\n\ndef check_file_existence(file_path):\n    return os.path.exists(file_path)\n\ndef validate_headers(dataframe):\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n    return list(dataframe.columns) == expected_headers\n\ndef validate_time_column(dataframe):\n    valid_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n    return dataframe['Time'].isin(valid_times).all()\n\ndef validate_data_integrity(dataframe):\n    return not dataframe.isnull().values.any()\n\ndef validate_null_value(dataframe):\n    return dataframe.isnull().sum().sum() == 0\n"}, {"file": "data_transformation.py", "path": "src/data_transformation.py", "code": "import pandas as pd\n\ndef transform_to_two_dimension_table(dataframe):\n    table = dataframe.pivot_table(index='Name', columns=['Weekday', 'Time'], aggfunc='size', fill_value=0)\n    return table\n\ndef data_mapping(dataframe):\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    time_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n    return dataframe.set_index(['Name', 'Weekday', 'Time']).unstack([1, 2]).reindex(columns=pd.MultiIndex.from_product([weekdays, time_periods], names=['Weekday', 'Time']))\n"}, {"file": "output_file_creation.py", "path": "src/output_file_creation.py", "code": "import pandas as pd\n\ndef create_output_excel_file(file_path):\n    with pd.ExcelWriter(file_path) as writer:\n        pass\n\ndef save_table_to_excel(table, file_path):\n    with pd.ExcelWriter(file_path) as writer:\n        table.to_excel(writer, sheet_name='Subject Table')\n"}, {"file": "main.py", "path": "src/main.py", "code": "import pandas as pd\nfrom input_validation import check_file_existence, validate_headers, validate_time_column, validate_data_integrity, validate_null_value\nfrom data_transformation import transform_to_two_dimension_table, data_mapping\nfrom output_file_creation import create_output_excel_file, save_table_to_excel\n\nfile_path = 'Spring Semester Subjects.xlsx'\noutput_path = 'Transformed_Subject_Table.xlsx'\n\nif check_file_existence(file_path):\n    df = pd.read_excel(file_path)\n    if validate_headers(df) and validate_time_column(df) and validate_data_integrity(df) and validate_null_value(df):\n        two_dim_table = transform_to_two_dimension_table(df)\n        mapped_data = data_mapping(df)\n        create_output_excel_file(output_path)\n        save_table_to_excel(two_dim_table, output_path)\n        print('Processing completed successfully.')\n    else:\n        print('Validation failed. Please check the input file for errors.')\nelse:\n    print('The specified file does not exist.')\n"}], "17": [{"file": "main.py", "path": "src/main.py", "code": "import pandas as pd\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.exceptions import NotFittedError\n\n# Data Preparation Functions\ndef read_dataset(file_path):\n    try:\n        df = pd.read_excel(file_path)\n        if df.empty:\n            raise ValueError('Dataset is empty.')\n        return df\n    except Exception as e:\n        raise Exception('Error while reading the dataset: ' + str(e))\n\n\ndef lag_dependent_variable(df, column_name):\n    df['Lagged_' + column_name] = df[column_name].shift(1)\n    df.dropna(inplace=True)\n    return df\n\n\ndef prepare_independent_variables(df, dependent_var):\n    if df.isnull().values.any():\n        raise Exception('Null values found in the dataset. Stopping execution.')\n    independent_vars = df.columns.difference([dependent_var, 'Lagged_' + dependent_var])\n    return df[independent_vars], df['Lagged_' + dependent_var]\n\n\n# Model Creation Functions\ndef create_logistic_model(X, y):\n    model = LogisticRegression()\n    model.fit(X, y)\n    return model\n\n\ndef generate_model_summary(model):\n    try:\n        coefs = model.coef_[0]\n        intercept = model.intercept_[0]\n        return {'coefficients': coefs.tolist(), 'intercept': intercept}\n    except NotFittedError:\n        raise Exception('Model is not fitted yet.')\n\n\n# Output Functions\ndef write_summary(summary, output_path):\n    df_summary = pd.DataFrame(summary['coefficients'], columns=['Coefficient'])\n    df_summary['Intercept'] = summary['intercept']\n    df_summary.to_excel(output_path, index=False)\n\n\ndef run_pipeline():\n    # Specify file paths\n    input_file = 'data/Gamedata.xlsx'\n    output_file = 'output/Logistic.xlsx'\n\n    # Data Preparation\n    data = read_dataset(input_file)\n    data = lag_dependent_variable(data, 'result')\n    X, y = prepare_independent_variables(data, 'result')\n\n    # Model Creation\n    model = create_logistic_model(X, y)\n    summary = generate_model_summary(model)\n\n    # Output\n    write_summary(summary, output_file)\n\n\nif __name__ == '__main__':\n    run_pipeline()\n"}, {"file": "requirements.txt", "path": "src/requirements.txt", "code": "pandas\nscikit-learn\nopenpyxl\n"}, {"file": "index.html", "path": "src/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Logistic Regression Model</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div id=\"appContainer\" class=\"container\">\n        <h1 id=\"pageTitle\" class=\"title\">Logistic Regression Model</h1>\n        <div id=\"outputSection\" class=\"output\">\n            <!-- Output will be displayed here -->\n        </div>\n    </div>\n    <script src=\"app.js\"></script>\n</body>\n</html>\n"}, {"file": "style.css", "path": "src/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f9;\n    margin: 0;\n    padding: 0;\n}\n\n.container {\n    margin: 50px auto;\n    max-width: 600px;\n    padding: 20px;\n    background-color: #fff;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    font-size: 24px;\n    margin-bottom: 20px;\n    text-align: center;\n}\n\n.output {\n    font-size: 18px;\n    text-align: center;\n}\n"}, {"file": "app.js", "path": "src/app.js", "code": "document.addEventListener('DOMContentLoaded', function() {\n    const outputSection = document.getElementById('outputSection');\n    outputSection.innerHTML = '<p class=\"notification\">The model processing is implemented in Python. Please check the specified output file for results.</p>';\n});\n"}], "18": [{"file": "index.html", "path": "src/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Game Main Menu</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div id=\"main-menu\" class=\"menu-container\">\n        <button id=\"start-game\" class=\"menu-button\">Start Game</button>\n        <button id=\"instructions\" class=\"menu-button\">Instructions</button>\n        <button id=\"exit-game\" class=\"menu-button\">Exit Game</button>\n    </div>\n    <script src=\"main.js\"></script>\n</body>\n</html>"}, {"file": "game.js", "path": "src/game.js", "code": "class Game {\n    constructor() {\n        this.state = {};\n        this.inventory = [];\n    }\n\n    start() {\n        console.log('Game started.');\n        // initialize game state\n    }\n\n    movePlayer() {\n        console.log('Player moved.');\n    }\n\n    lookAround() {\n        console.log('Looking around.');\n    }\n\n    pickItem(item) {\n        console.log('Item picked:', item);\n        this.inventory.push(item);\n    }\n\n    checkInventory() {\n        console.log('Inventory:', this.inventory);\n    }\n\n    parseCommand(command) {\n        // Parse and execute the command\n    }\n\n    updateGameState() {\n        // update game state based on actions\n    }\n\n    displayHelp() {\n        console.log('Display help information.');\n    }\n}\n\nexport default Game;"}, {"file": "main.js", "path": "src/main.js", "code": "import Game from './game.js';\n\nconst game = new Game();\n\nconst startButton = document.getElementById('start-game');\nconst instructionsButton = document.getElementById('instructions');\nconst exitButton = document.getElementById('exit-game');\n\nstartButton.addEventListener('click', () => game.start());\ninstructionsButton.addEventListener('click', () => alert('Displaying instructions.'));\nexitButton.addEventListener('click', () => window.close());"}, {"file": "styles.css", "path": "src/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n}\n\n.menu-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    margin-top: 50px;\n}\n\n.menu-button {\n    padding: 10px 20px;\n    margin: 5px;\n    font-size: 16px;\n    cursor: pointer;\n}"}], "19": [{"file": "main.py", "path": "src/main.py", "code": "\nfrom functions import ReadDeathlistData, ProcessData, CalculateWeeklyDeaths, GenerateHistogram, OutputHistogram, ValidateDataset\n\n\ndef main():\n    # Step 1: Read Deathlist Data\n    data = ReadDeathlistData()\n\n    # Optional Step: Validate Dataset\n    if ValidateDataset:\n        is_valid = ValidateDataset(data)\n        if not is_valid:\n            print(\"Dataset validation failed.\")\n            return\n\n    # Step 2: Process Data\n    processed_data = ProcessData(data)\n\n    # Step 3: Calculate Weekly Deaths\n    weekly_deaths = CalculateWeeklyDeaths(processed_data)\n\n    # Step 4: Generate Histogram\n    histogram = GenerateHistogram(weekly_deaths)\n\n    # Step 5: Output Histogram\n    OutputHistogram(histogram)\n\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "functions.py", "path": "src/functions.py", "code": "\nimport csv\nimport matplotlib.pyplot as plt\n\n\ndef ReadDeathlistData():\n    \"\"\"\n    Load and read data from the 'Deathlist.csv' file.\n    \"\"\"\n    data = []\n    with open('Deathlist.csv', mode='r') as file:\n        csv_reader = csv.DictReader(file)\n        for row in csv_reader:\n            data.append(row)\n    return data\n\n\ndef ProcessData(data):\n    \"\"\"\n    Process the dataset to structure data appropriately for weekly analysis.\n    \"\"\"\n    # Assuming data has a 'date' field in format 'YYYY-MM-DD'\n    processed_data = []\n    for entry in data:\n        # Process each entry as needed\n        processed_data.append(entry)  # Simplified example\n    return processed_data\n\n\ndef CalculateWeeklyDeaths(processed_data):\n    \"\"\"\n    Aggregate the data to calculate the number of deaths per week.\n    \"\"\"\n    weekly_deaths = {}\n    # Example logic to aggregate\n    for entry in processed_data:\n        # Example aggregation logic\n        week = entry['week']  # Simplified placeholder\n        weekly_deaths[week] = weekly_deaths.get(week, 0) + 1\n    return weekly_deaths\n\n\ndef GenerateHistogram(weekly_deaths):\n    \"\"\"\n    Create a histogram depicting the weekly deaths calculated from the dataset.\n    \"\"\"\n    weeks = list(weekly_deaths.keys())\n    deaths = list(weekly_deaths.values())\n    plt.bar(weeks, deaths)\n    plt.xlabel('Weeks')\n    plt.ylabel('Number of Deaths')\n    plt.title('Weekly Deaths Histogram')\n    return plt\n\n\ndef OutputHistogram(histogram):\n    \"\"\"\n    Print or display the generated histogram to the user.\n    \"\"\"\n    histogram.show()\n\n\ndef ValidateDataset(data):\n    \"\"\"\n    Validate the dataset to ensure it contains the required data and format before processing.\n    \"\"\"\n    # Placeholder for actual validation logic\n    return True  # Assume it's valid for now\n"}, {"file": "Deathlist.csv", "path": "src/Deathlist.csv", "code": "date,name,cause_of_death\n2023-01-01,John Doe,Heart Attack\n2023-01-08,Jane Doe,Cancer\n2023-01-15,Jon Smith,Accident\n"}, {"file": "index.html", "path": "src/templates/index.html", "code": "\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Weekly Deaths Histogram</title>\n</head>\n<body>\n    <div id=\"histogram-container\" class=\"histogram-container\">\n        <img id=\"histogram-image\" class=\"histogram-image\" src=\"histogram.png\" alt=\"Weekly Deaths Histogram\">\n    </div>\n</body>\n</html>\n"}, {"file": "requirements.txt", "path": "src/requirements.txt", "code": "\nmatplotlib\n"}], "20": [{"file": "manage.py", "path": "blog_project/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)"}, {"file": "settings.py", "path": "blog_project/blog_project/settings.py", "code": "from pathlib import Path\n\nBASE_DIR = Path(__file__).resolve().parent.parent\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blog_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'blog_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "blog_project/blog_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog_app.urls')),\n]"}, {"file": "wsgi.py", "path": "blog_project/blog_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "blog_project/blog_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "blog_project/blog_project/__init__.py", "code": ""}, {"file": "models.py", "path": "blog_project/blog_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=255)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    categories = models.ManyToManyField(Category)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=255)\n    content = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.post}'"}, {"file": "views.py", "path": "blog_project/blog_app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import BlogPost, Comment, Category\nfrom django.utils import timezone\n\n# Home Page\n\ndef home(request):\n    posts = BlogPost.objects.order_by('-created_at')[:5]\n    return render(request, 'blog_app/home.html', {'posts': posts})\n\n# Blog Post Page\n\ndef post_detail(request, post_id):\n    post = get_object_or_404(BlogPost, id=post_id)\n    comments = post.comments.order_by('-created_at')\n    if request.method == 'POST':\n        comment_author = request.POST.get('author')\n        comment_content = request.POST.get('content')\n        new_comment = Comment(author=comment_author, content=comment_content, created_at=timezone.now(), post=post)\n        new_comment.save()\n        return redirect('post_detail', post_id=post.id)\n    return render(request, 'blog_app/post_detail.html', {'post': post, 'comments': comments})\n\n# About Page\n\ndef about(request):\n    return render(request, 'blog_app/about.html')\n\n# Categories Page\n\ndef categories(request):\n    category_list = Category.objects.all()\n    return render(request, 'blog_app/categories.html', {'categories': category_list})\n\n# Archive Page\n\ndef archive(request):\n    posts = BlogPost.objects.order_by('-created_at')\n    return render(request, 'blog_app/archive.html', {'posts': posts})"}, {"file": "urls.py", "path": "blog_project/blog_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:post_id>/', views.post_detail, name='post_detail'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('archive/', views.archive, name='archive'),\n]"}, {"file": "admin.py", "path": "blog_project/blog_app/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Comment, Category\n\nadmin.site.register(BlogPost)\nadmin.site.register(Comment)\nadmin.site.register(Category)"}, {"file": "__init__.py", "path": "blog_project/blog_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "blog_project/blog_app/apps.py", "code": "from django.apps import AppConfig\n\nclass BlogAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog_app'"}, {"file": "home.html", "path": "blog_project/templates/blog_app/home.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Home</title>\n</head>\n<body>\n    <div id='home-page' class='page'>\n        <h1>Latest Blogs</h1>\n        <div id='blogs-list' class='list'>\n            {% for post in posts %}\n                <article id='post-{{ post.id }}' class='post'>\n                    <h2>{{ post.title }}</h2>\n                    <p>{{ post.content|truncatewords:30 }}</p>\n                    <a href='{% url \"post_detail\" post.id %}'>Read more</a>\n                </article>\n            {% empty %}\n                <p>No blog posts available.</p>\n            {% endfor %}\n        </div>\n        <div id='search-bar' class='search'>\n            <input type='text' id='search-input' class='input'/>\n            <button id='search-btn' class='btn'>Search</button>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "post_detail.html", "path": "blog_project/templates/blog_app/post_detail.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>{{ post.title }}</title>\n</head>\n<body>\n    <div id='post-page' class='page'>\n        <article id='post-detail' class='detail'>\n            <h1>{{ post.title }}</h1>\n            <p>{{ post.content }}</p>\n        </article>\n        <section id='comments-section' class='comments'>\n            <h2>Comments</h2>\n            <ul id='comments-list' class='list'>\n                {% for comment in comments %}\n                    <li id='comment-{{ comment.id }}' class='comment'>\n                        <strong>{{ comment.author }}</strong>\n                        <p>{{ comment.content }}</p>\n                    </li>\n                {% empty %}\n                    <p>No comments yet.</p>\n                {% endfor %}\n            </ul>\n            <form method='post'>\n                {% csrf_token %}\n                <input type='text' name='author' placeholder='Your name' required />\n                <textarea name='content' placeholder='Your comment' required></textarea>\n                <button type='submit'>Add Comment</button>\n            </form>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "blog_project/templates/blog_app/about.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>About</title>\n</head>\n<body>\n    <div id='about-page' class='page'>\n        <h1>About the Author</h1>\n        <p>Details about the blog author or team behind the blog.</p>\n        <form id='contact-form' class='form' method='post'>\n            {% csrf_token %}\n            <input type='text' name='name' placeholder='Your Name' required>\n            <input type='email' name='email' placeholder='Your Email' required>\n            <textarea name='message' placeholder='Your Message' required></textarea>\n            <button type='submit'>Send</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "categories.html", "path": "blog_project/templates/blog_app/categories.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Categories</title>\n</head>\n<body>\n    <div id='categories-page' class='page'>\n        <h1>Blog Categories</h1>\n        <ul id='categories-list' class='list'>\n            {% for category in categories %}\n                <li id='category-{{ category.id }}' class='category'>\n                    <a href=\"#\">{{ category.name }}</a>\n                </li>\n            {% empty %}\n                <p>No categories available.</p>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "archive.html", "path": "blog_project/templates/blog_app/archive.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Archive</title>\n</head>\n<body>\n    <div id='archive-page' class='page'>\n        <h1>Archived Posts</h1>\n        <ul id='archive-list' class='list'>\n            {% for post in posts %}\n                <li id='archive-post-{{ post.id }}' class='archive-item'>\n                    <a href='{% url \"post_detail\" post.id %}'>{{ post.title }}</a>\n                </li>\n            {% empty %}\n                <p>No archived posts available.</p>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}]}