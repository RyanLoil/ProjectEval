{"1": [{"file": "bmi_calculator/settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "# Django settings for bmi_calculator project.\n\nimport os\n\nDEBUG = True\nTEMPLATE_DEBUG = DEBUG\n\nBASE_DIR = os.path.dirname(os.path.dirname(__file__))\n\nADMINS = (\n    # ('Your Name', 'your_email@example.com'),\n)\n\nMANAGERS = ADMINS\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',  # Add 'postgresql_psycopg2', 'mysql', 'sqlite3' or 'oracle'.\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),                      # Or path to database file if using sqlite3.\n        # The following settings are not used with sqlite3:\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',                      # Empty for localhost through domain sockets or '127.0.0.1' for localhost through TCP.\n        'PORT': '',                      # Set to empty string for default.\n    }\n}\n\n# Hosts that this site can serve. Required if DEBUG is False\nALLOWED_HOSTS = []\n\n# Local time zone for this installation. Choices can be found here:\n# http://en.wikipedia.org/wiki/List_of_tz_zones_by_name\n# although not all choices may be available on all operating systems.\n# In a Windows environment this must be set to your system time zone.\nTIME_ZONE = 'UTC'\n\n# Language code for this installation. All choices can be found here:\n# http://www.i18nguy.com/unicode/language-identifiers.html\nLANGUAGE_CODE = 'en-us'\n\nSITE_ID = 1\n\n# If you set this to False, Django will make some optimizations so as not\n# to load the internationalization machinery.\nUSE_I18N = True\n\n# If you set this to False, Django will not format dates, numbers and\n# calendars according to the current locale.\nUSE_L10N = True\n\n# If you set this to False, Django will not use timezone-aware datetimes.\nUSE_TZ = True\n\n# Absolute filesystem path to the directory that will hold user-uploaded files.\n# Example: '/home/media/media.lawrence.com/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# URL that handles the media served from MEDIA_ROOT. Make sure to use a\n# trailing slash. Examples: 'http://media.lawrence.com/media/', 'http://example.com/media/'\nMEDIA_URL = '/media/'\n\n# Absolute path to the directory static files should be collected to.\n# Don't put anything in this directory yourself; store your static files\n# in apps' 'static/' subdirectories and in STATICFILES_DIRS.\n# Example: '/home/media/media.lawrence.com/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\n# URL prefix for static files.\n# Example: 'http://media.lawrence.com/static/'\nSTATIC_URL = '/static/'\n\n# Additional locations of static files\nSTATICFILES_DIRS = (\n    # Put strings here, like \"/home/html/static\" or \"C:/www/django/static\".\n    # Always use forward slashes, even on Windows.\n    # Don't forget to use absolute paths, not relative paths.\n)\n\n# List of finder classes that know how to find static files in\n# various locations.\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n#    'django.contrib.staticfiles.finders.DefaultStorageFinder',\n)\n\n# Make this unique, and don't share it with anybody.\nSECRET_KEY = 'YOUR_SECRET_KEY_HERE'\n\n# List of callables that know how to import templates from various sources.\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n#     'django.template.loaders.eggs.Loader',\n)\n\nMIDDLEWARE_CLASSES = (\n    'django.middleware.common.CommonMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    # Uncomment the next line for simple clickjacking protection:\n    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',\n)\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\n# Python dotted path to the WSGI application that Django uses.\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\nTEMPLATE_DIRS = (\n    # Put strings here, like \"/home/html/django_templates\" or \"C:/www/django/templates\".\n    # Always use forward slashes, even on Windows.\n    os.path.join(BASE_DIR, 'templates'),\n)\n\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi',\n    # Uncomment the next line to enable admin documentation:\n    # 'django.contrib.admindocs',\n)\n\n# A sample logging configuration. The only tangible logging\n# performed by this configuration is to send an email to\n# the site admins on every HTTP 500 error.\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'filters': {\n        'require_debug_false': {\n            '()': 'django.utils.log.RequireDebugFalse'\n        }\n    },\n    'handlers': {\n        'mail_admins': {\n            'level': 'ERROR',\n            'filters': ['require_debug_false'],\n            'class': 'django.utils.log.AdminEmailHandler'\n        }\n    },\n    'loggers': {\n        'django.request': {\n            'handlers': ['mail_admins'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n    }\n}\n"}, {"file": "bmi_calculator/urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.conf.urls import patterns, include, url\n\nfrom django.contrib import admin\nadmin.autodiscover()\n\nurlpatterns = patterns(\n    '',\n    url(r'^$', 'bmi.views.home', name='home'),\n    url(r'^calculate/$', 'bmi.views.calculate', name='calculate'),\n    url(r'^admin/', include(admin.site.urls)),\n)\n"}, {"file": "bmi_calculator/wsgi.py", "path": "bmi_calculator/bmi_calculator/wsgi.py", "code": "import os\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"bmi_calculator.settings\")\n\nfrom django.core.wsgi import get_wsgi_application\napplication = get_wsgi_application()\n"}, {"file": "bmi/models.py", "path": "bmi_calculator/bmi/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "bmi/views.py", "path": "bmi_calculator/bmi/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef calculate(request):\n    if request.method == 'POST':\n        try:\n            height = float(request.POST['height'])\n            weight = float(request.POST['weight'])\n            height_unit = request.POST['height_unit']\n            weight_unit = request.POST['weight_unit']\n\n            if height_unit == 'inches':\n                height = height * 0.0254  # Convert inches to meters\n            elif height_unit == 'cm':\n                height = height / 100.0  # Convert cm to meters\n\n            if weight_unit == 'lbs':\n                weight = weight * 0.453592  # Convert lbs to kg\n\n            bmi = weight / (height * height)\n            bmi = round(bmi, 2)\n\n            if bmi < 18.5:\n                category = 'Underweight'\n            elif 18.5 <= bmi < 25:\n                category = 'Normal'\n            elif 25 <= bmi < 30:\n                category = 'Overweight'\n            else:\n                category = 'Obese'\n\n            return render(request, 'bmi_calculator.html', {'bmi': bmi, 'category': category})\n\n        except ValueError:\n            return render(request, 'bmi_calculator.html', {'error': 'Invalid input. Please enter numbers only.'})\n    else:\n        return render(request, 'bmi_calculator.html')\n"}, {"file": "bmi/admin.py", "path": "bmi_calculator/bmi/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "templates/home.html", "path": "bmi_calculator/templates/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator - Home</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-title\">Welcome to the BMI Calculator</h1>\n        <p id=\"home-introduction\" class=\"home-introduction\">\n            This calculator helps you estimate your body mass index (BMI), a measure of body fat based on height and weight.\n            It can provide a general indication of whether you are underweight, normal weight, overweight, or obese.\n        </p>\n        <a href=\"{% url 'calculate' %}\" id=\"home-calculate-button\" class=\"home-calculate-button\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>"}, {"file": "templates/bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"bmi-container\">\n        <h1 id=\"bmi-title\" class=\"bmi-title\">BMI Calculator</h1>\n\n        {% if error %}\n            <p id=\"bmi-error\" class=\"bmi-error\">{{ error }}</p>\n        {% endif %}\n\n        <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\" action=\"{% url 'calculate' %}\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"height-group\">\n                <label for=\"height\" id=\"height-label\" class=\"height-label\">Height:</label>\n                <input type=\"number\" id=\"height\" name=\"height\" class=\"height-input\" required>\n                <select id=\"height_unit\" name=\"height_unit\" class=\"height-unit-select\">\n                    <option value=\"cm\">cm</option>\n                    <option value=\"inches\">inches</option>\n                </select>\n            </div>\n\n            <div class=\"form-group\" id=\"weight-group\">\n                <label for=\"weight\" id=\"weight-label\" class=\"weight-label\">Weight:</label>\n                <input type=\"number\" id=\"weight\" name=\"weight\" class=\"weight-input\" required>\n                <select id=\"weight_unit\" name=\"weight_unit\" class=\"weight-unit-select\">\n                    <option value=\"kg\">kg</option>\n                    <option value=\"lbs\">lbs</option>\n                </select>\n            </div>\n\n            <button type=\"submit\" id=\"bmi-submit\" class=\"bmi-submit\">Calculate BMI</button>\n            <button type=\"reset\" id=\"bmi-reset\" class=\"bmi-reset\">Reset</button>\n        </form>\n\n        {% if bmi %}\n            <div id=\"bmi-result\" class=\"bmi-result\">\n                <h2 id=\"bmi-result-title\" class=\"bmi-result-title\">Your BMI: {{ bmi }}</h2>\n                <p id=\"bmi-category\" class=\"bmi-category\">Category: {{ category }}</p>\n                <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">Interpretation: According to your BMI, you fall into the {{ category }} category.</p>\n                <p id=\"bmi-health-advice\" class=\"bmi-health-advice\">For more information on maintaining a healthy BMI, consult your doctor or a registered dietitian.</p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "static/css/style.css", "path": "bmi_calculator/static/css/style.css", "code": "/* General Styles */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n/* Home Page Styles */\n.home-title {\n    font-size: 2em;\n}\n\n.home-introduction {\n    line-height: 1.6;\n    margin-bottom: 20px;\n}\n\n.home-calculate-button {\n    display: block;\n    width: fit-content;\n    margin: 0 auto;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: #fff;\n    text-decoration: none;\n    border-radius: 5px;\n    transition: background-color 0.3s ease;\n}\n\n.home-calculate-button:hover {\n    background-color: #0056b3;\n}\n\n/* BMI Calculator Styles */\n.bmi-form {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.form-group {\n    margin-bottom: 15px;\n    display: flex;\n    align-items: center;\n}\n\nlabel {\n    margin-right: 10px;\n}\n\ninput[type=\"number\"], select {\n    padding: 8px;\n    border-radius: 5px;\n    border: 1px solid #ccc;\n    width: 150px;\n}\n\n.bmi-submit, .bmi-reset {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 5px;\n    color: #fff;\n    cursor: pointer;\n    margin: 0 10px;\n}\n\n.bmi-submit {\n    background-color: #28a745;\n}\n\n.bmi-reset {\n    background-color: #dc3545;\n}\n\n.bmi-submit:hover {\n    background-color: #218838;\n}\n\n.bmi-reset:hover {\n    background-color: #c82333;\n}\n\n.bmi-result {\n    margin-top: 20px;\n    padding: 15px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.bmi-category {\n    font-weight: bold;\n}\n\n.bmi-error {\n    color: red;\n    text-align: center;\n}\n\n/* Responsive Design */\n@media (max-width: 600px) {\n    .container {\n        width: 95%;\n        padding: 10px;\n    }\n\n    .form-group {\n        flex-direction: column;\n        align-items: flex-start;\n    }\n\n    label {\n        margin-bottom: 5px;\n    }\n\n    input[type=\"number\"], select {\n        width: 100%;\n    }\n}"}, {"file": "bmi/__init__.py", "path": "bmi_calculator/bmi/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "/currency_converter/", "code": "default_app_config = 'currency_converter.apps.CurrencyConverterConfig'"}, {"file": "settings.py", "path": "/currency_converter/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "/currency_converter/", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]\n"}, {"file": "wsgi.py", "path": "/currency_converter/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "/converter/", "code": ""}, {"file": "admin.py", "path": "/converter/", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "/converter/", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    name = 'converter'\n"}, {"file": "models.py", "path": "/converter/", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "urls.py", "path": "/converter/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('currency_details/<str:currency_code>/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings, name='settings'),\n]\n"}, {"file": "views.py", "path": "/converter/", "code": "from django.shortcuts import render\n\n# Dummy data for exchange rates and currency details.\n# In a real application, this data would come from an external API or database.\nexchange_rates = {\n    'USD': {\n        'EUR': 0.85,\n        'GBP': 0.75,\n    },\n    'EUR': {\n        'USD': 1.18,\n        'GBP': 0.88,\n    },\n    'GBP': {\n        'USD': 1.33,\n        'EUR': 1.14,\n    },\n}\n\ncurrency_info = {\n    'USD': {\n        'name': 'US Dollar',\n        'symbol': '$',\n        'description': 'The official currency of the United States.',\n    },\n    'EUR': {\n        'name': 'Euro',\n        'symbol': '\u20ac',\n        'description': 'The official currency of the Eurozone.',\n    },\n    'GBP': {\n        'name': 'British Pound',\n        'symbol': '\u00a3',\n        'description': 'The official currency of the United Kingdom.',\n    },\n}\n\n\ndef home(request):\n    if request.method == 'POST':\n        base_currency = request.POST.get('base_currency')\n        target_currency = request.POST.get('target_currency')\n        amount = float(request.POST.get('amount'))\n\n        if base_currency and target_currency and amount is not None:\n            try:\n                rate = exchange_rates[base_currency][target_currency]\n                converted_amount = amount * rate\n                context = {\n                    'base_currency': base_currency,\n                    'target_currency': target_currency,\n                    'amount': amount,\n                    'converted_amount': converted_amount,\n                    'exchange_rate': rate,\n                    'currencies': list(exchange_rates.keys()),  # Available currencies\n                }\n                return render(request, 'converter/home.html', context)\n            except KeyError:\n                return render(request, 'converter/home.html', {\n                    'error_message': 'Invalid currency selection.',\n                    'currencies': list(exchange_rates.keys()),\n                })\n    return render(request, 'converter/home.html', {'currencies': list(exchange_rates.keys())})\n\n\ndef currency_details(request, currency_code):\n    currency = currency_info.get(currency_code)\n    if currency:\n        context = {\n            'currency': currency,\n            'currency_code': currency_code,\n        }\n        return render(request, 'converter/currency_details.html', context)\n    else:\n        return render(request, 'converter/currency_details.html', {'error_message': 'Currency not found.'})\n\n\ndef settings(request):\n    if request.method == 'POST':\n        default_base_currency = request.POST.get('default_base_currency')\n        default_target_currency = request.POST.get('default_target_currency')\n        update_frequency = request.POST.get('update_frequency')\n\n        # In a real application, you would save these settings to a user profile or database.\n        context = {\n            'message': 'Settings saved successfully!',\n            'default_base_currency': default_base_currency,\n            'default_target_currency': default_target_currency,\n            'update_frequency': update_frequency,\n            'currencies': list(exchange_rates.keys()),\n        }\n        return render(request, 'converter/settings.html', context)\n\n    context = {\n        'currencies': list(exchange_rates.keys()),\n    }\n    return render(request, 'converter/settings.html', context)\n"}, {"file": "home.html", "path": "/templates/converter/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <link rel=\"stylesheet\" href=\"{% static 'converter/style.css' %}\">\n</head>\n<body>\n    <div id=\"home-page\" class=\"container\">\n        <h1 id=\"home-page-title\" class=\"page-title\">Currency Converter</h1>\n\n        {% if error_message %}\n            <p id=\"error-message\" class=\"error\">{{ error_message }}</p>\n        {% endif %}\n\n        <form id=\"conversion-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"base-currency-section\" class=\"form-group\">\n                <label for=\"base-currency\" id=\"base-currency-label\" class=\"form-label\">Base Currency:</label>\n                <select id=\"base-currency\" name=\"base_currency\" class=\"form-select\">\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\" {% if base_currency == currency %}selected{% endif %}>{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div id=\"target-currency-section\" class=\"form-group\">\n                <label for=\"target-currency\" id=\"target-currency-label\" class=\"form-label\">Target Currency:</label>\n                <select id=\"target-currency\" name=\"target_currency\" class=\"form-select\">\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\" {% if target_currency == currency %}selected{% endif %}>{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div id=\"amount-section\" class=\"form-group\">\n                <label for=\"amount\" id=\"amount-label\" class=\"form-label\">Amount:</label>\n                <input type=\"number\" id=\"amount\" name=\"amount\" class=\"form-input\" value=\"{% if amount %}{{ amount }}{% endif %}\" required>\n            </div>\n\n            <button type=\"submit\" id=\"convert-button\" class=\"btn btn-primary\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n            <div id=\"conversion-result\" class=\"result\">\n                <p id=\"converted-amount-text\" class=\"result-text\">{{ amount }} {{ base_currency }} = {{ converted_amount }} {{ target_currency }}</p>\n                <p id=\"exchange-rate-text\" class=\"exchange-rate\">Exchange Rate: 1 {{ base_currency }} = {{ exchange_rate }} {{ target_currency }}</p>\n            </div>\n        {% endif %}\n\n        <div id=\"navigation-links\" class=\"navigation\">\n            <a href=\"{% url 'currency_details' 'USD' %}\" id=\"usd-details-link\" class=\"nav-link\">USD Details</a>\n            <a href=\"{% url 'currency_details' 'EUR' %}\" id=\"eur-details-link\" class=\"nav-link\">EUR Details</a>\n            <a href=\"{% url 'currency_details' 'GBP' %}\" id=\"gbp-details-link\" class=\"nav-link\">GBP Details</a>\n            <a href=\"{% url 'settings' %}\" id=\"settings-link\" class=\"nav-link\">Settings</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "currency_details.html", "path": "/templates/converter/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Details</title>\n    <link rel=\"stylesheet\" href=\"{% static 'converter/style.css' %}\">\n</head>\n<body>\n    <div id=\"currency-details-page\" class=\"container\">\n        <h1 id=\"currency-details-title\" class=\"page-title\">Currency Details</h1>\n\n        {% if error_message %}\n            <p id=\"error-message\" class=\"error\">{{ error_message }}</p>\n        {% else %}\n            <div id=\"currency-info\" class=\"currency-info\">\n                <h2 id=\"currency-name\" class=\"currency-title\">{{ currency.name }} ({{ currency_code }})</h2>\n                <p id=\"currency-symbol\" class=\"currency-text\">Symbol: {{ currency.symbol }}</p>\n                <p id=\"currency-description\" class=\"currency-text\">Description: {{ currency.description }}</p>\n            </div>\n        {% endif %}\n\n        <div id=\"navigation-links\" class=\"navigation\">\n            <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"nav-link\">Home</a>\n            <a href=\"{% url 'settings' %}\" id=\"settings-link\" class=\"nav-link\">Settings</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "/templates/converter/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Settings</title>\n    <link rel=\"stylesheet\" href=\"{% static 'converter/style.css' %}\">\n</head>\n<body>\n    <div id=\"settings-page\" class=\"container\">\n        <h1 id=\"settings-title\" class=\"page-title\">Settings</h1>\n\n        {% if message %}\n            <p id=\"success-message\" class=\"success\">{{ message }}</p>\n        {% endif %}\n\n        <form id=\"settings-form\" method=\"post\">\n            {% csrf_token %}\n\n            <div id=\"default-currencies-section\" class=\"form-group\">\n                <label for=\"default-base-currency\" id=\"default-base-currency-label\" class=\"form-label\">Default Base Currency:</label>\n                <select id=\"default-base-currency\" name=\"default_base_currency\" class=\"form-select\">\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\" {% if default_base_currency == currency %}selected{% endif %}>{{ currency }}</option>\n                    {% endfor %}\n                </select>\n\n                <label for=\"default-target-currency\" id=\"default-target-currency-label\" class=\"form-label\">Default Target Currency:</label>\n                <select id=\"default-target-currency\" name=\"default_target_currency\" class=\"form-select\">\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\" {% if default_target_currency == currency %}selected{% endif %}>{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div id=\"update-frequency-section\" class=\"form-group\">\n                <label for=\"update-frequency\" id=\"update-frequency-label\" class=\"form-label\">Update Frequency (minutes):</label>\n                <input type=\"number\" id=\"update-frequency\" name=\"update_frequency\" class=\"form-input\" value=\"{% if update_frequency %}{{ update_frequency }}{% endif %}\">\n            </div>\n\n            <button type=\"submit\" id=\"save-settings-button\" class=\"btn btn-primary\">Save Settings</button>\n        </form>\n\n        <div id=\"navigation-links\" class=\"navigation\">\n            <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"nav-link\">Home</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "style.css", "path": "/static/converter/", "code": "/* General Styles */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.page-title {\n    text-align: center;\n    color: #333;\n    margin-bottom: 20px;\n}\n\n/* Form Styles */\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.form-input, .form-select {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.btn {\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.btn-primary {\n    background-color: #007bff;\n    color: white;\n}\n\n.btn-primary:hover {\n    background-color: #0056b3;\n}\n\n/* Result Styles */\n.result {\n    margin-top: 20px;\n    padding: 15px;\n    background-color: #e9ecef;\n    border-radius: 4px;\n}\n\n.result-text {\n    font-size: 1.2em;\n    color: #28a745;\n}\n\n.exchange-rate {\n    font-size: 0.9em;\n    color: #6c757d;\n}\n\n/* Navigation Styles */\n.navigation {\n    margin-top: 30px;\n    text-align: center;\n}\n\n.nav-link {\n    margin: 0 10px;\n    color: #007bff;\n    text-decoration: none;\n}\n\n.nav-link:hover {\n    text-decoration: underline;\n}\n\n/* Error & Success Messages */\n.error {\n    color: #dc3545;\n    background-color: #f8d7da;\n    padding: 10px;\n    border-radius: 4px;\n    margin-bottom: 15px;\n}\n\n.success {\n    color: #28a745;\n    background-color: #d4edda;\n    padding: 10px;\n    border-radius: 4px;\n    margin-bottom: 15px;\n}\n\n/* Currency Details Styles */\n.currency-info {\n    margin-bottom: 20px;\n}\n\n.currency-title {\n    color: #333;\n}\n\n.currency-text {\n    color: #555;\n    margin-bottom: 8px;\n}"}, {"file": "__init__.py", "path": "/currency_converter/static/converter/", "code": ""}], "3": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"password_generator.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "/password_generator/", "code": "default_app_config = 'password_generator.apps.PasswordGeneratorConfig'"}, {"file": "apps.py", "path": "/password_generator/", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'"}, {"file": "models.py", "path": "/password_generator/", "code": "# models.py"}, {"file": "views.py", "path": "/password_generator/", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generate_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters + string.digits\n\n    generated_password = ''.join(random.choice(characters) for i in range(length))\n\n    return render(request, 'generated_password.html', {'password': generated_password})\n\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "urls.py", "path": "/password_generator/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generate_password/', views.generate_password, name='generate_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "admin.py", "path": "/password_generator/", "code": "# admin.py"}, {"file": "home.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: center;\n        }\n        .container {\n            margin-top: 50px;\n        }\n        .welcome-message {\n            font-size: 24px;\n            margin-bottom: 20px;\n        }\n        .navigation-button {\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 class=\"welcome-message\" id=\"welcome-message\">Welcome to the Password Generator!</h1>\n        <a href=\"/password_options/\" class=\"navigation-button\" id=\"password-options-button\">Go to Password Generator</a>\n        <a href=\"/about/\" class=\"navigation-button\" id=\"about-page-button\">About</a>\n\n    </div>\n</body>\n</html>"}, {"file": "password_options.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Options</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: center;\n        }\n        .container {\n            margin-top: 50px;\n        }\n        .form-group {\n            margin-bottom: 10px;\n        }\n        .generate-button {\n            padding: 10px 20px;\n            background-color: #008CBA;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n\n        .form-control{\n            padding: 5px;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"password-options-container\">\n        <h1>Password Options</h1>\n        <form action=\"/generate_password/\" method=\"get\" id=\"password-options-form\">\n            <div class=\"form-group\" id=\"length-group\">\n                <label for=\"length\" id=\"length-label\">Length:</label>\n                <input type=\"number\" name=\"length\" id=\"length\" class=\"form-control\" value=\"12\">\n            </div>\n            <div class=\"form-group\" id=\"uppercase-group\">\n                <label for=\"uppercase\" id=\"uppercase-label\">Include Uppercase:</label>\n                <input type=\"checkbox\" name=\"uppercase\" id=\"uppercase\" class=\"form-control\">\n            </div>\n            <div class=\"form-group\" id=\"lowercase-group\">\n                <label for=\"lowercase\" id=\"lowercase-label\">Include Lowercase:</label>\n                <input type=\"checkbox\" name=\"lowercase\" id=\"lowercase\" class=\"form-control\" checked>\n            </div>\n            <div class=\"form-group\" id=\"numbers-group\">\n                <label for=\"numbers\" id=\"numbers-label\">Include Numbers:</label>\n                <input type=\"checkbox\" name=\"numbers\" id=\"numbers\" class=\"form-control\">\n            </div>\n            <div class=\"form-group\" id=\"symbols-group\">\n                <label for=\"symbols\" id=\"symbols-label\">Include Symbols:</label>\n                <input type=\"checkbox\" name=\"symbols\" id=\"symbols\" class=\"form-control\">\n            </div>\n            <button type=\"submit\" class=\"generate-button\" id=\"generate-button\">Generate Password</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "generated_password.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Generated Password</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: center;\n        }\n        .container {\n            margin-top: 50px;\n        }\n        .password-display {\n            font-size: 20px;\n            margin-bottom: 20px;\n            word-wrap: break-word;\n        }\n        .copy-button {\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"generated-password-container\">\n        <h1>Generated Password</h1>\n        <p class=\"password-display\" id=\"password-display\">{{ password }}</p>\n        <button class=\"copy-button\" id=\"copy-button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n    </div>\n\n    <script>\n        function copyToClipboard() {\n            var password = document.getElementById(\"password-display\").innerText;\n            navigator.clipboard.writeText(password).then(function() {\n                alert('Password copied to clipboard!');\n            }, function(err) {\n                console.error('Could not copy text: ', err);\n            });\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: center;\n        }\n        .container {\n            margin-top: 50px;\n        }\n        .description {\n            font-size: 16px;\n            line-height: 1.6;\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"about-container\">\n        <h1>About Password Generator</h1>\n        <p class=\"description\" id=\"about-description\">This website is a simple password generator tool. You can specify the length of the password and choose to include uppercase letters, lowercase letters, numbers, and symbols. Click 'Go to Password Generator' on home page to get started!</p>\n    </div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "/password_generator/settings/", "code": ""}, {"file": "settings.py", "path": "/password_generator/settings/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "/password_generator/", "code": "from django.urls import include, path\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('', include('password_generator.urls')),\n    path('admin/', admin.site.urls),\n]"}, {"file": "wsgi.py", "path": "/password_generator/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}], "5": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'md_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/md_converter/", "code": "default_app_config = 'md_converter.apps.MdConverterConfig'"}, {"file": "apps.py", "path": "/md_converter/", "code": "from django.apps import AppConfig\n\n\nclass MdConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'md_converter'"}, {"file": "models.py", "path": "/md_converter/", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "admin.py", "path": "/md_converter/", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "views.py", "path": "/md_converter/", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html': html, 'markdown_text': markdown_text})\n    return render(request, 'convert.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "/md_converter/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "tests.py", "path": "/md_converter/", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "__init__.py", "path": "/md_converter/migrations/", "code": " "}, {"file": "settings.py", "path": "/md_converter_project/", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'your_default_secret_key')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'md_converter.apps.MdConverterConfig',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'md_converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'md_converter_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "/md_converter_project/", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('md_converter.urls')),\n]"}, {"file": "wsgi.py", "path": "/md_converter_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'md_converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "/md_converter_project/", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'md_converter_project.settings')\n\napplication = get_asgi_application()"}, {"file": "home.html", "path": "/templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Converter - Home</title>\n    <link rel=\"stylesheet\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"welcome-message\" class=\"heading\">Welcome to the Markdown to HTML Converter!</h1>\n        <p id=\"introduction\" class=\"paragraph\">This tool allows you to convert Markdown text into HTML. Simply paste your Markdown into the converter page, and the HTML output will be generated.</p>\n        <nav id=\"main-nav\" class=\"navigation\">\n            <ul class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"convert-link\" class=\"nav-link\" href=\"{% url 'convert' %}\">Convert</a></li>\n                <li class=\"nav-item\"><a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "/templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Converter - Convert</title>\n    <link rel=\"stylesheet\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <div id=\"convert-container\" class=\"container\">\n        <h1 id=\"convert-heading\" class=\"heading\">Markdown to HTML Converter</h1>\n        <form id=\"convert-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"input-area-container\" class=\"form-group\">\n                <label for=\"markdown_text\" id=\"markdown-label\">Markdown Input:</label>\n                <textarea id=\"markdown_text\" name=\"markdown_text\" class=\"input-area\" rows=\"10\">{% if markdown_text %}{{ markdown_text }}{% endif %}</textarea>\n            </div>\n            <button id=\"convert-button\" type=\"submit\" class=\"button\">Convert</button>\n        </form>\n        {% if html %}\n            <div id=\"output-area-container\" class=\"output-area-container\">\n                <h2 id=\"output-heading\" class=\"heading\">HTML Output:</h2>\n                <div id=\"html-output\" class=\"output-area\">{{ html|safe }}</div>\n            </div>\n        {% endif %}\n        <a id=\"home-link\" class=\"button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "/templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Converter - About</title>\n    <link rel=\"stylesheet\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-heading\" class=\"heading\">About the Markdown Converter</h1>\n        <section id=\"team-info\" class=\"section\">\n            <h2 id=\"team-heading\" class=\"sub-heading\">Team Information</h2>\n            <p id=\"team-description\" class=\"paragraph\">This Markdown to HTML converter was developed by a dedicated team of web developers passionate about making content creation easier.</p>\n        </section>\n        <section id=\"faq\" class=\"section\">\n            <h2 id=\"faq-heading\" class=\"sub-heading\">FAQ</h2>\n            <ul id=\"faq-list\" class=\"faq-list\">\n                <li class=\"faq-item\">\n                    <h3 class=\"faq-question\">What is Markdown?</h3>\n                    <p class=\"faq-answer\">Markdown is a lightweight markup language with plain text formatting syntax.</p>\n                </li>\n                <li class=\"faq-item\">\n                    <h3 class=\"faq-question\">How do I use the converter?</h3>\n                    <p class=\"faq-answer\">Simply paste your Markdown text into the input area and click the 'Convert' button.</p>\n                </li>\n            </ul>\n        </section>\n        <a id=\"home-link\" class=\"button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "/static/", "code": "/* General Styles */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.heading {\n    text-align: center;\n    margin-bottom: 20px;\n    color: #007bff;\n}\n\n.sub-heading {\n    margin-bottom: 10px;\n    color: #007bff;\n}\n\n.paragraph {\n    line-height: 1.6;\n}\n\n/* Navigation Styles */\n.navigation {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.nav-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: inline-block;\n}\n\n.nav-item {\n    display: inline;\n    margin: 0 10px;\n}\n\n.nav-link {\n    text-decoration: none;\n    color: #007bff;\n    font-weight: bold;\n}\n\n/* Form Styles */\n.form-group {\n    margin-bottom: 20px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.input-area {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    resize: vertical;\n    font-family: monospace;\n}\n\n.button {\n    background-color: #007bff;\n    color: #fff;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 16px;\n    transition: background-color 0.3s ease;\n    text-decoration: none;\n    display: inline-block;\n}\n\n.button:hover {\n    background-color: #0056b3;\n}\n\n/* Output Styles */\n.output-area-container {\n    margin-top: 20px;\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background-color: #f9f9f9;\n}\n\n.output-area {\n    white-space: pre-wrap; /* Preserves formatting */\n    font-family: monospace;\n}\n\n/* About Page Styles */\n.section {\n    margin-bottom: 20px;\n}\n\n.faq-list {\n    list-style: none;\n    padding: 0;\n}\n\n.faq-item {\n    margin-bottom: 15px;\n}\n\n.faq-question {\n    font-weight: bold;\n    margin-bottom: 5px;\n}\n\n.faq-answer {\n    line-height: 1.6;\n}"}], "6": [{"file": "settings.py", "path": "todo_project/todo_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "todo_project/todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "todo_project/todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "models.py", "path": "todo_project/todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title\n"}, {"file": "views.py", "path": "todo_project/todo_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom django.http import HttpResponse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'home.html', {'todo_lists': todo_lists})\n\ndef todo_list_detail(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        TodoList.objects.create(name=name)\n        return redirect('home')\n    return render(request, 'create_todo_list.html')\n\ndef create_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        Task.objects.create(todo_list=todo_list, title=title, description=description)\n        return redirect('todo_list_detail', list_id=list_id)\n    return render(request, 'create_task.html', {'todo_list': todo_list})\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        task.title = request.POST.get('title')\n        task.description = request.POST.get('description')\n        task.save()\n        return redirect('todo_list_detail', list_id=task.todo_list.id)\n    return render(request, 'edit_task.html', {'task': task})\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list_detail', list_id=list_id)\n\ndef mark_task_completed(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', list_id=task.todo_list.id)\n\n\ndef analysis_page(request):\n  return render(request, 'analysis.html') #replace by the real template\n"}, {"file": "urls.py", "path": "todo_project/todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('list/<int:list_id>/', views.todo_list_detail, name='todo_list_detail'),\n    path('list/create/', views.create_todo_list, name='create_todo_list'),\n    path('list/<int:list_id>/task/create/', views.create_task, name='create_task'),\n    path('task/<int:task_id>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:task_id>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:task_id>/complete/', views.mark_task_completed, name='mark_task_completed'),\n    path('analysis/', views.analysis_page, name='analysis')\n]\n"}, {"file": "home.html", "path": "todo_project/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App - Home</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"mt-4 mb-4\">Todo Lists</h1>\n        <a id=\"create-list-link\" href=\"{% url 'create_todo_list' %}\" class=\"btn btn-primary mb-3\">Create New List</a>\n        <ul id=\"todo-list\" class=\"list-group\">\n            {% for todo_list in todo_lists %}\n                <li id=\"list-item-{{ todo_list.id }}\" class=\"list-group-item\">\n                    <a class=\"list-link\" href=\"{% url 'todo_list_detail' list_id=todo_list.id %}\">{{ todo_list.name }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n\n        <a id=\"analysis-link\" href=\"{% url 'analysis' %}\" class=\"btn btn-secondary mt-3\">Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "todo_list_detail.html", "path": "todo_project/templates/todo_list_detail.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List - {{ todo_list.name }}</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"list-detail-title\" class=\"mt-4 mb-4\">{{ todo_list.name }}</h1>\n        <a id=\"create-task-link\" href=\"{% url 'create_task' list_id=todo_list.id %}\" class=\"btn btn-primary mb-3\">Add New Task</a>\n\n        <ul id=\"task-list\" class=\"list-group\">\n            {% for task in tasks %}\n                <li id=\"task-item-{{ task.id }}\" class=\"list-group-item\">\n                    <span class=\"task-title\">{{ task.title }}</span>\n                    {% if task.completed %}\n                        <span class=\"badge badge-success\">Completed</span>\n                    {% endif %}\n                    <div class=\"task-actions\">\n                        <a id=\"edit-task-{{ task.id }}-link\" href=\"{% url 'edit_task' task_id=task.id %}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                        <a id=\"delete-task-{{ task.id }}-link\" href=\"{% url 'delete_task' task_id=task.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                        {% if not task.completed %}\n                            <a id=\"complete-task-{{ task.id }}-link\" href=\"{% url 'mark_task_completed' task_id=task.id %}\" class=\"btn btn-sm btn-success\">Complete</a>\n                        {% endif %}\n                    </div>\n                </li>\n            {% endfor %}\n        </ul>\n        <a id=\"back-home-link\" href=\"{% url 'home' %}\" class=\"btn btn-secondary mt-3\">Back to Home</a>\n\n    </div>\n</body>\n</html>"}, {"file": "create_todo_list.html", "path": "todo_project/templates/create_todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Create Todo List</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"create-list-title\" class=\"mt-4 mb-4\">Create New Todo List</h1>\n        <form id=\"create-list-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label id=\"list-name-label\" for=\"name\">List Name:</label>\n                <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required>\n            </div>\n            <button id=\"create-list-button\" type=\"submit\" class=\"btn btn-primary\">Create</button>\n            <a id=\"cancel-create-list-link\" href=\"{% url 'home' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "create_task.html", "path": "todo_project/templates/create_task.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Create Task</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"create-task-title\" class=\"mt-4 mb-4\">Create New Task for {{ todo_list.name }}</h1>\n        <form id=\"create-task-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label id=\"task-title-label\" for=\"title\">Task Title:</label>\n                <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" required>\n            </div>\n            <div class=\"form-group\">\n                <label id=\"task-description-label\" for=\"description\">Description:</label>\n                <textarea class=\"form-control\" id=\"description\" name=\"description\" rows=\"3\"></textarea>\n            </div>\n            <button id=\"create-task-button\" type=\"submit\" class=\"btn btn-primary\">Create Task</button>\n            <a id=\"cancel-create-task-link\" href=\"{% url 'todo_list_detail' list_id=todo_list.id %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_task.html", "path": "todo_project/templates/edit_task.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Task</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"edit-task-title\" class=\"mt-4 mb-4\">Edit Task</h1>\n        <form id=\"edit-task-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label id=\"task-title-label\" for=\"title\">Task Title:</label>\n                <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" value=\"{{ task.title }}\" required>\n            </div>\n            <div class=\"form-group\">\n                <label id=\"task-description-label\" for=\"description\">Description:</label>\n                <textarea class=\"form-control\" id=\"description\" name=\"description\" rows=\"3\">{{ task.description }}</textarea>\n            </div>\n            <button id=\"save-task-button\" type=\"submit\" class=\"btn btn-primary\">Save Changes</button>\n            <a id=\"cancel-edit-task-link\" href=\"{% url 'todo_list_detail' list_id=task.todo_list.id %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "analysis.html", "path": "todo_project/templates/analysis.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>Task Analysis</title>\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n\n</head>\n<body>\n  <div class=\"container\">\n    <h1 id=\"analysis-title\" class=\"mt-4 mb-4\">Task Analysis</h1>\n\n    <div id=\"task-completion-chart\" class=\"mb-4\">\n      <h2>Task Completion Chart</h2>\n      <p>Placeholder for task completion chart.</p>\n    </div>\n\n    <div id=\"task-distribution-chart\">\n      <h2>Task Distribution Chart</h2>\n      <p>Placeholder for task distribution chart.</p>\n    </div>\n\n        <a id=\"back-home-link\" href=\"{% url 'home' %}\" class=\"btn btn-secondary mt-3\">Back to Home</a>\n  </div>\n</body>\n</html>"}, {"file": "admin.py", "path": "todo_project/todo_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)\n"}], "8": [{"file": "settings.py", "path": "calendar_project/calendar_app/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "calendar_project/calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/add/', views.add_event, name='add_event'),\n    path('event/edit/<int:event_id>/', views.edit_event, name='edit_event'),\n    path('event/delete/<int:event_id>/', views.delete_event, name='delete_event'),\n    path('event/search/', views.search_events, name='search_events'),\n    path('events/list/', views.list_events, name='list_events'),\n    path('help/', views.help_view, name='help'),\n]"}, {"file": "views.py", "path": "calendar_project/calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\nfrom django.http import HttpResponse\n\n\ndef home(request):\n    current_date = timezone.now().date()\n    events = Event.objects.filter(date=current_date)\n    return render(request, 'home.html', {'current_date': current_date, 'events': events})\n\n\ndef calendar_view(request):\n    year = request.GET.get('year')\n    month = request.GET.get('month')\n\n    if year and month:\n        try:\n            year = int(year)\n            month = int(month)\n        except ValueError:\n            year = timezone.now().year\n            month = timezone.now().month\n    else:\n        year = timezone.now().year\n        month = timezone.now().month\n    \n    events = Event.objects.filter(date__year=year, date__month=month)\n    return render(request, 'calendar.html', {'year': year, 'month': month, 'events': events})\n\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'event_details.html', {'event': event})\n\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            event = form.save()\n            return redirect('home')  # Redirect to home after adding event\n    else:\n        form = EventForm()\n    return render(request, 'add_event.html', {'form': form})\n\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event.id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'edit_event.html', {'form': form, 'event': event})\n\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'delete_event.html', {'event': event})\n\n\ndef search_events(request):\n    query = request.GET.get('q')\n    results = []\n    if query:\n        results = Event.objects.filter(title__icontains=query)\n    return render(request, 'search_events.html', {'results': results, 'query': query})\n\n\ndef list_events(request):\n    events = Event.objects.all()\n    return render(request, 'list_events.html', {'events': events})\n\n\ndef help_view(request):\n    return render(request, 'help.html')\n"}, {"file": "models.py", "path": "calendar_project/calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    date = models.DateField()\n    time = models.TimeField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "forms.py", "path": "calendar_project/calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'date', 'time']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}),\n            'time': forms.TimeInput(attrs={'type': 'time'})\n        }"}, {"file": "home.html", "path": "calendar_project/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Calendar App</h1>\n\n        <div id=\"date-display\" class=\"date-display\">\n            <p id=\"current-date\" class=\"current-date\">Today is: {{ current_date }}</p>\n        </div>\n\n        <div id=\"calendar-access\" class=\"calendar-access\">\n            <a id=\"calendar-link\" class=\"calendar-link\" href=\"{% url 'calendar' %}\">View Calendar</a>\n        </div>\n\n        <div id=\"events-today\" class=\"events-today\">\n            <h2 id=\"events-today-title\" class=\"events-today-title\">Events Today:</h2>\n            <ul id=\"events-list\" class=\"events-list\">\n                {% for event in events %}\n                    <li id=\"event-{{ event.id }}\" class=\"event-item\">\n                        <a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a>\n                    </li>\n                {% empty %}\n                    <li id=\"no-events\" class=\"no-events\">No events today.</li>\n                {% endfor %}\n            </ul>\n        </div>\n\n        <div id=\"add-event-section\" class=\"add-event-section\">\n            <a id=\"add-event-link\" class=\"add-event-link\" href=\"{% url 'add_event' %}\">Add New Event</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "calendar.html", "path": "calendar_project/templates/calendar.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar</title>\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"container\">\n        <h1 id=\"calendar-title\" class=\"title\">Calendar</h1>\n\n        <form id=\"month-selector\" class=\"month-selector\" method=\"get\">\n            <label for=\"year\" id=\"year-label\" class=\"year-label\">Year:</label>\n            <input type=\"number\" id=\"year\" class=\"year-input\" name=\"year\" value=\"{{ year }}\">\n\n            <label for=\"month\" id=\"month-label\" class=\"month-label\">Month:</label>\n            <select id=\"month\" class=\"month-select\" name=\"month\">\n                <option value=\"1\" {% if month == 1 %}selected{% endif %}>January</option>\n                <option value=\"2\" {% if month == 2 %}selected{% endif %}>February</option>\n                <option value=\"3\" {% if month == 3 %}selected{% endif %}>March</option>\n                <option value=\"4\" {% if month == 4 %}selected{% endif %}>April</option>\n                <option value=\"5\" {% if month == 5 %}selected{% endif %}>May</option>\n                <option value=\"6\" {% if month == 6 %}selected{% endif %}>June</option>\n                <option value=\"7\" {% if month == 7 %}selected{% endif %}>July</option>\n                <option value=\"8\" {% if month == 8 %}selected{% endif %}>August</option>\n                <option value=\"9\" {% if month == 9 %}selected{% endif %}>September</option>\n                <option value=\"10\" {% if month == 10 %}selected{% endif %}>October</option>\n                <option value=\"11\" {% if month == 11 %}selected{% endif %}>November</option>\n                <option value=\"12\" {% if month == 12 %}selected{% endif %}>December</option>\n            </select>\n\n            <button type=\"submit\" id=\"select-month-button\" class=\"select-month-button\">View</button>\n        </form>\n\n        <div id=\"events-in-month\" class=\"events-in-month\">\n            <h2 id=\"events-in-month-title\" class=\"events-in-month-title\">Events in {{ month }}/{{ year }}:</h2>\n            <ul id=\"events-list\" class=\"events-list\">\n                {% for event in events %}\n                    <li id=\"event-{{ event.id }}\" class=\"event-item\">\n                        <a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.date }} - {{ event.time }}\n                    </li>\n                {% empty %}\n                    <li id=\"no-events\" class=\"no-events\">No events in this month.</li>\n                {% endfor %}\n            </ul>\n        </div>\n        <a id=\"back-to-home\" class=\"back-to-home\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "event_details.html", "path": "calendar_project/templates/event_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Details</title>\n</head>\n<body>\n    <div id=\"event-details-container\" class=\"container\">\n        <h1 id=\"event-details-title\" class=\"title\">Event Details</h1>\n\n        <div id=\"event-info\" class=\"event-info\">\n            <h2 id=\"event-title\" class=\"event-title\">{{ event.title }}</h2>\n            <p id=\"event-description\" class=\"event-description\">{{ event.description }}</p>\n            <p id=\"event-date\" class=\"event-date\">Date: {{ event.date }}</p>\n            <p id=\"event-time\" class=\"event-time\">Time: {{ event.time }}</p>\n        </div>\n\n        <div id=\"event-actions\" class=\"event-actions\">\n            <a id=\"edit-event-link\" class=\"edit-event-link\" href=\"{% url 'edit_event' event.id %}\">Edit Event</a>\n            <form id=\"delete-event-form\" class=\"delete-event-form\" method=\"post\" action=\"{% url 'delete_event' event.id %}\">\n                {% csrf_token %}\n                <button type=\"submit\" id=\"delete-event-button\" class=\"delete-event-button\">Delete Event</button>\n            </form>\n        </div>\n\n        <a id=\"back-to-home\" class=\"back-to-home\" href=\"{% url 'home' %}\">Back to Home</a>\n        <a id=\"list-all-events\" class=\"list-all-events\" href=\"{% url 'list_events' %}\">List All Events</a>\n    </div>\n</body>\n</html>"}, {"file": "add_event.html", "path": "calendar_project/templates/add_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Event</title>\n</head>\n<body>\n    <div id=\"add-event-container\" class=\"container\">\n        <h1 id=\"add-event-title\" class=\"title\">Add New Event</h1>\n\n        <form id=\"add-event-form\" class=\"add-event-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields\" class=\"form-fields\">\n                {{ form.as_p }}\n            </div>\n            <button type=\"submit\" id=\"add-event-button\" class=\"add-event-button\">Add Event</button>\n        </form>\n\n        <a id=\"back-to-home\" class=\"back-to-home\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "calendar_project/templates/edit_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Event</title>\n</head>\n<body>\n    <div id=\"edit-event-container\" class=\"container\">\n        <h1 id=\"edit-event-title\" class=\"title\">Edit Event</h1>\n\n        <form id=\"edit-event-form\" class=\"edit-event-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields\" class=\"form-fields\">\n                {{ form.as_p }}\n            </div>\n            <button type=\"submit\" id=\"save-event-button\" class=\"save-event-button\">Save Changes</button>\n        </form>\n\n        <a id=\"back-to-event\" class=\"back-to-event\" href=\"{% url 'event_details' event.id %}\">Back to Event Details</a>\n    </div>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "calendar_project/templates/delete_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Event</title>\n</head>\n<body>\n    <div id=\"delete-event-container\" class=\"container\">\n        <h1 id=\"delete-event-title\" class=\"title\">Delete Event</h1>\n\n        <p id=\"delete-confirmation\" class=\"delete-confirmation\">Are you sure you want to delete \"{{ event.title }}\"?</p>\n\n        <form id=\"delete-event-form\" class=\"delete-event-form\" method=\"post\">\n            {% csrf_token %}\n            <button type=\"submit\" id=\"confirm-delete-button\" class=\"confirm-delete-button\">Confirm Delete</button>\n        </form>\n\n        <a id=\"cancel-delete\" class=\"cancel-delete\" href=\"{% url 'event_details' event.id %}\">Cancel</a>\n    </div>\n</body>\n</html>"}, {"file": "search_events.html", "path": "calendar_project/templates/search_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Search Events</title>\n</head>\n<body>\n    <div id=\"search-events-container\" class=\"container\">\n        <h1 id=\"search-events-title\" class=\"title\">Search Events</h1>\n\n        <form id=\"search-form\" class=\"search-form\" method=\"get\">\n            <input type=\"text\" id=\"search-query\" class=\"search-query\" name=\"q\" placeholder=\"Search events...\" value=\"{{ query }}\">\n            <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n        </form>\n\n        <div id=\"search-results\" class=\"search-results\">\n            <h2 id=\"search-results-title\" class=\"search-results-title\">Search Results:</h2>\n            <ul id=\"results-list\" class=\"results-list\">\n                {% for event in results %}\n                    <li id=\"result-{{ event.id }}\" class=\"result-item\">\n                        <a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.date }}\n                    </li>\n                {% empty %}\n                    {% if query %}\n                        <li id=\"no-results\" class=\"no-results\">No events found matching \"{{ query }}\".</li>\n                    {% else %}\n                        <li id=\"enter-search\" class=\"enter-search\">Please enter a search term.</li>\n                    {% endif %}\n                {% endfor %}\n            </ul>\n        </div>\n\n        <a id=\"back-to-home\" class=\"back-to-home\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "list_events.html", "path": "calendar_project/templates/list_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>List of Events</title>\n</head>\n<body>\n    <div id=\"list-events-container\" class=\"container\">\n        <h1 id=\"list-events-title\" class=\"title\">All Events</h1>\n\n        <ul id=\"events-list\" class=\"events-list\">\n            {% for event in events %}\n                <li id=\"event-{{ event.id }}\" class=\"event-item\">\n                    <a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.date }} - {{ event.time }}\n                </li>\n            {% empty %}\n                <li id=\"no-events\" class=\"no-events\">No events found.</li>\n            {% endfor %}\n        </ul>\n\n        <a id=\"back-to-home\" class=\"back-to-home\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "help.html", "path": "calendar_project/templates/help.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Help</title>\n</head>\n<body>\n    <div id=\"help-container\" class=\"container\">\n        <h1 id=\"help-title\" class=\"title\">Help</h1>\n\n        <div id=\"faq-section\" class=\"faq-section\">\n            <h2 id=\"faq-title\" class=\"faq-title\">FAQ</h2>\n            <p id=\"faq-content\" class=\"faq-content\">This is the FAQ section.  (Content can be added here.)</p>\n        </div>\n\n        <div id=\"user-guide-section\" class=\"user-guide-section\">\n            <h2 id=\"user-guide-title\" class=\"user-guide-title\">User Guide</h2>\n            <p id=\"user-guide-content\" class=\"user-guide-content\">This is the User Guide section. (Content can be added here.)</p>\n        </div>\n\n        <a id=\"back-to-home\" class=\"back-to-home\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "admin.py", "path": "calendar_project/calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "__init__.py", "path": "calendar_project/calendar_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "calendar_project/__init__.py", "code": ""}, {"file": "urls.py", "path": "calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Define the static files directory"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "myapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <style>\n      .home-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 100vh;\n        font-family: sans-serif;\n      }\n\n      .home-button {\n        background-color: #4CAF50;\n        border: none;\n        color: white;\n        padding: 15px 32px;\n        text-align: center;\n        text-decoration: none;\n        display: inline-block;\n        font-size: 16px;\n        margin: 4px 2px;\n        cursor: pointer;\n        border-radius: 5px;\n      }\n    </style>\n</head>\n<body>\n    <div id=\"homeContainer\" class=\"home-container\">\n        <h1>Welcome to the Home Page!</h1>\n        <a id=\"helloWorldButton\" class=\"home-button\" href=\"{% url 'helloworld' %}\">Go to HelloWorld Page</a>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n    <style>\n      .helloworld-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        justify-content: center;\n        height: 100vh;\n        font-family: sans-serif;\n      }\n    </style>\n</head>\n<body>\n    <div id=\"helloWorldContainer\" class=\"helloworld-container\">\n        <h1 id=\"helloWorldMessage\">HelloWorld!</h1>\n        <a id=\"backHomeButton\" class=\"home-button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>"}], "16": [{"file": "input_validation.py", "path": "src/input_validation.py", "code": "import pandas as pd\n\ndef CheckFileExistence(filepath):\n    try:\n        df = pd.read_excel(filepath)\n        return True\n    except FileNotFoundError:\n        return False\n\ndef ValidateHeaders(df, expected_headers):\n    return list(df.columns) == expected_headers\n\ndef ValidateTimeColumn(df, allowed_times):\n    return df['Time'].isin(allowed_times).all()\n\ndef ValidateDataIntegrity(df):\n    return not df.isnull().values.any()\n\ndef ValidateNullValue(df):\n    return df.isnull().sum().sum() == 0\n\n\ndef validate_input_file(filepath):\n    try:\n        df = pd.read_excel(filepath)\n    except FileNotFoundError:\n        return False, \"Error: 'Spring Semester Subjects.xlsx' file not found.\"\n\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n    allowed_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n\n    if not ValidateHeaders(df, expected_headers):\n        return False, f\"Error: Incorrect headers. Expected {expected_headers}, got {list(df.columns)}.\"\n    if not ValidateTimeColumn(df, allowed_times):\n        return False, f\"Error: Invalid values in 'Time' column. Allowed values are {allowed_times}.\"\n    if not ValidateDataIntegrity(df):\n        return False, \"Error: Missing data found in the file.\"\n\n    if not ValidateNullValue(df):\n        return False, \"Error: Null values found in the file.\"\n\n\n    return True, \"Input file validation successful.\""}, {"file": "data_transformation.py", "path": "src/data_transformation.py", "code": "import pandas as pd\n\ndef TransformToTwoDimensionTable(df):\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    time_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n    table_data = {weekday: {period: '' for period in time_periods} for weekday in weekdays}\n    return table_data\n\n\ndef DataMapping(df, table_data):\n    for index, row in df.iterrows():\n        weekday = row['Weekday']\n        time_period = row['Time']\n        subject_name = row['Name']\n        if weekday in table_data and time_period in table_data[weekday]:\n            table_data[weekday][time_period] = subject_name\n    return table_data\n\n\ndef transform_data(df):\n    table_data = TransformToTwoDimensionTable(df)\n    table_data = DataMapping(df, table_data)\n    return table_data\n"}, {"file": "output_creation.py", "path": "src/output_creation.py", "code": "import pandas as pd\n\ndef CreateOutputExcelFile(filename='output.xlsx'):\n    # Returns a filename, the actual creation happens in SaveTableToExcel\n    return filename\n\ndef SaveTableToExcel(table_data, filename='output.xlsx'):\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    time_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n    df = pd.DataFrame.from_dict(table_data, orient='index')\n    df = df.reindex(weekdays)\n\n    df = df[['First period', 'Second period', 'Third period', 'Fourth period']]\n    df.to_excel(filename, index_label='Weekday')\n\n\ndef create_output_file(table_data, filename='output.xlsx'):\n    output_filename = CreateOutputExcelFile(filename)\n    SaveTableToExcel(table_data, output_filename)\n    return output_filename"}, {"file": "main.py", "path": "main.py", "code": "import pandas as pd\nfrom src.input_validation import validate_input_file\nfrom src.data_transformation import transform_data\nfrom src.output_creation import create_output_file\n\nINPUT_FILE = 'Spring Semester Subjects.xlsx'\nOUTPUT_FILE = 'output.xlsx'\n\ndef main():\n    is_valid, message = validate_input_file(INPUT_FILE)\n\n    if not is_valid:\n        print(message)\n        return\n\n    try:\n        df = pd.read_excel(INPUT_FILE)\n        transformed_data = transform_data(df)\n        output_filename = create_output_file(transformed_data, OUTPUT_FILE)\n        print(f\"Successfully created {output_filename}\")\n    except Exception as e:\n        print(f\"An error occurred during data processing: {e}\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nopenpyxl"}, {"file": "Spring Semester Subjects.xlsx", "path": "data/Spring Semester Subjects.xlsx", "code": "// This is a placeholder for the actual Excel file.  In a real project,\n// you'd have the actual binary data of the Excel file here.  Since I\n// can't provide that in JSON, this placeholder indicates its location\n// and presence is expected.\n// To run this project, you would need to manually create an Excel file\n// at 'data/Spring Semester Subjects.xlsx' with the following structure:\n// Columns: '#', 'Name', 'Weekday', 'Time'\n// Example Data:\n// | # | Name       | Weekday   | Time         |\n// |---|------------|-----------|--------------|\n// | 1 | Math 101   | Monday    | First period |\n// | 2 | Physics 201| Tuesday   | Second period|\n// Make sure the data adheres to validation rules in input_validation.py"}], "18": [{"file": "main.py", "path": "/", "code": "import cmd\nimport json\nimport os\n\nclass Game(cmd.Cmd):\n    intro = 'Welcome to the Text Adventure Game! Type help or ? to list commands.\\n'\n    prompt = '> '\n    file = None\n\n    def __init__(self):# Initialize game state\n        super().__init__()\n        self.game_data = self.load_game_data('game_data.json')\n        self.current_room = 'start'\n        self.inventory = []\n        self.game_over = False\n        self.setup_main_menu()\n\n    def load_game_data(self, filename):\n        try:\n            with open(filename, 'r') as f:\n                return json.load(f)\n        except FileNotFoundError:\n            print(f\"Error: {filename} not found. Exiting.\")\n            exit()\n        except json.JSONDecodeError:\n            print(f\"Error: Invalid JSON in {filename}. Exiting.\")\n            exit()\n\n\n    def setup_main_menu(self):\n        # Display Main Menu\n        print(\"\\n--- Main Menu ---\")\n        print(\"1. Start Game\")\n        print(\"2. Instructions\")\n        print(\"3. Exit Game\")\n\n        while True:\n            choice = input(\"> \")\n            if choice == '1':\n                print(\"Starting game...\\n\")\n                self.look_around()\n                break\n            elif choice == '2':\n                self.do_instructions('')\n                self.setup_main_menu()\n                break\n            elif choice == '3':\n                self.do_exit('')\n                break\n            else:\n                print(\"Invalid choice. Please select 1, 2, or 3.\")\n\n    def look_around(self):\n        room = self.game_data['rooms'][self.current_room]\n        print(room['description'])\n\n        if 'item' in room and room['item'] not in self.inventory:\n            print(f\"You found a {room['item']}!\")\n            self.inventory.append(room['item'])\n\n\n    def do_move(self, arg):\n        'Move to a specified room: move <room_name>'\n        room = self.game_data['rooms'][self.current_room]\n        if arg in room['exits']:\n            self.current_room = room['exits'][arg]\n            self.look_around()\n        else:\n            print(\"You can't go that way.\")\n\n    def do_inventory(self, arg):\n        'Check your inventory: inventory'\n        if self.inventory:\n            print(\"You are carrying:\")\n            for item in self.inventory:\n                print(f\"- {item}\")\n        else:\n            print(\"You are not carrying anything.\")\n\n    def do_instructions(self, arg):\n         print(\"\\n--- Instructions ---\")\n         print(\"This is a text-based adventure game.\")\n         print(\"You can interact with the game by typing commands.\")\n         print(\"Available commands: move, inventory, look, exit, help.\")\n         print(\"Use 'move' to move between rooms (e.g., move north).\")\n         print(\"Use 'inventory' to check your items.\")\n         print(\"Use 'look' to examine your current surroundings.\")\n         print(\"Use 'exit' to quit the game.\")\n         print(\"Use 'help' to see available commands.\")\n         print(\"---------------------\\n\")\n\n\n    def do_look(self, arg):\n        'Look around the current room: look'\n        self.look_around()\n\n    def do_exit(self, arg):\n        'Exit the game: exit'\n        print(\"Thank you for playing!\")\n        return True\n\n    def default(self, arg):\n        print(\"I do not understand that command. Type 'help' for available commands.\")\n\n    def postloop(self):\n        print('Game over. Goodbye!')\n\nif __name__ == '__main__':\n    Game().cmdloop()\n"}, {"file": "game_data.json", "path": "/", "code": "{\n  \"rooms\": {\n    \"start\": {\n      \"description\": \"You are standing in a dimly lit foyer. A grand staircase leads upwards, and a hallway stretches to the north.\",\n      \"exits\": {\n        \"north\": \"hallway\",\n        \"upstairs\": \"landing\"\n      },\n      \"item\": \"key\"\n    },\n    \"hallway\": {\n      \"description\": \"You are in a long, dark hallway. There are doors on either side.\",\n      \"exits\": {\n        \"south\": \"start\",\n        \"east\": \"kitchen\",\n        \"west\": \"library\"\n      }\n    },\n    \"kitchen\": {\n      \"description\": \"You are in a messy kitchen. Dirty dishes are piled in the sink.\",\n      \"exits\": {\n        \"west\": \"hallway\"\n      }\n    },\n    \"library\": {\n      \"description\": \"You are in a grand library. Bookshelves line the walls, filled with ancient tomes.\",\n      \"exits\": {\n        \"east\": \"hallway\"\n      }\n    },\n    \"landing\": {\n      \"description\": \"You are on the upstairs landing. A bedroom door is slightly ajar.\",\n      \"exits\": {\n        \"downstairs\": \"start\",\n        \"north\": \"bedroom\"\n      }\n    },\n    \"bedroom\": {\n      \"description\": \"You are in a dusty bedroom. A single bed sits in the corner.\",\n      \"exits\": {\n        \"south\": \"landing\"\n      }\n    }\n  }\n}\n"}], "19": [{"file": "death_analysis.py", "path": "src/death_analysis.py", "code": "# death_analysis.py\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\nclass DeathAnalysis:\n    def __init__(self, deathlist_path):\n        self.deathlist_path = deathlist_path\n        self.death_data = None\n\n    def ReadDeathlistData(self):\n        try:\n            self.death_data = pd.read_csv(self.deathlist_path)\n            print(\"Deathlist data loaded successfully.\")\n        except FileNotFoundError:\n            print(f\"Error: File not found at {self.deathlist_path}\")\n            self.death_data = None\n        except Exception as e:\n            print(f\"Error loading data: {e}\")\n            self.death_data = None\n\n    def ValidateDataset(self):\n        if self.death_data is None:\n            print(\"Error: No data loaded. Please load data first.\")\n            return False\n\n        required_columns = ['date', 'cause_of_death'] # Example columns, adjust as needed\n        if not all(col in self.death_data.columns for col in required_columns):\n            print(\"Error: Missing required columns in dataset.\")\n            return False\n\n        print(\"Dataset validation successful.\")\n        return True\n\n    def ProcessData(self):\n        if self.death_data is None or not self.ValidateDataset():\n            return\n\n        # Assuming 'date' column is in string format, convert to datetime\n        try:\n            self.death_data['date'] = pd.to_datetime(self.death_data['date'])\n            self.death_data['week'] = self.death_data['date'].dt.isocalendar().week  # Extract week number\n            self.death_data['year'] = self.death_data['date'].dt.isocalendar().year\n            print(\"Data processing complete.\")\n        except Exception as e:\n            print(f\"Error processing data: {e}\")\n\n    def CalculateWeeklyDeaths(self):\n        if self.death_data is None:\n            print(\"Error: No data loaded. Please load data first.\")\n            return None\n\n        try:\n            weekly_deaths = self.death_data.groupby(['year', 'week']).size().reset_index(name='deaths')\n            print(\"Weekly deaths calculated.\")\n            return weekly_deaths\n        except Exception as e:\n            print(f\"Error calculating weekly deaths: {e}\")\n            return None\n\n    def GenerateHistogram(self, weekly_deaths):\n        if weekly_deaths is None:\n            print(\"Error: No weekly deaths data available.\")\n            return\n\n        try:\n            plt.figure(figsize=(12, 6))\n            plt.hist(weekly_deaths['deaths'], bins=20, color='skyblue', edgecolor='black')\n            plt.title('Distribution of Weekly Deaths')\n            plt.xlabel('Number of Deaths')\n            plt.ylabel('Frequency')\n            plt.grid(axis='y', alpha=0.75)\n            plt.tight_layout()\n            plt.savefig('weekly_deaths_histogram.png') # Save to a file\n            print(\"Histogram generated and saved as weekly_deaths_histogram.png\")\n        except Exception as e:\n            print(f\"Error generating histogram: {e}\")\n\n    def OutputHistogram(self):\n         # Dummy Implementation: prints a message, histogram is saved to file\n        print(\"Histogram displayed/saved to file. See weekly_deaths_histogram.png\")\n\n\n# Example Usage (Can be in a separate script, like main.py)\nif __name__ == \"__main__\":\n    analysis = DeathAnalysis('Deathlist.csv') # Path to your CSV\n    analysis.ReadDeathlistData()\n    if analysis.ValidateDataset():\n        analysis.ProcessData()\n        weekly_deaths = analysis.CalculateWeeklyDeaths()\n        if weekly_deaths is not None:\n            analysis.GenerateHistogram(weekly_deaths)\n            analysis.OutputHistogram()\n"}, {"file": "main.py", "path": "src/main.py", "code": "# main.py\nfrom death_analysis import DeathAnalysis\n\nif __name__ == \"__main__\":\n    analysis = DeathAnalysis('Deathlist.csv') # Path to your CSV, change if needed.\n    analysis.ReadDeathlistData()\n    if analysis.ValidateDataset():\n        analysis.ProcessData()\n        weekly_deaths = analysis.CalculateWeeklyDeaths()\n        if weekly_deaths is not None:\n            analysis.GenerateHistogram(weekly_deaths)\n            analysis.OutputHistogram()"}, {"file": "Deathlist.csv", "path": "data/Deathlist.csv", "code": "date,cause_of_death\n2023-01-01,Heart Disease\n2023-01-05,Accident\n2023-01-10,Cancer\n2023-01-15,Heart Disease\n2023-01-20,Stroke\n2023-01-25,Accident\n2023-01-30,Cancer\n2023-02-03,Heart Disease\n2023-02-07,Accident\n2023-02-12,Cancer\n2023-02-17,Heart Disease\n2023-02-22,Stroke\n2023-02-27,Accident\n2023-03-04,Cancer\n2023-03-09,Heart Disease\n2023-03-14,Accident\n2023-03-19,Cancer\n2023-03-24,Heart Disease\n2023-03-29,Stroke"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nmatplotlib"}]}