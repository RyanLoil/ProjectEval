{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Form definitions\nclass BMICalculatorForm(forms.Form):\n    \"\"\"\n    A form to calculate BMI using weight and height.\n    \"\"\"\n    weight = forms.FloatField(label='Weight (kg)')\n    height = forms.FloatField(label='Height (m)')"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/<float:bmi>/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .forms import BMICalculatorForm\n\n# Category thresholds\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\n# BMI interpretation descriptions\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\"\n}\n\ndef homepage(request):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    return render(request, 'example_app/homepage.html')\n\n\ndef bmi_calculator(request):\n    \"\"\"\n    Calculate BMI based on user input.\n    \"\"\"\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height']\n            if height <= 0:\n                bmi = -1\n            else:\n                bmi = weight / (height ** 2)\n            return redirect('advice', bmi=bmi)\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'example_app/bmi_calculator.html', {'form': form})\n\n\ndef advice(request, bmi):\n    \"\"\"\n    Provide health advice based on BMI.\n    \"\"\"\n    category = None\n    interpretation = None\n    \n    if bmi == -1: #Invalid height\n        category = 'Invalid height'\n        interpretation = bmi_interpretation['Invalid height']\n    else:\n        for cat, threshold in bmi_category.items():\n            if bmi < threshold:\n                category = cat\n                interpretation = bmi_interpretation[cat]\n                break\n        \n    return render(request, 'example_app/advice.html', {'bmi': bmi, 'category': category, 'interpretation': interpretation})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Advice</title>\n</head>\n<body>\n    <div id=\"advice-container\" class=\"container\">\n        <h1 id=\"advice-title\" class=\"title\">BMI Advice</h1>\n        {% if bmi == -1 %}\n            <p id=\"bmi-value\" class=\"bmi-value\">Invalid height.</p>\n        {% else %}\n            <p id=\"bmi-value\" class=\"bmi-value\">Your BMI is: {{ bmi|floatformat:2 }}</p>\n            <p id=\"bmi-category\" class=\"bmi-category\">Category: {{ category }}</p>\n            <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">Interpretation: {{ interpretation }}</p>\n        {% endif %}\n        \n        <a href=\"{% url 'homepage' %}\" id=\"back-link\" class=\"back-link\">Back to Homepage</a>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1 id=\"bmi-calculator-title\" class=\"title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"id_weight\" class=\"form-label\">Weight (kg):</label>\n                <input type=\"number\" name=\"weight\" step=\"0.01\" required id=\"id_weight\" class=\"form-input\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_height\" class=\"form-label\">Height (m):</label>\n                <input type=\"number\" name=\"height\" step=\"0.01\" required id=\"id_height\" class=\"form-input\">\n            </div>\n            <button type=\"submit\" id=\"calculate-button\" class=\"calculate-button\">Calculate</button>\n        </form>\n        <a href=\"{% url 'homepage' %}\" id=\"back-link\" class=\"back-link\">Back to Homepage</a>\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Homepage</title>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"container\">\n        <h1 id=\"homepage-title\" class=\"title\">Welcome to the BMI Calculator</h1>\n        <p id=\"homepage-description\" class=\"description\">This is a simple BMI calculator to help you understand your Body Mass Index.</p>\n        <a href=\"{% url 'bmi_calculator' %}\" id=\"calculator-link\" class=\"calculator-link\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n# Project URL configurations\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    '''\n    The form for user to use the converter\n    '''\n    source_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, label='Source Currency')\n    target_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, label='Target Currency')\n    amount = forms.DecimalField(label='Amount', initial=1.00)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    \"\"\"\n    Model for currency rate record\n    \"\"\"\n\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=10, decimal_places=6, verbose_name='Rate')\n    timestamp = models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency} at {self.rate}'\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\n\nfrom django.shortcuts import render\nfrom django.views.generic import TemplateView\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated(source_currency, target_currency):\n    \"\"\"\n    Warning:\n    This function is a simulation of currency rate.\n    In the production environment, this function should be replaced with an api from professional currency exchanging market website.\n    \"\"\"\n    # random rate\n    USD_BASE = {\n        'USD': 1.00,\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'JPY': 110.00,\n        'AUD': 1.35,\n        'CNY': 7.00,\n        'CAD': 1.25,\n        'CHF': 0.92,\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\ndef get_conversion_rate(source_currency, target_currency):\n    \"\"\"\n    A function that used for getting conversion rate.\n    \"\"\"\n    # In a real application, you would fetch this from a database or external API\n    # This is a placeholder\n    return get_updated(source_currency, target_currency)\n\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        \"\"\"\n        A function for processing user's get method.\n        \"\"\"\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        \"\"\"\n        A function for processing user's post method.\n        \"\"\"\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            amount = form.cleaned_data['amount']\n            rate = get_conversion_rate(source_currency, target_currency)\n            converted_amount = amount * rate\n\n            #Save the conversion rate to the database.\n            CurrencyConvertRateModel.objects.create(\n                source_currency=source_currency,\n                target_currency=target_currency,\n                rate=rate\n            )\n\n            return render(request, self.template_name, {\n                'form': form,\n                'source_currency': source_currency,\n                'target_currency': target_currency,\n                'amount': amount,\n                'converted_amount': converted_amount,\n                'rate': rate,\n            })\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        \"\"\"\n        A function for processing user's get method.\n        \"\"\"\n        return render(request, self.template_name)\n\n    @staticmethod\n    def plot_chart(source_currency, target_currency):\n        \"\"\"\n        A static method for plotting the chart of currency exchange rates tendency.\n        \"\"\"\n        pass\n\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-04 03:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=128, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=128, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=16, max_digits=32, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"trends-heading\" class=\"mt-4 mb-4\">Exchange Rate Trends</h1>\n        <p id=\"trends-description\" class=\"lead\">This page will display exchange rate trends in the future.</p>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-heading\" class=\"mt-4 mb-4\">Currency Converter</h1>\n        <form id=\"currency-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"source_currency\">Source Currency:</label>\n                {{ form.source_currency }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"target_currency\">Target Currency:</label>\n                {{ form.target_currency }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"amount\">Amount:</label>\n                {{ form.amount }}\n            </div>\n            <button id=\"convert-button\" type=\"submit\" class=\"btn btn-primary\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n            <div id=\"result\" class=\"mt-3\">\n                <p>Converted Amount: {{ converted_amount }} {{ target_currency }}</p>\n                <p>Exchange Rate: {{ rate }}</p>\n            </div>\n        {% endif %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView, InfoView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', InfoView, name='info'),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "info.html", "path": "example_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Info</title>\n</head>\n<body>\n    <h1>More information will be added here later</h1>\n</body>\n</html>"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView.as_view(), name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return \"Please select at least one character type.\"\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n        return render(request, 'generator.html', {'password': password, 'length': length, 'uppercase': include_uppercase, 'lowercase': include_lowercase, 'numbers': include_numbers, 'symbols': include_symbols})\n    else:\n        return render(request, 'generator.html')\n\n\nfrom django.views import View\n\nclass HomePageView(View):\n    def get(self, request):\n        return render(request, 'home.html')\n\nclass AboutUsPageView(View):\n    def get(self, request):\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n.container { width: 80%; margin: 0 auto; padding: 20px; }\n.form-group { margin-bottom: 10px; }\nlabel { display: block; margin-bottom: 5px; }\ninput[type=\"number\"] { width: 50px; }\n.password-display { margin-top: 20px; font-size: 1.2em; }\n.copy-button { cursor: pointer; }\n#copy-message { display: none; color: green; margin-top: 10px; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password-text').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Copy to clipboard failed.';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"about-us-container\" class=\"container\">\n        <h1 id=\"about-us-title\">About Us</h1>\n        <p id=\"about-us-content\">This is a simple password generator application created with Django.</p>\n        <a id=\"home-link\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"generator-container\" class=\"container\">\n        <h1 id=\"generator-title\">Password Generator</h1>\n        <form id=\"password-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"length\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" min=\"8\" max=\"32\" value=\"{{ length|default:12 }}\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"uppercase\">Include Uppercase:</label>\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" {% if uppercase %}checked{% endif %}>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"lowercase\">Include Lowercase:</label>\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" {% if lowercase %}checked{% endif %}>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"numbers\">Include Numbers:</label>\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" {% if numbers %}checked{% endif %}>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"symbols\">Include Symbols:</label>\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" {% if symbols %}checked{% endif %}>\n            </div>\n            <button type=\"submit\" id=\"generate-button\">Generate Password</button>\n        </form>\n\n        {% if password %}\n            <div id=\"password-display\" class=\"password-display\">\n                <span id=\"password-text\">{{ password }}</span>\n                <button id=\"copy-button\" class=\"copy-button\" onclick=\"copyToClipboard()\">Copy</button>\n                <div id=\"copy-message\" style=\"display:none;\"></div>\n            </div>\n        {% endif %}\n        <a id=\"home-link\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n    <script src=\"/static/js/scripts.js\"></script>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\">Password Generator</h1>\n        <p id=\"home-description\">Generate strong and secure passwords.</p>\n        <a id=\"generator-link\" href=\"{% url 'generator' %}\">Generate Password</a>\n        <a id=\"about-us-link\" href=\"{% url 'about_us' %}\">About Us</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"example_app/static\"),\n]\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    \"\"\"\n    Configuration class for the QR app.\n    \"\"\"\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse, FileResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nfrom qrcode.console_scripts import error_correction\nimport qrcode\nimport io\nimport base64\nfrom django.conf import settings\nimport os\n\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'qr_app/home.html')\n\ndef hex_to_rgb(hex_color):\n    \"\"\"\n    Convert hex color to RGB tuple.\n    \"\"\"\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))\n\n\ndef generate_qr_code(request):\n    \"\"\"\n    Generate a QR code from provided data.\n    \"\"\"\n    if request.method == 'POST':\n        data = request.POST.get('qr_data')\n        fg_color = request.POST.get('fg_color', '#000000')  # Default black\n        bg_color = request.POST.get('bg_color', '#FFFFFF')  # Default white\n        box_size = int(request.POST.get('box_size', 10))\n        border = int(request.POST.get('border', 4))\n        error_correction_level = request.POST.get('error_correction', 'L')\n\n        error_correction_mapping = {\n            'L': qrcode.constants.ERROR_CORRECT_L,\n            'M': qrcode.constants.ERROR_CORRECT_M,\n            'Q': qrcode.constants.ERROR_CORRECT_Q,\n            'H': qrcode.constants.ERROR_CORRECT_H,\n        }\n        error_correction = error_correction_mapping[error_correction_level]\n\n\n        try:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=error_correction,\n                box_size=box_size,\n                border=border,\n            )\n            qr.add_data(data)\n            qr.make(fit=True)\n\n            # Convert hex to RGB\n            fg_color_rgb = hex_to_rgb(fg_color)\n            bg_color_rgb = hex_to_rgb(bg_color)\n\n            img = qr.make_image(fill_color=fg_color_rgb, back_color=bg_color_rgb)\n\n            buffer = io.BytesIO()\n            img.save(buffer, format='PNG')\n            img_data = base64.b64encode(buffer.getvalue()).decode('utf-8')\n\n            request.session['qr_code_image'] = img_data # Store QR code in session\n            request.session['qr_code_data'] = data\n            return render(request, 'qr_app/generate.html', {'qr_code': img_data, 'qr_data': data})\n        except Exception as e:\n            return render(request, 'qr_app/generate.html', {'error': str(e)})\n\n    return render(request, 'qr_app/generate.html')\n\ndef download_qr_code(request):\n    \"\"\"\n    Allow users to download the generated QR code.\n    \"\"\"\n    qr_code_image = request.session.get('qr_code_image')\n    qr_code_data = request.session.get('qr_code_data')\n\n    if not qr_code_image:\n        return HttpResponse(\"No QR code generated.\")\n\n    image_data = base64.b64decode(qr_code_image)\n    response = HttpResponse(image_data, content_type='image/png')\n    response['Content-Disposition'] = f'attachment; filename=\"qr_code_{qr_code_data}.png\"'\n\n    return response\n\n\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"about-title\" class=\"mt-5\">About Our QR Code Generator</h1>\n        <p id=\"about-description\">Welcome to our free online QR Code Generator! We provide a simple and efficient way to create custom QR codes for various purposes.</p>\n\n        <section id=\"faq\" class=\"mt-4\">\n            <h2>Frequently Asked Questions</h2>\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <a class=\"card-link\" data-toggle=\"collapse\" href=\"#faq1\">What is a QR code?</a>\n                </div>\n                <div id=\"faq1\" class=\"collapse show\" data-parent=\"#faq\">\n                    <div class=\"card-body\">\n                        A QR code (Quick Response code) is a type of matrix barcode that can be read by smartphones and QR code readers. They are commonly used to store URLs, contact information, and other data.\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"card\">\n                <div class=\"card-header\">\n                    <a class=\"collapsed card-link\" data-toggle=\"collapse\" href=\"#faq2\">How do I generate a QR code?</a>\n                </div>\n                <div id=\"faq2\" class=\"collapse\" data-parent=\"#faq\">\n                    <div class=\"card-body\">\n                        Simply enter the text or URL you want to encode, customize the appearance of the QR code, and click the 'Generate' button.\n                    </div>\n                </div>\n            </div>\n        </section>\n\n        <section id=\"policies\" class=\"mt-4\">\n            <h2>Our Policies</h2>\n            <p id=\"privacy-policy\"><strong>Privacy Policy:</strong> We do not store any of the data you enter into the QR code generator. Your data remains private and secure.</p>\n            <p id=\"terms-of-service\"><strong>Terms of Service:</strong> By using our QR Code Generator, you agree to use it for lawful purposes only.</p>\n        </section>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        .qr-code-container {\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        .qr-code-image {\n            max-width: 300px;\n            max-height: 300px;\n            border: 1px solid #ddd;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"generate-title\" class=\"mt-5\">QR Code Generator</h1>\n        <form id=\"qr-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"qr_data\">Data to encode:</label>\n                <input type=\"text\" class=\"form-control\" id=\"qr_data\" name=\"qr_data\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"fg_color\">Foreground Color:</label>\n                <input type=\"color\" class=\"form-control\" id=\"fg_color\" name=\"fg_color\" value=\"#000000\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"bg_color\">Background Color:</label>\n                <input type=\"color\" class=\"form-control\" id=\"bg_color\" name=\"bg_color\" value=\"#FFFFFF\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"box_size\">Box Size:</label>\n                <input type=\"number\" class=\"form-control\" id=\"box_size\" name=\"box_size\" value=\"10\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"border\">Border Size:</label>\n                <input type=\"number\" class=\"form-control\" id=\"border\" name=\"border\" value=\"4\">\n            </div>\n\n             <div class=\"form-group\">\n                <label for=\"error_correction\">Error Correction Level:</label>\n                <select class=\"form-control\" id=\"error_correction\" name=\"error_correction\">\n                    <option value=\"L\">L (Low)</option>\n                    <option value=\"M\">M (Medium)</option>\n                    <option value=\"Q\">Q (Quartile)</option>\n                    <option value=\"H\">H (High)</option>\n                </select>\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary\">Generate QR Code</button>\n        </form>\n\n        {% if qr_code %}\n        <div id=\"qr-code-display\" class=\"qr-code-container\">\n            <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\" class=\"qr-code-image\">\n            <a href=\"{% url 'download_qr_code' %}\" class=\"btn btn-success\">Download QR Code</a>\n        </div>\n        {% endif %}\n\n        {% if error %}\n        <div class=\"alert alert-danger mt-3\" role=\"alert\">\n            {{ error }}\n        </div>\n        {% endif %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"mt-5\">Welcome to QR Code Generator!</h1>\n        <p id=\"home-description\">Create your custom QR codes quickly and easily.</p>\n\n        <div class=\"row mt-4\">\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Generate QR Code</h5>\n                        <p class=\"card-text\">Create a new QR code with custom data and settings.</p>\n                        <a id=\"generate-link\" href=\"{% url 'generate_qr_code' %}\" class=\"btn btn-primary\">Generate Now</a>\n                    </div>\n                </div>\n            </div>\n\n            <div class=\"col-md-6\">\n                <div class=\"card\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">About Us</h5>\n                        <p class=\"card-text\">Learn more about our QR code generator and our policies.</p>\n                        <a id=\"about-link\" href=\"{% url 'about' %}\" class=\"btn btn-secondary\">Learn More</a>\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\n\nALLOWED_HOSTS = []\n\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\n\nTIME_ZONE = 'UTC'\n\n\nUSE_I18N = True\n\n\nUSE_L10N = True\n\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = '/static/'\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\nSESSION_CACHE_ALIAS = 'default'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    \"\"\"\n    Configuration for the Example App.\n    \"\"\"\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n# Home view\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\n# Convert view\ndef convert(request):\n    \"\"\"\n    Handle Markdown to HTML conversion.\n    \"\"\"\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_output': html_output})\n    return render(request, 'convert.html')\n\n# About view\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About the Markdown Converter</h1>\n        <p id=\"about-description\" class=\"description\">\n            This is a simple web application that allows you to convert Markdown text to HTML.\n        </p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"container\">\n        <h1 id=\"convert-title\" class=\"title\">Markdown to HTML Converter</h1>\n        <form id=\"convert-form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" class=\"markdown-input\" name=\"markdown_text\" rows=\"10\" cols=\"50\"></textarea>\n            <br>\n            <button id=\"convert-button\" class=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n        {% if html_output %}\n            <div id=\"html-output-container\" class=\"output-container\">\n                <h2 id=\"html-output-title\" class=\"output-title\">HTML Output:</h2>\n                <div id=\"html-output\" class=\"html-output\">{{ html_output|safe }}</div>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Markdown Converter</h1>\n        <p id=\"home-description\" class=\"description\">Convert your Markdown text to HTML easily!</p>\n        <nav id=\"home-navigation\" class=\"navigation\">\n            <a id=\"convert-link\" class=\"nav-link\" href=\"/convert/\">Convert</a> |\n            <a id=\"about-link\" class=\"nav-link\" href=\"/about/\">About</a>\n        </nav>\n    </div>\n</body>\n</html>\n"}, {"file": null, "path": "media", "code": ""}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import include, path\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    \"\"\"\n    Todo List model\n    \"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoList.\n        \"\"\"\n        return self.title\n\n\nclass TodoItem(models.Model):\n    \"\"\"\n    Todo Item model\n    \"\"\"\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoItem.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item,\n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.generic import TemplateView, ListView\nfrom .models import TodoList, TodoItem\nfrom django.urls import reverse\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        return context\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n    context_object_name = 'todo_lists'\n\n    def get_queryset(self):\n        return TodoList.objects.all()\n\n    def post(self, request, *args, **kwargs):\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoList.objects.create(title=title, description=description)\n        return redirect('todo_list')\n\n\ndef delete_todo(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    todo_list.delete()\n    return redirect('todo_list')\n\n\ndef edit_todo(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        todo_list.title = request.POST.get('title')\n        todo_list.description = request.POST.get('description')\n        todo_list.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todo_list': todo_list})\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n    context_object_name = 'todo_items'\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        return context\n\n    def post(self, request, *args, **kwargs):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        TodoItem.objects.create(todolist=self.todolist, title=title, description=description)\n        return redirect(reverse('view_todo_item', kwargs={'pk': self.todolist.pk}))\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todo_item.todolist.pk\n    todo_item.delete()\n    return redirect(reverse('view_todo_item', kwargs={'pk': todolist_pk}))\n\n\ndef edit_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        todo_item.title = request.POST.get('title')\n        todo_item.description = request.POST.get('description')\n        todo_item.save()\n        return redirect(reverse('view_todo_item', kwargs={'pk': todo_item.todolist.pk}))\n    return render(request, 'edit_todo_item.html', {'todo_item': todo_item})\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect(reverse('view_todo_item', kwargs={'pk': todo_item.todolist.pk}))\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        total_tasks = todo_items.count()\n        completed_tasks = todo_items.filter(completed=True).count()\n        incomplete_tasks = total_tasks - completed_tasks\n\n        context['total_tasks'] = total_tasks\n        context['completed_tasks'] = completed_tasks\n        context['incomplete_tasks'] = incomplete_tasks\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"analysis-container\" class=\"container\">\n        <h1 id=\"analysis-title\" class=\"title\">Task Analysis</h1>\n        <div id=\"chart-container\" class=\"chart-container\">\n            <canvas id=\"taskCompletionChart\"></canvas>\n        </div>\n        <p id=\"total-tasks\" class=\"total-tasks\">Total Tasks: {{ total_tasks }}</p>\n        <p id=\"completed-tasks\" class=\"completed-tasks\">Completed Tasks: {{ completed_tasks }}</p>\n        <p id=\"incomplete-tasks\" class=\"incomplete-tasks\">Incomplete Tasks: {{ incomplete_tasks }}</p>\n        <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Return Home</a>\n    </div>\n\n    <script>\n        const ctx = document.getElementById('taskCompletionChart').getContext('2d');\n        const taskCompletionChart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    label: 'Task Completion',\n                    data: [{{ completed_tasks }}, {{ incomplete_tasks }}],\n                    backgroundColor: [\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(255, 99, 132, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(255, 99, 132, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'top',\n                    },\n                    title: {\n                        display: true,\n                        text: 'Task Completion Distribution'\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <div id=\"edit-todo-container\" class=\"container\">\n        <h1 id=\"edit-todo-title\" class=\"title\">Edit Todo List</h1>\n        <form id=\"edit-todo-form\" class=\"edit-todo-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"title\" id=\"title-label\" class=\"form-label\">Title:</label>\n            <input type=\"text\" id=\"title\" class=\"form-input\" name=\"title\" value=\"{{ todo_list.title }}\"><br><br>\n            <label for=\"description\" id=\"description-label\" class=\"form-label\">Description:</label>\n            <textarea id=\"description\" class=\"form-textarea\" name=\"description\">{{ todo_list.description }}</textarea><br><br>\n            <button type=\"submit\" id=\"save-button\" class=\"save-button\">Save</button>\n            <a href=\"{% url 'todo_list' %}\" id=\"cancel-link\" class=\"cancel-link\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <div id=\"edit-todo-item-container\" class=\"container\">\n        <h1 id=\"edit-todo-item-title\" class=\"title\">Edit Todo Item</h1>\n        <form id=\"edit-todo-item-form\" class=\"edit-todo-item-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"title\" id=\"title-label\" class=\"form-label\">Title:</label>\n            <input type=\"text\" id=\"title\" class=\"form-input\" name=\"title\" value=\"{{ todo_item.title }}\"><br><br>\n            <label for=\"description\" id=\"description-label\" class=\"form-label\">Description:</label>\n            <textarea id=\"description\" class=\"form-textarea\" name=\"description\">{{ todo_item.description }}</textarea><br><br>\n            <button type=\"submit\" id=\"save-button\" class=\"save-button\">Save</button>\n            <a href=\"{% url 'view_todo_item' pk=todo_item.todolist.pk %}\" id=\"cancel-link\" class=\"cancel-link\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"welcome-message\" class=\"welcome-message\">Welcome to the Todo App!</h1>\n        <nav id=\"navigation\" class=\"navigation\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li id=\"todo-list-item\" class=\"nav-item\">\n                    <a href=\"{% url 'todo_list' %}\" id=\"todo-list-link\" class=\"nav-link\">View Todo Lists</a>\n                </li>\n                <li id=\"analysis-item\" class=\"nav-item\">\n                    <a href=\"{% url 'analysis' %}\" id=\"analysis-link\" class=\"nav-link\">Task Analysis</a>\n                </li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <div id=\"tasks-container\" class=\"container\">\n        <h1 id=\"todo-list-title\" class=\"title\">Todo List: {{ todolist.title }}</h1>\n        <ul id=\"task-list\" class=\"task-list\">\n            {% for item in todo_items %}\n                <li id=\"task-item-{{ item.pk }}\" class=\"task-item {% if item.completed %}completed{% endif %}\">\n                    <span id=\"task-title-{{ item.pk }}\" class=\"task-title\">{{ item.title }}</span>\n                    <div class=\"task-actions\">\n                        <a href=\"{% url 'edit_todo_item' pk=item.pk %}\" id=\"edit-task-{{ item.pk }}\" class=\"edit-task\">Edit</a>\n                        <a href=\"{% url 'delete_todo_item' pk=item.pk %}\" id=\"delete-task-{{ item.pk }}\" class=\"delete-task\">Delete</a>\n                        <a href=\"{% url 'complete_todo_item' pk=item.pk %}\" id=\"complete-task-{{ item.pk }}\" class=\"complete-task\">{% if item.completed %}Undo{% else %}Complete{% endif %}</a>\n                    </div>\n                </li>\n            {% endfor %}\n        </ul>\n        <form id=\"add-task-form\" class=\"add-task-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"title\" id=\"new-task-title-label\" class=\"form-label\">New Task:</label>\n            <input type=\"text\" id=\"title\" class=\"form-input\" name=\"title\"><br><br>\n            <label for=\"description\" id=\"new-task-description-label\" class=\"form-label\">Description:</label>\n            <textarea id=\"description\" class=\"form-textarea\" name=\"description\"></textarea><br><br>\n            <button type=\"submit\" id=\"add-task-button\" class=\"add-task-button\">Add Task</button>\n        </form>\n        <a href=\"{% url 'todo_list' %}\" id=\"back-to-lists\" class=\"back-to-lists\">Back to Todo Lists</a>\n    </div>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n</head>\n<body>\n    <div id=\"todo-list-container\" class=\"container\">\n        <h1 id=\"todo-list-title\" class=\"title\">Todo Lists</h1>\n        <ul id=\"todo-lists\" class=\"todo-lists\">\n            {% for todo_list in todo_lists %}\n                <li id=\"todo-list-item-{{ todo_list.pk }}\" class=\"todo-list-item {% if todo_list.completed %}completed{% endif %}\">\n                    <a href=\"{% url 'view_todo_item' pk=todo_list.pk %}\" id=\"todo-list-link-{{ todo_list.pk }}\" class=\"todo-list-link\">{{ todo_list.title }}</a>\n                    <div class=\"todo-list-actions\">\n                        <a href=\"{% url 'edit_todo' pk=todo_list.pk %}\" id=\"edit-todo-list-{{ todo_list.pk }}\" class=\"edit-todo-list\">Edit</a>\n                        <a href=\"{% url 'delete_todo' pk=todo_list.pk %}\" id=\"delete-todo-list-{{ todo_list.pk }}\" class=\"delete-todo-list\">Delete</a>\n                    </div>\n                </li>\n            {% endfor %}\n        </ul>\n        <form id=\"add-todo-list-form\" class=\"add-todo-list-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"title\" id=\"new-todo-title-label\" class=\"form-label\">New Todo List:</label>\n            <input type=\"text\" id=\"title\" class=\"form-input\" name=\"title\"><br><br>\n            <label for=\"description\" id=\"new-todo-description-label\" class=\"form-label\">Description:</label>\n            <textarea id=\"description\" class=\"form-textarea\" name=\"description\"></textarea><br><br>\n            <button type=\"submit\" id=\"add-todo-list-button\" class=\"add-todo-list-button\">Add List</button>\n        </form>\n        <a href=\"{% url 'home' %}\" id=\"back-to-home\" class=\"back-to-home\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}], "8": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main function to execute Django command line utilities.\n    \"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Ensure it's installed and available on PYTHONPATH.\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\n\nclass EventForm(forms.ModelForm):\n    \"\"\"\n    Form for the Event model with custom DateTime field.\n    \"\"\"\n\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']\n        widgets = {\n            'datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\n\nclass Event(models.Model):\n    \"\"\"\n    Model representing an event with title, description, and dates.\n    \"\"\"\n\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        String representation of the event.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AddEventView, EditEventView, DeleteEventView, ListEventsView, EventDetailsView, HelpView\n\n\nurlpatterns = [\n    \"\"\"\n    URL patterns for the application.\n    \"\"\"\n    path('', HomePageView.as_view(), name='home'),\n    path('calendar/add-event/', AddEventView.as_view(), name='add_event'),\n    path('calendar/edit-event/<int:event_id>/', EditEventView.as_view(), name='edit_event'),\n    path('calendar/delete-event/<int:event_id>/', DeleteEventView.as_view(), name='delete_event'),\n    path('calendar/view-events/', ListEventsView.as_view(), name='view_events'),\n    path('calendar/view-event-details/<int:event_id>/', EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', HelpView.as_view(), name='faq'),\n    path('help/user-guide/', HelpView.as_view(), name='user_guide'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.http import HttpResponse\nfrom django.contrib import messages\n\nfrom .forms import EventForm\nfrom .models import Event\n\n\nclass HomePageView(View):\n    \"\"\"\n    Handles rendering of the home page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Displays the calendar with events for the selected month and year.\n        \"\"\"\n        now = datetime.now()\n        year = now.year\n        month = now.month\n\n        cal = calendar.HTMLCalendar().formatmonth(year, month)\n        events = Event.objects.filter(datetime__year=year, datetime__month=month)\n        return render(request, 'home.html', {'calendar': cal, 'events': events})\n\n\nclass AddEventView(View):\n    \"\"\"\n    Handles adding new events to the calendar.\n    \"\"\"\n\n    def get(self, request):\n        form = EventForm()\n        return render(request, 'add_event.html', {'form': form})\n\n    def post(self, request):\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Event added successfully!')\n            return redirect('view_events')\n        return render(request, 'add_event.html', {'form': form})\n\n\nclass EditEventView(View):\n    \"\"\"\n    Handles modifying existing events in the calendar.\n    \"\"\"\n\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventForm(instance=event)\n        return render(request, 'edit_event.html', {'form': form, 'event_id': event_id})\n\n    def post(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Event updated successfully!')\n            return redirect('view_events')\n        return render(request, 'edit_event.html', {'form': form, 'event_id': event_id})\n\n\nclass DeleteEventView(View):\n    \"\"\"\n    Handles deleting events from the calendar.\n    \"\"\"\n\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        return render(request, 'delete_event.html', {'event': event})\n\n    def post(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        event.delete()\n        messages.success(request, 'Event deleted successfully!')\n        return redirect('view_events')\n\n\nclass ListEventsView(View):\n    \"\"\"\n    Handles displaying and searching the list of events.\n    \"\"\"\n\n    def get(self, request):\n        query = request.GET.get('q')\n        if query:\n            events = Event.objects.filter(Q(title__icontains=query) | Q(description__icontains=query))\n        else:\n            events = Event.objects.all()\n        return render(request, 'view_events.html', {'events': events, 'query': query})\n\n\nclass EventDetailsView(View):\n    \"\"\"\n    Handles displaying detailed information about a selected event.\n    \"\"\"\n\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        return render(request, 'view_event_details.html', {'event': event})\n\n\nclass HelpView(View):\n    \"\"\"\n    Handles the help and support sections.\n    \"\"\"\n\n    def get(self, request, *args, **kwargs):\n        if request.path == '/help/faq/':\n            return render(request, 'faq.html')\n        elif request.path == '/help/user-guide/':\n            return render(request, 'user_guide.html')\n        else:\n            return HttpResponse('Help Page')  # Or redirect to a proper error page\n"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-30 08:50\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "add_event.html", "path": "example_app/templates/add_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Event</title>\n</head>\n<body>\n    <div id=\"add-event-container\" class=\"container\">\n        <h1 id=\"add-event-title\" class=\"title\">Add New Event</h1>\n        <form id=\"add-event-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields\" class=\"form-group\">\n                {{ form.as_p }}\n            </div>\n            <button id=\"submit-button\" type=\"submit\" class=\"btn btn-primary\">Add Event</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "example_app/templates/edit_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Event</title>\n</head>\n<body>\n    <div id=\"edit-event-container\" class=\"container\">\n        <h1 id=\"edit-event-title\" class=\"title\">Edit Event</h1>\n        <form id=\"edit-event-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields\" class=\"form-group\">\n                {{ form.as_p }}\n            </div>\n            <button id=\"update-button\" type=\"submit\" class=\"btn btn-primary\">Update Event</button>\n            <a id=\"cancel-link\" href=\"{% url 'view_events' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "faq.html", "path": "example_app/templates/faq.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>FAQ</title>\n</head>\n<body>\n    <div id=\"faq-container\" class=\"container\">\n        <h1 id=\"faq-title\" class=\"title\">Frequently Asked Questions</h1>\n        <div id=\"faq-content\" class=\"content\">\n            <p id=\"faq-question-1\" class=\"question\">Question 1: How do I add an event?</p>\n            <p id=\"faq-answer-1\" class=\"answer\">Answer 1: Go to the 'Add Event' page and fill out the form.</p>\n\n            <p id=\"faq-question-2\" class=\"question\">Question 2: How do I edit an event?</p>\n            <p id=\"faq-answer-2\" class=\"answer\">Answer 2: Go to the event list, click 'Edit' on the event you want to change.</p>\n\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n        .calendar {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Event Calendar</h1>\n        <div id=\"calendar-view\" class=\"calendar\">\n            {{ calendar }}\n        </div>\n        <div id=\"event-list\" class=\"event-list\">\n            <h2 id=\"event-list-title\" class=\"subtitle\">Events Today</h2>\n            <ul>\n                {% for event in events %}\n                    <li id=\"event-{{ event.id }}\" class=\"event-item\">\n                        <a href=\"{% url 'view_event_details' event.id %}\">{{ event.title }}</a>\n                    </li>\n                {% empty %}\n                    <li id=\"no-events\" class=\"no-events\">No events scheduled for this month.</li>\n                {% endfor %}\n            </ul>\n            <a id=\"add-event-link\" href=\"{% url 'add_event' %}\" class=\"btn btn-primary\">Add Event</a>\n            <a id=\"view-all-events-link\" href=\"{% url 'view_events' %}\" class=\"btn btn-secondary\">View All Events</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "user_guide.html", "path": "example_app/templates/user_guide.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Guide</title>\n</head>\n<body>\n    <div id=\"user-guide-container\" class=\"container\">\n        <h1 id=\"user-guide-title\" class=\"title\">User Guide</h1>\n        <section id=\"adding-events\" class=\"section\">\n            <h2 id=\"adding-events-title\" class=\"section-title\">Adding Events</h2>\n            <p id=\"adding-events-description\" class=\"section-description\">To add a new event, navigate to the 'Add Event' page. Fill in the title, description, and date/time for your event. Click 'Add Event' to save.</p>\n        </section>\n\n        <section id=\"viewing-events\" class=\"section\">\n            <h2 id=\"viewing-events-title\" class=\"section-title\">Viewing Events</h2>\n            <p id=\"viewing-events-description\" class=\"section-description\">To view all events, navigate to the 'View All Events' page. You can search events by title or description.</p>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "view_events.html", "path": "example_app/templates/view_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event List</title>\n</head>\n<body>\n    <div id=\"event-list-container\" class=\"container\">\n        <h1 id=\"event-list-title\" class=\"title\">Event List</h1>\n\n        <form id=\"search-form\" method=\"get\">\n            <input type=\"text\" id=\"search-input\" name=\"q\" placeholder=\"Search events...\" value=\"{{ query }}\">\n            <button id=\"search-button\" type=\"submit\" class=\"btn btn-primary\">Search</button>\n            <a id=\"clear-search-link\" href=\"{% url 'view_events' %}\" class=\"btn btn-secondary\">Clear</a>\n        </form>\n\n        <ul id=\"events-list\" class=\"events-list\">\n            {% for event in events %}\n                <li id=\"event-item-{{ event.id }}\" class=\"event-item\">\n                    <a id=\"event-link-{{ event.id }}\" href=\"{% url 'view_event_details' event.id %}\">{{ event.title }}</a>\n                    <a id=\"edit-link-{{ event.id }}\" href=\"{% url 'edit_event' event.id %}\" class=\"btn btn-sm btn-warning\">Edit</a>\n                    <a id=\"delete-link-{{ event.id }}\" href=\"{% url 'delete_event' event.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                </li>\n            {% empty %}\n                <li id=\"no-events-message\" class=\"no-events\">No events found.</li>\n            {% endfor %}\n        </ul>\n        <a id=\"add-event-link\" href=\"{% url 'add_event' %}\" class=\"btn btn-success\">Add New Event</a>\n    </div>\n</body>\n</html>"}, {"file": "view_event_details.html", "path": "example_app/templates/view_event_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Details</title>\n</head>\n<body>\n    <div id=\"event-details-container\" class=\"container\">\n        <h1 id=\"event-details-title\" class=\"title\">Event Details</h1>\n        <div id=\"event-title\" class=\"event-title\">Title: {{ event.title }}</div>\n        <div id=\"event-description\" class=\"event-description\">Description: {{ event.description }}</div>\n        <div id=\"event-datetime\" class=\"event-datetime\">Date/Time: {{ event.datetime }}</div>\n        <a id=\"back-to-list-link\" href=\"{% url 'view_events' %}\" class=\"btn btn-secondary\">Back to List</a>\n    </div>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "example_app/templates/delete_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Event</title>\n</head>\n<body>\n    <div id=\"delete-event-container\" class=\"container\">\n        <h1 id=\"delete-event-title\" class=\"title\">Delete Event</h1>\n        <p id=\"confirmation-message\" class=\"message\">Are you sure you want to delete the event: \"{{ event.title }}\"?</p>\n        <form id=\"delete-event-form\" method=\"post\">\n            {% csrf_token %}\n            <button id=\"confirm-delete-button\" type=\"submit\" class=\"btn btn-danger\">Delete</button>\n            <a id=\"cancel-delete-link\" href=\"{% url 'view_events' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "project_name/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "project_name/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_name.wsgi.application'\nASGI_APPLICATION = 'project_name.asgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] #added this line\n"}, {"file": "urls.py", "path": "project_name/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n\nurlpatterns = [\n    \"\"\"\n    URL patterns for the project.\n    \"\"\"\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project_name/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_wsgi_application()"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    \"\"\"\n    Form for ContactSales model.\n    \"\"\"\n    class Meta:\n        \"\"\"\n        Meta\n        \"\"\"\n        model = ContactSales\n        fields = ['name', 'email', 'message']\n\n\nclass SupportForm(forms.ModelForm):\n    \"\"\"\n    Form for SupportRequest model.\n    \"\"\"\n    class Meta:\n        \"\"\"\n        Meta\n        \"\"\"\n        model = SupportRequest\n        fields = ['name', 'email', 'subject', 'message']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass ContactSales(models.Model):\n    \"\"\"\n    Model to store contact sales inquiries.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        \"\"\"\n        String representation of contact sales.\n        \"\"\"\n        return self.name\n\n\nclass SupportRequest(models.Model):\n    \"\"\"\n    Model to store support requests.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    subject = models.CharField(max_length=255)\n    message = models.TextField()\n\n    def __str__(self):\n        \"\"\"\n        String representation of support requests.\n        \"\"\"\n        return self.subject"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView, ContactFormView, SupportFormView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n    path('contact/', ContactFormView.as_view(), name='contact'),\n    path('submit_support/', SupportFormView.as_view(), name='submit_support'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.urls import reverse_lazy\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\n\nclass HomePageView(TemplateView):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    template_name = 'home.html'\n\n\n\nclass FeaturesPageView(TemplateView):\n    \"\"\"\n    Render the features page.\n    \"\"\"\n    template_name = 'features.html'\n\n\n\nclass PricingPageView(TemplateView):\n    \"\"\"\n    Handle pricing page and contact form submission.\n    \"\"\"\n    template_name = 'pricing.html'\n\n\nclass SupportView(TemplateView):\n    \"\"\"\n    Handle support page and form submission.\n    \"\"\"\n    template_name = 'support.html'\n\n\nclass AboutUsPageView(TemplateView):\n    \"\"\"\n    Render the about us page.\n    \"\"\"\n    template_name = 'about.html'\n\n\nclass ContactFormView(FormView):\n    template_name = 'contact.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('home')  # Redirect to homepage on success\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your message has been sent!')\n        return super().form_valid(form)\n\n\nclass SupportFormView(FormView):\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('home')  # Redirect to homepage on success\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been sent!')\n        return super().form_valid(form)"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ContactSales',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField()),\n                ('message', models.TextField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField()),\n                ('subject', models.CharField(max_length=255)),\n                ('message', models.TextField()),\n            ],\n        ),\n    ]"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"about-us-container\">\n        <h1 class=\"mt-4 mb-4\" id=\"about-us-title\">About Us</h1>\n        <p id=\"about-us-description\">This is the about us page.  Information about the team and company should go here.</p>\n        <section id=\"team-section\" class=\"mt-4\">\n            <h2 id=\"team-title\">Our Team</h2>\n            <div class=\"row\">\n                <div class=\"col-md-4\">\n                    <div class=\"card\" id=\"member-1\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\" id=\"member-1-name\">John Doe</h5>\n                            <p class=\"card-text\" id=\"member-1-role\">CEO</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-4\">\n                    <div class=\"card\" id=\"member-2\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\" id=\"member-2-name\">Jane Smith</h5>\n                            <p class=\"card-text\" id=\"member-2-role\">CTO</p>\n                        </div>\n                    </div>\n                </div>\n                <div class=\"col-md-4\">\n                    <div class=\"card\" id=\"member-3\">\n                        <div class=\"card-body\">\n                            <h5 class=\"card-title\" id=\"member-3-name\">Peter Jones</h5>\n                            <p class=\"card-text\" id=\"member-3-role\">Head of Marketing</p>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Features</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"features-container\">\n        <h1 class=\"mt-4 mb-4\" id=\"features-title\">Features</h1>\n        <p id=\"features-intro\">Here's a list of our amazing AI Chatbot features:</p>\n\n        <ul class=\"list-group\" id=\"feature-list\">\n            <li class=\"list-group-item\" id=\"feature-1\"><strong>Natural Language Processing (NLP):</strong> Understands and responds to human language naturally.</li>\n            <li class=\"list-group-item\" id=\"feature-2\"><strong>Machine Learning (ML):</strong> Learns from interactions and improves over time.</li>\n            <li class=\"list-group-item\" id=\"feature-3\"><strong>24/7 Availability:</strong> Provides instant support around the clock.</li>\n            <li class=\"list-group-item\" id=\"feature-4\"><strong>Personalized Responses:</strong> Delivers tailored responses based on user context.</li>\n            <li class=\"list-group-item\" id=\"feature-5\"><strong>Multi-Platform Support:</strong> Integrates seamlessly across various platforms and devices.</li>\n        </ul>\n\n        <section id=\"more-features\" class=\"mt-4\">\n            <h2 id=\"more-features-title\">More to Explore</h2>\n            <p id=\"more-features-description\">Stay tuned for even more innovative features coming soon!</p>\n        </section>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 class=\"mt-4 mb-4\" id=\"welcome-message\">Welcome to Our AI Chatbot!</h1>\n        <p id=\"home-intro\">Experience the power of AI with our cutting-edge chatbot.  Navigate using the links below.</p>\n\n        <nav id=\"main-navigation\">\n            <ul class=\"list-unstyled\">\n                <li id=\"nav-features\"><a href=\"{% url 'features' %}\" class=\"btn btn-primary\">Features</a></li>\n                <li id=\"nav-pricing\"><a href=\"{% url 'pricing' %}\" class=\"btn btn-secondary\">Pricing</a></li>\n                <li id=\"nav-support\"><a href=\"{% url 'support' %}\" class=\"btn btn-success\">Support</a></li>\n                <li id=\"nav-about\"><a href=\"{% url 'about' %}\" class=\"btn btn-info\">About Us</a></li>\n                <li id=\"nav-contact\"><a href=\"{% url 'contact' %}\" class=\"btn btn-warning\">Contact Sales</a></li>\n            </ul>\n        </nav>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pricing</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"pricing-container\">\n        <h1 class=\"mt-4 mb-4\" id=\"pricing-title\">Pricing Plans</h1>\n        <p id=\"pricing-intro\">Choose the plan that's right for you.</p>\n\n        <div class=\"row\">\n            <div class=\"col-md-4\">\n                <div class=\"card\" id=\"basic-plan\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\" id=\"basic-plan-title\">Basic</h5>\n                        <p class=\"card-text\" id=\"basic-plan-description\">Free. Limited features.</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"card\" id=\"premium-plan\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\" id=\"premium-plan-title\">Premium</h5>\n                        <p class=\"card-text\" id=\"premium-plan-description\">$10/month. More features.</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"card\" id=\"enterprise-plan\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\" id=\"enterprise-plan-title\">Enterprise</h5>\n                        <p class=\"card-text\" id=\"enterprise-plan-description\">Contact us. Custom solutions.</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <section id=\"contact-sales\" class=\"mt-4\">\n            <h2 id=\"contact-sales-title\">Contact Sales</h2>\n            <p id=\"contact-sales-description\">For enterprise plans and custom solutions, please <a href=\"{% url 'contact' %}\">contact sales</a>.</p>\n        </section>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Support</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"support-container\">\n        <h1 class=\"mt-4 mb-4\" id=\"support-title\">Support</h1>\n        <p id=\"support-intro\">Need help?  Submit a support request below.</p>\n\n        <form method=\"post\" action=\"{% url 'submit_support' %}\" id=\"support-form\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"name-field\">\n                <label for=\"name\" id=\"name-label\">Name:</label>\n                <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required>\n            </div>\n            <div class=\"form-group\" id=\"email-field\">\n                <label for=\"email\" id=\"email-label\">Email:</label>\n                <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" required>\n            </div>\n            <div class=\"form-group\" id=\"subject-field\">\n                <label for=\"subject\" id=\"subject-label\">Subject:</label>\n                <input type=\"text\" class=\"form-control\" id=\"subject\" name=\"subject\" required>\n            </div>\n            <div class=\"form-group\" id=\"message-field\">\n                <label for=\"message\" id=\"message-label\">Message:</label>\n                <textarea class=\"form-control\" id=\"message\" name=\"message\" rows=\"3\" required></textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"submit-button\">Submit Request</button>\n        </form>\n\n        <section id=\"faq\" class=\"mt-4\">\n            <h2 id=\"faq-title\">FAQ</h2>\n            <p id=\"faq-description\">Frequently asked questions.</p>\n        </section>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>", "encoding": "utf-8"}, {"file": "contact.html", "path": "example_app/templates/contact.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Contact Sales</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"contact-container\">\n        <h1 class=\"mt-4 mb-4\" id=\"contact-title\">Contact Sales</h1>\n        <p id=\"contact-intro\">Have questions about our enterprise plans?  Contact us below.</p>\n\n        <form method=\"post\" id=\"contact-form\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"name-field\">\n                <label for=\"name\" id=\"name-label\">Name:</label>\n                <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required>\n            </div>\n            <div class=\"form-group\" id=\"email-field\">\n                <label for=\"email\" id=\"email-label\">Email:</label>\n                <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" required>\n            </div>\n            <div class=\"form-group\" id=\"message-field\">\n                <label for=\"message\" id=\"message-label\">Message:</label>\n                <textarea class=\"form-control\" id=\"message\" name=\"message\" rows=\"3\" required></textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"submit-button\">Submit</button>\n        </form>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>", "encoding": "utf-8"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n    'crispy_forms',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\n\nCRISPY_TEMPLATE_PACK = 'bootstrap4'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"example_app.urls\")),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    \"\"\"\n    Form for uploading a JSON file with validations.\n    \"\"\"\n    json_file = forms.FileField(label='JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    \"\"\"\n    Model representing a project with necessary attributes.\n    \"\"\"\n    name = models.CharField(max_length=200)\n    description = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    \"\"\"\n    Model representing a review for a project.\n    \"\"\"\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    reviewer_name = models.CharField(max_length=100)\n    feedback = models.TextField()\n    rating = models.IntegerField(default=5)  # Assuming a rating out of 5\n    date_reviewed = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Review for {self.project.name} by {self.reviewer_name}'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n    path('upload/', views.upload_json_view, name='upload_json'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nimport os\nimport time\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\nfrom django.urls import reverse\n\n\ndef review_view(request, project_id):\n    \"\"\"\n    Handle the review view by processing test cases and updating reviews.\n    \"\"\"\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        reviewer_name = request.POST.get('reviewer_name')\n        feedback = request.POST.get('feedback')\n        rating = int(request.POST.get('rating', 5))\n\n        Review.objects.create(\n            project=project,\n            reviewer_name=reviewer_name,\n            feedback=feedback,\n            rating=rating\n        )\n        messages.success(request, 'Review submitted successfully!')\n        return redirect('review', project_id=project_id)\n    else:\n        reviews = project.reviews.all()\n        return render(request, 'review.html', {'project': project, 'reviews': reviews})\n\n\n\ndef process_review_submission(request, project, test_results):\n    \"\"\"\n    Process form data submitted during review and update the database.\n    \"\"\"\n    pass\n\n\ndef home_view(request):\n    \"\"\"\n    Display the home page with project listings and upload form.\n    \"\"\"\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'projects': projects})\n\n\n\ndef handle_json_upload(json_file):\n    \"\"\"\n    Process the uploaded JSON file to update or create a project.\n    \"\"\"\n    try:\n        data = json.load(json_file)\n        if isinstance(data, list):\n            for item in data:\n                name = item.get('name')\n                description = item.get('description')\n                if name and description:\n                    Project.objects.create(name=name, description=description)\n        else:\n            name = data.get('name')\n            description = data.get('description')\n            if name and description:\n                Project.objects.create(name=name, description=description)\n        return True\n    except json.JSONDecodeError:\n        return False\n    except Exception as e:\n        print(e)\n        return False\n\n\ndef about_view(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'about.html')\n\n\ndef upload_json_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            json_file = request.FILES['json_file']\n            if handle_json_upload(json_file):\n                messages.success(request, 'JSON file uploaded and processed successfully!')\n            else:\n                messages.error(request, 'Error processing JSON file.  Please check the file format.')\n            return redirect('home')  # Redirect to the home page after upload\n    else:\n        form = JSONUploadForm()\n    return render(request, 'upload_json.html', {'form': form})\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!-- app/templates/about.html -->\n{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"container\">\n    <h1 id=\"about-title\" class=\"title\">About Us</h1>\n    <p id=\"about-description\" class=\"description\">This project review site is designed to help users review and provide feedback on various projects.</p>\n</div>\n{% endblock %}\n"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!-- app/templates/base.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"header\">\n        <nav id=\"main-nav\" class=\"nav\">\n            <ul class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a></li>\n                <li class=\"nav-item\"><a id=\"upload-link\" class=\"nav-link\" href=\"{% url 'upload_json' %}\">Upload</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}\n        {% endblock %}\n    </main>\n\n    <footer id=\"main-footer\" class=\"footer\">\n        <p>&copy; 2024 Project Review Site</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!-- app/templates/home.html -->\n{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"container\">\n    <h1 id=\"home-title\" class=\"title\">Projects</h1>\n    <ul id=\"project-list\" class=\"project-list\">\n        {% for project in projects %}\n            <li class=\"project-item\">\n                <a href=\"{% url 'review' project.id %}\" class=\"project-link\">{{ project.name }}</a>\n                <p class=\"project-description\">{{ project.description }}</p>\n            </li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}\n"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "<!-- app/templates/review.html -->\n{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"container\">\n    <h1 id=\"review-title\" class=\"title\">Review: {{ project.name }}</h1>\n    <p id=\"project-description\" class=\"description\">{{ project.description }}</p>\n\n    <div id=\"reviews-section\" class=\"reviews-section\">\n        <h2 id=\"reviews-heading\" class=\"heading\">Reviews</h2>\n        <ul id=\"review-list\" class=\"review-list\">\n            {% for review in reviews %}\n                <li class=\"review-item\">\n                    <p class=\"reviewer-name\">{{ review.reviewer_name }}</p>\n                    <p class=\"review-feedback\">{{ review.feedback }}</p>\n                    <p class=\"review-rating\">Rating: {{ review.rating }}/5</p>\n                    <p class=\"review-date\">{{ review.date_reviewed }}</p>\n                </li>\n            {% empty %}\n                <li class=\"review-item\">No reviews yet.</li>\n            {% endfor %}\n        </ul>\n    </div>\n\n    <div id=\"review-form-section\" class=\"review-form-section\">\n        <h2 id=\"review-form-heading\" class=\"heading\">Submit a Review</h2>\n        <form id=\"review-form\" class=\"review-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"reviewer_name\" class=\"form-label\">Your Name:</label>\n                <input type=\"text\" id=\"reviewer_name\" name=\"reviewer_name\" class=\"form-control\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"feedback\" class=\"form-label\">Your Feedback:</label>\n                <textarea id=\"feedback\" name=\"feedback\" class=\"form-control\" rows=\"4\" required></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"rating\" class=\"form-label\">Rating (1-5):</label>\n                <select id=\"rating\" name=\"rating\" class=\"form-control\">\n                    <option value=\"1\">1</option>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                    <option value=\"5\" selected>5</option>\n                </select>\n            </div>\n            <button type=\"submit\" id=\"submit-review-button\" class=\"btn btn-primary\">Submit Review</button>\n        </form>\n    </div>\n</div>\n{% endblock %}\n"}, {"file": "upload_json.html", "path": "example_app/templates/upload_json.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"upload-container\" class=\"container\">\n    <h1 id=\"upload-title\" class=\"title\">Upload JSON File</h1>\n    <form id=\"upload-form\" class=\"form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"upload-button\" class=\"btn btn-primary\">Upload</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app', 'static')] # Add this line\n\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'formatters': { #\u683c\u5f0f\u5316\u5668\n#         'standard': {\n#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'\n#             },\n#         'simple': {\n#             'format': '[%(levelname)s]> %(message)s'\n#             },\n#     },\n#     'filters': {\n#     'require_debug_true': {\n#         '()': 'django.utils.log.RequireDebugTrue',\n#         },\n#  },\n#     'handlers': {\n#         'default': {                                            # \u7528\u4e8e\u6587\u4ef6\u8f93\u51fa\n#             'level': 'DEBUG',                                    # \u8f93\u51fa\u65e5\u5fd7\u7b49\u7ea7\n#             'class': 'logging.handlers.RotatingFileHandler',    # \u65e5\u5fd7\u7c7b\u578b\n#             'filename': 'django.log',          # \u5177\u4f53\u65e5\u5fd7\u6587\u4ef6\u7684\u540d\u5b57\n#             'maxBytes': 1024 * 1024 * 2,                        # \u65e5\u5fd7\u5927\u5c0f\n#             'backupCount': 1,                                   # \u5907\u4efd\u6570\u91cf\n#             'formatter':'standard',                             # \u8f93\u51fa\u65e5\u5fd7\u683c\u5f0f\n#             'encoding': 'utf-8',                                # \u8f93\u51fa\u65e5\u5fd7\u7f16\u7801\n#         }\n#     },\n#     'loggers': {    #\u65e5\u5fd7\u5206\u914d\u5230\u54ea\u4e2ahandlers\u4e2d\n#         'django': {\n#             'handlers': ['default'],         # \u4e0a\u7ebf\u4e4b\u540e\u53ef\u4ee5\u628a'console'\u79fb\u9664\n#             'level':'DEBUG',\n#             'propagate': True,       # \u5411\u4e0d\u5411\u66f4\u9ad8\u7ea7\u522b\u7684logger\u4f20\u9012\n#         }\n#  }\n# }\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "/* example_app/static/css/style.css */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.header {\n    background-color: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\n.nav-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    display: flex;\n    justify-content: center;\n}\n\n.nav-item {\n    margin: 0 15px;\n}\n\n.nav-link {\n    color: #fff;\n    text-decoration: none;\n    padding: 5px 10px;\n    border-radius: 5px;\n}\n\n.nav-link:hover {\n    background-color: #555;\n}\n\n.main-content {\n    padding: 20px;\n    min-height: calc(100vh - 120px); /* Adjust based on header/footer height */\n}\n\n.container {\n    width: 80%;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.project-list {\n    list-style: none;\n    padding: 0;\n}\n\n.project-item {\n    margin-bottom: 15px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    background-color: #f9f9f9;\n}\n\n.project-link {\n    text-decoration: none;\n    color: #007bff;\n    font-weight: bold;\n}\n\n.project-link:hover {\n    text-decoration: underline;\n}\n\n.project-description {\n    margin-top: 5px;\n    color: #555;\n}\n\n.reviews-section, .review-form-section {\n    margin-top: 30px;\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\n.heading {\n    margin-bottom: 15px;\n}\n\n.review-list {\n    list-style: none;\n    padding: 0;\n}\n\n.review-item {\n    margin-bottom: 10px;\n    padding: 10px;\n    border: 1px solid #eee;\n    border-radius: 5px;\n    background-color: #fefefe;\n}\n\n.reviewer-name {\n    font-weight: bold;\n}\n\n.review-feedback {\n    margin-top: 5px;\n}\n\n.review-rating {\n    font-style: italic;\n}\n\n.review-date {\n    font-size: 0.8em;\n    color: #777;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.form-control {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.btn {\n    padding: 10px 15px;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.btn-primary {\n    background-color: #007bff;\n    color: #fff;\n}\n\n.btn-primary:hover {\n    background-color: #0056b3;\n}\n\n.footer {\n    background-color: #333;\n    color: #fff;\n    text-align: center;\n    padding: 10px 0;\n    position: relative;\n    bottom: 0;\n    width: 100%;\n}\n"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.hello-world-container {\n    text-align: center;\n}\n\n.hello-world-heading {\n    color: #333;\n}"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body class=\"hello-world-body\">\n    <div id=\"hello-world-container\" class=\"hello-world-container\">\n        <h1 id=\"hello-world-heading\" class=\"hello-world-heading\">Hello, World!</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='transactions_user')\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.date} - {self.amount} - {self.category}'\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='support_request_user')\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Support Request from {self.name} on {self.submitted_at}'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld, transaction_list, support_request_form\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n    path('transactions/', transaction_list, name='transaction_list'),\n    path('support/', support_request_form, name='support_request_form'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .models import Transaction, SupportRequest\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.models import User\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n\n@login_required\ndef transaction_list(request):\n    transactions = Transaction.objects.filter(user=request.user)\n    return render(request, 'transaction_list.html', {'transactions': transactions})\n\n\ndef support_request_form(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n        user = User.objects.first() # Assuming you want to link to a specific user\n        SupportRequest.objects.create(user=user, name=name, email=email, message=message)\n        return HttpResponse('Support request submitted!')\n    return render(request, 'support_request_form.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: #fff;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\ninput[type=\"text\"], input[type=\"email\"], textarea {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\nbutton {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #45a049;\n}\n\n.transaction-list {\n    width: 80%;\n    margin: 20px auto;\n}\n\n.transaction-item {\n    border: 1px solid #ddd;\n    padding: 10px;\n    margin-bottom: 5px;\n    background-color: #f9f9f9;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"helloworld-container\" class=\"container\">\n        <h1 id=\"helloworld-title\" class=\"title\">Hello, World!</h1>\n        <p id=\"helloworld-message\" class=\"message\">This is the Hello World page.</p>\n        <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Home Page!</h1>\n        <p id=\"home-description\" class=\"description\">This is a simple Django project.</p>\n        <a id=\"helloworld-link\" class=\"link\" href=\"{% url 'helloworld' %}\">Go to Hello World Page</a>\n        <a id=\"transactions-link\" class=\"link\" href=\"{% url 'transaction_list' %}\">View Transactions (Login Required)</a>\n        <a id=\"support-link\" class=\"link\" href=\"{% url 'support_request_form' %}\">Submit Support Request</a>\n    </div>\n</body>\n</html>\n"}, {"file": "transaction_list.html", "path": "example_app/templates/transaction_list.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Transaction List</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"transaction-list\">\n        <h1>Transaction List</h1>\n        {% for transaction in transactions %}\n            <div class=\"transaction-item\">\n                <p><strong>Date:</strong> {{ transaction.date }}</p>\n                <p><strong>Amount:</strong> {{ transaction.amount }}</p>\n                <p><strong>Category:</strong> {{ transaction.category }}</p>\n                <p><strong>Description:</strong> {{ transaction.description }}</p>\n            </div>\n        {% empty %}\n            <p>No transactions found.</p>\n        {% endfor %}\n    </div>\n</body>\n</html>"}, {"file": "support_request_form.html", "path": "example_app/templates/support_request_form.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Support Request</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Support Request Form</h1>\n        <form method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"name\">Name:</label>\n                <input type=\"text\" id=\"name\" name=\"name\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"message\">Message:</label>\n                <textarea id=\"message\" name=\"message\" rows=\"4\" required></textarea>\n            </div>\n            <button type=\"submit\">Submit Request</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n\nLOGIN_REDIRECT_URL = '/'  # Redirect to home after login\nLOGOUT_REDIRECT_URL = '/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n    path('accounts/', include('django.contrib.auth.urls')), # Django auth urls\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "16": [{"file": "main.py", "path": "main.py", "code": "import os\nimport pandas as pd\n\n# File paths\nINPUT_FILE = 'subjects.xlsx'\nOUTPUT_FILE = 'processed_subjects.xlsx'\n\n\ndef check_file_exists(file_path):\n    \"\"\"Check if the specified file exists.\"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f'File not found: {file_path}')\n\n\ndef check_file_format(file_path):\n    \"\"\"Check if the file is in Excel format.\"\"\"\n    if not file_path.endswith(('.xls', '.xlsx')):\n        raise ValueError('Input file must be an Excel file (.xls or .xlsx)')\n\n\ndef validate_data(df):\n    \"\"\"Validate the DataFrame for required columns and values.\"\"\"\n    required_columns = ['Subject Code', 'Subject Name', 'Credits']\n    for col in required_columns:\n        if col not in df.columns:\n            raise ValueError(f'Missing required column: {col}')\n    \n    # Check for empty values in crucial columns\n    for col in ['Subject Code', 'Subject Name']:\n        if df[col].isnull().any():\n             raise ValueError(f'Column {col} contains missing values.')\n\n    #Check that Credits column is numeric\n    if not pd.api.types.is_numeric_dtype(df['Credits']):\n        raise ValueError('Credits column must contain numeric values.')\n\n\ndef process_subjects(input_file, output_file):\n    \"\"\"Process subjects from input Excel file and save the output to another Excel file.\"\"\"\n    check_file_exists(input_file)\n    check_file_format(input_file)\n\n    try:\n        df = pd.read_excel(input_file)\n    except Exception as e:\n        raise ValueError(f'Error reading Excel file: {e}')\n\n    validate_data(df)\n\n    # Simple processing: Add a new column (example)\n    df['Status'] = 'Active'\n\n    try:\n        df.to_excel(output_file, index=False)\n    except Exception as e:\n        raise ValueError(f'Error writing to Excel file: {e}')\n\n    print(f'Successfully processed {input_file} and saved to {output_file}')\n\n\ndef main():\n    \"\"\"Main execution function.\"\"\"\n    try:\n        process_subjects(INPUT_FILE, OUTPUT_FILE)\n    except (FileNotFoundError, ValueError) as e:\n        print(f'Error: {e}')\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "subjects.xlsx", "path": "subjects.xlsx", "code": "Subject Code,Subject Name,Credits\nCS101,Introduction to Programming,3\nMA101,Calculus I,4\nPH101,Physics I,4\nEN101,English Composition,3"}, {"file": "README.md", "path": "README.md", "code": "# Subject Processing Script\n\nThis script processes a list of subjects from an Excel file, performs validation, and saves the processed data to another Excel file.\n\n## Requirements\n\n*   Python 3.6 or higher\n*   pandas library (`pip install pandas`)\n*   openpyxl library (`pip install openpyxl`)  (For reading/writing Excel files)\n\n## Usage\n\n1.  Place the input Excel file (`subjects.xlsx`) in the same directory as the `main.py` script.\n2.  Run the script: `python main.py`\n3.  The processed data will be saved to `processed_subjects.xlsx` in the same directory.\n\n## Input File Format\n\nThe input Excel file (`subjects.xlsx`) should have the following columns:\n\n*   `Subject Code` (Text/String): The unique code for the subject.\n*   `Subject Name` (Text/String): The name of the subject.\n*   `Credits` (Numeric): The number of credits the subject is worth.\n\n## Error Handling\n\nThe script performs the following error checks:\n\n*   Checks if the input file exists.\n*   Checks if the input file is an Excel file.\n*   Checks if the required columns are present in the input file.\n*   Checks for missing values in the `Subject Code` and `Subject Name` columns.\n*   Checks if the `Credits` column contains numeric values.\n\n## Output File\n\nThe output Excel file (`processed_subjects.xlsx`) will contain the same columns as the input file, plus a new column called `Status` with the value `Active` for all subjects.\n\n## Example subjects.xlsx\n\n```\nSubject Code,Subject Name,Credits\nCS101,Introduction to Programming,3\nMA101,Calculus I,4\nPH101,Physics I,4\nEN101,English Composition,3\n```"}], "17": [{"file": "main.py", "path": "main.py", "code": "import os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\nINPUT_FILE = \"Gamedata.xlsx\"\nOUTPUT_FILE = \"Logistic.xlsx\"\n\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Read the dataset and ensure all columns are numeric.\n    Raise an error if any missing values (NaN) are found.\n    \"\"\"\n    try:\n        data = pd.read_excel(input_file)\n        # Check if all columns are numeric\n        for col in data.columns:\n            if not pd.api.types.is_numeric_dtype(data[col]):\n                raise ValueError(f\"Column '{col}' is not numeric.\")\n        # Check for missing values\n        if data.isnull().any().any():\n            raise ValueError(\"Missing values (NaN) found in the data.\")\n        return data\n    except FileNotFoundError:\n        print(f\"Error: File '{input_file}' not found.\")\n        return None\n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None\n\n\ndef add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Add a one-period lag for the dependent variable and drop missing rows.\n    \"\"\"\n    data['Lagged_' + target_column] = data[target_column].shift(1)\n    data = data.dropna()\n    return data\n\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepare the feature matrix (X) and target vector (y).\n    \"\"\"\n    y = data[target_column]\n    X = data.drop(columns=[target_column])\n    return X, y\n\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Build and fit a logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)  # Add a constant term for the intercept\n    model = sm.Logit(y, X)\n    results = model.fit()\n    return results\n\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Save the logistic regression summary to an Excel file.\n    \"\"\"\n    summary_df = pd.DataFrame(result.summary().tables[1])\n    summary_df.to_excel(output_file, index=False)\n    print(f\"Logistic regression summary saved to '{output_file}'\")\n\n\ndef main(input_file, output_file, target_column):\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    data = read_and_validate_data(input_file)\n    if data is None:\n        return  # Exit if data loading or validation fails\n\n    data = add_lagged_dependent_variable(data, target_column)\n    X, y = prepare_features_and_target(data, target_column, 'Lagged_' + target_column)\n\n    results = build_logistic_model(X, y)\n    save_summary_to_excel(results, output_file)\n\n\nif __name__ == \"__main__\":\n    # Replace 'YourTargetColumn' with the actual name of your target column in the Excel file\n    TARGET_COLUMN = 'Won'\n    main(INPUT_FILE, OUTPUT_FILE, TARGET_COLUMN)\n"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}, {"file": "Gamedata.xlsx", "path": "Gamedata.xlsx", "code": "Dummy Excel file content.\n(Create an excel file named Gamedata.xlsx with at least the column 'Won' (numeric, binary) and other numeric columns.)\nExample:\n\tWon\tFeature1\tFeature2\n\t1\t10\t20\n\t0\t15\t25\n\t1\t12\t18\n\t0\t18\t22"}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        \"\"\"\n        Initializes the BashCrawl game with the root directory and available commands.\n        \"\"\"\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()  # Copy to allow multiple game instances\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\", \"take\"]\n        self.game_running = False\n\n    def print_main_menu(self):\n        \"\"\"\n        Displays the main menu options to the player.\n        \"\"\"\n        print(\"\\nWelcome to BashCrawl!\\n\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        \"\"\"\n        Provide help information for the main menu.\n        \"\"\"\n        print(\"\\nBashCrawl Main Menu Help:\\n\")\n        print(\"1 - Start Game: Begins the BashCrawl adventure.\\n\")\n        print(\"2 - Help: Displays this help message.\\n\")\n        print(\"3 - Quit: Exits the game.\\n\")\n\n    def print_game_help(self):\n        \"\"\"\n        Display in-game command help to the player.\n        \"\"\"\n        print(\"\\nIn-Game Commands:\\n\")\n        print(\"ls: Lists the contents of the current directory.\\n\")\n        print(\"cd <directory>: Changes the current directory. Use '..' to go up one level.\\n\")\n        print(\"inventory: Checks and displays the player's inventory.\\n\")\n        print(\"take <item>: Adds the item to the player's inventory. Only works if the item is in current directory.\\n\")\n        print(\"help: Displays this help message.\\n\")\n        print(\"quit: Exits the game.\\n\")\n\n    def list_contents(self):\n        \"\"\"\n        List the contents of the current directory.\n        \"\"\"\n        contents = self.directory_structure.get(self.current_dir, [])\n        items_here = [item for location, item in self.items.items() if location == self.current_dir]\n        print(f\"\\nContents of {self.current_dir}:\\n\")\n        if contents:\n            for item in contents:\n                print(f\"Directory: {item}\")\n        if items_here:\n            for item in items_here:\n                print(f\"Item: {item}\")\n\n        if not contents and not items_here:\n            print(\"Nothing here.\\n\")\n\n    def change_directory(self, target_dir):\n        \"\"\"\n        Change the current directory to the specified target directory.\n        \"\"\"\n        if target_dir == \"..\":\n            if self.current_dir != ROOT_DIR:\n                parts = self.current_dir.split(os.path.sep)\n                self.current_dir = os.path.sep.join(parts[:-1]) or ROOT_DIR\n            return\n\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n        else:\n            print(\"Invalid directory.\\n\")\n\n    def check_inventory(self):\n        \"\"\"\n        Check and display the player's inventory.\n        \"\"\"\n        print(\"\\nInventory:\\n\")\n        if self.inventory:\n            for item in self.inventory:\n                print(f\"- {item}\\n\")\n        else:\n            print(\"Your inventory is empty.\\n\")\n\n    def take_item(self, item_name):\n        \"\"\"\n        Adds the item to the player's inventory if it exists in the current location.\n        \"\"\"\n        item_location = None\n        for location, item in self.items.items():\n            if location == self.current_dir and item == item_name:\n                item_location = location\n                break\n\n        if item_location:\n            self.inventory.append(item_name)\n            del self.items[item_location]\n            print(f\"You took the {item_name}.\\n\")\n        else:\n            print(f\"There is no {item_name} here.\\n\")\n\n\n    def play(self):\n        \"\"\"\n        Start the game loop and process player commands.\n        \"\"\"\n        self.game_running = True\n        while self.game_running:\n            print(f\"\\nYou are in: {self.current_dir}\\n\")\n            command = input(\"> \").lower().split()\n            if not command:\n                continue\n\n            action = command[0]\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    target_dir = command[1]\n                    self.change_directory(target_dir)\n                else:\n                    print(\"Please specify a directory.\\n\")\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                self.game_running = False\n                print(\"Thanks for playing!\\n\")\n            elif action == \"take\":\n                if len(command) > 1:\n                    item_name = command[1]\n                    self.take_item(item_name)\n                else:\n                    print(\"Please specify an item to take.\\n\")\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\\n\")\n\n    def main_menu(self):\n        \"\"\"\n        Display and manage interactions with the main menu.\n        \"\"\"\n        while True:\n            self.print_main_menu()\n            choice = input(\"Enter your choice: \")\n\n            if choice == \"1\":\n                self.play()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                print(\"Exiting BashCrawl. Goodbye!\\n\")\n                break\n            else:\n                print(\"Invalid choice. Please try again.\\n\")\n\n\ndef main():\n    \"\"\"\n    Main function to initiate BashCrawl game.\n    \"\"\"\n    game = BashCrawl()\n    game.main_menu()\n\n\nif __name__ == \"__main__\":\n    main()\n"}], "19": [{"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death\n2023-01-01\n2023-01-02\n2023-01-08\n2023-01-09\n2023-01-15\n2023-01-16\n2023-01-22\n2023-01-23\n2023-01-29\n2023-01-30\n2023-02-05\n2023-02-06\n2023-02-12\n2023-02-13\n2023-02-19\n2023-02-20\n2023-02-26\n2023-02-27\n2023-03-05\n2023-03-06"}, {"file": "19-stdanswer.py", "path": "19-stdanswer.py", "code": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"\n    Check if a file exists at the given file path.\n    \"\"\"\n    return os.path.exists(file_path)\n\n\ndef read_dataset(file_path):\n    \"\"\"\n    Read the dataset from a CSV file and return a DataFrame.\n    \"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n    except Exception as e:\n        raise Exception(f\"Error reading file: {e}\")\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"\n    Validate that the dataset contains all required columns.\n    \"\"\"\n    for col in required_columns:\n        if col not in df.columns:\n            raise KeyError(f\"Required column '{col}' is missing.\")\n\n\ndef preprocess_dataset(df):\n    \"\"\"\n    Preprocess the dataset, including cleaning and formatting dates.\n    \"\"\"\n    try:\n        df['Date of death'] = pd.to_datetime(df['Date of death'])\n        df['Week'] = df['Date of death'].dt.isocalendar().week\n        return df\n    except Exception as e:\n        raise ValueError(f\"Error preprocessing dataset: {e}\")\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"\n    Plot the weekly deaths and save as a histogram image file.\n    \"\"\"\n    plt.figure(figsize=(10, 6))\n    weekly_deaths.plot(kind='bar')\n    plt.title('Weekly Deaths Histogram')\n    plt.xlabel('Week Number')\n    plt.ylabel('Number of Deaths')\n    plt.grid(axis='y')\n    plt.savefig(output_file)\n    plt.close()\n\ndef main():\n    \"\"\"\n    Main execution function to process the dataset and plot the histogram.\n    \"\"\"\n    try:\n        if not check_file_existence(input_file):\n            raise FileNotFoundError(f\"Input file '{input_file}' not found.\")\n\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()"}]}