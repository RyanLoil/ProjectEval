{"1": [{"file": "settings.py", "path": "bmi_project/bmi_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases/\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators/\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "bmi_project/bmi_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi_app.urls'))\n]"}, {"file": "wsgi.py", "path": "bmi_project/bmi_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "urls.py", "path": "bmi_project/bmi_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "views.py", "path": "bmi_project/bmi_app/views.py", "code": "from django.shortcuts import render\n\ndef bmi_calculator(request):\n    bmi = None\n    category = None\n    if request.method == 'POST':\n        try:\n            weight = float(request.POST.get('weight'))\n            height = float(request.POST.get('height'))\n\n            bmi = round(weight / (height * height), 2)\n\n            if bmi < 18.5:\n                category = 'Underweight'\n            elif 18.5 <= bmi < 25:\n                category = 'Normal weight'\n            elif 25 <= bmi < 30:\n                category = 'Overweight'\n            else:\n                category = 'Obese'\n\n        except (ValueError, TypeError):\n            bmi = 'Invalid Input'\n            category = 'Invalid Input'\n\n\n    return render(request, 'bmi_app/bmi_calculator.html', {'bmi': bmi, 'category': category})\n"}, {"file": "apps.py", "path": "bmi_project/bmi_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BmiAppConfig(AppConfig):\n    name = 'bmi_app'\n"}, {"file": "models.py", "path": "bmi_project/bmi_app/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "bmi_calculator.html", "path": "bmi_project/templates/bmi_app/bmi_calculator.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n    <link rel=\"stylesheet\" href=\"{% static 'bmi_app/style.css' %}\">\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1 id=\"bmi-calculator-title\" class=\"title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"weight-input-group\" class=\"input-group\">\n                <label id=\"weight-label\" for=\"weight\" class=\"label\">Weight (kg):</label>\n                <input id=\"weight\" class=\"input-field\" type=\"number\" name=\"weight\" required>\n            </div>\n            <div id=\"height-input-group\" class=\"input-group\">\n                <label id=\"height-label\" for=\"height\" class=\"label\">Height (m):</label>\n                <input id=\"height\" class=\"input-field\" type=\"number\" step=\"0.01\" name=\"height\" required>\n            </div>\n            <button id=\"calculate-button\" class=\"button\" type=\"submit\">Calculate</button>\n        </form>\n\n        {% if bmi is not None %}\n            <div id=\"result-container\" class=\"result-container\">\n                <h2 id=\"result-title\" class=\"result-title\">Result:</h2>\n                <p id=\"bmi-value\" class=\"result-value\">BMI: {{ bmi }}</p>\n                <p id=\"bmi-category\" class=\"result-category\">Category: {{ category }}</p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "bmi_project/static/bmi_app/style.css", "code": "body {\n    font-family: sans-serif;\n    background-color: #f0f0f0;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n}\n\n.container {\n    background-color: #fff;\n    border-radius: 8px;\n    padding: 20px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);\n    width: 400px;\n    text-align: center;\n}\n\n.title {\n    font-size: 2em;\n    margin-bottom: 20px;\n    color: #333;\n}\n\n.input-group {\n    margin-bottom: 15px;\n    text-align: left;\n}\n\n.label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n    color: #555;\n}\n\n.input-field {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n    font-size: 1em;\n}\n\n.button {\n    background-color: #4CAF50;\n    color: white;\n    padding: 12px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 1em;\n    transition: background-color 0.3s;\n    width: 100%;\n}\n\n.button:hover {\n    background-color: #3e8e41;\n}\n\n.result-container {\n    margin-top: 20px;\n    padding: 15px;\n    background-color: #e0e0e0;\n    border-radius: 4px;\n    text-align: left;\n}\n\n.result-title {\n    font-size: 1.5em;\n    margin-bottom: 10px;\n    color: #333;\n}\n\n.result-value {\n    font-size: 1.2em;\n    margin-bottom: 5px;\n    color: #555;\n}\n\n.result-category {\n    font-size: 1.2em;\n    color: #555;\n}\n"}], "3": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/password_generator/", "code": "default_app_config = 'password_generator.apps.PasswordGeneratorConfig'"}, {"file": "apps.py", "path": "/password_generator/", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'"}, {"file": "models.py", "path": "/password_generator/", "code": "from django.db import models\n\n# Create your models here. "}, {"file": "admin.py", "path": "/password_generator/", "code": "from django.contrib import admin\n\n# Register your models here. "}, {"file": "urls.py", "path": "/password_generator/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.generator, name='generator'),\n]"}, {"file": "views.py", "path": "/password_generator/", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef generator(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        characters = ''\n        if include_uppercase:\n            characters += string.ascii_uppercase\n        if include_lowercase:\n            characters += string.ascii_lowercase\n        if include_numbers:\n            characters += string.digits\n        if include_symbols:\n            characters += string.punctuation\n\n        if not characters:\n            characters = string.ascii_letters  # Default to letters if no option selected\n\n        password = ''.join(random.choice(characters) for i in range(length))\n\n        return render(request, 'generator.html', {'password': password})\n\n    return render(request, 'generator.html')"}, {"file": "__init__.py", "path": "/password_generator/migrations/", "code": ""}, {"file": "__init__.py", "path": "/password_generator/settings/", "code": ""}, {"file": "settings.py", "path": "/password_generator/settings/", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'your_default_secret_key')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "/password_generator/", "code": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('password_generator.urls')), # Include your app's URLs\n]"}, {"file": "wsgi.py", "path": "/password_generator/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "generator.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            width: 400px;\n            text-align: center;\n        }\n\n        .password-display {\n            background-color: #e9ecef;\n            padding: 10px;\n            border-radius: 4px;\n            margin-bottom: 20px;\n            font-size: 1.2em;\n            word-break: break-all; /* Ensure long passwords wrap */\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n            text-align: left;\n        }\n\n        .form-group label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        .form-group input[type=\"number\"], input[type=\"checkbox\"] {\n            margin-right: 5px;\n        }\n\n        .btn {\n            background-color: #007bff;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 1em;\n        }\n\n        .btn:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"main-container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Password Generator</h1>\n\n        {% if password %}\n        <div id=\"password-area\" class=\"password-display\">{{ password }}</div>\n        {% endif %}\n\n        <form id=\"password-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"length-group\" class=\"form-group\">\n                <label id=\"length-label\" for=\"length\">Password Length:</label>\n                <input id=\"length\" type=\"number\" name=\"length\" value=\"12\" min=\"6\" max=\"32\">\n            </div>\n\n            <div id=\"uppercase-group\" class=\"form-group\">\n                <label id=\"uppercase-label\" for=\"uppercase\">Include Uppercase:</label>\n                <input id=\"uppercase\" type=\"checkbox\" name=\"uppercase\">\n            </div>\n\n            <div id=\"lowercase-group\" class=\"form-group\">\n                <label id=\"lowercase-label\" for=\"lowercase\">Include Lowercase:</label>\n                <input id=\"lowercase\" type=\"checkbox\" name=\"lowercase\">\n            </div>\n\n            <div id=\"numbers-group\" class=\"form-group\">\n                <label id=\"numbers-label\" for=\"numbers\">Include Numbers:</label>\n                <input id=\"numbers\" type=\"checkbox\" name=\"numbers\">\n            </div>\n\n            <div id=\"symbols-group\" class=\"form-group\">\n                <label id=\"symbols-label\" for=\"symbols\">Include Symbols:</label>\n                <input id=\"symbols\" type=\"checkbox\" name=\"symbols\">\n            </div>\n\n            <button id=\"generate-button\" class=\"btn\" type=\"submit\">Generate Password</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "/static/css/", "code": "/* Optional:  Add any custom CSS here */"}, {"file": "__init__.py", "path": "/static/css/", "code": ""}, {"file": "db.sqlite3", "path": "/", "code": "/* Binary File: Database */"}], "6": [{"file": "requirements.txt", "path": "/", "code": "Django>=4.0\npsycopg2-binary\nplotly\ndjango-plotly-dash"}, {"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "todo_project/settings.py", "path": "todo_project/", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n    'django_plotly_dash.apps.DjangoPlotlyDash',\n    'dpd_components'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'django_plotly_dash.middleware.BaseMiddleware',\n    'django_plotly_dash.middleware.ExternalRedirectionMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nPLOTLY_COMPONENTS = [\n    'dash_core_components',\n    'dash_html_components',\n    'dash_renderer',\n    'dpd_components'\n]\n"}, {"file": "todo_project/urls.py", "path": "todo_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n    path('django_plotly_dash/', include('django_plotly_dash.urls')),\n]"}, {"file": "todo_project/wsgi.py", "path": "todo_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "todo_app/apps.py", "path": "todo_app/", "code": "from django.apps import AppConfig\n\n\nclass TodoAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todo_app'"}, {"file": "todo_app/models.py", "path": "todo_app/", "code": "from django.db import models\n\nclass Todo(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "todo_app/views.py", "path": "todo_app/", "code": "from django.shortcuts import render, redirect\nfrom .models import Todo\nimport plotly.express as px\nimport pandas as pd\n\nfrom django_plotly_dash import DjangoDash\nfrom dash import html\nfrom dash import dcc\n\n# Create your views here.\ndef todo_list(request):\n    todos = Todo.objects.all().order_by('-created_at')\n    total_todos = Todo.objects.count()\n    completed_todos = Todo.objects.filter(completed=True).count()\n    incomplete_todos = total_todos - completed_todos\n    context = {\n        'todos': todos,\n        'total_todos': total_todos,\n        'completed_todos': completed_todos,\n        'incomplete_todos': incomplete_todos,\n    }\n\n    return render(request, 'todo_app/todo_list.html', context)\n\ndef create_todo(request):\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        Todo.objects.create(title=title, description=description)\n    return redirect('todo_list')\n\ndef complete_todo(request, todo_id):\n    todo = Todo.objects.get(pk=todo_id)\n    todo.completed = True\n    todo.save()\n    return redirect('todo_list')\n\ndef delete_todo(request, todo_id):\n    todo = Todo.objects.get(pk=todo_id)\n    todo.delete()\n    return redirect('todo_list')\n\n\napp = DjangoDash('TodoAnalysis')\n\ndf = pd.DataFrame({\n    \"Task\": [\"Total\", \"Completed\", \"Incomplete\"],\n    \"Amount\": [0, 0, 0]  # Initial values, will be updated dynamically\n})\n\nfig = px.pie(df, values='Amount', names='Task', title='Todo Analysis')\n\napp.layout = html.Div(id='main_container', children=[\n    html.H1(id='title', children='Todo Analysis Dashboard'),\n    dcc.Graph(id='todo_chart', figure=fig)\n])\n\n\n# View to update the chart data\ndef update_chart(request):\n    total_todos = Todo.objects.count()\n    completed_todos = Todo.objects.filter(completed=True).count()\n    incomplete_todos = total_todos - completed_todos\n\n    app.layout.children[1].figure.data[0].values = [total_todos, completed_todos, incomplete_todos]\n\n    return redirect('todo_list')"}, {"file": "todo_app/urls.py", "path": "todo_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.todo_list, name='todo_list'),\n    path('create/', views.create_todo, name='create_todo'),\n    path('complete/<int:todo_id>/', views.complete_todo, name='complete_todo'),\n    path('delete/<int:todo_id>/', views.delete_todo, name='delete_todo'),\n    path('update_chart/', views.update_chart, name='update_chart'),\n]"}, {"file": "templates/todo_app/todo_list.html", "path": "templates/todo_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo App</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n        }\n        header {\n            background: #505050;\n            color: white;\n            padding-top: 30px;\n            min-height: 70px;\n            border-bottom: #bbb 1px solid;\n        }\n        header h1 {\n            text-align: center;\n        }\n        main {\n            padding: 20px;\n        }\n        .todo-list {\n            list-style: none;\n            padding: 0;\n        }\n        .todo-item {\n            background: #fff;\n            border-bottom: #eee 1px dotted;\n            padding: 10px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        .todo-item a {\n            color: #e67e22;\n            text-decoration: none;\n            margin-left: 10px;\n        }\n        .todo-item a:hover {\n            color: #d35400;\n        }\n        .add-todo-form {\n            margin-bottom: 20px;\n            background: #fff;\n            padding: 20px;\n            border-radius: 5px;\n        }\n        .add-todo-form input[type='text'],\n        .add-todo-form textarea {\n            width: 100%;\n            padding: 8px;\n            margin: 5px 0;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        .add-todo-form button {\n            background-color: #27ae60;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .add-todo-form button:hover {\n            background-color: #219651;\n        }\n        .chart-container {\n            margin-top: 20px;\n            background: #fff;\n            padding: 20px;\n            border-radius: 5px;\n        }\n\n        .status-counts {\n            display: flex;\n            justify-content: space-around;\n            margin-bottom: 20px;\n        }\n\n        .status-counts div {\n            padding: 10px;\n            border-radius: 5px;\n            text-align: center;\n        }\n\n        .status-counts .total {\n            background-color: #3498db;\n            color: white;\n        }\n\n        .status-counts .completed {\n            background-color: #2ecc71;\n            color: white;\n        }\n\n        .status-counts .incomplete {\n            background-color: #e74c3c;\n            color: white;\n        }\n    </style>\n</head>\n<body>\n    <header id=\"main_header\" class=\"main-header\">\n        <div class=\"container\">\n            <h1 id=\"header_title\" class=\"header-title\">Todo App</h1>\n        </div>\n    </header>\n\n    <main id=\"main_content\" class=\"main-content\">\n        <div class=\"container\">\n            <section id=\"status_section\" class=\"status-counts\">\n                <div id=\"total_todos\" class=\"total\">Total: {{ total_todos }}</div>\n                <div id=\"completed_todos\" class=\"completed\">Completed: {{ completed_todos }}</div>\n                <div id=\"incomplete_todos\" class=\"incomplete\">Incomplete: {{ incomplete_todos }}</div>\n            </section>\n\n            <section id=\"add_todo_section\" class=\"add-todo-form\">\n                <h2 id=\"add_todo_title\" class=\"add-todo-title\">Add New Todo</h2>\n                <form id=\"add_todo_form\" method=\"post\" action=\"{% url 'create_todo' %}\">\n                    {% csrf_token %}\n                    <label for=\"title\">Title:</label>\n                    <input type=\"text\" id=\"title\" name=\"title\" required><br><br>\n                    <label for=\"description\">Description:</label>\n                    <textarea id=\"description\" name=\"description\"></textarea><br><br>\n                    <button type=\"submit\">Add Todo</button>\n                </form>\n            </section>\n\n            <section id=\"todo_list_section\" class=\"todo-list-section\">\n                <h2 id=\"todo_list_title\" class=\"todo-list-title\">Todos</h2>\n                <ul id=\"todo_list\" class=\"todo-list\">\n                    {% for todo in todos %}\n                        <li id=\"todo_item_{{ todo.id }}\" class=\"todo-item\">\n                            <span>{{ todo.title }} - {{ todo.description }}</span>\n                            <div>\n                                {% if not todo.completed %}\n                                    <a id=\"complete_link_{{ todo.id }}\" href=\"{% url 'complete_todo' todo.id %}\">Complete</a>\n                                {% endif %}\n                                <a id=\"delete_link_{{ todo.id }}\" href=\"{% url 'delete_todo' todo.id %}\">Delete</a>\n                            </div>\n                        </li>\n                    {% endfor %}\n                </ul>\n            </section>\n\n            <section id=\"chart_section\" class=\"chart-container\">\n                <h2 id=\"chart_title\" class=\"chart-title\">Todo Analysis Chart</h2>\n                {% load plotly_dash %}\n                {% plotly_app name=\"TodoAnalysis\" slug=\"TodoAnalysis\" %}\n                <a href=\"{% url 'update_chart' %}\">Update Chart Data</a>\n            </section>\n        </div>\n    </main>\n</body>\n</html>"}, {"file": "static/todo_app/style.css", "path": "static/todo_app/", "code": "/* Example CSS - Customize as needed */\nbody {\n    font-family: sans-serif;\n}\n"}], "8": [{"file": "manage.py", "path": "calendar_project/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "calendar_project/", "code": "default_app_config = 'calendar_app.apps.CalendarAppConfig'"}, {"file": "settings.py", "path": "calendar_project/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "calendar_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "calendar_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calendar_app/", "code": "default_app_config = 'calendar_app.apps.CalendarAppConfig'"}, {"file": "apps.py", "path": "calendar_app/", "code": "from django.apps import AppConfig\n\n\nclass CalendarAppConfig(AppConfig):\n    name = 'calendar_app'"}, {"file": "models.py", "path": "calendar_app/", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/", "code": "import calendar\nfrom datetime import datetime, timedelta\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.urls import reverse\nfrom .models import Event\n\ndef get_date(req_data):\n    if req_data:\n        year, month = (int(req_data.split('-')[0]), int(req_data.split('-')[1]))\n        return year, month\n    return datetime.now().year, datetime.now().month\n\ndef prev_month(d):\n    first = d.replace(day=1)\n    prev_month = first - timedelta(days=1)\n    month = 'month=' + str(prev_month.year) + '-' + str(prev_month.month)\n    return month\n\n\ndef next_month(d):\n    days_in_month = calendar.monthrange(d.year, d.month)[1]\n    last = d.replace(day=days_in_month)\n    next_month = last + timedelta(days=1)\n    month = 'month=' + str(next_month.year) + '-' + str(next_month.month)\n    return month\n\ndef calendar_view(request):\n    year, month = get_date(request.GET.get('month', None))\n    d = datetime(year=year, month=month, day=1)\n    cal = calendar.HTMLCalendar().formatmonth(year, month)\n    prev_m = prev_month(d)\n    next_m = next_month(d)\n    context = {\n        'calendar': cal,\n        'prev_month': prev_m,\n        'next_month': next_m,\n        'year': year,\n        'month': month,\n    }\n    return render(request, 'calendar_app/calendar.html', context)\n"}, {"file": "urls.py", "path": "calendar_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar'),\n]"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n        }\n        #calendar-container {\n            width: 80%;\n            margin: 20px auto;\n            border: 1px solid #ccc;\n        }\n\n        #calendar-header {\n            background-color: #f0f0f0;\n            padding: 10px;\n            text-align: center;\n        }\n\n        #calendar-header a {\n            text-decoration: none;\n            color: #333;\n            margin: 0 10px;\n        }\n\n        #calendar-table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        #calendar-table th,\n        #calendar-table td {\n            border: 1px solid #ccc;\n            padding: 8px;\n            text-align: center;\n        }\n\n        #calendar-table th {\n            background-color: #eee;\n        }\n\n        #calendar-table td a {\n            display: block;\n            padding: 5px;\n            text-decoration: none;\n            color: blue;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"container\">\n        <div id=\"calendar-header\" class=\"header\">\n            <a id=\"prev-month-link\" class=\"prev-month\" href=\"{% url 'calendar' %}?{{ prev_month }}\">&lt; Previous</a>\n            <span id=\"current-month\" class=\"current-month\">{{ month }}/{{year}}</span>\n            <a id=\"next-month-link\" class=\"next-month\" href=\"{% url 'calendar' %}?{{ next_month }}\">Next &gt;</a>\n        </div>\n        <div id=\"calendar-body\" class=\"body\">{{ calendar|safe }}</div>\n    </div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "static/", "code": ""}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "calorie_tracker/calorie_tracker/__init__.py", "code": " \"\"\"Package initializer.\"\"\""}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] "}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')), # Include the tracker app's URLs\n]"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calorie_tracker/tracker/__init__.py", "code": " \"\"\"Package initializer.\"\"\""}, {"file": "admin.py", "path": "calorie_tracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Food, Meal\n\nadmin.site.register(Food)\nadmin.site.register(Meal)"}, {"file": "apps.py", "path": "calorie_tracker/tracker/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TrackerConfig(AppConfig):\n    name = 'tracker'"}, {"file": "forms.py", "path": "calorie_tracker/tracker/forms.py", "code": "from django import forms\nfrom .models import Meal, Food\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = ['date', 'time', 'foods']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'})\n        }\n\nclass FoodForm(forms.ModelForm):\n    class Meta:\n        model = Food\n        fields = ['name', 'calories', 'protein', 'carbs', 'fat']\n"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\n\nclass Food(models.Model):\n    name = models.CharField(max_length=100)\n    calories = models.IntegerField()\n    protein = models.FloatField()\n    carbs = models.FloatField()\n    fat = models.FloatField()\n\n    def __str__(self):\n        return self.name\n\nclass Meal(models.Model):\n    date = models.DateField()\n    time = models.TimeField()\n    foods = models.ManyToManyField(Food, related_name='meals')\n\n    def total_calories(self):\n        return sum(food.calories for food in self.foods.all())\n\n    def __str__(self):\n        return f'Meal on {self.date} at {self.time}'"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.meal_list, name='meal_list'),\n    path('meal/new/', views.meal_new, name='meal_new'),\n    path('meal/<int:pk>/', views.meal_detail, name='meal_detail'),\n    path('meal/<int:pk>/edit/', views.meal_edit, name='meal_edit'),\n    path('meal/<int:pk>/delete/', views.meal_delete, name='meal_delete'),\n    path('food/new/', views.food_new, name='food_new'),\n    path('analysis/', views.calorie_analysis, name='calorie_analysis'),\n]"}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Meal, Food\nfrom .forms import MealForm, FoodForm\nfrom django.db.models import Sum\n\n\ndef meal_list(request):\n    meals = Meal.objects.all().order_by('-date', '-time')\n    return render(request, 'tracker/meal_list.html', {'meals': meals})\n\n\ndef meal_detail(request, pk):\n    meal = get_object_or_404(Meal, pk=pk)\n    return render(request, 'tracker/meal_detail.html', {'meal': meal})\n\n\ndef meal_new(request):\n    if request.method == \"POST\":\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save()\n            return redirect('meal_detail', pk=meal.pk)\n    else:\n        form = MealForm()\n    return render(request, 'tracker/meal_edit.html', {'form': form, 'title': 'New Meal'})\n\n\ndef meal_edit(request, pk):\n    meal = get_object_or_404(Meal, pk=pk)\n    if request.method == \"POST\":\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            meal = form.save()\n            return redirect('meal_detail', pk=meal.pk)\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'tracker/meal_edit.html', {'form': form, 'title': 'Edit Meal'})\n\n\ndef meal_delete(request, pk):\n    meal = get_object_or_404(Meal, pk=pk)\n    meal.delete()\n    return redirect('meal_list')\n\n\ndef food_new(request):\n    if request.method == \"POST\":\n        form = FoodForm(request.POST)\n        if form.is_valid():\n            food = form.save()\n            return redirect('meal_list') # Or wherever you want to redirect after food creation\n    else:\n        form = FoodForm()\n    return render(request, 'tracker/food_edit.html', {'form': form, 'title': 'New Food'})\n\n\ndef calorie_analysis(request):\n    # Calculate total calories per day\n    daily_calories = {}\n    meals = Meal.objects.all()\n    for meal in meals:\n        date_str = str(meal.date)\n        if date_str not in daily_calories:\n            daily_calories[date_str] = 0\n        daily_calories[date_str] += meal.total_calories()\n\n    dates = list(daily_calories.keys())\n    calories = list(daily_calories.values())\n\n    context = {\n        'dates': dates,\n        'calories': calories,\n    }\n\n    return render(request, 'tracker/calorie_analysis.html', context)"}, {"file": "meal_list.html", "path": "calorie_tracker/templates/tracker/meal_list.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n    <div id=\"mealListContainer\" class=\"container\">\n        <h1 id=\"mealListTitle\" class=\"text-center\">Meal List</h1>\n        <a id=\"addMealButton\" class=\"btn btn-primary mb-3\" href=\"{% url 'meal_new' %}\">Add Meal</a>\n        <a id=\"addFoodButton\" class=\"btn btn-secondary mb-3\" href=\"{% url 'food_new' %}\">Add Food</a>\n        <a id=\"calorieAnalysisButton\" class=\"btn btn-info mb-3\" href=\"{% url 'calorie_analysis' %}\">Calorie Analysis</a>\n\n        {% for meal in meals %}\n            <div id=\"mealItem{{ meal.pk }}\" class=\"card mb-3\">\n                <div class=\"card-body\">\n                    <h5 id=\"mealDate{{ meal.pk }}\" class=\"card-title\">Date: {{ meal.date }}</h5>\n                    <p id=\"mealTime{{ meal.pk }}\" class=\"card-text\">Time: {{ meal.time }}</p>\n                    <p id=\"mealCalories{{ meal.pk }}\" class=\"card-text\">Total Calories: {{ meal.total_calories }}</p>\n                    <p class=\"card-text\">Foods:\n                        <ul id=\"mealFoodsList{{meal.pk}}\">\n                        {% for food in meal.foods.all %}\n                            <li id=\"mealFoodItem{{ food.pk }}\">{{ food.name }} ({{food.calories}} cal)</li>\n                        {% endfor %}\n                        </ul>\n                    </p>\n                    <a id=\"mealDetailLink{{ meal.pk }}\" href=\"{% url 'meal_detail' meal.pk %}\" class=\"btn btn-primary\">View Details</a>\n                    <a id=\"mealEditLink{{ meal.pk }}\" href=\"{% url 'meal_edit' meal.pk %}\" class=\"btn btn-secondary\">Edit</a>\n                    <a id=\"mealDeleteLink{{ meal.pk }}\" href=\"{% url 'meal_delete' meal.pk %}\" class=\"btn btn-danger\">Delete</a>\n                </div>\n            </div>\n        {% endfor %}\n    </div>\n{% endblock %}"}, {"file": "meal_detail.html", "path": "calorie_tracker/templates/tracker/meal_detail.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n    <div id=\"mealDetailContainer\" class=\"container\">\n        <h1 id=\"mealDetailTitle\" class=\"text-center\">Meal Details</h1>\n        <div id=\"mealDetailCard\" class=\"card\">\n            <div class=\"card-body\">\n                <h5 id=\"mealDate\" class=\"card-title\">Date: {{ meal.date }}</h5>\n                <p id=\"mealTime\" class=\"card-text\">Time: {{ meal.time }}</p>\n                <p id=\"mealCalories\" class=\"card-text\">Total Calories: {{ meal.total_calories }}</p>\n                <p class=\"card-text\">Foods:\n                  <ul id=\"mealFoodsDetailList\">\n                    {% for food in meal.foods.all %}\n                        <li id=\"mealFoodDetailItem{{ food.pk }}\">{{ food.name }} ({{food.calories}} cal)</li>\n                    {% endfor %}\n                  </ul>\n\n                </p>\n                <a id=\"mealEditButton\" href=\"{% url 'meal_edit' meal.pk %}\" class=\"btn btn-primary\">Edit</a>\n                <a id=\"mealDeleteButton\" href=\"{% url 'meal_delete' meal.pk %}\" class=\"btn btn-danger\">Delete</a>\n                <a id=\"mealListButton\" href=\"{% url 'meal_list' %}\" class=\"btn btn-secondary\">Back to Meal List</a>\n            </div>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "meal_edit.html", "path": "calorie_tracker/templates/tracker/meal_edit.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n    <div id=\"mealEditContainer\" class=\"container\">\n        <h1 id=\"mealEditTitle\" class=\"text-center\">{{ title }}</h1>\n        <form id=\"mealForm\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"mealSaveButton\" type=\"submit\" class=\"btn btn-primary\">Save</button>\n            <a id=\"mealCancelButton\" href=\"{% url 'meal_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "food_edit.html", "path": "calorie_tracker/templates/tracker/food_edit.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n    <div id=\"foodEditContainer\" class=\"container\">\n        <h1 id=\"foodEditTitle\" class=\"text-center\">{{ title }}</h1>\n        <form id=\"foodForm\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"foodSaveButton\" type=\"submit\" class=\"btn btn-primary\">Save</button>\n            <a id=\"foodCancelButton\" href=\"{% url 'meal_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "calorie_tracker/templates/tracker/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calorie Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <nav id=\"mainNav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a id=\"navBrand\" class=\"navbar-brand\" href=\"{% url 'meal_list' %}\">Calorie Tracker</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a id=\"navMealList\" class=\"nav-link\" href=\"{% url 'meal_list' %}\">Meals</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a  id=\"navNewMeal\"class=\"nav-link\" href=\"{% url 'meal_new' %}\">Add Meal</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a id=\"navNewFood\" class=\"nav-link\" href=\"{% url 'food_new' %}\">Add Food</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a id=\"navAnalysis\" class=\"nav-link\" href=\"{% url 'calorie_analysis' %}\">Analysis</a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n    <div id=\"contentContainer\" class=\"container mt-4\">\n        {% block content %}{% endblock %}\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    {% block scripts %}{% endblock %}\n</body>\n</html>"}, {"file": "calorie_analysis.html", "path": "calorie_tracker/templates/tracker/calorie_analysis.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n    <div id=\"analysisContainer\" class=\"container\">\n        <h1 id=\"analysisTitle\" class=\"text-center\">Calorie Analysis</h1>\n        <canvas id=\"calorieChart\" width=\"400\" height=\"200\"></canvas>\n    </div>\n\n{% endblock %}\n\n{% block scripts %}\n    <script>\n        var dates = {{ dates|safe }};\n        var calories = {{ calories|safe }};\n\n        var ctx = document.getElementById('calorieChart').getContext('2d');\n        var myChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: dates,\n                datasets: [{\n                    label: 'Calories Consumed',\n                    data: calories,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n{% endblock %}"}, {"file": "style.css", "path": "calorie_tracker/static/css/style.css", "code": "/* Example CSS - Add your own styles */\nbody {\n    font-family: sans-serif;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.card {\n    border: 1px solid #ccc;\n    margin-bottom: 15px;\n}\n\n.card-body {\n    padding: 15px;\n}\n\n.btn {\n    margin-right: 5px;\n}\n"}], "11": [{"file": "manage.py", "path": "", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "review_tool/settings.py", "path": "review_tool/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_tool.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_tool.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "review_tool/urls.py", "path": "review_tool/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review.urls')),\n]"}, {"file": "review_tool/wsgi.py", "path": "review_tool/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n\napplication = get_wsgi_application()"}, {"file": "review/models.py", "path": "review/", "code": "from django.db import models\n\nclass Project(models.Model):\n    project_id = models.CharField(max_length=200)\n    project_type = models.CharField(max_length=200)\n    nl_prompt = models.TextField()\n\n    def __str__(self):\n        return self.project_id\n\nclass FrameworkTechnicalStack(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='framework_technical_stack')\n    language = models.CharField(max_length=200)\n    technical_stack = models.CharField(max_length=200)\n\nclass NLChecklist(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='nl_checklist')\n    page = models.CharField(max_length=200)\n    required = models.BooleanField(default=False)\n\nclass Function(models.Model):\n    nl_checklist = models.ForeignKey(NLChecklist, on_delete=models.CASCADE, related_name='function')\n    function = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    required = models.BooleanField(default=False)\n\nclass TestCode(models.Model):\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='testcode')\n    page = models.CharField(max_length=200)\n\nclass TestFunction(models.Model):\n    testcode = models.ForeignKey(TestCode, on_delete=models.CASCADE, related_name='function')\n    function = models.CharField(max_length=200)\n    test = models.TextField()\n    status = models.CharField(max_length=20, default='Select')\n\nclass Parameter(models.Model):\n    test_function = models.ForeignKey(TestFunction, on_delete=models.CASCADE, related_name='parameter')\n    name = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)"}, {"file": "review/views.py", "path": "review/", "code": "import json\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .models import Project, FrameworkTechnicalStack, NLChecklist, Function, TestCode, TestFunction, Parameter\n\ndef load_data(request):\n    if request.method == 'POST':\n        data = json.loads(request.POST['json_data'])\n        for project_data in data:\n            project = Project.objects.create(\n                project_id=project_data['project_id'],\n                project_type=project_data['project_type'],\n                nl_prompt=project_data['nl_prompt']\n            )\n\n            for stack_data in project_data['framework_technical_stack']:\n                FrameworkTechnicalStack.objects.create(\n                    project=project,\n                    language=stack_data['language'],\n                    technical_stack=stack_data['technical_stack']\n                )\n\n            for checklist_data in project_data['nl_checklist']:\n                nl_checklist = NLChecklist.objects.create(\n                    project=project,\n                    page=checklist_data['page'],\n                    required=checklist_data['required']\n                )\n\n                for function_data in checklist_data['function']:\n                    Function.objects.create(\n                        nl_checklist=nl_checklist,\n                        function=function_data['function'],\n                        description=function_data['description'],\n                        required=function_data['required']\n                    )\n\n            for testcode_data in project_data['testcode']:\n                testcode = TestCode.objects.create(\n                    project=project,\n                    page=testcode_data['page']\n                )\n\n                for function_data in testcode_data['function']:\n                    test_function = TestFunction.objects.create(\n                        testcode=testcode,\n                        function=function_data['function'],\n                        test=function_data['test']\n                    )\n\n                    for parameter_data in function_data['parameter']:\n                        Parameter.objects.create(\n                            test_function=test_function,\n                            name=parameter_data['name'],\n                            description=parameter_data['description']\n                        )\n\n        return HttpResponse('Data loaded successfully!')\n    return render(request, 'review/load_data.html')\n\n\ndef review_list(request):\n    projects = Project.objects.all()\n    return render(request, 'review/project_list.html', {'projects': projects})\n\ndef review_detail(request, project_id):\n    project = Project.objects.get(pk=project_id)\n    testcodes = TestCode.objects.filter(project=project)\n    return render(request, 'review/review_detail.html', {'project': project, 'testcodes': testcodes})\n\ndef update_status(request, test_function_id):\n    if request.method == 'POST':\n        new_status = request.POST.get('status')\n        test_function = TestFunction.objects.get(pk=test_function_id)\n        test_function.status = new_status\n        test_function.save()\n        return redirect('review_detail', project_id=test_function.testcode.project.id)\n    else:\n        return HttpResponse('Method not allowed', status=405)\n\n"}, {"file": "review/urls.py", "path": "review/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('load_data/', views.load_data, name='load_data'),\n    path('', views.review_list, name='review_list'),\n    path('project/<int:project_id>/', views.review_detail, name='review_detail'),\n    path('update_status/<int:test_function_id>/', views.update_status, name='update_status'),\n]"}, {"file": "review/templates/review/load_data.html", "path": "review/templates/review/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Load Data</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        form {\n            margin-top: 20px;\n        }\n        textarea {\n            width: 80%;\n            height: 200px;\n            padding: 10px;\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #3e8e41;\n        }\n    </style>\n</head>\n<body>\n    <h1>Load JSON Data</h1>\n    <form method=\"post\" action=\"{% url 'load_data' %}\">\n        {% csrf_token %}\n        <textarea id=\"json_data\" name=\"json_data\" placeholder=\"Paste your JSON data here\"></textarea>\n        <br>\n        <button type=\"submit\">Load Data</button>\n    </form>\n</body>\n</html>"}, {"file": "review/templates/review/project_list.html", "path": "review/templates/review/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Project List</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        ul {\n            list-style-type: none;\n            padding: 0;\n        }\n        li {\n            margin-bottom: 10px;\n            border: 1px solid #ddd;\n            padding: 10px;\n        }\n        a {\n            text-decoration: none;\n            color: #007bff;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <h1>Project List</h1>\n    <ul id=\"project-list\" class=\"project-list\">\n        {% for project in projects %}\n            <li class=\"project-item\" id=\"project-item-{{ project.id }}\">\n                <a href=\"{% url 'review_detail' project.id %}\" class=\"project-link\" id=\"project-link-{{ project.id }}\">Project ID: {{ project.project_id }}</a>\n            </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "review/templates/review/review_detail.html", "path": "review/templates/review/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Review Detail</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        h2 {\n            margin-top: 20px;\n        }\n        .test-code-section {\n            margin-bottom: 20px;\n            border: 1px solid #ddd;\n            padding: 10px;\n        }\n        .test-code-title {\n            font-weight: bold;\n        }\n        .test-code-text {\n            white-space: pre-wrap;\n            font-family: monospace;\n        }\n        .status-form {\n            margin-top: 10px;\n        }\n        .status-select {\n            padding: 5px;\n        }\n        .status-button {\n            background-color: #007bff;\n            color: white;\n            padding: 5px 10px;\n            border: none;\n            cursor: pointer;\n        }\n        .status-button:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <h1>Project ID: {{ project.project_id }}</h1>\n    <h2>Project Type: {{ project.project_type }}</h2>\n    <p><strong>NL Prompt:</strong> {{ project.nl_prompt }}</p>\n\n    {% for testcode in testcodes %}\n        <section class=\"test-code-section\" id=\"test-code-section-{{ testcode.id }}\">\n            <h2>Page: {{ testcode.page }}</h2>\n            {% for test_function in testcode.function.all %}\n                <div class=\"test-function\" id=\"test-function-{{ test_function.id }}\">\n                    <div class=\"test-code-title\">Function: {{ test_function.function }}</div>\n                    <div class=\"test-code-text\">{{ test_function.test }}</div>\n                    <form method=\"post\" action=\"{% url 'update_status' test_function.id %}\" class=\"status-form\" id=\"status-form-{{ test_function.id }}\">\n                        {% csrf_token %}\n                        <label for=\"status\">Status:</label>\n                        <select name=\"status\" id=\"status-{{ test_function.id }}\" class=\"status-select\">\n                            <option value=\"Select\" {% if test_function.status == 'Select' %}selected{% endif %}>Select</option>\n                            <option value=\"Pass\" {% if test_function.status == 'Pass' %}selected{% endif %}>Pass</option>\n                            <option value=\"Fail\" {% if test_function.status == 'Fail' %}selected{% endif %}>Fail</option>\n                        </select>\n                        <button type=\"submit\" class=\"status-button\" id=\"status-button-{{ test_function.id }}\">Update Status</button>\n                    </form>\n                </div>\n            {% endfor %}\n        </section>\n    {% endfor %}\n</body>\n</html>"}, {"file": "review/static/review/style.css", "path": "review/static/review/", "code": "/* Add your CSS styling here */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 20px;\n}\n\nh1 {\n    color: #333;\n}\n\n.test-code-section {\n    margin-bottom: 20px;\n    border: 1px solid #ddd;\n    padding: 10px;\n}\n\n.test-code-title {\n    font-weight: bold;\n}\n\n.test-code-text {\n    white-space: pre-wrap;\n    font-family: monospace;\n}\n\n.status-form {\n    margin-top: 10px;\n}\n\n.status-select {\n    padding: 5px;\n}\n\n.status-button {\n    background-color: #007bff;\n    color: white;\n    padding: 5px 10px;\n    border: none;\n    cursor: pointer;\n}\n\n.status-button:hover {\n    background-color: #0056b3;\n}\n"}], "12": [{"file": "manage_expenses/settings.py", "path": "manage_expenses/manage_expenses/settings.py", "code": "# Django settings for manage_expenses project.\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expenses',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'manage_expenses.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'manage_expenses.wsgi.application'\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "manage_expenses/urls.py", "path": "manage_expenses/manage_expenses/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('expenses/', include('expenses.urls')),\n]"}, {"file": "manage_expenses/wsgi.py", "path": "manage_expenses/manage_expenses/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'manage_expenses.settings')\n\napplication = get_wsgi_application()"}, {"file": "expenses/models.py", "path": "manage_expenses/expenses/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nEXPENSE_CATEGORIES = [\n    ('Travel', 'Travel Expenses'),\n    ('Labor', 'Labor Expenses'),\n    ('Management', 'Management Expenses'),\n    ('Equipment', 'Equipment Expenses'),\n]\n\nSTATUS_CHOICES = [\n    ('Pending', 'Pending'),\n    ('Approved', 'Approved'),\n    ('Rejected', 'Rejected'),\n]\n\nclass ExpenseClaim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=20, choices=EXPENSE_CATEGORIES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submission_date = models.DateField(auto_now_add=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')\n    approved_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True, related_name='approved_claims')\n    approval_date = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return f'{self.employee.username} - {self.category} - {self.amount}'\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=20, choices=EXPENSE_CATEGORIES, unique=True)\n    budget_amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.category} Budget: {self.budget_amount}'"}, {"file": "expenses/admin.py", "path": "manage_expenses/expenses/admin.py", "code": "from django.contrib import admin\nfrom .models import ExpenseClaim, Budget\n\nadmin.site.register(ExpenseClaim)\nadmin.site.register(Budget)"}, {"file": "expenses/forms.py", "path": "manage_expenses/expenses/forms.py", "code": "from django import forms\nfrom .models import ExpenseClaim\n\nclass ExpenseClaimForm(forms.ModelForm):\n    class Meta:\n        model = ExpenseClaim\n        fields = ['category', 'amount', 'description']\n"}, {"file": "expenses/views.py", "path": "manage_expenses/expenses/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required, user_passes_test\nfrom .forms import ExpenseClaimForm\nfrom .models import ExpenseClaim, Budget, STATUS_CHOICES\nfrom django.contrib import messages\nfrom django.db.models import Sum\nfrom django.urls import reverse\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ExpenseClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            messages.success(request, 'Expense claim submitted successfully!')\n            return redirect('expenses:submit_claim') # Redirect to the same page\n    else:\n        form = ExpenseClaimForm()\n    return render(request, 'expenses/submit_claim.html', {'form': form})\n\n@login_required\n@user_passes_test(lambda u: u.is_staff)\ndef admin_dashboard(request):\n    claims = ExpenseClaim.objects.all()\n    return render(request, 'expenses/admin_dashboard.html', {'claims': claims, 'status_choices': STATUS_CHOICES})\n\n@login_required\n@user_passes_test(lambda u: u.is_staff)\ndef approve_reject_claim(request, claim_id, action):\n    claim = get_object_or_404(ExpenseClaim, pk=claim_id)\n\n    if action == 'approve':\n        claim.status = 'Approved'\n        claim.approved_by = request.user\n        claim.save()\n        messages.success(request, f'Claim {claim_id} approved.')\n    elif action == 'reject':\n        claim.status = 'Rejected'\n        claim.approved_by = request.user # Optional: You might want to record who rejected it.\n        claim.save()\n        messages.success(request, f'Claim {claim_id} rejected.')\n\n    return redirect('expenses:admin_dashboard')\n\n\n@login_required\n@user_passes_test(lambda u: u.is_staff)\ndef budget_control(request):\n    budgets = Budget.objects.all()\n    budget_data = []\n\n    for budget in budgets:\n        spent_amount = ExpenseClaim.objects.filter(category=budget.category, status='Approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        remaining_amount = budget.budget_amount - spent_amount\n        budget_data.append({\n            'category': budget.category,\n            'budget_amount': budget.budget_amount,\n            'spent_amount': spent_amount,\n            'remaining_amount': remaining_amount,\n        })\n\n    context = {\n        'budget_data': budget_data,\n    }\n\n    return render(request, 'expenses/budget_control.html', context)\n"}, {"file": "expenses/urls.py", "path": "manage_expenses/expenses/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'expenses'\n\nurlpatterns = [\n    path('submit/', views.submit_claim, name='submit_claim'),\n    path('admin_dashboard/', views.admin_dashboard, name='admin_dashboard'),\n    path('approve_reject/<int:claim_id>/<str:action>/', views.approve_reject_claim, name='approve_reject_claim'),\n    path('budget_control/', views.budget_control, name='budget_control'),\n]"}, {"file": "templates/expenses/submit_claim.html", "path": "manage_expenses/templates/expenses/submit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div class=\"container\">\n    <h1 id=\"submit-claim-heading\" class=\"mt-4 mb-4\">Submit Expense Claim</h1>\n    <form id=\"expense-form\" method=\"post\">\n      {% csrf_token %}\n      {% if form.errors %}\n        <div id=\"form-errors\" class=\"alert alert-danger\">\n            Please correct the errors below.\n        </div>\n      {% endif %}\n\n      <div class=\"mb-3\">\n        <label for=\"id_category\" class=\"form-label\">Category:</label>\n        {{ form.category }}\n        {% if form.category.errors %}\n            <div class=\"text-danger\">{{ form.category.errors.as_text }}</div>\n        {% endif %}\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"id_amount\" class=\"form-label\">Amount:</label>\n        {{ form.amount }}\n        {% if form.amount.errors %}\n            <div class=\"text-danger\">{{ form.amount.errors.as_text }}</div>\n        {% endif %}\n      </div>\n\n      <div class=\"mb-3\">\n        <label for=\"id_description\" class=\"form-label\">Description:</label>\n        {{ form.description }}\n        {% if form.description.errors %}\n            <div class=\"text-danger\">{{ form.description.errors.as_text }}</div>\n        {% endif %}\n      </div>\n\n      <button type=\"submit\" id=\"submit-button\" class=\"btn btn-primary\">Submit</button>\n    </form>\n\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n  </div>\n{% endblock %}\n"}, {"file": "templates/expenses/admin_dashboard.html", "path": "manage_expenses/templates/expenses/admin_dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div class=\"container\">\n    <h1 id=\"admin-dashboard-heading\" class=\"mt-4 mb-4\">Admin Dashboard</h1>\n\n    {% if messages %}\n        <div class=\"messages\">\n            {% for message in messages %}\n                <div class=\"alert alert-{% if message.tags == 'success' %}success{% elif message.tags == 'error' %}danger{% endif %}\">{{ message }}</div>\n            {% endfor %}\n        </div>\n    {% endif %}\n\n    <table id=\"claims-table\" class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>Employee</th>\n          <th>Category</th>\n          <th>Amount</th>\n          <th>Description</th>\n          <th>Submission Date</th>\n          <th>Status</th>\n          <th>Actions</th>\n        </tr>\n      </thead>\n      <tbody>\n        {% for claim in claims %}\n          <tr>\n            <td>{{ claim.employee.username }}</td>\n            <td>{{ claim.category }}</td>\n            <td>{{ claim.amount }}</td>\n            <td>{{ claim.description }}</td>\n            <td>{{ claim.submission_date }}</td>\n            <td>{{ claim.status }}</td>\n            <td>\n              {% if claim.status == 'Pending' %}\n                <a id=\"approve-{{ claim.id }}\" href=\"{% url 'expenses:approve_reject_claim' claim.id 'approve' %}\" class=\"btn btn-success btn-sm\">Approve</a>\n                <a id=\"reject-{{ claim.id }}\" href=\"{% url 'expenses:approve_reject_claim' claim.id 'reject' %}\" class=\"btn btn-danger btn-sm\">Reject</a>\n              {% endif %}\n            </td>\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n  </div>\n{% endblock %}\n"}, {"file": "templates/expenses/budget_control.html", "path": "manage_expenses/templates/expenses/budget_control.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container\">\n    <h1 id=\"budget-control-heading\" class=\"mt-4 mb-4\">Budget Control</h1>\n\n    <table id=\"budget-table\" class=\"table table-striped\">\n        <thead>\n            <tr>\n                <th>Category</th>\n                <th>Budget Amount</th>\n                <th>Spent Amount</th>\n                <th>Remaining Amount</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for data in budget_data %}\n            <tr>\n                <td>{{ data.category }}</td>\n                <td>{{ data.budget_amount }}</td>\n                <td>{{ data.spent_amount }}</td>\n                <td>{{ data.remaining_amount }}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}\n"}, {"file": "templates/base.html", "path": "manage_expenses/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Expense Management System{% endblock %}</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            padding-top: 20px;\n        }\n    </style>\n</head>\n<body>\n  <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <div class=\"container-fluid\">\n      <a class=\"navbar-brand\" href=\"#\">Expense Tracker</a>\n      <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span class=\"navbar-toggler-icon\"></span>\n      </button>\n      <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n        <ul class=\"navbar-nav\">\n          {% if user.is_authenticated %}\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"{% url 'expenses:submit_claim' %}\">Submit Claim</a>\n            </li>\n            {% if user.is_staff %}\n              <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"{% url 'expenses:admin_dashboard' %}\">Admin Dashboard</a>\n              </li>\n              <li class=\"nav-item\">\n                <a class=\"nav-link\" href=\"{% url 'expenses:budget_control' %}\">Budget Control</a>\n              </li>\n            {% endif %}\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"{% url 'admin:logout' %}\">Logout</a>\n            </li>\n          {% else %}\n            <li class=\"nav-item\">\n              <a class=\"nav-link\" href=\"{% url 'admin:login' %}\">Login</a>\n            </li>\n          {% endif %}\n        </ul>\n      </div>\n    </div>\n  </nav>\n\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "helloworld_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "helloworld_project/helloworld_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "helloworld_project/helloworld_project/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] \n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "helloworld_project/helloworld_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworld_app.urls')), # Include helloworld_app urls\n]"}, {"file": "wsgi.py", "path": "helloworld_project/helloworld_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "helloworld_project/helloworld_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "helloworld_project/helloworld_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "helloworld_project/helloworld_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloworldAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworld_app'"}, {"file": "models.py", "path": "helloworld_project/helloworld_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "helloworld_project/helloworld_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'), # Define the root URL to call hello_world view\n]"}, {"file": "views.py", "path": "helloworld_project/helloworld_app/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'helloworld_app/helloworld.html')"}, {"file": "helloworld.html", "path": "helloworld_project/helloworld_app/templates/helloworld_app/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello, World!</title>\n</head>\n<body>\n    <h1 id=\"hello-heading\" class=\"main-heading\">Hello, World!</h1>\n    <p id=\"hello-paragraph\" class=\"content-paragraph\">This is a simple \"Hello, World!\" webpage created with Django.</p>\n</body>\n</html>"}], "16": [{"file": "create_subject_table.bat", "path": "create_subject_table.bat", "code": "@echo off\n\nREM Check if Python is installed\nwhere python >nul 2>&1\nif %errorlevel% neq 0 (\n  echo Python is not installed. Please install Python and add it to your PATH.\n  pause\n  exit /b 1\n)\n\nREM Create virtual environment if it doesn't exist\nif not exist .venv ( \n    echo Creating virtual environment...\n    python -m venv .venv\n)\n\nREM Activate virtual environment\ncall .venv\\Scripts\\activate\n\nREM Install required Python packages\npip install openpyxl\n\nREM Run Python script to process the Excel file\npython process_excel.py\n\nREM Deactivate virtual environment (optional, but good practice)\ndeactivate\n\necho Script finished. Output saved to \"subject_table.xlsx\".\npause"}, {"file": "process_excel.py", "path": "process_excel.py", "code": "import openpyxl\n\n# Input and output file names\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"subject_table.xlsx\"\n\n# Possible time slots\ntime_slots = [\"First period\", \"Second period\", \"Third period\", \"Fourth period\"]\n\n# Load the workbook and select the active sheet\nworkbook = openpyxl.load_workbook(input_file)\nsheet = workbook.active\n\n# Get the subjects\nsubjects = []\nfor row in range(2, sheet.max_row + 1):\n    subject_name = sheet.cell(row=row, column=2).value\n    subjects.append(subject_name)\n\n# Get the weekdays\nweekdays = []\nfor row in range(2, sheet.max_row + 1):\n    weekday = sheet.cell(row=row, column=3).value\n    if weekday not in weekdays:\n        weekdays.append(weekday)\nweekdays.sort()\n\n# Create a new workbook and sheet for the table\noutput_workbook = openpyxl.Workbook()\noutput_sheet = output_workbook.active\n\n# Write headers\noutput_sheet.cell(row=1, column=1).value = \"Weekday\\\\Time\"\nfor i, time_slot in enumerate(time_slots):\n    output_sheet.cell(row=1, column=i + 2).value = time_slot\n\n# Write weekdays\nfor i, weekday in enumerate(weekdays):\n    output_sheet.cell(row=i + 2, column=1).value = weekday\n\n# Populate the table\nfor row in range(2, sheet.max_row + 1):\n    weekday = sheet.cell(row=row, column=3).value\n    time = sheet.cell(row=row, column=4).value\n    subject_name = sheet.cell(row=row, column=2).value\n\n    # Find the row and column for the cell\n    row_index = weekdays.index(weekday) + 2\n    col_index = time_slots.index(time) + 2\n\n    # Write the subject name to the cell\n    output_sheet.cell(row=row_index, column=col_index).value = subject_name\n\n# Save the output workbook\noutput_workbook.save(output_file)"}, {"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": "(Binary Excel file - This will be generated using Excel, not code. A simple example content is provided as textual description since the excel cannot be saved as text.)\n\nSheet content Example:\n#   Name           Weekday   Time\n1   Math 101       Monday   First period\n2   Physics 201    Tuesday  Second period\n3   Chemistry 101  Monday   Second period\n4   English 101    Wednesday Third period\n5   History 101    Thursday Fourth period\n6   Math 101       Tuesday  First period\n7   Physics 201    Wednesday Second period\n8   Chemistry 101  Thursday Third period\n9   English 101    Friday   Fourth period\n10  History 101    Monday   Third period\n11  Math 101       Wednesday First period\n12  Physics 201    Thursday Second period\n13  Chemistry 101  Friday   Third period\n14  English 101    Monday   Fourth period\n15  History 101    Tuesday  Third period\n16  Math 101       Thursday First period\n17  Physics 201    Friday   Second period\n18  Chemistry 101  Monday   First period\n19  English 101    Tuesday  Second period\n20  History 101    Wednesday Third period"}], "17": [{"file": "run_logistic_model.bat", "path": "run_logistic_model.bat", "code": "@echo off\n\nREM Install required packages if not already installed\npython -m pip show pandas >nul 2>&1\nif %errorlevel% neq 0 (pip install pandas)\n\npython -m pip show openpyxl >nul 2>&1\nif %errorlevel% neq 0 (pip install openpyxl)\n\npython -m pip show scikit-learn >nul 2>&1\nif %errorlevel% neq 0 (pip install scikit-learn)\n\n\necho Running the Logistic Regression Model...\npython logistic_model.py\n\necho Done.\npause"}, {"file": "logistic_model.py", "path": "logistic_model.py", "code": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm  # For detailed model summary\n\n\n# Load the data\ndata = pd.read_excel(\"Gamedata.xlsx\")\n\n# Create lagged 'result' column\ndata['result_lagged'] = data['result'].shift(1)\n\n# Drop the first row (which will have NaN for 'result_lagged')\ndata = data.dropna()\n\n# Define independent and dependent variables\nX = data.drop(['result', 'result_lagged'], axis=1)\ny = data['result']\n\n# Add a constant to the independent variables for statsmodels\nX = sm.add_constant(X)\n\n# Split data into training and testing sets (optional, but good practice)\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Fit the logistic regression model using statsmodels for detailed summary\nmodel = sm.Logit(y_train, X_train)\nresults = model.fit()\n\n# Print the model summary\nsummary = results.summary()\n\n# Save the summary to an Excel file\nwith pd.ExcelWriter(\"Logistic.xlsx\") as writer:\n    summary_df = pd.DataFrame([summary.as_text()], columns=['Summary'])\n    summary_df.to_excel(writer, sheet_name='Summary', index=False)\n\nprint(\"Logistic Regression model summary saved to Logistic.xlsx\")"}, {"file": "Gamedata.xlsx", "path": "Gamedata.xlsx", "code": "This file is the excel file, which cannot be presented here in plain text format.  It should contain data suitable for running logistic regression.  Example content is:\n\n```\n| feature1 | feature2 | feature3 | result |\n|----------|----------|----------|--------|\n| 1.0      | 2.0      | 3.0      | 0      |\n| 4.0      | 5.0      | 6.0      | 1      |\n| 7.0      | 8.0      | 9.0      | 0      |\n| 10.0     | 11.0     | 12.0     | 1      |\n| 13.0     | 14.0     | 15.0     | 0      |\n```\n\nReplace `feature1`, `feature2`, `feature3` with your actual feature names.\n'result' column should contain binary values (0 or 1).\nAdd more rows of data as needed."}], "20": [{"file": "settings.py", "path": "myblog/myblog/settings.py", "code": "# Django settings for myblog project.\n\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myblog.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myblog.wsgi.application'\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "myblog/myblog/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),  # Include the blog app's URLs\n]\n"}, {"file": "wsgi.py", "path": "myblog/myblog/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblog.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "models.py", "path": "myblog/blog/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Post(models.Model):\n    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    text = models.TextField()\n    created_date = models.DateTimeField(default=timezone.now)\n    published_date = models.DateTimeField(blank=True, null=True)\n\n    def publish(self):\n        self.published_date = timezone.now()\n        self.save()\n\n    def __str__(self):\n        return self.title\n"}, {"file": "views.py", "path": "myblog/blog/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Post\n\ndef post_list(request):\n    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('published_date')\n    return render(request, 'blog/post_list.html', {'posts': posts})\n\ndef post_detail(request, pk):\n    post = get_object_or_404(Post, pk=pk)\n    return render(request, 'blog/post_detail.html', {'post': post})\n"}, {"file": "urls.py", "path": "myblog/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.post_list, name='post_list'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n]\n"}, {"file": "post_list.html", "path": "myblog/templates/blog/post_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/blog.css' %}\">\n</head>\n<body>\n    <header id=\"blog-header\" class=\"blog-header\">\n        <h1 id=\"blog-title\" class=\"blog-title\">My Awesome Blog</h1>\n    </header>\n\n    <main id=\"blog-main\" class=\"blog-main\">\n        {% for post in posts %}\n            <article id=\"post-{{ post.pk }}\" class=\"post\">\n                <h2 id=\"post-title-{{ post.pk }}\" class=\"post-title\"><a href=\"{% url 'post_detail' pk=post.pk %}\" class=\"post-link\">{{ post.title }}</a></h2>\n                <p id=\"post-date-{{ post.pk }}\" class=\"post-date\">Published: {{ post.published_date }}</p>\n                <p id=\"post-text-{{ post.pk }}\" class=\"post-text\">{{ post.text|truncatechars:200 }}</p>\n            </article>\n        {% endfor %}\n    </main>\n\n    <footer id=\"blog-footer\" class=\"blog-footer\">\n        <p id=\"copyright\" class=\"copyright\">Copyright 2023</p>\n    </footer>\n</body>\n</html>"}, {"file": "post_detail.html", "path": "myblog/templates/blog/post_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ post.title }} - My Blog</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/blog.css' %}\">\n</head>\n<body>\n    <header id=\"blog-header\" class=\"blog-header\">\n        <h1 id=\"blog-title\" class=\"blog-title\">My Awesome Blog</h1>\n    </header>\n\n    <main id=\"blog-main\" class=\"blog-main\">\n        <article id=\"post-{{ post.pk }}\" class=\"post-detail\">\n            <h2 id=\"post-title-{{ post.pk }}\" class=\"post-title\">{{ post.title }}</h2>\n            <p id=\"post-date-{{ post.pk }}\" class=\"post-date\">Published: {{ post.published_date }}</p>\n            <p id=\"post-text-{{ post.pk }}\" class=\"post-text\">{{ post.text|linebreaksbr }}</p>\n        </article>\n    </main>\n\n    <footer id=\"blog-footer\" class=\"blog-footer\">\n        <p id=\"copyright\" class=\"copyright\">Copyright 2023</p>\n    </footer>\n</body>\n</html>"}, {"file": "blog.css", "path": "myblog/static/css/blog.css", "code": "/* Basic CSS for the blog */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.blog-header {\n    background-color: #333;\n    color: #fff;\n    padding: 1em;\n    text-align: center;\n}\n\n.blog-title {\n    margin: 0;\n}\n\n.blog-main {\n    padding: 1em;\n}\n\n.post {\n    background-color: #fff;\n    padding: 1em;\n    margin-bottom: 1em;\n    border: 1px solid #ddd;\n}\n\n.post-title {\n    margin-top: 0;\n}\n\n.post-date {\n    color: #777;\n    font-size: 0.8em;\n}\n\n.post-text {\n    line-height: 1.6;\n}\n\n.post-link {\n  text-decoration: none;\n}\n\n.blog-footer {\n    background-color: #333;\n    color: #fff;\n    text-align: center;\n    padding: 0.5em;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n}\n\n.copyright {\n    margin: 0;\n}\n\n.post-detail {\n    background-color: #fff;\n    padding: 1em;\n    margin-bottom: 1em;\n    border: 1px solid #ddd;\n}\n\n"}]}