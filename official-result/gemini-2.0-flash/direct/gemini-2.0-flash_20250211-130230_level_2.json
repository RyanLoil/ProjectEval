{"1": [{"file": "settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]"}, {"file": "urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),\n]"}, {"file": "wsgi.py", "path": "bmi_calculator/bmi_calculator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "bmi_calculator/calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calculate/', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "views.py", "path": "bmi_calculator/calculator/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef calculate_bmi(request):\n    if request.method == 'POST':\n        try:\n            height = float(request.POST['height'])\n            weight = float(request.POST['weight'])\n            unit_type = request.POST['unit_type']\n\n            if unit_type == 'metric':\n                bmi = weight / ((height / 100) ** 2)\n            elif unit_type == 'imperial':\n                bmi = (weight / (height ** 2)) * 703\n            else:\n                return render(request, 'bmi_calculator.html', {'error': 'Invalid unit type'}) # Corrected template name\n\n            bmi = round(bmi, 2)\n\n            if bmi < 18.5:\n                category = 'Underweight'\n            elif 18.5 <= bmi < 25:\n                category = 'Normal weight'\n            elif 25 <= bmi < 30:\n                category = 'Overweight'\n            else:\n                category = 'Obese'\n\n            return render(request, 'bmi_calculator.html', {'bmi': bmi, 'category': category}) # Corrected template name\n\n        except ValueError:\n            return render(request, 'bmi_calculator.html', {'error': 'Invalid input'}) # Corrected template name\n\n    return render(request, 'bmi_calculator.html') # Corrected template name"}, {"file": "models.py", "path": "bmi_calculator/calculator/models.py", "code": "from django.db import models\n\n# You can add models here if you need them"}, {"file": "admin.py", "path": "bmi_calculator/calculator/admin.py", "code": "from django.contrib import admin\n\n# You can register your models here"}, {"file": "home.html", "path": "bmi_calculator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator - Home</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n            padding: 20px;\n        }\n\n        h1 {\n            text-align: center;\n            color: #007bff;\n        }\n\n        p {\n            line-height: 1.6em;\n        }\n\n        .button {\n            display: inline-block;\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: #fff;\n            text-decoration: none;\n            border-radius: 5px;\n        }\n\n        .button:hover {\n            background-color: #0056b3;\n        }\n\n        .text-center {\n          text-align: center;\n        }\n\n    </style>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"home-title\">Welcome to the BMI Calculator</h1>\n        <p id=\"home-introduction\" class=\"home-introduction\">\n            This BMI calculator helps you determine your Body Mass Index (BMI) based on your height and weight. BMI is a useful measure to estimate a healthy body weight based on your height. It provides an indication of body fatness and can help identify potential weight problems in adults.\n        </p>\n        <div class=\"text-center\">\n            <a id=\"calculator-link\" class=\"button calculator-link\" href=\"/calculate/\">Go to BMI Calculator</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            width: 400px;\n            text-align: center;\n        }\n\n        h1 {\n            color: #333;\n        }\n\n        label {\n            display: block;\n            margin-top: 10px;\n            color: #666;\n        }\n\n        input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            margin-top: 5px;\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        select {\n            width: 100%;\n            padding: 8px;\n            margin-top: 5px;\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n\n        .result {\n            margin-top: 20px;\n            font-weight: bold;\n            color: #333;\n        }\n\n        .error {\n            color: red;\n            margin-top: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1 id=\"bmi-calculator-title\" class=\"bmi-calculator-title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" method=\"post\" action=\"{% url 'calculate_bmi' %}\">\n            {% csrf_token %}\n            <label id=\"height-label\" class=\"height-label\" for=\"height\">Height:</label>\n            <input id=\"height-input\" class=\"height-input\" type=\"number\" name=\"height\" required>\n\n            <label id=\"weight-label\" class=\"weight-label\" for=\"weight\">Weight:</label>\n            <input id=\"weight-input\" class=\"weight-input\" type=\"number\" name=\"weight\" required>\n\n            <label id=\"unit-type-label\" class=\"unit-type-label\" for=\"unit_type\">Unit Type:</label>\n            <select id=\"unit-type-select\" class=\"unit-type-select\" name=\"unit_type\">\n                <option value=\"metric\">Metric (cm, kg)</option>\n                <option value=\"imperial\">Imperial (inches, lbs)</option>\n            </select>\n\n            <button id=\"calculate-button\" class=\"calculate-button\" type=\"submit\">Calculate</button>\n        </form>\n\n        {% if bmi %}\n            <div id=\"bmi-result\" class=\"result\">\n                Your BMI: <span id=\"bmi-value\" class=\"bmi-value\">{{ bmi }}</span>\n            </div>\n            <div id=\"bmi-category\" class=\"result\">\n                Category: <span id=\"category-value\" class=\"category-value\">{{ category }}</span>\n            </div>\n        {% endif %}\n\n        {% if error %}\n            <div id=\"error-message\" class=\"error\">\n                {{ error }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "static.css", "path": "bmi_calculator/static/style.css", "code": "/* Add your static styles here */\nbody {\n    font-family: sans-serif;\n}"}], "3": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "password_generator/settings.py", "path": "password_generator/", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "password_generator/urls.py", "path": "password_generator/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('generator.urls')),\n]\n"}, {"file": "password_generator/wsgi.py", "path": "password_generator/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "generator/apps.py", "path": "generator/", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    name = 'generator'\n"}, {"file": "generator/urls.py", "path": "generator/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generated_password/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "generator/views.py", "path": "generator/", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\n\ndef generated_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters + string.digits  # Default if no options selected\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return render(request, 'generated_password.html', {'password': password})\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "templates/home.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"welcome-message\" class=\"title\">Welcome to the Password Generator!</h1>\n        <p id=\"home-description\" class=\"description\">Generate strong and secure passwords.</p>\n        <a id=\"generator-button\" class=\"button\" href=\"{% url 'password_options' %}\">Go to Password Generator</a>\n        <a id=\"about-button\" class=\"button\" href=\"{% url 'about' %}\">About</a>\n    </div>\n</body>\n</html>\n"}, {"file": "templates/password_options.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Options</title>\n</head>\n<body>\n    <div id=\"password-options-container\" class=\"container\">\n        <h1 id=\"options-title\" class=\"title\">Password Options</h1>\n        <form id=\"password-form\" action=\"{% url 'generated_password' %}\">\n            <label for=\"length\" id=\"length-label\" class=\"label\">Password Length:</label>\n            <input type=\"number\" id=\"length\" class=\"input\" name=\"length\" value=\"12\">\n            <br>\n            <input type=\"checkbox\" id=\"uppercase\" class=\"checkbox\" name=\"uppercase\">\n            <label for=\"uppercase\" id=\"uppercase-label\" class=\"label\">Include Uppercase</label>\n            <br>\n            <input type=\"checkbox\" id=\"lowercase\" class=\"checkbox\" name=\"lowercase\">\n            <label for=\"lowercase\" id=\"lowercase-label\" class=\"label\">Include Lowercase</label>\n            <br>\n            <input type=\"checkbox\" id=\"numbers\" class=\"checkbox\" name=\"numbers\">\n            <label for=\"numbers\" id=\"numbers-label\" class=\"label\">Include Numbers</label>\n            <br>\n            <input type=\"checkbox\" id=\"symbols\" class=\"checkbox\" name=\"symbols\">\n            <label for=\"symbols\" id=\"symbols-label\" class=\"label\">Include Symbols</label>\n            <br>\n            <button type=\"submit\" id=\"generate-button\" class=\"button\">Generate Password</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "templates/generated_password.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Generated Password</title>\n</head>\n<body>\n    <div id=\"generated-password-container\" class=\"container\">\n        <h1 id=\"password-title\" class=\"title\">Generated Password:</h1>\n        <p id=\"password-text\" class=\"password\">{{ password }}</p>\n\n        <button id=\"copy-button\" class=\"button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n        <a id=\"back-button\" class=\"button\" href=\"{% url 'password_options' %}\">Back to Options</a>\n\n        <script>\n            function copyToClipboard() {\n                var passwordText = document.getElementById(\"password-text\");\n                var textArea = document.createElement(\"textarea\");\n                textArea.value = passwordText.innerText;\n                document.body.appendChild(textArea);\n                textArea.select();\n                document.execCommand(\"copy\");\n                document.body.removeChild(textArea);\n                alert(\"Password copied to clipboard!\");\n            }\n        </script>\n    </div>\n</body>\n</html>\n"}, {"file": "templates/about.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Password Generator</h1>\n        <p id=\"about-description\" class=\"description\">\n            This website is a simple password generator that allows you to create strong and secure passwords based on your specified criteria.\n        </p>\n        <p id=\"about-features\" class=\"description\">\n            You can customize the password length and include uppercase letters, lowercase letters, numbers, and symbols.\n        </p>\n        <a id=\"home-button\" class=\"button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n</body>\n</html>\n"}, {"file": "generator/static/style.css", "path": "generator/static/", "code": "/*  Example CSS - Adapt as needed */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f0f0f0;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.description {\n    margin-bottom: 15px;\n}\n\n.button {\n    display: inline-block;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: #fff;\n    text-decoration: none;\n    border-radius: 5px;\n    margin-top: 10px;\n}\n\n.button:hover {\n    background-color: #0056b3;\n}\n\n.input {\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n    margin-bottom: 10px;\n}\n\n.checkbox {\n    margin-right: 5px;\n}\n\n/* Add more styles as needed */\n"}], "4": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcodegenerator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "qrcodegenerator/settings.py", "path": "qrcodegenerator/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcodegenerator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcodegenerator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Add this line\n"}, {"file": "qrcodegenerator/urls.py", "path": "qrcodegenerator/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls'))\n]"}, {"file": "qrcodegenerator/wsgi.py", "path": "qrcodegenerator/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcodegenerator.settings')\n\napplication = get_wsgi_application()"}, {"file": "qr_app/apps.py", "path": "qr_app/", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    name = 'qr_app'"}, {"file": "qr_app/models.py", "path": "qr_app/", "code": "from django.db import models\n\n# Create your models here."}, {"file": "qr_app/views.py", "path": "qr_app/", "code": "import qrcode\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom io import BytesIO\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef generate_qr(request):\n    if request.method == 'POST':\n        text = request.POST.get('text', '')\n        box_size = int(request.POST.get('box_size', '10'))\n        border_size = int(request.POST.get('border_size', '4'))\n        error_correction = request.POST.get('error_correction', 'medium')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        if not text:\n            return render(request, 'qr_generator.html', {'error': 'Please enter text or URL.'})\n\n        try:\n            qr = qrcode.QRCode(\n                version=1,  # You can adjust the version based on the amount of data\n                error_correction=qrcode.ERROR_CORRECT_L if error_correction == 'small' else \n                                  qrcode.ERROR_CORRECT_M if error_correction == 'medium' else \n                                  qrcode.ERROR_CORRECT_H,  # 'large'\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n            buffer = BytesIO()\n            img.save(buffer, 'PNG')\n            img_data = buffer.getvalue()\n\n            return render(request, 'qr_generator.html', {'qr_image': img_data.hex(), 'data_url': f'data:image/png;base64,{img_data.hex()}'})\n\n        except Exception as e:\n            return render(request, 'qr_generator.html', {'error': f'Error generating QR code: {e}'})\n\n    return render(request, 'qr_generator.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "qr_app/urls.py", "path": "qr_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr, name='generate_qr'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "templates/home.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: center;\n            margin: 50px;\n        }\n        .container {\n            width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .button {\n            background-color: #4CAF50;\n            border: none;\n            color: white;\n            padding: 10px 20px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 16px;\n            margin: 4px 2px;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"home-title\">Welcome to QR Code Generator</h1>\n        <p id=\"home-introduction\" class=\"home-introduction\">Simple, welcoming text explaining what the website does.</p>\n        <a href=\"/generate/\" id=\"generate-qr-button\" class=\"button generate-qr-button\">Generate QR Code</a>\n    </div>\n</body>\n</html>"}, {"file": "templates/qr_generator.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: center;\n            margin: 50px;\n        }\n        .container {\n            width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"text\"], select {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n            margin-top: 5px;\n        }\n        .button {\n            background-color: #4CAF50;\n            border: none;\n            color: white;\n            padding: 10px 20px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 16px;\n            margin: 4px 2px;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n        .qr-code-display {\n            margin-top: 20px;\n        }\n        .error {\n            color: red;\n        }\n\n    </style>\n</head>\n<body>\n    <div id=\"qr-generator-container\" class=\"container qr-generator-container\">\n        <h1 id=\"qr-generator-title\" class=\"qr-generator-title\">QR Code Generator</h1>\n        <form id=\"qr-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"text-input\" id=\"text-input-label\">Text/URL:</label>\n                <input type=\"text\" id=\"text-input\" name=\"text\" class=\"text-input\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"box-size-input\" id=\"box-size-input-label\">Box Size (Max: 128):</label>\n                <input type=\"number\" id=\"box-size-input\" name=\"box_size\" class=\"box-size-input\" min=\"1\" max=\"128\" value=\"10\">\n            </div>\n\n             <div class=\"form-group\">\n                <label for=\"border-size-input\" id=\"border-size-input-label\">Border Size (Max: 10):</label>\n                <input type=\"number\" id=\"border-size-input\" name=\"border_size\" class=\"border-size-input\" min=\"0\" max=\"10\" value=\"4\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"error-correction-select\" id=\"error-correction-select-label\">Error Correction Rate:</label>\n                <select id=\"error-correction-select\" name=\"error_correction\" class=\"error-correction-select\">\n                    <option value=\"small\">Small</option>\n                    <option value=\"medium\" selected>Medium</option>\n                    <option value=\"large\">Large</option>\n                </select>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"fill-color-input\" id=\"fill-color-input-label\">Fill Color:</label>\n                <input type=\"color\" id=\"fill-color-input\" name=\"fill_color\" class=\"fill-color-input\" value=\"#000000\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"back-color-input\" id=\"back-color-input-label\">Background Color:</label>\n                <input type=\"color\" id=\"back-color-input\" name=\"back_color\" class=\"back-color-input\" value=\"#ffffff\">\n            </div>\n\n            <button type=\"submit\" id=\"generate-button\" class=\"button generate-button\">Generate QR Code</button>\n        </form>\n\n        {% if error %}\n            <p id=\"error-message\" class=\"error error-message\">{{ error }}</p>\n        {% endif %}\n\n        {% if qr_image %}\n            <div id=\"qr-code-display\" class=\"qr-code-display\">\n                <h2 id=\"qr-code-title\" class=\"qr-code-title\">Generated QR Code</h2>\n                <img id=\"qr-code-image\" src=\"data:image/png;base64,{{ qr_image }}\" alt=\"Generated QR Code\">\n                <a id=\"download-button\" class=\"button download-button\" href=\"{{ data_url }}\" download=\"qrcode.png\">Download QR Code</a>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "templates/about.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: left;\n            margin: 50px;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        h1 {\n            text-align: center;\n        }\n        h2 {\n            margin-top: 20px;\n        }\n        ul {\n            list-style-type: disc;\n            padding-left: 20px;\n        }\n        p {\n            line-height: 1.6;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container about-container\">\n        <h1 id=\"about-title\" class=\"about-title\">About QR Code Generator</h1>\n\n        <section id=\"description-section\" class=\"description-section\">\n            <h2 id=\"description-heading\" class=\"description-heading\">Description</h2>\n            <p id=\"description-content\" class=\"description-content\">\n                This website provides a simple and easy way to generate QR codes.  Simply enter the text or URL you want to encode, customize the appearance, and download your QR code.\n            </p>\n        </section>\n\n        <section id=\"faq-section\" class=\"faq-section\">\n            <h2 id=\"faq-heading\" class=\"faq-heading\">Frequently Asked Questions</h2>\n            <ul id=\"faq-list\" class=\"faq-list\">\n                <li id=\"faq-item-1\" class=\"faq-item\">\n                    <strong id=\"faq-question-1\" class=\"faq-question\">How do I generate a QR code?</strong>\n                    <p id=\"faq-answer-1\" class=\"faq-answer\">Go to the Generate QR Code page, enter your text/URL, customize the settings and click 'Generate QR Code'.</p>\n                </li>\n                <li id=\"faq-item-2\" class=\"faq-item\">\n                    <strong id=\"faq-question-2\" class=\"faq-question\">Can I download the generated QR code?</strong>\n                    <p id=\"faq-answer-2\" class=\"faq-answer\">Yes, after generating the QR code, a download button will appear.</p>\n                </li>\n            </ul>\n        </section>\n\n        <section id=\"privacy-policy-section\" class=\"privacy-policy-section\">\n            <h2 id=\"privacy-policy-heading\" class=\"privacy-policy-heading\">Privacy Policy</h2>\n            <p id=\"privacy-policy-content\" class=\"privacy-policy-content\">\n                We do not collect any personal information from users of this website. The text or URLs you enter to generate QR codes are not stored on our servers.\n            </p>\n        </section>\n\n        <section id=\"terms-of-service-section\" class=\"terms-of-service-section\">\n            <h2 id=\"terms-of-service-heading\" class=\"terms-of-service-heading\">Terms of Service</h2>\n            <p id=\"terms-of-service-content\" class=\"terms-of-service-content\">\n                By using this website, you agree to use it for lawful purposes only.  We are not responsible for any misuse of the generated QR codes.\n            </p>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "qr_app/templates/base.html", "path": "qr_app/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}QR Code Generator{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            padding-top: 50px; /* To avoid content overlay by navbar */\n        }\n    </style>\n</head>\n<body>\n\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light fixed-top\">\n        <a class=\"navbar-brand\" href=\"{% url 'home' %}\">QR Code Generator</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'generate_qr' %}\">Generate QR</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n\n    <div class=\"container mt-5\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n\n</body>\n</html>"}, {"file": "static/style.css", "path": "static/", "code": "/* You can add global styles here */\nbody {\n    font-family: Arial, sans-serif;\n}"}], "5": [{"file": "manage.py", "path": "markdown_converter/manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "markdown_converter/markdown_converter/__init__.py", "code": "default_app_config = 'markdown_converter.apps.MarkdownConverterConfig'"}, {"file": "apps.py", "path": "markdown_converter/markdown_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MarkdownConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'markdown_converter'"}, {"file": "models.py", "path": "markdown_converter/markdown_converter/models.py", "code": "from django.db import models\n\n# You can add models here if needed.\n"}, {"file": "admin.py", "path": "markdown_converter/markdown_converter/admin.py", "code": "from django.contrib import admin\n\n# You can register your models here to use the admin panel.\n"}, {"file": "views.py", "path": "markdown_converter/markdown_converter/views.py", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_output': html_output, 'markdown_text': markdown_text})\n    return render(request, 'convert.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n\n\ndef download_html(request):\n    if request.method == 'POST':\n        html_content = request.POST.get('html_output', '')\n        response = HttpResponse(html_content, content_type='text/html')\n        response['Content-Disposition'] = 'attachment; filename=\"converted.html\"'\n        return response\n    else:\n        return HttpResponse('Invalid request method.')"}, {"file": "urls.py", "path": "markdown_converter/markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n    path('download_html/', views.download_html, name='download_html'),\n]"}, {"file": "settings.py", "path": "markdown_converter/markdown_converter/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'  # Change this for production!\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'markdown_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_converter.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "markdown_converter/markdown_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('markdown_converter.urls')),  # Include the app's URLs\n]"}, {"file": "wsgi.py", "path": "markdown_converter/markdown_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "home.html", "path": "markdown_converter/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .nav {\n            margin-bottom: 20px;\n        }\n        .nav a {\n            margin-right: 10px;\n        }\n        .welcome-message {\n          font-size: 1.5em;\n          margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <nav id=\"home-nav\" class=\"nav\">\n            <a id=\"home-convert-link\" class=\"nav-link\" href=\"{% url 'convert' %}\">Convert</a>\n            <a id=\"home-about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n        </nav>\n\n        <h1 id=\"home-welcome\" class=\"welcome-message\">Welcome to the Markdown to HTML Converter!</h1>\n        <p id=\"home-intro\" class=\"introduction\">This tool allows you to easily convert Markdown text into HTML code.</p>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "markdown_converter/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .nav {\n            margin-bottom: 20px;\n        }\n        .nav a {\n            margin-right: 10px;\n        }\n        .input-area, .output-area {\n            width: 100%;\n            margin-bottom: 10px;\n        }\n        .convert-button {\n            padding: 5px 10px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"container\">\n        <nav id=\"convert-nav\" class=\"nav\">\n            <a id=\"convert-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n            <a  id=\"convert-about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n        </nav>\n\n        <form id=\"convert-form\" method=\"post\" action=\"{% url 'convert' %}\">\n            {% csrf_token %}\n            <label for=\"markdown_text\" id=\"markdown-label\" class=\"input-label\">Markdown Input:</label>\n            <textarea id=\"markdown_text\" name=\"markdown_text\" class=\"input-area\" rows=\"10\">{{ markdown_text }}</textarea><br>\n            <button id=\"convert-button\" class=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if html_output %}\n            <div id=\"html-output-section\">\n                <h2 id=\"output-header\" class=\"output-header\">HTML Output:</h2>\n                <div id=\"html_output\" class=\"output-area\">{{ html_output|safe }}</div>\n                <form id=\"download-form\" method=\"post\" action=\"{% url 'download_html' %}\">\n                    {% csrf_token %}\n                    <input type=\"hidden\" name=\"html_output\" value=\"{{ html_output }}\">\n                    <button id=\"download-button\" class=\"download-button\" type=\"submit\">Download HTML</button>\n                </form>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "markdown_converter/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Markdown to HTML Converter</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .nav {\n            margin-bottom: 20px;\n        }\n        .nav a {\n            margin-right: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <nav id=\"about-nav\" class=\"nav\">\n            <a id=\"about-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n            <a id=\"about-convert-link\" class=\"nav-link\" href=\"{% url 'convert' %}\">Convert</a>\n        </nav>\n\n        <h1 id=\"about-title\">About This Converter</h1>\n        <p id=\"about-team\">Developed by a team of dedicated developers...</p>\n        <h2 id=\"faq-header\">FAQ</h2>\n        <p id=\"faq-item-1\"><b>Q: How does it work?</b> A: It uses the Python Markdown library...</p>\n    </div>\n</body>\n</html>"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "todo_project/settings.py", "path": "todo_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Added static files directory"}, {"file": "todo_project/urls.py", "path": "todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]"}, {"file": "todo_project/wsgi.py", "path": "todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "todo_app/apps.py", "path": "todo_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todo_app'"}, {"file": "todo_app/models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    due_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "todo_app/views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom .forms import TodoListForm, TaskForm\nfrom django.db.models import Count\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    total_tasks = Task.objects.count()\n    completed_tasks = Task.objects.filter(completed=True).count()\n    incomplete_tasks = total_tasks - completed_tasks\n\n    return render(request, 'home.html', {\n        'todo_lists': todo_lists,\n        'total_tasks': total_tasks,\n        'completed_tasks': completed_tasks,\n        'incomplete_tasks': incomplete_tasks\n    })\n\ndef todo_list(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todo_list.html', {'todo_list': todo_list, 'tasks': tasks})\n\n\ndef new_list(request):\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TodoListForm()\n    return render(request, 'new_list.html', {'form': form})\n\n\ndef new_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.todo_list = todo_list\n            task.save()\n            return redirect('todo_list', list_id=list_id)\n    else:\n        form = TaskForm()\n    return render(request, 'new_task.html', {'form': form, 'todo_list': todo_list})\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list', list_id=task.todo_list.id)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'edit_task.html', {'form': form, 'task': task})\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list', list_id=list_id)\n\ndef mark_completed(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list', list_id=task.todo_list.id)\n\ndef task_completion_chart(request):\n    completed_tasks = Task.objects.filter(completed=True).count()\n    incomplete_tasks = Task.objects.filter(completed=False).count()\n    return render(request, 'task_completion_chart.html', {\n        'completed_tasks': completed_tasks,\n        'incomplete_tasks': incomplete_tasks\n    })\n\ndef task_distribution_chart(request):\n    task_counts = Task.objects.values('todo_list__name').annotate(task_count=Count('id'))\n    return render(request, 'task_distribution_chart.html', {'task_counts': list(task_counts)})\n"}, {"file": "todo_app/urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('list/<int:list_id>/', views.todo_list, name='todo_list'),\n    path('list/new/', views.new_list, name='new_list'),\n    path('list/<int:list_id>/task/new/', views.new_task, name='new_task'),\n    path('task/<int:task_id>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:task_id>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:task_id>/complete/', views.mark_completed, name='mark_completed'),\n    path('analysis/completion/', views.task_completion_chart, name='task_completion_chart'),\n    path('analysis/distribution/', views.task_distribution_chart, name='task_distribution_chart'),\n]"}, {"file": "todo_app/forms.py", "path": "todo_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, Task\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['name']\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'completed', 'due_date']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date'})\n        }"}, {"file": "templates/home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo Dashboard</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .dashboard-section {\n            margin-bottom: 20px;\n        }\n        .todo-list-item {\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 id=\"home-title\">Todo Dashboard</h1>\n\n        <section class=\"dashboard-section\" id=\"overview-section\">\n            <h2 id=\"overview-header\">Overview</h2>\n            <p id=\"total-tasks\">Total Tasks: <span id=\"total-tasks-count\">{{ total_tasks }}</span></p>\n            <p id=\"completed-tasks\">Completed Tasks: <span id=\"completed-tasks-count\">{{ completed_tasks }}</span></p>\n            <p id=\"incomplete-tasks\">Incomplete Tasks: <span id=\"incomplete-tasks-count\">{{ incomplete_tasks }}</span></p>\n        </section>\n\n        <section class=\"dashboard-section\" id=\"todo-lists-section\">\n            <h2 id=\"todo-lists-header\">Todo Lists</h2>\n            <ul id=\"todo-lists\">\n                {% for todo_list in todo_lists %}\n                    <li class=\"todo-list-item\" id=\"todo-list-item-{{ todo_list.id }}\">\n                        <a href=\"{% url 'todo_list' todo_list.id %}\" id=\"todo-list-link-{{ todo_list.id }}\">{{ todo_list.name }}</a>\n                    </li>\n                {% endfor %}\n            </ul>\n            <a href=\"{% url 'new_list' %}\" id=\"new-list-link\">Create New List</a>\n        </section>\n\n        <section class=\"dashboard-section\" id=\"analysis-section\">\n            <h2 id=\"analysis-header\">Analysis</h2>\n            <a href=\"{% url 'task_completion_chart' %}\" id=\"completion-chart-link\">View Task Completion Chart</a><br>\n            <a href=\"{% url 'task_distribution_chart' %}\" id=\"distribution-chart-link\">View Task Distribution Chart</a>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "templates/todo_list.html", "path": "templates/todo_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List: {{ todo_list.name }}</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .task-item {\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"todo-list-container\">\n        <h1 id=\"todo-list-title\">Todo List: {{ todo_list.name }}</h1>\n\n        <section class=\"tasks-section\" id=\"tasks-section\">\n            <h2 id=\"tasks-header\">Tasks</h2>\n            <ul id=\"task-list\">\n                {% for task in tasks %}\n                    <li class=\"task-item\" id=\"task-item-{{ task.id }}\">\n                        <span id=\"task-title-{{ task.id }}\">{{ task.title }}</span>\n                        {% if task.completed %}\n                            <span id=\"task-status-{{ task.id }}\">(Completed)</span>\n                        {% endif %}\n                        <a href=\"{% url 'edit_task' task.id %}\" id=\"edit-task-link-{{ task.id }}\">Edit</a> |\n                        <a href=\"{% url 'delete_task' task.id %}\" id=\"delete-task-link-{{ task.id }}\">Delete</a> |\n                        {% if not task.completed %}\n                            <a href=\"{% url 'mark_completed' task.id %}\" id=\"complete-task-link-{{ task.id }}\">Mark as Completed</a>\n                        {% endif %}\n                    </li>\n                {% endfor %}\n            </ul>\n            <a href=\"{% url 'new_task' todo_list.id %}\" id=\"new-task-link\">Add New Task</a>\n            <br><a href=\"{% url 'home' %}\" id=\"back-to-dashboard\">Back to Dashboard</a>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "templates/new_list.html", "path": "templates/new_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>New Todo List</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .form-group {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"new-list-container\">\n        <h1 id=\"new-list-title\">New Todo List</h1>\n        <form method=\"post\" id=\"new-list-form\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"name-group\">\n                <label for=\"id_name\" id=\"name-label\">Name:</label>\n                {{ form.name }}\n            </div>\n            <button type=\"submit\" id=\"create-list-button\">Create List</button>\n            <a href=\"{% url 'home' %}\" id=\"cancel-button\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "templates/new_task.html", "path": "templates/new_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>New Task</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .form-group {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"new-task-container\">\n        <h1 id=\"new-task-title\">New Task for {{ todo_list.name }}</h1>\n        <form method=\"post\" id=\"new-task-form\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"title-group\">\n                <label for=\"id_title\" id=\"title-label\">Title:</label>\n                {{ form.title }}\n            </div>\n            <div class=\"form-group\" id=\"description-group\">\n                <label for=\"id_description\" id=\"description-label\">Description:</label>\n                {{ form.description }}\n            </div>\n            <div class=\"form-group\" id=\"due_date-group\">\n                <label for=\"id_due_date\" id=\"due_date-label\">Due Date:</label>\n                {{ form.due_date }}\n            </div>\n            <div class=\"form-group\" id=\"completed-group\">\n                <label for=\"id_completed\" id=\"completed-label\">Completed:</label>\n                {{ form.completed }}\n            </div>\n            <button type=\"submit\" id=\"create-task-button\">Create Task</button>\n            <a href=\"{% url 'todo_list' todo_list.id %}\" id=\"cancel-button\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "templates/edit_task.html", "path": "templates/edit_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Task</title>\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .form-group {\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"edit-task-container\">\n        <h1 id=\"edit-task-title\">Edit Task</h1>\n        <form method=\"post\" id=\"edit-task-form\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"title-group\">\n                <label for=\"id_title\" id=\"title-label\">Title:</label>\n                {{ form.title }}\n            </div>\n            <div class=\"form-group\" id=\"description-group\">\n                <label for=\"id_description\" id=\"description-label\">Description:</label>\n                {{ form.description }}\n            </div>\n            <div class=\"form-group\" id=\"due_date-group\">\n                <label for=\"id_due_date\" id=\"due_date-label\">Due Date:</label>\n                {{ form.due_date }}\n            </div>\n            <div class=\"form-group\" id=\"completed-group\">\n                <label for=\"id_completed\" id=\"completed-label\">Completed:</label>\n                {{ form.completed }}\n            </div>\n            <button type=\"submit\" id=\"save-task-button\">Save Task</button>\n            <a href=\"{% url 'todo_list' task.todo_list.id %}\" id=\"cancel-button\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "templates/task_completion_chart.html", "path": "templates/task_completion_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Completion Chart</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\" id=\"task-completion-container\">\n        <h1 id=\"task-completion-title\">Task Completion Chart</h1>\n        <canvas id=\"completionChart\" width=\"400\" height=\"400\"></canvas>\n        <a href=\"{% url 'home' %}\" id=\"back-to-dashboard\">Back to Dashboard</a>\n\n        <script>\n            const ctx = document.getElementById('completionChart').getContext('2d');\n            const myChart = new Chart(ctx, {\n                type: 'pie',\n                data: {\n                    labels: ['Completed', 'Incomplete'],\n                    datasets: [{\n                        label: 'Task Completion',\n                        data: [{{ completed_tasks }}, {{ incomplete_tasks }}],\n                        backgroundColor: [\n                            'rgba(75, 192, 192, 0.2)',\n                            'rgba(255, 99, 132, 0.2)'\n                        ],\n                        borderColor: [\n                            'rgba(75, 192, 192, 1)',\n                            'rgba(255, 99, 132, 1)'\n                        ],\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n            });\n        </script>\n    </div>\n</body>\n</html>"}, {"file": "templates/task_distribution_chart.html", "path": "templates/task_distribution_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Distribution Chart</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container\" id=\"task-distribution-container\">\n        <h1 id=\"task-distribution-title\">Task Distribution Chart</h1>\n        <canvas id=\"distributionChart\" width=\"400\" height=\"400\"></canvas>\n        <a href=\"{% url 'home' %}\" id=\"back-to-dashboard\">Back to Dashboard</a>\n\n        <script>\n            const ctx = document.getElementById('distributionChart').getContext('2d');\n            const taskCounts = {{ task_counts|safe }};\n            const labels = taskCounts.map(item => item.todo_list__name);\n            const data = taskCounts.map(item => item.task_count);\n\n            const myChart = new Chart(ctx, {\n                type: 'bar',\n                data: {\n                    labels: labels,\n                    datasets: [{\n                        label: 'Task Distribution',\n                        data: data,\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.2)',\n                            'rgba(54, 162, 235, 0.2)',\n                            'rgba(255, 206, 86, 0.2)',\n                            'rgba(75, 192, 192, 0.2)',\n                            'rgba(153, 102, 255, 0.2)',\n                            'rgba(255, 159, 64, 0.2)'\n                        ],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)',\n                            'rgba(54, 162, 235, 1)',\n                            'rgba(255, 206, 86, 1)',\n                            'rgba(75, 192, 192, 1)',\n                            'rgba(153, 102, 255, 1)',\n                            'rgba(255, 159, 64, 1)'\n                        ],\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    scales: {\n                        y: {\n                            beginAtZero: true\n                        }\n                    },\n                    responsive: true,\n                    maintainAspectRatio: false\n                }\n            });\n        </script>\n    </div>\n</body>\n</html>"}, {"file": "static/style.css", "path": "static/style.css", "code": "/* Example styling. Customize to your needs */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.form-group {\n    margin-bottom: 10px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 5px;\n}\n\ninput[type=\"text\"], input[type=\"date\"], textarea {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\nbutton {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #3e8e41;\n}"}], "8": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/calendar_project/", "code": "default_app_config = 'calendar_app.apps.CalendarAppConfig'"}, {"file": "settings.py", "path": "/calendar_project/", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] \n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "/calendar_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "/calendar_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/calendar_app/", "code": "default_app_config = 'calendar_app.apps.CalendarAppConfig'"}, {"file": "admin.py", "path": "/calendar_app/", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "apps.py", "path": "/calendar_app/", "code": "from django.apps import AppConfig\n\n\nclass CalendarAppConfig(AppConfig):\n    default_auto_field = 'django.db.BigAutoField'\n    name = 'calendar_app'"}, {"file": "models.py", "path": "/calendar_app/", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "/calendar_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/new/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('events/list/', views.list_events, name='list_events'),\n    path('events/search/', views.search_events, name='search_events'),\n    path('help/', views.help_view, name='help'),\n]"}, {"file": "views.py", "path": "/calendar_app/", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    current_date = timezone.now().date()\n    return render(request, 'home.html', {'current_date': current_date})\n\ndef calendar_view(request):\n    year = int(request.GET.get('year', timezone.now().year))\n    month = int(request.GET.get('month', timezone.now().month))\n    events = Event.objects.filter(start_time__year=year, start_time__month=month)\n    return render(request, 'calendar.html', {'year': year, 'month': month, 'events': events})\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'event_details.html', {'event': event})\n\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'add_event.html', {'form': form})\n\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event.id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'edit_event.html', {'form': form, 'event': event})\n\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('calendar')\n    return render(request, 'delete_event.html', {'event': event})\n\ndef list_events(request):\n    events = Event.objects.all()\n    return render(request, 'list_events.html', {'events': events})\n\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query)\n    return render(request, 'search_events.html', {'events': events, 'query': query})\n\ndef help_view(request):\n    return render(request, 'help.html')"}, {"file": "forms.py", "path": "/calendar_app/", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local' }),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local' }),\n        }"}, {"file": "home.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Calendar App!</h1>\n        <p id=\"current-date\" class=\"date\">Today is: {{ current_date }}</p>\n        <div id=\"calendar-link\" class=\"calendar-link\">\n            <a href=\"{% url 'calendar' %}\" class=\"button\">Go to Calendar</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "calendar.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar</title>\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"container\">\n        <h1 id=\"calendar-title\" class=\"title\">Calendar</h1>\n        <div id=\"month-selector\" class=\"month-selector\">\n            <form id=\"month-form\" method=\"get\">\n                <label for=\"year\" id=\"year-label\" class=\"label\">Year:</label>\n                <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\" class=\"input\">\n                <label for=\"month\" id=\"month-label\" class=\"label\">Month:</label>\n                <input type=\"number\" id=\"month\" name=\"month\" value=\"{{ month }}\" class=\"input\" min=\"1\" max=\"12\">\n                <button type=\"submit\" id=\"go-to-month\" class=\"button\">Go</button>\n            </form>\n        </div>\n\n        <div id=\"event-list\" class=\"event-list\">\n            <h2>Events:</h2>\n            {% if events %}\n                <ul id=\"event-ul\" class=\"event-ul\">\n                {% for event in events %}\n                    <li id=\"event-li-{{ event.id }}\" class=\"event-li\">\n                        <a href=\"{% url 'event_details' event.id %}\" class=\"event-link\">{{ event.title }}</a>\n                    </li>\n                {% endfor %}\n                </ul>\n            {% else %}\n                <p id=\"no-events\" class=\"no-events\">No events for this month.</p>\n            {% endif %}\n        </div>\n\n        <div id=\"add-event-link\" class=\"add-event-link\">\n            <a href=\"{% url 'add_event' %}\" class=\"button\">Add Event</a>\n        </div>\n        <div id = \"home-link\" class = \"home-link\"> \n            <a href=\"{% url 'home' %}\" class=\"button\">Home</a>\n        </div>\n\n    </div>\n</body>\n</html>"}, {"file": "event_details.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Details</title>\n</head>\n<body>\n    <div id=\"event-details-container\" class=\"container\">\n        <h1 id=\"event-title\" class=\"title\">{{ event.title }}</h1>\n        <p id=\"event-description\" class=\"description\">{{ event.description }}</p>\n        <p id=\"event-start-time\" class=\"start-time\">Start: {{ event.start_time }}</p>\n        <p id=\"event-end-time\" class=\"end-time\">End: {{ event.end_time }}</p>\n\n        <div id=\"edit-delete-links\" class=\"edit-delete-links\">\n            <a href=\"{% url 'edit_event' event.id %}\" id=\"edit-event-link\" class=\"button\">Edit</a>\n            <form id=\"delete-form\" method=\"post\" action=\"{% url 'delete_event' event.id %}\" class=\"delete-form\">\n                {% csrf_token %}\n                <button type=\"submit\" id=\"delete-event-button\" class=\"button\">Delete</button>\n            </form>\n        </div>\n\n        <div id=\"back-to-calendar\" class=\"back-to-calendar\">\n            <a href=\"{% url 'calendar' %}\" id=\"back-to-calendar-link\" class=\"button\">Back to Calendar</a>\n        </div>\n        <div id = \"home-link\" class = \"home-link\"> \n            <a href=\"{% url 'home' %}\" class=\"button\">Home</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "add_event.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Event</title>\n</head>\n<body>\n    <div id=\"add-event-container\" class=\"container\">\n        <h1 id=\"add-event-title\" class=\"title\">Add New Event</h1>\n        <form id=\"add-event-form\" method=\"post\" class=\"add-event-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"add-event-button\" class=\"button\">Add Event</button>\n        </form>\n        <div id = \"home-link\" class = \"home-link\"> \n            <a href=\"{% url 'home' %}\" class=\"button\">Home</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Event</title>\n</head>\n<body>\n    <div id=\"edit-event-container\" class=\"container\">\n        <h1 id=\"edit-event-title\" class=\"title\">Edit Event</h1>\n        <form id=\"edit-event-form\" method=\"post\" class=\"edit-event-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"save-event-button\" class=\"button\">Save Changes</button>\n        </form>\n        <div id = \"home-link\" class = \"home-link\"> \n            <a href=\"{% url 'home' %}\" class=\"button\">Home</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Event</title>\n</head>\n<body>\n    <div id=\"delete-event-container\" class=\"container\">\n        <h1 id=\"delete-event-title\" class=\"title\">Delete Event</h1>\n        <p id=\"delete-confirmation\" class=\"confirmation\">Are you sure you want to delete \"{{ event.title }}\"?</p>\n        <form id=\"delete-event-form\" method=\"post\" class=\"delete-event-form\">\n            {% csrf_token %}\n            <button type=\"submit\" id=\"confirm-delete-button\" class=\"button\">Yes, Delete</button>\n            <a href=\"{% url 'event_details' event.id %}\" id=\"cancel-delete-link\" class=\"button\">Cancel</a>\n        </form>\n        <div id = \"home-link\" class = \"home-link\"> \n            <a href=\"{% url 'home' %}\" class=\"button\">Home</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "list_events.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>List Events</title>\n</head>\n<body>\n    <div id=\"list-events-container\" class=\"container\">\n        <h1 id=\"list-events-title\" class=\"title\">All Events</h1>\n        <ul id=\"events-list\" class=\"events-list\">\n            {% for event in events %}\n                <li id=\"event-item-{{ event.id }}\" class=\"event-item\">\n                    <a href=\"{% url 'event_details' event.id %}\" id=\"event-link-{{ event.id }}\" class=\"event-link\">{{ event.title }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n        <div id = \"home-link\" class = \"home-link\"> \n            <a href=\"{% url 'home' %}\" class=\"button\">Home</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "search_events.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Search Events</title>\n</head>\n<body>\n    <div id=\"search-events-container\" class=\"container\">\n        <h1 id=\"search-events-title\" class=\"title\">Search Events</h1>\n        <form id=\"search-form\" class=\"search-form\" method=\"get\" action=\"{% url 'search_events' %}\">\n            <input type=\"text\" id=\"search-query\" class=\"search-query\" name=\"q\" value=\"{{ query }}\">\n            <button type=\"submit\" id=\"search-button\" class=\"button\">Search</button>\n        </form>\n        {% if events %}\n            <ul id=\"search-results\" class=\"search-results\">\n                {% for event in events %}\n                    <li id=\"search-result-{{ event.id }}\" class=\"search-result\">\n                        <a href=\"{% url 'event_details' event.id %}\" id=\"search-result-link-{{ event.id }}\" class=\"search-result-link\">{{ event.title }}</a>\n                    </li>\n                {% endfor %}\n            </ul>\n        {% else %}\n            <p id=\"no-results\" class=\"no-results\">No events found matching your search.</p>\n        {% endif %}\n        <div id = \"home-link\" class = \"home-link\"> \n            <a href=\"{% url 'home' %}\" class=\"button\">Home</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "help.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Help</title>\n</head>\n<body>\n    <div id=\"help-container\" class=\"container\">\n        <h1 id=\"help-title\" class=\"title\">Help</h1>\n        <section id=\"faq-section\" class=\"faq-section\">\n            <h2 id=\"faq-header\" class=\"section-header\">FAQ</h2>\n            <p id=\"faq-content\" class=\"section-content\">Frequently asked questions and answers will be displayed here.</p>\n        </section>\n        <section id=\"user-guide-section\" class=\"user-guide-section\">\n            <h2 id=\"user-guide-header\" class=\"section-header\">User Guide</h2>\n            <p id=\"user-guide-content\" class=\"section-content\">A comprehensive user guide for using the calendar application will be provided here.</p>\n        </section>\n        <div id = \"home-link\" class = \"home-link\"> \n            <a href=\"{% url 'home' %}\" class=\"button\">Home</a>\n        </div>\n    </div>\n</body>\n</html>"}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "review_tool/__init__.py", "code": ""}, {"file": "settings.py", "path": "review_tool/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_tool.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_tool.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] "}, {"file": "urls.py", "path": "review_tool/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review.urls')),\n]"}, {"file": "wsgi.py", "path": "review_tool/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "review/__init__.py", "code": ""}, {"file": "admin.py", "path": "review/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "review/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ReviewConfig(AppConfig):\n    name = 'review'"}, {"file": "models.py", "path": "review/models.py", "code": "from django.db import models\n\n# Create your models here.\nclass ReviewItem(models.Model):\n    page = models.CharField(max_length=200)\n    function_name = models.CharField(max_length=200)\n    status = models.CharField(max_length=50, default='Select') # Pass, Fail, Select\n    notes = models.TextField(blank=True, null=True)"}, {"file": "urls.py", "path": "review/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('import_json/', views.import_json, name='import_json'),\n    path('update_review/', views.update_review, name='update_review'),\n]"}, {"file": "views.py", "path": "review/views.py", "code": "import json\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .models import ReviewItem\n\n\ndef home(request):\n    # Data from the JSON structure (simulated here)\n    data = [\n        {\n            'page': 'Home',\n            'required': True,\n            'function': [\n                {\n                    'function': 'Display Welcome Message',\n                    'description': 'Review the test code for ensuring the welcome message or website title is displayed correctly.',\n                    'required': True\n                },\n                {\n                    'function': 'Select Status for the Testcode',\n                    'description': 'A select box of three  status \\\"Pass\\\", \\\"Fail\\\" and \\\"Select\\\" for the user to review the code. DO NOT forget about the submit button.',\n                    'required': True\n                },\n                {\n                    'function': 'Import File',\n                    'description': 'A form for importing JSON file mentioned in the requirements.',\n                    'required': False\n                },\n                {\n                    'function': 'Note for Reviewing',\n                    'description': 'An input box or area that for users to give reviewing notes for each testcode.',\n                    'required': True\n                }\n            ]\n        },\n        {\n            'page': 'About',\n            'required': False,\n            'function': [\n                {\n                    'function': 'About Page',\n                    'description': 'The about page that describe the function and other information of the website',\n                    'required': False\n                }\n            ]\n        }\n    ]\n\n    context = {'data': data}\n\n    # Fetch existing review items from the database and add them to the context\n    review_items = ReviewItem.objects.all()\n    review_dict = {(item.page, item.function_name): item for item in review_items}\n    context['review_dict'] = review_dict\n\n    return render(request, 'review/home.html', context)\n\n\ndef about(request):\n    return render(request, 'review/about.html')\n\n\ndef import_json(request):\n    if request.method == 'POST' and request.FILES.get('json_file'):\n        json_file = request.FILES['json_file']\n        try:\n            data = json.load(json_file)\n            # Process the data and save to the database\n            for page_data in data:\n                page = page_data['page']\n                for function_data in page_data['function']:\n                    function_name = function_data['function']\n                    # Create a new ReviewItem or update an existing one\n                    ReviewItem.objects.update_or_create(\n                        page=page,\n                        function_name=function_name,\n                        defaults={'status': 'Select', 'notes': ''}\n                    )\n\n            return redirect('home')  # Redirect to the home page after import\n        except json.JSONDecodeError:\n            return HttpResponse('Invalid JSON file.')\n    return render(request, 'review/import_json.html')\n\ndef update_review(request):\n    if request.method == 'POST':\n        page = request.POST.get('page')\n        function_name = request.POST.get('function_name')\n        status = request.POST.get('status')\n        notes = request.POST.get('notes')\n\n        # Get or create ReviewItem for the specific page and function\n        review_item, created = ReviewItem.objects.get_or_create(\n            page=page,\n            function_name=function_name,\n        )\n\n        # Update the review item with the new data\n        review_item.status = status\n        review_item.notes = notes\n\n        # Save the updated review item to the database\n        review_item.save()\n\n        return HttpResponse('Review updated successfully')\n    else:\n        return HttpResponse('Invalid request method')\n"}, {"file": "home.html", "path": "templates/review/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Review Tool</title>\n    <link rel=\"stylesheet\" href=\"{% static 'review/style.css' %}\">\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1>Review Tool</h1>\n\n        {% for page_data in data %}\n            <div id=\"page-{{ page_data.page|slugify }}-section\" class=\"page-section\">\n                <h2>{{ page_data.page }}</h2>\n\n                {% for function_data in page_data.function %}\n                    <div id=\"function-{{ function_data.function|slugify }}-item\" class=\"function-item\">\n                        <h3>{{ function_data.function }}</h3>\n                        <p>{{ function_data.description }}</p>\n\n                        <form id=\"review-form-{{ function_data.function|slugify }}\" class=\"review-form\" method=\"post\" action=\"{% url 'update_review' %}\">\n                            {% csrf_token %}\n                            <input type=\"hidden\" name=\"page\" value=\"{{ page_data.page }}\">\n                            <input type=\"hidden\" name=\"function_name\" value=\"{{ function_data.function }}\">\n\n                            <label for=\"status-{{ function_data.function|slugify }}\" class=\"status-label\">Status:</label>\n                            <select id=\"status-{{ function_data.function|slugify }}\" class=\"status-select\" name=\"status\">\n                                <option value=\"Select\" {% if review_dict|get_item:(page_data.page, function_data.function)%} {% if review_dict|get_item:(page_data.page, function_data.function).status == 'Select' %}selected{% endif %}{% endif %}>Select</option>\n                                <option value=\"Pass\" {% if review_dict|get_item:(page_data.page, function_data.function)%} {% if review_dict|get_item:(page_data.page, function_data.function).status == 'Pass' %}selected{% endif %}{% endif %}>Pass</option>\n                                <option value=\"Fail\" {% if review_dict|get_item:(page_data.page, function_data.function)%} {% if review_dict|get_item:(page_data.page, function_data.function).status == 'Fail' %}selected{% endif %}{% endif %}>Fail</option>\n                            </select>\n\n                            <label for=\"notes-{{ function_data.function|slugify }}\" class=\"notes-label\">Notes:</label>\n                            <textarea id=\"notes-{{ function_data.function|slugify }}\" class=\"notes-textarea\" name=\"notes\">{% if review_dict|get_item:(page_data.page, function_data.function)%}{{ review_dict|get_item:(page_data.page, function_data.function).notes }}{% endif %}</textarea>\n\n                            <button id=\"submit-{{ function_data.function|slugify }}\" class=\"submit-button\" type=\"submit\">Submit</button>\n                        </form>\n                    </div>\n                {% endfor %}\n            </div>\n        {% endfor %}\n\n        <a href=\"{% url 'import_json' %}\" id=\"import-link\" class=\"import-link\">Import JSON</a>\n        <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"about-link\">About</a>\n    </div>\n\n<script>\n// Function to update review using AJAX\nfunction updateReview(page, functionName, status, notes) {\n  fetch('/update_review/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'X-CSRFToken': getCookie('csrftoken') // Get CSRF token from cookie\n    },\n    body: `page=${page}&function_name=${functionName}&status=${status}&notes=${notes}`\n  })\n  .then(response => {\n    if (response.ok) {\n      console.log('Review updated successfully');\n    } else {\n      console.error('Failed to update review');\n    }\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });\n}\n\n// Helper function to get CSRF token from cookie\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\n// Attach event listeners to all review forms\nconst reviewForms = document.querySelectorAll('.review-form');\n\nreviewForms.forEach(form => {\n  form.addEventListener('submit', function(event) {\n    event.preventDefault(); // Prevent default form submission\n\n    // Get form data\n    const page = this.querySelector('input[name=\"page\"]').value;\n    const functionName = this.querySelector('input[name=\"function_name\"]').value;\n    const status = this.querySelector('select[name=\"status\"]').value;\n    const notes = this.querySelector('textarea[name=\"notes\"]').value;\n\n    // Call updateReview function to update review using AJAX\n    updateReview(page, functionName, status, notes);\n  });\n});\n</script>\n</body>\n</html>\n\n"}, {"file": "about.html", "path": "templates/review/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Review Tool</h1>\n    <p>This tool is designed to facilitate the review of test code.</p>\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"}, {"file": "import_json.html", "path": "templates/review/import_json.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Import JSON</title>\n</head>\n<body>\n    <h1>Import JSON File</h1>\n    <form method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        <input type=\"file\" name=\"json_file\">\n        <button type=\"submit\">Upload</button>\n    </form>\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"}, {"file": "style.css", "path": "static/review/style.css", "code": "body {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\n.container {\n    width: 80%;\n    margin: auto;\n}\n\n.page-section {\n    margin-bottom: 20px;\n    border: 1px solid #ccc;\n    padding: 10px;\n}\n\n.function-item {\n    margin-bottom: 10px;\n    padding: 10px;\n    border: 1px dotted #999;\n}\n\n.status-select {\n    margin-bottom: 5px;\n}\n\n.notes-textarea {\n    width: 100%;\n    height: 100px;\n    margin-bottom: 10px;\n}\n\n.submit-button {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    cursor: pointer;\n}\n\n.import-link, .about-link {\n    display: block;\n    margin-top: 10px;\n    text-decoration: none;\n    color: blue;\n}\n"}, {"file": "templatetags.py", "path": "review/templatetags/review_tags.py", "code": "from django import template\n\nregister = template.Library()\n\n@register.filter(name='get_item')\ndef get_item(dictionary, key):\n    try:\n        return dictionary.get(key)\n    except:\n        return None"}, {"file": "__init__.py", "path": "review/templatetags/__init__.py", "code": "from .review_tags import *\n"}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here' # Replace with a strong secret key!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "myapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef hello_world(request):\n    return render(request, 'hello_world.html')"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('hello/', views.hello_world, name='hello_world'),\n]"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome!</h1>\n        <a href=\"{% url 'hello_world' %}\" id=\"hello-button\" class=\"button\">Go to HelloWorld Page</a>\n    </div>\n</body>\n</html>"}, {"file": "hello_world.html", "path": "templates/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <div id=\"hello-container\" class=\"container\">\n        <h1 id=\"hello-message\" class=\"message\">Hello World!</h1>\n        <a href=\"{% url 'home' %}\" id=\"home-button\" class=\"button\">Back to Home</a>\n    </div>\n</body>\n</html>"}], "16": [{"file": "input_validation.py", "path": "src/validation/input_validation.py", "code": "import pandas as pd\n\nclass InputValidator:\n    def __init__(self, filepath):\n        self.filepath = filepath\n\n    def check_file_existence(self):\n        try:\n            df = pd.read_excel(self.filepath)\n            return True, None\n        except FileNotFoundError:\n            return False, \"Error: 'Spring Semester Subjects.xlsx' file not found.\"\n        except Exception as e:\n            return False, f\"Error: Could not read the file. {e}\"\n\n    def validate_headers(self):\n        try:\n            df = pd.read_excel(self.filepath)\n            expected_headers = ['#', 'Name', 'Weekday', 'Time']\n            if list(df.columns) == expected_headers:\n                return True, None\n            else:\n                return False, f\"Error: Incorrect headers. Expected {expected_headers}, but got {list(df.columns)}.\"\n        except Exception as e:\n            return False, f\"Error during header validation: {e}\"\n\n    def validate_time_column(self):\n        try:\n            df = pd.read_excel(self.filepath)\n            allowed_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n            invalid_times = df[~df['Time'].isin(allowed_times)]['Time'].unique().tolist()\n\n            if not invalid_times:\n                return True, None\n            else:\n                return False, f\"Error: Invalid time periods found: {invalid_times}\"\n        except Exception as e:\n            return False, f\"Error during time column validation: {e}\"\n\n    def validate_data_integrity(self):\n        try:\n            df = pd.read_excel(self.filepath)\n            if df.isnull().values.any():\n                 return False, \"Error: Missing values found in the dataframe.\"\n            else:\n                return True, None\n        except Exception as e):\n            return False, f\"Error during data integrity validation: {e}\"\n\n    def validate_null_value(self):\n        try:\n            df = pd.read_excel(self.filepath)\n        except Exception as e:\n            return False, f\"Error reading file for null value validation: {e}\"\n        if df.isnull().any().any():\n            null_columns = df.columns[df.isnull().any()].tolist()\n            return False, f\"Error: Null values found in columns: {null_columns}\"\n        else:\n            return True, None"}, {"file": "data_transformer.py", "path": "src/transformation/data_transformer.py", "code": "import pandas as pd\n\nclass DataTransformer:\n    def __init__(self, dataframe):\n        self.df = dataframe\n\n    def transform_to_two_dimension_table(self):\n        weekdays = self.df['Weekday'].unique()\n        time_periods = self.df['Time'].unique()\n        transformed_data = {}\n\n        for weekday in weekdays:\n            transformed_data[weekday] = {}\n            for time_period in time_periods:\n                transformed_data[weekday][time_period] = None\n\n        for _, row in self.df.iterrows():\n            weekday = row['Weekday']\n            time_period = row['Time']\n            subject_name = row['Name']  # Or any other subject identifier\n\n            # Handling potential overwrites; append if multiple subjects fit a slot, or prioritize one\n            if transformed_data[weekday][time_period] is None:\n                transformed_data[weekday][time_period] = subject_name\n            else:\n                transformed_data[weekday][time_period] = transformed_data[weekday][time_period] + ', ' + subject_name\n        return transformed_data\n\n    def data_mapping(self, two_dimensional_data):\n      # No explicit mapping needed if the data is already in the correct structure\n      # This function now serves to convert the dictionary to pandas DataFrame for easier handling\n        weekday_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n        time_period_order = ['First period', 'Second period', 'Third period', 'Fourth period']\n\n        output_data = []\n        for weekday in weekday_order:\n            row = [weekday]\n            for time_period in time_period_order:\n                row.append(two_dimensional_data.get(weekday, {}).get(time_period, '')) #Get value if the weekday exists, otherwise return empty string\n            output_data.append(row)\n\n        columns = ['Weekday'] + time_period_order\n        df_output = pd.DataFrame(output_data, columns=columns)\n        return df_output"}, {"file": "output_handler.py", "path": "src/output/output_handler.py", "code": "import pandas as pd\n\nclass OutputHandler:\n    def __init__(self, filename='output.xlsx'):\n        self.filename = filename\n\n    def create_output_excel_file(self):\n        try:\n            # Create an empty dataframe to initialize the Excel file\n            df = pd.DataFrame()\n            df.to_excel(self.filename, index=False)\n            return True, None\n        except Exception as e:\n            return False, f\"Error creating output Excel file: {e}\"\n\n    def save_table_to_excel(self, dataframe):\n        try:\n            dataframe.to_excel(self.filename, index=False)\n            return True, None\n        except Exception as e:\n            return False, f\"Error saving table to Excel: {e}\""}, {"file": "main.py", "path": "main.py", "code": "import pandas as pd\nfrom src.validation.input_validation import InputValidator\nfrom src.transformation.data_transformer import DataTransformer\nfrom src.output.output_handler import OutputHandler\n\n\ndef main():\n    filepath = 'Spring Semester Subjects.xlsx'\n\n    # Input Validation\n    validator = InputValidator(filepath)\n    is_valid, error_message = validator.check_file_existence()\n    if not is_valid:\n        print(error_message)\n        return\n\n    is_valid, error_message = validator.validate_headers()\n    if not is_valid:\n        print(error_message)\n        return\n\n    is_valid, error_message = validator.validate_time_column()\n    if not is_valid:\n        print(error_message)\n        return\n\n    is_valid, error_message = validator.validate_data_integrity()\n    if not is_valid:\n        print(error_message)\n        return\n\n    is_valid, error_message = validator.validate_null_value()\n    if not is_valid:\n        print(error_message)\n        return\n\n    # Data Transformation\n    try:\n        df = pd.read_excel(filepath)\n        transformer = DataTransformer(df)\n        two_dimensional_data = transformer.transform_to_two_dimension_table()\n        transformed_df = transformer.data_mapping(two_dimensional_data)\n    except Exception as e:\n        print(f\"Error during data transformation: {e}\")\n        return\n\n    # Output File Creation\n    output_handler = OutputHandler()\n    is_created, error_message = output_handler.create_output_excel_file()\n    if not is_created:\n        print(error_message)\n        return\n\n    is_saved, error_message = output_handler.save_table_to_excel(transformed_df)\n    if not is_saved:\n        print(error_message)\n        return\n\n    print(\"Data transformation and saving completed successfully.\")\n\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nopenpyxl"}, {"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": "# This is a placeholder file.  In a real project, it would contain the data.\n# The content here should be replaced with your actual Spring Semester Subjects data in Excel format.\n# For example:\n#\n#    #      Name           Weekday        Time\n#  1      Math          Monday      First period\n#  2      Physics       Tuesday     Second period\n#  3      Chemistry     Wednesday   Third period\n#  4      Biology         Thursday    Fourth period\n#  5      English         Friday        First period\n#\n# This is just a dummy data. The file should be in proper Excel format when used with the Python code.\n# You can create this file manually using Microsoft Excel, Google Sheets, or any other spreadsheet software.\n# Save it as 'Spring Semester Subjects.xlsx' in the same directory as your Python script.\n#\n# Note: The provided Python code assumes the file exists and has the correct structure.\n# Please ensure that the file is correctly formatted before running the code."}], "18": [{"file": "main.py", "path": "/", "code": "import json\n\nclass Game:\n    def __init__(self):\n        self.game_data = self.load_game_data()\n        self.current_page = 'Main Menu'\n        self.inventory = []\n        self.current_room = None #Added\n\n    def load_game_data(self):\n        with open('game_data.json', 'r') as f:\n            return json.load(f)\n\n    def display_main_menu(self):\n        print(\"\\n--- Main Menu ---\")\n        print(\"1. Start Game\")\n        print(\"2. Instructions\")\n        print(\"3. Exit Game\")\n\n    def display_instructions(self):\n        print(\"\\n--- Instructions ---\")\n        print(\"This is a simple text adventure game.\\\")\n        print(\"Type commands to interact with the world.\\\")\n        print(\"Available commands: move, look, pick, check, help, exit\")\n\n    def start_game(self):\n        self.current_page = 'Game Environment'\n        self.current_room = \"Entrance Hall\" #start in entrance\n        print(\"\\n--- Game Started ---\")\n        self.display_room()\n\n    def display_room(self):\n      print(f\"\\nYou are in the {self.current_room}\")\n      print(\"You can look around, move to another room, pick up items, or check your inventory.\") #added display for current room info.\n\n    def move_player(self, direction):\n      #simple implementation.  replace with proper room connectivity logic\n      if direction == \"north\":\n        self.current_room = \"North Room\" #dummy room\n        print(\"You move north.\")\n        self.display_room()\n      elif direction == \"south\":\n        self.current_room = \"South Room\"\n        print(\"You move south.\")\n        self.display_room()\n      else:\n        print(\"You can only move north or south. Sorry, no room connectivity added.\")\n\n    def look_around(self):\n        print(\"You see a dusty room with cobwebs in the corners.\")\n        #add room specific descriptions\n\n    def pick_item(self):\n        if \"key\" not in self.inventory:\n            self.inventory.append(\"key\")\n            print(\"You picked up a key.\")\n        else:\n            print(\"You already picked up the key.\")\n\n    def check_inventory(self):\n        if self.inventory:\n            print(\"Your inventory contains:\")\n            for item in self.inventory:\n                print(f\"- {item}\")\n        else:\n            print(\"Your inventory is empty.\")\n\n    def display_help(self):\n        print(\"Available commands: move [north/south], look, pick, check, help, exit\")\n\n    def parse_command(self, command):\n        command = command.lower()\n        if command == \"start\":\n            self.start_game()\n        elif command == \"instructions\":\n            self.display_instructions()\n        elif command == \"exit\":\n            print(\"Exiting the game. Goodbye!\")\n            return False\n        elif command.startswith(\"move\"): #move command\n          parts = command.split()\n          if len(parts) > 1:\n            direction = parts[1]\n            self.move_player(direction)\n          else:\n            print(\"Move where? (north/south)\") #user didn't enter direction\n\n        elif command == \"look\":\n            self.look_around()\n        elif command == \"pick\":\n            self.pick_item()\n        elif command == \"check\":\n            self.check_inventory()\n        elif command == \"help\":\n            self.display_help()\n        else:\n            print(\"Invalid command. Type 'help' for a list of commands.\")\n        return True\n\n    def run(self):\n        running = True\n        while running:\n            if self.current_page == 'Main Menu':\n                self.display_main_menu()\n                choice = input(\"> \")\n                if choice == '1':\n                    self.start_game()\n                elif choice == '2':\n                    self.display_instructions()\n                elif choice == '3':\n                    running = False\n                    print(\"Exiting the game. Goodbye!\")\n                else:\n                    print(\"Invalid choice. Please try again.\")\n            elif self.current_page == 'Game Environment':\n                command = input(\"> \")\n                running = self.parse_command(command)\n\nif __name__ == \"__main__\":\n    game = Game()\n    game.run()\n"}, {"file": "game_data.json", "path": "/", "code": "[\n  {\n    \"page\": \"Main Menu\",\n    \"required\": true,\n    \"function\": [\n      {\n        \"function\": \"Start Game\",\n        \"description\": \"Begin a new game session from the main menu.\",\n        \"required\": true\n      },\n      {\n        \"function\": \"Instructions\",\n        \"description\": \"Display game instructions and how to play.\",\n        \"required\": true\n      },\n      {\n        \"function\": \"Exit Game\",\n        \"description\": \"Exit the game from the main menu and/or in the game.\",\n        \"required\": true\n      }\n    ]\n  },\n  {\n    \"page\": \"Game Environment\",\n    \"required\": true,\n    \"function\": [\n      {\n        \"function\": \"Move Player\",\n        \"description\": \"Move the player character into a room.\",\n        \"required\": true\n      },\n      {\n        \"function\": \"Look Around\",\n        \"description\": \"Inspect the current area.\",\n        \"required\": true\n      },\n      {\n        \"function\": \"Pick Item\",\n        \"description\": \"Pick up items found in the environment. In the bash crawl, this is automatically when the player gets into the room. Set one item in this project is enough.\",\n        \"required\": true\n      },\n      {\n        \"function\": \"Check Inventory\",\n        \"description\": \"Check items the player currently holds.\",\n        \"required\": true\n      }\n    ]\n  },\n  {\n    \"page\": \"Game Logic\",\n    \"required\": true,\n    \"function\": [\n      {\n        \"function\": \"Parse Command\",\n        \"description\": \"Interpret the input commands from the player.\",\n        \"required\": true\n      },\n      {\n        \"function\": \"Update Game State\",\n        \"description\": \"Update the game state based on player actions and events.\",\n        \"required\": true\n      }\n    ]\n  },\n  {\n    \"page\": \"Help and Support\",\n    \"required\": false,\n    \"function\": [\n      {\n        \"function\": \"Display Help\",\n        \"description\": \"Provide in-game help and support information.\",\n        \"required\": true\n      }\n    ]\n  }\n]\n"}], "19": [{"file": "death_analysis.py", "path": "src/death_analysis.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nclass DeathAnalyzer:\n    def __init__(self, data_path):\n        self.data_path = data_path\n        self.df = None\n\n    def ReadDeathlistData(self):\n        \"\"\"Load and read data from the 'Deathlist.csv' file.\"\"\"\n        try:\n            self.df = pd.read_csv(self.data_path)\n            print(\"Data loaded successfully.\")\n        except FileNotFoundError:\n            print(f\"Error: File not found at {self.data_path}\")\n            self.df = None\n        except Exception as e:\n            print(f\"Error loading data: {e}\")\n            self.df = None\n        return self.df\n\n    def ValidateDataset(self):\n        \"\"\"Validate the dataset to ensure it contains the required data and format before processing.\"\"\"\n        if self.df is None:\n            print(\"Error: No data loaded.  Please load data first.\")\n            return False\n\n        required_columns = ['DateOfDeath', 'CauseOfDeath'] #Example columns. Adjust to actual column names.\n        for col in required_columns:\n            if col not in self.df.columns:\n                print(f\"Error: Missing required column: {col}\")\n                return False\n\n        #Add more checks here, like checking for date format.\n        return True\n\n\n    def ProcessData(self):\n        \"\"\"Process the dataset to structure data appropriately for weekly analysis.\"\"\"\n        if self.df is None or not isinstance(self.df, pd.DataFrame):\n            print(\"Error: Dataframe is not valid. Load data first.\")\n            return\n\n        try:\n            self.df['DateOfDeath'] = pd.to_datetime(self.df['DateOfDeath'])\n            self.df.set_index('DateOfDeath', inplace=True)\n            print(\"Data processing complete.\")\n        except Exception as e:\n            print(f\"Error during data processing: {e}\")\n\n    def CalculateWeeklyDeaths(self):\n        \"\"\"Aggregate the data to calculate the number of deaths per week.\"\"\"\n        if self.df is None:\n            print(\"Error: No data loaded. Load data first.\")\n            return None\n\n        try:\n            weekly_deaths = self.df.resample('W').size()\n            print(\"Weekly deaths calculated.\")\n            return weekly_deaths\n        except Exception as e:\n            print(f\"Error calculating weekly deaths: {e}\")\n            return None\n\n    def GenerateHistogram(self, weekly_deaths):\n        \"\"\"Create a histogram depicting the weekly deaths calculated from the dataset.\"\"\"\n        if weekly_deaths is None:\n            print(\"Error: No weekly deaths data available.\")\n            return\n\n        try:\n            plt.figure(figsize=(12, 6))\n            plt.hist(weekly_deaths.values, bins=20, color='skyblue', edgecolor='black') # Changed from weekly_deaths to weekly_deaths.values\n            plt.title('Distribution of Weekly Deaths')\n            plt.xlabel('Number of Deaths')\n            plt.ylabel('Frequency')\n            plt.grid(axis='y', alpha=0.75)\n            plt.tight_layout()\n            plt.savefig('weekly_deaths_histogram.png')\n            print(\"Histogram generated and saved as 'weekly_deaths_histogram.png'\")\n            return 'weekly_deaths_histogram.png'\n        except Exception as e:\n            print(f\"Error generating histogram: {e}\")\n            return None\n\n    def OutputHistogram(self, histogram_path):\n        \"\"\"Print or display the generated histogram to the user.\"\"\"\n        if histogram_path is None:\n            print(\"Error: No histogram path provided.\")\n            return\n\n        try:\n            img = plt.imread(histogram_path)\n            plt.imshow(img)\n            plt.axis('off')\n            plt.title('Weekly Deaths Histogram')\n            plt.show()\n            print(\"Histogram displayed.\")\n        except FileNotFoundError:\n            print(f\"Error: Histogram file not found at {histogram_path}\")\n        except Exception as e:\n            print(f\"Error displaying histogram: {e}\")\n\n\n\nif __name__ == '__main__':\n    data_file = 'Deathlist.csv'\n    analyzer = DeathAnalyzer(data_file)\n\n    #Run validation at the very start, right after reading the file.\n    if analyzer.ReadDeathlistData():\n        if analyzer.ValidateDataset():\n            analyzer.ProcessData()\n            weekly_deaths = analyzer.CalculateWeeklyDeaths()\n            if weekly_deaths is not None:\n                histogram_path = analyzer.GenerateHistogram(weekly_deaths)\n                if histogram_path:\n                    analyzer.OutputHistogram(histogram_path)\n\n\n"}, {"file": "Deathlist.csv", "path": "data/Deathlist.csv", "code": "DateOfDeath,CauseOfDeath,Age\n2023-01-01,Heart Disease,75\n2023-01-03,Cancer,68\n2023-01-07,Accident,32\n2023-01-10,Stroke,82\n2023-01-15,Heart Disease,90\n2023-01-17,Pneumonia,88\n2023-01-22,Cancer,72\n2023-01-28,Accident,45\n2023-02-01,Stroke,78\n2023-02-05,Heart Disease,85\n2023-02-08,Cancer,60\n2023-02-12,Accident,25\n2023-02-15,Stroke,92\n2023-02-19,Heart Disease,70\n2023-02-23,Pneumonia,95\n2023-02-27,Cancer,55\n2023-03-02,Accident,38\n2023-03-06,Stroke,80\n2023-03-10,Heart Disease,87\n2023-03-14,Cancer,77"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nmatplotlib"}], "20": [{"file": "settings.py", "path": "blog_project/blog_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blog_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'blog_project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "blog_project/blog_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),  # Include the blog app's URLs\n]"}, {"file": "wsgi.py", "path": "blog_project/blog_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "manage.py", "path": "blog_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "models.py", "path": "blog_project/blog/models.py", "code": "from django.db import models\nfrom django.utils import timezone\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    date_posted = models.DateTimeField(default=timezone.now)\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    categories = models.ManyToManyField(Category, related_name='posts')\n\n    def __str__(self):\n        return self.title\n\n\nclass Comment(models.Model):\n    post = models.ForeignKey(Post, related_name='comments', on_delete=models.CASCADE)\n    author = models.CharField(max_length=50)\n    content = models.TextField()\n    date_posted = models.DateTimeField(default=timezone.now)\n\n    def __str__(self):\n        return self.author\n"}, {"file": "views.py", "path": "blog_project/blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import Post, Category, Comment\nfrom django.contrib.auth.decorators import login_required\nfrom .forms import PostForm, CommentForm, CategoryForm\nfrom django.contrib.auth.models import User\n\n\ndef home(request):\n    posts = Post.objects.all().order_by('-date_posted')\n    return render(request, 'blog/home.html', {'posts': posts})\n\n\ndef post_detail(request, post_id):\n    post = get_object_or_404(Post, pk=post_id)\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.post = post\n            comment.save()\n            return redirect('post_detail', post_id=post.id)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/post_detail.html', {'post': post, 'form': form})\n\n@login_required\ndef add_post(request):\n    if request.method == 'POST':\n        form = PostForm(request.POST)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.author = request.user\n            post.save()\n            form.save_m2m()\n            return redirect('home')\n    else:\n        form = PostForm()\n    return render(request, 'blog/add_post.html', {'form': form})\n\n@login_required\ndef manage_post(request, post_id):\n    post = get_object_or_404(Post, pk=post_id)\n    if request.user != post.author:\n        return HttpResponse('You are not authorized to edit this post.')\n    if request.method == 'POST':\n        form = PostForm(request.POST, instance=post)\n        if form.is_valid():\n            form.save()\n            return redirect('post_detail', post_id=post.id)\n    else:\n        form = PostForm(instance=post)\n    return render(request, 'blog/manage_post.html', {'form': form, 'post': post})\n\n@login_required\ndef delete_post(request, post_id):\n    post = get_object_or_404(Post, pk=post_id)\n    if request.user != post.author:\n        return HttpResponse('You are not authorized to delete this post.')\n    post.delete()\n    return redirect('home')\n\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\n\ndef categories(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/categories.html', {'categories': categories})\n\n\ndef category_detail(request, category_id):\n    category = get_object_or_404(Category, pk=category_id)\n    return render(request, 'blog/category_detail.html', {'category': category})\n\n@login_required\ndef manage_comments(request, comment_id):\n    comment = get_object_or_404(Comment, pk=comment_id)\n    post_id = comment.post.id\n    if request.user != comment.post.author:\n       return HttpResponse('You are not authorized to delete comments.')\n    comment.delete()\n    return redirect('post_detail', post_id=post_id)\n\n@login_required\ndef add_category(request):\n    if request.method == 'POST':\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('categories')\n    else:\n        form = CategoryForm()\n    return render(request, 'blog/add_category.html', {'form': form})\n\n\n@login_required\ndef manage_category(request, category_id):\n    category = get_object_or_404(Category, pk=category_id)\n    if request.method == 'POST':\n        form = CategoryForm(request.POST, instance=category)\n        if form.is_valid():\n            form.save()\n            return redirect('categories')\n    else:\n        form = CategoryForm(instance=category)\n    return render(request, 'blog/manage_category.html', {'form': form, 'category': category})\n\n\n@login_required\ndef delete_category(request, category_id):\n    category = get_object_or_404(Category, pk=category_id)\n    category.delete()\n    return redirect('categories')\n\n\ndef archive(request):\n    posts = Post.objects.all().order_by('-date_posted')\n    return render(request, 'blog/archive.html', {'posts':posts})\n"}, {"file": "urls.py", "path": "blog_project/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:post_id>/', views.post_detail, name='post_detail'),\n    path('post/add/', views.add_post, name='add_post'),\n    path('post/<int:post_id>/manage/', views.manage_post, name='manage_post'),\n    path('post/<int:post_id>/delete/', views.delete_post, name='delete_post'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('categories/<int:category_id>/', views.category_detail, name='category_detail'),\n    path('comment/<int:comment_id>/delete/', views.manage_comments, name='manage_comments'),\n    path('categories/add/', views.add_category, name='add_category'),\n    path('categories/<int:category_id>/manage/', views.manage_category, name='manage_category'),\n    path('categories/<int:category_id>/delete/', views.delete_category, name='delete_category'),\n    path('archive/', views.archive, name='archive'),\n]"}, {"file": "forms.py", "path": "blog_project/blog/forms.py", "code": "from django import forms\nfrom .models import Post, Comment, Category\n\n\nclass PostForm(forms.ModelForm):\n    categories = forms.ModelMultipleChoiceField(\n        queryset=Category.objects.all(),\n        widget=forms.CheckboxSelectMultiple,\n        required=False\n    )\n\n    class Meta:\n        model = Post\n        fields = ['title', 'content', 'categories']\n\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name', 'description']\n"}, {"file": "home.html", "path": "blog_project/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"text-center\">Latest Blog Posts</h1>\n\n        <form id=\"search-form\" class=\"mb-3\" method=\"get\">\n            <input id=\"search-input\" class=\"form-control\" type=\"text\" placeholder=\"Search...\">\n            <button id=\"search-button\" class=\"btn btn-primary mt-2\" type=\"submit\">Search</button>\n        </form>\n\n        <div id=\"post-list\" class=\"row\">\n            {% for post in posts %}\n                <div id=\"post-{{ post.id }}-container\" class=\"col-md-4 mb-3\">\n                    <div id=\"post-{{ post.id }}-card\" class=\"card\">\n                        <div id=\"post-{{ post.id }}-body\" class=\"card-body\">\n                            <h5 id=\"post-{{ post.id }}-title\" class=\"card-title\">{{ post.title }}</h5>\n                            <p id=\"post-{{ post.id }}-content\" class=\"card-text\">{{ post.content|truncatechars:100 }}</p>\n                            <a id=\"post-{{ post.id }}-link\" href=\"{% url 'post_detail' post.id %}\" class=\"btn btn-primary\">Read More</a>\n                        </div>\n                    </div>\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n{% endblock %}"}, {"file": "post_detail.html", "path": "blog_project/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"post-detail-container\" class=\"container\">\n        <h1 id=\"post-title\" class=\"mb-3\">{{ post.title }}</h1>\n        <p id=\"post-author\" class=\"text-muted\">By: {{ post.author }} on {{ post.date_posted|date:\"F d, Y\" }}</p>\n        <p id=\"post-content\">{{ post.content }}</p>\n\n        {% if user.is_authenticated and user == post.author %}\n            <div id=\"post-management\" class=\"mb-3\">\n                <a id=\"manage-post-link\" class=\"btn btn-secondary\" href=\"{% url 'manage_post' post.id %}\">Edit Post</a>\n                <a id=\"delete-post-link\" class=\"btn btn-danger\" href=\"{% url 'delete_post' post.id %}\">Delete Post</a>\n            </div>\n        {% endif %}\n\n        <div id=\"comment-section\">\n            <h2 id=\"comments-title\" class=\"mb-3\">Comments</h2>\n            {% if post.comments.all %}\n            <ul id=\"comment-list\" class=\"list-unstyled\">\n                {% for comment in post.comments.all %}\n                    <li id=\"comment-{{comment.id}}-item\" class=\"media mb-3\">\n                        <div id=\"comment-{{comment.id}}-body\" class=\"media-body\">\n                            <h5 id=\"comment-{{comment.id}}-author\" class=\"mt-0 mb-1\">{{ comment.author }} <small class=\"text-muted\">on {{ comment.date_posted|date:\"F d, Y\" }}</small>\n                            {% if user.is_authenticated and user == post.author %}\n                                 <a id=\"delete-comment-link\" class=\"btn btn-danger btn-sm\" href=\"{% url 'manage_comments' comment.id %}\">Delete</a>\n                            {% endif %}\n                            </h5>\n                            <p id=\"comment-{{comment.id}}-content\">{{ comment.content }}</p>\n                        </div>\n                    </li>\n                {% endfor %}\n            </ul>\n            {% else %}\n            <p id=\"no-comments-message\">No comments yet.</p>\n            {% endif %}\n        </div>\n\n        <div id=\"comment-form-section\">\n            <h3 id=\"add-comment-title\" class=\"mt-4\">Add a Comment</h3>\n            <form id=\"comment-form\" method=\"post\">\n                {% csrf_token %}\n                <div id=\"comment-author-group\" class=\"form-group\">\n                    <label id=\"comment-author-label\" for=\"id_author\">Your Name:</label>\n                    {{ form.author }}\n                </div>\n                <div id=\"comment-content-group\" class=\"form-group\">\n                    <label id=\"comment-content-label\" for=\"id_content\">Comment:</label>\n                    {{ form.content }}\n                </div>\n                <button id=\"comment-submit-button\" class=\"btn btn-primary\" type=\"submit\">Submit</button>\n            </form>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "add_post.html", "path": "blog_project/templates/blog/add_post.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"add-post-container\" class=\"container\">\n        <h1 id=\"add-post-title\" class=\"text-center\">Add New Post</h1>\n        <form id=\"add-post-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"add-post-button\" class=\"btn btn-primary\" type=\"submit\">Submit</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "manage_post.html", "path": "blog_project/templates/blog/manage_post.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"manage-post-container\" class=\"container\">\n        <h1 id=\"manage-post-title\" class=\"text-center\">Manage Post</h1>\n        <form id=\"manage-post-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"manage-post-button\" class=\"btn btn-primary\" type=\"submit\">Update</button>\n        </form>\n        <a id=\"back-to-post-link\" href=\"{% url 'post_detail' post.id %}\">Back to Post</a>\n    </div>\n{% endblock %}"}, {"file": "about.html", "path": "blog_project/templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"text-center\">About Us</h1>\n        <p id=\"about-content\">This is a simple blog created with Django.</p>\n\n        <h2 id=\"contact-title\">Contact Us</h2>\n\n        <form id=\"contact-form\">\n            <div id=\"contact-name-group\" class=\"form-group\">\n                <label id=\"contact-name-label\" for=\"name\">Name:</label>\n                <input id=\"contact-name-input\" type=\"text\" class=\"form-control\" id=\"name\" placeholder=\"Enter your name\">\n            </div>\n\n            <div id=\"contact-email-group\" class=\"form-group\">\n                <label id=\"contact-email-label\" for=\"email\">Email address:</label>\n                <input id=\"contact-email-input\" type=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Enter your email\">\n            </div>\n\n            <div id=\"contact-message-group\" class=\"form-group\">\n                <label id=\"contact-message-label\" for=\"message\">Message:</label>\n                <textarea id=\"contact-message-textarea\" class=\"form-control\" id=\"message\" rows=\"3\"></textarea>\n            </div>\n\n            <button id=\"contact-submit-button\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "categories.html", "path": "blog_project/templates/blog/categories.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"categories-container\" class=\"container\">\n        <h1 id=\"categories-title\" class=\"text-center\">Blog Categories</h1>\n\n        {% if user.is_authenticated and user.is_superuser %}\n            <a id=\"add-category-link\" class=\"btn btn-primary mb-3\" href=\"{% url 'add_category' %}\">Add Category</a>\n        {% endif %}\n\n        <div id=\"category-list\" class=\"row\">\n            {% for category in categories %}\n                <div id=\"category-{{ category.id }}-container\" class=\"col-md-4 mb-3\">\n                    <div id=\"category-{{ category.id }}-card\" class=\"card\">\n                        <div id=\"category-{{ category.id }}-body\" class=\"card-body\">\n                            <h5 id=\"category-{{ category.id }}-title\" class=\"card-title\">{{ category.name }}</h5>\n                            <p id=\"category-{{ category.id }}-description\" class=\"card-text\">{{ category.description }}</p>\n                            <a id=\"category-{{ category.id }}-link\" href=\"{% url 'category_detail' category.id %}\" class=\"btn btn-primary\">View Posts</a>\n                            {% if user.is_authenticated and user.is_superuser %}\n                                <a id=\"category-{{ category.id }}-manage-link\" class=\"btn btn-secondary\" href=\"{% url 'manage_category' category.id %}\">Edit</a>\n                                <a id=\"category-{{ category.id }}-delete-link\" class=\"btn btn-danger\" href=\"{% url 'delete_category' category.id %}\">Delete</a>\n                            {% endif %}\n                        </div>\n                    </div>\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n{% endblock %}"}, {"file": "category_detail.html", "path": "blog_project/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"category-detail-container\" class=\"container\">\n        <h1 id=\"category-detail-title\" class=\"text-center\">Category: {{ category.name }}</h1>\n\n        <div id=\"post-list\" class=\"row\">\n            {% for post in category.posts.all %}\n                <div id=\"post-{{ post.id }}-container\" class=\"col-md-4 mb-3\">\n                    <div id=\"post-{{ post.id }}-card\" class=\"card\">\n                        <div id=\"post-{{ post.id }}-body\" class=\"card-body\">\n                            <h5 id=\"post-{{ post.id }}-title\" class=\"card-title\">{{ post.title }}</h5>\n                            <p id=\"post-{{ post.id }}-content\" class=\"card-text\">{{ post.content|truncatechars:100 }}</p>\n                            <a id=\"post-{{ post.id }}-link\" href=\"{% url 'post_detail' post.id %}\" class=\"btn btn-primary\">Read More</a>\n                        </div>\n                    </div>\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n{% endblock %}"}, {"file": "add_category.html", "path": "blog_project/templates/blog/add_category.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"add-category-container\" class=\"container\">\n        <h1 id=\"add-category-title\" class=\"text-center\">Add New Category</h1>\n        <form id=\"add-category-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"add-category-button\" class=\"btn btn-primary\" type=\"submit\">Submit</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "manage_category.html", "path": "blog_project/templates/blog/manage_category.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"manage-category-container\" class=\"container\">\n        <h1 id=\"manage-category-title\" class=\"text-center\">Manage Category</h1>\n        <form id=\"manage-category-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"manage-category-button\" class=\"btn btn-primary\" type=\"submit\">Update</button>\n        </form>\n        <a id=\"back-to-categories-link\" href=\"{% url 'categories' %}\">Back to Categories</a>\n    </div>\n{% endblock %}"}, {"file": "archive.html", "path": "blog_project/templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"archive-container\" class=\"container\">\n        <h1 id=\"archive-title\" class=\"text-center\">Archive</h1>\n        <div id=\"archive-posts\" class=\"row\">\n            {% for post in posts %}\n                <div id=\"post-{{ post.id }}-container\" class=\"col-md-4 mb-3\">\n                    <div id=\"post-{{ post.id }}-card\" class=\"card\">\n                        <div id=\"post-{{ post.id }}-body\" class=\"card-body\">\n                            <h5 id=\"post-{{ post.id }}-title\" class=\"card-title\">{{ post.title }}</h5>\n                            <p id=\"post-{{ post.id }}-content\" class=\"card-text\">{{ post.content|truncatechars:100 }}</p>\n                            <a id=\"post-{{ post.id }}-link\" href=\"{% url 'post_detail' post.id %}\" class=\"btn btn-primary\">Read More</a>\n                            <small id=\"post-{{ post.id }}-date\" class=\"text-muted\">{{ post.date_posted|date:\"F d, Y\" }}</small>\n                        </div>\n                    </div>\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "blog_project/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n\t<style>\n\tbody { padding-top: 56px; }\n\t</style>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar navbar-expand-md navbar-dark bg-dark fixed-top\">\n        <a id=\"nav-brand\" class=\"navbar-brand\" href=\"{% url 'home' %}\">My Blog</a>\n        <button id=\"nav-toggler\" class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul id=\"nav-menu\" class=\"navbar-nav\">\n                <li id=\"nav-home\" class=\"nav-item\">\n                    <a id=\"nav-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                </li>\n                <li id=\"nav-about\" class=\"nav-item\">\n                    <a id=\"nav-about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n                </li>\n                <li id=\"nav-categories\" class=\"nav-item\">\n                    <a id=\"nav-categories-link\" class=\"nav-link\" href=\"{% url 'categories' %}\">Categories</a>\n                </li>\n                <li id=\"nav-archive\" class=\"nav-item\">\n                    <a id=\"nav-archive-link\" class=\"nav-link\" href=\"{% url 'archive' %}\">Archive</a>\n                </li>\n            </ul>\n\n            <ul class=\"navbar-nav ml-auto\">\n                {% if user.is_authenticated %}\n                    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'add_post' %}\">Add Post</a></li>\n                    <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Welcome, {{ user.username }}</a></li>\n                    <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Logout</a></li>\n\n                {% else %}\n                    <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Login</a></li>\n                    <li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Register</a></li>\n                {% endif %}\n            </ul>\n        </div>\n    </nav>\n\n    <div id=\"content\" class=\"container\">\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "admin.py", "path": "blog_project/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post, Category, Comment\n\nadmin.site.register(Post)\nadmin.site.register(Category)\nadmin.site.register(Comment)"}, {"file": "static/css/style.css", "path": "blog_project/static/css/style.css", "code": "/* Add your custom styles here */\nbody {\n  font-family: Arial, sans-serif;\n}\n\n.container {\n  margin-top: 20px;\n}\n"}]}