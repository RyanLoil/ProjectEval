{"1": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "bmi_calculator/settings.py", "path": "bmi_calculator/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION_STATICFILES_FINDERS= [\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "bmi_calculator/urls.py", "path": "bmi_calculator/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),  # Include the calculator app's URLs\n]"}, {"file": "bmi_calculator/wsgi.py", "path": "bmi_calculator/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()"}, {"file": "calculator/apps.py", "path": "calculator/", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    name = 'calculator'"}, {"file": "calculator/urls.py", "path": "calculator/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),  # URL pattern for the BMI calculator view\n]"}, {"file": "calculator/views.py", "path": "calculator/", "code": "from django.shortcuts import render\n\ndef bmi_calculator(request):\n    bmi = None\n    category = None\n    if request.method == 'POST':\n        try:\n            weight = float(request.POST.get('weight'))\n            height = float(request.POST.get('height'))\n\n            if height <= 0 or weight <= 0:\n                error_message = 'Height and weight must be positive values.'\n                return render(request, 'calculator/bmi_calculator.html', {'error_message': error_message})\n            bmi = weight / (height * height)\n\n            if bmi < 18.5:\n                category = 'Underweight'\n            elif 18.5 <= bmi < 25:\n                category = 'Normal weight'\n            elif 25 <= bmi < 30:\n                category = 'Overweight'\n            else:\n                category = 'Obese'\n        except (ValueError, TypeError):\n            error_message = 'Invalid input. Please enter numeric values for height and weight.'\n            return render(request, 'calculator/bmi_calculator.html', {'error_message': error_message})\n\n    return render(request, 'calculator/bmi_calculator.html', {'bmi': bmi, 'category': category})"}, {"file": "calculator/templates/calculator/bmi_calculator.html", "path": "calculator/templates/calculator/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        h1 {\n            text-align: center;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n        .result {\n            margin-top: 20px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            text-align: center;\n        }\n        .error {\n            color: red;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1 id=\"bmi-calculator-title\" class=\"title\">BMI Calculator</h1>\n\n        <form id=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            {% if error_message %}\n                <p id=\"error-message\" class=\"error\">{{ error_message }}</p>\n            {% endif %}\n\n            <div id=\"weight-input-group\" class=\"form-group\">\n                <label id=\"weight-label\" for=\"weight\">Weight (kg):</label>\n                <input type=\"number\" id=\"weight\" name=\"weight\" step=\"0.01\" required class=\"form-control\">\n            </div>\n\n            <div id=\"height-input-group\" class=\"form-group\">\n                <label id=\"height-label\" for=\"height\">Height (m):</label>\n                <input type=\"number\" id=\"height\" name=\"height\" step=\"0.01\" required class=\"form-control\">\n            </div>\n\n            <button id=\"calculate-button\" type=\"submit\" class=\"btn btn-primary\">Calculate</button>\n        </form>\n\n        {% if bmi %}\n        <div id=\"bmi-result\" class=\"result\">\n            <p id=\"bmi-value\">Your BMI is: {{ bmi|floatformat:2 }}</p>\n            <p id=\"bmi-category\">Category: {{ category }}</p>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "currency_converter/currency_converter/__init__.py", "code": ""}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-=^@&d1%g1a2(o2s+l+y!9+m^d#c8^c10z%v_#c02$h*2t*#p3r'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "currency_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "currency_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "currency_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'"}, {"file": "forms.py", "path": "currency_converter/converter/forms.py", "code": "from django import forms\n\nclass ConversionForm(forms.Form):\n    amount = forms.DecimalField(label=\"Amount\", initial=1.0)\n    from_currency = forms.CharField(label=\"From Currency\", max_length=3, initial=\"USD\")\n    to_currency = forms.CharField(label=\"To Currency\", max_length=3, initial=\"EUR\")"}, {"file": "models.py", "path": "currency_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.converter_view, name='converter'),\n]"}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\nfrom .forms import ConversionForm\nimport random\n\ndef get_exchange_rate(from_currency, to_currency):\n    # Simulate exchange rates (replace with actual API call)\n    # In a real application, use a reliable currency exchange rate API.\n    rates = {\n        ('USD', 'EUR'): random.uniform(0.8, 0.95),\n        ('EUR', 'USD'): random.uniform(1.05, 1.2),\n        ('USD', 'GBP'): random.uniform(0.7, 0.85),\n        ('GBP', 'USD'): random.uniform(1.2, 1.4),\n        ('EUR', 'GBP'): random.uniform(0.85, 0.95),\n        ('GBP', 'EUR'): random.uniform(1.05, 1.15),\n    }\n    # Add more currency pairs as needed\n    if (from_currency, to_currency) in rates:\n        return rates[(from_currency, to_currency)]\n    elif from_currency == to_currency:  # if same currency, rate = 1\n        return 1.0\n    else:\n        return None  # Or raise an exception for unsupported currencies\n\n\ndef converter_view(request):\n    if request.method == 'POST':\n        form = ConversionForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            from_currency = form.cleaned_data['from_currency'].upper()\n            to_currency = form.cleaned_data['to_currency'].upper()\n\n            exchange_rate = get_exchange_rate(from_currency, to_currency)\n\n            if exchange_rate is not None:\n                converted_amount = amount * exchange_rate\n                context = {\n                    'form': form,\n                    'converted_amount': round(converted_amount, 2),\n                    'from_currency': from_currency,\n                    'to_currency': to_currency,\n                    'amount': amount,\n                }\n                return render(request, 'converter/converter.html', context)\n            else:\n                context = {\n                    'form': form,\n                    'error_message': 'Unsupported currency pair.',\n                }\n                return render(request, 'converter/converter.html', context)\n\n    else:\n        form = ConversionForm()\n\n    return render(request, 'converter/converter.html', {'form': form})"}, {"file": "converter.html", "path": "currency_converter/templates/converter/converter.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n        .container {\n            max-width: 600px;\n            margin: 20px auto;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n            text-align: center;\n            color: #333;\n        }\n\n        form {\n            display: flex;\n            flex-direction: column;\n        }\n\n        label {\n            margin-top: 10px;\n            font-weight: bold;\n        }\n\n        input[type=\"number\"],\n        input[type=\"text\"] {\n            padding: 8px;\n            margin-top: 5px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            font-size: 16px;\n        }\n\n        button {\n            margin-top: 20px;\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n        }\n\n        button:hover {\n            background-color: #3e8e41;\n        }\n\n        .result {\n            margin-top: 20px;\n            padding: 10px;\n            background-color: #e6ffe6;\n            border: 1px solid #c3e6c3;\n            border-radius: 4px;\n            text-align: center;\n            font-size: 18px;\n        }\n\n        .error {\n            margin-top: 20px;\n            padding: 10px;\n            background-color: #ffe6e6;\n            border: 1px solid #e6c3c3;\n            border-radius: 4px;\n            text-align: center;\n            font-size: 18px;\n            color: red;\n        }\n\n    </style>\n</head>\n<body>\n    <div id=\"converterContainer\" class=\"container\">\n        <h1 id=\"converterTitle\" class=\"title\">Currency Converter</h1>\n        <form id=\"conversionForm\" method=\"post\">\n            {% csrf_token %}\n\n            <label id=\"amountLabel\" for=\"id_amount\">Amount:</label>\n            {{ form.amount }}\n\n            <label id=\"fromCurrencyLabel\" for=\"id_from_currency\">From Currency:</label>\n            {{ form.from_currency }}\n\n            <label id=\"toCurrencyLabel\" for=\"id_to_currency\">To Currency:</label>\n            {{ form.to_currency }}\n\n            <button id=\"convertButton\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n        <div id=\"resultSection\" class=\"result\">\n            {{ amount }} {{ from_currency }} = {{ converted_amount }} {{ to_currency }}\n        </div>\n        {% endif %}\n\n        {% if error_message %}\n        <div id=\"errorSection\" class=\"error\">\n            {{ error_message }}\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": ".gitignore", "path": "currency_converter/.gitignore", "code": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.Python\nbuild/\ndist/\n*.egg-info/\neggs/\n\n# PyInstaller\n*.manifest\n*.spec\n\n# Installer logs\n*.install.log\n*.pth\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\n*.pot\nmedia/\nstatic/\nmigrations/\n\n# Environments\n.env\nvenv/\nENV/\nenv.bak/\ninstance/\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs\n/site/\n\n# mypy\n.mypy_cache/\n.dmypy.json\ndmypy.sock\n\n# celery beat schedule file\ncelerybeat-schedule\n\n# OS generated files\n.DS_Store\nthumbs.db\n\n# JetBrains products\n.idea/\n*.iws\n*.ipr\n*.iml\n\n# VS Code\n.vscode/\n\n# Other\n__MACOSX/\n*.swp\n\n# SQLite Database\ndb.sqlite3\n\n# Cache files\n*.cache\n\n# Compiled resources\n*.pyc\n"}, {"file": "style.css", "path": "currency_converter/static/converter/style.css", "code": "/*  You can add CSS styles here to further customize the appearance */"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": " \"\"\"\nPackage for password_generator project.\n\"\"\""}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('generator.urls')),  # Include the generator app's URLs\n]"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": " "}, {"file": "admin.py", "path": "password_generator/generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "password_generator/generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    name = 'generator'"}, {"file": "models.py", "path": "password_generator/generator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "password_generator/generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),  # Home page\n    path('generate/', views.generate_password, name='generate_password'),\n]"}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\nfrom django.http import JsonResponse\n\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\n\ndef generate_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'true'\n    include_lowercase = request.GET.get('lowercase') == 'true'\n    include_numbers = request.GET.get('numbers') == 'true'\n    include_symbols = request.GET.get('symbols') == 'true'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters + string.digits  # Default if no options are selected\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return JsonResponse({'password': password})\n"}, {"file": "home.html", "path": "password_generator/generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f4f4f4;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n            width: 400px;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        .checkbox-group {\n            display: flex;\n            align-items: center;\n        }\n\n        .checkbox-group input[type=\"checkbox\"] {\n            margin-right: 5px;\n        }\n\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            width: 100%;\n        }\n\n        button:hover {\n            background-color: #3e8e41;\n        }\n\n        #password-display {\n            margin-top: 20px;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            background-color: #f9f9f9;\n            word-break: break-all;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"title\" class=\"title\">Password Generator</h1>\n        <div id=\"length-group\" class=\"form-group\">\n            <label for=\"length\" id=\"length-label\" class=\"length-label\">Password Length:</label>\n            <input type=\"number\" id=\"length\" class=\"length-input\" name=\"length\" value=\"12\" min=\"6\" max=\"30\">\n        </div>\n        <div id=\"uppercase-group\" class=\"form-group checkbox-group\">\n            <input type=\"checkbox\" id=\"uppercase\" class=\"uppercase-checkbox\" name=\"uppercase\">\n            <label for=\"uppercase\" id=\"uppercase-label\" class=\"uppercase-label\">Include Uppercase</label>\n        </div>\n        <div id=\"lowercase-group\" class=\"form-group checkbox-group\">\n            <input type=\"checkbox\" id=\"lowercase\" class=\"lowercase-checkbox\" name=\"lowercase\" checked>\n            <label for=\"lowercase\" id=\"lowercase-label\" class=\"lowercase-label\">Include Lowercase</label>\n        </div>\n        <div id=\"numbers-group\" class=\"form-group checkbox-group\">\n            <input type=\"checkbox\" id=\"numbers\" class=\"numbers-checkbox\" name=\"numbers\">\n            <label for=\"numbers\" id=\"numbers-label\" class=\"numbers-label\">Include Numbers</label>\n        </div>\n        <div id=\"symbols-group\" class=\"form-group checkbox-group\">\n            <input type=\"checkbox\" id=\"symbols\" class=\"symbols-checkbox\" name=\"symbols\">\n            <label for=\"symbols\" id=\"symbols-label\" class=\"symbols-label\">Include Symbols</label>\n        </div>\n        <button id=\"generate-button\" class=\"generate-button\">Generate Password</button>\n        <div id=\"password-display\" class=\"password-display\"></div>\n    </div>\n\n    <script>\n        document.getElementById('generate-button').addEventListener('click', function() {\n            const length = document.getElementById('length').value;\n            const uppercase = document.getElementById('uppercase').checked;\n            const lowercase = document.getElementById('lowercase').checked;\n            const numbers = document.getElementById('numbers').checked;\n            const symbols = document.getElementById('symbols').checked;\n\n            fetch(`/generate/?length=${length}&uppercase=${uppercase}&lowercase=${lowercase}&numbers=${numbers}&symbols=${symbols}`)\n                .then(response => response.json())\n                .then(data => {\n                    document.getElementById('password-display').textContent = data.password;\n                });\n        });\n    </script>\n</body>\n</html>"}], "5": [{"file": "manage.py", "path": "markdown_converter/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "markdown_converter/markdown_converter/__init__.py", "code": ""}, {"file": "asgi.py", "path": "markdown_converter/markdown_converter/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "markdown_converter/markdown_converter/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-SOME_RANDOM_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static',]\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "markdown_converter/markdown_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "wsgi.py", "path": "markdown_converter/markdown_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "markdown_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "markdown_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "markdown_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'"}, {"file": "forms.py", "path": "markdown_converter/converter/forms.py", "code": "from django import forms\n\nclass ConversionForm(forms.Form):\n    markdown_text = forms.CharField(widget=forms.Textarea, label='Markdown Text')\n    conversion_type = forms.ChoiceField(choices=[('html', 'HTML'), ('text', 'Plain Text')], label='Convert to', initial='html')\n"}, {"file": "models.py", "path": "markdown_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "markdown_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.converter_view, name='converter'),\n]"}, {"file": "views.py", "path": "markdown_converter/converter/views.py", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import ConversionForm\n\ndef converter_view(request):\n    if request.method == 'POST':\n        form = ConversionForm(request.POST)\n        if form.is_valid():\n            markdown_text = form.cleaned_data['markdown_text']\n            conversion_type = form.cleaned_data['conversion_type']\n            \n            html_output = markdown.markdown(markdown_text)\n            \n            if conversion_type == 'html':\n                return render(request, 'converter/result.html', {'html_output': html_output})\n            else:\n                return HttpResponse(html_output, content_type='text/plain')\n\n    else:\n        form = ConversionForm()\n    return render(request, 'converter/converter.html', {'form': form})"}, {"file": "converter.html", "path": "markdown_converter/converter/templates/converter/converter.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div id=\"converter-container\" class=\"container\">\n        <h1 id=\"converter-title\" class=\"title\">Markdown Converter</h1>\n        <form id=\"converter-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"markdown-input-group\" class=\"form-group\">\n                <label for=\"{{ form.markdown_text.id_for_label }}\" id=\"markdown-label\" class=\"form-label\">Markdown:</label>\n                {{ form.markdown_text }}\n            </div>\n            <div id=\"conversion-type-group\" class=\"form-group\">\n                <label for=\"{{ form.conversion_type.id_for_label }}\" id=\"conversion-label\" class=\"form-label\">Convert to:</label>\n                {{ form.conversion_type }}\n            </div>\n            <button id=\"convert-button\" class=\"btn btn-primary\" type=\"submit\">Convert</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "result.html", "path": "markdown_converter/converter/templates/converter/result.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Conversion Result</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div id=\"result-container\" class=\"container\">\n        <h1 id=\"result-title\" class=\"title\">Conversion Result</h1>\n        <div id=\"result-output\" class=\"output\">\n            {{ html_output|safe }}\n            <a href=\"{% url 'converter' %}\" id=\"back-button\" class=\"btn btn-secondary\">Back to Converter</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "markdown_converter/static/css/style.css", "code": "/* Basic styling for the converter */\nbody {\n    font-family: sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 0;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    text-align: center;\n    color: #333;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\ntextarea {\n    width: 100%;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    resize: vertical;\n}\n\n.btn {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 16px;\n    transition: background-color 0.3s;\n    text-decoration: none;\n    display: inline-block;\n}\n\n.btn-primary {\n    background-color: #007bff;\n    color: #fff;\n}\n\n.btn-primary:hover {\n    background-color: #0056b3;\n}\n\n.btn-secondary {\n    background-color: #6c757d;\n    color: #fff;\n}\n\n.btn-secondary:hover {\n    background-color: #545b62;\n}\n\n.output {\n    margin-top: 20px;\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background-color: #f9f9f9;\n    overflow-x: auto; /* For long content */\n}\n\n/* Add more specific styling as needed */"}], "7": [{"file": "requirements.txt", "path": "budget_control/", "code": "Django>=4.0\npython-decouple\npsycopg2-binary  # Or your preferred database driver\n"}, {"file": "manage.py", "path": "budget_control/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "budget_control/", "code": "default_auto_field = 'django.db.models.BigAutoField'"}, {"file": "settings.py", "path": "budget_control/", "code": "import os\nfrom decouple import config\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY', default='your_secret_key_here')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', default=True, cast=bool)\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DB_NAME', default='budget_db'),\n        'USER': config('DB_USER', default='budget_user'),\n        'PASSWORD': config('DB_PASSWORD', default='budget_password'),\n        'HOST': config('DB_HOST', default='localhost'),\n        'PORT': config('DB_PORT', default=5432),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "budget_control/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget.urls')),\n]"}, {"file": "wsgi.py", "path": "budget_control/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "budget/", "code": "default_app_config = 'budget.apps.BudgetConfig'"}, {"file": "admin.py", "path": "budget/", "code": "from django.contrib import admin\nfrom .models import Transaction\n\nadmin.site.register(Transaction)"}, {"file": "apps.py", "path": "budget/", "code": "from django.apps import AppConfig\n\n\nclass BudgetConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget'"}, {"file": "forms.py", "path": "budget/", "code": "from django import forms\nfrom .models import Transaction\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['date', 'description', 'amount', 'transaction_type']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}),\n        }"}, {"file": "models.py", "path": "budget/", "code": "from django.db import models\n\nclass Transaction(models.Model):\n    TRANSACTION_TYPES = (\n        ('income', 'Income'),\n        ('expense', 'Expense'),\n    )\n    date = models.DateField()\n    description = models.CharField(max_length=200)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    transaction_type = models.CharField(max_length=10, choices=TRANSACTION_TYPES)\n\n    def __str__(self):\n        return self.description"}, {"file": "urls.py", "path": "budget/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.transaction_list, name='transaction_list'),\n    path('transaction/new/', views.transaction_new, name='transaction_new'),\n    path('transaction/<int:pk>/edit/', views.transaction_edit, name='transaction_edit'),\n    path('transaction/<int:pk>/delete/', views.transaction_delete, name='transaction_delete'),\n    path('balance_chart/', views.balance_chart, name='balance_chart'),\n]"}, {"file": "views.py", "path": "budget/", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Transaction\nfrom .forms import TransactionForm\nfrom django.db.models import Sum\nimport json\n\ndef transaction_list(request):\n    transactions = Transaction.objects.all().order_by('-date')\n    total_balance = Transaction.objects.aggregate(Sum('amount'))['amount__sum'] or 0\n    return render(request, 'budget/transaction_list.html', {'transactions': transactions, 'total_balance': total_balance})\n\n\ndef transaction_new(request):\n    if request.method == \"POST\":\n        form = TransactionForm(request.POST)\n        if form.is_valid():\n            transaction = form.save()\n            return redirect('transaction_list')\n    else:\n        form = TransactionForm()\n    return render(request, 'budget/transaction_edit.html', {'form': form})\n\n\ndef transaction_edit(request, pk):\n    transaction = get_object_or_404(Transaction, pk=pk)\n    if request.method == \"POST\":\n        form = TransactionForm(request.POST, instance=transaction)\n        if form.is_valid():\n            transaction = form.save()\n            return redirect('transaction_list')\n    else:\n        form = TransactionForm(instance=transaction)\n    return render(request, 'budget/transaction_edit.html', {'form': form, 'transaction': transaction})\n\n\ndef transaction_delete(request, pk):\n    transaction = get_object_or_404(Transaction, pk=pk)\n    transaction.delete()\n    return redirect('transaction_list')\n\ndef balance_chart(request):\n    # Get all transactions, ordered by date\n    transactions = Transaction.objects.all().order_by('date')\n\n    # Calculate the cumulative balance for each transaction\n    balance = 0\n    balance_data = []\n    labels = []\n    for transaction in transactions:\n        if transaction.transaction_type == 'income':\n            balance += float(transaction.amount)\n        else:\n            balance -= float(transaction.amount)\n        balance_data.append(balance)\n        labels.append(transaction.date.strftime('%Y-%m-%d')) #Format date as string\n\n    # Convert the data to JSON format for use in the chart\n    chart_data = {\n        'labels': labels,\n        'datasets': [{\n            'label': 'Balance',\n            'data': balance_data,\n            'backgroundColor': 'rgba(54, 162, 235, 0.2)',\n            'borderColor': 'rgba(54, 162, 235, 1)',\n            'borderWidth': 1\n        }]\n    }\n    return render(request, 'budget/balance_chart.html', {'chart_data_json': json.dumps(chart_data)})"}, {"file": "transaction_list.html", "path": "templates/budget/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <link rel=\"stylesheet\" href=\"{% static 'budget/style.css' %}\">\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"main-title\" class=\"main-title\">Budget Control</h1>\n\n        <div id=\"balance-summary\" class=\"balance-summary\">\n            <h2 id=\"balance-title\" class=\"balance-title\">Total Balance:</h2>\n            <p id=\"balance-amount\" class=\"balance-amount\">{{ total_balance }}</p>\n            <a id=\"chart-link\" class=\"chart-link\" href=\"{% url 'balance_chart' %}\">View Balance Chart</a>\n        </div>\n\n        <a id=\"new-transaction-button\" class=\"new-transaction-button\" href=\"{% url 'transaction_new' %}\">Add New Transaction</a>\n\n        <table id=\"transaction-table\" class=\"transaction-table\">\n            <thead>\n                <tr>\n                    <th class=\"table-header\">Date</th>\n                    <th class=\"table-header\">Description</th>\n                    <th class=\"table-header\">Amount</th>\n                    <th class=\"table-header\">Type</th>\n                    <th class=\"table-header\">Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for transaction in transactions %}\n                    <tr>\n                        <td class=\"table-data\">{{ transaction.date }}</td>\n                        <td class=\"table-data\">{{ transaction.description }}</td>\n                        <td class=\"table-data\">{{ transaction.amount }}</td>\n                        <td class=\"table-data\">{{ transaction.get_transaction_type_display }}</td>\n                        <td class=\"table-data\">\n                            <a class=\"edit-link\" href=\"{% url 'transaction_edit' transaction.pk %}\">Edit</a>\n                            <a class=\"delete-link\" href=\"{% url 'transaction_delete' transaction.pk %}\">Delete</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n</body>\n</html>"}, {"file": "transaction_edit.html", "path": "templates/budget/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% if transaction %}Edit Transaction{% else %}New Transaction{% endif %}</title>\n    <link rel=\"stylesheet\" href=\"{% static 'budget/style.css' %}\">\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"form-title\" class=\"form-title\">{% if transaction %}Edit Transaction{% else %}New Transaction{% endif %}</h1>\n\n        <form id=\"transaction-form\" class=\"transaction-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label id=\"date-label\" class=\"form-label\" for=\"id_date\">Date:</label>\n                {{ form.date }}\n            </div>\n            <div class=\"form-group\">\n                <label id=\"description-label\" class=\"form-label\" for=\"id_description\">Description:</label>\n                {{ form.description }}\n            </div>\n            <div class=\"form-group\">\n                <label id=\"amount-label\" class=\"form-label\" for=\"id_amount\">Amount:</label>\n                {{ form.amount }}\n            </div>\n            <div class=\"form-group\">\n                <label id=\"type-label\" class=\"form-label\" for=\"id_transaction_type\">Type:</label>\n                {{ form.transaction_type }}\n            </div>\n\n            <button id=\"save-button\" class=\"save-button\" type=\"submit\">Save</button>\n            <a id=\"cancel-button\" class=\"cancel-button\" href=\"{% url 'transaction_list' %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "balance_chart.html", "path": "templates/budget/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Balance Chart</title>\n    <link rel=\"stylesheet\" href=\"{% static 'budget/style.css' %}\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"chart-title\" class=\"chart-title\">Balance Chart</h1>\n        <canvas id=\"balanceChart\" width=\"400\" height=\"200\"></canvas>\n        <a id=\"back-button\" class=\"back-button\" href=\"{% url 'transaction_list' %}\">Back to Transaction List</a>\n\n    </div>\n\n    <script>\n        const chartData = JSON.parse('{{ chart_data_json|escapejs }}');\n        const ctx = document.getElementById('balanceChart').getContext('2d');\n        const myChart = new Chart(ctx, {\n            type: 'line',\n            data: chartData,\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "style.css", "path": "static/budget/", "code": "/* General Styles */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n/* Titles */\n.main-title, .form-title, .balance-title, .chart-title{\n    text-align: center;\n    color: #3498db;\n}\n\n/* Balance Summary */\n.balance-summary {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.balance-amount {\n    font-size: 1.5em;\n    font-weight: bold;\n    color: #27ae60;\n}\n\n/* Buttons and Links */\n.new-transaction-button, .save-button, .cancel-button, .back-button, .chart-link{\n    display: block;\n    width: fit-content;\n    margin: 10px auto;\n    padding: 10px 15px;\n    background-color: #3498db;\n    color: #fff;\n    text-decoration: none;\n    border-radius: 5px;\n    text-align: center;\n}\n\n.new-transaction-button:hover, .save-button:hover, .cancel-button:hover, .back-button:hover, .chart-link:hover {\n    background-color: #2980b9;\n}\n\n.edit-link, .delete-link {\n    display: inline-block;\n    padding: 5px 10px;\n    margin: 0 5px;\n    text-decoration: none;\n    border-radius: 3px;\n}\n\n.edit-link {\n    background-color: #f39c12;\n    color: #fff;\n}\n\n.delete-link {\n    background-color: #e74c3c;\n    color: #fff;\n}\n\n.edit-link:hover, .delete-link:hover {\n    opacity: 0.8;\n}\n\n/* Transaction Table */\n.transaction-table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n}\n\n.table-header {\n    background-color: #34495e;\n    color: #fff;\n    padding: 10px;\n    text-align: left;\n}\n\n.table-data {\n    padding: 8px;\n    border-bottom: 1px solid #ddd;\n}\n\n.table-data:last-child {\n    text-align: center;\n}\n\n/* Forms */\n.transaction-form {\n    display: flex;\n    flex-direction: column;\n    width: 50%;\n    margin: 0 auto;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\ninput[type=\"text\"], input[type=\"date\"], input[type=\"number\"], select {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n"}], "8": [{"file": "manage.py", "path": "calendar_app/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "calendar_app/calendar_app/__init__.py", "code": " \"\"\"Package init\"\"\""}, {"file": "settings.py", "path": "calendar_app/calendar_app/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'monthly_calendar',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_app.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "calendar_app/calendar_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('monthly_calendar.urls')),\n]"}, {"file": "wsgi.py", "path": "calendar_app/calendar_app/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_app.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calendar_app/monthly_calendar/__init__.py", "code": " \"\"\"Package init\"\"\""}, {"file": "admin.py", "path": "calendar_app/monthly_calendar/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "apps.py", "path": "calendar_app/monthly_calendar/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MonthlyCalendarConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'monthly_calendar'"}, {"file": "forms.py", "path": "calendar_app/monthly_calendar/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'})\n        }"}, {"file": "models.py", "path": "calendar_app/monthly_calendar/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "calendar_app/monthly_calendar/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar, name='calendar'),\n    path('event/new/', views.event_new, name='event_new'),\n    path('event/<int:pk>/edit/', views.event_edit, name='event_edit'),\n    path('event/<int:pk>/delete/', views.event_delete, name='event_delete'),\n]"}, {"file": "views.py", "path": "calendar_app/monthly_calendar/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\nimport calendar\nfrom datetime import datetime, date\n\ndef calendar(request, year=None, month=None):\n    now = timezone.now()\n    if year is None:  year = now.year\n    if month is None: month = now.month\n\n    cal = calendar.monthcalendar(year, month)\n\n    month_name = calendar.month_name[month]\n\n    events = Event.objects.filter(start_time__year=year, start_time__month=month)\n\n    return render(request, 'monthly_calendar/calendar.html', {\n        'calendar': cal,\n        'month_name': month_name,\n        'year': year,\n        'month': month,\n        'events': events,\n        'now': now\n    })\n\ndef event_new(request):\n    if request.method == \"POST\":\n        form = EventForm(request.POST)\n        if form.is_valid():\n            event = form.save(commit=False)\n            event.save()\n            return redirect('calendar')\n    else:\n        form = EventForm()\n    return render(request, 'monthly_calendar/event_edit.html', {'form': form})\n\ndef event_edit(request, pk):\n    event = get_object_or_404(Event, pk=pk)\n    if request.method == \"POST\":\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            event = form.save()\n            return redirect('calendar')\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'monthly_calendar/event_edit.html', {'form': form, 'event': event})\n\ndef event_delete(request, pk):\n    event = get_object_or_404(Event, pk=pk)\n    event.delete()\n    return redirect('calendar')\n"}, {"file": "calendar.html", "path": "calendar_app/monthly_calendar/templates/monthly_calendar/calendar.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <link rel=\"stylesheet\" href=\"{% static 'monthly_calendar/style.css' %}\">\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"container\">\n        <h1 id=\"calendar-title\" class=\"calendar-title\">{{ month_name }} {{ year }}</h1>\n        <a id=\"new-event-link\" class=\"new-event-link\" href=\"{% url 'event_new' %}\">New Event</a>\n\n        <table id=\"calendar-table\" class=\"calendar-table\">\n            <thead>\n                <tr id=\"calendar-header-row\" class=\"calendar-header-row\">\n                    <th>Sun</th>\n                    <th>Mon</th>\n                    <th>Tue</th>\n                    <th>Wed</th>\n                    <th>Thu</th>\n                    <th>Fri</th>\n                    <th>Sat</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for week in calendar %}\n                <tr id=\"calendar-week-{{ forloop.counter }}\" class=\"calendar-week\">\n                    {% for day in week %}\n                    <td id=\"calendar-day-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"calendar-day {% if day == 0 %}empty-day{% endif %}\">\n                        {% if day != 0 %}\n                            <span class=\"day-number\">{{ day }}</span>\n                            <ul class=\"event-list\">\n                            {% for event in events %}\n                                {% if event.start_time.day == day and event.start_time.month == month and event.start_time.year == year %}\n                                    <li class=\"event-item\">\n                                        <a href=\"{% url 'event_edit' pk=event.pk %}\">{{ event.title }}</a>\n                                        <a href=\"{% url 'event_delete' pk=event.pk %}\" class=\"delete-event-link\">Delete</a>\n                                    </li>\n                                {% endif %}\n                            {% endfor %}\n                            </ul>\n                        {% endif %}\n                    </td>\n                    {% endfor %}\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n</body>\n</html>"}, {"file": "event_edit.html", "path": "calendar_app/monthly_calendar/templates/monthly_calendar/event_edit.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% if event %}Edit Event{% else %}New Event{% endif %}</title>\n</head>\n<body>\n    <h1>{% if event %}Edit Event{% else %}New Event{% endif %}</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n    </form>\n    <a href=\"{% url 'calendar' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "style.css", "path": "calendar_app/static/monthly_calendar/style.css", "code": "body {\n    font-family: sans-serif;\n}\n\n.container {\n    width: 80%;\n    margin: 0 auto;\n}\n\n.calendar-title {\n    text-align: center;\n}\n\n.calendar-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.calendar-table th, .calendar-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n}\n\n.calendar-header-row th {\n    background-color: #f2f2f2;\n}\n\n.calendar-day {\n    height: 100px;\n    vertical-align: top;\n    position: relative;\n}\n\n.empty-day {\n    background-color: #eee;\n}\n\n.day-number {\n    font-size: 1.2em;\n    font-weight: bold;\n    display: block;\n    margin-bottom: 5px;\n}\n\n.event-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.event-item {\n    margin-bottom: 5px;\n}\n\n.new-event-link {\n    display: block;\n    margin-bottom: 10px;\n    text-align: center;\n}\n\n.delete-event-link {\n    margin-left: 5px;\n    color: red;\n    text-decoration: none; /* added this line */\n}\n\n.delete-event-link:hover{\n    text-decoration: underline; /* added this line */\n}"}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong, random key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')), # Include the tracker app's urls\n]"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "calorie_tracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Food, Meal\n\nadmin.site.register(Food)\nadmin.site.register(Meal)"}, {"file": "apps.py", "path": "calorie_tracker/tracker/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TrackerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tracker'"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Food(models.Model):\n    name = models.CharField(max_length=100)\n    calories = models.IntegerField()\n\n    def __str__(self):\n        return self.name\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField()\n    time = models.TimeField()\n    foods = models.ManyToManyField(Food)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.date} {self.time}'\n\n"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('add_meal/', views.add_meal, name='add_meal'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('register/', views.register, name='register'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n]"}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Food, Meal\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.db.models import Sum\nimport datetime\n\n\ndef register(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('login')\n    else:\n        form = UserCreationForm()\n    return render(request, 'tracker/register.html', {'form': form})\n\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'tracker/login.html', {'form': form})\n\n\ndef user_logout(request):\n    logout(request)\n    return redirect('home')\n\n\n@login_required\ndef home(request):\n    meals = Meal.objects.filter(user=request.user).order_by('-date', '-time')\n    total_calories = 0\n    for meal in meals:\n        for food in meal.foods.all():\n            total_calories += food.calories\n\n    return render(request, 'tracker/home.html', {'meals': meals, 'total_calories': total_calories})\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        date = request.POST['date']\n        time = request.POST['time']\n        food_ids = request.POST.getlist('foods')\n        foods = Food.objects.filter(id__in=food_ids)\n\n        meal = Meal(user=request.user, date=date, time=time)\n        meal.save()\n        meal.foods.set(foods)\n\n        return redirect('home')\n    else:\n        foods = Food.objects.all()\n        return render(request, 'tracker/add_meal.html', {'foods': foods})\n\n@login_required\ndef analysis(request):\n    today = datetime.date.today()\n    start_date = today - datetime.timedelta(days=6)\n    meals = Meal.objects.filter(user=request.user, date__range=[start_date, today])\n\n    daily_calories = {}\n    for i in range(7):\n        date = start_date + datetime.timedelta(days=i)\n        daily_calories[date] = 0\n\n    for meal in meals:\n        total_calories_for_meal = sum(food.calories for food in meal.foods.all())\n        daily_calories[meal.date] += total_calories_for_meal\n\n    dates = list(daily_calories.keys())\n    calories = list(daily_calories.values())\n\n    return render(request, 'tracker/analysis.html', {'dates': dates, 'calories': calories})\n\n"}, {"file": "base.html", "path": "calorie_tracker/templates/tracker/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Calorie Tracker{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.css\" integrity=\"sha512-/lKmKibCUhoMxHh97ZaKMzlYsgASmo2IojVkCz6rZ/b32nqykcwlBIQ/jQp+J+xmFguU6u/E+YxXG8wTKKfU4Q==\" crossorigin=\"anonymous\" />\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .navbar {\n            background-color: #f8f9fa;\n        }\n        .container {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a id=\"navbar-brand\" class=\"navbar-brand\" href=\"{% url 'home' %}\">Calorie Tracker</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                {% if user.is_authenticated %}\n                    <li class=\"nav-item\">\n                        <a id=\"add-meal-link\" class=\"nav-link\" href=\"{% url 'add_meal' %}\">Add Meal</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"analysis-link\" class=\"nav-link\" href=\"{% url 'analysis' %}\">Analysis</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"logout-link\" class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n                    </li>\n                {% else %}\n                    <li class=\"nav-item\">\n                        <a id=\"register-link\" class=\"nav-link\" href=\"{% url 'register' %}\">Register</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"login-link\" class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n                    </li>\n                {% endif %}\n            </ul>\n        </div>\n    </nav>\n\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js\" integrity=\"sha512-d9xgZrVZpmmQlfonhQUvTR7iPmJdXe4AG9gVmH0zW1o5jxMDizkUDAcnXJ1w5PTDl3vWKvKjy1i8tIJJ39pKGg==\" crossorigin=\"anonymous\"></script>\n\n    {% block scripts %}{% endblock %}\n</body>\n</html>"}, {"file": "home.html", "path": "calorie_tracker/templates/tracker/home.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block title %}Home - Calorie Tracker{% endblock %}\n\n{% block content %}\n    <h1 id=\"home-title\" class=\"mb-4\">Welcome, {% if user.is_authenticated %}{{ user.username }}{% else %}Guest{% endif %}!</h1>\n\n    {% if user.is_authenticated %}\n        <p id=\"total-calories\" class=\"lead\">Total Calories Consumed: {{ total_calories }}</p>\n\n        <h2 id=\"meal-history-heading\" class=\"mt-4\">Meal History</h2>\n        <ul id=\"meal-list\" class=\"list-group\">\n            {% for meal in meals %}\n                <li class=\"list-group-item\">\n                    <p class=\"mb-1\"><strong>Date:</strong> {{ meal.date }}</p>\n                    <p class=\"mb-1\"><strong>Time:</strong> {{ meal.time }}</p>\n                    <p class=\"mb-1\"><strong>Foods:</strong>\n                        {% for food in meal.foods.all %}\n                            {{ food.name }} ({{ food.calories }} cal){% if not forloop.last %}, {% endif %}\n                        {% endfor %}\n                    </p>\n                </li>\n            {% empty %}\n                <li id=\"no-meals\" class=\"list-group-item\">No meals added yet.</li>\n            {% endfor %}\n        </ul>\n\n    {% else %}\n        <p id=\"guest-message\">Please <a href=\"{% url 'register' %}\">register</a> or <a href=\"{% url 'login' %}\">login</a> to start tracking your calories.</p>\n    {% endif %}\n{% endblock %}"}, {"file": "add_meal.html", "path": "calorie_tracker/templates/tracker/add_meal.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block title %}Add Meal - Calorie Tracker{% endblock %}\n\n{% block content %}\n    <h1 id=\"add-meal-title\" class=\"mb-4\">Add Meal</h1>\n    <form id=\"add-meal-form\" method=\"post\">\n        {% csrf_token %}\n\n        <div class=\"form-group\">\n            <label for=\"date\" id=\"date-label\">Date:</label>\n            <input type=\"date\" class=\"form-control\" id=\"date\" name=\"date\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"time\" id=\"time-label\">Time:</label>\n            <input type=\"time\" class=\"form-control\" id=\"time\" name=\"time\" required>\n        </div>\n\n        <div class=\"form-group\">\n            <label id=\"foods-label\">Foods:</label>\n            {% for food in foods %}\n                <div class=\"form-check\">\n                    <input type=\"checkbox\" class=\"form-check-input\" id=\"food-{{ food.id }}\" name=\"foods\" value=\"{{ food.id }}\">\n                    <label class=\"form-check-label\" for=\"food-{{ food.id }}\">{{ food.name }} ({{ food.calories }} cal)</label>\n                </div>\n            {% endfor %}\n        </div>\n\n        <button type=\"submit\" id=\"submit-meal\" class=\"btn btn-primary\">Add Meal</button>\n    </form>\n{% endblock %}"}, {"file": "analysis.html", "path": "calorie_tracker/templates/tracker/analysis.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block title %}Analysis - Calorie Tracker{% endblock %}\n\n{% block content %}\n    <h1 id=\"analysis-title\" class=\"mb-4\">Calorie Analysis (Last 7 Days)</h1>\n\n    <div class=\"chart-container\" style=\"position: relative; height:300px; width:100%\">\n        <canvas id=\"calorieChart\"></canvas>\n    </div>\n\n{% endblock %}\n\n{% block scripts %}\n    <script>\n        var dates = {{ dates|safe }};\n        var calories = {{ calories|safe }};\n\n        var ctx = document.getElementById('calorieChart').getContext('2d');\n        var myChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: dates,\n                datasets: [{\n                    label: 'Daily Calories',\n                    data: calories,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                }\n            }\n        });\n    </script>\n{% endblock %}"}, {"file": "register.html", "path": "calorie_tracker/templates/tracker/register.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block title %}Register - Calorie Tracker{% endblock %}\n\n{% block content %}\n    <h1 id=\"register-title\" class=\"mb-4\">Register</h1>\n    <form id=\"register-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"register-button\" class=\"btn btn-primary\">Register</button>\n    </form>\n{% endblock %}"}, {"file": "login.html", "path": "calorie_tracker/templates/tracker/login.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block title %}Login - Calorie Tracker{% endblock %}\n\n{% block content %}\n    <h1 id=\"login-title\" class=\"mb-4\">Login</h1>\n    <form id=\"login-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"login-button\" class=\"btn btn-primary\">Login</button>\n    </form>\n{% endblock %}"}], "12": [{"file": "requirements.txt", "path": "requirements.txt", "code": "Django>=4.0\npython-decouple>=3.6\npsycopg2-binary>=2.9  # or your preferred database driver\n", "description": "Lists the project dependencies."}, {"file": "project/settings.py", "path": "project/project/settings.py", "code": "from pathlib import Path\nimport os\nfrom decouple import config\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\nSECRET_KEY = config('SECRET_KEY', default='your_default_secret_key')\n\nDEBUG = config('DEBUG', default=True, cast=bool)\n\nALLOWED_HOSTS = ['*'] # Adjust in production\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'claims',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DB_NAME', default='your_db_name'),\n        'USER': config('DB_USER', default='your_db_user'),\n        'PASSWORD': config('DB_PASSWORD', default='your_db_password'),\n        'HOST': config('DB_HOST', default='localhost'),\n        'PORT': config('DB_PORT', default='5432', cast=int),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # optional\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n", "description": "Django settings file."}, {"file": "project/urls.py", "path": "project/project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('claims/', include('claims.urls')),\n]", "description": "Root URL configuration."}, {"file": "claims/models.py", "path": "project/claims/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nEXPENSE_TYPES = [\n    ('Travel', 'Travel Expenses'),\n    ('Labor', 'Labor Expenses'),\n    ('Management', 'Management Expenses'),\n    ('Equipment', 'Equipment Expenses'),\n]\n\nCLAIM_STATUS = [\n    ('Pending', 'Pending'),\n    ('Approved', 'Approved'),\n    ('Rejected', 'Rejected'),\n]\n\nclass Claim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    expense_type = models.CharField(max_length=20, choices=EXPENSE_TYPES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submission_date = models.DateField(auto_now_add=True)\n    status = models.CharField(max_length=20, choices=CLAIM_STATUS, default='Pending')\n    approval_date = models.DateField(null=True, blank=True)\n    receipt = models.FileField(upload_to='receipts/', null=True, blank=True)\n\n    def __str__(self):\n        return f'Claim by {self.employee.username} - {self.expense_type} - {self.amount}'\n\n\nclass Budget(models.Model):\n    expense_type = models.CharField(max_length=20, choices=EXPENSE_TYPES, unique=True)\n    budget_amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'Budget for {self.expense_type}: {self.budget_amount}'\n", "description": "Database models."}, {"file": "claims/admin.py", "path": "project/claims/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim, Budget\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('employee', 'expense_type', 'amount', 'status', 'submission_date')\n    list_filter = ('status', 'expense_type')\n    search_fields = ('employee__username', 'description')\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('expense_type', 'budget_amount')\n", "description": "Admin interface configuration."}, {"file": "claims/forms.py", "path": "project/claims/forms.py", "code": "from django import forms\nfrom .models import Claim\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['expense_type', 'amount', 'description', 'receipt']\n", "description": "Forms for submitting claims."}, {"file": "claims/views.py", "path": "project/claims/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom .forms import ClaimForm\nfrom .models import Claim, Budget, CLAIM_STATUS\nfrom django.contrib import messages\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, request.FILES)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            messages.success(request, 'Claim submitted successfully!')\n            return redirect('claims:claim_list')  # Redirect to claim list view\n        else:\n            messages.error(request, 'There was an error in your form.')\n    else:\n        form = ClaimForm()\n    return render(request, 'claims/submit_claim.html', {'form': form})\n\n@login_required\ndef claim_list(request):\n    claims = Claim.objects.filter(employee=request.user).order_by('-submission_date')\n    return render(request, 'claims/claim_list.html', {'claims': claims})\n\n\n@login_required\ndef update_claim_status(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n\n    if request.method == 'POST':\n        new_status = request.POST.get('status')\n        if new_status in [status[0] for status in CLAIM_STATUS]:\n            claim.status = new_status\n            claim.save()\n            messages.success(request, f'Claim status updated to {new_status}!')\n        else:\n            messages.error(request, 'Invalid claim status.')\n        return redirect('admin:claims_claim_changelist') # Redirect to the admin claim list.\n    else:\n        # Optionally, render a confirmation page here before updating the status.\n        return render(request, 'claims/confirm_status_update.html', {'claim': claim})\n\n\n@login_required\ndef budget_analysis(request):\n    budgets = Budget.objects.all()\n    claim_data = []\n\n    for budget in budgets:\n        claims = Claim.objects.filter(expense_type=budget.expense_type, status='Approved')\n        total_spent = sum(claim.amount for claim in claims)\n        remaining_budget = budget.budget_amount - total_spent\n        claim_data.append({\n            'expense_type': budget.expense_type,\n            'budget_amount': budget.budget_amount,\n            'total_spent': total_spent,\n            'remaining_budget': remaining_budget,\n        })\n\n    return render(request, 'claims/budget_analysis.html', {'claim_data': claim_data})\n", "description": "View functions for handling claim submissions, listing claims, updating claim status, and budget analysis."}, {"file": "claims/urls.py", "path": "project/claims/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'claims'\n\nurlpatterns = [\n    path('submit/', views.submit_claim, name='submit_claim'),\n    path('list/', views.claim_list, name='claim_list'),\n    path('update_status/<int:claim_id>/', views.update_claim_status, name='update_claim_status'),\n    path('budget_analysis/', views.budget_analysis, name='budget_analysis'),\n]", "description": "URL configuration for the 'claims' app."}, {"file": "templates/claims/submit_claim.html", "path": "project/templates/claims/submit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"submit-claim-container\" class=\"container mt-5\">\n  <h2 id=\"submit-claim-title\" class=\"mb-4\">Submit Claim</h2>\n  <form id=\"claim-form\" method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    {% for field in form %}\n      <div class=\"mb-3\">\n        <label for=\"{{ field.id_for_label }}\" class=\"form-label\">{{ field.label }}</label>\n        {{ field }}\n        {% if field.errors %}\n          <div class=\"alert alert-danger\">\n            {{ field.errors }}\n          </div>\n        {% endif %}\n        {% if field.help_text %}\n          <small id=\"{{ field.id_for_label }}-help\" class=\"form-text text-muted\">{{ field.help_text }}</small>\n        {% endif %}\n      </div>\n    {% endfor %}\n    <button id=\"submit-button\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n  </form>\n</div>\n{% endblock %}\n", "description": "Template for submitting a claim."}, {"file": "templates/claims/claim_list.html", "path": "project/templates/claims/claim_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"claim-list-container\" class=\"container mt-5\">\n  <h2 id=\"claim-list-title\" class=\"mb-4\">My Claims</h2>\n  <table id=\"claim-table\" class=\"table\">\n    <thead>\n      <tr>\n        <th>Expense Type</th>\n        <th>Amount</th>\n        <th>Description</th>\n        <th>Submission Date</th>\n        <th>Status</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for claim in claims %}\n        <tr>\n          <td>{{ claim.expense_type }}</td>\n          <td>{{ claim.amount }}</td>\n          <td>{{ claim.description }}</td>\n          <td>{{ claim.submission_date }}</td>\n          <td>{{ claim.status }}</td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n</div>\n{% endblock %}\n", "description": "Template for listing claims."}, {"file": "templates/claims/budget_analysis.html", "path": "project/templates/claims/budget_analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"budget-analysis-container\" class=\"container mt-5\">\n    <h2 id=\"budget-analysis-title\" class=\"mb-4\">Budget Analysis</h2>\n    <table id=\"budget-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Expense Type</th>\n                <th>Budget Amount</th>\n                <th>Total Spent</th>\n                <th>Remaining Budget</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for data in claim_data %}\n            <tr>\n                <td>{{ data.expense_type }}</td>\n                <td>{{ data.budget_amount }}</td>\n                <td>{{ data.total_spent }}</td>\n                <td>{{ data.remaining_budget }}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}\n", "description": "Template for budget analysis."}, {"file": "templates/claims/confirm_status_update.html", "path": "project/templates/claims/confirm_status_update.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"confirm-update-container\" class=\"container mt-5\">\n    <h2 id=\"confirm-update-title\" class=\"mb-4\">Confirm Status Update</h2>\n    <p id=\"confirm-update-text\">Are you sure you want to update the status of this claim?</p>\n    <form id=\"confirm-update-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"status-select\">Select new status:</label>\n        <select id=\"status-select\" name=\"status\">\n            <option value=\"Approved\">Approved</option>\n            <option value=\"Rejected\">Rejected</option>\n            <option value=\"Pending\">Pending</option>\n        </select>\n        <button id=\"confirm-button\" type=\"submit\" class=\"btn btn-primary\">Confirm</button>\n        <a id=\"cancel-link\" href=\"{% url 'admin:claims_claim_changelist' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n</div>\n{% endblock %}\n", "description": "Template for confirming claim status update."}, {"file": "templates/base.html", "path": "project/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Accounting System{% endblock %}</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"container-fluid\">\n            <a id=\"nav-brand\" class=\"navbar-brand\" href=\"#\">Accounting System</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav\">\n                    {% if user.is_authenticated %}\n                        <li class=\"nav-item\">\n                            <a id=\"nav-submit-claim\" class=\"nav-link\" href=\"{% url 'claims:submit_claim' %}\">Submit Claim</a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a id=\"nav-claim-list\" class=\"nav-link\" href=\"{% url 'claims:claim_list' %}\">My Claims</a>\n                        </li>\n                         <li class=\"nav-item\">\n                            <a id=\"nav-budget-analysis\" class=\"nav-link\" href=\"{% url 'claims:budget_analysis' %}\">Budget Analysis</a>\n                        </li>\n                         <li class=\"nav-item\">\n                            <a id=\"nav-admin\" class=\"nav-link\" href=\"/admin/\">Admin</a>\n                        </li>\n                    {% else %}\n                        <li class=\"nav-item\">\n                            <a id=\"nav-login\" class=\"nav-link\" href=\"{% url 'admin:login' %}\">Login</a>\n                        </li>\n                    {% endif %}\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    <div id=\"content\" class=\"container mt-4\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>", "description": "Base template for consistent look and feel."}, {"file": "claims/apps.py", "path": "project/claims/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ClaimsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'claims'\n", "description": "Claims app config."}, {"file": "claims/migrations/0001_initial.py", "path": "project/claims/migrations/0001_initial.py", "code": "# Generated by Django 4.2.7 on 2023-11-16 17:21\n\nfrom django.conf import settings\nimport django.core.validators\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields([\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('expense_type', models.CharField(choices=[('Travel', 'Travel Expenses'), ('Labor', 'Labor Expenses'), ('Management', 'Management Expenses'), ('Equipment', 'Equipment Expenses')], max_length=20, unique=True)),\n                ('budget_amount', models.DecimalField(decimal_places=2, max_digits=10)),\n            ]),\n        ),\n        migrations.CreateModel(\n            name='Claim',\n            fields([\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('expense_type', models.CharField(choices=[('Travel', 'Travel Expenses'), ('Labor', 'Labor Expenses'), ('Management', 'Management Expenses'), ('Equipment', 'Equipment Expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),\n                ('description', models.TextField()),\n                ('submission_date', models.DateField(auto_now_add=True)),\n                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=20)),\n                ('approval_date', models.DateField(blank=True, null=True)),\n                ('receipt', models.FileField(blank=True, null=True, upload_to='receipts/')), \n                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ]),\n        ),\n    ]\n", "description": "Initial migration file (created by Django)."}, {"file": ".env", "path": ".env", "code": "SECRET_KEY=your_django_secret_key\nDEBUG=True\nDB_NAME=your_db_name\nDB_USER=your_db_user\nDB_PASSWORD=your_db_password\nDB_HOST=localhost\nDB_PORT=5432", "description": "Environment variables (for development)."}], "13": [{"file": "settings.py", "path": "crm_project/crm_project/", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crm_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'crm_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'crm_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "crm_project/crm_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('crm_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "crm_project/crm_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "models.py", "path": "crm_project/crm_app/", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=200)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')])\n    company = models.CharField(max_length=200, blank=True)\n    phone_number = models.CharField(max_length=20, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=200)\n    category = models.CharField(max_length=200)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(default=timezone.now)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\n"}, {"file": "admin.py", "path": "crm_project/crm_app/", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\n"}, {"file": "views.py", "path": "crm_project/crm_app/", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Customer, Product, PurchaseRecord\nfrom .forms import CustomerForm, ProductForm, PurchaseRecordForm\nfrom django.db.models import Sum\n\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'crm_app/customer_list.html', {'customers': customers})\n\ndef customer_create(request):\n    if request.method == 'POST':\n        form = CustomerForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm()\n    return render(request, 'crm_app/customer_form.html', {'form': form})\n\ndef customer_update(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        form = CustomerForm(request.POST, instance=customer)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm(instance=customer)\n    return render(request, 'crm_app/customer_form.html', {'form': form})\n\ndef customer_delete(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        customer.delete()\n        return redirect('customer_list')\n    return render(request, 'crm_app/customer_delete.html', {'customer': customer})\n\ndef product_list(request):\n    products = Product.objects.all()\n    return render(request, 'crm_app/product_list.html', {'products': products})\n\ndef product_create(request):\n    if request.method == 'POST':\n        form = ProductForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm()\n    return render(request, 'crm_app/product_form.html', {'form': form})\n\ndef product_update(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    if request.method == 'POST':\n        form = ProductForm(request.POST, instance=product)\n        if form.is_valid():\n            form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm(instance=product)\n    return render(request, 'crm_app/product_form.html', {'form': form})\n\ndef product_delete(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    if request.method == 'POST':\n        product.delete()\n        return redirect('product_list')\n    return render(request, 'crm_app/product_delete.html', {'product': product})\n\ndef purchase_record_list(request):\n    purchase_records = PurchaseRecord.objects.all()\n    return render(request, 'crm_app/purchase_record_list.html', {'purchase_records': purchase_records})\n\ndef purchase_record_create(request):\n    if request.method == 'POST':\n        form = PurchaseRecordForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('purchase_record_list')\n    else:\n        form = PurchaseRecordForm()\n    return render(request, 'crm_app/purchase_record_form.html', {'form': form})\n\ndef purchase_record_update(request, pk):\n    purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\n    if request.method == 'POST':\n        form = PurchaseRecordForm(request.POST, instance=purchase_record)\n        if form.is_valid():\n            form.save()\n            return redirect('purchase_record_list')\n    else:\n        form = PurchaseRecordForm(instance=purchase_record)\n    return render(request, 'crm_app/purchase_record_form.html', {'form': form})\n\ndef purchase_record_delete(request, pk):\n    purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\n    if request.method == 'POST':\n        purchase_record.delete()\n        return redirect('purchase_record_list')\n    return render(request, 'crm_app/purchase_record_delete.html', {'purchase_record': purchase_record})\n\n\ndef sales_analysis(request):\n    total_sales = PurchaseRecord.objects.aggregate(Sum('amount'))['amount__sum'] or 0\n    # You can add more complex analysis here, e.g., sales by product, customer etc.\n    return render(request, 'crm_app/sales_analysis.html', {'total_sales': total_sales})\n"}, {"file": "forms.py", "path": "crm_project/crm_app/", "code": "from django import forms\nfrom .models import Customer, Product, PurchaseRecord\n\nclass CustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = ['name', 'birthday', 'age', 'sex', 'company', 'phone_number']\n        widgets = {\n            'birthday': forms.DateInput(attrs={'type': 'date'})\n        }\n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = ['name', 'category', 'recommended_price']\n\nclass PurchaseRecordForm(forms.ModelForm):\n    class Meta:\n        model = PurchaseRecord\n        fields = ['product', 'customer', 'quantity', 'amount', 'datetime']\n        widgets = {\n            'datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'})\n        }\n"}, {"file": "urls.py", "path": "crm_project/crm_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('customers/', views.customer_list, name='customer_list'),\n    path('customers/create/', views.customer_create, name='customer_create'),\n    path('customers/update/<int:pk>/', views.customer_update, name='customer_update'),\n    path('customers/delete/<int:pk>/', views.customer_delete, name='customer_delete'),\n\n    path('products/', views.product_list, name='product_list'),\n    path('products/create/', views.product_create, name='product_create'),\n    path('products/update/<int:pk>/', views.product_update, name='product_update'),\n    path('products/delete/<int:pk>/', views.product_delete, name='product_delete'),\n\n    path('purchases/', views.purchase_record_list, name='purchase_record_list'),\n    path('purchases/create/', views.purchase_record_create, name='purchase_record_create'),\n    path('purchases/update/<int:pk>/', views.purchase_record_update, name='purchase_record_update'),\n    path('purchases/delete/<int:pk>/', views.purchase_record_delete, name='purchase_record_delete'),\n\n    path('sales_analysis/', views.sales_analysis, name='sales_analysis'),\n]\n"}, {"file": "customer_list.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Customer List</title>\n</head>\n<body>\n    <h1 id=\"customerListTitle\" class=\"page-title\">Customer List</h1>\n\n    <a id=\"createCustomerLink\" class=\"btn btn-primary\" href=\"{% url 'customer_create' %}\">Create New Customer</a>\n\n    <table id=\"customerTable\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Birthday</th>\n                <th>Age</th>\n                <th>Sex</th>\n                <th>Company</th>\n                <th>Phone Number</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for customer in customers %}\n            <tr id=\"customerRow{{ customer.id }}\">\n                <td>{{ customer.name }}</td>\n                <td>{{ customer.birthday }}</td>\n                <td>{{ customer.age }}</td>\n                <td>{{ customer.sex }}</td>\n                <td>{{ customer.company }}</td>\n                <td>{{ customer.phone_number }}</td>\n                <td>\n                    <a id=\"updateCustomerLink{{ customer.id }}\" class=\"btn btn-secondary\" href=\"{% url 'customer_update' customer.pk %}\">Update</a>\n                    <a id=\"deleteCustomerLink{{ customer.id }}\" class=\"btn btn-danger\" href=\"{% url 'customer_delete' customer.pk %}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\n    <a id=\"homeLink\" class=\"btn btn-secondary\" href=\"{% url 'sales_analysis' %}\">Back to Sales Analysis</a>\n\n</body>\n</html>"}, {"file": "customer_form.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Customer Form</title>\n</head>\n<body>\n    <h1 id=\"customerFormTitle\" class=\"page-title\">Customer Form</h1>\n\n    <form id=\"customerForm\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"saveCustomerButton\" class=\"btn btn-primary\" type=\"submit\">Save</button>\n        <a id=\"cancelCustomerLink\" class=\"btn btn-secondary\" href=\"{% url 'customer_list' %}\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "customer_delete.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Customer</title>\n</head>\n<body>\n    <h1 id=\"deleteCustomerTitle\" class=\"page-title\">Delete Customer</h1>\n\n    <p id=\"deleteConfirmationMessage\">Are you sure you want to delete customer: {{ customer.name }}?</p>\n\n    <form id=\"deleteCustomerForm\" method=\"post\">\n        {% csrf_token %}\n        <button id=\"confirmDeleteButton\" class=\"btn btn-danger\" type=\"submit\">Confirm Delete</button>\n        <a id=\"cancelDeleteLink\" class=\"btn btn-secondary\" href=\"{% url 'customer_list' %}\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "product_list.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Product List</title>\n</head>\n<body>\n    <h1 id=\"productListTitle\" class=\"page-title\">Product List</h1>\n\n    <a id=\"createProductLink\" class=\"btn btn-primary\" href=\"{% url 'product_create' %}\">Create New Product</a>\n\n    <table id=\"productTable\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Category</th>\n                <th>Recommended Price</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for product in products %}\n            <tr id=\"productRow{{ product.id }}\">\n                <td>{{ product.name }}</td>\n                <td>{{ product.category }}</td>\n                <td>{{ product.recommended_price }}</td>\n                <td>\n                    <a id=\"updateProductLink{{ product.id }}\" class=\"btn btn-secondary\" href=\"{% url 'product_update' product.pk %}\">Update</a>\n                    <a id=\"deleteProductLink{{ product.id }}\" class=\"btn btn-danger\" href=\"{% url 'product_delete' product.pk %}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\n    <a id=\"homeLink\" class=\"btn btn-secondary\" href=\"{% url 'sales_analysis' %}\">Back to Sales Analysis</a>\n\n</body>\n</html>"}, {"file": "product_form.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Product Form</title>\n</head>\n<body>\n    <h1 id=\"productFormTitle\" class=\"page-title\">Product Form</h1>\n\n    <form id=\"productForm\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"saveProductButton\" class=\"btn btn-primary\" type=\"submit\">Save</button>\n        <a  id=\"cancelProductLink\" class=\"btn btn-secondary\" href=\"{% url 'product_list' %}\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "product_delete.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Product</title>\n</head>\n<body>\n    <h1 id=\"deleteProductTitle\" class=\"page-title\">Delete Product</h1>\n\n    <p id=\"deleteConfirmationMessage\">Are you sure you want to delete product: {{ product.name }}?</p>\n\n    <form id=\"deleteProductForm\" method=\"post\">\n        {% csrf_token %}\n        <button id=\"confirmDeleteButton\" class=\"btn btn-danger\" type=\"submit\">Confirm Delete</button>\n        <a id=\"cancelDeleteLink\" class=\"btn btn-secondary\" href=\"{% url 'product_list' %}\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "purchase_record_list.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Purchase Record List</title>\n</head>\n<body>\n    <h1 id=\"purchaseRecordListTitle\" class=\"page-title\">Purchase Record List</h1>\n\n    <a id=\"createPurchaseRecordLink\" class=\"btn btn-primary\" href=\"{% url 'purchase_record_create' %}\">Create New Purchase Record</a>\n\n    <table id=\"purchaseRecordTable\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Datetime</th>\n                <th>Product</th>\n                <th>Customer</th>\n                <th>Quantity</th>\n                <th>Amount</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for purchase_record in purchase_records %}\n            <tr id=\"purchaseRecordRow{{ purchase_record.id }}\">\n                <td>{{ purchase_record.datetime }}</td>\n                <td>{{ purchase_record.product }}</td>\n                <td>{{ purchase_record.customer }}</td>\n                <td>{{ purchase_record.quantity }}</td>\n                <td>{{ purchase_record.amount }}</td>\n                <td>\n                    <a id=\"updatePurchaseRecordLink{{ purchase_record.id }}\" class=\"btn btn-secondary\" href=\"{% url 'purchase_record_update' purchase_record.pk %}\">Update</a>\n                    <a id=\"deletePurchaseRecordLink{{ purchase_record.id }}\" class=\"btn btn-danger\" href=\"{% url 'purchase_record_delete' purchase_record.pk %}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\n    <a id=\"homeLink\" class=\"btn btn-secondary\" href=\"{% url 'sales_analysis' %}\">Back to Sales Analysis</a>\n\n</body>\n</html>"}, {"file": "purchase_record_form.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Purchase Record Form</title>\n</head>\n<body>\n    <h1 id=\"purchaseRecordFormTitle\" class=\"page-title\">Purchase Record Form</h1>\n\n    <form id=\"purchaseRecordForm\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"savePurchaseRecordButton\" class=\"btn btn-primary\" type=\"submit\">Save</button>\n        <a id=\"cancelPurchaseRecordLink\" class=\"btn btn-secondary\" href=\"{% url 'purchase_record_list' %}\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "purchase_record_delete.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Purchase Record</title>\n</head>\n<body>\n    <h1 id=\"deletePurchaseRecordTitle\" class=\"page-title\">Delete Purchase Record</h1>\n\n    <p id=\"deleteConfirmationMessage\">Are you sure you want to delete this purchase record?</p>\n\n    <form id=\"deletePurchaseRecordForm\" method=\"post\">\n        {% csrf_token %}\n        <button id=\"confirmDeleteButton\" class=\"btn btn-danger\" type=\"submit\">Confirm Delete</button>\n        <a id=\"cancelDeleteLink\" class=\"btn btn-secondary\" href=\"{% url 'purchase_record_list' %}\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "sales_analysis.html", "path": "crm_project/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sales Analysis</title>\n</head>\n<body>\n    <h1 id=\"salesAnalysisTitle\" class=\"page-title\">Sales Analysis</h1>\n\n    <p id=\"totalSales\">Total Sales: {{ total_sales }}</p>\n\n    <a id=\"customerListLink\" class=\"btn btn-primary\" href=\"{% url 'customer_list' %}\">Manage Customers</a>\n    <a id=\"productListLink\" class=\"btn btn-primary\" href=\"{% url 'product_list' %}\">Manage Products</a>\n    <a id=\"purchaseRecordListLink\" class=\"btn btn-primary\" href=\"{% url 'purchase_record_list' %}\">Manage Purchase Records</a>\n\n</body>\n</html>"}, {"file": "base.html", "path": "crm_project/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}CRM System{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        .page-title { margin-bottom: 20px; }\n        .table { width: 100%; }\n        .btn { margin-right: 5px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "helloworld/helloworld/__init__.py", "code": ""}, {"file": "settings.py", "path": "helloworld/helloworld/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello.urls')),  # Include the 'hello' app's URLs\n]"}, {"file": "wsgi.py", "path": "helloworld/helloworld/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "helloworld/hello/__init__.py", "code": ""}, {"file": "admin.py", "path": "helloworld/hello/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "helloworld/hello/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloConfig(AppConfig):\n    name = 'hello'"}, {"file": "models.py", "path": "helloworld/hello/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "helloworld/hello/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "views.py", "path": "helloworld/hello/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'hello/hello.html')"}, {"file": "hello.html", "path": "helloworld/hello/templates/hello/hello.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello, World!</title>\n</head>\n<body>\n    <h1 id=\"greeting\" class=\"greeting-text\">Hello, World!</h1>\n</body>\n</html>"}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jumpy_site.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "jumpy_site/__init__.py", "code": ""}, {"file": "settings.py", "path": "jumpy_site/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'YOUR_SECRET_KEY_HERE' # Replace with a real secret key!\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'jump_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'jumpy_site.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'jumpy_site.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "jumpy_site/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('jump_app.urls')),  # Include the app's URLs\n]"}, {"file": "wsgi.py", "path": "jumpy_site/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jumpy_site.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "jump_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "jump_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "jump_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass JumpAppConfig(AppConfig):\n    name = 'jump_app'"}, {"file": "models.py", "path": "jump_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "jump_app/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "urls.py", "path": "jump_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "jump_app/views.py", "code": "from django.shortcuts import render, redirect\n\n\ndef index(request):\n    return render(request, 'index.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "index.html", "path": "templates/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Jump to Hello World</title>\n</head>\n<body>\n  <div id=\"main-container\" class=\"container\">\n    <button id=\"jump-button\" class=\"btn btn-primary\" onclick=\"window.location.href='helloworld/'\">Jump to Hello World!</button>\n  </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n</head>\n<body>\n  <div id=\"hello-container\" class=\"container\">\n    <h1 id=\"hello-message\" class=\"display-4\">Hello, World!</h1>\n    <a id=\"back-link\" class=\"btn btn-secondary\" href=\"/\">Back to Home</a>\n  </div>\n</body>\n</html>"}], "17": [{"file": "Gamedata.xlsx", "path": "data/Gamedata.xlsx", "code": "## Replace this with your actual Gamedata.xlsx file contents (binary).  Since the content is binary data, this code will be represented as a placeholder.\n## In reality, this file will contain your data in Excel format.\n## For example a small example data could be:\n##     feature1,feature2,result\n##     1,2,1\n##     2,3,0\n##     3,4,1\n##     4,5,0"}, {"file": "logistic_model.py", "path": "src/logistic_model.py", "code": "import pandas as pd\nimport statsmodels.api as sm\n\n\ndef create_logistic_model(data_path, output_path):\n    \"\"\"Reads data, creates a lagged logistic model, and saves the summary.\n\n    Args:\n        data_path (str): Path to the Excel data file.\n        output_path (str): Path to save the model summary.\n    \"\"\"\n    try:\n        # Read the Excel file\n        df = pd.read_excel(data_path)\n\n        # Create the lagged 'result' variable\n        df['result_lagged'] = df['result'].shift(1)\n\n        # Drop the first row (which will have NaN for 'result_lagged')\n        df = df.dropna()\n\n        # Define independent variables (all columns except 'result' and 'result_lagged')\n        independent_vars = [col for col in df.columns if col not in ['result', 'result_lagged']]\n\n        # Add a constant to the independent variables (for the intercept)\n        X = sm.add_constant(df[independent_vars])\n\n        # Define the dependent variable\n        y = df['result']\n\n        # Create the logistic regression model\n        model = sm.Logit(y, X)\n\n        # Fit the model\n        results = model.fit()\n\n        # Save the model summary to a text file\n        with open('summary.txt', 'w') as f:\n            f.write(results.summary().as_text())\n        \n        # Read the text file and write the summary into an excel file\n        with open('summary.txt','r') as f:\n            summary = f.readlines()\n            summary_df = pd.DataFrame(summary)\n            summary_df.to_excel(output_path, index=False, header=False)\n\n        print(f\"Logistic model summary saved to {output_path}\")\n\n    except FileNotFoundError:\n        print(f\"Error: File not found at {data_path}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    # Example usage\n    data_path = \"data/Gamedata.xlsx\"  # Path to your data file\n    output_path = \"Logistic.xlsx\"  # Path to save the model summary\n    create_logistic_model(data_path, output_path)\n"}, {"file": "run_model.bat", "path": "run_model.bat", "code": "@echo off\n\nREM Set the path to your Python executable (adjust if needed)\nset PYTHON_PATH=C:\\Python39\\python.exe\n\nREM Navigate to the directory containing your Python script (adjust if needed)\ncd src\n\nREM Run the Python script\n%PYTHON_PATH% logistic_model.py\n\nREM Pause to see the output (optional)\npause"}, {"file": "README.md", "path": "README.md", "code": "# Logistic Regression Model Creation\n\nThis project contains a Python script to read data from an Excel file, create a logistic regression model with a one-period lag for the dependent variable, and save the model summary to an Excel file.\n\n## Project Structure\n\n```\n.\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 Gamedata.xlsx\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 logistic_model.py\n\u251c\u2500\u2500 run_model.bat\n\u2514\u2500\u2500 README.md\n```\n\n- `data/Gamedata.xlsx`: The Excel file containing your dataset.\n- `src/logistic_model.py`: The Python script that creates the logistic model.\n- `run_model.bat`: A batch file to execute the Python script.\n- `README.md`: This file, providing project information.\n\n## Setup\n\n1.  **Install Python:** If you don't have Python installed, download and install it from [python.org](https://www.python.org/).  Make sure to add Python to your PATH during installation.\n2.  **Install pandas and statsmodels:**  Open a command prompt or terminal and run:\n    ```bash\n    pip install pandas statsmodels openpyxl\n    ```\n\n3. **Place your data:** Put your `Gamedata.xlsx` file into the `data` directory.\n\n## Usage\n\n1.  **Edit `run_model.bat`:**  Modify the `PYTHON_PATH` variable in the `run_model.bat` file to point to the correct path of your Python executable.  Also, make sure the script correctly change the directory into src.\n2.  **Run the Batch File:** Double-click the `run_model.bat` file.  This will execute the Python script.\n\n3.  **Check the Output:** The model summary will be saved to `Logistic.xlsx` in the project directory.\n\n## Notes\n\n*   Make sure the `Gamedata.xlsx` file has a column named `result` which is the dependent variable.\n*   The script creates a one-period lag of the `result` column named `result_lagged`.\n*   The first row, which contains NA values for the lagged variable, will be dropped.\n* The independent variables are defined as all other columns besides the 'result' and 'result_lagged' columns\n* The final Logistic.xlsx includes the summary from the text file \"summary.txt\""}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import random\nimport os\nimport time\n\n# Game state\nplayer = {\n    'name': 'Player',\n    'health': 100,\n    'attack': 10,\n    'defense': 5,\n    'gold': 0,\n    'location': 'start',\n    'inventory': []\n}\n\nworld_map = {\n    'start': {\n        'description': 'You find yourself at the entrance to a dark cave.',\n        'exits': {'north': 'forest', 'east': 'village'},\n        'items': ['rusty sword'],\n        'monsters': []\n    },\n    'forest': {\n        'description': 'A dense forest surrounds you.  You hear rustling in the bushes.',\n        'exits': {'south': 'start', 'west': 'monster_lair'},\n        'items': ['healing potion'],\n        'monsters': ['goblin']\n    },\n    'village': {\n        'description': 'A small village with a friendly blacksmith.',\n        'exits': {'west': 'start', 'north': 'shop'},\n        'items': [],\n        'monsters': [],\n        'npcs': ['blacksmith']\n    },\n    'shop': {\n        'description': 'The local shop is stocked with useful items.',\n        'exits': {'south': 'village'},\n        'items': ['iron armor', 'stronger sword'],\n        'monsters': []\n    },\n     'monster_lair': {\n        'description': 'A foul smell emanates from this lair.',\n        'exits': {'east': 'forest'},\n        'items': ['gold'],\n        'monsters': ['ogre']\n    }\n\n}\n\nmonsters = {\n    'goblin': {'health': 30, 'attack': 5, 'defense': 2, 'gold': 5},\n    'ogre': {'health': 60, 'attack': 12, 'defense': 8, 'gold': 20}\n}\n\nitems = {\n    'rusty sword': {'type': 'weapon', 'attack': 3},\n    'healing potion': {'type': 'potion', 'heal': 20},\n    'iron armor': {'type': 'armor', 'defense': 7},\n    'stronger sword': {'type': 'weapon', 'attack': 8},\n    'gold': {'type': 'currency', 'value': 1}\n}\n\nnpcs = {\n    'blacksmith': {\n        'greeting': 'Welcome! I can repair your equipment.',\n        'services': ['repair']\n    }\n}\n\n\ndef clear_screen():\n    os.system('cls' if os.name == 'nt' else 'clear')\n\ndef display_status():\n    print(f\"Name: {player['name']}\")\n    print(f\"Health: {player['health']}\")\n    print(f\"Attack: {player['attack']}\")\n    print(f\"Defense: {player['defense']}\")\n    print(f\"Gold: {player['gold']}\")\n    print(f\"Location: {player['location']}\")\n    print(f\"Inventory: {player['inventory']}\")\n    print(\"---------------------\")\n\n\ndef display_location():\n    location = world_map[player['location']]\n    print(location['description'])\n    print(\"\\nExits:\")\n    for direction, destination in location['exits'].items():\n        print(f\"- {direction}: {destination}\")\n    \n    if location['items']:\n        print(\"\\nItems here:\")\n        for item in location['items']:\n            print(f\"- {item}\")\n\n    if location['monsters']:\n        print(\"\\nMonsters here:\")\n        for monster in location['monsters']:\n            print(f\"- {monster}\")\n\n    if 'npcs' in location and location['npcs']:\n        print(\"\\nNPCs here:\")\n        for npc in location['npcs']:\n            print(f\"- {npc}\")\n\n\ndef get_player_action():\n    return input(\"\\nWhat do you do? \")\n\n\ndef move_player(direction):\n    location = world_map[player['location']]\n    if direction in location['exits']:\n        player['location'] = location['exits'][direction]\n        print(f\"You move {direction}.\")\n    else:\n        print(\"You can't go that way.\")\n\n\ndef take_item(item_name):\n    location = world_map[player['location']]\n    if item_name in location['items']:\n        player['inventory'].append(item_name)\n        location['items'].remove(item_name)\n        print(f\"You take the {item_name}.\")\n    else:\n        print(\"That item isn't here.\")\n\n\ndef use_item(item_name):\n    if item_name in player['inventory']:\n        item = items[item_name]\n        if item['type'] == 'potion':\n            player['health'] += item['heal']\n            print(f\"You drink the {item_name} and heal for {item['heal']} health.\")\n            player['inventory'].remove(item_name)\n        else:\n            print(\"You can't use that item like that.\")\n    else:\n        print(\"You don't have that item.\")\n\ndef attack_monster(monster_name):\n    location = world_map[player['location']]\n    if monster_name in location['monsters']:\n        monster = monsters[monster_name]\n        print(f\"You attack the {monster_name}!\")\n\n        # Player attacks monster\n        player_damage = max(0, player['attack'] - monster['defense'])\n        monster['health'] -= player_damage\n        print(f\"You deal {player_damage} damage to the {monster_name}.\")\n\n        if monster['health'] <= 0:\n            print(f\"The {monster_name} is defeated!\")\n            location['monsters'].remove(monster_name)\n            player['gold'] += monster['gold']\n            print(f\"You find {monster['gold']} gold.\")\n            return  # Exit the attack sequence if the monster is dead\n\n        # Monster attacks player\n        monster_damage = max(0, monster['attack'] - player['defense'])\n        player['health'] -= monster_damage\n        print(f\"The {monster_name} attacks you and deals {monster_damage} damage.\")\n\n        if player['health'] <= 0:\n            print(\"You have been defeated!\")\n            return False # Game over\n\n    else:\n        print(\"That monster isn't here.\")\n\n    return True\n\n\ndef talk_to_npc(npc_name):\n  location = world_map[player['location']]\n  if 'npcs' in location and npc_name in location['npcs']:\n    npc = npcs[npc_name]\n    print(npc['greeting'])\n    if 'services' in npc:\n      for service in npc['services']:\n        if service == 'repair':\n          print(\"I can repair your equipment for 10 gold.\")\n          repair = input(\"Do you want me to repair your equipment? (yes/no) \")\n          if repair.lower() == 'yes':\n            if player['gold'] >= 10:\n              player['gold'] -= 10\n              player['attack'] = 10  # Restore to base attack, adjust as needed\n              player['defense'] = 5 # Restore to base defense, adjust as needed\n              print(\"Your equipment is repaired!  Attack and Defense restored.\")\n            else:\n              print(\"You don't have enough gold.\")\n  else:\n    print(\"That person isn't here.\")\n\n\n\ndef game_loop():\n    game_over = False\n    while not game_over:\n        clear_screen()\n        display_status()\n        display_location()\n        action = get_player_action().lower()\n\n        if action.startswith('move'):\n            direction = action.split(' ')[1]\n            move_player(direction)\n        elif action.startswith('take'):\n            item_name = ' '.join(action.split(' ')[1:])\n            take_item(item_name)\n        elif action.startswith('use'):\n            item_name = ' '.join(action.split(' ')[1:])\n            use_item(item_name)\n        elif action.startswith('attack'):\n            monster_name = ' '.join(action.split(' ')[1:])\n            if not attack_monster(monster_name):\n               game_over = True # Game over if attack returns False\n               break\n        elif action.startswith('talk'):\n            npc_name = ' '.join(action.split(' ')[1:])\n            talk_to_npc(npc_name)\n        elif action == 'help':\n            print(\"Available commands: move [direction], take [item], use [item], attack [monster], talk [npc], help, quit\")\n        elif action == 'quit':\n            print(\"Thanks for playing!\")\n            break\n        else:\n            print(\"Invalid command. Type 'help' for a list of commands.\")\n        time.sleep(1) # Add a short delay to prevent rapid actions\n\n    if game_over:\n      print(\"Game Over!\")\n\n\n# Game start\nif __name__ == \"__main__\":\n    print(\"Welcome to Bashcrawl!\")\n    game_loop()"}], "19": [{"file": "death_histogram.bat", "path": "death_histogram.bat", "code": "@echo off\nREM Install necessary tools if not already present\nwhere R > nul 2>&1\nif %errorlevel% neq 0 (\n  echo R is not installed. Please install R and add it to your system PATH.\n  pause\n  exit /b 1\n)\n\nREM Create the R script\necho Creating R script...\necho \" > generate_histogram.R\necho \"library(ggplot2)\" >> generate_histogram.R\necho \"library(lubridate)\" >> generate_histogram.R\necho \"data <- read.csv(\\\"Deathlist.csv\\\")\" >> generate_histogram.R\necho \"data$\\\"Date.of.death\\\" <- as.Date(data$\\\"Date.of.death\\\", \\\"%Y-%m-%d\\\") # Adjust format if needed\" >> generate_histogram.R\necho \"data$\\\"Week\\\" <- floor_date(data$\\\"Date.of.death\\\", unit = \\\"week\\\")\" >> generate_histogram.R\necho \"weekly_deaths <- aggregate(Date.of.death ~ Week, data = data, FUN = length)\" >> generate_histogram.R\necho \"colnames(weekly_deaths) <- c(\\\"Week\\\", \\\"DeathCount\\\")\" >> generate_histogram.R\necho \"p <- ggplot(weekly_deaths, aes(x = Week, y = DeathCount)) +\" >> generate_histogram.R\necho \"  geom_bar(stat = \\\"identity\\\", fill = \\\"steelblue\\\") +\" >> generate_histogram.R\necho \"  labs(title = \\\"Weekly Death Histogram\\\", x = \\\"Week\\\", y = \\\"Death Count\\\") +\" >> generate_histogram.R\necho \"  theme_minimal() +\" >> generate_histogram.R\necho \"  theme(axis.text.x = element_text(angle = 45, hjust = 1))\" >> generate_histogram.R\necho \"ggsave(\\\"weekly_death_histogram.png\\\", plot = p, width = 10, height = 6)\" >> generate_histogram.R\n\nREM Run the R script\necho Running R script...\nRscript generate_histogram.R\n\necho Histogram generated as weekly_death_histogram.png\n\npause"}, {"file": "generate_histogram.R", "path": "generate_histogram.R", "code": "# This file will be created by the batch script\n# It is provided here for completeness and in case you want to modify it directly\n\nlibrary(ggplot2)\nlibrary(lubridate)\n\ndata <- read.csv(\"Deathlist.csv\")\n\n# Correctly handle potential errors and missing values in Date of Death.\ndata$Date.of.death <- tryCatch({\n    as.Date(data$Date.of.death, \"%Y-%m-%d\") # Adjust format if needed.  Try YYYY-MM-DD first.\n  }, error = function(e) {\n    as.Date(data$Date.of.death, \"%m/%d/%Y\") #  Try MM/DD/YYYY if YYYY-MM-DD fails.\n  })\n\n# Remove rows with NA date\ndata <- data[!is.na(data$Date.of.death), ]\n\ndata$Week <- floor_date(data$Date.of.death, unit = \"week\")\n\nweekly_deaths <- aggregate(Date.of.death ~ Week, data = data, FUN = length)\ncolnames(weekly_deaths) <- c(\"Week\", \"DeathCount\")\n\n# Handle cases where the data frame is empty before plotting\nif (nrow(weekly_deaths) > 0) {\n  p <- ggplot(weekly_deaths, aes(x = Week, y = DeathCount)) +\n    geom_bar(stat = \"identity\", fill = \"steelblue\") +\n    labs(title = \"Weekly Death Histogram\", x = \"Week\", y = \"Death Count\") +\n    theme_minimal() +\n    theme(axis.text.x = element_text(angle = 45, hjust = 1))\n  ggsave(\"weekly_death_histogram.png\", plot = p, width = 10, height = 6)\n} else {\n  cat(\"No death data available to create the histogram.\\n\")\n  # Alternatively, create a blank plot to avoid an error:\n   p <- ggplot() + annotate(\"text\", x = 0.5, y = 0.5, label = \"No Data Available\")\n   ggsave(\"weekly_death_histogram.png\", plot = p, width = 10, height = 6)\n}\n\n"}, {"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death,Cause of death\n2023-01-01,Heart Failure\n2023-01-08,Accident\n2023-01-15,Cancer\n2023-01-22,Old Age\n2023-01-29,Heart Attack\n2023-02-05,Stroke\n2023-02-12,Accident\n2023-02-19,Cancer\n2023-02-26,Old Age\n2023-03-05,Pneumonia\n2023-03-12,Accident\n2023-03-19,Cancer\n2023-03-26,Old Age\n2023-04-02,Heart Failure\n2023-04-09,Accident\n2023-04-16,Cancer\n2023-04-23,Old Age\n2023-04-30,Heart Attack\n2023-05-07,Stroke\n2023-05-14,Accident\n2023-05-21,Cancer\n2023-05-28,Old Age\n2023-06-04,Pneumonia\n2023-06-11,Accident\n2023-06-18,Cancer\n2023-06-25,Old Age\n2023-07-02,Heart Failure\n2023-07-09,Accident\n2023-07-16,Cancer\n2023-07-23,Old Age"}], "20": [{"file": "settings.py", "path": "myblog/myblog/settings.py", "code": "# Django settings for myblog project.\n\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myblog.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myblog.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "myblog/myblog/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "wsgi.py", "path": "myblog/myblog/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myblog.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "myblog/blog/models.py", "code": "from django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    pub_date = models.DateTimeField('date published')\n\n    def __str__(self):\n        return self.title"}, {"file": "admin.py", "path": "myblog/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post\n\nadmin.site.register(Post)"}, {"file": "views.py", "path": "myblog/blog/views.py", "code": "from django.shortcuts import render\nfrom .models import Post\n\ndef index(request):\n    posts = Post.objects.order_by('-pub_date')\n    return render(request, 'blog/index.html', {'posts': posts})"}, {"file": "urls.py", "path": "myblog/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "index.html", "path": "myblog/templates/blog/index.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <link rel=\"stylesheet\" href=\"{% static 'blog/style.css' %}\">\n</head>\n<body>\n    <header id=\"blog-header\" class=\"blog-header\">\n        <h1 id=\"blog-title\" class=\"blog-title\">My Awesome Blog</h1>\n    </header>\n\n    <main id=\"blog-main\" class=\"blog-main\">\n        {% for post in posts %}\n        <article id=\"post-{{ post.id }}\" class=\"post-article\">\n            <h2 id=\"post-title-{{ post.id }}\" class=\"post-title\">{{ post.title }}</h2>\n            <p id=\"post-date-{{ post.id }}\" class=\"post-date\">{{ post.pub_date }}</p>\n            <p id=\"post-content-{{ post.id }}\" class=\"post-content\">{{ post.content }}</p>\n        </article>\n        {% endfor %}\n    </main>\n\n    <footer id=\"blog-footer\" class=\"blog-footer\">\n        <p id=\"copyright\" class=\"copyright\">\u00a9 2023 My Blog</p>\n    </footer>\n</body>\n</html>"}, {"file": "style.css", "path": "myblog/static/blog/style.css", "code": "/* Basic styling for the blog */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\n.blog-header {\n    background-color: #333;\n    color: #fff;\n    padding: 1rem 0;\n    text-align: center;\n}\n\n.blog-title {\n    margin: 0;\n}\n\n.blog-main {\n    padding: 20px;\n}\n\n.post-article {\n    background-color: #fff;\n    border: 1px solid #ddd;\n    margin-bottom: 20px;\n    padding: 15px;\n}\n\n.post-title {\n    margin-top: 0;\n}\n\n.post-date {\n    color: #777;\n    font-size: 0.9em;\n}\n\n.post-content {\n    line-height: 1.6;\n}\n\n.blog-footer {\n    background-color: #333;\n    color: #fff;\n    text-align: center;\n    padding: 1rem 0;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n}\n\n.copyright {\n    margin: 0;\n}"}]}