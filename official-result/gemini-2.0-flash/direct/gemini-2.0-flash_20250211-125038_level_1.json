{"1": [{"file": "manage.py", "path": "bmi_calculator/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "bmi_calculator/bmi_calculator/__init__.py", "code": ""}, {"file": "settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases/\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators/\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),  # Include the app's URLs\n]"}, {"file": "wsgi.py", "path": "bmi_calculator/bmi_calculator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "bmi_calculator/calculator/__init__.py", "code": ""}, {"file": "admin.py", "path": "bmi_calculator/calculator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "bmi_calculator/calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    name = 'calculator'"}, {"file": "forms.py", "path": "bmi_calculator/calculator/forms.py", "code": "from django import forms\n\nclass BmiForm(forms.Form):\n    height = forms.FloatField(label=\"Height (cm)\")\n    weight = forms.FloatField(label=\"Weight (kg)\")"}, {"file": "models.py", "path": "bmi_calculator/calculator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "bmi_calculator/calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "views.py", "path": "bmi_calculator/calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BmiForm\n\ndef bmi_calculator(request):\n    if request.method == 'POST':\n        form = BmiForm(request.POST)\n        if form.is_valid():\n            height = form.cleaned_data['height'] / 100  # Convert cm to meters\n            weight = form.cleaned_data['weight']\n            bmi = round(weight / (height * height), 2)\n            category = get_bmi_category(bmi)\n            return render(request, 'calculator/bmi_calculator.html', {'form': form, 'bmi': bmi, 'category': category})\n    else:\n        form = BmiForm()\n    return render(request, 'calculator/bmi_calculator.html', {'form': form})\n\ndef get_bmi_category(bmi):\n    if bmi < 18.5:\n        return 'Underweight'\n    elif 18.5 <= bmi < 25:\n        return 'Normal weight'\n    elif 25 <= bmi < 30:\n        return 'Overweight'\n    else:\n        return 'Obese'"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/calculator/templates/calculator/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .container {\n            width: 300px;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #45a049;\n        }\n        .result {\n            margin-top: 20px;\n            font-weight: bold;\n        }\n        .errorlist {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1 id=\"bmi-calculator-title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"height-group\" class=\"form-group\">\n                <label id=\"height-label\" for=\"id_height\">Height (cm):</label>\n                <input id=\"id_height\" type=\"number\" name=\"height\" step=\"0.01\" required>\n                {% if form.height.errors %}\n                    <ul class=\"errorlist\">\n                        {% for error in form.height.errors %}\n                            <li>{{ error }}</li>\n                        {% endfor %}\n                    </ul>\n                {% endif %}\n            </div>\n            <div id=\"weight-group\" class=\"form-group\">\n                <label id=\"weight-label\" for=\"id_weight\">Weight (kg):</label>\n                <input id=\"id_weight\" type=\"number\" name=\"weight\" step=\"0.01\" required>\n                {% if form.weight.errors %}\n                    <ul class=\"errorlist\">\n                        {% for error in form.weight.errors %}\n                            <li>{{ error }}</li>\n                        {% endfor %}\n                    </ul>\n                {% endif %}\n            </div>\n            <button id=\"calculate-button\" type=\"submit\">Calculate</button>\n        </form>\n\n        {% if bmi %}\n            <div id=\"bmi-result\" class=\"result\">\n                Your BMI: <span id=\"bmi-value\">{{ bmi }}</span>\n            </div>\n            <div id=\"bmi-category\" class=\"result\">\n                Category: <span id=\"category-value\">{{ category }}</span>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}], "2": [{"file": "requirements.txt", "path": "requirements.txt", "code": "Django==4.2.7\nrequests==2.31.0"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "currency_converter/settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] #Add this line\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "currency_converter/urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "currency_converter/wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "converter/apps.py", "path": "converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'"}, {"file": "converter/models.py", "path": "converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "converter/views.py", "path": "converter/converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport random\n\n# Simulate currency rates\ndef get_exchange_rate(from_currency, to_currency):\n    # In a real application, you'd fetch this from an API or database.\n    # This is just a simulation.\n    rates = {\n        ('USD', 'EUR'): round(random.uniform(0.85, 0.95), 4),\n        ('EUR', 'USD'): round(random.uniform(1.05, 1.15), 4),\n        ('USD', 'GBP'): round(random.uniform(0.75, 0.85), 4),\n        ('GBP', 'USD'): round(random.uniform(1.20, 1.35), 4),\n        ('EUR', 'GBP'): round(random.uniform(0.88, 0.92), 4),\n        ('GBP', 'EUR'): round(random.uniform(1.08, 1.12), 4),\n        ('USD', 'USD'): 1.0,\n        ('EUR', 'EUR'): 1.0,\n        ('GBP', 'GBP'): 1.0,\n    }\n\n    if (from_currency, to_currency) in rates:\n        return rates[(from_currency, to_currency)]\n    else:\n        return None  # Or raise an exception if the rate is not found\n\n\ndef index(request):\n    return render(request, 'converter/index.html')\n\n\ndef convert(request):\n    from_currency = request.GET.get('from_currency')\n    to_currency = request.GET.get('to_currency')\n    amount = float(request.GET.get('amount'))\n\n    exchange_rate = get_exchange_rate(from_currency, to_currency)\n\n    if exchange_rate is None:\n        return JsonResponse({'error': 'Exchange rate not found'}, status=400)\n\n    converted_amount = amount * exchange_rate\n\n    return JsonResponse({\n        'from_currency': from_currency,\n        'to_currency': to_currency,\n        'amount': amount,\n        'converted_amount': round(converted_amount, 2),\n        'exchange_rate': exchange_rate,\n    })\n"}, {"file": "converter/urls.py", "path": "converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('convert/', views.convert, name='convert'),\n]"}, {"file": "templates/converter/index.html", "path": "templates/converter/converter/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n            width: 500px;\n            max-width: 90%;\n            text-align: center;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        select, input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n            margin-bottom: 10px;\n        }\n\n        button {\n            background-color: #007bff;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #0056b3;\n        }\n\n        #result {\n            margin-top: 20px;\n            font-weight: bold;\n        }\n\n        .error-message {\n            color: red;\n            margin-top: 10px;\n        }\n    </style>\n</head>\n<body>\n\n<div class=\"container\" id=\"converterContainer\">\n    <h1>Currency Converter</h1>\n\n    <div class=\"form-group\" id=\"amountGroup\">\n        <label for=\"amount\" id=\"amountLabel\">Amount:</label>\n        <input type=\"number\" id=\"amount\" class=\"form-control\" placeholder=\"Enter amount\" value=\"100\">\n    </div>\n\n    <div class=\"form-group\" id=\"fromCurrencyGroup\">\n        <label for=\"fromCurrency\" id=\"fromCurrencyLabel\">From Currency:</label>\n        <select id=\"fromCurrency\" class=\"form-control\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n        </select>\n    </div>\n\n    <div class=\"form-group\" id=\"toCurrencyGroup\">\n        <label for=\"toCurrency\" id=\"toCurrencyLabel\">To Currency:</label>\n        <select id=\"toCurrency\" class=\"form-control\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n        </select>\n    </div>\n\n    <button id=\"convertButton\" class=\"btn btn-primary\">Convert</button>\n\n    <div id=\"result\" class=\"result-area\"></div>\n    <div id=\"error-message\" class=\"error-message\"></div>\n</div>\n\n<script>\n    document.getElementById('convertButton').addEventListener('click', function() {\n        const fromCurrency = document.getElementById('fromCurrency').value;\n        const toCurrency = document.getElementById('toCurrency').value;\n        const amount = document.getElementById('amount').value;\n\n        fetch(`/convert/?from_currency=${fromCurrency}&to_currency=${toCurrency}&amount=${amount}`)\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                    document.getElementById('error-message').innerText = data.error;\n                    document.getElementById('result').innerText = '';\n                } else {\n                    document.getElementById('error-message').innerText = '';\n                    document.getElementById('result').innerText = `${amount} ${data.from_currency} = ${data.converted_amount} ${data.to_currency} (Exchange Rate: ${data.exchange_rate})`;\n                }\n            })\n            .catch(error => {\n                console.error('Error:', error);\n                document.getElementById('error-message').innerText = 'An error occurred. Please try again.';\n                document.getElementById('result').innerText = '';\n            });\n    });\n</script>\n\n</body>\n</html>"}, {"file": "static/style.css", "path": "static/style.css", "code": "/* Add your CSS styles here */\nbody {\n  font-family: sans-serif;\n}\n"}], "4": [{"file": "manage.py", "path": "qr_generator_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "qr_generator_project/qr_generator_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "qr_generator_project/qr_generator_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_generator_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_generator_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] "}, {"file": "urls.py", "path": "qr_generator_project/qr_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_generator_project/qr_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_generator_project/qr_generator_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "qr_generator_project/qr_generator_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "qr_generator_project/qr_generator_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrGeneratorAppConfig(AppConfig):\n    name = 'qr_generator_app'"}, {"file": "forms.py", "path": "qr_generator_project/qr_generator_app/forms.py", "code": "from django import forms\n\nclass QRCodeForm(forms.Form):\n    qr_text = forms.CharField(label='Text to encode', widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'id': 'qrText'}))\n    error_correction = forms.ChoiceField(\n        label='Error Correction Level',\n        choices=[('L', 'L - Low (7%)'), ('M', 'M - Medium (15%)'), ('Q', 'Q - Quartile (25%)'), ('H', 'H - High (30%)')],\n        widget=forms.Select(attrs={'class': 'form-control', 'id': 'qrErrorCorrection'})\n    )\n    box_size = forms.IntegerField(\n        label='Box Size (pixels)',\n        initial=10,\n        widget=forms.NumberInput(attrs={'class': 'form-control', 'id': 'qrBoxSize', 'min': 1, 'max': 20})\n    )\n    border = forms.IntegerField(\n        label='Border Size (modules)',\n        initial=4,\n        widget=forms.NumberInput(attrs={'class': 'form-control', 'id': 'qrBorderSize', 'min': 0, 'max': 10})\n    )\n"}, {"file": "models.py", "path": "qr_generator_project/qr_generator_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "qr_generator_project/qr_generator_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.qr_generator, name='qr_generator'),\n]"}, {"file": "views.py", "path": "qr_generator_project/qr_generator_app/views.py", "code": "import qrcode\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import QRCodeForm\nfrom io import BytesIO\n\ndef qr_generator(request):\n    if request.method == 'POST':\n        form = QRCodeForm(request.POST)\n        if form.is_valid():\n            qr_text = form.cleaned_data['qr_text']\n            error_correction = form.cleaned_data['error_correction']\n            box_size = form.cleaned_data['box_size']\n            border = form.cleaned_data['border']\n\n            qr = qrcode.QRCode(\n                version=1,  # Let qrcode library determine the version\n                error_correction=qrcode.ERROR_CORRECT_L if error_correction == 'L' else \\\n                                 qrcode.ERROR_CORRECT_M if error_correction == 'M' else \\\n                                 qrcode.ERROR_CORRECT_Q if error_correction == 'Q' else \\\n                                 qrcode.ERROR_CORRECT_H,\n                box_size=box_size,\n                border=border,\n            )\n            qr.add_data(qr_text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n            # Save the image to a BytesIO buffer\n            buffer = BytesIO()\n            img.save(buffer, format='PNG')\n            buffer.seek(0)\n\n            # Return the image as an HTTP response\n            return HttpResponse(buffer.read(), content_type='image/png')\n    else:\n        form = QRCodeForm()\n    return render(request, 'qr_generator_app/qr_generator.html', {'form': form})"}, {"file": "qr_generator.html", "path": "qr_generator_project/templates/qr_generator_app/qr_generator.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"{% static 'qr_generator_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container mt-5\" id=\"mainContainer\">\n        <h1 class=\"mb-4\" id=\"pageTitle\">QR Code Generator</h1>\n        <div class=\"card\" id=\"qrFormCard\">\n            <div class=\"card-body\">\n                <form method=\"post\" id=\"qrForm\">\n                    {% csrf_token %}\n                    <div class=\"form-group\" id=\"qrTextGroup\">\n                        <label for=\"{{ form.qr_text.id_for_label }}\" id=\"qrTextLabel\">{{ form.qr_text.label }}</label>\n                        {{ form.qr_text }}\n                    </div>\n                    <div class=\"form-group\" id=\"qrErrorCorrectionGroup\">\n                        <label for=\"{{ form.error_correction.id_for_label }}\" id=\"qrErrorCorrectionLabel\">{{ form.error_correction.label }}</label>\n                        {{ form.error_correction }}\n                    </div>\n                    <div class=\"form-group\" id=\"qrBoxSizeGroup\">\n                        <label for=\"{{ form.box_size.id_for_label }}\" id=\"qrBoxSizeLabel\">{{ form.box_size.label }}</label>\n                        {{ form.box_size }}\n                    </div>\n                    <div class=\"form-group\" id=\"qrBorderSizeGroup\">\n                        <label for=\"{{ form.border.id_for_label }}\" id=\"qrBorderSizeLabel\">{{ form.border.label }}</label>\n                        {{ form.border }}\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"generateButton\">Generate QR Code</button>\n                </form>\n            </div>\n        </div>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "style.css", "path": "qr_generator_project/static/qr_generator_app/style.css", "code": "#mainContainer {\n    max-width: 600px;\n    margin: 0 auto;\n}\n\n#pageTitle {\n    text-align: center;\n    color: #343a40;\n}\n\n#qrFormCard {\n    border: 1px solid #ced4da;\n    border-radius: 5px;\n}\n\n#qrForm {\n    padding: 20px;\n}\n\n.form-group {\n    margin-bottom: 20px;\n}\n\n#qrTextLabel, #qrErrorCorrectionLabel, #qrBoxSizeLabel, #qrBorderSizeLabel {\n    font-weight: bold;\n}\n\n#qrText {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ced4da;\n    border-radius: 4px;\n}\n\n#generateButton {\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    padding: 10px 20px;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n#generateButton:hover {\n    background-color: #0056b3;\n}\n\n"}], "5": [{"file": "manage.py", "path": "markdown_converter/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "markdown_converter/markdown_converter/__init__.py", "code": ""}, {"file": "settings.py", "path": "markdown_converter/markdown_converter/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here' # Replace with a strong, unique key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Important for development\n"}, {"file": "urls.py", "path": "markdown_converter/markdown_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),  # Include the converter app's URLs\n]"}, {"file": "asgi.py", "path": "markdown_converter/markdown_converter/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "markdown_converter/markdown_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "markdown_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "markdown_converter/converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "markdown_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    name = 'converter'"}, {"file": "forms.py", "path": "markdown_converter/converter/forms.py", "code": "from django import forms\n\nclass ConversionForm(forms.Form):\n    markdown_text = forms.CharField(widget=forms.Textarea(attrs={'rows': 10, 'cols': 50}), label='Markdown Input')\n    input_type = forms.ChoiceField(choices=[('markdown', 'Markdown'), ('html', 'HTML')], label='Input Type', initial='markdown')\n    output_type = forms.ChoiceField(choices=[('html', 'HTML'), ('markdown', 'Markdown')], label='Output Type', initial='html')"}, {"file": "models.py", "path": "markdown_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "markdown_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.converter_view, name='converter'),\n]"}, {"file": "views.py", "path": "markdown_converter/converter/views.py", "code": "import markdown\nfrom django.shortcuts import render\nfrom .forms import ConversionForm\n\ndef converter_view(request):\n    if request.method == 'POST':\n        form = ConversionForm(request.POST)\n        if form.is_valid():\n            markdown_text = form.cleaned_data['markdown_text']\n            input_type = form.cleaned_data['input_type']\n            output_type = form.cleaned_data['output_type']\n\n            if input_type == 'markdown':\n                if output_type == 'html':\n                    converted_text = markdown.markdown(markdown_text)\n                else:\n                    # Basic reverse conversion (highly simplified)\n                    converted_text = markdown_text.replace('<h1>', '# ').replace('</h1>', '\\n').replace('<p>', '').replace('</p>', '\\n')\n            else:\n               if output_type == 'markdown':\n                   # basic reverse conversion of HTML to markdown. Not perfect\n                   converted_text = markdown_text.replace('<br>', '\\n').replace('</br>', '\\n').replace('<b>', '**').replace('</b>', '**').replace('<i>', '*').replace('</i>', '*');\n               else:\n                   converted_text = markdown_text\n\n            return render(request, 'converter/converter.html', {'form': form, 'converted_text': converted_text})\n    else:\n        form = ConversionForm()\n    return render(request, 'converter/converter.html', {'form': form})"}, {"file": "converter.html", "path": "markdown_converter/converter/templates/converter/converter.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown & HTML Converter</title>\n    <style>\n    body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n\n        textarea, select {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #45a049;\n        }\n\n        #output-section {\n            margin-top: 20px;\n            border: 1px solid #ddd;\n            padding: 10px;\n            border-radius: 4px;\n            background-color: #f9f9f9;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"converter-container\" class=\"container\">\n        <h1 id=\"converter-title\" class=\"converter-title\">Markdown & HTML Converter</h1>\n        <form id=\"conversion-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"markdown-input-group\" class=\"form-group\">\n                <label id=\"markdown-input-label\" for=\"{{ form.markdown_text.id_for_label }}\">Markdown/HTML Input:</label>\n                {{ form.markdown_text }}\n            </div>\n\n            <div id=\"input-type-group\" class=\"form-group\">\n                <label id=\"input-type-label\" for=\"{{ form.input_type.id_for_label }}\">Input Type:</label>\n                {{ form.input_type }}\n            </div>\n\n           <div id=\"output-type-group\" class=\"form-group\">\n                <label id=\"output-type-label\" for=\"{{ form.output_type.id_for_label }}\">Output Type:</label>\n                {{ form.output_type }}\n            </div>\n\n\n            <button id=\"convert-button\" type=\"submit\" class=\"btn btn-primary\">Convert</button>\n        </form>\n\n        {% if converted_text %}\n        <div id=\"output-section\" class=\"output-section\">\n            <h2 id=\"output-title\" class=\"output-title\">Converted Text:</h2>\n            <div id=\"converted-text\" class=\"converted-text\">{{ converted_text|safe }}</div>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}], "8": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'monthly_calendar.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "monthly_calendar/__init__.py", "code": "default_app_config = 'monthly_calendar.apps.MonthlyCalendarConfig'"}, {"file": "settings.py", "path": "monthly_calendar/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'monthly_calendar.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'monthly_calendar.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] "}, {"file": "urls.py", "path": "monthly_calendar/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),  # Include the app's URLs\n]"}, {"file": "wsgi.py", "path": "monthly_calendar/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'monthly_calendar.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "calendar_app/__init__.py", "code": "default_app_config = 'calendar_app.apps.CalendarAppConfig'"}, {"file": "admin.py", "path": "calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "apps.py", "path": "calendar_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalendarAppConfig(AppConfig):\n    name = 'calendar_app'"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'})\n        }"}, {"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar'),\n    path('event/new/', views.event_new, name='event_new'),\n    path('event/<int:event_id>/edit/', views.event_edit, name='event_edit'),\n    path('event/<int:event_id>/delete/', views.event_delete, name='event_delete'),\n]"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "import calendar\nfrom datetime import datetime, date\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils.safestring import mark_safe\nfrom .models import Event\nfrom .forms import EventForm\n\ndef prev_month(d):\n    first = d.replace(day=1)\n    month = first.month - 1\n    year = first.year\n    if month == 0:\n        month = 12\n        year = year - 1\n    return date(year, month, 1)\n\n\ndef next_month(d):\n    first = d.replace(day=1)\n    month = first.month + 1\n    year = first.year\n    if month == 13:\n        month = 1\n        year = year + 1\n    return date(year, month, 1)\n\n\ndef calendar_view(request):\n    today = date.today()\n    if request.GET.get('month'):\n        year, month = map(int, request.GET.get('month').split('-'))\n        today = date(year, month, day=1)\n\n    prev = prev_month(today)\n    next = next_month(today)\n\n    cal = calendar.HTMLCalendar().formatmonth(today.year, today.month)\n    cal = cal.replace('<td ', '<td  width=\"150\" height=\"150\"')\n    cal = mark_safe(cal)\n\n    events = Event.objects.filter(start_time__year=today.year, start_time__month=today.month)\n\n    context = {\n        'calendar': cal,\n        'prev_month': prev.strftime('%Y-%m'),\n        'next_month': next.strftime('%Y-%m'),\n        'events': events,\n    }\n    return render(request, 'calendar_app/calendar.html', context)\n\n\ndef event_new(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('calendar')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/event_form.html', {'form': form})\n\n\ndef event_edit(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('calendar')\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/event_form.html', {'form': form, 'event': event})\n\n\ndef event_delete(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('calendar')\n    return render(request, 'calendar_app/event_confirm_delete.html', {'event': event})"}, {"file": "calendar.html", "path": "templates/calendar_app/calendar.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"calendar-container\">\n        <h1 id=\"calendar-title\" class=\"calendar-title\">Monthly Calendar</h1>\n\n        <div id=\"month-navigation\" class=\"month-navigation\">\n            <a id=\"prev-month\" class=\"month-link\" href=\"?month={{ prev_month }}\">&lt; Previous Month</a>\n            <a id=\"next-month\" class=\"month-link\" href=\"?month={{ next_month }}\">Next Month &gt;</a>\n        </div>\n\n        <div id=\"calendar-table\" class=\"calendar-table\">\n            {{ calendar }}\n\n            <div id=\"event-list\" class=\"event-list\">\n                <h2 id=\"event-list-title\" class=\"event-list-title\">Events:</h2>\n                {% if events %}\n                    <ul id=\"event-list-ul\" class=\"event-list-ul\">\n                        {% for event in events %}\n                            <li id=\"event-{{ event.id }}\" class=\"event-item\">\n                                <strong class=\"event-title\">{{ event.title }}</strong>\n                                <p class=\"event-time\">{{ event.start_time|date:\"H:i\" }} - {{ event.end_time|date:\"H:i\" }}</p>\n                                <div class=\"event-actions\">\n                                    <a id=\"event-edit-{{ event.id }}\" class=\"event-edit\" href=\"{% url 'event_edit' event.id %}\">Edit</a>\n                                    <a id=\"event-delete-{{ event.id }}\" class=\"event-delete\" href=\"{% url 'event_delete' event.id %}\">Delete</a>\n                                </div>\n                            </li>\n                        {% endfor %}\n                    </ul>\n                {% else %}\n                    <p id=\"no-events\" class=\"no-events\">No events this month.</p>\n                {% endif %}\n            </div>\n        </div>\n\n\n        <div id=\"add-event-container\" class=\"add-event-container\">\n             <a id=\"add-event-button\" class=\"add-event-button\" href=\"{% url 'event_new' %}\">Add New Event</a>\n        </div>\n\n\n    </div>\n</body>\n</html>"}, {"file": "event_form.html", "path": "templates/calendar_app/event_form.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% if event %}Edit Event{% else %}New Event{% endif %}</title>\n</head>\n<body>\n    <h1>{% if event %}Edit Event{% else %}New Event{% endif %}</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n        <a href=\"{% url 'calendar' %}\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "event_confirm_delete.html", "path": "templates/calendar_app/event_confirm_delete.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Event</title>\n</head>\n<body>\n    <h1>Delete Event</h1>\n    <p>Are you sure you want to delete the event: {{ event.title }}?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Delete</button>\n        <a href=\"{% url 'calendar' %}\">Cancel</a>\n    </form>\n</body>\n</html>"}, {"file": "style.css", "path": "static/calendar_app/style.css", "code": ".calendar-container {\n    font-family: Arial, sans-serif;\n    margin: 20px auto;\n    width: 80%;\n    max-width: 800px;\n    border: 1px solid #ccc;\n    padding: 20px;\n}\n\n.calendar-title {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.month-navigation {\n    display: flex;\n    justify-content: space-between;\n    margin-bottom: 10px;\n}\n\n.month-link {\n    text-decoration: none;\n    color: #007bff;\n    padding: 5px 10px;\n    border: 1px solid #007bff;\n    border-radius: 5px;\n}\n\n.month-link:hover {\n    background-color: #007bff;\n    color: white;\n}\n\n.calendar-table {\n    width: 100%;\n    border-collapse: collapse;\n}\n\n.calendar-table th, .calendar-table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: center;\n}\n\n.calendar-table th {\n    background-color: #f0f0f0;\n}\n\n.calendar-table td {\n    height: 100px; /* Adjust as needed */\n    vertical-align: top;\n}\n\n.event-list {\n    margin-top: 20px;\n}\n\n.event-list-title {\n    margin-bottom: 10px;\n}\n\n.event-item {\n    list-style: none;\n    padding: 10px;\n    border: 1px solid #eee;\n    margin-bottom: 5px;\n}\n\n.event-actions {\n    margin-top: 5px;\n}\n\n.event-edit, .event-delete {\n    text-decoration: none;\n    padding: 5px 10px;\n    border-radius: 5px;\n    margin-right: 5px;\n}\n\n.event-edit {\n    background-color: #28a745;\n    color: white;\n}\n\n.event-delete {\n    background-color: #dc3545;\n    color: white;\n}\n\n.event-edit:hover, .event-delete:hover {\n    opacity: 0.8;\n}\n\n.add-event-container {\n    margin-top: 20px;\n    text-align: center;\n}\n\n.add-event-button {\n    display: inline-block;\n    padding: 10px 20px;\n    background-color: #007bff;\n    color: white;\n    text-decoration: none;\n    border-radius: 5px;\n}\n\n.add-event-button:hover {\n    background-color: #0056b3;\n}\n"}], "9": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_product.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/chatbot_product/", "code": "default_app_config = 'chatbot_product.apps.ChatbotProductConfig'"}, {"file": "apps.py", "path": "/chatbot_product/", "code": "from django.apps import AppConfig\n\n\nclass ChatbotProductConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot_product'"}, {"file": "settings.py", "path": "/chatbot_product/", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'pages',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_product.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_product.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "/chatbot_product/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('pages.urls')),  # Include the 'pages' app's URLs\n]"}, {"file": "wsgi.py", "path": "/chatbot_product/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_product.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/chatbot_product/asgi.py", "code": "default_app_config = 'chatbot_product.apps.ChatbotProductConfig'"}, {"file": "asgi.py", "path": "/chatbot_product/", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_product.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "/pages/", "code": "default_app_config = 'pages.apps.PagesConfig'"}, {"file": "apps.py", "path": "/pages/", "code": "from django.apps import AppConfig\n\n\nclass PagesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'pages'"}, {"file": "models.py", "path": "/pages/", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "views.py", "path": "/pages/", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'home.html')\n"}, {"file": "urls.py", "path": "/pages/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]"}, {"file": "home.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot Product</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n\n        header {\n            background-color: #333;\n            color: #fff;\n            padding: 1em 0;\n            text-align: center;\n        }\n\n        nav {\n            background-color: #444;\n            color: #fff;\n            padding: 0.5em 0;\n            text-align: center;\n        }\n\n        nav a {\n            color: #fff;\n            text-decoration: none;\n            padding: 0.5em 1em;\n            display: inline-block;\n        }\n\n        main {\n            padding: 20px;\n        }\n\n        section {\n            margin-bottom: 20px;\n        }\n\n        .feature {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin-bottom: 10px;\n            background-color: #fff;\n        }\n\n        footer {\n            background-color: #333;\n            color: #fff;\n            text-align: center;\n            padding: 1em 0;\n            position: fixed;\n            bottom: 0;\n            width: 100%;\n        }\n    </style>\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1>AI Chatbot Product</h1>\n    </header>\n\n    <nav id=\"nav\" class=\"nav\">\n        <a id=\"nav-home\" class=\"nav-link\" href=\"#\">Home</a>\n        <a id=\"nav-features\" class=\"nav-link\" href=\"#features\">Features</a>\n        <a id=\"nav-pricing\" class=\"nav-link\" href=\"#pricing\">Pricing</a>\n        <a id=\"nav-contact\" class=\"nav-link\" href=\"#contact\">Contact</a>\n    </nav>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"hero\" class=\"hero\">\n            <h2>Welcome to the Future of Communication</h2>\n            <p>Our AI chatbot is designed to revolutionize how you interact with your customers.  Experience the power of intelligent automation.</p>\n        </section>\n\n        <section id=\"features\" class=\"features\">\n            <h2>Key Features</h2>\n            <div id=\"feature-1\" class=\"feature\">\n                <h3>24/7 Availability</h3>\n                <p>Our chatbot never sleeps, providing instant support around the clock.</p>\n            </div>\n            <div id=\"feature-2\" class=\"feature\">\n                <h3>Personalized Interactions</h3>\n                <p>The chatbot learns from interactions, delivering tailored responses to each user.</p>\n            </div>\n            <div id=\"feature-3\" class=\"feature\">\n                <h3>Seamless Integration</h3>\n                <p>Easily integrate our chatbot with your existing platforms and systems.</p>\n            </div>\n        </section>\n\n        <section id=\"pricing\" class=\"pricing\">\n            <h2>Pricing Plans</h2>\n            <p>Choose the plan that best fits your needs.</p>\n            <ul>\n                <li>Basic: $99/month</li>\n                <li>Standard: $199/month</li>\n                <li>Premium: $299/month</li>\n            </ul>\n        </section>\n\n        <section id=\"contact\" class=\"contact\">\n            <h2>Contact Us</h2>\n            <p>Have questions?  Reach out to our team for more information.</p>\n            <form>\n                <label for=\"name\">Name:</label>\n                <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\"><br><br>\n                <label for=\"message\">Message:</label>\n                <textarea id=\"message\" name=\"message\"></textarea><br><br>\n                <input type=\"submit\" value=\"Submit\">\n            </form>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        &copy; 2024 AI Chatbot Product\n    </footer>\n</body>\n</html>"}, {"file": "style.css", "path": "/static/css/", "code": "/* You can add more specific styles here based on the IDs and classes in your HTML */\n\n/* Example:  Changing the color of the hero section's heading */\n#hero h2 {\n    color: #007bff; /* A nice blue color */\n}\n\n.feature {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\n    transition: box-shadow 0.3s ease;\n}\n\n.feature:hover {\n    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);\n}\n\n.nav-link:hover {\n    background-color: #555;\n}\n\n#contact form {\n    display: flex;\n    flex-direction: column;\n    width: 50%;\n    margin: 0 auto;\n}\n\n#contact label {\n    margin-bottom: 5px;\n}\n\n#contact input, #contact textarea {\n    padding: 8px;\n    margin-bottom: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\n#contact input[type=\"submit\"] {\n    background-color: #333;\n    color: white;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n#contact input[type=\"submit\"]:hover {\n    background-color: #555;\n}"}], "10": [{"file": "manage.py", "path": "calorie_tracker/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),\n]"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "calorie_tracker/tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Food, Meal\n\nadmin.site.register(Food)\nadmin.site.register(Meal)"}, {"file": "apps.py", "path": "calorie_tracker/tracker/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TrackerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tracker'"}, {"file": "forms.py", "path": "calorie_tracker/tracker/forms.py", "code": "from django import forms\nfrom .models import Food, Meal\n\nclass FoodForm(forms.ModelForm):\n    class Meta:\n        model = Food\n        fields = ['name', 'calories']\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = ['name', 'foods', 'date']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'})\n        }"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\n\nclass Food(models.Model):\n    name = models.CharField(max_length=100)\n    calories = models.IntegerField()\n\n    def __str__(self):\n        return self.name\n\nclass Meal(models.Model):\n    name = models.CharField(max_length=100)\n    foods = models.ManyToManyField(Food)\n    date = models.DateField()\n\n    def total_calories(self):\n        return sum(food.calories for food in self.foods.all())\n\n    def __str__(self):\n        return f'{self.name} - {self.date}'"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.meal_list, name='meal_list'),\n    path('meal/new/', views.meal_new, name='meal_new'),\n    path('meal/<int:pk>/', views.meal_detail, name='meal_detail'),\n    path('meal/<int:pk>/edit/', views.meal_edit, name='meal_edit'),\n    path('meal/<int:pk>/delete/', views.meal_delete, name='meal_delete'),\n    path('food/new/', views.food_new, name='food_new'),\n    path('analysis/', views.calorie_analysis, name='calorie_analysis'),\n]"}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Meal, Food\nfrom .forms import MealForm, FoodForm\nfrom django.db.models import Sum\nfrom django.http import JsonResponse\nimport datetime\n\ndef meal_list(request):\n    meals = Meal.objects.all()\n    return render(request, 'tracker/meal_list.html', {'meals': meals})\n\n\ndef meal_detail(request, pk):\n    meal = get_object_or_404(Meal, pk=pk)\n    return render(request, 'tracker/meal_detail.html', {'meal': meal})\n\n\ndef meal_new(request):\n    if request.method == \"POST\":\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save()\n            return redirect('meal_detail', pk=meal.pk)\n    else:\n        form = MealForm()\n    return render(request, 'tracker/meal_edit.html', {'form': form})\n\n\ndef meal_edit(request, pk):\n    meal = get_object_or_404(Meal, pk=pk)\n    if request.method == \"POST\":\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            meal = form.save()\n            return redirect('meal_detail', pk=meal.pk)\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'tracker/meal_edit.html', {'form': form})\n\n\ndef meal_delete(request, pk):\n    meal = get_object_or_404(Meal, pk=pk)\n    meal.delete()\n    return redirect('meal_list')\n\ndef food_new(request):\n    if request.method == \"POST\":\n        form = FoodForm(request.POST)\n        if form.is_valid():\n            food = form.save()\n            return redirect('meal_new') # Redirect to create a meal immediately after creating food\n    else:\n        form = FoodForm()\n    return render(request, 'tracker/food_edit.html', {'form': form})\n\n\ndef calorie_analysis(request):\n    today = datetime.date.today()\n    start_date = today - datetime.timedelta(days=6)\n    dates = [start_date + datetime.timedelta(days=i) for i in range(7)]\n    calorie_data = []\n    for date in dates:\n        total_calories = Meal.objects.filter(date=date).aggregate(Sum('foods__calories'))['foods__calories__sum'] or 0\n        calorie_data.append(total_calories)\n\n    context = {\n        'labels': [date.strftime('%Y-%m-%d') for date in dates],\n        'data': calorie_data\n    }\n\n    return render(request, 'tracker/calorie_analysis.html', context)\n"}, {"file": "meal_list.html", "path": "calorie_tracker/templates/tracker/meal_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Meal List</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        .meal-list-container {\n            max-width: 800px;\n            margin: 0 auto;\n        }\n\n        h1 {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        .meal-item {\n            border: 1px solid #ddd;\n            padding: 10px;\n            margin-bottom: 10px;\n            border-radius: 5px;\n        }\n\n        .meal-name {\n            font-weight: bold;\n        }\n\n        .meal-date {\n            color: #777;\n        }\n\n        .meal-actions {\n            margin-top: 10px;\n        }\n\n        .meal-actions a {\n            margin-right: 10px;\n            text-decoration: none;\n            padding: 5px 10px;\n            border: 1px solid #aaa;\n            border-radius: 3px;\n            color: #333;\n        }\n\n        .meal-actions a:hover {\n            background-color: #f0f0f0;\n        }\n\n        .new-meal-link {\n            display: block;\n            text-align: center;\n            margin-top: 20px;\n            text-decoration: none;\n            padding: 10px;\n            background-color: #4CAF50;\n            color: white;\n            border-radius: 5px;\n        }\n\n        .new-meal-link:hover {\n            background-color: #367c39;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"mealListContainer\" class=\"meal-list-container\">\n        <h1 id=\"mealListTitle\">Meal List</h1>\n\n        {% if meals %}\n            {% for meal in meals %}\n                <div id=\"mealItem{{ meal.pk }}\" class=\"meal-item\">\n                    <div class=\"meal-name\">{{ meal.name }}</div>\n                    <div class=\"meal-date\">{{ meal.date }}</div>\n                    <div class=\"meal-actions\">\n                        <a id=\"mealDetailLink{{ meal.pk }}\" href=\"{% url 'meal_detail' meal.pk %}\">Details</a>\n                        <a id=\"mealEditLink{{ meal.pk }}\" href=\"{% url 'meal_edit' meal.pk %}\">Edit</a>\n                        <a id=\"mealDeleteLink{{ meal.pk }}\" href=\"{% url 'meal_delete' meal.pk %}\">Delete</a>\n                    </div>\n                </div>\n            {% endfor %}\n        {% else %}\n            <p id=\"noMealsMessage\">No meals yet.</p>\n        {% endif %}\n\n        <a id=\"newMealLink\" class=\"new-meal-link\" href=\"{% url 'meal_new' %}\">Add New Meal</a>\n        <a id=\"foodNewLink\" class=\"new-meal-link\" href=\"{% url 'food_new' %}\">Add New Food</a>\n        <a id=\"calorieAnalysisLink\" class=\"new-meal-link\" href=\"{% url 'calorie_analysis' %}\">Calorie Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "meal_detail.html", "path": "calorie_tracker/templates/tracker/meal_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Meal Details</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        .meal-detail-container {\n            max-width: 600px;\n            margin: 0 auto;\n        }\n\n        h1 {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        .meal-info {\n            margin-bottom: 20px;\n            padding: 15px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n\n        .meal-name {\n            font-size: 1.5em;\n            font-weight: bold;\n            margin-bottom: 10px;\n        }\n\n        .meal-date {\n            color: #777;\n            margin-bottom: 10px;\n        }\n\n        .food-list {\n            list-style: none;\n            padding: 0;\n        }\n\n        .food-item {\n            padding: 8px;\n            border-bottom: 1px solid #eee;\n        }\n\n        .food-item:last-child {\n            border-bottom: none;\n        }\n\n        .food-name {\n            font-weight: bold;\n        }\n\n        .food-calories {\n            color: #555;\n        }\n\n        .back-link {\n            display: block;\n            text-align: center;\n            margin-top: 20px;\n            text-decoration: none;\n            padding: 10px;\n            background-color: #3498db;\n            color: white;\n            border-radius: 5px;\n        }\n\n        .back-link:hover {\n            background-color: #2980b9;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"mealDetailContainer\" class=\"meal-detail-container\">\n        <h1 id=\"mealDetailTitle\">Meal Details</h1>\n\n        <div id=\"mealInfo\" class=\"meal-info\">\n            <div id=\"mealName\" class=\"meal-name\">{{ meal.name }}</div>\n            <div id=\"mealDate\" class=\"meal-date\">Date: {{ meal.date }}</div>\n            <h2 id=\"foodListTitle\">Foods:</h2>\n            <ul id=\"foodList\" class=\"food-list\">\n                {% for food in meal.foods.all %}\n                    <li id=\"foodItem{{ food.pk }}\" class=\"food-item\">\n                        <span id=\"foodName{{ food.pk }}\" class=\"food-name\">{{ food.name }}</span>\n                        <span id=\"foodCalories{{ food.pk }}\" class=\"food-calories\">({{ food.calories }} calories)</span>\n                    </li>\n                {% endfor %}\n            </ul>\n            <p id=\"totalCalories\">Total Calories: {{ meal.total_calories }}</p>\n        </div>\n\n        <a id=\"backLink\" class=\"back-link\" href=\"{% url 'meal_list' %}\">Back to Meal List</a>\n    </div>\n</body>\n</html>"}, {"file": "meal_edit.html", "path": "calorie_tracker/templates/tracker/meal_edit.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Meal Form</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        .meal-form-container {\n            max-width: 600px;\n            margin: 0 auto;\n        }\n\n        h1 {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        input[type=\"text\"],\n        select,\n        textarea,\n        input[type=\"date\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        select[multiple] {\n            height: 100px; /* Adjust as needed */\n        }\n\n        button[type=\"submit\"] {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n        }\n\n        button[type=\"submit\"]:hover {\n            background-color: #367c39;\n        }\n\n        .error-message {\n            color: red;\n            margin-top: 5px;\n        }\n\n        .back-link {\n            display: block;\n            text-align: center;\n            margin-top: 20px;\n            text-decoration: none;\n            padding: 10px;\n            background-color: #3498db;\n            color: white;\n            border-radius: 5px;\n        }\n\n        .back-link:hover {\n            background-color: #2980b9;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"mealFormContainer\" class=\"meal-form-container\">\n        <h1 id=\"mealFormTitle\">Meal Form</h1>\n\n        <form id=\"mealForm\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"mealNameGroup\" class=\"form-group\">\n                <label id=\"mealNameLabel\" for=\"id_name\">Meal Name:</label>\n                {{ form.name }}\n                {% if form.name.errors %}\n                    <div id=\"mealNameError\" class=\"error-message\">{{ form.name.errors|first }}</div>\n                {% endif %}\n            </div>\n            <div id=\"mealFoodsGroup\" class=\"form-group\">\n                <label id=\"mealFoodsLabel\" for=\"id_foods\">Foods:</label>\n                {{ form.foods }}\n                {% if form.foods.errors %}\n                    <div id=\"mealFoodsError\" class=\"error-message\">{{ form.foods.errors|first }}</div>\n                {% endif %}\n            </div>\n            <div id=\"mealDateGroup\" class=\"form-group\">\n                <label id=\"mealDateLabel\" for=\"id_date\">Date:</label>\n                {{ form.date }}\n                {% if form.date.errors %}\n                    <div id=\"mealDateError\" class=\"error-message\">{{ form.date.errors|first }}</div>\n                {% endif %}\n            </div>\n\n            <button id=\"mealSubmitButton\" type=\"submit\">Save Meal</button>\n        </form>\n        <a id=\"backLink\" class=\"back-link\" href=\"{% url 'meal_list' %}\">Back to Meal List</a>\n    </div>\n</body>\n</html>"}, {"file": "food_edit.html", "path": "calorie_tracker/templates/tracker/food_edit.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Food Form</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        .food-form-container {\n            max-width: 600px;\n            margin: 0 auto;\n        }\n\n        h1 {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        input[type=\"text\"],\n        input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        button[type=\"submit\"] {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n        }\n\n        button[type=\"submit\"]:hover {\n            background-color: #367c39;\n        }\n\n        .error-message {\n            color: red;\n            margin-top: 5px;\n        }\n\n        .back-link {\n            display: block;\n            text-align: center;\n            margin-top: 20px;\n            text-decoration: none;\n            padding: 10px;\n            background-color: #3498db;\n            color: white;\n            border-radius: 5px;\n        }\n\n        .back-link:hover {\n            background-color: #2980b9;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"foodFormContainer\" class=\"food-form-container\">\n        <h1 id=\"foodFormTitle\">Food Form</h1>\n\n        <form id=\"foodForm\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"foodNameGroup\" class=\"form-group\">\n                <label id=\"foodNameLabel\" for=\"id_name\">Food Name:</label>\n                {{ form.name }}\n                {% if form.name.errors %}\n                    <div id=\"foodNameError\" class=\"error-message\">{{ form.name.errors|first }}</div>\n                {% endif %}\n            </div>\n            <div id=\"foodCaloriesGroup\" class=\"form-group\">\n                <label id=\"foodCaloriesLabel\" for=\"id_calories\">Calories:</label>\n                {{ form.calories }}\n                {% if form.calories.errors %}\n                    <div id=\"foodCaloriesError\" class=\"error-message\">{{ form.calories.errors|first }}</div>\n                {% endif %}\n            </div>\n\n            <button id=\"foodSubmitButton\" type=\"submit\">Save Food</button>\n        </form>\n        <a id=\"backLink\" class=\"back-link\" href=\"{% url 'meal_new' %}\">Back to Meal Form</a>\n    </div>\n</body>\n</html>"}, {"file": "calorie_analysis.html", "path": "calorie_tracker/templates/tracker/calorie_analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calorie Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        .calorie-analysis-container {\n            max-width: 800px;\n            margin: 0 auto;\n        }\n\n        h1 {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n\n        #calorieChart {\n            width: 100%;\n            height: 400px;\n            margin-bottom: 20px;\n        }\n\n        .back-link {\n            display: block;\n            text-align: center;\n            margin-top: 20px;\n            text-decoration: none;\n            padding: 10px;\n            background-color: #3498db;\n            color: white;\n            border-radius: 5px;\n        }\n\n        .back-link:hover {\n            background-color: #2980b9;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"calorieAnalysisContainer\" class=\"calorie-analysis-container\">\n        <h1 id=\"calorieAnalysisTitle\">Calorie Analysis (Last 7 Days)</h1>\n\n        <canvas id=\"calorieChart\" width=\"400\" height=\"200\"></canvas>\n\n        <a id=\"backLink\" class=\"back-link\" href=\"{% url 'meal_list' %}\">Back to Meal List</a>\n    </div>\n\n    <script>\n        const labels = {{ labels|safe }};\n        const data = {{ data|safe }};\n\n        const ctx = document.getElementById('calorieChart').getContext('2d');\n        const myChart = new Chart(ctx, {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Total Calories',\n                    data: data,\n                    backgroundColor: 'rgba(75, 192, 192, 0.2)',\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true,\n                        title: {\n                            display: true,\n                            text: 'Calories'\n                        }\n                    },\n                    x: {\n                        title: {\n                            display: true,\n                            text: 'Date'\n                        }\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}], "11": [{"file": "project_review/settings.py", "path": "project_review/project_review/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'your_secret_key_here')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DJANGO_DEBUG', 'True') == 'True'\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_review.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_review.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Define the static files directory\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "project_review/urls.py", "path": "project_review/project_review/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review_app.urls')),\n]"}, {"file": "project_review/wsgi.py", "path": "project_review/project_review/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_review.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "project_review/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_review.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail because Django is not installed.\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from None\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "review_app/apps.py", "path": "project_review/review_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ReviewAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'review_app'"}, {"file": "review_app/models.py", "path": "project_review/review_app/models.py", "code": "from django.db import models\nimport json\n\nclass Project(models.Model):\n    project_id = models.CharField(max_length=200)\n    project_type = models.CharField(max_length=200)\n    nl_prompt = models.TextField()\n    framework_technical_stack = models.JSONField()\n    nl_checklist = models.JSONField()\n    testcode = models.JSONField()\n\n    def __str__(self):\n        return self.project_id"}, {"file": "review_app/views.py", "path": "project_review/review_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nimport json\nfrom .models import Project\n\n\ndef upload_json(request):\n    if request.method == 'POST' and request.FILES['json_file']:\n        json_file = request.FILES['json_file']\n        try:\n            data = json.load(json_file)\n            if isinstance(data, list):\n                for item in data:\n                    Project.objects.create(\n                        project_id=item['project_id'],\n                        project_type=item['project_type'],\n                        nl_prompt=item['nl_prompt'],\n                        framework_technical_stack=item['framework_technical_stack'],\n                        nl_checklist=item['nl_checklist'],\n                        testcode=item['testcode']\n                    )\n                return HttpResponse('JSON data uploaded and saved successfully.')\n            else:\n                return HttpResponse('Invalid JSON format.  Must be a list.')\n\n        except json.JSONDecodeError:\n            return HttpResponse('Invalid JSON format.')\n    return render(request, 'review_app/upload_json.html')\n\n\ndef project_list(request):\n    projects = Project.objects.all()\n    return render(request, 'review_app/project_list.html', {'projects': projects})\n\n\n\ndef review_project(request, project_id):\n    project = Project.objects.get(project_id=project_id)\n    testcode_data = project.testcode\n\n    if request.method == 'POST':\n        # Handle the review status updates here.\n        for page_index, page in enumerate(testcode_data):\n            for function_index, function in enumerate(page['function']):\n                function_id = f\"{page_index}-{function_index}\"\n                status = request.POST.get(function_id)\n                testcode_data[page_index]['function'][function_index]['status'] = status\n\n        project.testcode = testcode_data # Update the project's testcode\n        project.save()\n        return redirect('project_list') # Redirect back to the project list or a confirmation page.\n\n\n    # Initialize status if it's not already there\n    for page in testcode_data:\n        for function in page['function']:\n            if 'status' not in function:\n                function['status'] = 'Select'\n\n    return render(request, 'review_app/review_project.html', {'project': project, 'testcode_data': testcode_data})\n"}, {"file": "review_app/urls.py", "path": "project_review/review_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('upload/', views.upload_json, name='upload_json'),\n    path('projects/', views.project_list, name='project_list'),\n    path('review/<str:project_id>/', views.review_project, name='review_project'),\n]"}, {"file": "review_app/admin.py", "path": "project_review/review_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Project\n\nadmin.site.register(Project)"}, {"file": "templates/review_app/upload_json.html", "path": "project_review/templates/review_app/upload_json.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Upload JSON</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            width: 500px;\n            text-align: center;\n        }\n\n        h1 {\n            color: #333;\n        }\n\n        form {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n        }\n\n        input[type=\"file\"] {\n            margin-bottom: 20px;\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n\n        button {\n            padding: 10px 20px;\n            background-color: #5cb85c;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n\n        button:hover {\n            background-color: #4cae4c;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Upload JSON File</h1>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <input type=\"file\" name=\"json_file\" id=\"jsonFile\" class=\"json-file-input\">\n            <button type=\"submit\" class=\"upload-button\">Upload</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "templates/review_app/project_list.html", "path": "project_review/templates/review_app/project_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Project List</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 0;\n        }\n\n        .container {\n            width: 80%;\n            margin: 20px auto;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n            color: #333;\n            text-align: center;\n        }\n\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n        }\n\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: left;\n        }\n\n        th {\n            background-color: #f2f2f2;\n        }\n\n        a {\n            text-decoration: none;\n            color: #007bff;\n        }\n\n        a:hover {\n            text-decoration: underline;\n        }\n\n        .button {\n            display: inline-block;\n            padding: 8px 16px;\n            font-size: 14px;\n            font-weight: bold;\n            text-align: center;\n            text-decoration: none;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n\n        .button:hover {\n            background-color: #0056b3;\n        }\n\n        .upload-button-container {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Project List</h1>\n        <div class=\"upload-button-container\">\n            <a href=\"{% url 'upload_json' %}\" class=\"button\">Upload New Project</a>\n        </div>\n\n        <table>\n            <thead>\n                <tr>\n                    <th>Project ID</th>\n                    <th>Project Type</th>\n                    <th>Action</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for project in projects %}\n                <tr>\n                    <td>{{ project.project_id }}</td>\n                    <td>{{ project.project_type }}</td>\n                    <td><a href=\"{% url 'review_project' project.project_id %}\" class=\"button\">Review</a></td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n</body>\n</html>"}, {"file": "templates/review_app/review_project.html", "path": "project_review/templates/review_app/review_project.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Review Project</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 0;\n        }\n\n        .container {\n            width: 80%;\n            margin: 20px auto;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n            color: #333;\n            text-align: center;\n        }\n\n        h2 {\n            color: #555;\n            margin-top: 20px;\n        }\n\n        .page-section {\n            margin-bottom: 20px;\n            border: 1px solid #ddd;\n            padding: 10px;\n            border-radius: 4px;\n        }\n\n        .function-section {\n            margin-bottom: 10px;\n            padding: 10px;\n            border: 1px solid #eee;\n            border-radius: 4px;\n            background-color: #f9f9f9;\n        }\n\n        .testcode {\n            font-family: monospace;\n            white-space: pre-wrap;\n            background-color: #f0f0f0;\n            padding: 10px;\n            border-radius: 4px;\n            overflow-x: auto;\n        }\n\n        .status-select {\n            padding: 8px;\n            border-radius: 4px;\n            border: 1px solid #ccc;\n            background-color: #fff;\n            cursor: pointer;\n        }\n\n        .status-select:focus {\n            outline: none;\n            border-color: #007bff;\n        }\n\n        .submit-button {\n            display: inline-block;\n            padding: 10px 20px;\n            font-size: 16px;\n            font-weight: bold;\n            text-align: center;\n            text-decoration: none;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n\n        .submit-button:hover {\n            background-color: #218838;\n        }\n\n        form {\n            margin-top: 20px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Review Project: {{ project.project_id }}</h1>\n\n        <form method=\"post\">\n            {% csrf_token %}\n            {% for page_index, page in testcode_data|enumerate %}\n                <div class=\"page-section\" id=\"page-{{ page_index }}\">\n                    <h2>Page: {{ page.page }}</h2>\n                    {% for function_index, function in page.function|enumerate %}\n                        <div class=\"function-section\" id=\"function-{{ page_index }}-{{ function_index }}\">\n                            <h3>Function: {{ function.function }}</h3>\n                            <div class=\"testcode\">\n                                {{ function.test }}\n                            </div>\n                            <label for=\"status-{{ page_index }}-{{ function_index }}\">Status:</label>\n                            <select class=\"status-select\" name=\"{{ page_index }}-{{ function_index }}\" id=\"status-{{ page_index }}-{{ function_index }}\">\n                                <option value=\"Select\" {% if function.status == 'Select' %}selected{% endif %}>Select</option>\n                                <option value=\"Pass\" {% if function.status == 'Pass' %}selected{% endif %}>Pass</option>\n                                <option value=\"Fail\" {% if function.status == 'Fail' %}selected{% endif %}>Fail</option>\n                            </select>\n                        </div>\n                    {% endfor %}\n                </div>\n            {% endfor %}\n            <button type=\"submit\" class=\"submit-button\">Submit Review</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "static/style.css", "path": "project_review/static/style.css", "code": "/* General Styles */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: auto;\n    overflow: hidden;\n}\n\n/* Header Styles */\nheader {\n    background: #505050;\n    color: #fff;\n    padding-top: 30px;\n    min-height: 70px;\n    border-bottom: #bbb 1px solid;\n}\n\nheader a {\n    color: #fff;\n    text-decoration: none;\n    text-transform: uppercase;\n    font-size: 16px;\n}\n\nheader ul {\n    margin: 0;\n    padding: 0;\n}\n\nheader li {\n    float: left;\n    display: inline;\n    padding: 0 20px 0 20px;\n}\n\nheader #branding {\n    float: left;\n}\n\nheader #branding h1 {\n    margin: 0;\n}\n\nheader nav {\n    float: right;\n    margin-top: 10px;\n}\n\nheader .highlight, header .current a {\n    color: #e8491d;\n    font-weight: bold;\n}\n\nheader a:hover {\n    color: #ccc;\n    font-weight: bold;\n}\n\n/* Showcase */\n#showcase {\n    min-height: 400px;\n    background: url('./img/showcase.jpg') no-repeat 0 -100px;\n    text-align: center;\n    color: #fff;\n}\n\n#showcase h1 {\n    margin-top: 100px;\n    font-size: 55px;\n    margin-bottom: 10px;\n}\n\n#showcase p {\n    font-size: 20px;\n}\n\n/* Newsletter */\n#newsletter {\n    padding: 15px;\n    color: #fff;\n    background: #35424a;\n}\n\n#newsletter h1 {\n    float: left;\n}\n\n#newsletter form {\n    float: right;\n    margin-top: 15px;\n}\n\n#newsletter input[type=\"email\"] {\n    padding: 4px;\n    height: 25px;\n    width: 250px;\n}\n\n.button_1 {\n    height: 38px;\n    background: #e8491d;\n    border: 0;\n    padding-left: 20px;\n    padding-right: 20px;\n    color: #fff;\n}\n\n/* Boxes */\n#boxes {\n    margin-top: 20px;\n}\n\n#boxes .box {\n    float: left;\n    text-align: center;\n    width: 30%;\n    padding: 10px;\n}\n\n#boxes .box img {\n    width: 90px;\n}\n\n/* Sidebar */\naside#sidebar {\n    float: right;\n    width: 30%;\n    margin-top: 10px;\n    padding: 10px\n}\n\n/* Article */\narticle#main-col {\n    float: left;\n    width: 65%;\n}\n\n/* Footer */\nfooter {\n    padding: 20px;\n    margin-top: 20px;\n    color: #fff;\n    background-color: #e8491d;\n    text-align: center;\n}\n\n/* Media Queries */\n@media(max-width: 768px) {\n    header #branding, header nav, header nav li, #newsletter h1, #newsletter form, #boxes .box, article#main-col, aside#sidebar {\n        float: none;\n        text-align: center;\n        width: 100%;\n    }\n\n    header {\n        padding-bottom: 50px;\n    }\n\n    #showcase h1 {\n        margin-top: 40px;\n    }\n\n    #newsletter button {\n        display: block;\n        width: 100%;\n    }\n\n    #newsletter form input[type=\"email\"] {\n        width: 100%;\n        margin-bottom: 5px;\n    }\n}"}], "12": [{"file": "requirements.txt", "path": "requirements.txt", "code": "Django>=4.0\npython-decouple>=3.6\npsycopg2-binary>=2.9  # Or your database adapter (e.g., mysqlclient, asgiref)\n"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'accounting_system.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "accounting_system/__init__.py", "code": ""}, {"file": "settings.py", "path": "accounting_system/settings.py", "code": "from pathlib import Path\nimport os\nfrom decouple import config\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = config('SECRET_KEY')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = config('DEBUG', cast=bool, default=True)\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'claims',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'accounting_system.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'accounting_system.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.postgresql',\n        'NAME': config('DB_NAME'),\n        'USER': config('DB_USER'),\n        'PASSWORD': config('DB_PASSWORD'),\n        'HOST': config('DB_HOST'),\n        'PORT': config('DB_PORT'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] #add this\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = '/claims/'  # Redirect after successful login\nLOGOUT_REDIRECT_URL = '/login/'  # Redirect after logout\n"}, {"file": "urls.py", "path": "accounting_system/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('claims/', include('claims.urls')),\n    path('login/', auth_views.LoginView.as_view(template_name='login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='login'), name='logout'),\n]"}, {"file": "wsgi.py", "path": "accounting_system/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'accounting_system.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "claims/__init__.py", "code": ""}, {"file": "admin.py", "path": "claims/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim, Budget\n\nadmin.site.register(Claim)\nadmin.site.register(Budget)"}, {"file": "apps.py", "path": "claims/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ClaimsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'claims'"}, {"file": "forms.py", "path": "claims/forms.py", "code": "from django import forms\nfrom .models import Claim, Budget\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['subject', 'amount', 'description']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 4, 'cols': 40, 'class': 'form-control', 'id': 'claimDescription'}),\n            'amount': forms.NumberInput(attrs={'class': 'form-control', 'id': 'claimAmount' }),\n            'subject': forms.Select(attrs={'class': 'form-control', 'id': 'claimSubject'})\n        }\n\n\nclass BudgetForm(forms.ModelForm):\n    class Meta:\n        model = Budget\n        fields = ['category', 'amount']\n        widgets = {\n            'category': forms.Select(attrs={'class': 'form-control', 'id': 'budgetCategory' }),\n            'amount': forms.NumberInput(attrs={'class': 'form-control', 'id': 'budgetAmount'})\n        }\n"}, {"file": "models.py", "path": "claims/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nCLAIM_STATUS = [\n    ('Pending', 'Pending'),\n    ('Approved', 'Approved'),\n    ('Rejected', 'Rejected'),\n]\n\nCLAIM_SUBJECTS = [\n    ('Travel expenses', 'Travel expenses'),\n    ('Labor expenses', 'Labor expenses'),\n    ('Management expenses', 'Management expenses'),\n    ('Equipment expenses', 'Equipment expenses'),\n]\n\nBUDGET_CATEGORIES = [\n    ('Travel expenses', 'Travel expenses'),\n    ('Labor expenses', 'Labor expenses'),\n    ('Management expenses', 'Management expenses'),\n    ('Equipment expenses', 'Equipment expenses'),\n]\n\nclass Claim(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    subject = models.CharField(max_length=255, choices=CLAIM_SUBJECTS)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submission_date = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=20, choices=CLAIM_STATUS, default='Pending')\n\n    def __str__(self):\n        return f'{self.subject} - {self.amount} - {self.status}'\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=255, choices=BUDGET_CATEGORIES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.category} - {self.amount}'"}, {"file": "urls.py", "path": "claims/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.claim_list, name='claim_list'),\n    path('new/', views.claim_new, name='claim_new'),\n    path('admin_panel/', views.admin_panel, name='admin_panel'),\n    path('admin_panel/approve/<int:pk>/', views.claim_approve, name='claim_approve'),\n    path('admin_panel/reject/<int:pk>/', views.claim_reject, name='claim_reject'),\n    path('budget/', views.budget_view, name='budget_view'),\n]"}, {"file": "views.py", "path": "claims/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Claim, Budget\nfrom .forms import ClaimForm, BudgetForm\nfrom django.contrib.auth.decorators import login_required, user_passes_test\nfrom django.db.models import Sum\n\n@login_required\ndef claim_list(request):\n    claims = Claim.objects.filter(user=request.user).order_by('-submission_date')\n    return render(request, 'claim_list.html', {'claims': claims})\n\n@login_required\ndef claim_new(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.user = request.user\n            claim.save()\n            return redirect('claim_list')\n    else:\n        form = ClaimForm()\n    return render(request, 'claim_new.html', {'form': form})\n\n\ndef is_admin(user):\n    return user.is_staff\n\n@login_required\n@user_passes_test(is_admin)\ndef admin_panel(request):\n    claims = Claim.objects.all().order_by('-submission_date')\n    return render(request, 'admin_panel.html', {'claims': claims})\n\n@login_required\n@user_passes_test(is_admin)\ndef claim_approve(request, pk):\n    claim = get_object_or_404(Claim, pk=pk)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('admin_panel')\n\n@login_required\n@user_passes_test(is_admin)\ndef claim_reject(request, pk):\n    claim = get_object_or_404(Claim, pk=pk)\n    claim.status = 'Rejected'\n    claim.save()\n    return redirect('admin_panel')\n\n@login_required\n@user_passes_test(is_admin)\ndef budget_view(request):\n    budgets = Budget.objects.all()\n\n    budget_data = {}\n    for budget in budgets:\n        budget_data[budget.category] = budget.amount\n\n    # Calculate total spent per category\n    category_spending = {}\n    for category, _ in Claim.CLAIM_SUBJECTS:\n        total_spent = Claim.objects.filter(subject=category, status='Approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        category_spending[category] = total_spent\n\n\n    if request.method == 'POST':\n        form = BudgetForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('budget_view')\n    else:\n        form = BudgetForm()\n\n    return render(request, 'budget.html', {'form': form, 'budgets': budgets, 'budget_data': budget_data, 'category_spending': category_spending})\n"}, {"file": "claim_list.html", "path": "templates/claim_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 id=\"claimListTitle\" class=\"mb-4\">My Claims</h1>\n        <a id=\"newClaimLink\" href=\"{% url 'claim_new' %}\" class=\"btn btn-primary mb-3\">New Claim</a>\n        <table id=\"claimTable\" class=\"table\">\n            <thead>\n                <tr>\n                    <th>Subject</th>\n                    <th>Amount</th>\n                    <th>Description</th>\n                    <th>Submission Date</th>\n                    <th>Status</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for claim in claims %}\n                    <tr>\n                        <td>{{ claim.subject }}</td>\n                        <td>{{ claim.amount }}</td>\n                        <td>{{ claim.description }}</td>\n                        <td>{{ claim.submission_date }}</td>\n                        <td>{{ claim.status }}</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n{% endblock %}"}, {"file": "claim_new.html", "path": "templates/claim_new.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 id=\"newClaimTitle\" class=\"mb-4\">New Claim</h1>\n        <form id=\"newClaimForm\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"mb-3\">\n                <label for=\"claimSubject\" class=\"form-label\">Subject:</label>\n                {{ form.subject }}\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"claimAmount\" class=\"form-label\">Amount:</label>\n                {{ form.amount }}\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"claimDescription\" class=\"form-label\">Description:</label>\n                {{ form.description }}\n            </div>\n            <button id=\"submitClaimBtn\" type=\"submit\" class=\"btn btn-primary\">Submit Claim</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "admin_panel.html", "path": "templates/admin_panel.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 id=\"adminPanelTitle\" class=\"mb-4\">Admin Panel</h1>\n        <table id=\"adminClaimTable\" class=\"table\">\n            <thead>\n                <tr>\n                    <th>User</th>\n                    <th>Subject</th>\n                    <th>Amount</th>\n                    <th>Description</th>\n                    <th>Submission Date</th>\n                    <th>Status</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for claim in claims %}\n                    <tr>\n                        <td>{{ claim.user.username }}</td>\n                        <td>{{ claim.subject }}</td>\n                        <td>{{ claim.amount }}</td>\n                        <td>{{ claim.description }}</td>\n                        <td>{{ claim.submission_date }}</td>\n                        <td>{{ claim.status }}</td>\n                        <td>\n                            {% if claim.status == 'Pending' %}\n                                <a id=\"approveClaimBtn{{ claim.pk }}\" href=\"{% url 'claim_approve' claim.pk %}\" class=\"btn btn-success btn-sm\">Approve</a>\n                                <a id=\"rejectClaimBtn{{ claim.pk }}\" href=\"{% url 'claim_reject' claim.pk %}\" class=\"btn btn-danger btn-sm\">Reject</a>\n                            {% endif %}\n                        </td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n        <a id=\"budgetControlLink\" href=\"{% url 'budget_view' %}\" class=\"btn btn-secondary\">Budget Control</a>\n\n    </div>\n{% endblock %}"}, {"file": "budget.html", "path": "templates/budget.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 id=\"budgetControlTitle\" class=\"mb-4\">Budget Control</h1>\n\n        <h2 id=\"budgetOverviewTitle\">Budget Overview</h2>\n        <table id=\"budgetTable\" class=\"table\">\n            <thead>\n                <tr>\n                    <th>Category</th>\n                    <th>Budgeted Amount</th>\n                    <th>Spent Amount</th>\n                    <th>Remaining Amount</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for category, budgeted_amount in budget_data.items %}\n                    <tr>\n                        <td>{{ category }}</td>\n                        <td>{{ budgeted_amount }}</td>\n                        <td>{{ category_spending|get_item:category }}</td>\n                        <td>{{ budgeted_amount|sub:category_spending|get_item:category  }}</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n\n        <h2 id=\"newBudgetTitle\" class=\"mt-4\">Add/Update Budget</h2>\n        <form id=\"budgetForm\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"mb-3\">\n                <label for=\"budgetCategory\" class=\"form-label\">Category:</label>\n                {{ form.category }}\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"budgetAmount\" class=\"form-label\">Amount:</label>\n                {{ form.amount }}\n            </div>\n            <button id=\"submitBudgetBtn\" type=\"submit\" class=\"btn btn-primary\">Save Budget</button>\n        </form>\n    </div>\n\n    {% load mathfilters %}\n    {% load my_filters %}\n\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Accounting System{% endblock %}</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"container\">\n            <a id=\"homeLink\" class=\"navbar-brand\" href=\"#\">Accounting System</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav\">\n                    {% if user.is_authenticated %}\n                        <li class=\"nav-item\">\n                            <a id=\"claimsLink\" class=\"nav-link\" href=\"{% url 'claim_list' %}\">Claims</a>\n                        </li>\n                        {% if user.is_staff %}\n                            <li class=\"nav-item\">\n                                <a id=\"adminLink\" class=\"nav-link\" href=\"{% url 'admin_panel' %}\">Admin Panel</a>\n                            </li>\n                        {% endif %}\n                        <li class=\"nav-item\">\n                            <a id=\"logoutLink\" class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n                        </li>\n                    {% else %}\n                        <li class=\"nav-item\">\n                            <a id=\"loginLink\" class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n                        </li>\n                    {% endif %}\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    <div class=\"container mt-5\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>"}, {"file": "login.html", "path": "templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container\">\n    <h2 id=\"loginTitle\" class=\"mb-4\">Login</h2>\n    <form id=\"loginForm\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"loginBtn\" type=\"submit\" class=\"btn btn-primary\">Login</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "filters.py", "path": "claims/templatetags/my_filters.py", "code": "from django import template\n\nregister = template.Library()\n\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)\n\n@register.filter\ndef sub(value, arg):\n    return {k: value - arg.get(k, 0) for k, value in value.items()}"}, {"file": "__init__.py", "path": "claims/templatetags/__init__.py", "code": "from django import template\n\nregister = template.Library()"}, {"file": "static/css/style.css", "path": "static/css/style.css", "code": "/* Add your custom CSS styles here */\nbody {\n    font-family: sans-serif;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n}\n\n.table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 20px;\n}\n\n.table th, .table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n}\n\n.table th {\n    background-color: #f2f2f2;\n}\n"}], "13": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/crm_project/", "code": "default_app_config = 'crm_app.apps.CrmAppConfig'"}, {"file": "settings.py", "path": "/crm_project/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'crm_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'crm_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'crm_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Add this line"}, {"file": "urls.py", "path": "/crm_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('crm_app.urls')),\n]"}, {"file": "wsgi.py", "path": "/crm_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/crm_app/", "code": "default_app_config = 'crm_app.apps.CrmAppConfig'"}, {"file": "admin.py", "path": "/crm_app/", "code": "from django.contrib import admin\nfrom .models import Customer, Product, Purchase\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(Purchase)"}, {"file": "apps.py", "path": "/crm_app/", "code": "from django.apps import AppConfig\n\n\nclass CrmAppConfig(AppConfig):\n    name = 'crm_app'"}, {"file": "forms.py", "path": "/crm_app/", "code": "from django import forms\nfrom .models import Customer, Product, Purchase\n\nclass CustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = ['name', 'birthday', 'age', 'sex', 'company', 'phone_number']\n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = ['name', 'category', 'recommended_price']\n\nclass PurchaseForm(forms.ModelForm):\n    class Meta:\n        model = Purchase\n        fields = ['product', 'customer', 'quantity', 'amount', 'datetime']\n\nclass DateInput(forms.DateInput):\n    input_type = 'date'"}, {"file": "models.py", "path": "/crm_app/", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=200)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')])\n    company = models.CharField(max_length=200, blank=True)\n    phone_number = models.CharField(max_length=20, blank=True)\n    preferred_products = models.ManyToManyField('Product', blank=True, related_name='customers')\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=200)\n    category = models.CharField(max_length=200)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass Purchase(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} purchased {self.product.name}'"}, {"file": "urls.py", "path": "/crm_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.customer_list, name='customer_list'),\n    path('customer/new/', views.customer_new, name='customer_new'),\n    path('customer/<int:pk>/edit/', views.customer_edit, name='customer_edit'),\n    path('customer/<int:pk>/delete/', views.customer_delete, name='customer_delete'),\n\n    path('product/list/', views.product_list, name='product_list'),\n    path('product/new/', views.product_new, name='product_new'),\n    path('product/<int:pk>/edit/', views.product_edit, name='product_edit'),\n    path('product/<int:pk>/delete/', views.product_delete, name='product_delete'),\n\n    path('purchase/list/', views.purchase_list, name='purchase_list'),\n    path('purchase/new/', views.purchase_new, name='purchase_new'),\n    path('purchase/<int:pk>/edit/', views.purchase_edit, name='purchase_edit'),\n    path('purchase/<int:pk>/delete/', views.purchase_delete, name='purchase_delete'),\n\n    path('sales_analysis/', views.sales_analysis, name='sales_analysis'),\n]"}, {"file": "views.py", "path": "/crm_app/", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, Purchase\nfrom .forms import CustomerForm, ProductForm, PurchaseForm\nfrom django.db.models import Sum\n\n# Customer Views\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'crm_app/customer_list.html', {'customers': customers})\n\n\ndef customer_new(request):\n    if request.method == \"POST\":\n        form = CustomerForm(request.POST)\n        if form.is_valid():\n            customer = form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm()\n    return render(request, 'crm_app/customer_edit.html', {'form': form})\n\n\ndef customer_edit(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == \"POST\":\n        form = CustomerForm(request.POST, instance=customer)\n        if form.is_valid():\n            customer = form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm(instance=customer)\n    return render(request, 'crm_app/customer_edit.html', {'form': form})\n\n\ndef customer_delete(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    customer.delete()\n    return redirect('customer_list')\n\n# Product Views\ndef product_list(request):\n    products = Product.objects.all()\n    return render(request, 'crm_app/product_list.html', {'products': products})\n\n\ndef product_new(request):\n    if request.method == \"POST\":\n        form = ProductForm(request.POST)\n        if form.is_valid():\n            product = form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm()\n    return render(request, 'crm_app/product_edit.html', {'form': form})\n\n\ndef product_edit(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    if request.method == \"POST\":\n        form = ProductForm(request.POST, instance=product)\n        if form.is_valid():\n            product = form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm(instance=product)\n    return render(request, 'crm_app/product_edit.html', {'form': form})\n\n\ndef product_delete(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    product.delete()\n    return redirect('product_list')\n\n# Purchase Views\ndef purchase_list(request):\n    purchases = Purchase.objects.all()\n    return render(request, 'crm_app/purchase_list.html', {'purchases': purchases})\n\n\ndef purchase_new(request):\n    if request.method == \"POST\":\n        form = PurchaseForm(request.POST)\n        if form.is_valid():\n            purchase = form.save()\n            return redirect('purchase_list')\n    else:\n        form = PurchaseForm()\n    return render(request, 'crm_app/purchase_edit.html', {'form': form})\n\n\ndef purchase_edit(request, pk):\n    purchase = get_object_or_404(Purchase, pk=pk)\n    if request.method == \"POST\":\n        form = PurchaseForm(request.POST, instance=purchase)\n        if form.is_valid():\n            purchase = form.save()\n            return redirect('purchase_list')\n    else:\n        form = PurchaseForm(instance=purchase)\n    return render(request, 'crm_app/purchase_edit.html', {'form': form})\n\n\ndef purchase_delete(request, pk):\n    purchase = get_object_or_404(Purchase, pk=pk)\n    purchase.delete()\n    return redirect('purchase_list')\n\n# Sales Analysis View\ndef sales_analysis(request):\n    total_sales = Purchase.objects.aggregate(Sum('amount'))['amount__sum'] or 0\n    product_sales = Purchase.objects.values('product__name').annotate(total=Sum('amount')).order_by('-total')\n    customer_sales = Purchase.objects.values('customer__name').annotate(total=Sum('amount')).order_by('-total')\n\n    context = {\n        'total_sales': total_sales,\n        'product_sales': product_sales,\n        'customer_sales': customer_sales,\n    }\n    return render(request, 'crm_app/sales_analysis.html', context)"}, {"file": "customer_list.html", "path": "/templates/crm_app/", "code": "{% extends 'crm_app/base.html' %}\n\n{% block content %}\n    <h2 class=\"customer-list-title\" id=\"customerListTitle\">Customers</h2>\n    <a href=\"{% url 'customer_new' %}\" class=\"btn btn-primary add-customer-button\" id=\"addCustomerButton\">Add Customer</a>\n    <table class=\"table table-striped\" id=\"customerTable\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Birthday</th>\n                <th>Age</th>\n                <th>Sex</th>\n                <th>Company</th>\n                <th>Phone Number</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for customer in customers %}\n            <tr>\n                <td>{{ customer.name }}</td>\n                <td>{{ customer.birthday }}</td>\n                <td>{{ customer.age }}</td>\n                <td>{{ customer.sex }}</td>\n                <td>{{ customer.company }}</td>\n                <td>{{ customer.phone_number }}</td>\n                <td>\n                    <a href=\"{% url 'customer_edit' pk=customer.pk %}\" class=\"btn btn-sm btn-warning edit-customer-button\" id=\"editCustomerButton{{ customer.pk }}\">Edit</a>\n                    <a href=\"{% url 'customer_delete' pk=customer.pk %}\" class=\"btn btn-sm btn-danger delete-customer-button\" id=\"deleteCustomerButton{{ customer.pk }}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n{% endblock %}"}, {"file": "customer_edit.html", "path": "/templates/crm_app/", "code": "{% extends 'crm_app/base.html' %}\n\n{% block content %}\n    <h2 id=\"customerEditTitle\" class=\"customer-edit-title\">{% if form.instance.pk %}Edit Customer{% else %}New Customer{% endif %}</h2>\n    <form method=\"post\" id=\"customerForm\" class=\"customer-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary save-customer-button\" id=\"saveCustomerButton\">Save</button>\n        <a href=\"{% url 'customer_list' %}\" class=\"btn btn-secondary cancel-customer-button\" id=\"cancelCustomerButton\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "product_list.html", "path": "/templates/crm_app/", "code": "{% extends 'crm_app/base.html' %}\n\n{% block content %}\n    <h2 class=\"product-list-title\" id=\"productListTitle\">Products</h2>\n    <a href=\"{% url 'product_new' %}\" class=\"btn btn-primary add-product-button\" id=\"addProductButton\">Add Product</a>\n    <table class=\"table table-striped\" id=\"productTable\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Category</th>\n                <th>Recommended Price</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for product in products %}\n            <tr>\n                <td>{{ product.name }}</td>\n                <td>{{ product.category }}</td>\n                <td>{{ product.recommended_price }}</td>\n                <td>\n                    <a href=\"{% url 'product_edit' pk=product.pk %}\" class=\"btn btn-sm btn-warning edit-product-button\" id=\"editProductButton{{ product.pk }}\">Edit</a>\n                    <a href=\"{% url 'product_delete' pk=product.pk %}\" class=\"btn btn-sm btn-danger delete-product-button\" id=\"deleteProductButton{{ product.pk }}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n{% endblock %}"}, {"file": "product_edit.html", "path": "/templates/crm_app/", "code": "{% extends 'crm_app/base.html' %}\n\n{% block content %}\n    <h2 class=\"product-edit-title\" id=\"productEditTitle\">{% if form.instance.pk %}Edit Product{% else %}New Product{% endif %}</h2>\n    <form method=\"post\" id=\"productForm\" class=\"product-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary save-product-button\" id=\"saveProductButton\">Save</button>\n        <a href=\"{% url 'product_list' %}\" class=\"btn btn-secondary cancel-product-button\" id=\"cancelProductButton\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "purchase_list.html", "path": "/templates/crm_app/", "code": "{% extends 'crm_app/base.html' %}\n\n{% block content %}\n    <h2 class=\"purchase-list-title\" id=\"purchaseListTitle\">Purchases</h2>\n    <a href=\"{% url 'purchase_new' %}\" class=\"btn btn-primary add-purchase-button\" id=\"addPurchaseButton\">Add Purchase</a>\n    <table class=\"table table-striped\" id=\"purchaseTable\">\n        <thead>\n            <tr>\n                <th>Datetime</th>\n                <th>Product</th>\n                <th>Customer</th>\n                <th>Quantity</th>\n                <th>Amount</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for purchase in purchases %}\n            <tr>\n                <td>{{ purchase.datetime }}</td>\n                <td>{{ purchase.product }}</td>\n                <td>{{ purchase.customer }}</td>\n                <td>{{ purchase.quantity }}</td>\n                <td>{{ purchase.amount }}</td>\n                <td>\n                    <a href=\"{% url 'purchase_edit' pk=purchase.pk %}\" class=\"btn btn-sm btn-warning edit-purchase-button\" id=\"editPurchaseButton{{ purchase.pk }}\">Edit</a>\n                    <a href=\"{% url 'purchase_delete' pk=purchase.pk %}\" class=\"btn btn-sm btn-danger delete-purchase-button\" id=\"deletePurchaseButton{{ purchase.pk }}\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n{% endblock %}"}, {"file": "purchase_edit.html", "path": "/templates/crm_app/", "code": "{% extends 'crm_app/base.html' %}\n\n{% block content %}\n    <h2 class=\"purchase-edit-title\" id=\"purchaseEditTitle\">{% if form.instance.pk %}Edit Purchase{% else %}New Purchase{% endif %}</h2>\n    <form method=\"post\" id=\"purchaseForm\" class=\"purchase-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary save-purchase-button\" id=\"savePurchaseButton\">Save</button>\n        <a href=\"{% url 'purchase_list' %}\" class=\"btn btn-secondary cancel-purchase-button\" id=\"cancelPurchaseButton\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "sales_analysis.html", "path": "/templates/crm_app/", "code": "{% extends 'crm_app/base.html' %}\n\n{% block content %}\n    <h2 class=\"sales-analysis-title\" id=\"salesAnalysisTitle\">Sales Analysis</h2>\n\n    <h3 id=\"totalSalesTitle\" class=\"total-sales-title\">Total Sales: ${{ total_sales }}</h3>\n\n    <h4 id=\"productSalesTitle\" class=\"product-sales-title\">Sales by Product</h4>\n    <table class=\"table table-striped\" id=\"productSalesTable\">\n        <thead>\n            <tr>\n                <th>Product</th>\n                <th>Total Sales</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for sale in product_sales %}\n                <tr>\n                    <td>{{ sale.product__name }}</td>\n                    <td>${{ sale.total }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\n    <h4 id=\"customerSalesTitle\" class=\"customer-sales-title\">Sales by Customer</h4>\n    <table class=\"table table-striped\" id=\"customerSalesTable\">\n        <thead>\n            <tr>\n                <th>Customer</th>\n                <th>Total Sales</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for sale in customer_sales %}\n                <tr>\n                    <td>{{ sale.customer__name }}</td>\n                    <td>${{ sale.total }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\n{% endblock %}"}, {"file": "base.html", "path": "/templates/crm_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>CRM System</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n        }\n        header {\n            background: #505050;\n            color: white;\n            padding-top: 30px;\n            min-height: 70px;\n            border-bottom: #bbb 1px solid;\n        }\n        header a {\n            color: #ffffff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-size: 16px;\n        }\n\n        header ul {\n            padding: 0;\n            margin: 0;\n        }\n\n        header li {\n            float: left;\n            display: inline;\n            padding: 0 20px 0 20px;\n        }\n\n        header #branding {\n            float: left;\n        }\n\n        header #branding h1 {\n            margin: 0;\n        }\n\n        header nav {\n            float: right;\n            margin-top: 10px;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        th, td {\n            padding: 8px;\n            text-align: left;\n            border-bottom: 1px solid #ddd;\n        }\n\n        th {\n            background-color: #f2f2f2;\n        }\n        .btn {\n            margin: 5px;\n        }\n    </style>\n</head>\n<body>\n    <header>\n        <div class=\"container\">\n            <div id=\"branding\">\n                <h1><span class=\"highlight\">CRM</span> System</h1>\n            </div>\n            <nav>\n                <ul>\n                    <li><a href=\"{% url 'customer_list' %}\" id=\"customerListLink\">Customers</a></li>\n                    <li><a href=\"{% url 'product_list' %}\" id=\"productListLink\">Products</a></li>\n                    <li><a href=\"{% url 'purchase_list' %}\" id=\"purchaseListLink\">Purchases</a></li>\n                    <li><a href=\"{% url 'sales_analysis' %}\" id=\"salesAnalysisLink\">Sales Analysis</a></li>\n                </ul>\n            </nav>\n        </div>\n    </header>\n\n    <div class=\"container\">\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "__init__.py", "path": "/static/", "code": "# Keep this file empty"}], "14": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello.urls')),  # Include the urls from the 'hello' app\n]"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myproject/hello/__init__.py", "code": ""}, {"file": "apps.py", "path": "myproject/hello/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloConfig(AppConfig):\n    name = 'hello'"}, {"file": "models.py", "path": "myproject/hello/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "views.py", "path": "myproject/hello/views.py", "code": "from django.shortcuts import render\n\n\ndef hello_world(request):\n    return render(request, 'hello/hello.html')"}, {"file": "urls.py", "path": "myproject/hello/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "hello.html", "path": "myproject/hello/templates/hello/hello.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"greeting\" class=\"greeting-text\">Hello, World!</h1>\n    <p id=\"description\" class=\"description-text\">This is a simple Hello World page.</p>\n</body>\n</html>"}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jump_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "jump_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "jump_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'jump_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'jump_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'jump_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "jump_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('jump_app.urls')),\n]"}, {"file": "wsgi.py", "path": "jump_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jump_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "jump_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "jump_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "jump_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass JumpAppConfig(AppConfig):\n    name = 'jump_app'"}, {"file": "models.py", "path": "jump_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "jump_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "jump_app/views.py", "code": "from django.shortcuts import render, redirect\n\ndef index(request):\n    return render(request, 'jump_app/index.html')\n\ndef helloworld(request):\n    return render(request, 'jump_app/helloworld.html')"}, {"file": "index.html", "path": "jump_app/templates/jump_app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Jump to Hello World</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <button id=\"jumpButton\" class=\"jump-button\" onclick=\"location.href='/helloworld/';\">Jump to Hello World</button>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "jump_app/templates/jump_app/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <div id=\"helloContainer\" class=\"hello-container\">\n        <h1 id=\"helloText\" class=\"hello-text\">Hello, World!</h1>\n    </div>\n</body>\n</html>"}], "16": [{"file": "create_subject_table.bat", "path": "create_subject_table.bat", "code": "@echo off\n\nREM Check if Python is installed\nwhere python >nul 2>&1\nif %errorlevel% neq 0 (\n  echo Python is not installed. Please install Python and the openpyxl library.\n  pause\n  exit /b 1\n)\n\nREM Run the Python script\npython create_subject_table.py\n\necho Subject table created in output_subjects.xlsx\n\npause"}, {"file": "create_subject_table.py", "path": "create_subject_table.py", "code": "import pandas as pd\n\ndef create_subject_table(input_file, output_file):\n    \"\"\"Reads subject list from Excel, converts it to a 2D subject table,\n    and outputs it to another Excel file.\n    \"\"\"\n    try:\n        df = pd.read_excel(input_file)\n    except FileNotFoundError:\n        print(f\"Error: Input file '{input_file}' not found.\")\n        return\n\n    # Validate header\n    expected_columns = [\"#\", \"Name\", \"Weekday\", \"Time\"]\n    if not all(col in df.columns for col in expected_columns):\n        print(f\"Error: Input file must have columns: {expected_columns}\")\n        return\n\n    # Validate Time values\n    valid_times = [\"First period\", \"Second period\", \"Third period\", \"Fourth period\"]\n    if not all(time in valid_times for time in df[\"Time\"].unique()):\n        print(f\"Error: Time column must have values: {valid_times}\")\n        return\n\n    # Create a pivot table\n    try:\n        pivot_table = df.pivot_table(index='Weekday', columns='Time', values='Name', aggfunc='first')\n    except Exception as e:\n        print(f\"Error creating pivot table: {e}\")\n        return\n    # Save the pivot table to a new Excel file\n    try:\n        pivot_table.to_excel(output_file, index=True)\n        print(f\"Successfully created {output_file}\")\n    except Exception as e:\n        print(f\"Error saving to Excel: {e}\")\n        return\n\nif __name__ == \"__main__\":\n    input_excel_file = \"Spring Semester Subjects.xlsx\"\n    output_excel_file = \"output_subjects.xlsx\"\n    create_subject_table(input_excel_file, output_excel_file)"}, {"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": "Binary file content - Represents an Excel file.  This cannot be represented as text.  This file should contain data formatted according to the description in the prompt.  It is structured as a table with columns: '#', 'Name', 'Weekday', and 'Time'. The 'Time' column contains only the values 'First period', 'Second period', 'Third period', and 'Fourth period'. Here is some example data:\n\n| # | Name        | Weekday   | Time          |\n|---|-------------|-----------|---------------|\n| 1 | Math 101    | Monday    | First period  |\n| 2 | English 101 | Monday    | Second period |\n| 3 | History 101 | Tuesday   | Third period  |\n| 4 | Science 101 | Wednesday | Fourth period |\n| 5 | Art 101     | Friday    | First period  |\n| 6 | Music 101   | Thursday  | Second period |\n| 7 | PE 101      | Monday    | Third period  |\n| 8 | CS 101      | Tuesday   | Fourth period |\n\n  The program expects this file to exist in the same directory, and to contain some subjects."}], "17": [{"file": "gamedata.xlsx", "path": "./gamedata.xlsx", "code": "Binary Excel File - Place your actual game data here.  The first column should be 'result'. Other columns are independent variables. Make sure 'result' contains only 0 or 1."}, {"file": "batch_process.bat", "path": "./batch_process.bat", "code": "@echo off\nREM Check if Python is installed\nwhere python >nul 2>&1\nif %errorlevel% neq 0 (\n  echo Python is not installed. Please install Python and add it to your PATH.\n  pause\n  exit /b 1\n)\n\nREM Install required packages\npython -m pip install --upgrade pandas openpyxl scikit-learn\n\nREM Run the Python script\npython logistic_model.py\n\necho Logistic model created and summary saved to Logistic.xlsx\npause"}, {"file": "logistic_model.py", "path": "./logistic_model.py", "code": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report, confusion_matrix\nimport numpy as np\n\n# Load the dataset\ntry:\n    df = pd.read_excel('Gamedata.xlsx')\nexcept FileNotFoundError:\n    print(\"Error: Gamedata.xlsx not found.  Make sure the file is in the same directory as the script.\")\n    exit()\n\n# Check if 'result' column exists\nif 'result' not in df.columns:\n    print(\"Error: 'result' column not found in Gamedata.xlsx.\")\n    exit()\n\n# One-period lag for the 'result' column\ndf['result_lagged'] = df['result'].shift(1)\ndf = df.dropna()\n\n\n# Define independent and dependent variables\nX = df.drop(['result', 'result_lagged'], axis=1)\ny = df['result']\n\n# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Create and train the Logistic Regression model\nmodel = LogisticRegression(solver='liblinear') # Specify solver to avoid warnings\nmodel.fit(X_train, y_train)\n\n# Make predictions\ny_pred = model.predict(X_test)\n\n# Evaluate the model\nclassification_rep = classification_report(y_test, y_pred, output_dict=True)\nconfusion_mat = confusion_matrix(y_test, y_pred)\n\n# Prepare data for Excel output\noutput_data = {\n    'Classification Report': [classification_rep],\n    'Confusion Matrix': [confusion_mat.tolist()],\n    'Model Intercept': [model.intercept_.tolist()],  # Use tolist() for proper Excel serialization\n    'Model Coefficients': [model.coef_.tolist()] # Use tolist() for proper Excel serialization\n}\n\noutput_df = pd.DataFrame(output_data)\n\n# Save the results to an Excel file\ntry:\n    output_df.to_excel('Logistic.xlsx', index=False)\n    print(\"Logistic model summary saved to Logistic.xlsx\")\nexcept Exception as e:\n    print(f\"Error saving to Excel: {e}\")"}], "19": [{"file": "death_histogram.bat", "path": "death_histogram.bat", "code": "@echo off\nREM Requires: CSVGet.exe (available online, e.g., from https://www.softpedia.com/get/Programming/File-Editors/CSVGet.shtml)\nREM CSVGet.exe must be in the same directory as this batch file or in your system's PATH.\nREM Dataset filename: Deathlist.csv\nREM Date field name: \"Date of death\"\n\nsetlocal enabledelayedexpansion\n\nREM Define the input CSV file and output file\nset input_file=Deathlist.csv\nset output_file=weekly_deaths.txt\n\nREM Clear the output file if it exists\nif exist \"%output_file%\" del \"%output_file%\"\n\nREM Function to calculate the week number\n:calculate_week_number\n  set date=%1\n  for /f \"tokens=1-3 delims=/-\" %%a in (\"!date!\") do (\n    set year=%%c\n    set month=%%a\n    set day=%%b\n  )\n  \n  powershell -Command \"[Globalization.CultureInfo]::InvariantCulture.Calendar.GetWeekOfYear([datetime] \\\"!year!-!month!-!day!\\\", [Globalization.DayOfWeek]::Monday, [System.Globalization.CalendarWeekRule]::FirstFourDayWeek)\" > temp_week.txt\n  for /f \"delims=\" %%i in (temp_week.txt) do set week=%%i\n  del temp_week.txt\n  exit /b %week%\n\nREM Extract all 'Date of death' values using CSVGet and store in a temporary file.\nCSVGet -f \"%input_file%\" -c \"Date of death\" -o temp_dates.txt\n\nREM Read the dates from the temporary file and process them.\nfor /f \"skip=1 delims=\" %%a in (temp_dates.txt) do (\n  REM Calculate the week number for the current date.\n  call :calculate_week_number \"%%a\"\n  set week_number=!week!\n\n  REM Increment the count for this week.\n  if not defined weekly_deaths[!week_number!] (\n    set weekly_deaths[!week_number!]=1\n  ) else (\n    set /a weekly_deaths[!week_number!]+=1\n  )\n)\n\nREM Delete the temporary file.\ndel temp_dates.txt\n\nREM Output the weekly death counts to the output file.\necho Weekly Death Counts > \"%output_file%\"\nfor /f \"tokens=2 delims==]\" %%a in ('set weekly_deaths[') do (\n  echo Week %%a: !weekly_deaths[%%a]! >> \"%output_file%\"\n)\n\necho Processing complete. Weekly death counts saved to %output_file%\npause\nendlocal\n"}, {"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death,Other Data\n1/1/2024,Some other data\n1/2/2024,Some other data\n1/3/2024,Some other data\n1/7/2024,Some other data\n1/8/2024,Some other data\n1/10/2024,Some other data\n1/14/2024,Some other data\n1/15/2024,Some other data\n1/17/2024,Some other data\n1/21/2024,Some other data\n1/22/2024,Some other data\n1/24/2024,Some other data\n1/28/2024,Some other data\n1/29/2024,Some other data\n1/31/2024,Some other data\n2/4/2024,Some other data\n2/5/2024,Some other data\n2/7/2024,Some other data\n2/11/2024,Some other data\n2/12/2024,Some other data\n2/14/2024,Some other data\n2/18/2024,Some other data\n2/19/2024,Some other data\n2/21/2024,Some other data\n2/25/2024,Some other data\n2/26/2024,Some other data\n2/28/2024,Some other data\n"}]}