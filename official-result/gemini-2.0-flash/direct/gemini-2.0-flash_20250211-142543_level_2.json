{"2": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/currency_converter/", "code": "default_app_config = 'currency_converter.apps.CurrencyConverterConfig'"}, {"file": "settings.py", "path": "/currency_converter/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "/currency_converter/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "wsgi.py", "path": "/currency_converter/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/converter/", "code": "default_app_config = 'converter.apps.ConverterConfig'"}, {"file": "admin.py", "path": "/converter/", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "/converter/", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    name = 'converter'"}, {"file": "models.py", "path": "/converter/", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "urls.py", "path": "/converter/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('currency_details/<str:currency_code>/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings, name='settings'),\n]"}, {"file": "views.py", "path": "/converter/", "code": "from django.shortcuts import render\n\n# Placeholder data (replace with actual data fetching/APIs)\nexchange_rates = {\n    'USD': 1.0,\n    'EUR': 0.85,\n    'GBP': 0.75,\n    'JPY': 110.0\n}\n\ndef home(request):\n    if request.method == 'POST':\n        base_currency = request.POST.get('base_currency')\n        target_currency = request.POST.get('target_currency')\n        amount = float(request.POST.get('amount'))\n\n        if base_currency in exchange_rates and target_currency in exchange_rates:\n            exchange_rate = exchange_rates[target_currency] / exchange_rates[base_currency]\n            converted_amount = amount * exchange_rate\n            return render(request, 'home.html', {\n                'base_currency': base_currency,\n                'target_currency': target_currency,\n                'amount': amount,\n                'converted_amount': converted_amount,\n                'exchange_rate': exchange_rate,\n                'currencies': exchange_rates.keys(),\n            })\n        else:\n            return render(request, 'home.html', {'error': 'Invalid currency selected.', 'currencies': exchange_rates.keys()})\n    else:\n        return render(request, 'home.html', {'currencies': exchange_rates.keys()})\n\n\ndef currency_details(request, currency_code):\n    # Replace with actual data retrieval\n    currency_info = {\n        'USD': {'name': 'US Dollar', 'symbol': '$'},\n        'EUR': {'name': 'Euro', 'symbol': '\u20ac'},\n        'GBP': {'name': 'British Pound', 'symbol': '\u00a3'},\n        'JPY': {'name': 'Japanese Yen', 'symbol': '\u00a5'},\n    }.get(currency_code)\n\n    historical_rates = {\n        'USD': [1.0, 1.01, 0.99],\n        'EUR': [0.85, 0.86, 0.84],\n        'GBP': [0.75, 0.76, 0.74],\n        'JPY': [110.0, 110.5, 109.5]\n    }.get(currency_code)\n\n    if currency_info:\n        return render(request, 'currency_details.html', {'currency_code': currency_code, 'currency_info': currency_info, 'historical_rates': historical_rates})\n    else:\n        return render(request, 'currency_details.html', {'error': 'Currency details not found.'})\n\n\ndef settings(request):\n    # Replace with actual settings implementation\n    if request.method == 'POST':\n        default_base_currency = request.POST.get('default_base_currency')\n        default_target_currency = request.POST.get('default_target_currency')\n        update_frequency = request.POST.get('update_frequency')\n\n        #Process settings\n\n        return render(request, 'settings.html', {'message': 'Settings saved!'})\n    else:\n        return render(request, 'settings.html')"}, {"file": "home.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <style>\n        .container {\n            width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            font-weight: bold;\n        }\n        input[type=\"text\"], select {\n            width: 100%;\n            padding: 8px;\n            margin-top: 5px;\n            border: 1px solid #ccc;\n            box-sizing: border-box;\n        }\n        .button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            cursor: pointer;\n        }\n        .result {\n            margin-top: 20px;\n            font-weight: bold;\n        }\n        .error {\n            color: red;\n        }\n        a {\n            text-decoration: none;\n            color: blue;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Currency Converter</h1>\n        <form id=\"currency_form\" method=\"post\">\n            {% csrf_token %}\n\n            <div id=\"base_currency_group\" class=\"form-group\">\n                <label id=\"base_currency_label\" for=\"base_currency\">Base Currency:</label>\n                <select id=\"base_currency\" class=\"form-control\" name=\"base_currency\" required>\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\">{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div id=\"target_currency_group\" class=\"form-group\">\n                <label id=\"target_currency_label\" for=\"target_currency\">Target Currency:</label>\n                <select id=\"target_currency\" class=\"form-control\" name=\"target_currency\" required>\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\">{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div id=\"amount_group\" class=\"form-group\">\n                <label id=\"amount_label\" for=\"amount\">Amount:</label>\n                <input type=\"text\" id=\"amount\" class=\"form-control\" name=\"amount\" required>\n            </div>\n\n            <button id=\"convert_button\" class=\"button\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n            <div id=\"result\" class=\"result\">\n                {{ amount }} {{ base_currency }} = {{ converted_amount }} {{ target_currency }}\n                <br>\n                Exchange Rate: {{ exchange_rate }}\n            </div>\n        {% endif %}\n\n        {% if error %}\n            <div id=\"error_message\" class=\"error\">{{ error }}</div>\n        {% endif %}\n\n        <p><a id=\"currency_details_link\" href=\"{% url 'currency_details' 'USD' %}\">Currency Details (USD)</a></p>\n        <p><a id=\"settings_link\" href=\"{% url 'settings' %}\">Settings</a></p>\n    </div>\n</body>\n</html>"}, {"file": "currency_details.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Details</title>\n    <style>\n        .container {\n            width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .info {\n            margin-bottom: 15px;\n        }\n        h2 {\n            margin-top: 0;\n        }\n        .historical-rates {\n            margin-top: 20px;\n        }\n        .error {\n            color: red;\n        }\n        a {\n            text-decoration: none;\n            color: blue;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Currency Details</h1>\n\n        {% if currency_info %}\n            <div id=\"currency_info\" class=\"info\">\n                <h2 id=\"currency_name\" class=\"currency-name\">{{ currency_info.name }} ({{ currency_code }})</h2>\n                <p id=\"currency_symbol\" class=\"currency-symbol\">Symbol: {{ currency_info.symbol }}</p>\n            </div>\n\n            <div id=\"historical_rates\" class=\"historical-rates\">\n                <h2 id=\"historical_rates_title\" class=\"historical-rates-title\">Historical Exchange Rates</h2>\n                <ul id=\"historical_rates_list\" class=\"historical-rates-list\">\n                    {% for rate in historical_rates %}\n                        <li id=\"historical_rate_{{ forloop.counter }}\" class=\"historical-rate\">{{ rate }}</li>\n                    {% endfor %}\n                </ul>\n            </div>\n        {% else %}\n            <div id=\"error_message\" class=\"error\">{{ error }}</div>\n        {% endif %}\n\n        <p><a id=\"home_link\" href=\"{% url 'home' %}\">Home</a></p>\n        <p><a id=\"settings_link\" href=\"{% url 'settings' %}\">Settings</a></p>\n    </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Settings</title>\n    <style>\n        .container {\n            width: 500px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            font-weight: bold;\n        }\n        select {\n            width: 100%;\n            padding: 8px;\n            margin-top: 5px;\n            border: 1px solid #ccc;\n            box-sizing: border-box;\n        }\n        .button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            cursor: pointer;\n        }\n        .message {\n            margin-top: 20px;\n            color: green;\n        }\n        a {\n            text-decoration: none;\n            color: blue;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Settings</h1>\n\n        <form id=\"settings_form\" method=\"post\">\n            {% csrf_token %}\n\n            <div id=\"default_base_currency_group\" class=\"form-group\">\n                <label id=\"default_base_currency_label\" for=\"default_base_currency\">Default Base Currency:</label>\n                <select id=\"default_base_currency\" class=\"form-control\" name=\"default_base_currency\">\n                    <option value=\"USD\">USD</option>\n                    <option value=\"EUR\">EUR</option>\n                    <option value=\"GBP\">GBP</option>\n                    <option value=\"JPY\">JPY</option>\n                </select>\n            </div>\n\n            <div id=\"default_target_currency_group\" class=\"form-group\">\n                <label id=\"default_target_currency_label\" for=\"default_target_currency\">Default Target Currency:</label>\n                <select id=\"default_target_currency\" class=\"form-control\" name=\"default_target_currency\">\n                    <option value=\"USD\">USD</option>\n                    <option value=\"EUR\">EUR</option>\n                    <option value=\"GBP\">GBP</option>\n                    <option value=\"JPY\">JPY</option>\n                </select>\n            </div>\n\n            <div id=\"update_frequency_group\" class=\"form-group\">\n                <label id=\"update_frequency_label\" for=\"update_frequency\">Update Frequency:</label>\n                <select id=\"update_frequency\" class=\"form-control\" name=\"update_frequency\">\n                    <option value=\"daily\">Daily</option>\n                    <option value=\"weekly\">Weekly</option>\n                    <option value=\"monthly\">Monthly</option>\n                </select>\n            </div>\n\n            <button id=\"save_button\" class=\"button\" type=\"submit\">Save</button>\n        </form>\n\n        {% if message %}\n            <div id=\"success_message\" class=\"message\">{{ message }}</div>\n        {% endif %}\n\n        <p><a id=\"home_link\" href=\"{% url 'home' %}\">Home</a></p>\n        <p><a id=\"currency_details_link\" href=\"{% url 'currency_details' 'USD' %}\">Currency Details (USD)</a></p>\n    </div>\n</body>\n</html>"}], "3": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "password_generator_project/settings.py", "path": "password_generator_project/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "password_generator_project/urls.py", "path": "password_generator_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator_app.urls')),\n]"}, {"file": "password_generator_project/wsgi.py", "path": "password_generator_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "password_generator_app/apps.py", "path": "password_generator_app/", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorAppConfig(AppConfig):\n    name = 'password_generator_app'"}, {"file": "password_generator_app/models.py", "path": "password_generator_app/", "code": "from django.db import models\n\n# Create your models here.  (None needed for this project)"}, {"file": "password_generator_app/views.py", "path": "password_generator_app/", "code": "from django.shortcuts import render\nimport random\nimport string\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\n\ndef generate_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters  # Default to letters if nothing is selected\n\n    generated_password = ''.join(random.choice(characters) for i in range(length))\n\n    return render(request, 'generated_password.html', {'password': generated_password})\n\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "password_generator_app/urls.py", "path": "password_generator_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generate_password/', views.generate_password, name='generate_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "templates/home.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator - Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Password Generator!</h1>\n        <p id=\"home-description\" class=\"description\">Generate strong and secure passwords.</p>\n        <a id=\"generator-button\" class=\"button\" href=\"{% url 'password_options' %}\">Generate Password</a>\n        <a id=\"about-button\" class=\"button\" href=\"{% url 'about' %}\">About</a>\n    </div>\n</body>\n</html>"}, {"file": "templates/password_options.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator - Options</title>\n</head>\n<body>\n    <div id=\"options-container\" class=\"container\">\n        <h1 id=\"options-title\" class=\"title\">Password Options</h1>\n        <form id=\"options-form\" action=\"{% url 'generate_password' %}\" method=\"get\">\n            <div id=\"length-group\" class=\"form-group\">\n                <label id=\"length-label\" for=\"length-input\">Password Length:</label>\n                <input type=\"number\" id=\"length-input\" name=\"length\" value=\"12\" min=\"6\" max=\"30\">\n            </div>\n            <div id=\"uppercase-group\" class=\"form-group\">\n                <input type=\"checkbox\" id=\"uppercase-checkbox\" name=\"uppercase\">\n                <label id=\"uppercase-label\" for=\"uppercase-checkbox\">Include Uppercase</label>\n            </div>\n            <div id=\"lowercase-group\" class=\"form-group\">\n                <input type=\"checkbox\" id=\"lowercase-checkbox\" name=\"lowercase\" checked>\n                <label id=\"lowercase-label\" for=\"lowercase-checkbox\">Include Lowercase</label>\n            </div>\n            <div id=\"numbers-group\" class=\"form-group\">\n                <input type=\"checkbox\" id=\"numbers-checkbox\" name=\"numbers\">\n                <label id=\"numbers-label\" for=\"numbers-checkbox\">Include Numbers</label>\n            </div>\n            <div id=\"symbols-group\" class=\"form-group\">\n                <input type=\"checkbox\" id=\"symbols-checkbox\" name=\"symbols\">\n                <label id=\"symbols-label\" for=\"symbols-checkbox\">Include Symbols</label>\n            </div>\n            <button id=\"generate-button\" class=\"button\" type=\"submit\">Generate Password</button>\n        </form>\n        <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "templates/generated_password.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator - Generated Password</title>\n</head>\n<body>\n    <div id=\"generated-container\" class=\"container\">\n        <h1 id=\"generated-title\" class=\"title\">Generated Password</h1>\n        <div id=\"password-display\" class=\"password-display\">{{ password }}</div>\n        <button id=\"copy-button\" class=\"button\" onclick=\"copyPassword()\">Copy to Clipboard</button>\n        <a id=\"options-link\" class=\"link\" href=\"{% url 'password_options' %}\">Options</a>\n        <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Home</a>\n    </div>\n\n    <script>\n        function copyPassword() {\n            var passwordText = document.getElementById(\"password-display\").innerText;\n            navigator.clipboard.writeText(passwordText).then(function() {\n                alert(\"Password copied to clipboard!\");\n            }, function(err) {\n                console.error('Could not copy password: ', err);\n                alert(\"Could not copy password.  Please copy manually.\");\n            });\n        }\n    </script>\n</body>\n</html>"}, {"file": "templates/about.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator - About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Password Generator</h1>\n        <p id=\"about-description\" class=\"description\">\n            This password generator helps you create strong, random passwords.  You can customize the length and include uppercase letters, lowercase letters, numbers, and symbols.\n        </p>\n        <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "static/style.css", "path": "static/", "code": "/* Basic styling - can be expanded */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\n.container {\n    max-width: 600px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n}\n\n.title {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.description {\n    margin-bottom: 20px;\n}\n\n.form-group {\n    margin-bottom: 10px;\n}\n\n.button {\n    background-color: #4CAF50;\n    border: none;\n    color: white;\n    padding: 10px 20px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin: 4px 2px;\n    cursor: pointer;\n}\n\n.link {\n    display: block;\n    margin-top: 10px;\n    text-decoration: none;\n    color: blue;\n}"}, {"file": "password_generator_app/__init__.py", "path": "password_generator_app/", "code": ""}, {"file": "password_generator_project/__init__.py", "path": "password_generator_project/", "code": ""}], "4": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcodegenerator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "qrcodegenerator/settings.py", "path": "qrcodegenerator/", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcodegenerator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcodegenerator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "qrcodegenerator/urls.py", "path": "qrcodegenerator/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "qrcodegenerator/wsgi.py", "path": "qrcodegenerator/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcodegenerator.settings')\n\napplication = get_wsgi_application()"}, {"file": "qr_app/apps.py", "path": "qr_app/", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "qr_app/urls.py", "path": "qr_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('qr_generator/', views.qr_generator, name='qr_generator'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "qr_app/views.py", "path": "qr_app/", "code": "import qrcode\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom io import BytesIO\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef qr_generator(request):\n    if request.method == 'POST':\n        text = request.POST.get('text')\n        box_size = int(request.POST.get('box_size', 10))\n        error_correction = request.POST.get('error_correction', 'medium')\n        border_size = int(request.POST.get('border_size', 4))\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        error_correction_levels = {\n            'small': qrcode.ERROR_CORRECT_L,\n            'medium': qrcode.ERROR_CORRECT_M,\n            'large': qrcode.ERROR_CORRECT_H,\n        }\n\n        error_correction_level = error_correction_levels.get(error_correction, qrcode.ERROR_CORRECT_M)\n\n        try:\n            qr = qrcode.QRCode(\n                version=1,  # You can adjust this if needed\n                error_correction=error_correction_level,\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n            buffer = BytesIO()\n            img.save(buffer, format='PNG')\n            img_data = buffer.getvalue()\n\n            return render(request, 'qr_generator.html', {'qr_image': img_data.hex(),\n                                                          'text': text,\n                                                          'box_size':box_size,\n                                                          'error_correction':error_correction,\n                                                          'border_size':border_size,\n                                                          'fill_color':fill_color,\n                                                          'back_color':back_color\n                                                          })\n        except Exception as e:\n            return render(request, 'qr_generator.html', {'error': str(e)})\n    else:\n        return render(request, 'qr_generator.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "templates/home.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .button {\n            background-color: #4CAF50;\n            border: none;\n            color: white;\n            padding: 15px 32px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 16px;\n            margin: 4px 2px;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"home-title\">Welcome to the QR Code Generator!</h1>\n        <p id=\"home-introduction\" class=\"home-introduction\">Simple, welcoming text explaining what the website does.</p>\n        <a id=\"qr-generator-button\" class=\"button\" href=\"/qr_generator/\">Generate QR Code</a>\n    </div>\n</body>\n</html>"}, {"file": "templates/qr_generator.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"text\"], select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        .button {\n            background-color: #4CAF50;\n            border: none;\n            color: white;\n            padding: 15px 32px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 16px;\n            margin: 4px 2px;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n        .qr-code-area {\n            margin-top: 20px;\n        }\n        .error-message {\n            color: red;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"qr-generator-container\" class=\"container\">\n        <h1 id=\"qr-generator-title\" class=\"qr-generator-title\">QR Code Generator</h1>\n\n        <form id=\"qr-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"text-input-group\" class=\"form-group\">\n                <label id=\"text-label\" for=\"text\">Text or URL:</label>\n                <input type=\"text\" id=\"text\" name=\"text\" required>\n            </div>\n            <div id=\"box-size-input-group\" class=\"form-group\">\n                <label id=\"box-size-label\" for=\"box_size\">Box Size (Maximum 128):</label>\n                <input type=\"number\" id=\"box_size\" name=\"box_size\" value=\"10\" min=\"1\" max=\"128\">\n            </div>\n            <div id=\"border-size-input-group\" class=\"form-group\">\n                <label id=\"border-size-label\" for=\"border_size\">Border Size (Maximum 10):</label>\n                <input type=\"number\" id=\"border_size\" name=\"border_size\" value=\"4\" min=\"0\" max=\"10\">\n            </div>\n            <div id=\"error-correction-group\" class=\"form-group\">\n                <label id=\"error-correction-label\" for=\"error_correction\">Error Correction Rate:</label>\n                <select id=\"error_correction\" name=\"error_correction\">\n                    <option value=\"small\">Small</option>\n                    <option value=\"medium\" selected>Medium</option>\n                    <option value=\"large\">Large</option>\n                </select>\n            </div>\n            <div id=\"fill-color-group\" class=\"form-group\">\n                <label id=\"fill-color-label\" for=\"fill_color\">Fill Color:</label>\n                <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n            </div>\n            <div id=\"back-color-group\" class=\"form-group\">\n                <label id=\"back-color-label\" for=\"back_color\">Back Color:</label>\n                <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#FFFFFF\">\n            </div>\n            <button id=\"generate-button\" class=\"button\" type=\"submit\">Generate QR Code</button>\n        </form>\n\n        {% if error %}\n            <p id=\"error-message\" class=\"error-message\">{{ error }}</p>\n        {% endif %}\n\n        {% if qr_image %}\n            <div id=\"qr-code-area\" class=\"qr-code-area\">\n                <h2 id=\"qr-code-heading\" class=\"qr-code-heading\">Generated QR Code:</h2>\n                <img id=\"qr-code-image\" src=\"data:image/png;base64,{{ qr_image }}\" alt=\"Generated QR Code\">\n                <a id=\"download-button\" class=\"button\" href=\"data:image/png;base64,{{ qr_image }}\" download=\"qr_code.png\">Download QR Code</a>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "templates/about.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            text-align: left;\n            margin: 50px;\n        }\n        .container {\n            width: 80%;\n            margin: 0 auto;\n        }\n        h1 {\n            text-align: center;\n        }\n        .section {\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"about-title\">About This Website</h1>\n\n        <section id=\"description-section\" class=\"section\">\n            <h2 id=\"description-heading\" class=\"description-heading\">Description</h2>\n            <p id=\"description-text\" class=\"description-text\">This website provides a simple way to generate QR codes.  You can input text or a URL, customize the QR code's appearance, and download it for your use.</p>\n        </section>\n\n        <section id=\"common-questions-section\" class=\"section\">\n            <h2 id=\"common-questions-heading\" class=\"common-questions-heading\">Common Questions</h2>\n            <ul id=\"common-questions-list\" class=\"common-questions-list\">\n                <li>\n                    <strong id=\"question-1\" class=\"question\">How do I generate a QR code?</strong>\n                    <p id=\"answer-1\" class=\"answer\">Go to the QR Code Generator page, enter your text or URL, customize the options, and click 'Generate QR Code'.</p>\n                </li>\n                <li>\n                    <strong id=\"question-2\" class=\"question\">How do I download the QR code?</strong>\n                    <p id=\"answer-2\" class=\"answer\">After generating the QR code, a 'Download QR Code' button will appear.</p>\n                </li>\n            </ul>\n        </section>\n\n        <section id=\"privacy-policy-section\" class=\"section\">\n            <h2 id=\"privacy-policy-heading\" class=\"privacy-policy-heading\">Privacy Policy</h2>\n            <p id=\"privacy-policy-text\" class=\"privacy-policy-text\">This website does not store any of the data you input to generate QR codes.</p>\n        </section>\n\n        <section id=\"terms-of-service-section\" class=\"section\">\n            <h2 id=\"terms-of-service-heading\" class=\"terms-of-service-heading\">Terms of Service</h2>\n            <p id=\"terms-of-service-text\" class=\"terms-of-service-text\">Use of this website is at your own risk.  We are not responsible for any damages resulting from the use of generated QR codes.</p>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "static/style.css", "path": "static/", "code": "/* Optional: Add some general styling here */\nbody {\n    font-family: sans-serif;\n}\n\n.container {\n    width: 80%;\n    margin: 0 auto;\n}\n\n/* Add more specific styles as needed */"}], "5": [{"file": "requirements.txt", "path": "/", "code": "Django>=4.0\nmarkdown\n"}, {"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'md_to_html.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "md_to_html/__init__.py", "path": "md_to_html/", "code": "default_app_config = 'md_to_html.apps.MdToHtmlConfig'"}, {"file": "md_to_html/asgi.py", "path": "md_to_html/", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'md_to_html.settings')\n\napplication = get_asgi_application()"}, {"file": "md_to_html/settings.py", "path": "md_to_html/", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-a=3e_7w*c#96o+y7-s@9h&e9g#n$8)a(1+0!+o^q0-0%g#r=l6'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'md_to_html.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'md_to_html.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "md_to_html/urls.py", "path": "md_to_html/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "md_to_html/wsgi.py", "path": "md_to_html/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'md_to_html.settings')\n\napplication = get_wsgi_application()"}, {"file": "converter/__init__.py", "path": "converter/", "code": "default_app_config = 'converter.apps.ConverterConfig'"}, {"file": "converter/admin.py", "path": "converter/", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "converter/apps.py", "path": "converter/", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'"}, {"file": "converter/forms.py", "path": "converter/", "code": "from django import forms\n\nclass ConvertForm(forms.Form):\n    markdown_text = forms.CharField(widget=forms.Textarea(attrs={'class': 'markdown-input', 'id': 'markdownInput'}))\n    upload_file = forms.FileField(required=False)"}, {"file": "converter/models.py", "path": "converter/", "code": "from django.db import models\n\n# Create your models here."}, {"file": "converter/urls.py", "path": "converter/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "converter/views.py", "path": "converter/", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import ConvertForm\n\ndef home(request):\n    return render(request, 'home.html', {'page': 'home'})\n\n\ndef convert(request):\n    if request.method == 'POST':\n        form = ConvertForm(request.POST, request.FILES)\n        if form.is_valid():\n            if request.FILES.get('upload_file'):\n                uploaded_file = request.FILES['upload_file']\n                markdown_text = uploaded_file.read().decode('utf-8')\n\n            else:\n                markdown_text = form.cleaned_data['markdown_text']\n\n            html = markdown.markdown(markdown_text, extensions=['fenced_code'])\n\n            return render(request, 'convert.html', {'html': html, 'page': 'convert'})\n    else:\n        form = ConvertForm()\n    return render(request, 'convert.html', {'form': form, 'page': 'convert'})\n\n\ndef about(request):\n    return render(request, 'about.html', {'page': 'about'})"}, {"file": "templates/home.html", "path": "templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <link rel=\"stylesheet\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"mainTitle\" class=\"main-title\">Markdown to HTML Converter</h1>\n        <nav id=\"mainNav\" class=\"main-nav\">\n            <ul id=\"navList\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"navHome\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"navConvert\" class=\"nav-link\" href=\"{% url 'convert' %}\">Convert</a></li>\n                <li class=\"nav-item\"><a id=\"navAbout\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"mainContent\" class=\"main-content\">\n        <section id=\"welcomeSection\" class=\"welcome-section\">\n            <h2 id=\"welcomeMessage\" class=\"welcome-message\">Welcome!</h2>\n            <p id=\"converterIntro\" class=\"converter-intro\">This is a simple Markdown to HTML converter.  Paste your markdown or upload a file to convert.</p>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p id=\"copyright\" class=\"copyright\">&copy; 2023 Markdown Converter</p>\n    </footer>\n</body>\n</html>"}, {"file": "templates/convert.html", "path": "templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <link rel=\"stylesheet\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"mainTitle\" class=\"main-title\">Markdown to HTML Converter</h1>\n        <nav id=\"mainNav\" class=\"main-nav\">\n            <ul id=\"navList\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"navHome\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"navConvert\" class=\"nav-link\" href=\"{% url 'convert' %}\">Convert</a></li>\n                <li class=\"nav-item\"><a id=\"navAbout\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"mainContent\" class=\"main-content\">\n        <section id=\"convertSection\" class=\"convert-section\">\n            <h2 id=\"convertTitle\" class=\"convert-title\">Convert Markdown to HTML</h2>\n\n            <form id=\"convertForm\" class=\"convert-form\" method=\"post\" enctype=\"multipart/form-data\">\n                {% csrf_token %}\n\n                <div id=\"markdownInputGroup\" class=\"input-group\">\n                    <label id=\"markdownInputLabel\" class=\"input-label\" for=\"markdownInput\">Markdown Input:</label>\n                    {{ form.markdown_text }}\n                </div>\n\n                <div id=\"uploadFileGroup\" class=\"input-group\">\n                    <label id=\"uploadFileLabel\" class=\"input-label\" for=\"uploadFile\">Upload File:</label>\n                    {{ form.upload_file }}\n                </div>\n\n                <button id=\"convertButton\" class=\"convert-button\" type=\"submit\">Convert</button>\n            </form>\n\n            {% if html %}\n            <section id=\"htmlOutputSection\" class=\"html-output-section\">\n                <h3 id=\"htmlOutputTitle\" class=\"html-output-title\">HTML Output:</h3>\n                <div id=\"htmlOutputArea\" class=\"html-output-area\">\n                    {{ html|safe }}\n                </div>\n                <!-- Add Download button here later -->\n            </section>\n            {% endif %}\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p id=\"copyright\" class=\"copyright\">&copy; 2023 Markdown Converter</p>\n    </footer>\n</body>\n</html>"}, {"file": "templates/about.html", "path": "templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter - About</title>\n    <link rel=\"stylesheet\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"mainTitle\" class=\"main-title\">Markdown to HTML Converter</h1>\n        <nav id=\"mainNav\" class=\"main-nav\">\n            <ul id=\"navList\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"navHome\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"navConvert\" class=\"nav-link\" href=\"{% url 'convert' %}\">Convert</a></li>\n                <li class=\"nav-item\"><a id=\"navAbout\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"mainContent\" class=\"main-content\">\n        <section id=\"aboutSection\" class=\"about-section\">\n            <h2 id=\"aboutTitle\" class=\"about-title\">About This Converter</h2>\n\n            <section id=\"teamInfoSection\" class=\"team-info-section\">\n                <h3 id=\"teamInfoHeader\" class=\"team-info-header\">Team Information</h3>\n                <p id=\"teamInfo\" class=\"team-info\">Developed by a team of passionate developers.</p>\n            </section>\n\n            <section id=\"faqSection\" class=\"faq-section\">\n                <h3 id=\"faqHeader\" class=\"faq-header\">Frequently Asked Questions</h3>\n                <ul id=\"faqList\" class=\"faq-list\">\n                    <li class=\"faq-item\">\n                        <strong id=\"faqQuestion1\" class=\"faq-question\">How does this converter work?</strong>\n                        <p id=\"faqAnswer1\" class=\"faq-answer\">It uses the Python Markdown library to convert Markdown text to HTML.</p>\n                    </li>\n                    <li class=\"faq-item\">\n                        <strong id=\"faqQuestion2\" class=\"faq-question\">Is this converter free to use?</strong>\n                        <p id=\"faqAnswer2\" class=\"faq-answer\">Yes, this converter is completely free to use.</p>\n                    </li>\n                </ul>\n            </section>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p id=\"copyright\" class=\"copyright\">&copy; 2023 Markdown Converter</p>\n    </footer>\n</body>\n</html>"}, {"file": "static/style.css", "path": "static/", "code": "/* Basic Styling */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\n.header {\n    background-color: #333;\n    color: white;\n    padding: 1rem;\n    text-align: center;\n}\n\n.main-nav ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.main-nav li {\n    display: inline;\n    margin: 0 1rem;\n}\n\n.main-nav a {\n    color: white;\n    text-decoration: none;\n}\n\n.main-content {\n    padding: 2rem;\n}\n\n.footer {\n    background-color: #333;\n    color: white;\n    text-align: center;\n    padding: 1rem;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n}\n\n/* Home Page */\n.welcome-section {\n    text-align: center;\n}\n\n/* Convert Page */\n.convert-section {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.convert-form {\n    display: flex;\n    flex-direction: column;\n}\n\n.input-group {\n    margin-bottom: 1rem;\n}\n\n.input-label {\n    display: block;\n    margin-bottom: 0.5rem;\n}\n\n.markdown-input {\n    width: 100%;\n    height: 200px;\n    padding: 0.5rem;\n    box-sizing: border-box;\n}\n\n.convert-button {\n    background-color: #4CAF50;\n    color: white;\n    padding: 0.5rem 1rem;\n    border: none;\n    cursor: pointer;\n}\n\n.html-output-area {\n    border: 1px solid #ccc;\n    padding: 1rem;\n    margin-top: 1rem;\n    white-space: pre-wrap; /* important for preserving markdown whitespace in HTML output*/\n}\n\n/* About Page */\n.about-section {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.faq-list {\n    list-style: none;\n    padding: 0;\n}\n\n.faq-item {\n    margin-bottom: 1rem;\n}\n\n.faq-question {\n    font-weight: bold;\n}\n"}], "6": [{"file": "requirements.txt", "path": "requirements.txt", "code": "Django>=4.0\n"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "todo_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "todo_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] \n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]"}, {"file": "wsgi.py", "path": "todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "todo_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "todo_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)"}, {"file": "apps.py", "path": "todo_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todo_app'"}, {"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    due_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('todo_list/<int:list_id>/', views.todo_list_detail, name='todo_list_detail'),\n    path('create_list/', views.create_list, name='create_list'),\n    path('add_task/<int:list_id>/', views.add_task, name='add_task'),\n    path('edit_task/<int:task_id>/', views.edit_task, name='edit_task'),\n    path('delete_task/<int:task_id>/', views.delete_task, name='delete_task'),\n    path('complete_task/<int:task_id>/', views.complete_task, name='complete_task'),\n    path('analysis/', views.analysis, name='analysis'),\n]"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom .forms import TodoListForm, TaskForm\nfrom django.http import HttpResponse\n\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'todo_app/home.html', {'todo_lists': todo_lists})\n\n\ndef todo_list_detail(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todo_app/todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\n\ndef create_list(request):\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TodoListForm()\n    return render(request, 'todo_app/create_list.html', {'form': form})\n\n\ndef add_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.todo_list = todo_list\n            task.save()\n            return redirect('todo_list_detail', list_id=list_id)\n    else:\n        form = TaskForm()\n    return render(request, 'todo_app/add_task.html', {'form': form, 'todo_list': todo_list})\n\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list_detail', list_id=task.todo_list.id)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'todo_app/edit_task.html', {'form': form, 'task': task})\n\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list_detail', list_id=list_id)\n\n\ndef complete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', list_id=task.todo_list.id)\n\n\ndef analysis(request):\n    # Dummy data for demonstration - replace with actual calculations\n    task_completion_data = {\n        'completed': 70,\n        'pending': 30,\n    }\n    task_distribution_data = {\n        'List 1': 40,\n        'List 2': 60,\n    }\n\n    return render(request, 'todo_app/analysis.html', {\n        'task_completion_data': task_completion_data,\n        'task_distribution_data': task_distribution_data,\n    })\n"}, {"file": "forms.py", "path": "todo_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, Task\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['name']\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'due_date']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date'})\n        }"}, {"file": "home.html", "path": "templates/todo_app/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"homePage\" class=\"container\">\n    <h1 id=\"homeTitle\" class=\"title\">Todo Lists</h1>\n    <a id=\"createListLink\" class=\"btn btn-primary\" href=\"{% url 'create_list' %}\">Create New List</a>\n    <ul id=\"todoList\" class=\"list-group\">\n        {% for todo_list in todo_lists %}\n            <li id=\"todoListItem_{{ todo_list.id }}\" class=\"list-group-item\">\n                <a id=\"todoListLink_{{ todo_list.id }}\" href=\"{% url 'todo_list_detail' todo_list.id %}\">{{ todo_list.name }}</a>\n            </li>\n        {% endfor %}\n    </ul>\n    <a id=\"analysisLink\" class=\"btn btn-secondary mt-3\" href=\"{% url 'analysis' %}\">View Analysis</a>\n</div>\n{% endblock %}"}, {"file": "todo_list_detail.html", "path": "templates/todo_app/todo_list_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"todoListDetailPage\" class=\"container\">\n    <h1 id=\"todoListTitle\" class=\"title\">{{ todo_list.name }}</h1>\n    <a id=\"addTaskLink\" class=\"btn btn-primary\" href=\"{% url 'add_task' todo_list.id %}\">Add New Task</a>\n    <ul id=\"taskList\" class=\"list-group\">\n        {% for task in tasks %}\n            <li id=\"taskItem_{{ task.id }}\" class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <span id=\"taskTitle_{{ task.id }}\" {% if task.completed %}class=\"completed-task\"{% endif %}>{{ task.title }}</span>\n                <div>\n                    <a id=\"editTaskLink_{{ task.id }}\" class=\"btn btn-sm btn-secondary\" href=\"{% url 'edit_task' task.id %}\">Edit</a>\n                    <a id=\"deleteTaskLink_{{ task.id }}\" class=\"btn btn-sm btn-danger\" href=\"{% url 'delete_task' task.id %}\">Delete</a>\n                    {% if not task.completed %}\n                        <a id=\"completeTaskLink_{{ task.id }}\" class=\"btn btn-sm btn-success\" href=\"{% url 'complete_task' task.id %}\">Complete</a>\n                    {% endif %}\n                </div>\n            </li>\n        {% endfor %}\n    </ul>\n    <a id=\"backHomeLink\" class=\"btn btn-secondary mt-3\" href=\"{% url 'home' %}\">Back to Home</a>\n</div>\n{% endblock %}"}, {"file": "create_list.html", "path": "templates/todo_app/create_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"createListPage\" class=\"container\">\n    <h1 id=\"createListTitle\" class=\"title\">Create New List</h1>\n    <form id=\"createListForm\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"formGroup\" class=\"form-group\">\n            <label id=\"nameLabel\" for=\"{{ form.name.id_for_label }}\">List Name:</label>\n            {{ form.name }}\n        </div>\n        <button id=\"createListButton\" type=\"submit\" class=\"btn btn-primary\">Create List</button>\n        <a id=\"cancelLink\" class=\"btn btn-secondary\" href=\"{% url 'home' %}\">Cancel</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "add_task.html", "path": "templates/todo_app/add_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"addTaskPage\" class=\"container\">\n    <h1 id=\"addTaskTitle\" class=\"title\">Add New Task to {{ todo_list.name }}</h1>\n    <form id=\"addTaskForm\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"formGroupTitle\" class=\"form-group\">\n            <label id=\"titleLabel\" for=\"{{ form.title.id_for_label }}\">Task Title:</label>\n            {{ form.title }}\n        </div>\n        <div id=\"formGroupDescription\" class=\"form-group\">\n            <label id=\"descriptionLabel\" for=\"{{ form.description.id_for_label }}\">Description:</label>\n            {{ form.description }}\n        </div>\n        <div id=\"formGroupDueDate\" class=\"form-group\">\n            <label id=\"dueDateLabel\" for=\"{{ form.due_date.id_for_label }}\">Due Date:</label>\n            {{ form.due_date }}\n        </div>\n        <button id=\"addTaskButton\" type=\"submit\" class=\"btn btn-primary\">Add Task</button>\n        <a id=\"cancelLink\" class=\"btn btn-secondary\" href=\"{% url 'todo_list_detail' todo_list.id %}\">Cancel</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "edit_task.html", "path": "templates/todo_app/edit_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"editTaskPage\" class=\"container\">\n    <h1 id=\"editTaskTitle\" class=\"title\">Edit Task</h1>\n    <form id=\"editTaskForm\" method=\"post\">\n        {% csrf_token %}\n        <div id=\"formGroupTitle\" class=\"form-group\">\n            <label id=\"titleLabel\" for=\"{{ form.title.id_for_label }}\">Task Title:</label>\n            {{ form.title }}\n        </div>\n        <div id=\"formGroupDescription\" class=\"form-group\">\n            <label id=\"descriptionLabel\" for=\"{{ form.description.id_for_label }}\">Description:</label>\n            {{ form.description }}\n        </div>\n        <div id=\"formGroupDueDate\" class=\"form-group\">\n            <label id=\"dueDateLabel\" for=\"{{ form.due_date.id_for_label }}\">Due Date:</label>\n            {{ form.due_date }}\n        </div>\n        <button id=\"updateTaskButton\" type=\"submit\" class=\"btn btn-primary\">Update Task</button>\n        <a id=\"cancelLink\" class=\"btn btn-secondary\" href=\"{% url 'todo_list_detail' task.todo_list.id %}\">Cancel</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "analysis.html", "path": "templates/todo_app/analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"analysisPage\" class=\"container\">\n    <h1 id=\"analysisTitle\" class=\"title\">Analysis</h1>\n\n    <div id=\"taskCompletionChart\" class=\"chart-container\">\n        <h2 id=\"completionChartTitle\" class=\"chart-title\">Task Completion Status</h2>\n        <p>Completed: {{ task_completion_data.completed }}%</p>\n        <p>Pending: {{ task_completion_data.pending }}%</p>\n    </div>\n\n    <div id=\"taskDistributionChart\" class=\"chart-container\">\n        <h2 id=\"distributionChartTitle\" class=\"chart-title\">Task Distribution Across Lists</h2>\n        {% for list_name, percentage in task_distribution_data.items %}\n            <p>{{ list_name }}: {{ percentage }}%</p>\n        {% endfor %}\n    </div>\n\n    <a id=\"backHomeLink\" class=\"btn btn-secondary mt-3\" href=\"{% url 'home' %}\">Back to Home</a>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo App</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        .completed-task {\n            text-decoration: line-through;\n            color: gray;\n        }\n        .chart-container {\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-bottom: 20px;\n        }\n        .chart-title{\n            font-size: 1.2em; /* Adjust the size as needed */\n            font-weight: bold; /* Make the title stand out */\n            margin-bottom: 0.5em; /* Add some spacing below the title */\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"mainNav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a id=\"navBrand\" class=\"navbar-brand\" href=\"{% url 'home' %}\">Todo App</a>\n    </nav>\n\n    <div id=\"content\" class=\"container mt-4\">\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "static.txt", "path": "static/static.txt", "code": "This directory would contain static files like CSS, JavaScript, and images."}], "8": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/calendar_project/", "code": "default_app_config = 'calendar_app.apps.CalendarAppConfig'"}, {"file": "settings.py", "path": "/calendar_project/", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-some_very_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "/calendar_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "asgi.py", "path": "/calendar_project/", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_asgi_application()"}, {"file": "wsgi.py", "path": "/calendar_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/calendar_app/", "code": "default_app_config = 'calendar_app.apps.CalendarAppConfig'"}, {"file": "apps.py", "path": "/calendar_app/", "code": "from django.apps import AppConfig\n\n\nclass CalendarAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calendar_app'"}, {"file": "models.py", "path": "/calendar_app/", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200, help_text='Event Title')\n    description = models.TextField(blank=True, help_text='Event Description')\n    start_time = models.DateTimeField(help_text='Starting date and time')\n    end_time = models.DateTimeField(help_text='Ending date and time')\n\n    def __str__(self):\n        return self.title"}, {"file": "forms.py", "path": "/calendar_app/", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'})\n        }"}, {"file": "urls.py", "path": "/calendar_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('event/new/', views.event_new, name='event_new'),\n    path('event/<int:event_id>/edit/', views.event_edit, name='event_edit'),\n    path('event/<int:event_id>/delete/', views.event_delete, name='event_delete'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('events/all/', views.all_events, name='all_events'),\n    path('search/', views.search_events, name='search_events'),\n    path('help/', views.help_page, name='help'),\n]"}, {"file": "views.py", "path": "/calendar_app/", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\nfrom django.db.models import Q\n\ndef home(request):\n    current_date = timezone.now().date()\n    return render(request, 'calendar_app/home.html', {'current_date': current_date})\n\n\ndef calendar_view(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/calendar.html', {'events': events})\n\n\ndef event_new(request):\n    if request.method == \"POST\":\n        form = EventForm(request.POST)\n        if form.is_valid():\n            event = form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/event_edit.html', {'form': form})\n\n\ndef event_edit(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == \"POST\":\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event.pk)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/event_edit.html', {'form': form})\n\n\ndef event_delete(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    event.delete()\n    return redirect('calendar')\n\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendar_app/event_details.html', {'event': event})\n\n\ndef all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/all_events.html', {'events': events})\n\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(Q(title__icontains=query) | Q(description__icontains=query))\n    return render(request, 'calendar_app/search_results.html', {'events': events, 'query': query})\n\ndef help_page(request):\n    return render(request, 'calendar_app/help.html')"}, {"file": "home.html", "path": "/templates/calendar_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-title\">Welcome to the Calendar App!</h1>\n        <p id=\"current-date\" class=\"current-date\">Current Date: {{ current_date }}</p>\n        <a id=\"calendar-link\" class=\"calendar-link\" href=\"{% url 'calendar' %}\">View Calendar</a>\n        <a id=\"add-event-link\" class=\"add-event-link\" href=\"{% url 'event_new' %}\">Add New Event</a>\n    </div>\n</body>\n</html>"}, {"file": "calendar.html", "path": "/templates/calendar_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar</title>\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"calendar-container\">\n        <h1 id=\"calendar-title\" class=\"calendar-title\">Calendar</h1>\n        <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n        <a id=\"add-event-link\" class=\"add-event-link\" href=\"{% url 'event_new' %}\">Add New Event</a>\n        <a id=\"all-events-link\" class=\"all-events-link\" href=\"{% url 'all_events' %}\">View All Events</a>\n\n        <ul id=\"event-list\" class=\"event-list\">\n            {% for event in events %}\n                <li id=\"event-item-{{ event.id }}\" class=\"event-item\">\n                    <a id=\"event-details-link-{{ event.id }}\" class=\"event-details-link\" href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n\n        <form id=\"month-selector\" class=\"month-selector\">\n            <label for=\"month\" id=\"month-label\" class=\"month-label\">Select Month:</label>\n            <select name=\"month\" id=\"month\" class=\"month\">\n                <option value=\"1\">January</option>\n                <option value=\"2\">February</option>\n                <option value=\"3\">March</option>\n                <option value=\"4\">April</option>\n                <option value=\"5\">May</option>\n                <option value=\"6\">June</option>\n                <option value=\"7\">July</option>\n                <option value=\"8\">August</option>\n                <option value=\"9\">September</option>\n                <option value=\"10\">October</option>\n                <option value=\"11\">November</option>\n                <option value=\"12\">December</option>\n            </select>\n            <label for=\"year\" id=\"year-label\" class=\"year-label\">Select Year:</label>\n            <select name=\"year\" id=\"year\" class=\"year\">\n                {% for year in '2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030'.split(',') %}\n                <option value=\"{{ year }}\">{{ year }}</option>\n                {% endfor %}\n            </select>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "event_edit.html", "path": "/templates/calendar_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Edit</title>\n</head>\n<body>\n    <div id=\"event-edit-container\" class=\"event-edit-container\">\n        <h1 id=\"event-edit-title\" class=\"event-edit-title\">Edit Event</h1>\n\n        <form id=\"event-form\" class=\"event-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"save-button\" class=\"save-button\" type=\"submit\">Save</button>\n        </form>\n        <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'calendar' %}\">Cancel</a>\n    </div>\n</body>\n</html>"}, {"file": "event_details.html", "path": "/templates/calendar_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Details</title>\n</head>\n<body>\n    <div id=\"event-details-container\" class=\"event-details-container\">\n        <h1 id=\"event-details-title\" class=\"event-details-title\">Event Details</h1>\n        <p id=\"event-title\" class=\"event-title\">Title: {{ event.title }}</p>\n        <p id=\"event-description\" class=\"event-description\">Description: {{ event.description }}</p>\n        <p id=\"event-start-time\" class=\"event-start-time\">Start Time: {{ event.start_time }}</p>\n        <p id=\"event-end-time\" class=\"event-end-time\">End Time: {{ event.end_time }}</p>\n\n        <a id=\"edit-event-link\" class=\"edit-event-link\" href=\"{% url 'event_edit' event.id %}\">Edit Event</a>\n        <a id=\"delete-event-link\" class=\"delete-event-link\" href=\"{% url 'event_delete' event.id %}\">Delete Event</a>\n        <a id=\"calendar-link\" class=\"calendar-link\" href=\"{% url 'calendar' %}\">Back to Calendar</a>\n    </div>\n</body>\n</html>"}, {"file": "all_events.html", "path": "/templates/calendar_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>All Events</title>\n</head>\n<body>\n    <div id=\"all-events-container\" class=\"all-events-container\">\n        <h1 id=\"all-events-title\" class=\"all-events-title\">All Events</h1>\n        <a id=\"calendar-link\" class=\"calendar-link\" href=\"{% url 'calendar' %}\">Back to Calendar</a>\n\n        <ul id=\"events-list\" class=\"events-list\">\n            {% for event in events %}\n                <li id=\"event-item-{{ event.id }}\" class=\"event-item\">\n                    <a id=\"event-details-link-{{ event.id }}\" class=\"event-details-link\" href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "search_results.html", "path": "/templates/calendar_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Search Results</title>\n</head>\n<body>\n    <div id=\"search-results-container\" class=\"search-results-container\">\n        <h1 id=\"search-results-title\" class=\"search-results-title\">Search Results</h1>\n        <p id=\"search-query\" class=\"search-query\">Search Query: {{ query }}</p>\n        <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n\n        <ul id=\"events-list\" class=\"events-list\">\n            {% for event in events %}\n                <li id=\"event-item-{{ event.id }}\" class=\"event-item\">\n                    <a id=\"event-details-link-{{ event.id }}\" class=\"event-details-link\" href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a>\n                </li>\n            {% empty %}\n                <li id=\"no-results\" class=\"no-results\">No events found matching your search.</li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "help.html", "path": "/templates/calendar_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Help</title>\n</head>\n<body>\n    <div id=\"help-container\" class=\"help-container\">\n        <h1 id=\"help-title\" class=\"help-title\">Help</h1>\n\n        <section id=\"faq-section\" class=\"faq-section\">\n            <h2 id=\"faq-title\" class=\"faq-title\">FAQ</h2>\n            <p id=\"faq-content\" class=\"faq-content\">Frequently asked questions and answers will be placed here.</p>\n        </section>\n\n        <section id=\"user-guide-section\" class=\"user-guide-section\">\n            <h2 id=\"user-guide-title\" class=\"user-guide-title\">User Guide</h2>\n            <p id=\"user-guide-content\" class=\"user-guide-content\">A comprehensive user guide for using the calendar application will be placed here.</p>\n        </section>\n\n         <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "/static/calendar_app/", "code": "/* Basic Styling - Modify as needed */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\n.home-container, .calendar-container, .event-edit-container, .event-details-container, .all-events-container, .search-results-container, .help-container {\n    margin-bottom: 20px;\n}\n\n/* Home Page */\n.home-title { font-size: 2em; }\n.current-date { margin-bottom: 10px; }\n.calendar-link, .add-event-link { display: inline-block; margin-right: 10px; }\n\n/* Calendar Page */\n.calendar-title { font-size: 2em; }\n.event-list { list-style: none; padding: 0; }\n.event-item { margin-bottom: 5px; }\n.month-selector { margin-top: 10px; }\n\n/* Event Edit Page */\n.event-edit-title { font-size: 2em; }\n.event-form p { margin-bottom: 5px; }\n\n/* Event Details Page */\n.event-details-title { font-size: 2em; }\n\n/* All Events Page */\n.all-events-title { font-size: 2em; }\n\n/* Search Results Page */\n.search-results-title { font-size: 2em; }\n\n/* Help Page */\n.help-title { font-size: 2em; }\n\n"}, {"file": "__init__.py", "path": "/static/calendar_app/", "code": ""}], "14": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/helloworld_project/", "code": "default_app_config = 'helloworld_app.apps.HelloworldAppConfig'"}, {"file": "settings.py", "path": "/helloworld_project/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]"}, {"file": "urls.py", "path": "/helloworld_project/", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom helloworld_app import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "/helloworld_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/helloworld_app/", "code": "default_app_config = 'helloworld_app.apps.HelloworldAppConfig'"}, {"file": "apps.py", "path": "/helloworld_app/", "code": "from django.apps import AppConfig\n\n\nclass HelloworldAppConfig(AppConfig):\n    name = 'helloworld_app'"}, {"file": "views.py", "path": "/helloworld_app/", "code": "from django.shortcuts import render\n\n\ndef hello_world(request):\n    return render(request, 'hello_world.html')\n"}, {"file": "urls.py", "path": "/helloworld_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "hello_world.html", "path": "/templates/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Hello World page.\">\n    <meta name=\"keywords\" content=\"Hello World\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"hello-text\" class=\"hello-text\">Hello World</h1>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "/static/css/", "code": ".container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    text-align: center;\n}\n\n.hello-text {\n    font-family: sans-serif;\n    font-size: 3em;\n    color: #333;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .hello-text {\n        font-size: 2em;\n    }\n}\n\n@media (max-width: 480px) {\n    .hello-text {\n        font-size: 1.5em;\n    }\n}"}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    name = 'myapp'"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "myapp/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, redirect\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "home.html", "path": "myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Home Page</h1>\n        <p id=\"home-description\" class=\"description\">Click the button below to go to the HelloWorld page.</p>\n        <a href=\"{% url 'helloworld' %}\" id=\"helloworld-button\" class=\"button\">Go to HelloWorld</a>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <div id=\"helloworld-container\" class=\"container\">\n        <h1 id=\"helloworld-message\" class=\"message\">HelloWorld!</h1>\n         <a href=\"{% url 'home' %}\" id=\"home-button\" class=\"button\">Back to Home</a>\n    </div>\n</body>\n</html>"}], "16": [{"file": "validation.py", "path": "src/validation.py", "code": "import pandas as pd\n\nclass Validation:\n    def __init__(self, filename):\n        self.filename = filename\n        self.df = None\n\n    def load_data(self):\n        try:\n            self.df = pd.read_excel(self.filename)\n            return True\n        except FileNotFoundError:\n            print(f\"Error: File '{self.filename}' not found.\")\n            return False\n        except Exception as e:\n            print(f\"Error loading file: {e}\")\n            return False\n\n    def check_file_existence(self):\n        try:\n            with open(self.filename, 'r'): # Try opening in read mode to check existence\n                return True\n        except FileNotFoundError:\n            print(f\"Error: File '{self.filename}' not found.\")\n            return False\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return False\n\n\n    def validate_headers(self):\n        expected_headers = ['#', 'Name', 'Weekday', 'Time']\n        if self.df is None:\n            print(\"Error: Dataframe is not loaded. Call load_data() first.\")\n            return False\n        actual_headers = list(self.df.columns)\n        if actual_headers == expected_headers:\n            return True\n        else:\n            print(f\"Error: Invalid headers. Expected {expected_headers}, but got {actual_headers}\")\n            return False\n\n    def validate_time_column(self):\n        if self.df is None:\n            print(\"Error: Dataframe is not loaded. Call load_data() first.\")\n            return False\n        valid_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n        time_values = self.df['Time'].unique()\n        for time in time_values:\n            if time not in valid_times:\n                print(f\"Error: Invalid time value '{time}' found in 'Time' column.\")\n                return False\n        return True\n\n    def validate_data_integrity(self):\n        if self.df is None:\n            print(\"Error: Dataframe is not loaded. Call load_data() first.\")\n            return False\n        if self.df.isnull().any().any():\n           print(\"Error: Missing value(s) detected.\")\n           return False\n        return True\n\n    def validate_null_value(self):\n         if self.df is None:\n            print(\"Error: Dataframe is not loaded. Call load_data() first.\")\n            return False\n         if self.df.isnull().any().any():\n            print(\"Error: Missing value(s) detected.\")\n            return False\n         return True\n\n    def validate_all(self):\n        if not self.check_file_existence():\n            return False\n        if not self.load_data():\n            return False\n        if not self.validate_headers():\n            return False\n        if not self.validate_time_column():\n            return False\n        if not self.validate_data_integrity():\n            return False\n        if not self.validate_null_value():\n            return False\n        return True"}, {"file": "transformation.py", "path": "src/transformation.py", "code": "import pandas as pd\n\nclass Transformation:\n    def __init__(self, df):\n        self.df = df\n\n    def transform_to_two_dimension_table(self):\n        weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n        time_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n        transformed_data = {}\n        for weekday in weekdays:\n            transformed_data[weekday] = {}\n            for time_period in time_periods:\n                transformed_data[weekday][time_period] = ''\n\n        for _, row in self.df.iterrows():\n            weekday = row['Weekday']\n            time = row['Time']\n            name = row['Name']\n            transformed_data[weekday][time] = name\n\n        return transformed_data\n\n    def data_mapping(self, transformed_data):\n      # This function does what transform_to_two_dimension_table is already doing.\n      # It essentially maps the data based on weekday and time.  No need to re-implement.\n      return transformed_data\n\n\n    def create_dataframe(self, transformed_data):\n        weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n        time_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n        data = []\n        columns = ['Time'] + weekdays\n\n        for time_period in time_periods:\n            row = [time_period]\n            for weekday in weekdays:\n                row.append(transformed_data[weekday].get(time_period, ''))\n            data.append(row)\n\n        df = pd.DataFrame(data, columns=columns)\n        return df"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\nclass Output:\n    def __init__(self, filename='output.xlsx'):\n        self.filename = filename\n\n    def create_output_excel_file(self, df):\n        try:\n            df.to_excel(self.filename, index=False)\n            print(f\"Successfully created output file: {self.filename}\")\n            return True\n        except Exception as e:\n            print(f\"Error creating output file: {e}\")\n            return False\n\n    def save_table_to_excel(self, df):\n       # This is redundant as create_output_excel_file already saves the table.\n       # Keeping the logic same as original description, but pointing to existing function.\n       return self.create_output_excel_file(df)"}, {"file": "main.py", "path": "main.py", "code": "from src.validation import Validation\nfrom src.transformation import Transformation\nfrom src.output import Output\n\n\ndef main():\n    input_file = 'Spring Semester Subjects.xlsx'\n\n    # Input File Validation\n    validator = Validation(input_file)\n    if not validator.validate_all():\n        print(\"Input file validation failed. Exiting.\")\n        return\n    df = validator.df # Get the validated dataframe\n\n    # Data Transformation\n    transformer = Transformation(df)\n    transformed_data = transformer.transform_to_two_dimension_table()\n    output_df = transformer.create_dataframe(transformed_data)\n\n\n    # Output File Creation\n    output_handler = Output()\n    output_handler.create_output_excel_file(output_df)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nopenpyxl"}, {"file": "index.html", "path": "static/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Subject Scheduler</title>\n    <link rel=\"stylesheet\" href=\"style.css\">\n</head>\n<body>\n    <div id=\"app\" class=\"container\">\n        <h1 id=\"main-title\" class=\"title\">Subject Scheduler</h1>\n\n        <div id=\"input-section\" class=\"section\">\n            <label id=\"file-label\" for=\"file-input\" class=\"label\">Upload Excel File:</label>\n            <input type=\"file\" id=\"file-input\" class=\"input\" accept=\".xlsx, .xls\">\n            <button id=\"upload-button\" class=\"button\">Upload</button>\n        </div>\n\n        <div id=\"schedule-section\" class=\"section\">\n            <h2 id=\"schedule-title\" class=\"subtitle\">Weekly Schedule</h2>\n            <table id=\"schedule-table\" class=\"table\">\n                <thead>\n                    <tr>\n                        <th>Time</th>\n                        <th>Monday</th>\n                        <th>Tuesday</th>\n                        <th>Wednesday</th>\n                        <th>Thursday</th>\n                        <th>Friday</th>\n                    </tr>\n                </thead>\n                <tbody id=\"schedule-body\"></tbody>\n            </table>\n        </div>\n\n        <div id=\"message-area\" class=\"section\">\n          <p id=\"message-text\" class = \"message\"></p>\n        </div>\n\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>"}, {"file": "script.js", "path": "static/script.js", "code": "document.addEventListener('DOMContentLoaded', function() {\n    const fileInput = document.getElementById('file-input');\n    const uploadButton = document.getElementById('upload-button');\n    const scheduleBody = document.getElementById('schedule-body');\n    const messageText = document.getElementById('message-text');\n\n    uploadButton.addEventListener('click', function() {\n        const file = fileInput.files[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = function(e) {\n                const data = new Uint8Array(e.target.result);\n                const workbook = XLSX.read(data, {type: 'array'});\n\n                const sheetName = workbook.SheetNames[0];\n                const worksheet = workbook.Sheets[sheetName];\n                const jsonData = XLSX.utils.sheet_to_json(worksheet);\n\n                if (validateData(jsonData)){\n                  displaySchedule(jsonData);\n                  showMessage(\"Schedule generated successfully!\");\n                } else {\n                  showMessage(\"Error: Invalid data in Excel file.\");\n                }\n\n            };\n            reader.readAsArrayBuffer(file);\n        } else {\n            showMessage('Please select a file.');\n        }\n    });\n\n    function validateData(data) {\n      // Basic validation - check for required fields\n      for (let i = 0; i < data.length; i++) {\n          const row = data[i];\n          if (!row['#'] || !row['Name'] || !row['Weekday'] || !row['Time']) {\n              return false;\n          }\n          // Add more specific validation rules here if needed\n      }\n      return true;\n  }\n\n    function displaySchedule(data) {\n        scheduleBody.innerHTML = ''; // Clear existing table data\n\n        const timeSlots = ['First period', 'Second period', 'Third period', 'Fourth period'];\n        const weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];\n\n        timeSlots.forEach(time => {\n            const row = document.createElement('tr');\n            let timeCell = document.createElement('td');\n            timeCell.textContent = time; // First column is time.\n            row.appendChild(timeCell);\n\n            weekdays.forEach(day => {\n                const cell = document.createElement('td');\n                // Find subject for this time and day\n                const subject = data.find(item => item.Weekday === day && item.Time === time);\n                if (subject) {\n                    cell.textContent = subject.Name;\n                }\n                row.appendChild(cell);\n            });\n            scheduleBody.appendChild(row);\n        });\n    }\n\n    function showMessage(message) {\n        messageText.textContent = message;\n    }\n});"}, {"file": "style.css", "path": "static/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n}\n\n.container {\n    width: 80%;\n    max-width: 900px;\n    margin: 20px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    text-align: center;\n    color: #333;\n    margin-bottom: 20px;\n}\n\n.subtitle {\n    color: #555;\n    margin-bottom: 10px;\n}\n\n.section {\n    margin-bottom: 20px;\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\n.label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.input {\n    width: 100%;\n    padding: 8px;\n    margin-bottom: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 16px;\n}\n\n.button:hover {\n    background-color: #0056b3;\n}\n\n.table {\n    width: 100%;\n    border-collapse: collapse;\n    margin-top: 10px;\n}\n\n.table th,\n.table td {\n    border: 1px solid #ddd;\n    padding: 8px;\n    text-align: left;\n}\n\n.table th {\n    background-color: #f2f2f2;\n}\n\n.message{\n  font-style: italic;\n  color: #777;\n}"}], "18": [{"file": "main.py", "path": "src/main.py", "code": "import cmd\nimport json\nimport os\nimport random\n\nclass Game(cmd.Cmd):\n    intro = 'Welcome to the Text Adventure Game! Type help or ? to list commands.\\n'\n    prompt = '> '\n    def __init__(self, game_data_path='game_data.json'):\n        super().__init__()\n        self.game_data_path = game_data_path\n        self.load_game_data()\n        self.current_room = self.game_data['start_room']\n        self.inventory = []\n        self.game_over = False\n\n    def load_game_data(self):\n        try:\n            with open(self.game_data_path, 'r') as f:\n                self.game_data = json.load(f)\n        except FileNotFoundError:\n            print(f'Error: Could not find game data file: {self.game_data_path}')\n            exit()\n\n    def do_look(self, arg):\n        \"\"Look around the current room.\"\"\"\n        room = self.game_data['rooms'][self.current_room]\n        print(room['description'])\n        if 'item' in room and room['item']:\n            print(f\"You see a {room['item']} here.\")\n\n    def do_go(self, arg):\n        \"\"Go to a specified room. Example: go north\"\"\"\n        room = self.game_data['rooms'][self.current_room]\n        if arg in room['exits']:\n            self.current_room = room['exits'][arg]\n            self.do_look('') # Automatically look when entering a room\n        else:\n            print(\"You can't go that way.\")\n\n    def do_take(self, arg):\n        \"\"Take an item from the current room.\"\"\"\n        room = self.game_data['rooms'][self.current_room]\n        if 'item' in room and room['item']:\n            item = room['item']\n            self.inventory.append(item)\n            print(f\"You picked up the {item}.\")\n            room['item'] = None # Remove the item from the room\n        else:\n            print(\"There's nothing here to take.\")\n\n    def do_inventory(self, arg):\n        \"\"Check your inventory.\"\"\"\n        if self.inventory:\n            print(\"You are carrying:\")\n            for item in self.inventory:\n                print(f\"- {item}\")\n        else:\n            print(\"You are not carrying anything.\")\n\n    def do_use(self, arg):\n        \"\"Use an item from your inventory.\"\"\"\n        if arg in self.inventory:\n            if arg == 'key' and self.current_room == 'locked_room':\n                print(\"You unlock the door with the key!\")\n                self.game_data['rooms']['locked_room']['description'] = \"The door is now unlocked.\"\n                self.inventory.remove(arg)\n                self.do_go('north')\n            else:\n                print(\"That item doesn't seem to be useful here.\")\n        else:\n            print(f\"You don't have a {arg} in your inventory.\")\n\n    def do_quit(self, arg):\n        \"\"Quit the game.\"\"\"\n        print(\"Thank you for playing!\")\n        return True\n\n    def do_exit(self, arg):\n        \"\"Exit the game.\"\"\"\n        return self.do_quit(arg)\n\n    def default(self, arg):\n        print(\"I don't understand that command.\")\n\n    def postloop(self):\n        print()\n        print('Game Over!')\n\nif __name__ == '__main__':\n    game = Game()\n    game.cmdloop()\n"}, {"file": "game_data.json", "path": "data/game_data.json", "code": "{\n  \"start_room\": \"entrance\",\n  \"rooms\": {\n    \"entrance\": {\n      \"description\": \"You are standing in the entrance of a dark cave. A faint light flickers from the north.\",\n      \"exits\": {\n        \"north\": \"main_chamber\"\n      }\n    },\n    \"main_chamber\": {\n      \"description\": \"You are in a large chamber.  A passage leads west, and another to the north. There is a key on the floor.\",\n      \"exits\": {\n        \"west\": \"storage_room\",\n        \"north\": \"locked_room\",\n        \"south\": \"entrance\"\n      },\n      \"item\": \"key\"\n    },\n    \"storage_room\": {\n      \"description\": \"This is a storage room filled with dusty crates and barrels.\",\n      \"exits\": {\n        \"east\": \"main_chamber\"\n      }\n    },\n    \"locked_room\": {\n      \"description\": \"This room is locked.  You can't enter without a key.\",\n      \"exits\": {\n        \"south\": \"main_chamber\"\n      }\n    }\n  }\n}"}, {"file": "index.html", "path": "web/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Text Adventure Game</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f0f0f0;\n            color: #333;\n        }\n        #game-container {\n            width: 80%;\n            margin: 20px auto;\n            background-color: #fff;\n            border-radius: 5px;\n            padding: 20px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        #game-text {\n            margin-bottom: 10px;\n            line-height: 1.6;\n        }\n        #input-container {\n            display: flex;\n            margin-top: 10px;\n        }\n        #command-input {\n            flex: 1;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n        }\n        #submit-button {\n            padding: 8px 12px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        #inventory {\n            margin-top: 20px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n        }\n        #inventory ul {\n            list-style: none;\n            padding: 0;\n        }\n        #inventory li {\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"game-container\" class=\"game-container\">\n        <div id=\"game-text\" class=\"game-text\">Welcome to the game!</div>\n        <div id=\"input-container\" class=\"input-container\">\n            <input type=\"text\" id=\"command-input\" class=\"command-input\" placeholder=\"Enter command...\">\n            <button id=\"submit-button\" class=\"submit-button\">Submit</button>\n        </div>\n        <div id=\"inventory\" class=\"inventory\">\n            <h3>Inventory</h3>\n            <ul id=\"inventory-list\"></ul>\n        </div>\n    </div>\n\n    <script>\n        const gameText = document.getElementById('game-text');\n        const commandInput = document.getElementById('command-input');\n        const submitButton = document.getElementById('submit-button');\n        const inventoryList = document.getElementById('inventory-list');\n        let inventory = [];\n        let currentRoom = 'entrance';\n\n        const gameData = {\n            \"start_room\": \"entrance\",\n            \"rooms\": {\n              \"entrance\": {\n                \"description\": \"You are standing in the entrance of a dark cave. A faint light flickers from the north.\",\n                \"exits\": {\n                  \"north\": \"main_chamber\"\n                },\n                \"item\": null\n              },\n              \"main_chamber\": {\n                \"description\": \"You are in a large chamber.  A passage leads west, and another to the north. There is a key on the floor.\",\n                \"exits\": {\n                  \"west\": \"storage_room\",\n                  \"north\": \"locked_room\",\n                  \"south\": \"entrance\"\n                },\n                \"item\": \"key\"\n              },\n              \"storage_room\": {\n                \"description\": \"This is a storage room filled with dusty crates and barrels.\",\n                \"exits\": {\n                  \"east\": \"main_chamber\"\n                },\n                \"item\": null\n              },\n              \"locked_room\": {\n                \"description\": \"This room is locked.  You can't enter without a key.\",\n                \"exits\": {\n                  \"south\": \"main_chamber\"\n                },\n                \"item\": null\n              }\n            }\n          };\n\n        function updateDisplay() {\n            const room = gameData.rooms[currentRoom];\n            let text = room.description + '<br>';\n            if (room.item) {\n                text += `You see a ${room.item} here.<br>`;\n            }\n            gameText.innerHTML = text;\n            updateInventoryDisplay();\n        }\n\n        function updateInventoryDisplay() {\n            inventoryList.innerHTML = '';\n            inventory.forEach(item => {\n                const li = document.createElement('li');\n                li.textContent = item;\n                inventoryList.appendChild(li);\n            });\n        }\n\n        function processCommand(command) {\n            command = command.toLowerCase();\n            const room = gameData.rooms[currentRoom];\n            if (command.startsWith('go ')) {\n                const direction = command.substring(3).trim();\n                if (room.exits && room.exits[direction]) {\n                    currentRoom = room.exits[direction];\n                    updateDisplay();\n                } else {\n                    gameText.innerHTML = \"You can't go that way.\";\n                }\n            } else if (command === 'look') {\n                updateDisplay();\n            } else if (command === 'take') {\n                if (room.item) {\n                    inventory.push(room.item);\n                    gameText.innerHTML = `You picked up the ${room.item}.`;\n                    room.item = null;\n                    updateDisplay();\n                } else {\n                    gameText.innerHTML = \"There's nothing here to take.\";\n                }\n            } else if (command === 'inventory') {\n                updateInventoryDisplay();\n            } else {\n                gameText.innerHTML = \"I don't understand that command.\";\n            }\n        }\n\n        submitButton.addEventListener('click', () => {\n            const command = commandInput.value.trim();\n            if (command) {\n                processCommand(command);\n                commandInput.value = '';\n            }\n        });\n\n        commandInput.addEventListener('keydown', (event) => {\n            if (event.key === 'Enter') {\n                submitButton.click();\n            }\n        });\n\n        updateDisplay();\n    </script>\n</body>\n</html>"}], "19": [{"file": "main.py", "path": "/", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nclass DeathDataProcessor:\n    def __init__(self, deathlist_path='Deathlist.csv'):\n        self.deathlist_path = deathlist_path\n        self.df = None\n\n    def ReadDeathlistData(self):\n        \"\"\"Load and read data from the 'Deathlist.csv' file.\"\"\"\n        try:\n            self.df = pd.read_csv(self.deathlist_path)\n            print(\"Deathlist data loaded successfully.\")\n            return True\n        except FileNotFoundError:\n            print(f\"Error: File not found at {self.deathlist_path}\")\n            return False\n        except Exception as e:\n            print(f\"Error loading Deathlist data: {e}\")\n            return False\n\n    def ValidateDataset(self):\n        \"\"\"Validate the dataset to ensure it contains the required data and format before processing.\"\"\"\n        if self.df is None:\n            print(\"Error: Dataframe is empty.  ReadDeathlistData must be called first.\")\n            return False\n\n        if not all(col in self.df.columns for col in ['DateOfDeath']): # Add more columns as needed\n            print(\"Error: Required columns (DateOfDeath) are missing.\")\n            return False\n\n        try:\n            pd.to_datetime(self.df['DateOfDeath'])\n        except ValueError:\n            print(\"Error: 'DateOfDeath' column contains invalid date format.\")\n            return False\n\n        print(\"Dataset validation successful.\")\n        return True\n\n    def ProcessData(self):\n        \"\"\"Process the dataset to structure data appropriately for weekly analysis.\"\"\"\n        if self.df is None or not isinstance(self.df, pd.DataFrame):\n           print(\"Error: DataFrame is not initialized. Please run ReadDeathlistData first.\")\n           return False\n        try:\n            self.df['DateOfDeath'] = pd.to_datetime(self.df['DateOfDeath'])\n            self.df['Week'] = self.df['DateOfDeath'].dt.isocalendar().week\n            self.df['Year'] = self.df['DateOfDeath'].dt.isocalendar().year\n            self.df['YearWeek'] = self.df['Year'].astype(str) + '-' + self.df['Week'].astype(str)\n            print(\"Data processed for weekly analysis.\")\n            return True\n        except Exception as e:\n            print(f\"Error processing data: {e}\")\n            return False\n\n    def CalculateWeeklyDeaths(self):\n        \"\"\"Aggregate the data to calculate the number of deaths per week.\"\"\"\n        if self.df is None or 'YearWeek' not in self.df.columns:\n            print(\"Error: Data not processed for weekly analysis.  Run ProcessData first.\")\n            return False\n        try:\n            self.weekly_deaths = self.df.groupby('YearWeek').size().reset_index(name='DeathCount')\n            print(\"Weekly deaths calculated.\")\n            return True\n        except Exception as e:\n            print(f\"Error calculating weekly deaths: {e}\")\n            return False\n\n    def GenerateHistogram(self):\n        \"\"\"Create a histogram depicting the weekly deaths calculated from the dataset.\"\"\"\n        if not hasattr(self, 'weekly_deaths') or self.weekly_deaths is None:\n            print(\"Error: Weekly deaths not calculated. Run CalculateWeeklyDeaths first.\")\n            return False\n        try:\n            plt.figure(figsize=(12, 6))\n            plt.bar(self.weekly_deaths['YearWeek'], self.weekly_deaths['DeathCount'])\n            plt.xlabel('Week')\n            plt.ylabel('Number of Deaths')\n            plt.title('Weekly Deaths Histogram')\n            plt.xticks(rotation=90, fontsize=8)\n            plt.tight_layout()\n            plt.savefig('weekly_deaths_histogram.png')  # Save the histogram to a file\n            print(\"Histogram generated and saved to weekly_deaths_histogram.png\")\n            return True\n        except Exception as e:\n            print(f\"Error generating histogram: {e}\")\n            return False\n\n    def OutputHistogram(self):\n      \"\"\"Placeholder for displaying the generated histogram (e.g., in a GUI).\"\"\"\n      print(\"OutputHistogram called. Histogram has been saved to weekly_deaths_histogram.png. A GUI can be implemented to show the histogram.\")\n\n\nif __name__ == \"__main__\":\n    processor = DeathDataProcessor()\n    if processor.ReadDeathlistData():\n        if processor.ValidateDataset():\n            if processor.ProcessData():\n                if processor.CalculateWeeklyDeaths():\n                    if processor.GenerateHistogram():\n                        processor.OutputHistogram()\n                    else:\n                        print(\"Histogram generation failed.\")\n                else:\n                    print(\"Weekly death calculation failed.\")\n            else:\n                print(\"Data processing failed.\")\n        else:\n            print(\"Dataset validation failed.\")\n    else:\n        print(\"Data loading failed.\")"}, {"file": "Deathlist.csv", "path": "/", "code": "DateOfDeath,CauseOfDeath\n2023-01-05,Heart Disease\n2023-01-12,Cancer\n2023-01-19,Accident\n2023-01-26,Stroke\n2023-02-02,Heart Disease\n2023-02-09,Cancer\n2023-02-16,Accident\n2023-02-23,Stroke\n2023-03-02,Heart Disease\n2023-03-09,Cancer\n2023-03-16,Accident\n2023-03-23,Stroke\n2023-12-28,Old Age\n2024-01-04,Pneumonia\n2024-01-11,Covid-19\n2024-01-18,Flu\n2024-01-25,Heart Attack\n2024-02-01,Cancer\n2024-02-08,Accident\n2024-02-15,Stroke\n2024-02-22,Diabetes"}, {"file": "requirements.txt", "path": "/", "code": "pandas\nmatplotlib"}], "20": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blogproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "blogproject/settings.py", "path": "blogproject/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blogproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'blogproject.wsgi.application'\n\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "blogproject/urls.py", "path": "blogproject/", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "blogproject/wsgi.py", "path": "blogproject/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blogproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "blog/models.py", "path": "blog/", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Category(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    author = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    text = models.TextField()\n    created_date = models.DateTimeField(default=timezone.now)\n    published_date = models.DateTimeField(blank=True, null=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE, default=1)\n\n    def publish(self):\n        self.published_date = timezone.now()\n        self.save()\n\n    def __str__(self):\n        return self.title"}, {"file": "blog/urls.py", "path": "blog/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('post/new/', views.post_new, name='post_new'),\n    path('post/<int:pk>/edit/', views.post_edit, name='post_edit'),\n    path('category/<int:pk>/', views.category_posts, name='category_posts'),\n    path('about/', views.about, name='about'),\n    path('archive/', views.archive, name='archive'),\n    path('category_management/', views.category_management, name='category_management'),\n    path('post/<int:pk>/delete/', views.post_delete, name='post_delete'),\n]"}, {"file": "blog/views.py", "path": "blog/", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.utils import timezone\nfrom .models import Post, Category\nfrom .forms import PostForm, CategoryForm\nfrom django.contrib.auth.decorators import login_required\n\ndef home(request):\n    posts = Post.objects.filter(published_date__lte=timezone.now()).order_by('-published_date')[:5] #Display Latest 5 blogs\n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_detail(request):\n    return render(request,'blog/post_detail.html', {})\n    #post = get_object_or_404(Post, pk=pk)\n    #return render(request, 'blog/post_detail.html', {'post': post})\n\n@login_required\ndef post_new(request):\n    if request.method == \"POST\":\n        form = PostForm(request.POST)\n        if form.is_valid():\n            post = form.save(commit=False)\n            post.author = request.user\n            post.published_date = timezone.now()\n            post.save()\n            return redirect('post_detail') #, pk=post.pk)\n    else:\n        form = PostForm()\n    return render(request, 'blog/post_edit.html', {'form': form})\n\n@login_required\ndef post_edit(request):\n    return render(request, 'blog/post_edit.html', {})\n    #post = get_object_or_404(Post, pk=pk)\n    #if request.method == \"POST\":\n    #    form = PostForm(request.POST, instance=post)\n    #    if form.is_valid():\n    #        post = form.save(commit=False)\n    #        post.author = request.user\n    #        post.published_date = timezone.now()\n    #        post.save()\n    #        return redirect('post_detail', pk=post.pk)\n    #else:\n    #    form = PostForm(instance=post)\n    #return render(request, 'blog/post_edit.html', {'form': form})\n\n@login_required\ndef post_delete(request):\n    return render(request,'blog/post_delete.html', {})\n\ndef category_posts(request):\n    return render(request, 'blog/category_posts.html', {})\n    #category = get_object_or_404(Category, pk=pk)\n    #posts = Post.objects.filter(category=category, published_date__lte=timezone.now()).order_by('-published_date')\n    #return render(request, 'blog/category_posts.html', {'category': category, 'posts': posts})\n\ndef about(request):\n    return render(request, 'blog/about.html', {})\n\n\ndef archive(request):\n    return render(request, 'blog/archive.html', {})\n\n@login_required\ndef category_management(request):\n    if request.method == \"POST\":\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            category = form.save()\n            return redirect('category_management')\n    else:\n        form = CategoryForm()\n        categories = Category.objects.all()\n    return render(request, 'blog/category_management.html', {'form': form, 'categories': categories})\n"}, {"file": "blog/forms.py", "path": "blog/", "code": "from django import forms\n\nfrom .models import Post, Category\n\nclass PostForm(forms.ModelForm):\n\n    class Meta:\n        model = Post\n        fields = ('title', 'text', 'category')\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ('name',)"}, {"file": "templates/blog/base.html", "path": "templates/blog/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css\" integrity=\"sha512-9usAa10IRO0HhonpyAIVpjrylPvoDwiPUiKdWk5t3PyolY1cOd4DSE0Ga+ri4AuTroPR5aQvXU9xC6qOPnzFeg==\" crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\n\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .blog-post {\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <header class=\"bg-light py-3\">\n        <div class=\"container\">\n            <nav id=\"mainNav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <a id=\"navBrand\" class=\"navbar-brand\" href=\"{% url 'home' %}\">My Blog</a>\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span class=\"navbar-toggler-icon\"></span>\n                </button>\n                <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                    <ul class=\"navbar-nav ml-auto\">\n                        <li class=\"nav-item\">\n                            <a id=\"homeLink\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a id=\"aboutLink\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n                        </li>\n                        <li class=\"nav-item\">\n                            <a id=\"archiveLink\" class=\"nav-link\" href=\"{% url 'archive' %}\">Archive</a>\n                        </li>\n                         <li class=\"nav-item\">\n                            <a id=\"categoryManagementLink\" class=\"nav-link\" href=\"{% url 'category_management' %}\">Categories</a>\n                        </li>\n\n                        {% if user.is_authenticated %}\n                            <li class=\"nav-item\">\n                                <a id=\"newPostLink\" class=\"nav-link\" href=\"{% url 'post_new' %}\">New Post</a>\n                            </li>\n                            <li class=\"nav-item\">\n                                <a id=\"logoutLink\" class=\"nav-link\" href=\"#\">Logout</a>\n                            </li>\n                        {% else %}\n                            <li class=\"nav-item\">\n                                <a id=\"loginLink\" class=\"nav-link\" href=\"#\">Login</a>\n                            </li>\n                        {% endif %}\n                    </ul>\n                    <form class=\"form-inline my-2 my-lg-0\">\n                        <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\n                        <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n                    </form>\n\n                </div>\n            </nav>\n        </div>\n    </header>\n\n    <main class=\"container mt-4\">\n        {% block content %}\n        {% endblock %}\n    </main>\n\n    <footer class=\"bg-dark text-white py-4 mt-5\">\n        <div class=\"container text-center\">\n            <p id=\"footerCopyright\" >&copy; 2023 My Blog</p>\n        </div>\n    </footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "templates/blog/home.html", "path": "templates/blog/", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1 id=\"homeTitle\" class=\"mb-4\">Latest Blog Posts</h1>\n    <div id=\"blogPostsContainer\">\n        {% for post in posts %}\n            <div id=\"post-{{ post.pk }}\" class=\"blog-post\">\n                <h2 id=\"postTitle-{{ post.pk }}\" class=\"post-title\"><a href=\"{% url 'post_detail'  %}\">{{ post.title }}</a></h2>\n                <p id=\"postDate-{{ post.pk }}\" class=\"post-date\">Published: {{ post.published_date }}</p>\n                <p id=\"postCategory-{{ post.pk }}\">Category: {{ post.category.name }}</p>\n                <p id=\"postText-{{ post.pk }}\" class=\"post-text\">{{ post.text|truncatechars:200 }}</p>\n            </div>\n        {% endfor %}\n    </div>\n{% endblock %}"}, {"file": "templates/blog/post_detail.html", "path": "templates/blog/", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"postDetailContainer\" class=\"post\">\n        <h2 id=\"postDetailTitle\" class=\"post-title\">Post Title</h2>\n        <p id=\"postDetailDate\" class=\"post-date\">Published: Date</p>\n        <p id=\"postDetailCategory\" class=\"post-category\">Category: Category Name</p>\n        <p id=\"postDetailText\" class=\"post-text\">Post Content</p>\n\n        <hr>\n\n        <h3 id=\"commentsTitle\">Comments</h3>\n        <div id=\"commentsSection\">\n            <p id=\"noCommentsMessage\">No comments yet.</p>\n            <!-- Comments will be displayed here dynamically -->\n        </div>\n\n        <hr>\n\n        <form id=\"commentForm\">\n            <div class=\"form-group\">\n                <label for=\"commentText\" id=\"commentTextLabel\">Your Comment:</label>\n                <textarea class=\"form-control\" id=\"commentText\" rows=\"3\"></textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"submitCommentButton\">Submit Comment</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "templates/blog/post_edit.html", "path": "templates/blog/", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h2 id=\"postEditTitle\" class=\"mb-4\">{% if form.instance.pk %}Edit Post{% else %}New Post{% endif %}</h2>\n    <form id=\"postEditForm\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"id_title\" id=\"titleLabel\">Title:</label>\n            {{ form.title }}\n        </div>\n        <div class=\"form-group\">\n            <label for=\"id_text\" id=\"textLabel\">Content:</label>\n            {{ form.text }}\n        </div>\n        <div class=\"form-group\">\n          <label for=\"id_category\" id=\"categoryLabel\">Category:</label>\n          {{ form.category }}\n        </div>\n        <button type=\"submit\" id=\"saveButton\" class=\"btn btn-primary\">Save</button>\n    </form>\n{% endblock %}"}, {"file": "templates/blog/category_posts.html", "path": "templates/blog/", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h2 id=\"categoryPostsTitle\" class=\"mb-4\">Category: Category Name</h2>\n\n    <div id=\"categoryPostsContainer\">\n        <div id=\"post-1\" class=\"blog-post\">\n            <h3 id=\"postTitle-1\" class=\"post-title\">Post Title 1</h3>\n            <p id=\"postDate-1\" class=\"post-date\">Published: Date</p>\n            <p id=\"postText-1\" class=\"post-text\">Post Content 1</p>\n        </div>\n\n        <div id=\"post-2\" class=\"blog-post\">\n            <h3 id=\"postTitle-2\" class=\"post-title\">Post Title 2</h3>\n            <p id=\"postDate-2\" class=\"post-date\">Published: Date</p>\n            <p id=\"postText-2\" class=\"post-text\">Post Content 2</p>\n        </div>\n    </div>\n\n{% endblock %}"}, {"file": "templates/blog/about.html", "path": "templates/blog/", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"aboutContainer\">\n        <h2 id=\"aboutTitle\" class=\"mb-4\">About the Author</h2>\n        <div id=\"authorInfo\">\n            <p id=\"authorName\"><strong>Name:</strong> John Doe</p>\n            <p id=\"authorBio\"><strong>Bio:</strong> Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor.</p>\n        </div>\n\n        <hr>\n\n        <h3 id=\"contactTitle\">Contact Me</h3>\n        <form id=\"contactForm\">\n            <div class=\"form-group\">\n                <label for=\"name\" id=\"nameLabel\">Name:</label>\n                <input type=\"text\" class=\"form-control\" id=\"name\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"email\" id=\"emailLabel\">Email:</label>\n                <input type=\"email\" class=\"form-control\" id=\"email\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"message\" id=\"messageLabel\">Message:</label>\n                <textarea class=\"form-control\" id=\"message\" rows=\"5\"></textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"submitButton\">Submit</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "templates/blog/archive.html", "path": "templates/blog/", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h2 id=\"archiveTitle\" class=\"mb-4\">Archive</h2>\n\n    <div id=\"archiveList\">\n        <ul class=\"list-unstyled\">\n            <li id=\"archiveMonth-1\"><a href=\"#\">January 2023</a></li>\n            <li id=\"archiveMonth-2\"><a href=\"#\">December 2022</a></li>\n            <li id=\"archiveMonth-3\"><a href=\"#\">November 2022</a></li>\n            <!-- Add more months as needed -->\n        </ul>\n    </div>\n\n{% endblock %}"}, {"file": "templates/blog/category_management.html", "path": "templates/blog/", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h2 id=\"categoryManagementTitle\" class=\"mb-4\">Category Management</h2>\n\n    <form id=\"categoryForm\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"id_name\" id=\"categoryNameLabel\">Category Name:</label>\n            {{ form.name }}\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\" id=\"addCategoryButton\">Add Category</button>\n    </form>\n\n    <hr>\n\n    <h3 id=\"categoryListTitle\">Existing Categories</h3>\n    <ul id=\"categoryList\" class=\"list-group\">\n        {% for category in categories %}\n            <li id=\"category-{{ category.pk }}\" class=\"list-group-item\">\n                {{ category.name }}\n                <a href=\"#\" id=\"editCategory-{{ category.pk }}\" class=\"float-right ml-2\">Edit</a>\n                <a href=\"#\" id=\"deleteCategory-{{ category.pk }}\" class=\"float-right\">Delete</a>\n            </li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "templates/blog/post_delete.html", "path": "templates/blog/", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"deleteConfirmationContainer\">\n        <h2 id=\"deleteConfirmationTitle\" class=\"mb-4\">Delete Post</h2>\n        <p id=\"deleteConfirmationMessage\">Are you sure you want to delete this post?</p>\n\n        <button id=\"confirmDeleteButton\" class=\"btn btn-danger\">Confirm Delete</button>\n        <a href=\"#\" id=\"cancelDeleteLink\" class=\"btn btn-secondary\">Cancel</a>\n    </div>\n{% endblock %}"}, {"file": "blog/admin.py", "path": "blog/", "code": "from django.contrib import admin\nfrom .models import Post, Category\n\nadmin.site.register(Post)\nadmin.site.register(Category)"}, {"file": "static/css/style.css", "path": "static/css/", "code": "/* Add your custom CSS styles here */\n"}, {"file": "static/js/script.js", "path": "static/js/", "code": "// Add your custom JavaScript here"}]}