{"1": [{"file": "urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "wsgi.py", "path": "bmi_calculator/bmi_calculator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "bmi_calculator/calculator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "bmi_calculator/calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calculator'"}, {"file": "models.py", "path": "bmi_calculator/calculator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "views.py", "path": "bmi_calculator/calculator/views.py", "code": "from django.shortcuts import render\n\ndef bmi_calculator(request):\n    bmi = None\n    category = None\n    if request.method == 'POST':\n        weight = float(request.POST.get('weight'))\n        height = float(request.POST.get('height'))\n        \n        bmi = weight / (height * height)\n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif 18.5 <= bmi < 25:\n            category = 'Normal weight'\n        elif 25 <= bmi < 30:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n    return render(request, 'calculator/bmi_calculator.html', {'bmi': bmi, 'category': category})\n"}, {"file": "urls.py", "path": "bmi_calculator/calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/calculator/bmi_calculator.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"main-title\" class=\"main-title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"weight-group\" class=\"form-group\">\n                <label id=\"weight-label\" for=\"weight\" class=\"form-label\">Weight (kg):</label>\n                <input type=\"number\" id=\"weight\" name=\"weight\" class=\"form-input\" required>\n            </div>\n            <div id=\"height-group\" class=\"form-group\">\n                <label id=\"height-label\" for=\"height\" class=\"form-label\">Height (m):</label>\n                <input type=\"number\" step=\"0.01\" id=\"height\" name=\"height\" class=\"form-input\" required>\n            </div>\n            <button id=\"calculate-button\" type=\"submit\" class=\"calculate-button\">Calculate</button>\n        </form>\n\n        {% if bmi %}\n        <div id=\"result\" class=\"result\">\n            <p id=\"bmi-value\" class=\"bmi-value\">Your BMI: {{ bmi|floatformat:2 }}</p>\n            <p id=\"bmi-category\" class=\"bmi-category\">Category: {{ category }}</p>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "bmi_calculator/static/css/style.css", "code": ".container {\n    width: 500px;\n    margin: 50px auto;\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    text-align: center;\n}\n\n.main-title {\n    font-size: 2em;\n    margin-bottom: 20px;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.form-input {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.calculate-button {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.calculate-button:hover {\n    background-color: #3e8e41;\n}\n\n.result {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n}\n\n.bmi-value {\n    font-size: 1.2em;\n    font-weight: bold;\n}\n\n.bmi-category {\n    font-style: italic;\n}"}, {"file": "manage.py", "path": "bmi_calculator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"bmi_calculator.settings\")\n\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}], "3": [{"file": "manage.py", "path": "password_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "password_generator/password_generator/__init__.py", "code": " \"\"\"\nPackage for password_generator.\n\"\"\""}, {"file": "settings.py", "path": "password_generator/password_generator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION_VARIABLE = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] "}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('generator.urls')),\n]"}, {"file": "wsgi.py", "path": "password_generator/password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "password_generator/generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "password_generator/generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "password_generator/generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    name = 'generator'"}, {"file": "models.py", "path": "password_generator/generator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "password_generator/generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password'),\n]"}, {"file": "views.py", "path": "password_generator/generator/views.py", "code": "from django.shortcuts import render\nimport random\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\n\ndef password(request):\n    characters = list('abcdefghijklmnopqrstuvwxyz')\n\n    if request.GET.get('uppercase'):\n        characters.extend(list('ABCDEFGHIJKLMNOPQRSTUVWXYZ'))\n    if request.GET.get('special'):\n        characters.extend(list('!@#$%^&*()'))\n    if request.GET.get('numbers'):\n        characters.extend(list('0123456789'))\n\n    length = int(request.GET.get('length', 12))\n\n    the_password = ''\n    for x in range(length):\n        the_password += random.choice(characters)\n\n\n    return render(request, 'generator/password.html', {'password':the_password})"}, {"file": "home.html", "path": "password_generator/generator/templates/generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <style>\n      .container {\n        width: 50%;\n        margin: 50px auto;\n        padding: 20px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        text-align: center;\n      }\n\n      .form-group {\n        margin-bottom: 15px;\n      }\n\n      label {\n        display: block;\n        margin-bottom: 5px;\n        font-weight: bold;\n      }\n\n      input[type=\"number\"] {\n        width: 100%;\n        padding: 8px;\n        border: 1px solid #ddd;\n        border-radius: 4px;\n      }\n\n      button {\n        background-color: #4CAF50;\n        color: white;\n        padding: 10px 15px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n      }\n\n      button:hover {\n        background-color: #3e8e41;\n      }\n    </style>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Password Generator</h1>\n\n        <form id=\"passwordForm\" action=\"password/\">\n            <div id=\"lengthGroup\" class=\"form-group\">\n                <label id=\"lengthLabel\" for=\"length\">Password Length:</label>\n                <input id=\"length\" type=\"number\" name=\"length\" value=\"12\">\n            </div>\n\n            <div id=\"uppercaseGroup\" class=\"form-group\">\n                <label id=\"uppercaseLabel\" for=\"uppercase\">Uppercase</label>\n                <input id=\"uppercase\" type=\"checkbox\" name=\"uppercase\">\n            </div>\n\n            <div id=\"numbersGroup\" class=\"form-group\">\n                <label id=\"numbersLabel\" for=\"numbers\">Numbers</label>\n                <input id=\"numbers\" type=\"checkbox\" name=\"numbers\">\n            </div>\n\n            <div id=\"specialGroup\" class=\"form-group\">\n                <label id=\"specialLabel\" for=\"special\">Special Characters</label>\n                <input id=\"special\" type=\"checkbox\" name=\"special\">\n            </div>\n\n            <button id=\"generateButton\" type=\"submit\" class=\"btn btn-primary\">Generate Password</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "password.html", "path": "password_generator/generator/templates/generator/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Password</title>\n    <style>\n      .container {\n        width: 50%;\n        margin: 50px auto;\n        padding: 20px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        text-align: center;\n      }\n\n      .password-display {\n        font-size: 1.5em;\n        margin-bottom: 20px;\n      }\n\n      .back-button {\n        background-color: #4CAF50;\n        color: white;\n        padding: 10px 15px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n      }\n\n      .back-button:hover {\n        background-color: #3e8e41;\n      }\n    </style>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Your Password</h1>\n        <h2 id=\"passwordDisplay\" class=\"password-display\">{{ password }}</h2>\n        <a id=\"backLink\" href=\"/\" class=\"back-button\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "password_generator/static/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/qr_generator_project/", "code": "default_app_config = 'qr_generator_project.apps.QrGeneratorProjectConfig'"}, {"file": "apps.py", "path": "/qr_generator_project/", "code": "from django.apps import AppConfig\n\n\nclass QrGeneratorProjectConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_generator_project'"}, {"file": "settings.py", "path": "/qr_generator_project/", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_generator_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_generator_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Corrected this line\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "/qr_generator_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator_app.urls')),\n]\n\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"}, {"file": "wsgi.py", "path": "/qr_generator_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/qr_generator_app/", "code": "default_app_config = 'qr_generator_app.apps.QrGeneratorAppConfig'"}, {"file": "apps.py", "path": "/qr_generator_app/", "code": "from django.apps import AppConfig\n\n\nclass QrGeneratorAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_generator_app'"}, {"file": "forms.py", "path": "/qr_generator_app/", "code": "from django import forms\n\nclass QRCodeForm(forms.Form):\n    data = forms.CharField(label='Data to encode', widget=forms.Textarea(attrs={'class': 'form-control', 'rows': 3, 'id':'data-input'}))\n    size = forms.IntegerField(label='Size', initial=10, min_value=1, max_value=40, widget=forms.NumberInput(attrs={'class': 'form-control', 'id':'size-input'}))\n    border = forms.IntegerField(label='Border', initial=4, min_value=0, max_value=10, widget=forms.NumberInput(attrs={'class': 'form-control', 'id':'border-input'}))\n    version = forms.IntegerField(label='Version', required=False, min_value=1, max_value=40, widget=forms.NumberInput(attrs={'class': 'form-control', 'id':'version-input'}))\n    error_correction = forms.ChoiceField(\n        label='Error Correction',\n        choices=[('L', 'L - Low (7%)'), ('M', 'M - Medium (15%)'), ('Q', 'Q - Quartile (25%)'), ('H', 'H - High (30%)')],\n        widget=forms.Select(attrs={'class': 'form-select', 'id':'error-correction-select'})\n    )\n"}, {"file": "urls.py", "path": "/qr_generator_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.qr_generator, name='qr_generator'),\n]"}, {"file": "views.py", "path": "/qr_generator_app/", "code": "import qrcode\nfrom io import BytesIO\nimport base64\nfrom django.shortcuts import render\nfrom .forms import QRCodeForm\n\ndef qr_generator(request):\n    img_data = None\n    if request.method == 'POST':\n        form = QRCodeForm(request.POST)\n        if form.is_valid():\n            data = form.cleaned_data['data']\n            size = form.cleaned_data['size']\n            border = form.cleaned_data['border']\n            version = form.cleaned_data['version'] or None  # Version can be None\n            error_correction_level = form.cleaned_data['error_correction']\n\n            error_correction_mapping = {\n                'L': qrcode.constants.ERROR_CORRECT_L,\n                'M': qrcode.constants.ERROR_CORRECT_M,\n                'Q': qrcode.constants.ERROR_CORRECT_Q,\n                'H': qrcode.constants.ERROR_CORRECT_H,\n            }\n            error_correction = error_correction_mapping[error_correction_level]\n\n            qr = qrcode.QRCode(\n                version=version,\n                error_correction=error_correction,\n                box_size=size,\n                border=border,\n            )\n\n            qr.add_data(data)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n            # Save image to a bytes buffer\n            buffer = BytesIO()\n            img.save(buffer, format=\"PNG\")\n            img_val = buffer.getvalue()\n\n            # Encode to base64\n            img_data = base64.b64encode(img_val).decode()\n\n            img_data = f'data:image/png;base64,{img_data}'\n    else:\n        form = QRCodeForm()\n\n    return render(request, 'qr_generator_app/qr_generator.html', {'form': form, 'qr_image': img_data})\n"}, {"file": "qr_generator.html", "path": "/templates/qr_generator_app/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <link rel=\"stylesheet\" href=\"{% static 'qr_generator_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container mt-5\" id=\"qr-generator-container\">\n        <h1 class=\"mb-4\" id=\"page-title\">QR Code Generator</h1>\n        <div class=\"row\">\n            <div class=\"col-md-6\" id=\"form-column\">\n                <form method=\"post\" id=\"qr-form\">\n                    {% csrf_token %}\n                    <div class=\"mb-3\" id=\"data-field\">\n                        {{ form.data.errors }}\n                        <label for=\"{{ form.data.id_for_label }}\" class=\"form-label\">{{ form.data.label }}</label>\n                        {{ form.data }}\n                    </div>\n                    <div class=\"mb-3\" id=\"size-field\">\n                        {{ form.size.errors }}\n                        <label for=\"{{ form.size.id_for_label }}\" class=\"form-label\">{{ form.size.label }}</label>\n                        {{ form.size }}\n                    </div>\n                    <div class=\"mb-3\" id=\"border-field\">\n                        {{ form.border.errors }}\n                        <label for=\"{{ form.border.id_for_label }}\" class=\"form-label\">{{ form.border.label }}</label>\n                        {{ form.border }}\n                    </div>\n                   <div class=\"mb-3\" id=\"version-field\">\n                        {{ form.version.errors }}\n                        <label for=\"{{ form.version.id_for_label }}\" class=\"form-label\">{{ form.version.label }} (Optional)</label>\n                        {{ form.version }}\n                        <small class=\"text-muted\">Leave blank for auto-detection.</small>\n                    </div>\n                    <div class=\"mb-3\" id=\"error-correction-field\">\n                        {{ form.error_correction.errors }}\n                        <label for=\"{{ form.error_correction.id_for_label }}\" class=\"form-label\">{{ form.error_correction.label }}</label>\n                        {{ form.error_correction }}\n                    </div>\n                    <button type=\"submit\" class=\"btn btn-primary\" id=\"generate-button\">Generate QR Code</button>\n                </form>\n            </div>\n            <div class=\"col-md-6\" id=\"qr-code-column\">\n                {% if qr_image %}\n                    <img src=\"{{ qr_image }}\" alt=\"Generated QR Code\" class=\"img-fluid\" id=\"qr-code-image\">\n                {% endif %}\n            </div>\n        </div>\n    </div>\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>"}, {"file": "style.css", "path": "/static/qr_generator_app/", "code": "#qr-generator-container {\n    max-width: 800px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\n#page-title {\n    text-align: center;\n    color: #333;\n}\n\n#form-column {\n    padding-right: 20px;\n}\n\n#qr-code-column {\n    text-align: center;\n}\n\n#qr-code-image {\n    max-width: 100%;\n    height: auto;\n    border: 1px solid #ccc;\n    padding: 5px;\n    background-color: #fff;\n}\n\n#data-field label,\n#size-field label,\n#border-field label,\n#version-field label,\n#error-correction-field label {\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n}\n\n#generate-button {\n    width: 100%;\n    margin-top: 1rem;\n}\n\n"}, {"file": "__init__.py", "path": "/static/qr_generator_app/", "code": ""}], "5": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'md_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "/md_converter/", "code": "default_app_config = 'md_converter.apps.MdConverterConfig'"}, {"file": "apps.py", "path": "/md_converter/", "code": "from django.apps import AppConfig\n\n\nclass MdConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'md_converter'"}, {"file": "models.py", "path": "/md_converter/", "code": "from django.db import models\n\n# Create your models here. No models needed for this converter."}, {"file": "admin.py", "path": "/md_converter/", "code": "from django.contrib import admin\n\n# Register your models here. No models needed for this converter."}, {"file": "forms.py", "path": "/md_converter/", "code": "from django import forms\n\nclass MarkdownForm(forms.Form):\n    markdown_text = forms.CharField(widget=forms.Textarea(attrs={'id': 'markdown-input', 'class': 'form-control', 'rows': 10}), label=\"Markdown Text\")"}, {"file": "views.py", "path": "/md_converter/", "code": "import markdown\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import MarkdownForm\n\ndef convert_markdown(request):\n    if request.method == 'POST':\n        form = MarkdownForm(request.POST)\n        if form.is_valid():\n            markdown_text = form.cleaned_data['markdown_text']\n            html_output = markdown.markdown(markdown_text)\n            return render(request, 'md_converter/result.html', {'html_output': html_output})\n    else:\n        form = MarkdownForm()\n    return render(request, 'md_converter/index.html', {'form': form})"}, {"file": "urls.py", "path": "/md_converter/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.convert_markdown, name='convert_markdown'),\n]"}, {"file": "__init__.py", "path": "/md_converter/migrations/", "code": ""}, {"file": "0001_initial.py", "path": "/md_converter/migrations/", "code": "# Generated by Django 4.2.7 on 2023-11-16 16:25\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='MarkdownEntry',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('markdown_text', models.TextField()),\n                ('html_output', models.TextField()),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]\n"}, {"file": "settings.py", "path": "/", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'md_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'md_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'md_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Add this line\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "/", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('md_converter.urls')),\n]"}, {"file": "wsgi.py", "path": "/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'md_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "index.html", "path": "/templates/md_converter/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            padding: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"main-container\">\n        <h1 id=\"title\" class=\"mb-4\">Markdown to HTML Converter</h1>\n        <form method=\"post\" id=\"markdown-form\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"form-group-markdown\">\n                {{ form.as_p }}\n            </div>\n            <button type=\"submit\" id=\"convert-button\" class=\"btn btn-primary\">Convert to HTML</button>\n        </form>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "result.html", "path": "/templates/md_converter/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Conversion Result</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            padding: 20px;\n        }\n        #output-container {\n            border: 1px solid #ccc;\n            padding: 10px;\n            margin-top: 20px;\n            background-color: #f9f9f9;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"result-container\">\n        <h1 id=\"result-title\" class=\"mb-4\">Conversion Result</h1>\n        <div id=\"output-container\" class=\"\">\n            {{ html_output|safe }}\n        </div>\n        <a href=\"{% url 'convert_markdown' %}\" id=\"back-button\" class=\"btn btn-secondary mt-3\">Back to Converter</a>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}], "6": [{"file": "manage.py", "path": "todo_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "todo_project/todo_project/__init__.py", "code": " \"\"\"\nPackage for todo_project project.\n\"\"\""}, {"file": "settings.py", "path": "todo_project/todo_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo',\n    'chartjs',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "todo_project/todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo.urls')),\n]"}, {"file": "wsgi.py", "path": "todo_project/todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "todo_project/todo/__init__.py", "code": " \"\"\"\nPackage for todo app.\n\"\"\""}, {"file": "admin.py", "path": "todo_project/todo/admin.py", "code": "from django.contrib import admin\nfrom .models import Task\n\nadmin.site.register(Task)"}, {"file": "apps.py", "path": "todo_project/todo/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoConfig(AppConfig):\n    name = 'todo'"}, {"file": "forms.py", "path": "todo_project/todo/forms.py", "code": "from django import forms\nfrom .models import Task\n\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'completed']"}, {"file": "models.py", "path": "todo_project/todo/models.py", "code": "from django.db import models\n\n\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "urls.py", "path": "todo_project/todo/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.task_list, name='task_list'),\n    path('task/<int:pk>/', views.task_detail, name='task_detail'),\n    path('task/new/', views.task_new, name='task_new'),\n    path('task/<int:pk>/edit/', views.task_edit, name='task_edit'),\n    path('task/<int:pk>/delete/', views.task_delete, name='task_delete'),\n    path('chart/', views.task_completion_chart, name='task_completion_chart'),\n]"}, {"file": "views.py", "path": "todo_project/todo/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Task\nfrom .forms import TaskForm\nfrom django.http import JsonResponse\n\n\ndef task_list(request):\n    tasks = Task.objects.all()\n    return render(request, 'todo/task_list.html', {'tasks': tasks})\n\n\ndef task_detail(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    return render(request, 'todo/task_detail.html', {'task': task})\n\n\ndef task_new(request):\n    if request.method == \"POST\":\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save()\n            return redirect('task_detail', pk=task.pk)\n    else:\n        form = TaskForm()\n    return render(request, 'todo/task_edit.html', {'form': form})\n\n\ndef task_edit(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    if request.method == \"POST\":\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            task = form.save()\n            return redirect('task_detail', pk=task.pk)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'todo/task_edit.html', {'form': form})\n\n\ndef task_delete(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    task.delete()\n    return redirect('task_list')\n\n\ndef task_completion_chart(request):\n    completed_count = Task.objects.filter(completed=True).count()\n    incomplete_count = Task.objects.filter(completed=False).count()\n\n    data = {\n        'labels': ['Completed', 'Incomplete'],\n        'datasets': [{\n            'label': 'Task Completion',\n            'data': [completed_count, incomplete_count],\n            'backgroundColor': ['rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],\n            'borderColor': ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],\n            'borderWidth': 1\n        }]\n    }\n\n    return JsonResponse(data)"}, {"file": "task_list.html", "path": "todo_project/templates/todo/task_list.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Todo List</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"{% static 'todo/style.css' %}\">\n</head>\n<body>\n    <div id=\"app\" class=\"container mt-5\">\n        <h1 id=\"app-title\" class=\"mb-4\">Todo List</h1>\n        <a id=\"add-task-link\" href=\"{% url 'task_new' %}\" class=\"btn btn-primary mb-3\">Add Task</a>\n        <table id=\"task-table\" class=\"table\">\n            <thead>\n                <tr>\n                    <th>Title</th>\n                    <th>Completed</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for task in tasks %}\n                <tr id=\"task-row-{{ task.pk }}\" class=\"task-row\">\n                    <td><a id=\"task-link-{{ task.pk }}\" href=\"{% url 'task_detail' pk=task.pk %}\">{{ task.title }}</a></td>\n                    <td>{{ task.completed }}</td>\n                    <td>\n                        <a id=\"edit-task-link-{{ task.pk }}\" href=\"{% url 'task_edit' pk=task.pk %}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                        <a id=\"delete-task-link-{{ task.pk }}\" href=\"{% url 'task_delete' pk=task.pk %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                    </td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n\n        <h2>Task Completion Chart</h2>\n        <canvas id=\"taskChart\" width=\"400\" height=\"200\"></canvas>\n\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <script>\n        const ctx = document.getElementById('taskChart').getContext('2d');\n        fetch('/chart/')\n            .then(response => response.json())\n            .then(data => {\n                new Chart(ctx, {\n                    type: 'pie',\n                    data: data,\n                    options: {\n                        responsive: true,\n                        maintainAspectRatio: false,\n                        plugins: {\n                          title: {\n                            display: true,\n                            text: 'Task Completion Status'\n                          }\n                        }\n                    }\n                });\n            });\n    </script>\n</body>\n</html>"}, {"file": "task_detail.html", "path": "todo_project/templates/todo/task_detail.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Task Detail</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"{% static 'todo/style.css' %}\">\n</head>\n<body>\n    <div id=\"task-detail-container\" class=\"container mt-5\">\n        <h1 id=\"task-detail-title\">{{ task.title }}</h1>\n        <p id=\"task-detail-description\">{{ task.description }}</p>\n        <p id=\"task-detail-completed\">Completed: {{ task.completed }}</p>\n        <p id=\"task-detail-created\">Created at: {{ task.created_at }}</p>\n        <p id=\"task-detail-updated\">Updated at: {{ task.updated_at }}</p>\n        <a id=\"edit-task-link\" href=\"{% url 'task_edit' pk=task.pk %}\" class=\"btn btn-secondary\">Edit</a>\n        <a id=\"delete-task-link\" href=\"{% url 'task_delete' pk=task.pk %}\" class=\"btn btn-danger\">Delete</a>\n        <a id=\"back-to-list-link\" href=\"{% url 'task_list' %}\" class=\"btn btn-primary\">Back to List</a>\n    </div>\n</body>\n</html>"}, {"file": "task_edit.html", "path": "todo_project/templates/todo/task_edit.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Task Edit</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"{% static 'todo/style.css' %}\">\n</head>\n<body>\n    <div id=\"task-edit-container\" class=\"container mt-5\">\n        <h1 id=\"task-edit-title\">{% if form.instance.pk %}Edit Task{% else %}New Task{% endif %}</h1>\n        <form id=\"task-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"task-form-title\" class=\"form-group\">\n                <label for=\"id_title\">Title:</label>\n                {{ form.title }}\n            </div>\n            <div id=\"task-form-description\" class=\"form-group\">\n                <label for=\"id_description\">Description:</label>\n                {{ form.description }}\n            </div>\n            <div id=\"task-form-completed\" class=\"form-check\">\n                <label class=\"form-check-label\" for=\"id_completed\">Completed:</label>\n                {{ form.completed }}\n            </div>\n            <button id=\"task-form-submit\" type=\"submit\" class=\"btn btn-primary\">Save</button>\n            <a id=\"task-form-cancel\" href=\"{% url 'task_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "todo_project/static/todo/style.css", "code": "/* Example CSS - You can add more styles here */\nbody {\n    font-family: sans-serif;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.task-row {\n  margin-bottom: 10px;\n  padding: 10px;\n  border: 1px solid #ddd;\n  background-color: #f9f9f9;\n}\n\n.task-row:hover {\n  background-color: #eee;\n}\n"}], "7": [{"file": "settings.py", "path": "budget_tracker/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'  # Change this in production!\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_tracker.wsgi.application'\n\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] \n"}, {"file": "urls.py", "path": "budget_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('tracker.urls')),  # Include the tracker app's URLs\n]"}, {"file": "wsgi.py", "path": "budget_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "tracker/models.py", "code": "from django.db import models\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    description = models.CharField(max_length=200)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.date} - {self.description} - {self.amount}'"}, {"file": "views.py", "path": "tracker/views.py", "code": "from django.shortcuts import render\nfrom .models import Transaction\nimport datetime\n\ndef index(request):\n    transactions = Transaction.objects.all().order_by('-date')\n\n    # Calculate balance history for the chart\n    balance = 0\n    balance_history = []\n    dates = []\n    for transaction in reversed(transactions):\n        balance += float(transaction.amount)  #Important to cast decimal to float for JSON serialization\n        balance_history.append(balance)\n        dates.append(transaction.date.strftime('%Y-%m-%d'))\n\n    balance_history = list(reversed(balance_history))\n    dates = list(reversed(dates))\n    return render(request, 'tracker/index.html', {\n        'transactions': transactions,\n        'balance_history': balance_history,\n        'dates': dates,\n    })"}, {"file": "urls.py", "path": "tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "index.html", "path": "templates/tracker/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Tracker</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n        }\n\n        .transaction-table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n        }\n\n        .transaction-table th, .transaction-table td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: left;\n        }\n\n        .transaction-table th {\n            background-color: #f2f2f2;\n        }\n\n        #balance-chart-container {\n            margin-top: 30px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"app-container\" class=\"container\">\n        <h1 id=\"app-title\" class=\"app-title\">Budget Tracker</h1>\n\n        <table id=\"transaction-table\" class=\"transaction-table\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Description</th>\n                    <th>Amount</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for transaction in transactions %}\n                <tr>\n                    <td>{{ transaction.date }}</td>\n                    <td>{{ transaction.description }}</td>\n                    <td>{{ transaction.amount }}</td>\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n\n        <div id=\"balance-chart-container\" class=\"balance-chart-container\">\n            <canvas id=\"balance-chart\"></canvas>\n        </div>\n    </div>\n\n    <script>\n        const ctx = document.getElementById('balance-chart').getContext('2d');\n        const balance_history = {{ balance_history|safe }};\n        const dates = {{ dates|safe }};\n\n        const myChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: dates,\n                datasets: [{\n                    label: 'Balance',\n                    data: balance_history,\n                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                    borderColor: 'rgba(54, 162, 235, 1)',\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "static.txt", "path": "static/static.txt", "code": "This directory will contain static files (CSS, JavaScript, Images) if you need them.\nRight now its empty"}, {"file": "admin.py", "path": "tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction\n\nadmin.site.register(Transaction)"}], "8": [{"file": "settings.py", "path": "calendar_project/calendar_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "calendar_project/calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "calendar_project/calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "calendar_project/calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_project/calendar_app/views.py", "code": "import calendar\nfrom datetime import datetime, timedelta\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.utils.safestring import mark_safe\n\nfrom .models import Event\n\ndef index(request):\n    return render(request, 'calendar_app/index.html')\n\nclass Calendar(calendar.HTMLCalendar):\n    def __init__(self, year=None, month=None):\n        self.year = year\n        self.month = month\n        super(Calendar, self).__init__()\n\n    def formatday(self, day, events):\n        events_per_day = events.filter(start_time__day=day)\n        d = ''\n        for event in events_per_day:\n            d += f'<li> {event.title} </li>'\n\n        if day != 0:\n            return f\"<td id='day-{day}' class='calendar-day'><span class='date'>{day}</span><ul> {d} </ul></td>\"\n        return '<td></td>'\n\n    def formatweek(self, theweek, events):\n        week = ''\n        for d, weekday in theweek:\n            week += self.formatday(d, events)\n        return f'<tr class=\"calendar-week\"> {week} </tr>'\n\n    def formatmonth(self, withyear=True):\n        events = Event.objects.filter(start_time__year=self.year, start_time__month=self.month)\n\n        cal = f'<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"calendar\">\\n'\n        cal += f'{self.formatmonthname(self.year, self.month, withyear=withyear)}\\n'\n        cal += f'{self.formatweekdayrow(calendar.weekheader(3))}\\n'\n        for week in self.monthdays2calendar(self.year, self.month):\n            cal += f'{self.formatweek(week, events)}\\n'\n        return cal\n\ndef get_calendar(request, year, month):\n    cal = Calendar(year, month)\n    return HttpResponse(f'<h1>Calendar for {year}-{month}</h1>' + mark_safe(cal.formatmonth()))\n\ndef calendar_view(request):\n    now = datetime.now()\n    cal = Calendar(now.year, now.month)\n    return render(request, 'calendar_app/calendar.html', {'calendar': mark_safe(cal.formatmonth()), 'year': now.year, 'month': now.month})"}, {"file": "urls.py", "path": "calendar_project/calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.get_calendar, name='get_calendar'),\n    path('index/', views.index, name='index'),\n]"}, {"file": "index.html", "path": "calendar_project/templates/calendar_app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar App Index</title>\n</head>\n<body>\n    <h1>Welcome to the Calendar App!</h1>\n    <a href=\"{% url 'calendar' %}\">View Calendar</a>\n</body>\n</html>"}, {"file": "calendar.html", "path": "calendar_project/templates/calendar_app/calendar.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <style>\n        .calendar {\n            border-collapse: collapse;\n            width: 100%;\n        }\n        .calendar th, .calendar td {\n            border: 1px solid black;\n            padding: 8px;\n            text-align: center;\n        }\n        .calendar th {\n            background-color: #f2f2f2;\n        }\n        .calendar-day {\n          height: 100px;\n          vertical-align: top;\n          text-align: left;\n        }\n        .date{\n          font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"container\">\n        <h1 id=\"calendar-title\" class=\"title\">Monthly Calendar</h1>\n        <div id=\"calendar-navigation\" class=\"navigation\">\n            <a id=\"prev-month\" class=\"nav-link\" href=\"/calendar/{{ year }}/{{ month|add:-1 }}/\">Previous Month</a>\n            <a id=\"next-month\" class=\"nav-link\" href=\"/calendar/{{ year }}/{{ month|add:1 }}/\">Next Month</a>\n        </div>\n        <div id=\"calendar-table-container\" class=\"table-container\">\n            {{ calendar }}\n        </div>\n\n    </div>\n</body>\n</html>"}], "9": [{"file": "requirements.txt", "path": "/", "code": "Django>=4.0\npython-dotenv>=0.20.0"}, {"file": ".env", "path": "/", "code": "# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY=your_secret_key_here\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG=True\n\n# Database settings (PostgreSQL example)\nDATABASE_ENGINE=django.db.backends.sqlite3\nDATABASE_NAME=db.sqlite3\n\n# Allow all host origins for development\nALLOWED_HOSTS=* "}, {"file": "chatbot_project/settings.py", "path": "chatbot_project/", "code": "import os\nfrom pathlib import Path\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DEBUG') == 'True'\n\nALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS').split(',') if os.environ.get('ALLOWED_HOSTS') else []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot_app', # My app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': os.environ.get('DATABASE_ENGINE'),\n        'NAME': BASE_DIR / os.environ.get('DATABASE_NAME'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "chatbot_project/urls.py", "path": "chatbot_project/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),\n]"}, {"file": "chatbot_project/wsgi.py", "path": "chatbot_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "chatbot_app/apps.py", "path": "chatbot_app/", "code": "from django.apps import AppConfig\n\n\nclass ChatbotAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot_app'"}, {"file": "chatbot_app/models.py", "path": "chatbot_app/", "code": "from django.db import models\n\n# You might not need models for a simple chatbot introduction page.\n# But if you want to store user interactions or chatbot configurations,\n# you would define your models here.\n\n# Example:\n# class ChatLog(models.Model):\n#     user_message = models.TextField()\n#     chatbot_response = models.TextField()\n#     timestamp = models.DateTimeField(auto_now_add=True)"}, {"file": "chatbot_app/views.py", "path": "chatbot_app/", "code": "from django.shortcuts import render\n\ndef index(request):\n    return render(request, 'chatbot_app/index.html')"}, {"file": "chatbot_app/urls.py", "path": "chatbot_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "templates/chatbot_app/index.html", "path": "templates/chatbot_app/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot Introduction</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"main-title\" class=\"main-title\">Welcome to Our AI Chatbot!</h1>\n    </header>\n\n    <section id=\"introduction\" class=\"introduction\">\n        <h2 id=\"section-title\" class=\"section-title\">Meet Our Intelligent Assistant</h2>\n        <p id=\"introduction-text\" class=\"introduction-text\">\n            Our AI chatbot is designed to help you with a variety of tasks, from answering your questions to providing personalized recommendations. It's powered by state-of-the-art natural language processing and machine learning techniques, ensuring a seamless and intuitive user experience.\n        </p>\n    </section>\n\n    <section id=\"features\" class=\"features\">\n        <h2 id=\"features-title\" class=\"features-title\">Key Features</h2>\n        <ul id=\"features-list\" class=\"features-list\">\n            <li id=\"feature-1\" class=\"feature\">Intelligent Question Answering</li>\n            <li id=\"feature-2\" class=\"feature\">Personalized Recommendations</li>\n            <li id=\"feature-3\" class=\"feature\">24/7 Availability</li>\n            <li id=\"feature-4\" class=\"feature\">Easy Integration</li>\n        </ul>\n    </section>\n\n    <section id=\"get-started\" class=\"get-started\">\n        <h2 id=\"get-started-title\" class=\"get-started-title\">Get Started Today!</h2>\n        <p id=\"get-started-text\" class=\"get-started-text\">\n            Ready to experience the power of AI? Contact us to learn more about how our chatbot can benefit your business.\n        </p>\n        <a id=\"contact-button\" class=\"contact-button\" href=\"#\">Contact Us</a>\n    </section>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p id=\"copyright\" class=\"copyright\">&copy; 2023 Your Company Name. All rights reserved.</p>\n    </footer>\n</body>\n</html>"}, {"file": "static/css/style.css", "path": "static/css/", "code": "/* Basic Styling */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.header {\n    background-color: #333;\n    color: #fff;\n    padding: 20px;\n    text-align: center;\n}\n\n.main-title {\n    margin: 0;\n}\n\n.introduction, .features, .get-started {\n    padding: 20px;\n    margin: 20px;\n    background-color: #fff;\n    border-radius: 5px;\n}\n\n.section-title {\n    margin-top: 0;\n    border-bottom: 2px solid #ccc;\n    padding-bottom: 10px;\n}\n\n.features-list {\n    list-style: none;\n    padding: 0;\n}\n\n.feature {\n    margin-bottom: 10px;\n}\n\n.contact-button {\n    display: inline-block;\n    background-color: #333;\n    color: #fff;\n    padding: 10px 20px;\n    text-decoration: none;\n    border-radius: 5px;\n}\n\n.footer {\n    text-align: center;\n    padding: 20px;\n    background-color: #333;\n    color: #fff;\n}\n"}], "12": [{"file": "manage_expenses/settings.py", "path": "manage_expenses/manage_expenses/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expenses',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'manage_expenses.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'manage_expenses.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] \n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'expense_list'\nLOGOUT_REDIRECT_URL = 'login'\n"}, {"file": "manage_expenses/urls.py", "path": "manage_expenses/manage_expenses/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('expenses.urls')),\n]\n"}, {"file": "manage_expenses/wsgi.py", "path": "manage_expenses/manage_expenses/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'manage_expenses.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "expenses/models.py", "path": "manage_expenses/expenses/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nEXPENSE_TYPES = (\n    ('Travel', 'Travel Expenses'),\n    ('Labor', 'Labor Expenses'),\n    ('Management', 'Management Expenses'),\n    ('Equipment', 'Equipment Expenses'),\n)\n\nSTATUS_CHOICES = [\n    ('Pending', 'Pending'),\n    ('Approved', 'Approved'),\n    ('Rejected', 'Rejected'),\n]\n\n\nclass ExpenseClaim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    expense_type = models.CharField(max_length=20, choices=EXPENSE_TYPES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submission_date = models.DateField(auto_now_add=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')\n    attachment = models.FileField(upload_to='claim_attachments/', blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.employee.username} - {self.expense_type} - {self.amount}'\n\nclass Budget(models.Model):\n    expense_type = models.CharField(max_length=20, choices=EXPENSE_TYPES, unique=True)\n    budgeted_amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.expense_type} Budget: {self.budgeted_amount}'\n"}, {"file": "expenses/forms.py", "path": "manage_expenses/expenses/forms.py", "code": "from django import forms\nfrom .models import ExpenseClaim, Budget\n\nclass ExpenseClaimForm(forms.ModelForm):\n    class Meta:\n        model = ExpenseClaim\n        fields = ['expense_type', 'amount', 'description', 'attachment']\n\nclass BudgetForm(forms.ModelForm):\n    class Meta:\n        model = Budget\n        fields = ['expense_type', 'budgeted_amount']\n"}, {"file": "expenses/views.py", "path": "manage_expenses/expenses/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required, user_passes_test\nfrom django.contrib import messages\nfrom .models import ExpenseClaim, Budget\nfrom .forms import ExpenseClaimForm, BudgetForm\n\n@login_required\ndef expense_list(request):\n    if request.user.is_staff:\n        expenses = ExpenseClaim.objects.all().order_by('-submission_date')\n    else:\n        expenses = ExpenseClaim.objects.filter(employee=request.user).order_by('-submission_date')\n    return render(request, 'expenses/expense_list.html', {'expenses': expenses})\n\n@login_required\ndef submit_expense(request):\n    if request.method == 'POST':\n        form = ExpenseClaimForm(request.POST, request.FILES)\n        if form.is_valid():\n            expense = form.save(commit=False)\n            expense.employee = request.user\n            expense.save()\n            messages.success(request, 'Expense claim submitted successfully!')\n            return redirect('expense_list')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = ExpenseClaimForm()\n    return render(request, 'expenses/submit_expense.html', {'form': form})\n\n@login_required\n@user_passes_test(lambda u: u.is_staff)\ndef approve_reject_expense(request, pk):\n    expense = get_object_or_404(ExpenseClaim, pk=pk)\n    if request.method == 'POST':\n        action = request.POST.get('action')\n        if action == 'approve':\n            expense.status = 'Approved'\n            messages.success(request, f'Expense claim approved.')\n        elif action == 'reject':\n            expense.status = 'Rejected'\n            messages.success(request, f'Expense claim rejected.')\n        expense.save()\n        return redirect('expense_list')\n    return render(request, 'expenses/approve_reject.html', {'expense': expense})\n\n\n@login_required\n@user_passes_test(lambda u: u.is_staff)\ndef budget_list(request):\n    budgets = Budget.objects.all()\n    return render(request, 'expenses/budget_list.html', {'budgets': budgets})\n\n@login_required\n@user_passes_test(lambda u: u.is_staff)\ndef add_budget(request):\n    if request.method == 'POST':\n        form = BudgetForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Budget added successfully!')\n            return redirect('budget_list')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = BudgetForm()\n    return render(request, 'expenses/add_budget.html', {'form': form})\n\n\n@login_required\n@user_passes_test(lambda u: u.is_staff)\ndef budget_analysis(request):\n    budgets = Budget.objects.all()\n    expense_data = {}\n    total_budgeted = 0\n    total_spent = 0\n\n    for budget in budgets:\n        expenses = ExpenseClaim.objects.filter(expense_type=budget.expense_type, status='Approved')\n        spent_amount = sum(expense.amount for expense in expenses)\n        expense_data[budget.expense_type] = {\n            'budgeted': budget.budgeted_amount,\n            'spent': spent_amount,\n            'remaining': budget.budgeted_amount - spent_amount\n        }\n        total_budgeted += budget.budgeted_amount\n        total_spent += spent_amount\n\n    context = {\n        'expense_data': expense_data,\n        'total_budgeted': total_budgeted,\n        'total_spent': total_spent,\n        'total_remaining': total_budgeted - total_spent\n    }\n    return render(request, 'expenses/budget_analysis.html', context)\n"}, {"file": "expenses/urls.py", "path": "manage_expenses/expenses/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('expenses/', views.expense_list, name='expense_list'),\n    path('expenses/submit/', views.submit_expense, name='submit_expense'),\n    path('expenses/<int:pk>/approve_reject/', views.approve_reject_expense, name='approve_reject_expense'),\n    path('budgets/', views.budget_list, name='budget_list'),\n    path('budgets/add/', views.add_budget, name='add_budget'),\n    path('budgets/analysis/', views.budget_analysis, name='budget_analysis'),\n\n]\n"}, {"file": "expenses/admin.py", "path": "manage_expenses/expenses/admin.py", "code": "from django.contrib import admin\nfrom .models import ExpenseClaim, Budget\n\nadmin.site.register(ExpenseClaim)\nadmin.site.register(Budget)\n"}, {"file": "templates/expenses/expense_list.html", "path": "manage_expenses/templates/expenses/expense_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div class=\"container mt-5\">\n    <h1 id=\"expenseListTitle\" class=\"mb-4\">Expense Claims</h1>\n\n    {% if messages %}\n      <div id=\"messages\" class=\"alert alert-success\">\n        {% for message in messages %}\n          {{ message }}\n        {% endfor %}\n      </div>\n    {% endif %}\n\n    {% if user.is_authenticated and not user.is_staff %}\n      <a id=\"submitExpenseButton\" href=\"{% url 'submit_expense' %}\" class=\"btn btn-primary mb-3\">Submit New Expense Claim</a>\n    {% endif %}\n\n    <table id=\"expenseTable\" class=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>Employee</th>\n          <th>Expense Type</th>\n          <th>Amount</th>\n          <th>Description</th>\n          <th>Submission Date</th>\n          <th>Status</th>\n          {% if user.is_staff %}<th>Actions</th>{% endif %}\n        </tr>\n      </thead>\n      <tbody>\n        {% for expense in expenses %}\n          <tr>\n            <td>{{ expense.employee.username }}</td>\n            <td>{{ expense.get_expense_type_display }}</td>\n            <td>{{ expense.amount }}</td>\n            <td>{{ expense.description }}</td>\n            <td>{{ expense.submission_date }}</td>\n            <td>{{ expense.status }}</td>\n            {% if user.is_staff %}\n              <td>\n                {% if expense.status == 'Pending' %}\n                  <a id=\"approveRejectLink-{{ expense.pk }}\" href=\"{% url 'approve_reject_expense' expense.pk %}\" class=\"btn btn-sm btn-secondary\">Approve/Reject</a>\n                {% endif %}\n              </td>\n            {% endif %}\n          </tr>\n        {% endfor %}\n      </tbody>\n    </table>\n\n  </div>\n{% endblock %}\n"}, {"file": "templates/expenses/submit_expense.html", "path": "manage_expenses/templates/expenses/submit_expense.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\">\n        <h1 id=\"submitExpenseTitle\" class=\"mb-4\">Submit Expense Claim</h1>\n        <form id=\"expenseForm\" method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submitButton\" type=\"submit\" class=\"btn btn-primary\">Submit Claim</button>\n            <a id=\"cancelButton\" href=\"{% url 'expense_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n{% endblock %}\n"}, {"file": "templates/expenses/approve_reject.html", "path": "manage_expenses/templates/expenses/approve_reject.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div class=\"container mt-5\">\n    <h1 id=\"approveRejectTitle\" class=\"mb-4\">Approve or Reject Expense Claim</h1>\n    <p>Employee: {{ expense.employee.username }}</p>\n    <p>Expense Type: {{ expense.get_expense_type_display }}</p>\n    <p>Amount: {{ expense.amount }}</p>\n    <p>Description: {{ expense.description }}</p>\n\n    <form id=\"approveRejectForm\" method=\"post\">\n      {% csrf_token %}\n      <button id=\"approveButton\" type=\"submit\" name=\"action\" value=\"approve\" class=\"btn btn-success\">Approve</button>\n      <button id=\"rejectButton\" type=\"submit\" name=\"action\" value=\"reject\" class=\"btn btn-danger\">Reject</button>\n      <a id=\"cancelLink\" href=\"{% url 'expense_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n  </div>\n{% endblock %}\n"}, {"file": "templates/expenses/budget_list.html", "path": "manage_expenses/templates/expenses/budget_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\">\n        <h1 id=\"budgetListTitle\" class=\"mb-4\">Budgets</h1>\n        <a id=\"addBudgetButton\" href=\"{% url 'add_budget' %}\" class=\"btn btn-primary mb-3\">Add New Budget</a>\n\n        <table id=\"budgetTable\" class=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>Expense Type</th>\n                    <th>Budgeted Amount</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for budget in budgets %}\n                    <tr>\n                        <td>{{ budget.get_expense_type_display }}</td>\n                        <td>{{ budget.budgeted_amount }}</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n        <a id=\"budgetAnalysisButton\" href=\"{% url 'budget_analysis' %}\" class=\"btn btn-info\">Analyze Budgets</a>\n    </div>\n{% endblock %}\n"}, {"file": "templates/expenses/add_budget.html", "path": "manage_expenses/templates/expenses/add_budget.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\">\n        <h1 id=\"addBudgetTitle\" class=\"mb-4\">Add Budget</h1>\n        <form id=\"budgetForm\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"saveBudgetButton\" type=\"submit\" class=\"btn btn-primary\">Save Budget</button>\n            <a id=\"cancelBudgetButton\" href=\"{% url 'budget_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n{% endblock %}\n"}, {"file": "templates/expenses/budget_analysis.html", "path": "manage_expenses/templates/expenses/budget_analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\">\n        <h1 id=\"budgetAnalysisTitle\" class=\"mb-4\">Budget Analysis</h1>\n\n        <table id=\"analysisTable\" class=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>Expense Type</th>\n                    <th>Budgeted Amount</th>\n                    <th>Spent Amount</th>\n                    <th>Remaining Amount</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for expense_type, data in expense_data.items %}\n                    <tr>\n                        <td>{{ expense_type }}</td>\n                        <td>{{ data.budgeted }}</td>\n                        <td>{{ data.spent }}</td>\n                        <td>{{ data.remaining }}</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n\n        <div id=\"totals\" class=\"mt-3\">\n            <p><b>Total Budgeted:</b> {{ total_budgeted }}</p>\n            <p><b>Total Spent:</b> {{ total_spent }}</p>\n            <p><b>Total Remaining:</b> {{ total_remaining }}</p>\n        </div>\n        <a id=\"backToBudgetList\" href=\"{% url 'budget_list' %}\" class=\"btn btn-secondary\">Back to Budget List</a>\n    </div>\n{% endblock %}\n"}, {"file": "templates/base.html", "path": "manage_expenses/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Expense Management System</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a id=\"homeLink\" class=\"navbar-brand\" href=\"#\">Expense Management</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a id=\"expenseListLink\" class=\"nav-link\" href=\"{% url 'expense_list' %}\">Expenses</a>\n                </li>\n                {% if user.is_staff %}\n                    <li class=\"nav-item\">\n                        <a id=\"budgetListLink\" class=\"nav-link\" href=\"{% url 'budget_list' %}\">Budgets</a>\n                    </li>\n                {% endif %}\n            </ul>\n            <ul class=\"navbar-nav ml-auto\">\n                {% if user.is_authenticated %}\n                    <li class=\"nav-item\">\n                        <a id=\"logoutLink\" class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n                    </li>\n                {% else %}\n                    <li class=\"nav-item\">\n                        <a id=\"loginLink\" class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"registerLink\" class=\"nav-link\" href=\"{% url 'register' %}\">Register</a>\n                    </li>\n                {% endif %}\n            </ul>\n        </div>\n    </nav>\n\n    <div class=\"container mt-4\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "templates/registration/login.html", "path": "manage_expenses/templates/registration/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\">\n        <h1 id=\"loginTitle\" class=\"mb-4\">Login</h1>\n        <form id=\"loginForm\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"loginButton\" type=\"submit\" class=\"btn btn-primary\">Login</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "templates/registration/register.html", "path": "manage_expenses/templates/registration/register.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\">\n        <h1 id=\"registerTitle\" class=\"mb-4\">Register</h1>\n        <form id=\"registerForm\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"registerButton\" type=\"submit\" class=\"btn btn-primary\">Register</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "expenses/signals.py", "path": "manage_expenses/expenses/signals.py", "code": "from django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    if created:\n        pass\n"}, {"file": "expenses/apps.py", "path": "manage_expenses/expenses/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExpensesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'expenses'\n\n    def ready(self):\n        import expenses.signals"}, {"file": "static/css/style.css", "path": "manage_expenses/static/css/style.css", "code": "/* Add your custom styles here */\nbody {\n  padding-top: 70px; /* Adjust based on your navbar height */\n}\n"}, {"file": "accounts/forms.py", "path": "manage_expenses/accounts/forms.py", "code": "from django import forms\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth.models import User\n\nclass RegistrationForm(UserCreationForm):\n    email = forms.EmailField(required=True)\n\n    class Meta:\n        model = User\n        fields = ('username', 'email')\n"}, {"file": "accounts/views.py", "path": "manage_expenses/accounts/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom .forms import RegistrationForm\n\ndef register_view(request):\n    if request.method == 'POST':\n        form = RegistrationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('expense_list')\n    else:\n        form = RegistrationForm()\n    return render(request, 'registration/register.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('expense_list')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'registration/login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('login')\n"}, {"file": "accounts/urls.py", "path": "manage_expenses/accounts/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('register/', views.register_view, name='register'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]\n"}, {"file": "manage_expenses/urls.py", "path": "manage_expenses/manage_expenses/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('accounts.urls')), # Include the accounts app's URLs\n    path('', include('expenses.urls')), # Keep expenses URLs at the root\n]"}], "13": [{"file": "settings.py", "path": "crm/crm/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'customers',\n    'products',\n    'purchases',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'crm.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'crm.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "urls.py", "path": "crm/crm/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('customers/', include('customers.urls')),\n    path('products/', include('products.urls')),\n    path('purchases/', include('purchases.urls')),\n]"}, {"file": "wsgi.py", "path": "crm/crm/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "crm/customers/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=200, verbose_name='Customer Name')\n    birthday = models.DateField(null=True, blank=True, verbose_name='Date of Birth')\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], blank=True)\n    company = models.CharField(max_length=200, blank=True)\n    phone_number = models.CharField(max_length=20, blank=True, verbose_name='Phone Number')\n    preferred_products = models.ManyToManyField('products.Product', blank=True, related_name='customers')\n\n    def __str__(self):\n        return self.name"}, {"file": "admin.py", "path": "crm/customers/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer\n\nadmin.site.register(Customer)"}, {"file": "urls.py", "path": "crm/customers/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Add customer URLs here if needed\n]"}, {"file": "views.py", "path": "crm/customers/views.py", "code": "from django.shortcuts import render\n\n# Add customer views here if needed"}, {"file": "models.py", "path": "crm/products/models.py", "code": "from django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=200, verbose_name='Product Name')\n    category = models.CharField(max_length=100, blank=True)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Recommended Price')\n\n    def __str__(self):\n        return self.name"}, {"file": "admin.py", "path": "crm/products/admin.py", "code": "from django.contrib import admin\nfrom .models import Product\n\nadmin.site.register(Product)"}, {"file": "urls.py", "path": "crm/products/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Add product URLs here if needed\n]"}, {"file": "views.py", "path": "crm/products/views.py", "code": "from django.shortcuts import render\n\n# Add product views here if needed"}, {"file": "models.py", "path": "crm/purchases/models.py", "code": "from django.db import models\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True, verbose_name='Purchase Date')\n    product = models.ForeignKey('products.Product', on_delete=models.CASCADE)\n    customer = models.ForeignKey('customers.Customer', on_delete=models.CASCADE)\n    quantity = models.IntegerField(default=1)\n    amount = models.DecimalField(max_digits=10, decimal_places=2, verbose_name='Purchase Amount')\n\n    def __str__(self):\n        return f'Purchase of {self.product.name} by {self.customer.name} on {self.datetime}'"}, {"file": "admin.py", "path": "crm/purchases/admin.py", "code": "from django.contrib import admin\nfrom .models import PurchaseRecord\n\nadmin.site.register(PurchaseRecord)"}, {"file": "urls.py", "path": "crm/purchases/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Add purchase URLs here if needed\n]"}, {"file": "views.py", "path": "crm/purchases/views.py", "code": "from django.shortcuts import render\n\n# Add purchase views here if needed"}, {"file": "__init__.py", "path": "crm/customers/__init__.py", "code": "default_app_config = 'customers.apps.CustomersConfig'"}, {"file": "apps.py", "path": "crm/customers/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CustomersConfig(AppConfig):\n    name = 'customers'"}, {"file": "__init__.py", "path": "crm/products/__init__.py", "code": "default_app_config = 'products.apps.ProductsConfig'"}, {"file": "apps.py", "path": "crm/products/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ProductsConfig(AppConfig):\n    name = 'products'"}, {"file": "__init__.py", "path": "crm/purchases/__init__.py", "code": "default_app_config = 'purchases.apps.PurchasesConfig'"}, {"file": "apps.py", "path": "crm/purchases/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PurchasesConfig(AppConfig):\n    name = 'purchases'"}, {"file": "base.html", "path": "crm/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}CRM System{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            padding-top: 60px;\n        }\n        .navbar {\n            background-color: #343a40 !important;\n        }\n        .navbar-brand {\n            color: white !important;\n        }\n        .nav-link {\n            color: white !important;\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"mainNavbar\" class=\"navbar navbar-expand-lg navbar-dark fixed-top\">\n        <a class=\"navbar-brand\" href=\"#\">CRM</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"/customers/\">Customers</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"/products/\">Products</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"/purchases/\">Purchases</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"/admin/\">Admin</a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n\n    <div id=\"content\" class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "helloworld/helloworld/__init__.py", "code": ""}, {"file": "settings.py", "path": "helloworld/helloworld/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello.urls')), # Include the app's urls\n]"}, {"file": "wsgi.py", "path": "helloworld/helloworld/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "helloworld/hello/__init__.py", "code": ""}, {"file": "admin.py", "path": "helloworld/hello/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "helloworld/hello/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloConfig(AppConfig):\n    name = 'hello'"}, {"file": "models.py", "path": "helloworld/hello/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "helloworld/hello/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "helloworld/hello/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'hello/hello.html')\n"}, {"file": "urls.py", "path": "helloworld/hello/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "hello.html", "path": "helloworld/hello/templates/hello/hello.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"hello-heading\" class=\"main-heading\">Hello, world!</h1>\n    <p id=\"greeting-paragraph\" class=\"greeting-text\">This is a simple Django \"Hello, world!\" page.</p>\n</body>\n</html>"}], "15": [{"file": "manage.py", "path": "jump_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jump_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "jump_project/jump_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "jump_project/jump_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here' # Replace with a real secret key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'jump_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'jump_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'jump_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "jump_project/jump_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('jump_app.urls'))\n]"}, {"file": "wsgi.py", "path": "jump_project/jump_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jump_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "jump_project/jump_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "jump_project/jump_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "jump_project/jump_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass JumpAppConfig(AppConfig):\n    name = 'jump_app'"}, {"file": "models.py", "path": "jump_project/jump_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "urls.py", "path": "jump_project/jump_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "jump_project/jump_app/views.py", "code": "from django.shortcuts import render, redirect\n\ndef index(request):\n    return render(request, 'jump_app/index.html')\n\ndef helloworld(request):\n    return render(request, 'jump_app/helloworld.html')"}, {"file": "index.html", "path": "jump_project/jump_app/templates/jump_app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Jump Page</title>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <button id=\"jump-button\" class=\"btn btn-primary\" onclick=\"location.href='helloworld/'\">Go to Hello World</button>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "jump_project/jump_app/templates/jump_app/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n</head>\n<body>\n    <div id=\"hello-world-container\" class=\"container\">\n        <h1 id=\"hello-world-title\" class=\"title\">Hello, World!</h1>\n    </div>\n</body>\n</html>"}], "16": [{"file": "create_subject_table.bat", "path": "./create_subject_table.bat", "code": "@echo off\n\nREM This batch script requires Python with openpyxl installed.\nREM Install with: pip install openpyxl\n\npython create_subject_table.py\n\npause"}, {"file": "create_subject_table.py", "path": "./create_subject_table.py", "code": "import openpyxl\n\n# Input and output file names\nINPUT_FILE = \"Spring Semester Subjects.xlsx\"\nOUTPUT_FILE = \"Spring Semester Subject Table.xlsx\"\n\n# Weekday and Time options\nWEEKDAYS = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"]\nTIME_PERIODS = [\"First period\", \"Second period\", \"Third period\", \"Fourth period\"]\n\n\ndef main():\n    try:\n        # Load the workbook\n        workbook = openpyxl.load_workbook(INPUT_FILE)\n        sheet = workbook.active\n\n        # Create a new workbook for the subject table\n        output_workbook = openpyxl.Workbook()\n        output_sheet = output_workbook.active\n\n        # Write headers\n        output_sheet.cell(row=1, column=1, value=\"\") # Top-left cell is empty\n        for i, weekday in enumerate(WEEKDAYS):\n            output_sheet.cell(row=1, column=i + 2, value=weekday)\n\n        for i, time_period in enumerate(TIME_PERIODS):\n            output_sheet.cell(row=i + 2, column=1, value=time_period)\n\n        # Populate the table with subjects\n        for row in range(2, sheet.max_row + 1):\n            name = sheet.cell(row=row, column=2).value\n            weekday = sheet.cell(row=row, column=3).value\n            time = sheet.cell(row=row, column=4).value\n\n            if name and weekday and time:\n                try:\n                  weekday_col = WEEKDAYS.index(weekday) + 2\n                  time_row = TIME_PERIODS.index(time) + 2\n                  existing_value = output_sheet.cell(row=time_row, column=weekday_col).value or \"\"\n                  new_value = existing_value + name + \"\\n\" if existing_value else name\n                  output_sheet.cell(row=time_row, column=weekday_col, value=new_value)\n                except ValueError:\n                  print(f\"Invalid weekday or time in row {row}.\") #Error handling\n\n        # Save the output workbook\n        output_workbook.save(OUTPUT_FILE)\n        print(f\"Subject table created and saved to {OUTPUT_FILE}\")\n\n    except FileNotFoundError:\n        print(f\"Error: File '{INPUT_FILE}' not found.\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "Spring Semester Subjects.xlsx", "path": "./Spring Semester Subjects.xlsx", "code": "Binary Excel file content will be here in real file."}], "17": [{"file": "create_environment.bat", "path": "./create_environment.bat", "code": "@echo off\nREM Create a virtual environment\npython -m venv venv\n\nREM Activate the virtual environment\nvenv\\Scripts\\activate\n\nREM Install required packages\npip install pandas openpyxl scikit-learn\n\nREM Deactivate the virtual environment (optional, but good practice)\ndeactivate\n\necho Virtual environment created and packages installed.  Activate with venv\\Scripts\\activate\npause"}, {"file": "run_model.bat", "path": "./run_model.bat", "code": "@echo off\nREM Activate the virtual environment\nvenv\\Scripts\\activate\n\nREM Run the Python script\npython logistic_model.py\n\nREM Deactivate the virtual environment (optional)\ndeactivate\n\npause"}, {"file": "logistic_model.py", "path": "./logistic_model.py", "code": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nimport statsmodels.api as sm\n\n# Load the dataset\ndata = pd.read_excel(\"Gamedata.xlsx\")\n\n# Create lagged 'result' feature\ndata['result_lagged'] = data['result'].shift(1)\ndata.dropna(inplace=True) # Remove rows with NaN due to lagging\n\n# Define independent and dependent variables\nX = data.drop(['result'], axis=1) # All columns except 'result'\ny = data['result']\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Logistic Regression with statsmodels for summary output\nX_train = sm.add_constant(X_train) # Add a constant for the intercept\nmodel = sm.Logit(y_train, X_train)\nresults = model.fit()\n\n# Print and store the summary\nsummary = results.summary()\nprint(summary)\n\n# Convert summary to a pandas DataFrame for easier writing to Excel\ndef summary_to_dataframe(summary):\n    results_as_html = summary.tables[1].as_html()\n    df = pd.read_html(results_as_html, header=0, index_col=0)[0]\n    return df\n\nsummary_df = summary_to_dataframe(results)\n\n\n# Optionally, you can also predict and evaluate the model with sklearn (example)\n# from sklearn.metrics import accuracy_score, classification_report\n# X_test = sm.add_constant(X_test)\n# y_pred = results.predict(X_test)\n# y_pred_binary = [1 if x > 0.5 else 0 for x in y_pred]\n# accuracy = accuracy_score(y_test, y_pred_binary)\n# report = classification_report(y_test, y_pred_binary)\n# print(f'Accuracy: {accuracy}')\n# print(f'Classification Report:\\n{report}')\n\n# Save the summary to an Excel file\nwith pd.ExcelWriter(\"Logistic.xlsx\") as writer:\n    summary_df.to_excel(writer, sheet_name='Summary')\n    # Optionally save other dataframes (X_train, X_test, etc.)\n\nprint(\"Logistic model summary saved to Logistic.xlsx\")\n"}, {"file": "Gamedata.xlsx", "path": "./Gamedata.xlsx", "code": "Binary Excel file.  This requires actual binary Excel data.  Example provided only for demonstrating JSON format;  replace with a real Gamedata.xlsx file or generate one using pandas in a separate script, containing columns with numerical data and a 'result' column with binary (0 or 1) values.\n\nExample (but NEEDS to be written as a binary .xlsx): \n\nColumn1,Column2,Column3,result\n1.0,2.0,3.0,0\n4.0,5.0,6.0,1\n7.0,8.0,9.0,0\n10.0,11.0,12.0,1"}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import random\n\ndef display_intro():\n    print(\"Welcome to Bashcrawl! A text-based dungeon crawler.\")\n    print(\"You find yourself at the entrance of a dark and mysterious dungeon.\")\n    print(\"Your goal: Find the treasure and escape!\")\n\ndef get_player_name():\n    name = input(\"Enter your name, brave adventurer: \")\n    return name\n\ndef choose_action():\n    print(\"\\nWhat do you do?\")\n    print(\"1. Explore deeper into the dungeon\")\n    print(\"2. Check your inventory\")\n    print(\"3. Run away! (Exit the game)\")\n    choice = input(\"> \")\n    return choice\n\ndef explore(player):\n    events = [\n        \"You find a rusty sword! (Attack +1)\",\n        \"A goblin attacks!\",\n        \"You discover a healing potion! (Health +5)\",\n        \"You find a hidden passage.\",\n        \"You encounter a sleeping dragon!\",\n        \"Nothing happens...\",\n        \"You trip and fall, losing 1 health.\",\n        \"You find some gold coins! (+5 gold)\"\n    ]\n    event = random.choice(events)\n    print(\"\\n\" + event)\n\n    if event == \"You find a rusty sword! (Attack +1)\":\n        player['attack'] += 1\n        print(\"Your attack is now\", player['attack'])\n    elif event == \"A goblin attacks!\":\n        print(\"The goblin attacks for 2 damage!\")\n        player['health'] -= 2\n        print(\"Your health is now\", player['health'])\n    elif event == \"You discover a healing potion! (Health +5)\":\n        player['health'] += 5\n        print(\"Your health is now\", player['health'])\n    elif event == \"You encounter a sleeping dragon!\":\n        print(\"You sneak past the dragon.\")\n    elif event == \"You trip and fall, losing 1 health.\":\n        player['health'] -= 1\n        print(\"Your health is now\", player['health'])\n    elif event == \"You find some gold coins! (+5 gold)\":\n        player['gold'] += 5\n        print(\"You have\", player['gold'], \"gold coins.\")\n\n\n    return player\n\ndef check_inventory(player):\n    print(\"\\n--- Inventory ---\")\n    print(\"Health:\", player['health'])\n    print(\"Attack:\", player['attack'])\n    print(\"Gold:\", player['gold'])\n    print(\"---------------\")\n\ndef game_over(player):\n    if player['health'] <= 0:\n        print(\"\\nYou have died. Game Over!\")\n        return True\n    return False\n\ndef main():\n    display_intro()\n    player_name = get_player_name()\n    player = {\n        'name': player_name,\n        'health': 10,\n        'attack': 2,\n        'gold': 0\n    }\n\n    print(\"\\nWelcome,\", player['name'], \"!\")\n\n    playing = True\n    while playing:\n        choice = choose_action()\n\n        if choice == '1':\n            player = explore(player)\n            if game_over(player):\n                playing = False\n        elif choice == '2':\n            check_inventory(player)\n        elif choice == '3':\n            print(\"You bravely run away! Goodbye.\")\n            playing = False\n        else:\n            print(\"Invalid choice. Please try again.\")\n\n    print(\"\\nThanks for playing Bashcrawl!\")\n\nif __name__ == \"__main__\":\n    main()"}], "19": [{"file": "death_histogram.bat", "path": "death_histogram.bat", "code": "@echo off\nREM Requires a Python installation with pandas and matplotlib.\n\nREM Set the path to your Python executable if it's not in your PATH.\nset PYTHON_PATH=python  \n\nREM Execute the Python script.\n%PYTHON_PATH% death_histogram.py Deathlist.csv\n\npause"}, {"file": "death_histogram.py", "path": "death_histogram.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport datetime\nimport sys\n\n# Check if the CSV file is provided as a command-line argument\nif len(sys.argv) != 2:\n    print(\"Usage: python death_histogram.py <deathlist.csv>\")\n    sys.exit(1)\n\ncsv_file = sys.argv[1]\n\ntry:\n    # Read the CSV file into a pandas DataFrame\n    df = pd.read_csv(csv_file)\n\n    # Convert 'Date of death' column to datetime objects, handling potential errors\n    df['Date of death'] = pd.to_datetime(df['Date of death'], errors='coerce')\n    df = df.dropna(subset=['Date of death'])\n\n    # Group by week and count the number of deaths per week\n    weekly_deaths = df.groupby(pd.Grouper(key='Date of death', freq='W')).size()\n\n    # Create the histogram\n    plt.figure(figsize=(12, 6))\n    plt.bar(weekly_deaths.index, weekly_deaths.values, width=5, color='skyblue')\n\n    # Customize the plot\n    plt.xlabel('Week', fontsize=12, labelpad=10)\n    plt.ylabel('Number of Deaths', fontsize=12, labelpad=10)\n    plt.title('Weekly Deaths Histogram', fontsize=14)\n    plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability\n    plt.grid(axis='y', alpha=0.75)\n\n    # Add labels to the bars\n    for i, count in enumerate(weekly_deaths.values):\n        plt.text(weekly_deaths.index[i], count + 0.5, str(count), ha='center', va='bottom')\n\n    # Improve layout and display the plot\n    plt.tight_layout()\n    plt.savefig('weekly_deaths_histogram.png') # save figure\n    plt.show()\n\nexcept FileNotFoundError:\n    print(f\"Error: File not found: {csv_file}\")\nexcept pd.errors.EmptyDataError:\n    print(f\"Error: CSV file is empty: {csv_file}\")\nexcept pd.errors.ParserError:\n    print(f\"Error: Could not parse CSV file: {csv_file}.  Check the file format.\")\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {e}\")\n"}, {"file": "example_deathlist.csv", "path": "example_deathlist.csv", "code": "Name,Date of death,Cause of death\nJohn Doe,2023-01-05,Heart Failure\nJane Smith,2023-01-12,Pneumonia\nRobert Jones,2023-01-19,Cancer\nAlice Brown,2023-01-26,Accident\nBob Williams,2023-02-02,Stroke\nEve Davis,2023-02-09,Heart Attack\nCharlie Miller,2023-02-16,COVID-19\nDavid Wilson,2023-02-23,Old Age\nEmily Moore,2023-03-02,Kidney Failure\nFrank Taylor,2023-03-09,Diabetes\nGrace Anderson,2023-03-16,Alzheimer's\nHarry Thomas,2023-03-23,Parkinson's\nIvy Jackson,2023-03-30,Liver Cirrhosis\nJack White,2023-04-06,Suicide\nKelly Harris,2023-04-13,Drug Overdose\nLiam Martin,2023-04-20,Car Accident\nMia Thompson,2023-04-27,Unknown\nNoah Garcia,2023-05-04,Influenza\nOlivia Rodriguez,2023-05-11,Sepsis\nPeter Lewis,2023-05-18,Lung Disease\nQuinn Lee,2023-05-25,Dementia\nRyan Walker,2023-06-01,Homicide\nSophia Hall,2023-06-08,Malnutrition\nThomas Allen,2023-06-15,Heat Stroke\nUma Young,2023-06-22,Hypothermia\nVictor King,2023-06-29,Asphyxiation\nWendy Wright,2023-07-06,Falls\nXander Green,2023-07-13,Fire\nYara Baker,2023-07-20,Drowning\nZachary Hill,2023-07-27,Natural Causes"}]}