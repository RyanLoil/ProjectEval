{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Form definitions\nclass BMICalculatorForm(forms.Form):\n    \"\"\"\n    A form to calculate BMI using weight and height.\n    \"\"\"\n    weight = forms.FloatField(label='Weight (kg)')\n    height = forms.FloatField(label='Height (m)')"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import BMICalculatorForm\n\n# Category thresholds\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\n# BMI interpretation descriptions\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\"\n}\n\ndef homepage(request):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    return render(request, 'homepage.html')\n\n\ndef bmi_calculator(request):\n    \"\"\"\n    Calculate BMI based on user input.\n    \"\"\"\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height']\n\n            if height <= 0:\n                bmi = None\n                category = \"Invalid height\"\n                interpretation = bmi_interpretation['Invalid height']\n            else:\n                bmi = weight / (height ** 2)\n                bmi = round(bmi, 2)\n\n                if bmi < bmi_category[\"Underweight\"]:\n                    category = \"Underweight\"\n                elif bmi < bmi_category[\"Normal weight\"]:\n                    category = \"Normal weight\"\n                elif bmi < bmi_category[\"Overweight\"]:\n                    category = \"Overweight\"\n                else:\n                    category = \"Obese\"\n\n                interpretation = bmi_interpretation[category]\n\n            return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'category': category, 'interpretation': interpretation})\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form})\n\n\ndef advice(request):\n    \"\"\"\n    Provide health advice based on BMI.\n    \"\"\"\n    bmi = request.GET.get('bmi')\n    category = request.GET.get('category')\n    interpretation = request.GET.get('interpretation')\n\n    return render(request, 'advice.html', {'bmi': bmi, 'category': category, 'interpretation': interpretation})"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advice</title>\n</head>\n<body>\n    <div id=\"advice-container\" class=\"container\">\n        <h1>Health Advice</h1>\n        {% if bmi %}\n            <p id=\"bmi-value\" class=\"bmi-result\">Your BMI: {{ bmi }}</p>\n            <p id=\"bmi-category\" class=\"bmi-result\">Category: {{ category }}</p>\n            <p id=\"bmi-interpretation\" class=\"bmi-result\">Interpretation: {{ interpretation }}</p>\n        {% else %}\n            <p id=\"no-bmi-message\" class=\"no-result\">No BMI calculated. Please use the BMI calculator first.</p>\n        {% endif %}\n\n        <p id=\"general-advice\" class=\"advice-text\">\n            This advice is general in nature and should not be considered a substitute for professional medical advice. Always consult with a qualified healthcare provider for any questions you may have regarding your health.\n        </p>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1>BMI Calculator</h1>\n\n        <form id=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields\" class=\"form-group\">\n                {{ form.as_p }}\n            </div>\n\n            <button id=\"calculate-button\" class=\"btn\" type=\"submit\">Calculate</button>\n            <button id=\"reset-button\" class=\"btn\" type=\"reset\">Reset</button>\n        </form>\n\n        {% if bmi %}\n            <div id=\"bmi-results\" class=\"results\">\n                <p id=\"bmi-value\" class=\"bmi-result\">Your BMI: {{ bmi }}</p>\n                <p id=\"bmi-category\" class=\"bmi-result\">Category: {{ category }}</p>\n                <p id=\"bmi-interpretation\" class=\"bmi-result\">Interpretation: {{ interpretation }}</p>\n                <a id=\"advice-link\" class=\"advice-link\" href=\"{% url 'advice' %}?bmi={{ bmi }}&category={{ category }}&interpretation={{ interpretation }}\">Get Advice</a>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Homepage</title>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"container\">\n        <h1 id=\"welcome-heading\" class=\"heading\">Welcome to the BMI Calculator</h1>\n        <p id=\"introduction\" class=\"introduction-text\">\n            This application allows you to calculate your Body Mass Index (BMI) to assess your weight status.\n        </p>\n        <a id=\"calculator-link\" class=\"link\" href=\"{% url 'bmi_calculator' %}\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n# Project URL configurations\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    '''\n    The form for user to use the converter\n    '''\n    source_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, label='Source Currency')\n    target_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, label='Target Currency')\n    amount = forms.DecimalField(label='Amount', initial=1.00)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    \"\"\"\n    Model for currency rate record\n    \"\"\"\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=20, decimal_places=10, verbose_name='Rate')\n    timestamp = models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')\n\n    class Meta:\n        verbose_name = 'Currency Conversion Rate'\n        verbose_name_plural = 'Currency Conversion Rates'\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency} at {self.rate}'"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nfrom django.shortcuts import render\nfrom django.views import View\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\ndef get_updated(source_currency, target_currency):\n    USD_BASE = {\n        'USD': 1.00,\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'JPY': 110.00,\n        'AUD': 1.35,\n        'CNY': 7.00,\n        'CAD': 1.25,\n        'CHF': 0.92,\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\nclass ConvertCurrencyView(View):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            amount = form.cleaned_data['amount']\n\n            # In real envrionment, this function will be replaced with an api from professional currency exchanging market website.\n            conversion_rate = get_updated(source_currency, target_currency)\n            converted_amount = amount * conversion_rate\n\n            # Save to database (optional)\n            CurrencyConvertRateModel.objects.create(\n                source_currency=source_currency,\n                target_currency=target_currency,\n                rate=conversion_rate\n            )\n\n            return render(request, self.template_name, {\n                'form': form,\n                'converted_amount': converted_amount,\n                'source_currency': source_currency,\n                'target_currency': target_currency,\n                'amount': amount,\n            })\n        return render(request, self.template_name, {'form': form})\n\nclass ExchangeRateTrendsView(View):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        # Add logic to fetch and display exchange rate trends\n        return render(request, self.template_name)\n\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-04 03:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=3, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=3, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=10, max_digits=20, verbose_name='Rate')),\n                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),\n            ],\n            options={\n                'verbose_name': 'Currency Conversion Rate',\n                'verbose_name_plural': 'Currency Conversion Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f8f9fa;\n        }\n        .container {\n            margin-top: 20px;\n            background-color: #ffffff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        h1 {\n            color: #007bff;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"trends-title\" class=\"mb-4\">Exchange Rate Trends</h1>\n        <p id=\"trends-description\" class=\"lead\">This page will display exchange rate trends.</p>\n        <!-- Add more content here later -->\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f8f9fa;\n        }\n        .container {\n            margin-top: 20px;\n            background-color: #ffffff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        h1 {\n            color: #007bff;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"converter-title\" class=\"mb-4\">Currency Converter</h1>\n        <form id=\"currency-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"id_source_currency\">Source Currency:</label>\n                {{ form.source_currency }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_target_currency\">Target Currency:</label>\n                {{ form.target_currency }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_amount\">Amount:</label>\n                {{ form.amount }}\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n            <div id=\"result\" class=\"mt-3\">\n                <p id=\"conversion-result\">{{ amount }} {{ source_currency }} = {{ converted_amount }} {{ target_currency }}</p>\n            </div>\n        {% endif %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView, InfoView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', InfoView, name='info')\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "info.html", "path": "example_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Info</title>\n</head>\n<body>\n    <h1>Info</h1>\n    <p>This is a sample Django project for currency conversion.</p>\n</body>\n</html>"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView().get, name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView().get, name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    \"\"\"\n    Generates a random password based on the specified criteria.\n    \"\"\"\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return \"Please select at least one character set.\"\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    \"\"\"\n    Handles the password generation form and renders the result.\n    \"\"\"\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n        return render(request, 'generator.html', {'password': password, 'length': length,\n                                                    'uppercase': include_uppercase, 'lowercase': include_lowercase,\n                                                    'numbers': include_numbers, 'symbols': include_symbols})\n    else:\n        return render(request, 'generator.html')\n\n\nclass HomePageView:\n    \"\"\"\n    Renders the Home page of the password generator.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handles GET requests to the home page.\n        \"\"\"\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView:\n    \"\"\"\n    Renders the About Us page of the password generator.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handles GET requests to the about us page.\n        \"\"\"\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n.container { width: 80%; margin: 0 auto; padding: 20px; }\n.form-group { margin-bottom: 10px; }\nlabel { display: block; margin-bottom: 5px; }\ninput[type='number'] { width: 50px; }\n.password-display { font-size: 1.2em; margin-top: 10px; }\n.copy-button { cursor: pointer; }\n#copy-message { display: none; color: green; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password-display').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"about-us-container\">\n        <h1 id=\"about-us-title\">About Our Password Generator</h1>\n        <p id=\"about-us-text\">This password generator helps you create strong and secure passwords for your online accounts.  We offer customizable options to include uppercase letters, lowercase letters, numbers, and symbols.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"generator-container\">\n        <h1 id=\"generator-title\">Password Generator</h1>\n        <form id=\"password-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"length-group\">\n                <label for=\"length\" id=\"length-label\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" min=\"8\" max=\"32\" value=\"{{ length|default:12 }}\">\n            </div>\n            <div class=\"form-group\" id=\"uppercase-group\">\n                <label for=\"uppercase\" id=\"uppercase-label\">Include Uppercase:</label>\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" {% if uppercase %}checked{% endif %}>\n            </div>\n            <div class=\"form-group\" id=\"lowercase-group\">\n                <label for=\"lowercase\" id=\"lowercase-label\">Include Lowercase:</label>\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" {% if lowercase %}checked{% endif %}>\n            </div>\n            <div class=\"form-group\" id=\"numbers-group\">\n                <label for=\"numbers\" id=\"numbers-label\">Include Numbers:</label>\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" {% if numbers %}checked{% endif %}>\n            </div>\n            <div class=\"form-group\" id=\"symbols-group\">\n                <label for=\"symbols\" id=\"symbols-label\">Include Symbols:</label>\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" {% if symbols %}checked{% endif %}>\n            </div>\n            <button type=\"submit\" id=\"generate-button\">Generate Password</button>\n        </form>\n\n        {% if password %}\n            <div class=\"password-display\" id=\"password-display\">{{ password }}</div>\n            <button class=\"copy-button\" id=\"copy-button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n            <div id=\"copy-message\" style=\"display: none;\"></div>\n        {% endif %}\n    </div>\n    <script src=\"/static/js/scripts.js\"></script>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 id=\"home-title\">Welcome to the Password Generator!</h1>\n        <p id=\"home-text\">Generate strong and secure passwords for all your online needs.</p>\n        <a href=\"/generator/\" id=\"generator-link\">Generate Password</a>\n        <a href=\"/about-us/\" id=\"about-us-link\">About Us</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'example_app/static'),\n]\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    \"\"\"\n    Configuration class for the QR app.\n    \"\"\"\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse, FileResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\nfrom django.conf import settings\nimport os\n\n\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'qr_app/home.html')\n\n\ndef hex_to_rgb(hex_color):\n    \"\"\"\n    Convert hex color to RGB tuple.\n    \"\"\"\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))\n\n\ndef generate_qr_code(request):\n    \"\"\"\n    Generate a QR code from provided data.\n    \"\"\"\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fill_color = request.POST.get('fill_color', '#000000') # Default to black\n        back_color = request.POST.get('back_color', '#FFFFFF') # Default to white\n        \n        try:\n            fill_color_rgb = hex_to_rgb(fill_color)\n            back_color_rgb = hex_to_rgb(back_color)\n        except:\n            fill_color_rgb = (0, 0, 0)\n            back_color_rgb = (255, 255, 255)\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color_rgb, back_color=back_color_rgb)\n\n        buffer = io.BytesIO()\n        img.save(buffer, format='PNG')\n        img_data = base64.b64encode(buffer.getvalue()).decode('utf-8')\n\n        return render(request, 'qr_app/generate.html', {'qr_code': img_data})\n    else:\n        return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    \"\"\"\n    Allow users to download the generated QR code.\n    \"\"\"\n    if request.method == 'POST':\n        img_data = request.POST.get('qr_code')\n        if img_data:\n            img_data = img_data.split(',')[1]\n            img_bytes = base64.b64decode(img_data)\n            \n            buffer = io.BytesIO(img_bytes)\n            return FileResponse(buffer, as_attachment=True, filename='qrcode.png')\n    return HttpResponse('Error downloading QR code.')\n\n\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <style>\n       .about-container {\n           font-family: Arial, sans-serif;\n           margin: 20px;\n       }\n\n       .about-header {\n           text-align: center;\n           color: #333;\n       }\n\n       .about-content {\n           line-height: 1.6;\n       }\n\n       .faq-section {\n           margin-top: 20px;\n       }\n\n       .faq-question {\n           font-weight: bold;\n           margin-bottom: 5px;\n       }\n\n       .faq-answer {\n           margin-bottom: 15px;\n       }\n    </style>\n</head>\n<body>\n<div id=\"about-page\" class=\"about-container\">\n    <h1 id=\"about-title\" class=\"about-header\">About Our QR Code Generator</h1>\n    <div id=\"about-text\" class=\"about-content\">\n        <p>This QR Code Generator is a simple and easy-to-use tool that allows you to create QR codes for various purposes.</p>\n        <p>You can use it to encode URLs, text, contact information, and more.</p>\n        <p>Our goal is to provide a reliable and convenient solution for generating QR codes quickly and efficiently.</p>\n    </div>\n\n    <section id=\"faq\" class=\"faq-section\">\n        <h2 class=\"about-header\">Frequently Asked Questions</h2>\n\n        <div class=\"faq-item\">\n            <p class=\"faq-question\">What is a QR code?</p>\n            <p id=\"faq-answer-1\" class=\"faq-answer\">A QR code (Quick Response code) is a type of matrix barcode that can be read easily by digital devices and stores information as a series of pixels in a square-grid.</p>\n        </div>\n\n        <div class=\"faq-item\">\n            <p class=\"faq-question\">How do I scan a QR code?</p>\n            <p id=\"faq-answer-2\" class=\"faq-answer\">You can scan a QR code using the camera on your smartphone or tablet, or by using a dedicated QR code scanner app.</p>\n        </div>\n\n        <div class=\"faq-item\">\n            <p class=\"faq-question\">Can I customize the design of my QR code?</p>\n            <p id=\"faq-answer-3\" class=\"faq-answer\">Yes, our generator allows you to customize the color of QR code.</p>\n        </div>\n    </section>\n\n    <section id=\"policies\">\n      <h2 class=\"about-header\">Policies</h2>\n\n      <div class=\"policies-item\">\n        <p><strong>Privacy Policy:</strong> We respect your privacy and do not store any data you input into the QR code generator.</p>\n        <p><strong>Terms of Service:</strong> By using this service, you agree to use it responsibly and not for any illegal purposes.</p>\n      </div>\n    </section>\n</div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        input[type=\"text\"], select {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n            margin-bottom: 10px;\n        }\n\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #3e8e41;\n        }\n\n        #qr-code-display {\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        #qr-code-image {\n            max-width: 300px;\n            max-height: 300px;\n            border: 1px solid #ddd;\n            margin-bottom: 10px;\n        }\n\n        .download-button {\n            background-color: #008CBA;\n        }\n\n        .download-button:hover {\n            background-color: #0077A3;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"qr-generator-container\">\n        <h1 class=\"form-group\">QR Code Generator</h1>\n        <form id=\"qr-code-form\" method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"data\" id=\"data-label\">Data:</label>\n                <input type=\"text\" id=\"data\" name=\"data\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"fill_color\" id=\"fill-color-label\">Fill Color:</label>\n                <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"back_color\" id=\"back-color-label\">Back Color:</label>\n                <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#FFFFFF\">\n            </div>\n            <button type=\"submit\" id=\"generate-button\">Generate QR Code</button>\n        </form>\n\n        {% if qr_code %}\n        <div id=\"qr-code-display\">\n            <img id=\"qr-code-image\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n            <form method=\"post\" action=\"{% url 'download_qr_code' %}\">\n                {% csrf_token %}\n                <input type=\"hidden\" name=\"qr_code\" value=\"data:image/png;base64,{{ qr_code }}\">\n                <button type=\"submit\" class=\"download-button\" id=\"download-button\">Download QR Code</button>\n            </form>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            background-color: #fff;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        h1 {\n            text-align: center;\n            color: #007bff;\n        }\n\n        p {\n            line-height: 1.6;\n            margin-bottom: 15px;\n        }\n\n        .navigation {\n            text-align: center;\n            margin-top: 30px;\n        }\n\n        .navigation a {\n            display: inline-block;\n            padding: 10px 20px;\n            margin: 0 10px;\n            background-color: #007bff;\n            color: #fff;\n            text-decoration: none;\n            border-radius: 5px;\n            transition: background-color 0.3s ease;\n        }\n\n        .navigation a:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\">Welcome to the QR Code Generator</h1>\n        <p id=\"home-intro\">This tool allows you to easily generate QR codes for various purposes. You can encode URLs, text, contact information, and more into a QR code that can be scanned by any smartphone or QR code reader.</p>\n\n        <p id=\"home-features\">Key features include:</p>\n        <ul id=\"home-feature-list\">\n            <li>Easy to use interface</li>\n            <li>Customizable QR code generation</li>\n            <li>Option to download generated QR codes</li>\n        </ul>\n\n        <div id=\"home-navigation\" class=\"navigation\">\n            <a id=\"generate-link\" href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n            <a id=\"about-link\" href=\"{% url 'about' %}\">About Us</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\n\nALLOWED_HOSTS = []\n\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'qr_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\n\nTIME_ZONE = 'UTC'\n\n\nUSE_I18N = True\n\n\nUSE_L10N = True\n\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'qr_app/static')] \n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}, {"file": "style.css", "path": "qr_app/static/qr_app/style.css", "code": "/* You can add your global styles here */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n/* Add more styles as needed */"}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    \"\"\"\n    Configuration for the Example App.\n    \"\"\"\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.core.files.storage import FileSystemStorage\nfrom django.urls import reverse\n\n# Home view\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\n# Convert view\ndef convert(request):\n    \"\"\"\n    Handle Markdown to HTML conversion.\n    \"\"\"\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_content = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_content': html_content})\n    return render(request, 'convert.html')\n\n# About view\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n    <style>\n        body { font-family: sans-serif; }\n        .container { width: 80%; margin: 0 auto; }\n    </style>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About the Markdown to HTML Converter</h1>\n        <p id=\"about-description\" class=\"description\">This web application provides a simple and easy-to-use interface for converting Markdown text into HTML format.</p>\n        <p id=\"about-features\" class=\"features\">Key Features:</p>\n        <ul id=\"about-features-list\" class=\"features-list\">\n            <li class=\"feature-item\">Real-time Markdown to HTML Conversion</li>\n            <li class=\"feature-item\">Clean and Simple Interface</li>\n            <li class=\"feature-item\">Easy to Use</li>\n        </ul>\n        <p id=\"about-contact\" class=\"contact\">For any questions or feedback, please contact us at example@example.com</p>\n    </div>\n</body>\n</html>\n"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Convert</title>\n    <style>\n        body { font-family: sans-serif; }\n        .container { width: 80%; margin: 0 auto; }\n        textarea { width: 100%; height: 200px; margin-bottom: 10px; }\n        #html-output { border: 1px solid #ccc; padding: 10px; margin-top: 10px; }\n    </style>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"container\">\n        <h1 id=\"convert-title\" class=\"title\">Markdown to HTML Converter</h1>\n        <form id=\"convert-form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" name=\"markdown_text\" placeholder=\"Enter Markdown text here\"></textarea>\n            <button id=\"convert-button\" type=\"submit\">Convert to HTML</button>\n        </form>\n        {% if html_content %}\n        <div id=\"html-output\" class=\"html-output\">\n            <h2>HTML Output:</h2>\n            {{ html_content|safe }}\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <style>\n        body { font-family: sans-serif; }\n        .container { width: 80%; margin: 0 auto; }\n        .nav-link { display: inline-block; margin-right: 10px; }\n    </style>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Markdown to HTML Converter</h1>\n        <p id=\"home-description\" class=\"description\">This application allows you to easily convert Markdown text into HTML format.</p>\n        <nav id=\"home-navigation\" class=\"navigation\">\n            <a id=\"home-convert-link\" class=\"nav-link\" href=\"{% url 'convert' %}\">Convert Markdown</a>\n            <a id=\"home-about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n        </nav>\n    </div>\n</body>\n</html>\n"}, {"file": null, "path": "media", "code": ""}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\n# Base directory\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Security settings\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\n# Installed applications\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\n# Middleware settings\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# URL configuration\nROOT_URLCONF = 'project.urls'\n\n# Template settings\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# WSGI application\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database settings\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Localization settings\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\n# Static and media files settings\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\n# URL patterns for the project\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\n# WSGI application definition\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\napplication = get_wsgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    \"\"\"\n    Todo List model\n    \"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoList.\n        \"\"\"\n        return self.title\n\n\nclass TodoItem(models.Model):\n    \"\"\"\n    Todo Item model\n    \"\"\"\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoItem.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item,\n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.generic import TemplateView, ListView, DetailView, CreateView, UpdateView, DeleteView\nfrom django.urls import reverse_lazy\nfrom .models import TodoList, TodoItem\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n    context_object_name = 'todo_lists'\n\n\nclass TodoItemView(DetailView):\n    template_name = 'tasks.html'\n    model = TodoList\n    context_object_name = 'todolist'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todo_items'] = TodoItem.objects.filter(todolist=self.get_object())\n        return context\n\n\ndef delete_todo(request, pk):\n    todolist = get_object_or_404(TodoList, pk=pk)\n    todolist.delete()\n    return redirect('todo_list')\n\n\ndef edit_todo(request, pk):\n    todolist = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        todolist.title = request.POST['title']\n        todolist.description = request.POST['description']\n        todolist.save()\n        return redirect('todo_list')\n    return render(request, 'edit_todo.html', {'todolist': todolist})\n\n\n\ndef delete_todo_item(request, pk):\n    todoitem = get_object_or_404(TodoItem, pk=pk)\n    todolist_pk = todoitem.todolist.pk\n    todoitem.delete()\n    return redirect('view_todo_item', pk=todolist_pk)\n\n\ndef edit_todo_item(request, pk):\n    todoitem = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        todoitem.title = request.POST['title']\n        todoitem.description = request.POST['description']\n        todoitem.save()\n        return redirect('view_todo_item', pk=todoitem.todolist.pk)\n    return render(request, 'edit_todo_item.html', {'todoitem': todoitem})\n\n\ndef complete_todo_item(request, pk):\n    todoitem = get_object_or_404(TodoItem, pk=pk)\n    todoitem.completed = not todoitem.completed\n    todoitem.save()\n    return redirect('view_todo_item', pk=todoitem.todolist.pk)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        total_items = todo_items.count()\n        completed_items = todo_items.filter(completed=True).count()\n\n        if total_items > 0:\n            completion_rate = (completed_items / total_items) * 100\n        else:\n            completion_rate = 0\n\n        context['completion_rate'] = completion_rate\n        context['total_items'] = total_items\n        context['completed_items'] = completed_items\n        context['incomplete_items'] = total_items - completed_items\n\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1 id=\"analysis-title\" class=\"text-center\">Task Analysis</h1>\n\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <canvas id=\"completionRateChart\"></canvas>\n            </div>\n            <div class=\"col-md-6\">\n                <canvas id=\"taskDistributionChart\"></canvas>\n            </div>\n        </div>\n        <a href=\"{% url 'home' %}\" class=\"btn btn-primary mt-3\">Return Home</a>\n    </div>\n\n    <script>\n        const completionRate = {{ completion_rate|default:0 }};\n        const totalItems = {{ total_items|default:0 }};\n        const completedItems = {{ completed_items|default:0 }};\n        const incompleteItems = {{ incomplete_items|default:0 }};\n\n        const completionRateCtx = document.getElementById('completionRateChart').getContext('2d');\n        const taskDistributionCtx = document.getElementById('taskDistributionChart').getContext('2d');\n\n        new Chart(completionRateCtx, {\n            type: 'doughnut',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    label: 'Completion Rate',\n                    data: [completionRate, 100 - completionRate],\n                    backgroundColor: [\n                        'rgba(75, 192, 192, 0.7)',\n                        'rgba(255, 99, 132, 0.7)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                title: {\n                    display: true,\n                    text: 'Completion Rate'\n                }\n            }\n        });\n\n        new Chart(taskDistributionCtx, {\n            type: 'bar',\n            data: {\n                labels: ['Total', 'Completed', 'Incomplete'],\n                datasets: [{\n                    label: 'Number of Tasks',\n                    data: [totalItems, completedItems, incompleteItems],\n                    backgroundColor: [\n                        'rgba(54, 162, 235, 0.7)',\n                        'rgba(75, 192, 192, 0.7)',\n                        'rgba(255, 99, 132, 0.7)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    yAxes: [{\n                        ticks: {\n                            beginAtZero: true\n                        }\n                    }]\n                },\n                title: {\n                    display: true,\n                    text: 'Task Distribution'\n                }\n            }\n        });\n    </script>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1 id=\"edit-todo-list-title\" class=\"text-center\">Edit Todo List</h1>\n        <form id=\"edit-todo-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"title\" class=\"form-label\">Title:</label>\n                <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" value=\"{{ todolist.title }}\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"form-label\">Description:</label>\n                <textarea class=\"form-control\" id=\"description\" name=\"description\">{{ todolist.description }}</textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Update</button>\n            <a href=\"{% url 'todo_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1 id=\"edit-todo-item-title\" class=\"text-center\">Edit Todo Item</h1>\n        <form id=\"edit-todo-item-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"title\" class=\"form-label\">Title:</label>\n                <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" value=\"{{ todoitem.title }}\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"form-label\">Description:</label>\n                <textarea class=\"form-control\" id=\"description\" name=\"description\">{{ todoitem.description }}</textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Update</button>\n            <a href=\"{% url 'view_todo_item' pk=todoitem.todolist.pk %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1 id=\"home-title\" class=\"text-center\">Welcome to the Todo App</h1>\n        <div class=\"text-center\">\n            <a id=\"todo-list-link\" href=\"{% url 'todo_list' %}\" class=\"btn btn-primary\">View Todo Lists</a>\n            <a id=\"analysis-link\" href=\"{% url 'analysis' %}\" class=\"btn btn-info ml-3\">View Analysis</a>\n        </div>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1 id=\"todo-list-title\" class=\"text-center\">Todo List: {{ todolist.title }}</h1>\n        <p id=\"todo-list-description\">{{ todolist.description }}</p>\n\n        <ul id=\"task-list\" class=\"list-group\">\n            {% for item in todo_items %}\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <span class=\"task-title {% if item.completed %}completed-task{% endif %}\">{{ item.title }}</span>\n                <div>\n                    <a href=\"{% url 'complete_todo_item' pk=item.pk %}\" class=\"btn btn-success btn-sm\">{% if item.completed %}Undo{% else %}Complete{% endif %}</a>\n                    <a href=\"{% url 'edit_todo_item' pk=item.pk %}\" class=\"btn btn-primary btn-sm\">Edit</a>\n                    <a href=\"{% url 'delete_todo_item' pk=item.pk %}\" class=\"btn btn-danger btn-sm\">Delete</a>\n                </div>\n            </li>\n            {% endfor %}\n        </ul>\n        <h2 class=\"mt-3\">Add New Task</h2>\n        <form id=\"add-task-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"title\" class=\"form-label\">Title:</label>\n                <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"form-label\">Description:</label>\n                <textarea class=\"form-control\" id=\"description\" name=\"description\"></textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Add Task</button>\n            <a href=\"{% url 'todo_list' %}\" class=\"btn btn-secondary\">Back to Lists</a>\n        </form>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1 id=\"todo-list-title\" class=\"text-center\">Todo Lists</h1>\n        <ul id=\"todo-lists\" class=\"list-group\">\n            {% for todo in todo_lists %}\n            <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                <a href=\"{% url 'view_todo_item' pk=todo.pk %}\">{{ todo.title }}</a>\n                <div>\n                    <a href=\"{% url 'edit_todo' pk=todo.pk %}\" class=\"btn btn-primary btn-sm\">Edit</a>\n                    <a href=\"{% url 'delete_todo' pk=todo.pk %}\" class=\"btn btn-danger btn-sm\">Delete</a>\n                </div>\n            </li>\n            {% endfor %}\n        </ul>\n        <h2 class=\"mt-3\">Add New List</h2>\n        <form id=\"add-list-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"title\" class=\"form-label\">Title:</label>\n                <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"form-label\">Description:</label>\n                <textarea class=\"form-control\" id=\"description\" name=\"description\"></textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Add List</button>\n            <a href=\"{% url 'home' %}\" class=\"btn btn-secondary\">Home</a>\n        </form>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}, {"file": "static.py", "path": "example_app/static/style.css", "code": ".completed-task {\n    text-decoration: line-through;\n    color: gray;\n}"}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main function to execute Django commands\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    \"\"\"\n    Model for representing the category of transactions.\n    \"\"\"\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the category.\n        \"\"\"\n        return self.name\n\n\nclass Transaction(models.Model):\n    \"\"\"\n    Model for representing a financial transaction.\n    \"\"\"\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the transaction.\n        \"\"\"\n        return f'{self.amount} - {self.category} on {self.date.strftime('%Y-%m-%d')}'\n\n\nclass SupportRequest(models.Model):\n    \"\"\"\n    Model for capturing support requests from users.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    subject = models.CharField(max_length=255)\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the support request.\n        \"\"\"\n        return f'Support request from {self.name} ({self.email})'"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import *\n\n# URL patterns for routing views\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('signup/', SignupView.as_view(), name='signup'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('dashboard/', DashboardView.as_view(), name='dashboard'),\n    path('charts/', ChartsView.as_view(), name='charts'),\n    path('settings/', SettingsView.as_view(), name='settings'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('download_report/', DownloadReportView.as_view(), name='download_report'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db import models\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse, HttpRequest\nfrom django.utils.timezone import now\nfrom django.views.generic import View, TemplateView\nfrom django.contrib.auth import authenticate, login, update_session_auth_hash, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\nfrom django.urls import reverse\n\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    \"\"\"\n    Basic view that requires login.\n    \"\"\"\n    login_url = '/login/'\n    redirect_field_name = 'next'\n\n\nclass HomeView(TemplateView):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    template_name = 'home.html'\n\n\nclass LoginView(View):\n    \"\"\"\n    Handles user login functionality.\n    \"\"\"\n    template_name = 'login.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            return redirect('dashboard')\n        else:\n            messages.error(request, 'Invalid username or password.')\n            return render(request, self.template_name)\n\n\nclass SignupView(View):\n    \"\"\"\n    Manages the signup process for new users.\n    \"\"\"\n    template_name = 'signup.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        password_confirm = request.POST.get('password_confirm')\n        email = request.POST.get('email')\n\n        if password != password_confirm:\n            messages.error(request, 'Passwords do not match.')\n            return render(request, self.template_name)\n\n        if User.objects.filter(username=username).exists():\n            messages.error(request, 'Username already exists.')\n            return render(request, self.template_name)\n\n        user = User.objects.create_user(username, email, password)\n        login(request, user)\n        return redirect('dashboard')\n\n\nclass LogoutView(LoginRequiredView):\n    \"\"\"\n    Logs out the user and redirects to the login page.\n    \"\"\"\n    def get(self, request):\n        logout(request)\n        return redirect('login')\n\n\nclass DashboardView(LoginRequiredView, TemplateView):\n    \"\"\"\n    Handles displaying and interacting with the dashboard.\n    \"\"\"\n    template_name = 'dashboard.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        transactions = Transaction.objects.filter(user=self.request.user).order_by('-date')\n        context['transactions'] = transactions\n        return context\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        category_name = request.POST.get('category')\n        amount = request.POST.get('amount')\n        date_str = request.POST.get('date')\n        description = request.POST.get('description')\n\n        try:\n            category = Category.objects.get(name=category_name)\n            date = datetime.strptime(date_str, '%Y-%m-%d').date()\n            amount = float(amount)\n\n            transaction = Transaction.objects.create(\n                user=request.user, category=category, amount=amount, date=date, description=description\n            )\n            messages.success(request, 'Transaction added successfully!')\n        except Category.DoesNotExist:\n            messages.error(request, 'Category does not exist.')\n        except ValueError:\n            messages.error(request, 'Invalid amount or date format.')\n        return redirect('dashboard')\n\n\nclass ChartsView(LoginRequiredView, TemplateView):\n    \"\"\"\n    Renders and provides data for the charts page.\n    \"\"\"\n    template_name = 'charts.html'\n\n\nclass SettingsView(LoginRequiredView, TemplateView):\n    \"\"\"\n    Provides user settings management.\n    \"\"\"\n    template_name = 'settings.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        # Handle updates and changes to settings (e.g., password)\n        pass\n\n\nclass SupportView(LoginRequiredView, View):\n    \"\"\"\n    Allows users to view and submit support requests.\n    \"\"\"\n    template_name = 'support.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        subject = request.POST.get('subject')\n        message = request.POST.get('message')\n\n        SupportRequest.objects.create(name=name, email=email, subject=subject, message=message)\n        messages.success(request, 'Support request submitted successfully!')\n        return redirect('support')\n\n\nclass DownloadReportView(LoginRequiredView):\n    \"\"\"\n    Enables users to download financial reports.\n    \"\"\"\n    def post(self, request: HttpRequest) -> HttpResponse:\n        response = HttpResponse(\n            content_type='text/csv',\n            headers={'Content-Disposition': 'attachment; filename=\"report.csv\"'},\n        )\n\n        writer = csv.writer(response)\n        writer.writerow(['Date', 'Category', 'Amount', 'Description'])\n\n        transactions = Transaction.objects.filter(user=request.user).order_by('date')\n        for transaction in transactions:\n            writer.writerow([\n                transaction.date,\n                transaction.category,\n                transaction.amount,\n                transaction.description\n            ])\n\n        return response"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"charts-container\" class=\"charts-container\">\n        <canvas id=\"transaction-chart\" class=\"transaction-chart\"></canvas>\n    </div>\n    <script>\n        // Sample data for chart.js\n        const transactionData = {\n            labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n            datasets: [{\n                label: 'Transactions by Month',\n                data: [65, 59, 80, 81, 56, 55],\n                backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                borderColor: 'rgba(54, 162, 235, 1)',\n                borderWidth: 1\n            }]\n        };\n\n        const chartConfig = {\n            type: 'bar',\n            data: transactionData,\n            options: {\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        };\n\n        const transactionChart = new Chart(\n            document.getElementById('transaction-chart').getContext('2d'),\n            chartConfig\n        );\n    </script>\n</body>\n</html>"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Dashboard</title>\n</head>\n<body>\n    <div id=\"dashboard\" class=\"dashboard-container\">\n        <h1>Welcome to Your Dashboard</h1>\n        <div id=\"transaction-form\" class=\"transaction-form\">\n            <h2>Add New Transaction</h2>\n            <form method=\"post\">\n                {% csrf_token %}\n                <label for=\"category\">Category:</label>\n                <input type=\"text\" id=\"category\" name=\"category\" required><br><br>\n                <label for=\"amount\">Amount:</label>\n                <input type=\"number\" id=\"amount\" name=\"amount\" step=\"0.01\" required><br><br>\n                <label for=\"date\">Date:</label>\n                <input type=\"date\" id=\"date\" name=\"date\" required><br><br>\n                <label for=\"description\">Description:</label>\n                <textarea id=\"description\" name=\"description\"></textarea><br><br>\n                <button type=\"submit\" class=\"add-transaction-button\">Add Transaction</button>\n            </form>\n        </div>\n\n        <div id=\"transaction-list\" class=\"transaction-list\">\n            <h2>Your Transactions</h2>\n            <ul>\n                {% for transaction in transactions %}\n                    <li class=\"transaction-item\">{{ transaction.date }} - {{ transaction.category }} - {{ transaction.amount }} - {{ transaction.description }}</li>\n                {% empty %}\n                    <li>No transactions yet.</li>\n                {% endfor %}\n            </ul>\n        </div>\n        <a href=\"{% url 'charts' %}\" class=\"view-charts-link\">View Charts</a>\n        <a href=\"{% url 'settings' %}\" class=\"view-settings-link\">Settings</a>\n        <a href=\"{% url 'support' %}\" class=\"view-support-link\">Support</a>\n        <a href=\"{% url 'logout' %}\" class=\"logout-link\">Logout</a>\n\n        {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n</head>\n<body>\n    <div id=\"home-page\" class=\"home-container\">\n        <h1>Welcome!</h1>\n        <p>Manage your finances effectively.</p>\n\n        <div id=\"navigation\" class=\"navigation-links\">\n            <a href=\"{% url 'login' %}\" class=\"login-link\">Login</a>\n            <a href=\"{% url 'signup' %}\" class=\"signup-link\">Signup</a>\n            <a href=\"{% url 'support' %}\" class=\"support-link\">Support</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <div id=\"login-page\" class=\"login-container\">\n        <h2>Login</h2>\n        <form method=\"post\" id=\"login-form\" class=\"login-form\">\n            {% csrf_token %}\n            <label for=\"username\">Username:</label>\n            <input type=\"text\" id=\"username\" name=\"username\" required><br><br>\n            <label for=\"password\">Password:</label>\n            <input type=\"password\" id=\"password\" name=\"password\" required><br><br>\n            <button type=\"submit\" class=\"login-button\">Login</button>\n        </form>\n        <p>Don't have an account? <a href=\"{% url 'signup' %}\" class=\"signup-link\">Signup</a></p>\n         {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Settings</title>\n</head>\n<body>\n    <div id=\"settings-page\" class=\"settings-container\">\n        <h2>Settings</h2>\n        <p>Update your profile details here.</p>\n\n        <div id=\"profile-settings\" class=\"profile-settings\">\n            <h3>Profile Settings</h3>\n            <!-- Add forms and elements for user to update profile details -->\n            <p>Change Password form here.</p>\n        </div>\n\n        <div id=\"category-management\" class=\"category-management\">\n            <h3>Category Management</h3>\n             <p>Category management interface here.</p>\n        </div>\n        <a href=\"{% url 'dashboard' %}\" class=\"back-to-dashboard-link\">Back to Dashboard</a>\n    </div>\n</body>\n</html>"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Signup</title>\n</head>\n<body>\n    <div id=\"signup-page\" class=\"signup-container\">\n        <h2>Signup</h2>\n        <form method=\"post\" id=\"signup-form\" class=\"signup-form\">\n            {% csrf_token %}\n            <label for=\"username\">Username:</label>\n            <input type=\"text\" id=\"username\" name=\"username\" required><br><br>\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n            <label for=\"password\">Password:</label>\n            <input type=\"password\" id=\"password\" name=\"password\" required><br><br>\n            <label for=\"password_confirm\">Confirm Password:</label>\n            <input type=\"password\" id=\"password_confirm\" name=\"password_confirm\" required><br><br>\n            <button type=\"submit\" class=\"signup-button\">Signup</button>\n        </form>\n        <p>Already have an account? <a href=\"{% url 'login' %}\" class=\"login-link\">Login</a></p>\n         {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Support</title>\n</head>\n<body>\n    <div id=\"support-page\" class=\"support-container\">\n        <h2>Support</h2>\n        <p>Submit your support request here.</p>\n        <form method=\"post\" id=\"support-form\" class=\"support-form\">\n            {% csrf_token %}\n            <label for=\"name\">Name:</label>\n            <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n            <label for=\"email\">Email:</label>\n            <input type=\"email\" id=\"email\" name=\"email\" required><br><br>\n            <label for=\"subject\">Subject:</label>\n            <input type=\"text\" id=\"subject\" name=\"subject\" required><br><br>\n            <label for=\"message\">Message:</label>\n            <textarea id=\"message\" name=\"message\" required></textarea><br><br>\n            <button type=\"submit\" class=\"submit-support-button\">Submit Request</button>\n        </form>\n        <a href=\"{% url 'dashboard' %}\" class=\"back-to-dashboard-link\">Back to Dashboard</a>\n         {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Security settings and key configuration\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\n# Hosts allowed to serve the application\nALLOWED_HOSTS = []\n\n# Application definitions\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\n# Middleware settings\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# URL configuration\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# WSGI application\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n# Database configuration\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Locale and timezone settings\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\n# Static files (CSS, JavaScript, Images) settings\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'example_app/static'),\n]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n# Main URL routing configuration\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\n# Setup the default Django settings module for the WSGI application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.5 on 2023-10-27 16:00\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField(max_length=254)),\n                ('subject', models.CharField(max_length=255)),\n                ('message', models.TextField()),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "style.css", "path": "example_app/static/style.css", "code": "/* Basic styling for the components */\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\n.container {\n    width: 80%;\n    margin: auto;\n    overflow: hidden;\n}\n\n/* Home Page Styling */\n.home-container {\n    text-align: center;\n    padding: 50px;\n}\n\n.navigation-links a {\n    display: inline-block;\n    padding: 10px 20px;\n    margin: 10px;\n    background-color: #3498db;\n    color: #fff;\n    text-decoration: none;\n    border-radius: 5px;\n}\n\n/* Login and Signup Styling */\n.login-container, .signup-container {\n    width: 50%;\n    margin: 50px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.login-form label, .signup-form label {\n    display: block;\n    margin-top: 10px;\n}\n\n.login-form input, .signup-form input {\n    width: 100%;\n    padding: 8px;\n    margin-top: 5px;\n    margin-bottom: 15px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.login-button, .signup-button {\n    background-color: #27ae60;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.login-button:hover, .signup-button:hover {\n    background-color: #219653;\n}\n\n/* Dashboard Styling */\n.dashboard-container {\n    padding: 20px;\n}\n\n.transaction-form {\n    margin-bottom: 20px;\n    padding: 15px;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n}\n\n.transaction-list {\n    background-color: #fff;\n    padding: 15px;\n    border-radius: 5px;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);\n}\n\n.transaction-item {\n    padding: 8px;\n    border-bottom: 1px solid #eee;\n}\n\n.transaction-item:last-child {\n    border-bottom: none;\n}\n\n/* Charts Styling */\n.charts-container {\n    padding: 20px;\n    text-align: center;\n}\n\n/* Support Styling */\n.support-container {\n    width: 60%;\n    margin: 30px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 5px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.support-form textarea {\n    width: 100%;\n    padding: 8px;\n    margin-top: 5px;\n    margin-bottom: 15px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n    resize: vertical;\n}\n\n.submit-support-button {\n    background-color: #e74c3c;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.submit-support-button:hover {\n    background-color: #c0392b;\n}"}], "8": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main function to execute Django command line utilities.\n    \"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Ensure it's installed and available on PYTHONPATH.\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\n\nclass EventForm(forms.ModelForm):\n    \"\"\"\n    Form for the Event model with custom DateTime field.\n    \"\"\"\n\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']\n        widgets = {\n            'datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\n\nclass Event(models.Model):\n    \"\"\"\n    Model representing an event with title, description, and dates.\n    \"\"\"\n\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        String representation of the event.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AddEventView, EditEventView, DeleteEventView, ListEventsView, EventDetailsView, HelpView\n\n\nurlpatterns = [\n    \"\"\"\n    URL patterns for the application.\n    \"\"\"\n    path('', HomePageView.as_view(), name='home'),\n    path('calendar/add-event/', AddEventView.as_view(), name='add_event'),\n    path('calendar/edit-event/<int:pk>/', EditEventView.as_view(), name='edit_event'),\n    path('calendar/delete-event/<int:pk>/', DeleteEventView.as_view(), name='delete_event'),\n    path('calendar/view-events/', ListEventsView.as_view(), name='view_events'),\n    path('calendar/view-event-details/<int:pk>/', EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', HelpView.as_view(template_name='faq.html'), name='faq'),\n    path('help/user-guide/', HelpView.as_view(template_name='user_guide.html'), name='user_guide'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.http import HttpResponse\nfrom django.contrib import messages\nfrom django.views.generic import TemplateView, ListView, DetailView, CreateView, UpdateView, DeleteView\nfrom django.urls import reverse_lazy\n\nfrom .forms import EventForm\nfrom .models import Event\n\n\nclass HomePageView(TemplateView):\n    template_name = 'home.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        now = datetime.now()\n        year = int(self.request.GET.get('year', now.year))\n        month = int(self.request.GET.get('month', now.month))\n        cal = calendar.monthcalendar(year, month)\n        context['calendar'] = cal\n        context['month'] = month\n        context['year'] = year\n        context['month_name'] = calendar.month_name[month]\n\n        events = Event.objects.filter(\n            datetime__year=year, datetime__month=month\n        )\n        event_dict = {}\n        for event in events:\n            day = event.datetime.day\n            if day not in event_dict:\n                event_dict[day] = []\n            event_dict[day].append(event)\n\n        context['events'] = event_dict\n        return context\n\n\nclass AddEventView(CreateView):\n    model = Event\n    form_class = EventForm\n    template_name = 'add_event.html'\n    success_url = reverse_lazy('view_events')\n\n\nclass EditEventView(UpdateView):\n    model = Event\n    form_class = EventForm\n    template_name = 'edit_event.html'\n    success_url = reverse_lazy('view_events')\n\n\nclass DeleteEventView(DeleteView):\n    model = Event\n    template_name = 'delete_event.html'\n    success_url = reverse_lazy('view_events')\n    context_object_name = 'event'\n\nclass ListEventsView(ListView):\n    model = Event\n    template_name = 'view_events.html'\n    context_object_name = 'events'\n    paginate_by = 10\n\n    def get_queryset(self):\n        query = self.request.GET.get('q')\n        if query:\n            return Event.objects.filter(Q(title__icontains=query) | Q(description__icontains=query)).order_by('-datetime')\n        else:\n            return Event.objects.all().order_by('-datetime')\n\n\nclass EventDetailsView(DetailView):\n    model = Event\n    template_name = 'view_event_details.html'\n    context_object_name = 'event'\n    pk_url_kwarg = 'pk'\n\n\nclass HelpView(TemplateView):\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-30 08:50\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "add_event.html", "path": "example_app/templates/add_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Event</title>\n</head>\n<body>\n    <div id=\"add-event-container\" class=\"container\">\n        <h1 id=\"add-event-title\" class=\"title\">Add New Event</h1>\n        <form id=\"add-event-form\" class=\"event-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"add-event-button\" class=\"submit-button\">Add Event</button>\n        </form>\n        <a href=\"{% url 'view_events' %}\" id=\"back-to-list\" class=\"back-link\">Back to Event List</a>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "example_app/templates/edit_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Event</title>\n</head>\n<body>\n    <div id=\"edit-event-container\" class=\"container\">\n        <h1 id=\"edit-event-title\" class=\"title\">Edit Event</h1>\n        <form id=\"edit-event-form\" class=\"event-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"update-event-button\" class=\"submit-button\">Update Event</button>\n        </form>\n        <a href=\"{% url 'view_events' %}\" id=\"back-to-list\" class=\"back-link\">Back to Event List</a>\n    </div>\n</body>\n</html>"}, {"file": "faq.html", "path": "example_app/templates/faq.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>FAQ</title>\n</head>\n<body>\n    <div id=\"faq-container\" class=\"container\">\n        <h1 id=\"faq-title\" class=\"title\">Frequently Asked Questions</h1>\n        <div id=\"faq-content\" class=\"content\">\n            <p id=\"faq-question-1\" class=\"question\">Q: How do I add an event?</p>\n            <p id=\"faq-answer-1\" class=\"answer\">A: Go to 'Add Event' and fill out the form.</p>\n            <p id=\"faq-question-2\" class=\"question\">Q: How do I edit an event?</p>\n            <p id=\"faq-answer-2\" class=\"answer\">A: Go to event list, click Edit on desired event</p>\n        </div>\n         <a href=\"{% url 'home' %}\" id=\"back-to-home\" class=\"back-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n        .calendar {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Event Calendar</h1>\n        <div id=\"calendar-controls\" class=\"controls\">\n            <a href=\"?month={{ prev_month }}&year={{ prev_year }}\" id=\"prev-month\" class=\"control-link\">Previous Month</a>\n            <span id=\"current-month\" class=\"current-month\">{{ month_name }} {{ year }}</span>\n            <a href=\"?month={{ next_month }}&year={{ next_year }}\" id=\"next-month\" class=\"control-link\">Next Month</a>\n        </div>\n        <table id=\"calendar-table\" class=\"calendar\">\n            <thead>\n                <tr>\n                    <th>Sun</th>\n                    <th>Mon</th>\n                    <th>Tue</th>\n                    <th>Wed</th>\n                    <th>Thu</th>\n                    <th>Fri</th>\n                    <th>Sat</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for week in calendar %}\n                <tr>\n                    {% for day in week %}\n                    <td>\n                        {% if day != 0 %}\n                            <span id=\"day-{{ day }}\" class=\"day\">{{ day }}</span>\n                            {% if day in events %}\n                                <ul id=\"event-list-{{ day }}\" class=\"event-list\">\n                                    {% for event in events.day %}\n                                        <li id=\"event-{{ event.id }}\" class=\"event-item\">\n                                            <a href=\"{% url 'view_event_details' event.pk %}\" class=\"event-link\">{{ event.title }}</a>\n                                        </li>\n                                    {% endfor %}\n                                </ul>\n                            {% endif %}\n                        {% endif %}\n                    </td>\n                    {% endfor %}\n                </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n        <div id=\"action-links\" class=\"action-links\">\n            <a href=\"{% url 'add_event' %}\" id=\"add-event-link\" class=\"action-link\">Add Event</a>\n            <a href=\"{% url 'view_events' %}\" id=\"view-events-link\" class=\"action-link\">View All Events</a>\n            <a href=\"{% url 'faq' %}\" id=\"faq-link\" class=\"action-link\">FAQ</a>\n            <a href=\"{% url 'user_guide' %}\" id=\"user-guide-link\" class=\"action-link\">User Guide</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "user_guide.html", "path": "example_app/templates/user_guide.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>User Guide</title>\n</head>\n<body>\n    <div id=\"user-guide-container\" class=\"container\">\n        <h1 id=\"user-guide-title\" class=\"title\">User Guide</h1>\n        <div id=\"user-guide-content\" class=\"content\">\n            <h2 id=\"guide-add-event\" class=\"section-title\">Adding Events</h2>\n            <p id=\"guide-add-event-description\" class=\"section-description\">To add an event, click on the 'Add Event' link. Fill in the form with the event details and submit.</p>\n            <h2 id=\"guide-view-events\" class=\"section-title\">Viewing Events</h2>\n            <p id=\"guide-view-events-description\" class=\"section-description\">To view all events, click on the 'View All Events' link. You can also search for specific events.</p>\n        </div>\n        <a href=\"{% url 'home' %}\" id=\"back-to-home\" class=\"back-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "view_events.html", "path": "example_app/templates/view_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Event List</title>\n</head>\n<body>\n    <div id=\"event-list-container\" class=\"container\">\n        <h1 id=\"event-list-title\" class=\"title\">Event List</h1>\n        <form id=\"event-search-form\" class=\"search-form\" method=\"get\">\n            <input type=\"text\" id=\"event-search-input\" class=\"search-input\" name=\"q\" placeholder=\"Search events...\">\n            <button type=\"submit\" id=\"event-search-button\" class=\"search-button\">Search</button>\n        </form>\n        <ul id=\"event-list\" class=\"event-list\">\n            {% for event in events %}\n                <li id=\"event-item-{{ event.id }}\" class=\"event-item\">\n                    <a href=\"{% url 'view_event_details' event.pk %}\" id=\"event-link-{{ event.id }}\" class=\"event-link\">{{ event.title }} - {{ event.datetime }}</a>\n                    <a href=\"{% url 'edit_event' event.pk %}\" id=\"edit-event-link-{{ event.id }}\" class=\"edit-link\">Edit</a>\n                    <a href=\"{% url 'delete_event' event.pk %}\" id=\"delete-event-link-{{ event.id }}\" class=\"delete-link\">Delete</a>\n                </li>\n            {% empty %}\n                <li id=\"no-events\" class=\"no-events\">No events found.</li>\n            {% endfor %}\n        </ul>\n\n        <div id=\"pagination\" class=\"pagination\">\n            {% if is_paginated %}\n                {% if page_obj.has_previous %}\n                    <a href=\"?page=1{% if request.GET.q %}&q={{ request.GET.q }}{% endif %}\" id=\"first-page\" class=\"page-link\">&laquo; first</a>\n                    <a href=\"?page={{ page_obj.previous_page_number }}{% if request.GET.q %}&q={{ request.GET.q }}{% endif %}\" id=\"previous-page\" class=\"page-link\">previous</a>\n                {% endif %}\n\n                <span id=\"current-page\" class=\"current-page\">Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.</span>\n\n                {% if page_obj.has_next %}\n                    <a href=\"?page={{ page_obj.next_page_number }}{% if request.GET.q %}&q={{ request.GET.q }}{% endif %}\" id=\"next-page\" class=\"page-link\">next</a>\n                    <a href=\"?page={{ page_obj.paginator.num_pages }}{% if request.GET.q %}&q={{ request.GET.q }}{% endif %}\" id=\"last-page\" class=\"page-link\">last &raquo;</a>\n                {% endif %}\n            {% endif %}\n        </div>\n        <a href=\"{% url 'home' %}\" id=\"back-to-home\" class=\"back-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "view_event_details.html", "path": "example_app/templates/view_event_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Event Details</title>\n</head>\n<body>\n    <div id=\"event-details-container\" class=\"container\">\n        <h1 id=\"event-details-title\" class=\"title\">Event Details</h1>\n        <div id=\"event-details-content\" class=\"content\">\n            <h2 id=\"event-title\" class=\"event-title\">{{ event.title }}</h2>\n            <p id=\"event-datetime\" class=\"event-datetime\">Date and Time: {{ event.datetime }}</p>\n            <p id=\"event-description\" class=\"event-description\">Description: {{ event.description }}</p>\n        </div>\n\n        <div id=\"action-links\" class=\"action-links\">\n            <a href=\"{% url 'edit_event' event.pk %}\" id=\"edit-event-link\" class=\"edit-link\">Edit Event</a>\n            <a href=\"{% url 'delete_event' event.pk %}\" id=\"delete-event-link\" class=\"delete-link\">Delete Event</a>\n        </div>\n        <a href=\"{% url 'view_events' %}\" id=\"back-to-list\" class=\"back-link\">Back to Event List</a>\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "project_name/asgi.py", "code": "\nimport os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "project_name/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_name.wsgi.application'\nASGI_APPLICATION = 'project_name.asgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "project_name/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n\nurlpatterns = [\n    \"\"\"\n    URL patterns for the project.\n    \"\"\"\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project_name/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_wsgi_application()"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    \"\"\"\n    Form for ContactSales model.\n    \"\"\"\n    class Meta:\n        \"\"\"\n        Meta\n        \"\"\"\n        model = ContactSales\n        fields = '__all__'\n\n\nclass SupportForm(forms.ModelForm):\n    \"\"\"\n    Form for SupportRequest model.\n    \"\"\"\n    class Meta:\n        \"\"\"\n        Meta\n        \"\"\"\n        model = SupportRequest\n        fields = '__all__'"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass ContactSales(models.Model):\n    \"\"\"\n    Model to store contact sales inquiries.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        \"\"\"\n        String representation of contact sales.\n        \"\"\"\n        return self.name\n\n\nclass SupportRequest(models.Model):\n    \"\"\"\n    Model to store support requests.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    subject = models.CharField(max_length=255)\n    message = models.TextField()\n\n    def __str__(self):\n        \"\"\"\n        String representation of support requests.\n        \"\"\"\n        return self.subject"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.views.generic import TemplateView, FormView\nfrom django.urls import reverse_lazy\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\n\nclass HomePageView(TemplateView):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    template_name = 'home.html'\n\n\n\nclass FeaturesPageView(TemplateView):\n    \"\"\"\n    Render the features page.\n    \"\"\"\n    template_name = 'features.html'\n\n\n\nclass PricingPageView(FormView):\n    \"\"\"\n    Handle pricing page and contact form submission.\n    \"\"\"\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('pricing')\n\n    def form_valid(self, form):\n        \"\"\"\n        Save the form and show success.\n        \"\"\"\n        form.save()\n        messages.success(self.request, 'Thank you for your inquiry! We will contact you soon.')\n        return super().form_valid(form)\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Add previous requests to context.\n        \"\"\"\n        context = super().get_context_data(**kwargs)\n        context['contact_requests'] = ContactSales.objects.all()\n        return context\n\n\n\nclass SupportView(FormView):\n    \"\"\"\n    Handle support page and form submission.\n    \"\"\"\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('support')\n\n    def form_valid(self, form):\n        \"\"\"\n        Save the support request.\n        \"\"\"\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted! We will get back to you shortly.')\n        return super().form_valid(form)\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Add previous support requests to context.\n        \"\"\"\n        context = super().get_context_data(**kwargs)\n        context['support_requests'] = SupportRequest.objects.all()\n        return context\n\n\n\nclass AboutUsPageView(TemplateView):\n    \"\"\"\n    Render the about us page.\n    \"\"\"\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='ContactSales',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField()),\n                ('message', models.TextField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField()),\n                ('subject', models.CharField(max_length=255)),\n                ('message', models.TextField()),\n            ],\n        ),\n    ]"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <nav id=\"navbar\" class=\"navbar\">\n            <a href=\"{% url 'home' %}\" class=\"navbar-brand\">AI Chatbot</a>\n            <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                <li><a href=\"{% url 'features' %}\">Features</a></li>\n                <li><a href=\"{% url 'pricing' %}\">Pricing</a></li>\n                <li><a href=\"{% url 'support' %}\">Support</a></li>\n                <li><a href=\"{% url 'about' %}\">About Us</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"about-section\" class=\"about-section\">\n            <h1>About Us</h1>\n            <p>Learn about our team and our mission.</p>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 AI Chatbot. All rights reserved.</p>\n    </footer>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Features</title>\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <nav id=\"navbar\" class=\"navbar\">\n            <a href=\"{% url 'home' %}\" class=\"navbar-brand\">AI Chatbot</a>\n            <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                <li><a href=\"{% url 'features' %}\">Features</a></li>\n                <li><a href=\"{% url 'pricing' %}\">Pricing</a></li>\n                <li><a href=\"{% url 'support' %}\">Support</a></li>\n                <li><a href=\"{% url 'about' %}\">About Us</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"features-section\" class=\"features-section\">\n            <h1>Features</h1>\n            <ul>\n                <li>Feature 1: Intelligent Chat</li>\n                <li>Feature 2: 24/7 Support</li>\n                <li>Feature 3: Customization Options</li>\n            </ul>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 AI Chatbot. All rights reserved.</p>\n    </footer>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <nav id=\"navbar\" class=\"navbar\">\n            <a href=\"{% url 'home' %}\" class=\"navbar-brand\">AI Chatbot</a>\n            <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                <li><a href=\"{% url 'features' %}\">Features</a></li>\n                <li><a href=\"{% url 'pricing' %}\">Pricing</a></li>\n                <li><a href=\"{% url 'support' %}\">Support</a></li>\n                <li><a href=\"{% url 'about' %}\">About Us</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"home-section\" class=\"home-section\">\n            <h1>Welcome to AI Chatbot</h1>\n            <p>Your intelligent assistant.</p>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 AI Chatbot. All rights reserved.</p>\n    </footer>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pricing</title>\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <nav id=\"navbar\" class=\"navbar\">\n            <a href=\"{% url 'home' %}\" class=\"navbar-brand\">AI Chatbot</a>\n            <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                <li><a href=\"{% url 'features' %}\">Features</a></li>\n                <li><a href=\"{% url 'pricing' %}\">Pricing</a></li>\n                <li><a href=\"{% url 'support' %}\">Support</a></li>\n                <li><a href=\"{% url 'about' %}\">About Us</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"pricing-section\" class=\"pricing-section\">\n            <h1>Pricing Plans</h1>\n            <p>Choose the plan that's right for you.</p>\n\n            <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n                {% csrf_token %}\n                {{ form.as_p }}\n                <button type=\"submit\">Contact Sales</button>\n            </form>\n\n            {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n            {% endif %}\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 AI Chatbot. All rights reserved.</p>\n    </footer>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Support</title>\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <nav id=\"navbar\" class=\"navbar\">\n            <a href=\"{% url 'home' %}\" class=\"navbar-brand\">AI Chatbot</a>\n            <ul>\n                <li><a href=\"{% url 'home' %}\">Home</a></li>\n                <li><a href=\"{% url 'features' %}\">Features</a></li>\n                <li><a href=\"{% url 'pricing' %}\">Pricing</a></li>\n                <li><a href=\"{% url 'support' %}\">Support</a></li>\n                <li><a href=\"{% url 'about' %}\">About Us</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"support-section\" class=\"support-section\">\n            <h1>Support</h1>\n            <p>Get help with our AI Chatbot.</p>\n\n            <form id=\"support-form\" class=\"support-form\" method=\"post\">\n                {% csrf_token %}\n                {{ form.as_p }}\n                <button type=\"submit\">Submit Request</button>\n            </form>\n\n            {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n            {% endif %}\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 AI Chatbot. All rights reserved.</p>\n    </footer>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n    'crispy_forms',\n    'crispy_bootstrap5'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\n\nCRISPY_TEMPLATE_PACK = 'bootstrap5'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"example_app.urls\")),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import ContactSales, SupportRequest\n\nadmin.site.register(ContactSales)\nadmin.site.register(SupportRequest)"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    \"\"\"\n    User registration form.\n    \"\"\"\n    pass\n\nclass LoginForm(UserCreationForm):\n    \"\"\"\n    User login form.\n    \"\"\"\n    pass\n\nclass MealForm(forms.ModelForm):\n    \"\"\"\n    Form for logging meals with specific fields and widgets.\n    \"\"\"\n    pass\nclass ActivityForm(forms.ModelForm):\n    \"\"\"\n    Form for logging activities with specific fields and widgets.\n    \"\"\"\n    pass\n\nclass ProfileForm(forms.ModelForm):\n    \"\"\"\n    Form for updating user profile and preferences.\n    \"\"\"\n    pass\n\nclass PreferencesForm(forms.ModelForm):\n    \"\"\"\n    Form for updating dietary preferences.\n    \"\"\"\n    pass\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.utils import timezone\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    \"\"\"\n    Create a user profile when a new user is created.\n    \"\"\"\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    \"\"\"\n    Save the user profile if the user instance is updated.\n    \"\"\"\n    instance.profile.save()\n\nclass UserProfile(models.Model):\n    \"\"\"\n    Extended user profile to include additional user information.\n    \"\"\"\n    pass\n\nclass Meal(models.Model):\n    \"\"\"\n    Model to log information about meals consumed by users.\n    \"\"\"\n    pass\n\nclass Activity(models.Model):\n    \"\"\"\n    Model to log activities and accompanying calorie expenditure.\n    \"\"\"\n    pass\n\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_search, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_search, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\n\ndef get_weekly_calorie_chart(user):\n    \"\"\"\n    Generate weekly calorie chart data for a specified user.\n    \"\"\"\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n\n    return week_data\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nimport matplotlib.pyplot as plt\nimport io\nimport base64\nfrom datetime import timedelta, date\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Activity, UserProfile\n\n\ndef home(request):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    pass\n\n\ndef signup(request):\n    \"\"\"\n    Handle user signup.\n    \"\"\"\n    pass\n\ndef login_view(request):\n    \"\"\"\n    Handle user login.\n    \"\"\"\n    pass\n\n\n@login_required\ndef dashboard(request):\n    \"\"\"\n    Display the user dashboard with daily and weekly statistics.\n    \"\"\"\n    pass\n\n\n@login_required\ndef meal_log(request):\n    \"\"\"\n    Log meals for the user's meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef add_meal(request):\n    \"\"\"\n    Add a new meal to the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef edit_meal(request, id):\n    \"\"\"\n    Edit an existing meal record.\n    \"\"\"\n    pass\n\n\n@login_required\ndef delete_meal(request, id):\n    \"\"\"\n    Delete a meal record from the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef activity_log(request):\n    \"\"\"\n    Log activities for the user's activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef add_activity(request):\n    \"\"\"\n    Add a new activity to the activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef edit_activity(request, id):\n    \"\"\"\n    Edit an existing activity record.\n    \"\"\"\n    pass\n\n\n@login_required\ndef delete_activity(request, id):\n    \"\"\"\n    Delete an activity record from the activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef settings(request):\n    \"\"\"\n    Render the settings page for updating user profile information.\n    \"\"\"\n    pass\n\n\n@login_required\ndef meal_search(request):\n    \"\"\"\n    Perform a search in the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef activity_search(request):\n    \"\"\"\n    Perform a search in the activity log.\n    \"\"\"\n    pass\n\n\ndef tutorials(request):\n    \"\"\"\n    Render the tutorials/help page.\n    \"\"\"\n    pass\n\n\n@login_required\ndef update_profile(request):\n    \"\"\"\n    Update user's profile information.\n    \"\"\"\n    pass\n\n\n@login_required\ndef update_preferences(request):\n    \"\"\"\n    Update user's dietary preferences.\n    \"\"\"\n    pass\n\n\n@login_required\ndef weekly_calorie_chart(request):\n    \"\"\"\n    Render the weekly calorie chart based on user's consumption and expenditure.\n    \"\"\"\n    pass\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Activity Log</title>\n</head>\n<body>\n    <div id=\"activity-log-container\" class=\"activity-log-container\">\n        <!-- Render activity log with search and CRUD options -->\n    </div>\n</body>\n</html>\n"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"add-activity-form-container\" class=\"add-activity-form-container\">\n        <!-- Form to add a new activity -->\n    </div>\n</body>\n</html>\n"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Meal - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"add-meal-form-container\" class=\"add-meal-form-container\">\n        <!-- Form to add a new meal -->\n    </div>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Dashboard</title>\n</head>\n<body>\n    <div id=\"user-dashboard\" class=\"user-dashboard\">\n        <!-- User dashboard with recent activities and statistics -->\n    </div>\n</body>\n</html>\n"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"edit-activity-form-container\" class=\"edit-activity-form-container\">\n        <!-- Form to edit an existing activity -->\n    </div>\n</body>\n</html>\n"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Meal - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"edit-meal-form-container\" class=\"edit-meal-form-container\">\n        <!-- Form to edit an existing meal -->\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Home</title>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"homepage-container\">\n        <!-- Home page with welcome message and navigation links -->\n    </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"login-form-container\" class=\"login-form-container\">\n        <!-- Form for user to login -->\n    </div>\n</body>\n</html>\n"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Meal Log</title>\n</head>\n<body>\n    <div id=\"meal-log-container\" class=\"meal-log-container\">\n        <!-- Render meal log with search and CRUD options -->\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Settings</title>\n</head>\n<body>\n    <div id=\"settings-page-container\" class=\"settings-page-container\">\n        <!-- Settings page for user preferences and profile updates -->\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"signup-form-container\" class=\"signup-form-container\">\n        <!-- Form to register a new user -->\n    </div>\n</body>\n</html>\n"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Tutorials - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"tutorials-page-container\" class=\"tutorials-page-container\">\n        <!-- Page displaying tutorials and help resources -->\n    </div>\n</body>\n</html>\n"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Preferences - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"update-preferences-form-container\" class=\"update-preferences-form-container\">\n        <!-- Form to update user dietary preferences -->\n    </div>\n</body>\n</html>\n"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Profile - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"update-profile-form-container\" class=\"update-profile-form-container\">\n        <!-- Form to update user profile information -->\n    </div>\n</body>\n</html>\n"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Weekly Calorie Chart - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <div id=\"weekly-calorie-chart-container\" class=\"weekly-calorie-chart-container\">\n        <!-- Display weekly calorie chart for user activities and meals -->\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    \"\"\"\n    Form for uploading a JSON file with validations.\n    \"\"\"\n    pass\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    \"\"\"\n    Model representing a project with necessary attributes.\n    \"\"\"\n    name = models.CharField(max_length=200, default=\"\")\n    description = models.TextField(default=\"\")\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    \"\"\"\n    Model representing a review for a project.\n    \"\"\"\n    project = models.ForeignKey(Project, on_delete=models.CASCADE, related_name='reviews')\n    feedback = models.TextField(default=\"\")\n    score = models.IntegerField(default=0)\n\n    def __str__(self):\n        return f\"Review for {self.project.name}\"\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n    path('upload/', views.upload_view, name='upload'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nimport os\nimport time\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\nfrom django.urls import reverse\n\ndef review_view(request, project_id):\n    \"\"\"\n    Handle the review view by processing test cases and updating reviews.\n    \"\"\"\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        feedback = request.POST.get('feedback')\n        score = request.POST.get('score')\n\n        review = Review.objects.create(\n            project=project,\n            feedback=feedback,\n            score=score\n        )\n\n        messages.success(request, 'Review submitted successfully!')\n        return HttpResponseRedirect(reverse('home'))\n    else:\n        return render(request, 'review.html', {'project': project})\n\n\n\ndef process_review_submission(request, project, test_results):\n    \"\"\"\n    Process form data submitted during review and update the database.\n    \"\"\"\n    pass\n\n\ndef home_view(request):\n    \"\"\"\n    Display the home page with project listings and upload form.\n    \"\"\"\n    projects = Project.objects.all()\n    upload_form = JSONUploadForm()\n    return render(request, 'home.html', {'projects': projects, 'upload_form': upload_form})\n\n\ndef handle_json_upload(json_file):\n    \"\"\"\n    Process the uploaded JSON file to update or create a project.\n    \"\"\"\n    try:\n        data = json.load(json_file)\n        project_name = data.get('name', 'Unnamed Project')\n        project_description = data.get('description', '')\n\n        project, created = Project.objects.get_or_create(name=project_name, defaults={'description': project_description})\n\n        if not created:\n            project.description = project_description\n            project.save()\n\n        return project\n\n    except json.JSONDecodeError:\n        return None\n\n\ndef about_view(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'about.html')\n\n\ndef upload_view(request):\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            json_file = request.FILES['json_file']\n            project = handle_json_upload(json_file)\n\n            if project:\n                messages.success(request, f'Project \"{project.name}\" uploaded successfully!')\n            else:\n                messages.error(request, 'Invalid JSON file.')\n        else:\n            messages.error(request, 'Form submission failed.')\n\n    return HttpResponseRedirect(reverse('home'))\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!-- app/templates/about.html -->\n{% extends 'base.html' %}\n{% block content %}\n<div id=\"about-container\" class=\"container\">\n    <h1 id=\"about-title\" class=\"title\">About Us</h1>\n    <p id=\"about-description\" class=\"description\">This is a project review site.</p>\n</div>\n{% endblock %}\n"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!-- app/templates/base.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"header\">\n        <nav id=\"main-nav\" class=\"nav\">\n            <ul class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"content\">\n        {% block content %}{% endblock %}\n    </main>\n\n    <footer id=\"main-footer\" class=\"footer\">\n        <p id=\"copyright\" class=\"copyright\">&copy; 2023 Project Review Site</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!-- app/templates/home.html -->\n{% extends 'base.html' %}\n{% block content %}\n<div id=\"home-container\" class=\"container\">\n    <h1 id=\"home-title\" class=\"title\">Projects</h1>\n\n    <div id=\"project-list\" class=\"project-list\">\n        {% for project in projects %}\n            <div class=\"project-item\">\n                <h2 class=\"project-name\">{{ project.name }}</h2>\n                <p class=\"project-description\">{{ project.description }}</p>\n                <a href=\"{% url 'review' project.id %}\" class=\"review-button\">Review</a>\n            </div>\n        {% endfor %}\n    </div>\n\n    <div id=\"upload-form-container\" class=\"upload-form-container\">\n        <h2 id=\"upload-form-title\" class=\"form-title\">Upload Project (JSON)</h2>\n        <form id=\"upload-form\" class=\"upload-form\" method=\"post\" enctype=\"multipart/form-data\" action=\"{% url 'upload' %}\">\n            {% csrf_token %}\n            <input type=\"file\" id=\"json-file\" name=\"json_file\" accept=\".json\" class=\"file-input\">\n            <button type=\"submit\" id=\"upload-button\" class=\"form-button\">Upload</button>\n        </form>\n\n        {% if messages %}\n            <ul class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</div>\n{% endblock %}\n"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "<!-- app/templates/review.html -->\n{% extends 'base.html' %}\n{% block content %}\n<div id=\"review-container\" class=\"container\">\n    <h1 id=\"review-title\" class=\"title\">Review Project: {{ project.name }}</h1>\n    <p id=\"project-description\" class=\"description\">{{ project.description }}</p>\n\n    <form id=\"review-form\" class=\"review-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"feedback\" id=\"feedback-label\" class=\"form-label\">Feedback:</label>\n            <textarea id=\"feedback\" name=\"feedback\" rows=\"4\" cols=\"50\" class=\"form-textarea\"></textarea>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"score\" id=\"score-label\" class=\"form-label\">Score (1-5):</label>\n            <input type=\"number\" id=\"score\" name=\"score\" min=\"1\" max=\"5\" class=\"form-input\">\n        </div>\n        <button type=\"submit\" id=\"submit-review\" class=\"form-button\">Submit Review</button>\n    </form>\n</div>\n{% endblock %}\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'formatters': { #\u683c\u5f0f\u5316\u5668\n#         'standard': {\n#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'\n#             },\n#         'simple': {\n#             'format': '[%(levelname)s]> %(message)s'\n#             },\n#     },\n#     'filters': {\n#     'require_debug_true': {\n#         '()': 'django.utils.log.RequireDebugTrue',\n#         },\n#  },\n#     'handlers': {\n#         'default': {                                            # \u7528\u4e8e\u6587\u4ef6\u8f93\u51fa\n#             'level': 'DEBUG',                                    # \u8f93\u51fa\u65e5\u5fd7\u7b49\u7ea7\n#             'class': 'logging.handlers.RotatingFileHandler',    # \u65e5\u5fd7\u7c7b\u578b\n#             'filename': 'django.log',          # \u5177\u4f53\u65e5\u5fd7\u6587\u4ef6\u7684\u540d\u5b57\n#             'maxBytes': 1024 * 1024 * 2,                        # \u65e5\u5fd7\u5927\u5c0f\n#             'backupCount': 1,                                   # \u5907\u4efd\u6570\u91cf\n#             'formatter':'standard',                             # \u8f93\u51fa\u65e5\u5fd7\u683c\u5f0f\n#             'encoding': 'utf-8',                                # \u8f93\u51fa\u65e5\u5fd7\u7f16\u7801\n#         }\n#     },\n#     'loggers': {    #\u65e5\u5fd7\u5206\u914d\u5230\u54ea\u4e2ahandlers\u4e2d\n#         'django': {\n#             'handlers': ['default'],         # \u4e0a\u7ebf\u4e4b\u540e\u53ef\u4ee5\u628a'console'\u79fb\u9664\n#             'level':'DEBUG',\n#             'propagate': True,       # \u5411\u4e0d\u5411\u66f4\u9ad8\u7ea7\u7ea7\u522b\u7684logger\u4f20\u9012\n#         }\n#  }\n# }\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "/* example_app/static/css/style.css */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.header {\n    background-color: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\n.nav-list {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n}\n\n.nav-item {\n    display: inline;\n    margin: 0 10px;\n}\n\n.nav-link {\n    color: #fff;\n    text-decoration: none;\n}\n\n.content {\n    padding: 20px;\n    min-height: 500px; /* Ensure content takes up space */\n}\n\n.container {\n    width: 80%;\n    margin: 0 auto;\n    padding: 20px;\n    background-color: #fff;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    text-align: center;\n    color: #333;\n}\n\n.description {\n    text-align: center;\n    color: #666;\n}\n\n.project-list {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n}\n\n.project-item {\n    width: 300px;\n    margin: 20px;\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n    background-color: #f9f9f9;\n}\n\n.project-name {\n    font-size: 1.2em;\n    margin-bottom: 10px;\n    color: #333;\n}\n\n.review-button {\n    display: block;\n    padding: 8px 12px;\n    background-color: #4CAF50;\n    color: white;\n    text-decoration: none;\n    text-align: center;\n    border-radius: 5px;\n    margin-top: 10px;\n}\n\n.upload-form-container {\n    margin-top: 20px;\n    text-align: center;\n}\n\n.form-title {\n    color: #333;\n}\n\n.upload-form {\n    display: inline-block;\n    margin-top: 10px;\n}\n\n.file-input {\n    margin-bottom: 10px;\n}\n\n.form-button {\n    padding: 10px 15px;\n    background-color: #008CBA;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.messages {\n    list-style: none;\n    padding: 0;\n    margin-top: 10px;\n}\n\n.messages li {\n    padding: 10px;\n    border-radius: 5px;\n    margin-bottom: 5px;\n}\n\n.success {\n    background-color: #d4edda;\n    color: #155724;\n    border: 1px solid #c3e6cb;\n}\n\n.error {\n    background-color: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n    color: #555;\n}\n\n.form-textarea, .form-input {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.footer {\n    background-color: #333;\n    color: #fff;\n    text-align: center;\n    padding: 10px 0;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n}\n\n.copyright {\n    margin: 0;\n}\n"}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\n.container {\n    text-align: center;\n}\n\nh1 {\n    color: #333;\n    font-size: 3em;\n    margin-bottom: 20px;\n}\n\n.message {\n    font-size: 1.5em;\n    color: #666;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"body\" class=\"body\">\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"heading\" class=\"heading\">Hello, World!</h1>\n        <p id=\"message\" class=\"message\">Welcome to my Django app!</p>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='transactions_user')\n\n    def __str__(self):\n        return f'{self.amount} - {self.date}'\n\n\nclass SupportRequest(models.Model):\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='support_request_user')\n\n    def __str__(self):\n        return self.name\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n\n.home-button {\n    padding: 10px 20px;\n    font-size: 1.2rem;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n    text-decoration: none;\n}\n\n.home-button:hover {\n    background-color: #0056b3;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"helloworld-body\" class=\"helloworld-page\">\n    <h1 id=\"helloworld-title\" class=\"helloworld-title\">Hello, World!</h1>\n    <a href=\"{% url 'home' %}\" id=\"back-to-home-link\" class=\"home-button\">Back to Home</a>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body id=\"home-body\" class=\"home-page\">\n    <h1 id=\"home-title\" class=\"home-title\">Welcome to the Home Page!</h1>\n    <a href=\"{% url 'helloworld' %}\" id=\"hello-world-link\" class=\"home-button\">Go to Hello World</a>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "16": [{"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": "Subject ID,Subject Name,Credits,Instructor\n101,Introduction to Programming,3,Dr. Smith\n102,Data Structures,4,Prof. Jones\n103,Algorithms,3,Dr. Brown\n104,Calculus I,4,Prof. Davis\n105,Linear Algebra,3,Dr. Miller"}, {"file": "16-stdanswer.py", "path": "16-stdanswer.py", "code": "import os\nimport pandas as pd\n\n# File paths\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"Processed Subjects Table.xlsx\"\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format.\n    \"\"\"\n    if not file_path.endswith(\".xlsx\"):\n        raise ValueError(\"Input file must be an Excel file (.xlsx)\")\n\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    \"\"\"\n    required_columns = [\"Subject ID\", \"Subject Name\", \"Credits\", \"Instructor\"]\n    for col in required_columns:\n        if col not in df.columns:\n            raise ValueError(f\"Missing column: {col}\")\n    #Check if Credits are numeric\n    if not pd.api.types.is_numeric_dtype(df['Credits']):\n        raise ValueError(\"Credits column must be numeric\")\n\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    \"\"\"\n    check_file_exists(input_file)\n    check_file_format(input_file)\n\n    df = pd.read_excel(input_file)\n    validate_data(df)\n\n    #Example processing:  Create a new column \"Full Subject Name\"\n    df[\"Full Subject Name\"] = df[\"Subject ID\"].astype(str) + \" - \" + df[\"Subject Name\"]\n    \n    df.to_excel(output_file, index=False)\n\n\ndef main():\n    \"\"\"\n    Main execution function.\n    \"\"\"\n    try:\n        process_subjects(input_file, output_file)\n        print(f\"Successfully processed {input_file} and saved to {output_file}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "Processed Subjects Table.xlsx", "path": "Processed Subjects Table.xlsx", "code": ""}], "17": [{"file": "17-stdanswer.py", "path": "17-stdanswer.py", "code": "import os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Read the dataset and ensure all columns are numeric.\n    Raise an error if any missing values (NaN) are found.\n    \"\"\"\n    data = pd.read_excel(input_file)\n    if data.isnull().any().any():\n        raise ValueError(\"Missing values (NaN) found in the dataset.\")\n    for col in data.columns:\n        if not pd.api.types.is_numeric_dtype(data[col]):\n            raise ValueError(f\"Column '{col}' is not numeric.\")\n    return data\n\n\ndef add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Add a one-period lag for the dependent variable and drop missing rows.\n    \"\"\"\n    data['Lagged_' + target_column] = data[target_column].shift(1)\n    data = data.dropna()\n    return data\n\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepare the feature matrix (X) and target vector (y).\n    \"\"\"\n    y = data[target_column]\n    X = data.drop(columns=[target_column])\n    return X, y\n\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Build and fit a logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)\n    model = sm.Logit(y, X)\n    result = model.fit()\n    return result\n\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Save the logistic regression summary to an Excel file.\n    \"\"\"\n    summary_df = pd.DataFrame(result.summary().tables[1].data)\n    summary_df.to_excel(output_file, index=False)\n\n\ndef main(input_file, output_file):\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    try:\n        data = read_and_validate_data(input_file)\n        target_column = 'Won'\n        data = add_lagged_dependent_variable(data, target_column)\n        X, y = prepare_features_and_target(data, target_column, 'Lagged_' + target_column)\n        result = build_logistic_model(X, y)\n        save_summary_to_excel(result, output_file)\n        print(f\"Logistic regression summary saved to {output_file}\")\n\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except FileNotFoundError:\n        print(f\"Error: Input file '{input_file}' not found.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    main(input_file, output_file)"}, {"file": "Gamedata.xlsx", "path": "Gamedata.xlsx", "code": "Dummy Excel File Content - Replace with actual data\nColumn1,Won,Column3,Column4\n1,0,3,4\n2,1,5,6\n3,0,7,8\n4,1,9,10\n5,0,11,12"}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        \"\"\"\n        Initializes the BashCrawl game with the root directory and available commands.\n        \"\"\"\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()  # Copy to allow multiple game instances\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\", \"take\"]\n        self.game_running = False # Add a game_running flag\n\n    def print_main_menu(self):\n        \"\"\"\n        Displays the main menu options to the player.\n        \"\"\"\n        print(\"\\nWelcome to BashCrawl!\\n\")\n        print(\"1. Play Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n        print(\"\")\n\n\n    def main_menu_help(self):\n        \"\"\"\n        Provide help information for the main menu.\n        \"\"\"\n        print(\"\\nBashCrawl is a text-based adventure game where you navigate a file system using bash commands.\\n\")\n        print(\"Main Menu Options:\\n\")\n        print(\"  1. Play Game: Starts the BashCrawl adventure.\\n\")\n        print(\"  2. Help: Displays this help message.\\n\")\n        print(\"  3. Quit: Exits the game.\\n\")\n\n    def print_game_help(self):\n        \"\"\"\n        Display in-game command help to the player.\n        \"\"\"\n        print(\"\\nIn-Game Commands:\\n\")\n        print(\"  ls: Lists the contents of the current directory.\\n\")\n        print(\"  cd <directory>: Changes the current directory to the specified directory.\\n\")\n        print(\"  inventory: Checks and displays the player's inventory.\\n\")\n        print(\"  take: take the item in the current directory.\\n\")\n        print(\"  help: Displays this help message.\\n\")\n        print(\"  quit: Exits the game.\\n\")\n\n\n    def list_contents(self):\n        \"\"\"\n        List the contents of the current directory.\n        \"\"\"\n        contents = self.directory_structure.get(self.current_dir, [])\n        items_present = self.items.get(self.current_dir, None)\n        if contents or items_present:\n            print(\"Contents of {}:\".format(self.current_dir))\n            for item in contents:\n                print(item)\n            if items_present:\n                print(f\"There is a {items_present} here.\")\n        else:\n            print(\"{} is empty.\".format(self.current_dir))\n\n\n    def change_directory(self, target_dir):\n        \"\"\"\n        Change the current directory to the specified target directory.\n        \"\"\"\n        new_dir = os.path.join(self.current_dir, target_dir)\n        new_dir = os.path.normpath(new_dir)\n\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n            print(\"Changed directory to {}\".format(self.current_dir))\n        elif target_dir == '..': # Handle '..' for parent directory\n            parent_dir = os.path.dirname(self.current_dir)\n            if parent_dir in self.directory_structure:\n              self.current_dir = parent_dir\n              print(\"Changed directory to {}\".format(self.current_dir))\n            else:\n              print(\"No such directory: {}\".format(target_dir))\n\n        else:\n            print(\"No such directory: {}\".format(target_dir))\n\n    def take_item(self):\n      item = self.items.get(self.current_dir, None)\n      if item:\n          self.inventory.append(item)\n          del self.items[self.current_dir]\n          print(f\"You picked up the {item}.\")\n      else:\n          print(\"There is nothing to take here.\")\n\n    def check_inventory(self):\n        \"\"\"\n        Check and display the player's inventory.\n        \"\"\"\n        if self.inventory:\n            print(\"Inventory:\")\n            for item in self.inventory:\n                print(item)\n        else:\n            print(\"Your inventory is empty.\")\n\n    def play(self):\n        \"\"\"\n        Start the game loop and process player commands.\n        \"\"\"\n        self.game_running = True\n        print(\"\\nYou are now in the game. Type 'help' for commands.\\n\")\n        while self.game_running:\n            command = input(\"> \").strip().split()\n            if not command:\n                continue\n\n            action = command[0].lower()\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    target_dir = command[1]\n                    self.change_directory(target_dir)\n                else:\n                    print(\"cd requires a directory name.\")\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                self.game_running = False\n                print(\"Exiting game.\")\n            elif action == \"take\":\n                self.take_item()\n            else:\n                print(\"Invalid command. Type 'help' for available commands.\")\n\n\n    def main_menu(self):\n        \"\"\"\n        Display and manage interactions with the main menu.\n        \"\"\"\n        while True:\n            self.print_main_menu()\n            choice = input(\"Enter your choice: \")\n\n            if choice == \"1\":\n                self.play()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                print(\"Exiting BashCrawl. Goodbye!\")\n                break\n            else:\n                print(\"Invalid choice. Please try again.\")\n\n\ndef main():\n    \"\"\"\n    Main function to initiate BashCrawl game.\n    \"\"\"\n    game = BashCrawl()\n    game.main_menu()\n\n\nif __name__ == \"__main__\":\n    main()"}], "19": [{"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death\n2023-01-01\n2023-01-08\n2023-01-15\n2023-01-22\n2023-01-29\n2023-02-05\n2023-02-12\n2023-02-19\n2023-02-26\n2023-03-05\n2023-03-12\n2023-03-19\n2023-03-26\n2023-04-02\n2023-04-09\n2023-04-16\n2023-04-23\n2023-04-30\n2023-05-07\n2023-05-14\n2023-05-21\n2023-05-28\n2023-06-04\n2023-06-11\n2023-06-18\n2023-06-25\n2023-07-02\n2023-07-09\n2023-07-16\n2023-07-23"}, {"file": "19-stdanswer.py", "path": "19-stdanswer.py", "code": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"\n    Check if a file exists at the given file path.\n    \"\"\"\n    return os.path.exists(file_path)\n\n\ndef read_dataset(file_path):\n    \"\"\"\n    Read the dataset from a CSV file and return a DataFrame.\n    \"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n    except Exception as e:\n        raise Exception(f\"Error reading dataset: {e}\")\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"\n    Validate that the dataset contains all required columns.\n    \"\"\"\n    for col in required_columns:\n        if col not in df.columns:\n            raise KeyError(f\"Required column '{col}' is missing.\")\n\n\ndef preprocess_dataset(df):\n    \"\"\"\n    Preprocess the dataset, including cleaning and formatting dates.\n    \"\"\"\n    try:\n        df['Date of death'] = pd.to_datetime(df['Date of death'])\n        df['Week'] = df['Date of death'].dt.isocalendar().week\n        df['Week'] = df['Week'].astype(int)\n        return df\n    except ValueError as e:\n        raise ValueError(f\"Error processing dates: {e}\")\n    except Exception as e:\n        raise Exception(f\"Error during preprocessing: {e}\")\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"\n    Plot the weekly deaths and save as a histogram image file.\n    \"\"\"\n    try:\n        plt.figure(figsize=(12, 6))\n        weekly_deaths.plot(kind='bar')\n        plt.title('Weekly Deaths')\n        plt.xlabel('Week Number')\n        plt.ylabel('Number of Deaths')\n        plt.grid(axis='y')\n        plt.tight_layout()\n        plt.savefig(output_file)\n        plt.close()\n    except Exception as e:\n        raise Exception(f\"Error plotting data: {e}\")\n\ndef main():\n    \"\"\"\n    Main execution function to process the dataset and plot the histogram.\n    \"\"\"\n    try:\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()"}]}