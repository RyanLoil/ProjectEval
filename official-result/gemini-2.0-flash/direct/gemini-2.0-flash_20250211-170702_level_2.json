{"1": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "bmi_calculator/settings.py", "path": "bmi_calculator/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]"}, {"file": "bmi_calculator/urls.py", "path": "bmi_calculator/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),\n]"}, {"file": "bmi_calculator/wsgi.py", "path": "bmi_calculator/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()"}, {"file": "calculator/apps.py", "path": "calculator/", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    name = 'calculator'"}, {"file": "calculator/forms.py", "path": "calculator/", "code": "from django import forms\n\nclass BMIForm(forms.Form):\n    height_cm = forms.FloatField(required=False, label='Height (cm)')\n    height_inches = forms.FloatField(required=False, label='Height (inches)')\n    weight_kg = forms.FloatField(required=False, label='Weight (kg)')\n    weight_lbs = forms.FloatField(required=False, label='Weight (lbs)' )"}, {"file": "calculator/models.py", "path": "calculator/", "code": "from django.db import models\n\n# Create your models here."}, {"file": "calculator/urls.py", "path": "calculator/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calculate/', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "calculator/views.py", "path": "calculator/", "code": "from django.shortcuts import render\nfrom .forms import BMIForm\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef calculate_bmi(request):\n    bmi = None\n    category = None\n\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            height_cm = form.cleaned_data.get('height_cm')\n            height_inches = form.cleaned_data.get('height_inches')\n            weight_kg = form.cleaned_data.get('weight_kg')\n            weight_lbs = form.cleaned_data.get('weight_lbs')\n\n            if height_cm and weight_kg:\n                height = height_cm / 100  # Convert cm to meters\n                weight = weight_kg\n            elif height_inches and weight_lbs:\n                height = height_inches * 0.0254  # Convert inches to meters\n                weight = weight_lbs * 0.453592  # Convert lbs to kg\n            else:\n                form = BMIForm()\n                return render(request, 'bmi_calculator.html', {'form': form, 'error': 'Please enter either cm and kg, or inches and lbs.'})\n\n            if height > 0 and weight > 0:\n                bmi = round(weight / (height ** 2), 2)\n\n                if bmi < 18.5:\n                    category = 'Underweight'\n                elif 18.5 <= bmi < 25:\n                    category = 'Normal weight'\n                elif 25 <= bmi < 30:\n                    category = 'Overweight'\n                else:\n                    category = 'Obese'\n\n            else:\n                form = BMIForm()\n                return render(request, 'bmi_calculator.html', {'form': form, 'error': 'Height and weight must be greater than 0.'})\n\n    else:\n        form = BMIForm()\n\n    return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'category': category})\n"}, {"file": "templates/home.html", "path": "templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator - Home</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .introduction {\n            margin-bottom: 20px;\n        }\n        .navigation {\n            text-align: center;\n        }\n        .navigation a {\n            display: inline-block;\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n        }\n        .navigation a:hover {\n            background-color: #3e8e41;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <section class=\"introduction\" id=\"introduction-section\">\n            <h1 id=\"home-title\">Welcome to the BMI Calculator!</h1>\n            <p id=\"home-description\">This tool helps you calculate your Body Mass Index (BMI), which is a measure of body fat based on your height and weight.  Use it to estimate a healthy body weight based on your height.  It is easy to use; just enter your height and weight and the calculator will provide a BMI value and an interpretation.</p>\n        </section>\n\n        <section class=\"navigation\" id=\"navigation-section\">\n            <a href=\"{% url 'calculate_bmi' %}\" id=\"calculator-link\" class=\"calculator-button\">Go to BMI Calculator</a>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "templates/bmi_calculator.html", "path": "templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        .btn {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .btn:hover {\n            background-color: #3e8e41;\n        }\n        .result {\n            margin-top: 20px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .error {\n            color: red;\n            margin-bottom: 10px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"bmi-calculator-container\">\n        <h1 id=\"bmi-calculator-title\">BMI Calculator</h1>\n\n        <form method=\"post\" id=\"bmi-form\">\n            {% csrf_token %}\n            {% if error %}\n                <p class=\"error\" id=\"bmi-error\">{{ error }}</p>\n            {% endif %}\n            <div class=\"form-group\" id=\"height-cm-group\">\n                <label for=\"id_height_cm\" id=\"height-cm-label\">Height (cm):</label>\n                <input type=\"number\" name=\"height_cm\" id=\"id_height_cm\" class=\"height-input\">\n            </div>\n\n            <div class=\"form-group\" id=\"height-inches-group\">\n                <label for=\"id_height_inches\" id=\"height-inches-label\">Height (inches):</label>\n                <input type=\"number\" name=\"height_inches\" id=\"id_height_inches\" class=\"height-input\">\n            </div>\n\n            <div class=\"form-group\" id=\"weight-kg-group\">\n                <label for=\"id_weight_kg\" id=\"weight-kg-label\">Weight (kg):</label>\n                <input type=\"number\" name=\"weight_kg\" id=\"id_weight_kg\" class=\"weight-input\">\n            </div>\n\n            <div class=\"form-group\" id=\"weight-lbs-group\">\n                <label for=\"id_weight_lbs\" id=\"weight-lbs-label\">Weight (lbs):</label>\n                <input type=\"number\" name=\"weight_lbs\" id=\"id_weight_lbs\" class=\"weight-input\">\n            </div>\n\n            <button type=\"submit\" class=\"btn\" id=\"calculate-button\">Calculate BMI</button>\n            <button type=\"reset\" class=\"btn\" id=\"reset-button\">Reset</button>\n        </form>\n\n        {% if bmi %}\n            <div class=\"result\" id=\"bmi-result\">\n                <h2 id=\"result-title\">Your BMI is: {{ bmi }}</h2>\n                <p id=\"category-paragraph\">Category: {{ category }}</p>\n                <p id=\"interpretation-paragraph\">Interpretation:  BMI is a simple index of weight-for-height that is commonly used to classify underweight, overweight and obesity in adults. </p>\n                <p id=\"health-advice-paragraph\">Health Advice: Consult a healthcare professional or nutritionist for personalized advice on maintaining a healthy BMI. </p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}], "2": [{"file": "manage.py", "path": "currency_converter/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "currency_converter/", "code": "import os\nfrom celery import Celery\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napp = Celery('currency_converter', broker='redis://localhost:6379/0')\napp.config_from_object('django.conf:settings', namespace='CELERY')\napp.autodiscover_tasks()\n\n@app.task(bind=True)\ndef debug_task(self):\n    print(f'Request: {self.request!r}')"}, {"file": "settings.py", "path": "currency_converter/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n    'celery',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nCELERY_BROKER_URL = 'redis://localhost:6379/0'\nCELERY_RESULT_BACKEND = 'redis://localhost:6379/0'\nCELERY_ACCEPT_CONTENT = ['application/json']\nCELERY_TASK_SERIALIZER = 'json'\nCELERY_RESULT_SERIALIZER = 'json'\nCELERY_TIMEZONE = 'UTC'"}, {"file": "urls.py", "path": "currency_converter/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n]"}, {"file": "wsgi.py", "path": "currency_converter/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "converter/", "code": "default_app_config = 'converter.apps.ConverterConfig'"}, {"file": "admin.py", "path": "converter/", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "converter/", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'"}, {"file": "tasks.py", "path": "converter/", "code": "from celery import shared_task\nimport requests\nfrom decimal import Decimal\nfrom django.conf import settings\nimport json\n\n@shared_task\ndef update_exchange_rates():\n    # Replace with your actual API endpoint and logic\n    # This is a placeholder - implement your currency rate fetching here\n    try:\n        # Example: Using a mock API\n        mock_api_url = 'https://api.exchangerate.host/latest?base=USD'\n        response = requests.get(mock_api_url)\n        response.raise_for_status()\n        data = response.json()\n\n        # Store the data in a suitable location (e.g., a JSON file or database)\n        # This is a simplified example; adapt to your needs\n        with open('exchange_rates.json', 'w') as f:\n            json.dump(data, f)\n\n        print(\"Exchange rates updated successfully!\")\n    except requests.exceptions.RequestException as e:\n        print(f\"Error updating exchange rates: {e}\")"}, {"file": "models.py", "path": "converter/", "code": "from django.db import models\n\n# Create your models here. (optional, if you need to store anything in the database)"}, {"file": "urls.py", "path": "converter/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('currency_details/<str:currency_code>/', views.currency_details, name='currency_details'),\n    path('settings/', views.settings_view, name='settings'),\n]"}, {"file": "views.py", "path": "converter/", "code": "from django.shortcuts import render, redirect\nimport json\nfrom django.http import HttpResponse\nfrom celery.schedules import crontab\nfrom django.conf import settings\nfrom .tasks import update_exchange_rates\n\ndef home(request):\n    # Load currencies (replace with your actual currency list source)\n    currencies = ['USD', 'EUR', 'GBP', 'JPY', 'AUD', 'CAD']  # Example list\n    conversion_result = None\n    exchange_rate_info = None\n\n    if request.method == 'POST':\n        base_currency = request.POST.get('base_currency')\n        target_currency = request.POST.get('target_currency')\n        amount = request.POST.get('amount')\n\n        try:\n            amount = float(amount)\n            # Perform conversion (replace with your actual conversion logic)\n            # For now, mock conversion using stored data from the JSON file\n            with open('exchange_rates.json', 'r') as f:\n                exchange_rates = json.load(f)\n\n            # Example: Accessing exchange rates from the JSON file\n            if 'rates' in exchange_rates and target_currency in exchange_rates['rates']:\n                exchange_rate = exchange_rates['rates'][target_currency]\n                conversion_result = round(amount * exchange_rate, 2)\n                exchange_rate_info = exchange_rate\n\n            else:\n                conversion_result = 'Exchange rate not found for the selected currency pair.'\n                exchange_rate_info = None\n\n        except ValueError:\n            conversion_result = 'Invalid amount entered.'\n            exchange_rate_info = None\n        except FileNotFoundError:\n            conversion_result = 'Exchange rate data not found. Please try again later.'\n            exchange_rate_info = None\n        except Exception as e:\n            conversion_result = f'An error occurred: {e}'\n            exchange_rate_info = None\n\n    return render(request, 'home.html', {\n        'currencies': currencies,\n        'conversion_result': conversion_result,\n        'exchange_rate_info': exchange_rate_info\n    })\n\n\ndef currency_details(request, currency_code):\n    # Placeholder - replace with your currency details logic\n    currency_info = {\n        'code': currency_code,\n        'name': f'{currency_code} Currency',\n        'description': f'Details about {currency_code}'\n    }\n    historical_rates = ['Placeholder Historical Rate 1','Placeholder Historical Rate 2'] #Example list, change the hardcoding\n\n    return render(request, 'currency_details.html', {\n        'currency_info': currency_info,\n        'historical_rates': historical_rates,\n    })\n\n\ndef settings_view(request):\n    # Placeholder - replace with your settings logic\n\n    if request.method == 'POST':\n        default_base_currency = request.POST.get('default_base_currency')\n        default_target_currency = request.POST.get('default_target_currency')\n        update_frequency = request.POST.get('update_frequency')\n\n        #Save the updated settings in db\n        #Example: using celery to schedule rate updates every day at midnight\n        if update_frequency == 'daily':\n            from django_celery_beat.models import PeriodicTask, CrontabSchedule\n\n            schedule, created = CrontabSchedule.objects.get_or_create(\n                minute='0',\n                hour='0',\n                day_of_week='*',\n                day_of_month='*',\n                month_of_year='*',\n            )\n\n            task = PeriodicTask.objects.create(\n                crontab=schedule,\n                name='Update Exchange Rates Daily',\n                task='converter.tasks.update_exchange_rates',\n                enabled=True,\n            )\n        return HttpResponse('Settings Saved!')\n\n\n    currencies = ['USD', 'EUR', 'GBP', 'JPY', 'AUD', 'CAD']  # Example list, change the hardcoding\n    update_frequencies = ['daily','weekly','monthly'] #Example list, change the hardcoding\n    return render(request, 'settings.html',{\n        'currencies': currencies,\n        'update_frequencies': update_frequencies,\n    })"}, {"file": "home.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"home-page\" class=\"page\">\n        <h1 id=\"home-title\" class=\"title\">Currency Converter</h1>\n\n        <form id=\"conversion-form\" method=\"post\">\n            {% csrf_token %}\n\n            <div id=\"base-currency-section\" class=\"form-section\">\n                <label id=\"base-currency-label\" class=\"form-label\" for=\"base_currency\">Base Currency:</label>\n                <select id=\"base-currency-select\" class=\"form-select\" name=\"base_currency\" required>\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\">{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div id=\"target-currency-section\" class=\"form-section\">\n                <label id=\"target-currency-label\" class=\"form-label\" for=\"target_currency\">Target Currency:</label>\n                <select id=\"target-currency-select\" class=\"form-select\" name=\"target_currency\" required>\n                    {% for currency in currencies %}\n                        <option value=\"{{ currency }}\">{{ currency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div id=\"amount-section\" class=\"form-section\">\n                <label id=\"amount-label\" class=\"form-label\" for=\"amount\">Amount:</label>\n                <input id=\"amount-input\" class=\"form-input\" type=\"number\" name=\"amount\" step=\"0.01\" required>\n            </div>\n\n            <button id=\"convert-button\" class=\"form-button\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if conversion_result %}\n            <div id=\"result-section\" class=\"result-section\">\n                <h2 id=\"result-title\" class=\"result-title\">Conversion Result:</h2>\n                <p id=\"result-text\" class=\"result-text\">{{ conversion_result }}</p>\n            </div>\n        {% endif %}\n\n        {% if exchange_rate_info %}\n            <div id=\"exchange-rate-section\" class=\"exchange-rate-section\">\n                <p id=\"exchange-rate-text\" class=\"exchange-rate-text\">Exchange Rate: {{ exchange_rate_info }}</p>\n            </div>\n        {% endif %}\n\n        <a id=\"settings-link\" class=\"settings-link\" href=\"{% url 'settings' %}\">Settings</a>\n    </div>\n</body>\n</html>"}, {"file": "currency_details.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Details</title>\n</head>\n<body>\n    <div id=\"currency-details-page\" class=\"page\">\n        <h1 id=\"currency-details-title\" class=\"title\">Currency Details</h1>\n\n        <div id=\"currency-info-section\" class=\"section\">\n            <h2 id=\"currency-info-title\" class=\"subtitle\">Currency Information</h2>\n            <p id=\"currency-code\" class=\"info\">Code: {{ currency_info.code }}</p>\n            <p id=\"currency-name\" class=\"info\">Name: {{ currency_info.name }}</p>\n            <p id=\"currency-description\" class=\"info\">Description: {{ currency_info.description }}</p>\n        </div>\n\n        <div id=\"historical-rates-section\" class=\"section\">\n            <h2 id=\"historical-rates-title\" class=\"subtitle\">Historical Exchange Rates</h2>\n            <ul id=\"historical-rates-list\" class=\"list\">\n                {% for rate in historical_rates %}\n                    <li class=\"list-item\">{{ rate }}</li>\n                {% endfor %}\n            </ul>\n        </div>\n\n        <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "templates/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <div id=\"settings-page\" class=\"page\">\n        <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n\n        <form id=\"settings-form\" method=\"post\">\n            {% csrf_token %}\n\n            <div id=\"default-currencies-section\" class=\"form-section\">\n                <h2 id=\"default-currencies-title\" class=\"subtitle\">Default Currencies</h2>\n\n                <div id=\"default-base-currency-section\" class=\"subsection\">\n                    <label id=\"default-base-currency-label\" class=\"form-label\" for=\"default_base_currency\">Default Base Currency:</label>\n                    <select id=\"default-base-currency-select\" class=\"form-select\" name=\"default_base_currency\">\n                        {% for currency in currencies %}\n                            <option value=\"{{ currency }}\">{{ currency }}</option>\n                        {% endfor %}\n                    </select>\n                </div>\n\n                <div id=\"default-target-currency-section\" class=\"subsection\">\n                    <label id=\"default-target-currency-label\" class=\"form-label\" for=\"default_target_currency\">Default Target Currency:</label>\n                    <select id=\"default-target-currency-select\" class=\"form-select\" name=\"default_target_currency\">\n                        {% for currency in currencies %}\n                            <option value=\"{{ currency }}\">{{ currency }}</option>\n                        {% endfor %}\n                    </select>\n                </div>\n            </div>\n\n            <div id=\"update-frequency-section\" class=\"form-section\">\n                <h2 id=\"update-frequency-title\" class=\"subtitle\">Update Frequency</h2>\n\n                <label id=\"update-frequency-label\" class=\"form-label\" for=\"update_frequency\">Exchange Rate Update Frequency:</label>\n                <select id=\"update-frequency-select\" class=\"form-select\" name=\"update_frequency\">\n                    {% for frequency in update_frequencies %}\n                        <option value=\"{{ frequency }}\">{{ frequency }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <button id=\"save-settings-button\" class=\"form-button\" type=\"submit\">Save Settings</button>\n        </form>\n\n        <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "static/css/", "code": "/* Basic styling - replace with your actual styles */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\n.page {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.title {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.form-section {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n}\n\n.form-input, .form-select {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.form-button {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.result-section {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n\n.settings-link, .home-link {\n    display: block;\n    margin-top: 20px;\n    text-align: center;\n    color: #007bff;\n    text-decoration: none;\n}\n.section{\n    margin-bottom: 20px;\n}\n"}, {"file": "__init__.py", "path": "static/", "code": "#Empty"}, {"file": "__init__.py", "path": "static/css/", "code": "#Empty"}], "6": [{"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todos'\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Optional: for development\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todos.urls')),  # Include the todos app's urls\n]"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "myproject/todos/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "myproject/todos/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom .forms import TodoListForm, TaskForm\nfrom django.http import JsonResponse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'todos/home.html', {'todo_lists': todo_lists})\n\n\ndef todo_list_detail(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todos/todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TodoListForm()\n    return render(request, 'todos/create_todo_list.html', {'form': form})\n\n\ndef create_task(request, todo_list_pk):\n    todo_list = get_object_or_404(TodoList, pk=todo_list_pk)\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.todo_list = todo_list\n            task.save()\n            return redirect('todo_list_detail', pk=todo_list_pk)\n    else:\n        form = TaskForm()\n    return render(request, 'todos/create_task.html', {'form': form, 'todo_list': todo_list})\n\ndef edit_task(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list_detail', pk=task.todo_list.pk)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'todos/edit_task.html', {'form': form, 'task': task})\n\ndef delete_task(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    todo_list_pk = task.todo_list.pk\n    task.delete()\n    return redirect('todo_list_detail', pk=todo_list_pk)\n\ndef mark_task_completed(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', pk=task.todo_list.pk)\n\ndef analysis(request):\n    todo_lists = TodoList.objects.all()\n    data = []\n    for todo_list in todo_lists:\n        completed_tasks = Task.objects.filter(todo_list=todo_list, completed=True).count()\n        total_tasks = Task.objects.filter(todo_list=todo_list).count()\n        data.append({\n            'list_name': todo_list.name,\n            'completed_tasks': completed_tasks,\n            'total_tasks': total_tasks\n        })\n    return render(request, 'todos/analysis.html', {'data': data})\n\n"}, {"file": "urls.py", "path": "myproject/todos/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('todo_list/<int:pk>/', views.todo_list_detail, name='todo_list_detail'),\n    path('create_todo_list/', views.create_todo_list, name='create_todo_list'),\n    path('todo_list/<int:todo_list_pk>/create_task/', views.create_task, name='create_task'),\n    path('task/<int:pk>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:pk>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:pk>/complete/', views.mark_task_completed, name='mark_task_completed'),\n    path('analysis/', views.analysis, name='analysis'),\n]"}, {"file": "forms.py", "path": "myproject/todos/forms.py", "code": "from django import forms\nfrom .models import TodoList, Task\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['name']\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'completed']\n"}, {"file": "home.html", "path": "myproject/templates/todos/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo Dashboard</title>\n    <style>\n        .dashboard-container {\n            width: 80%;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .list-item {\n            margin-bottom: 10px;\n            padding: 10px;\n            border: 1px solid #eee;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"dashboard\" class=\"dashboard-container\">\n        <h1 id=\"dashboard-title\" class=\"dashboard-title\">Todo Dashboard</h1>\n        <a id=\"create-list-link\" class=\"create-list-link\" href=\"{% url 'create_todo_list' %}\">Create New Todo List</a>\n\n        <h2 id=\"todo-lists-header\" class=\"todo-lists-header\">Todo Lists:</h2>\n        <ul id=\"todo-lists\" class=\"todo-lists\">\n            {% for todo_list in todo_lists %}\n                <li id=\"list-{{ todo_list.id }}\" class=\"list-item\">\n                    <a id=\"list-link-{{ todo_list.id }}\" class=\"list-link\" href=\"{% url 'todo_list_detail' pk=todo_list.id %}\">{{ todo_list.name }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n\n        <a id=\"analysis-link\" class=\"analysis-link\" href=\"{% url 'analysis' %}\">View Analysis</a>\n    </div>\n</body>\n</html>\n"}, {"file": "todo_list_detail.html", "path": "myproject/templates/todos/todo_list_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List Detail</title>\n    <style>\n        .todo-list-detail-container {\n            width: 80%;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .task-item {\n            margin-bottom: 10px;\n            padding: 10px;\n            border: 1px solid #eee;\n        }\n        .completed {\n            text-decoration: line-through;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"todo-list-detail\" class=\"todo-list-detail-container\">\n        <h1 id=\"list-title\" class=\"list-title\">{{ todo_list.name }}</h1>\n\n        <a id=\"create-task-link\" class=\"create-task-link\" href=\"{% url 'create_task' todo_list_pk=todo_list.id %}\">Add New Task</a>\n        <a id=\"back-to-home-link\" class=\"back-to-home-link\" href=\"{% url 'home' %}\">Back to Dashboard</a>\n\n        <h2 id=\"tasks-header\" class=\"tasks-header\">Tasks:</h2>\n        <ul id=\"tasks\" class=\"tasks\">\n            {% for task in tasks %}\n                <li id=\"task-{{ task.id }}\" class=\"task-item {% if task.completed %}completed{% endif %}\">\n                    <span id=\"task-title-{{ task.id }}\" class=\"task-title\">{{ task.title }}</span>\n                    <p id=\"task-description-{{ task.id }}\" class=\"task-description\">{{ task.description }}</p>\n\n                    {% if not task.completed %}\n                        <a id=\"complete-task-link-{{ task.id }}\" class=\"complete-task-link\" href=\"{% url 'mark_task_completed' pk=task.id %}\">Mark as Completed</a>\n                        <a id=\"edit-task-link-{{ task.id }}\" class=\"edit-task-link\" href=\"{% url 'edit_task' pk=task.id %}\">Edit</a>\n                    {% endif %}\n                    <a id=\"delete-task-link-{{ task.id }}\" class=\"delete-task-link\" href=\"{% url 'delete_task' pk=task.id %}\">Delete</a>\n\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "create_todo_list.html", "path": "myproject/templates/todos/create_todo_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Create Todo List</title>\n    <style>\n        .form-container {\n            width: 50%;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"create-list-form\" class=\"form-container\">\n        <h1 id=\"form-title\" class=\"form-title\">Create New Todo List</h1>\n        <form id=\"todo-list-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-group-name\" class=\"form-group\">\n                <label id=\"name-label\" for=\"id_name\">List Name:</label>\n                {{ form.name }}\n            </div>\n            <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Create</button>\n            <a id=\"cancel-button\" class=\"cancel-button\" href=\"{% url 'home' %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "create_task.html", "path": "myproject/templates/todos/create_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Create Task</title>\n    <style>\n        .form-container {\n            width: 50%;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"create-task-form\" class=\"form-container\">\n        <h1 id=\"form-title\" class=\"form-title\">Create New Task for {{ todo_list.name }}</h1>\n        <form id=\"task-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-group-title\" class=\"form-group\">\n                <label id=\"title-label\" for=\"id_title\">Task Title:</label>\n                {{ form.title }}\n            </div>\n            <div id=\"form-group-description\" class=\"form-group\">\n                <label id=\"description-label\" for=\"id_description\">Task Description:</label>\n                {{ form.description }}\n            </div>\n            <div id=\"form-group-completed\" class=\"form-group\">\n                <label id=\"completed-label\" for=\"id_completed\">Completed:</label>\n                {{ form.completed }}\n            </div>\n            <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Create</button>\n            <a id=\"cancel-button\" class=\"cancel-button\" href=\"{% url 'todo_list_detail' pk=todo_list.pk %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_task.html", "path": "myproject/templates/todos/edit_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Task</title>\n    <style>\n        .form-container {\n            width: 50%;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"edit-task-form\" class=\"form-container\">\n        <h1 id=\"form-title\" class=\"form-title\">Edit Task</h1>\n        <form id=\"task-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-group-title\" class=\"form-group\">\n                <label id=\"title-label\" for=\"id_title\">Task Title:</label>\n                {{ form.title }}\n            </div>\n            <div id=\"form-group-description\" class=\"form-group\">\n                <label id=\"description-label\" for=\"id_description\">Task Description:</label>\n                {{ form.description }}\n            </div>\n            <div id=\"form-group-completed\" class=\"form-group\">\n                <label id=\"completed-label\" for=\"id_completed\">Completed:</label>\n                {{ form.completed }}\n            </div>\n            <button id=\"submit-button\" class=\"submit-button\" type=\"submit\">Save Changes</button>\n            <a id=\"cancel-button\" class=\"cancel-button\" href=\"{% url 'todo_list_detail' pk=task.todo_list.pk %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "analysis.html", "path": "myproject/templates/todos/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo Analysis</title>\n    <style>\n        .analysis-container {\n            width: 80%;\n            margin: 20px auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n        }\n        .chart-container {\n            margin-bottom: 20px;\n            border: 1px solid #eee;\n            padding: 10px;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: left;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"analysis-page\" class=\"analysis-container\">\n        <h1 id=\"analysis-title\" class=\"analysis-title\">Todo Analysis</h1>\n        <a id=\"back-to-home\" class=\"back-to-home\" href=\"{% url 'home' %}\">Back to Dashboard</a>\n\n        <div id=\"completion-chart\" class=\"chart-container\">\n            <h2 id=\"completion-chart-title\" class=\"chart-title\">Task Completion Overview</h2>\n            <table id=\"completion-table\" class=\"completion-table\">\n                <thead>\n                    <tr>\n                        <th id=\"list-name-header\" class=\"list-name-header\">List Name</th>\n                        <th id=\"completed-tasks-header\" class=\"completed-tasks-header\">Completed Tasks</th>\n                        <th id=\"total-tasks-header\" class=\"total-tasks-header\">Total Tasks</th>\n                        <th id=\"completion-rate-header\" class=\"completion-rate-header\">Completion Rate</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {% for item in data %}\n                        <tr id=\"list-row-{{ forloop.counter }}\" class=\"list-row\">\n                            <td id=\"list-name-{{ forloop.counter }}\" class=\"list-name\">{{ item.list_name }}</td>\n                            <td id=\"completed-tasks-{{ forloop.counter }}\" class=\"completed-tasks\">{{ item.completed_tasks }}</td>\n                            <td id=\"total-tasks-{{ forloop.counter }}\" class=\"total-tasks\">{{ item.total_tasks }}</td>\n                            <td id=\"completion-rate-{{ forloop.counter }}\" class=\"completion-rate\">{% if item.total_tasks > 0 %}{{ item.completed_tasks|floatformat:2 }}/{{item.total_tasks}}{% else %}0{% endif %}</td>\n                        </tr>\n                    {% endfor %}\n                </tbody>\n            </table>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "admin.py", "path": "myproject/todos/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)"}], "11": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "/review_tool/", "code": ""}, {"file": "settings.py", "path": "/review_tool/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_tool.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_tool.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "/review_tool/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review.urls')),  # Include the review app's URLs\n]"}, {"file": "wsgi.py", "path": "/review_tool/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "/review/", "code": "default_app_config = 'review.apps.ReviewConfig'"}, {"file": "apps.py", "path": "/review/", "code": "from django.apps import AppConfig\n\n\nclass ReviewConfig(AppConfig):\n    name = 'review'"}, {"file": "models.py", "path": "/review/", "code": "from django.db import models\n\nclass TestCodeReview(models.Model):\n    page = models.CharField(max_length=255)\n    function_name = models.CharField(max_length=255)\n    status = models.CharField(max_length=50, choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')], default='Select')\n    notes = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.page} - {self.function_name}'"}, {"file": "views.py", "path": "/review/", "code": "import json\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .forms import UploadFileForm, ReviewForm\nfrom .models import TestCodeReview\n\n\ndef home(request):\n    welcome_message = \"Welcome to the Review Tool!\"\n    # Example data - replace with your actual test code data loading logic\n    context = {\n        'welcome_message': welcome_message,\n        'test_codes': [\n            {\n                'page': 'Home',\n                'required': True,\n                'function': [\n                    {\n                        'function': 'Display Welcome Message',\n                        'description': 'Review the test code for ensuring the welcome message or website title is displayed correctly.',\n                        'required': True\n                    },\n                    {\n                        'function': 'Select Status for the Testcode',\n                        'description': 'A select box of three  status \\\"Pass\\\", \\\"Fail\\\" and \\\"Select\\\" for the user to review the code. DO NOT forget about the submit button.',\n                        'required': True\n                    },\n                    {\n                        'function': 'Import File',\n                        'description': 'A form for importing JSON file mentioned in the requirements.',\n                        'required': False\n                    },\n                    {\n                        'function': 'Note for Reviewing',\n                        'description': 'An input box or area that for users to give reviewing notes for each testcode.',\n                        'required': True\n                    }\n                ]\n            },\n            {\n                'page': 'About',\n                'required': False,\n                'function': [\n                    {\n                        'function': 'About Page',\n                        'description': 'The about page that describe the function and other information of the website',\n                        'required': False\n                    }\n                ]\n            }\n        ]\n    }\n\n    #Process ReviewForm\n    if request.method == 'POST':\n        form = ReviewForm(request.POST)\n        if form.is_valid():\n            page = form.cleaned_data['page']\n            function_name = form.cleaned_data['function_name']\n            status = form.cleaned_data['status']\n            notes = form.cleaned_data['notes']\n            TestCodeReview.objects.create(page=page, function_name=function_name, status=status, notes=notes)\n            return redirect('home') # Redirect to home after form submission\n    else:\n        form = ReviewForm()\n        context['form'] = form\n\n    return render(request, 'home.html', context)\n\ndef about(request):\n    return render(request, 'about.html')\n\n\ndef upload_file(request):\n    if request.method == 'POST':\n        form = UploadFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            try:\n                file = request.FILES['file']\n                data = json.load(file)\n                # Process the JSON data here (e.g., save to database)\n                # For example, you can iterate through the data and create models\n                # for item in data:\n                #   YourModel.objects.create(field1=item['field1'], field2=item['field2'])\n                return HttpResponse('File uploaded and processed successfully!')\n            except json.JSONDecodeError:\n                return HttpResponse('Invalid JSON file.')\n            except Exception as e:\n                return HttpResponse(f'An error occurred: {e}')\n\n    else:\n        form = UploadFileForm()\n    return render(request, 'upload.html', {'form': form})\n"}, {"file": "urls.py", "path": "/review/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('upload/', views.upload_file, name='upload_file'),\n]"}, {"file": "forms.py", "path": "/review/", "code": "from django import forms\n\nclass UploadFileForm(forms.Form):\n    file = forms.FileField()\n\nclass ReviewForm(forms.Form):\n    page = forms.CharField(label='Page', max_length=255)\n    function_name = forms.CharField(label='Function Name', max_length=255)\n    status = forms.ChoiceField(label='Status', choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')], initial='Select')\n    notes = forms.CharField(label='Notes', widget=forms.Textarea, required=False)"}, {"file": "home.html", "path": "/templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Review Tool</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1>Review Tool</h1>\n        <nav id=\"navigation\" class=\"navigation\">\n            <ul>\n                <li><a href=\"{% url 'home' %}\" class=\"nav-link\" id=\"home-link\">Home</a></li>\n                <li><a href=\"{% url 'about' %}\" class=\"nav-link\" id=\"about-link\">About</a></li>\n                <li><a href=\"{% url 'upload_file' %}\" class=\"nav-link\" id=\"upload-link\">Upload File</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n        <section id=\"welcome-section\" class=\"welcome-section\">\n            <h2 id=\"welcome-message-heading\" class=\"welcome-message-heading\">{{ welcome_message }}</h2>\n        </section>\n\n        <section id=\"review-section\" class=\"review-section\">\n            <h2 id=\"review-heading\" class=\"review-heading\">Test Code Review</h2>\n            {% for test_code in test_codes %}\n                <div class=\"page-section\" id=\"page-section-{{ forloop.counter }}\">\n                    <h3 class=\"page-title\" id=\"page-title-{{ forloop.counter }}\">Page: {{ test_code.page }}</h3>\n                    {% for func in test_code.function %}\n                        <div class=\"function-section\" id=\"function-section-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\">\n                            <h4 class=\"function-name\" id=\"function-name-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\">Function: {{ func.function }}</h4>\n                            <p class=\"function-description\" id=\"function-description-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\">Description: {{ func.description }}</p>\n                            <form method=\"post\" id=\"review-form-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"review-form\">\n                                {% csrf_token %}\n                                <input type=\"hidden\" name=\"page\" value=\"{{ test_code.page }}\">\n                                <input type=\"hidden\" name=\"function_name\" value=\"{{ func.function }}\">\n\n                                <label for=\"status-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"status-label\">Status:</label>\n                                <select name=\"status\" id=\"status-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"status-select\">\n                                    <option value=\"Select\">Select</option>\n                                    <option value=\"Pass\">Pass</option>\n                                    <option value=\"Fail\">Fail</option>\n                                </select><br>\n\n                                <label for=\"notes-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"notes-label\">Notes:</label><br>\n                                <textarea name=\"notes\" id=\"notes-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\" class=\"notes-textarea\" rows=\"3\" cols=\"40\"></textarea><br>\n\n                                <button type=\"submit\" class=\"submit-button\" id=\"submit-button-{{ forloop.parentloop.counter }}-{{ forloop.counter }}\">Submit</button>\n                            </form>\n                        </div>\n                    {% endfor %}\n                </div>\n            {% endfor %}\n        </section>\n\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2024 Review Tool</p>\n    </footer>\n\n    <script src=\"{% static 'js/script.js' %}\"></script>\n</body>\n</html>"}, {"file": "about.html", "path": "/templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1>Review Tool</h1>\n        <nav id=\"navigation\" class=\"navigation\">\n            <ul>\n                <li><a href=\"{% url 'home' %}\" class=\"nav-link\" id=\"home-link\">Home</a></li>\n                <li><a href=\"{% url 'about' %}\" class=\"nav-link\" id=\"about-link\">About</a></li>\n                <li><a href=\"{% url 'upload_file' %}\" class=\"nav-link\" id=\"upload-link\">Upload File</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n        <section id=\"about-section\" class=\"about-section\">\n            <h2 id=\"about-heading\" class=\"about-heading\">About This Tool</h2>\n            <p id=\"about-description\" class=\"about-description\">This tool is designed to help you review test code and provide feedback.  It allows you to select the status of each test code (Pass, Fail, Select) and add notes for further clarification.</p>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2024 Review Tool</p>\n    </footer>\n\n    <script src=\"{% static 'js/script.js' %}\"></script>\n</body>\n</html>"}, {"file": "upload.html", "path": "/templates/", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Upload File</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1>Review Tool</h1>\n        <nav id=\"navigation\" class=\"navigation\">\n            <ul>\n                <li><a href=\"{% url 'home' %}\" class=\"nav-link\" id=\"home-link\">Home</a></li>\n                <li><a href=\"{% url 'about' %}\" class=\"nav-link\" id=\"about-link\">About</a></li>\n                <li><a href=\"{% url 'upload_file' %}\" class=\"nav-link\" id=\"upload-link\">Upload File</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n        <section id=\"upload-section\" class=\"upload-section\">\n            <h2 id=\"upload-heading\" class=\"upload-heading\">Upload a JSON File</h2>\n            <form method=\"post\" enctype=\"multipart/form-data\" id=\"upload-form\" class=\"upload-form\">\n                {% csrf_token %}\n                {{ form.as_p }}\n                <button type=\"submit\" id=\"upload-button\" class=\"upload-button\">Upload</button>\n            </form>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2024 Review Tool</p>\n    </footer>\n\n    <script src=\"{% static 'js/script.js' %}\"></script>\n</body>\n</html>"}, {"file": "style.css", "path": "/static/css/", "code": "/* Basic Styling */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.header {\n    background-color: #333;\n    color: #fff;\n    padding: 1em;\n    text-align: center;\n}\n\n.navigation ul {\n    padding: 0;\n    list-style: none;\n}\n\n.navigation li {\n    display: inline;\n    margin: 0 10px;\n}\n\n.navigation a {\n    color: #fff;\n    text-decoration: none;\n}\n\n.main-content {\n    padding: 20px;\n    margin: 20px;\n    background-color: #fff;\n    border-radius: 5px;\n}\n\n.footer {\n    text-align: center;\n    padding: 1em;\n    background-color: #333;\n    color: #fff;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n}\n\n/* Home Page Specific Styles */\n.welcome-section {\n    margin-bottom: 20px;\n    padding: 15px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\n.review-section {\n    margin-top: 20px;\n}\n\n.page-section {\n    border: 1px solid #ddd;\n    padding: 10px;\n    margin-bottom: 15px;\n    border-radius: 5px;\n}\n\n.function-section {\n    margin-left: 20px;\n    padding: 10px;\n    border-bottom: 1px solid #eee;\n}\n\n.status-select {\n    margin-bottom: 10px;\n}\n\n.notes-textarea {\n    width: 90%;\n    margin-bottom: 10px;\n}\n\n.submit-button {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n/* About Page Specific Styles */\n.about-section {\n    padding: 15px;\n}\n\n/* Upload Page Specific Styles */\n.upload-form {\n    margin-top: 15px;\n}\n\n.upload-button {\n    background-color: #008CBA;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}"}, {"file": "script.js", "path": "/static/js/", "code": "// Optional:  Add some client-side scripting here if needed\nconsole.log('Script loaded');"}], "13": [{"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Optional: Add your static directory\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "myproject/myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255, null=True, blank=True)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    class Meta:\n        unique_together = ('customer', 'product')\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name}'"}, {"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]"}, {"file": "home.html", "path": "myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"welcome-message\" class=\"welcome-text\">Welcome to the System</h1>\n        <p id=\"overview\" class=\"system-overview\">This system allows you to manage customers, products, purchase records, preferred products, and analyze sales.</p>\n        <div id=\"features\" class=\"feature-list\">\n            <ul id=\"feature-list\" class=\"list-unstyled\">\n                <li class=\"feature-item\"><a href=\"#customer-management\" class=\"feature-link\">Customer Management</a></li>\n                <li class=\"feature-item\"><a href=\"#product-management\" class=\"feature-link\">Product Management</a></li>\n                <li class=\"feature-item\"><a href=\"#purchase-records\" class=\"feature-link\">Purchase Records</a></li>\n                <li class=\"feature-item\"><a href=\"#preferred-products\" class=\"feature-link\">Preferred Products</a></li>\n                <li class=\"feature-item\"><a href=\"#sales-analysis\" class=\"feature-link\">Sales Analysis</a></li>\n            </ul>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "admin.py", "path": "myproject/myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}], "14": [{"file": "settings.py", "path": "helloworld_project/helloworld_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.staticfiles',\n    'helloworld_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n]\n\nROOT_URLCONF = 'helloworld_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Ensure static files are properly served\n"}, {"file": "urls.py", "path": "helloworld_project/helloworld_project/urls.py", "code": "from django.urls import path\nfrom helloworld_app import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "helloworld_project/helloworld_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "apps.py", "path": "helloworld_project/helloworld_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloworldAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworld_app'\n"}, {"file": "views.py", "path": "helloworld_project/helloworld_app/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'hello_world.html')\n"}, {"file": "urls.py", "path": "helloworld_project/helloworld_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "hello_world.html", "path": "helloworld_project/templates/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Hello World page\">\n    <meta name=\"keywords\" content=\"hello world, django\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"hello-text\" class=\"hello-text\">Hello World</h1>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "helloworld_project/static/css/style.css", "code": ".container {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    width: 100vw;\n    margin: 0;\n    padding: 0;\n    background-color: #f0f0f0; /* Optional background color */\n}\n\n.hello-text {\n    font-family: sans-serif; /* Example Font */\n    font-size: 3em;        /* Example Font size */\n    color: #333;           /* Example color */\n    text-align: center;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .hello-text {\n        font-size: 2em;\n    }\n}\n\n@media (max-width: 480px) {\n    .hello-text {\n        font-size: 1.5em;\n    }\n}\n"}, {"file": "manage.py", "path": "helloworld_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "17": [{"file": "data_preparation.py", "path": "src/data_preparation.py", "code": "import pandas as pd\n\n\ndef read_dataset(filename):\n    \"\"\"Loads the dataset from an Excel file.\n\n    Args:\n        filename (str): The path to the Excel file.\n\n    Returns:\n        pandas.DataFrame: The loaded dataset.\n\n    Raises:\n        FileNotFoundError: If the file does not exist.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {filename}\")\n\n\ndef lag_dependent_variable(df, column_name='result', lag=1):\n    \"\"\"Applies a lag to the specified column to create a dependent variable.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        column_name (str): The name of the column to lag.\n        lag (int): The lag period.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with the lagged column.\n    \"\"\"\n    df['result_lagged'] = df[column_name].shift(lag)\n    return df\n\n\ndef prepare_independent_variables(df, dependent_variable='result_lagged'):\n    \"\"\"Prepares the independent variables, handles missing values, and empty tables.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        dependent_variable (str): Name of the dependent variable column.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with independent variables.\n\n    Raises:\n        ValueError: If missing values are found.\n        ValueError: If the DataFrame is empty.\n    \"\"\"\n    if df.empty:\n        raise ValueError(\"DataFrame is empty.\")\n\n    if df.isnull().any().any():\n        raise ValueError(\"Missing values found in the DataFrame. Please handle them.\")\n\n    independent_variables = df.drop(columns=[dependent_variable, 'result'], errors='ignore')  # Drop original 'result' column if exists\n    return independent_variables\n\n\nif __name__ == '__main__':\n    # Example usage (for testing)\n    try:\n        data = read_dataset('Gamedata.xlsx')\n        data = lag_dependent_variable(data)\n        X = prepare_independent_variables(data)\n        y = data['result_lagged'].dropna()  # Drop NaN values created by lagging\n\n        print(\"Independent Variables (X):\\n\", X.head())\n        print(\"Dependent Variable (y):\\n\", y.head())\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n"}, {"file": "model_creation.py", "path": "src/model_creation.py", "code": "import pandas as pd\nimport statsmodels.api as sm\n\n\ndef create_logistic_model(X, y):\n    \"\"\"Creates a logistic regression model.\n\n    Args:\n        X (pandas.DataFrame): The independent variables.\n        y (pandas.Series): The dependent variable.\n\n    Returns:\n        statsmodels.discrete.discrete_model.BinaryResultsWrapper: The fitted logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)  # Add a constant (intercept) to the independent variables\n    model = sm.Logit(y, X)\n    results = model.fit()\n    return results\n\n\ndef generate_model_summary(model):\n    \"\"\"Generates a summary of the logistic regression model.\n\n    Args:\n        model (statsmodels.discrete.discrete_model.BinaryResultsWrapper): The fitted logistic regression model.\n\n    Returns:\n        str: The model summary as a string.\n    \"\"\"\n    return model.summary().as_text()\n\n\nif __name__ == '__main__':\n    # Example usage (for testing)\n    from data_preparation import read_dataset, lag_dependent_variable, prepare_independent_variables\n\n    try:\n        data = read_dataset('Gamedata.xlsx')\n        data = lag_dependent_variable(data)\n        y = data['result_lagged'].dropna() # Drop NaN values created by lagging\n        X = prepare_independent_variables(data)\n\n        model = create_logistic_model(X, y)\n        summary = generate_model_summary(model)\n        print(summary)\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\ndef write_summary(summary, filename='Logistic.xlsx'):\n    \"\"\"Writes the model summary to an Excel file.\n\n    Args:\n        summary (str): The model summary as a string.\n        filename (str): The name of the Excel file to write to.\n    \"\"\"\n    # Split the summary into lines\n    lines = summary.splitlines()\n\n    # Create a DataFrame from the lines\n    df = pd.DataFrame({'summary': lines})\n\n    # Write the DataFrame to an Excel file\n    df.to_excel(filename, index=False, header=False)\n\n\nif __name__ == '__main__':\n    # Example usage (for testing)\n    from model_creation import create_logistic_model, generate_model_summary\n    from data_preparation import read_dataset, lag_dependent_variable, prepare_independent_variables\n\n    try:\n        data = read_dataset('Gamedata.xlsx')\n        data = lag_dependent_variable(data)\n        y = data['result_lagged'].dropna() # Drop NaN values created by lagging\n        X = prepare_independent_variables(data)\n\n        model = create_logistic_model(X, y)\n        summary = generate_model_summary(model)\n        write_summary(summary)\n        print(f\"Model summary written to Logistic.xlsx\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")"}, {"file": "main.py", "path": "main.py", "code": "from src.data_preparation import read_dataset, lag_dependent_variable, prepare_independent_variables\nfrom src.model_creation import create_logistic_model, generate_model_summary\nfrom src.output import write_summary\n\n\ndef main():\n    try:\n        # Data Preparation\n        data = read_dataset('Gamedata.xlsx')\n        data = lag_dependent_variable(data)\n        y = data['result_lagged'].dropna()\n        X = prepare_independent_variables(data)\n\n        # Model Creation\n        model = create_logistic_model(X, y)\n        summary = generate_model_summary(model)\n\n        # Output\n        write_summary(summary)\n        print(\"Model summary written to Logistic.xlsx\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}], "18": [{"file": "main.py", "path": "/", "code": "import json\n\nclass Game:\n    def __init__(self):\n        self.game_state = {\n            \"current_page\": \"Main Menu\",\n            \"inventory\": [],\n            \"current_room\": None,\n            \"game_over\": False\n        }\n        self.data = self.load_game_data('game_data.json')\n        self.rooms = self.load_rooms('rooms.json')\n        self.current_room = 'entrance'\n        self.game_state['current_room'] = self.current_room\n\n    def load_game_data(self, filename):\n        with open(filename, 'r') as f:\n            return json.load(f)\n\n    def load_rooms(self, filename):\n        with open(filename, 'r') as f:\n            return json.load(f)\n\n    def display_main_menu(self):\n        print(\"\\n--- Main Menu ---\")\n        print(\"1. Start Game\")\n        print(\"2. Instructions\")\n        print(\"3. Exit Game\")\n\n    def display_instructions(self):\n        print(\"\\n--- Instructions ---\")\n        print(\"This is a simple text-based adventure game.\\\")\n        print(\"Explore rooms, pick up items, and solve the puzzle!\\n\")\n        print(\"Commands: move, look, pick, check, help, exit\")\n\n    def start_game(self):\n        self.game_state['current_page'] = \"Game Environment\"\n        self.game_state['inventory'] = [] # Reset inventory\n        self.look_around()\n\n    def move_player(self, direction):\n        current_room_data = self.rooms.get(self.current_room)\n        if current_room_data and 'exits' in current_room_data:\n            if direction in current_room_data['exits']:\n                self.current_room = current_room_data['exits'][direction]\n                self.game_state['current_room'] = self.current_room\n                self.look_around()\n            else:\n                print(\"You can't go that way.\")\n        else:\n            print(\"Error: Room data or exits not found.\")\n\n    def look_around(self):\n        current_room_data = self.rooms.get(self.current_room)\n        if current_room_data:\n            print(f\"\\n--- You are in the {current_room_data['name']} ---\")\n            print(current_room_data['description'])\n            if 'item' in current_room_data and current_room_data['item']:\n                print(f\"You see a {current_room_data['item']}.\")\n        else:\n            print(\"Error: Room not found.\")\n\n    def pick_item(self):\n        current_room_data = self.rooms.get(self.current_room)\n        if current_room_data and 'item' in current_room_data and current_room_data['item']:\n            item = current_room_data['item']\n            self.game_state['inventory'].append(item)\n            print(f\"You picked up the {item}.\")\n            current_room_data['item'] = None # Item is picked up, so remove it from the room\n        else:\n            print(\"There's nothing to pick up here.\")\n\n    def check_inventory(self):\n        print(\"\\n--- Inventory ---\")\n        if self.game_state['inventory']:\n            for item in self.game_state['inventory']:\n                print(f\"- {item}\")\n        else:\n            print(\"Your inventory is empty.\")\n\n    def display_help(self):\n        print(\"\\n--- Help ---\")\n        print(\"Available commands: move [direction], look, pick, check, help, exit\")\n        print(\"Directions: north, south, east, west\")\n\n    def parse_command(self, command):\n        command_parts = command.split()\n        action = command_parts[0].lower()\n\n        if action == \"start\":\n            self.start_game()\n        elif action == \"move\":\n            if len(command_parts) > 1:\n                direction = command_parts[1].lower()\n                self.move_player(direction)\n            else:\n                print(\"Move where?  (e.g., move north)\")\n        elif action == \"look\":\n            self.look_around()\n        elif action == \"pick\":\n            self.pick_item()\n        elif action == \"check\":\n            self.check_inventory()\n        elif action == \"help\":\n            self.display_help()\n        elif action == \"exit\":\n            self.game_state['game_over'] = True\n            print(\"Exiting the game.\")\n        else:\n            print(\"Invalid command. Type 'help' for available commands.\")\n\n\n    def run(self):\n        while not self.game_state['game_over']:\n            if self.game_state['current_page'] == \"Main Menu\":\n                self.display_main_menu()\n                choice = input(\"> \")\n                if choice == \"1\":\n                    self.start_game()\n                elif choice == \"2\":\n                    self.display_instructions()\n                elif choice == \"3\":\n                    self.game_state['game_over'] = True\n                    print(\"Exiting the game.\")\n                else:\n                    print(\"Invalid choice.\")\n\n            elif self.game_state['current_page'] == \"Game Environment\":\n                command = input(\"> \")\n                self.parse_command(command)\n\nif __name__ == \"__main__\":\n    game = Game()\n    game.run()"}, {"file": "game_data.json", "path": "/", "code": "{\n  \"pages\": [\n    {\n      \"page\": \"Main Menu\",\n      \"required\": true,\n      \"function\": [\n        {\n          \"function\": \"Start Game\",\n          \"description\": \"Begin a new game session from the main menu.\",\n          \"required\": true\n        },\n        {\n          \"function\": \"Instructions\",\n          \"description\": \"Display game instructions and how to play.\",\n          \"required\": true\n        },\n        {\n          \"function\": \"Exit Game\",\n          \"description\": \"Exit the game from the main menu and/or in the game.\",\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"page\": \"Game Environment\",\n      \"required\": true,\n      \"function\": [\n        {\n          \"function\": \"Move Player\",\n          \"description\": \"Move the player character into a room.\",\n          \"required\": true\n        },\n        {\n          \"function\": \"Look Around\",\n          \"description\": \"Inspect the current area.\",\n          \"required\": true\n        },\n        {\n          \"function\": \"Pick Item\",\n          \"description\": \"Pick up items found in the environment. In the bash crawl, this is automatically when the player gets into the room. Set one item in this project is enough.\",\n          \"required\": true\n        },\n        {\n          \"function\": \"Check Inventory\",\n          \"description\": \"Check items the player currently holds.\",\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"page\": \"Game Logic\",\n      \"required\": true,\n      \"function\": [\n        {\n          \"function\": \"Parse Command\",\n          \"description\": \"Interpret the input commands from the player.\",\n          \"required\": true\n        },\n        {\n          \"function\": \"Update Game State\",\n          \"description\": \"Update the game state based on player actions and events.\",\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"page\": \"Help and Support\",\n      \"required\": false,\n      \"function\": [\n        {\n          \"function\": \"Display Help\",\n          \"description\": \"Provide in-game help and support information.\",\n          \"required\": true\n        }\n      ]\n    }\n  ]\n}"}, {"file": "rooms.json", "path": "/", "code": "{\n  \"entrance\": {\n    \"name\": \"Entrance Hall\",\n    \"description\": \"You are in a grand entrance hall.  There's a dusty chandelier hanging from the ceiling.\",\n    \"exits\": {\n      \"north\": \"library\",\n      \"east\": \"kitchen\"\n    },\n    \"item\": null\n  },\n  \"library\": {\n    \"name\": \"Old Library\",\n    \"description\": \"You are in a dimly lit library filled with ancient books.  Dust motes dance in the air.\",\n    \"exits\": {\n      \"south\": \"entrance\"\n    },\n    \"item\": \"old book\"\n  },\n  \"kitchen\": {\n    \"name\": \"Messy Kitchen\",\n    \"description\": \"You are in a messy kitchen.  Pots and pans are scattered everywhere.\",\n    \"exits\": {\n      \"west\": \"entrance\"\n    },\n    \"item\": \"rusty knife\"\n  }\n}"}], "19": [{"file": "death_analysis.py", "path": "src/death_analysis.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\nclass DeathAnalyzer:\n    def __init__(self, deathlist_path):\n        self.deathlist_path = deathlist_path\n        self.df = None\n\n    def ReadDeathlistData(self):\n        try:\n            self.df = pd.read_csv(self.deathlist_path)\n            print(\"Data loaded successfully.\")\n        except FileNotFoundError:\n            print(f\"Error: File not found at {self.deathlist_path}\")\n            self.df = None\n        except Exception as e:\n            print(f\"Error reading file: {e}\")\n            self.df = None\n\n    def ValidateDataset(self):\n        if self.df is None:\n            print(\"Dataset is empty.  Please load data first.\")\n            return False\n        \n        required_columns = ['date', 'cause_of_death'] # Example columns.  Adjust as needed.\n        if not all(col in self.df.columns for col in required_columns):\n            print(f\"Error: Required columns {required_columns} are missing.\")\n            return False\n        print(\"Dataset validated.\")\n        return True\n\n    def ProcessData(self):\n        if self.df is None or not self.ValidateDataset():\n            return\n        # Ensure 'date' column is datetime\n        try:\n            self.df['date'] = pd.to_datetime(self.df['date'])\n        except Exception as e:\n            print(f\"Error converting 'date' column: {e}\")\n            return\n        \n        #Create week number column\n        self.df['week'] = self.df['date'].dt.isocalendar().week\n        print(\"Data processed.\")\n\n    def CalculateWeeklyDeaths(self):\n        if self.df is None:\n            print(\"Dataframe is empty. Load and process data first.\")\n            return None\n        weekly_deaths = self.df.groupby('week').size()\n        print(\"Weekly deaths calculated.\")\n        return weekly_deaths\n\n    def GenerateHistogram(self, weekly_deaths):\n         if weekly_deaths is None:\n            print(\"No weekly death data to generate histogram.\")\n            return\n\n         plt.figure(figsize=(10, 6))\n         plt.bar(weekly_deaths.index, weekly_deaths.values)\n         plt.xlabel('Week Number')\n         plt.ylabel('Number of Deaths')\n         plt.title('Weekly Death Count Histogram')\n         plt.xticks(weekly_deaths.index)\n         plt.grid(axis='y', alpha=0.75)\n\n         # Annotate each bar with the death count\n         for week, count in weekly_deaths.items():\n             plt.text(week, count + 0.5, str(count), ha='center', va='bottom')\n\n         plt.savefig('weekly_deaths_histogram.png')\n         print(\"Histogram generated.\")\n         plt.close()\n\n    def OutputHistogram(self):\n        print(\"Histogram saved to 'weekly_deaths_histogram.png'\")\n\n\nif __name__ == '__main__':\n    analyzer = DeathAnalyzer('Deathlist.csv')\n    analyzer.ReadDeathlistData()\n    if analyzer.ValidateDataset():\n        analyzer.ProcessData()\n        weekly_deaths = analyzer.CalculateWeeklyDeaths()\n        if weekly_deaths is not None:\n            analyzer.GenerateHistogram(weekly_deaths)\n            analyzer.OutputHistogram()\n    else:\n        print(\"Dataset validation failed.  Analysis stopped.\")"}, {"file": "Deathlist.csv", "path": "data/Deathlist.csv", "code": "date,cause_of_death\n2023-01-01,Heart Failure\n2023-01-05,Accident\n2023-01-10,Pneumonia\n2023-01-15,Heart Failure\n2023-01-22,Cancer\n2023-01-29,Accident\n2023-02-05,Old Age\n2023-02-12,Heart Failure\n2023-02-19,Cancer\n2023-02-26,Pneumonia\n2023-03-05,Accident\n2023-03-12,Heart Failure\n2023-03-19,Old Age\n2023-03-26,Cancer\n2023-04-02,Pneumonia\n2023-04-09,Accident\n2023-04-16,Heart Failure\n2023-04-23,Old Age\n2023-04-30,Cancer\n"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nmatplotlib"}]}