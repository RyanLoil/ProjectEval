{"1": [{"file": "manage.py", "path": "bmi_calculator/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "bmi_calculator/bmi_calculator/__init__.py", "code": "default_app_config = 'bmi_calculator.apps.BmiCalculatorConfig'"}, {"file": "settings.py", "path": "bmi_calculator/bmi_calculator/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong, unique secret key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "bmi_calculator/bmi_calculator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),  # Include the calculator app's URLs\n]"}, {"file": "wsgi.py", "path": "bmi_calculator/bmi_calculator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "bmi_calculator/calculator/__init__.py", "code": "default_app_config = 'calculator.apps.CalculatorConfig'"}, {"file": "apps.py", "path": "bmi_calculator/calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    name = 'calculator'"}, {"file": "forms.py", "path": "bmi_calculator/calculator/forms.py", "code": "from django import forms\n\nclass BMIForm(forms.Form):\n    weight = forms.FloatField(label='Weight (kg)')\n    height = forms.FloatField(label='Height (m)')"}, {"file": "models.py", "path": "bmi_calculator/calculator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "views.py", "path": "bmi_calculator/calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMIForm\n\ndef calculate_bmi(request):\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height']\n            bmi = weight / (height ** 2)\n            return render(request, 'calculator/result.html', {'bmi': bmi})\n    else:\n        form = BMIForm()\n    return render(request, 'calculator/index.html', {'form': form})"}, {"file": "urls.py", "path": "bmi_calculator/calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "index.html", "path": "bmi_calculator/templates/calculator/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            width: 300px;\n            text-align: center;\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n            text-align: left;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: bold;\n        }\n\n        input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            font-size: 16px;\n        }\n\n        button:hover {\n            background-color: #3e8e41;\n        }\n\n        .errorlist {\n            color: red;\n            margin-top: 5px;\n            padding: 0;\n            list-style: none;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1 id=\"bmi-calculator-title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"weight-form-group\" class=\"form-group\">\n                <label id=\"weight-label\" for=\"id_weight\">Weight (kg):</label>\n                {{ form.weight }}\n                {% if form.weight.errors %}\n                    <ul class=\"errorlist\">{{ form.weight.errors }}</ul>\n                {% endif %}\n            </div>\n            <div id=\"height-form-group\" class=\"form-group\">\n                <label id=\"height-label\" for=\"id_height\">Height (m):</label>\n                {{ form.height }}\n                {% if form.height.errors %}\n                    <ul class=\"errorlist\">{{ form.height.errors }}</ul>\n                {% endif %}\n            </div>\n            <button id=\"calculate-button\" type=\"submit\">Calculate</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "result.html", "path": "bmi_calculator/templates/calculator/result.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Result</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f0f0f0;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            width: 300px;\n            text-align: center;\n        }\n\n        h1 {\n            margin-bottom: 20px;\n        }\n\n        p {\n            font-size: 18px;\n            margin-bottom: 15px;\n        }\n\n        a {\n            display: inline-block;\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            text-decoration: none;\n            border-radius: 4px;\n            font-size: 16px;\n        }\n\n        a:hover {\n            background-color: #3e8e41;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"bmi-result-container\" class=\"container\">\n        <h1 id=\"bmi-result-title\">BMI Result</h1>\n        <p id=\"bmi-value\">Your BMI is: <span id=\"bmi-number\">{{ bmi }}</span></p>\n        <a id=\"calculate-again-link\" href=\"{% url 'calculate_bmi' %}\">Calculate Again</a>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "bmi_calculator/static/calculator/style.css", "code": "/* Add your CSS styling here.  This is a placeholder file.  The inline styles in the templates are also valid.\n   You can remove the inline styles and migrate them here. */\n"}], "2": [{"file": "manage.py", "path": "currency_converter/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "currency_converter/currency_converter/__init__.py", "code": ""}, {"file": "settings.py", "path": "currency_converter/currency_converter/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')), # Include the converter app's URLs\n]\n"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "currency_converter/converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "currency_converter/converter/admin.py", "code": "from django.contrib import admin\n# Register your models here.\n"}, {"file": "apps.py", "path": "currency_converter/converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    name = 'converter'\n"}, {"file": "forms.py", "path": "currency_converter/converter/forms.py", "code": "from django import forms\n\nclass CurrencyConverterForm(forms.Form):\n    amount = forms.DecimalField(label='Amount', initial=1.0)\n    from_currency = forms.CharField(label='From Currency', max_length=3, initial='USD')\n    to_currency = forms.CharField(label='To Currency', max_length=3, initial='EUR')\n"}, {"file": "models.py", "path": "currency_converter/converter/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "urls.py", "path": "currency_converter/converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.converter_view, name='converter'),\n]\n"}, {"file": "views.py", "path": "currency_converter/converter/views.py", "code": "from django.shortcuts import render\nfrom .forms import CurrencyConverterForm\n\n# Simulated currency rates (replace with actual data source later)\nRATES = {\n    'USD': {\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'USD': 1.00,  # Add USD to USD rate\n        'JPY': 110.00,\n    },\n    'EUR': {\n        'USD': 1.18,\n        'GBP': 0.88,\n        'EUR': 1.00,  # Add EUR to EUR rate\n        'JPY': 129.41,\n    },\n    'GBP': {\n        'USD': 1.33,\n        'EUR': 1.14,\n        'GBP': 1.00, # Add GBP to GBP rate\n        'JPY': 146.67,\n    },\n    'JPY': {\n        'USD': 0.0091,\n        'EUR': 0.0077,\n        'GBP': 0.0068,\n        'JPY': 1.00, # Add JPY to JPY rate\n    },\n}\n\ndef converter_view(request):\n    if request.method == 'POST':\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            amount = form.cleaned_data['amount']\n            from_currency = form.cleaned_data['from_currency'].upper()\n            to_currency = form.cleaned_data['to_currency'].upper()\n\n            if from_currency in RATES and to_currency in RATES[from_currency]:\n                converted_amount = amount * RATES[from_currency][to_currency]\n                return render(request, 'converter/converter.html', {\n                    'form': form,\n                    'converted_amount': converted_amount,\n                    'from_currency': from_currency,\n                    'to_currency': to_currency\n                })\n            else:\n                return render(request, 'converter/converter.html', {\n                    'form': form,\n                    'error_message': 'Invalid currency selection.'\n                })\n    else:\n        form = CurrencyConverterForm()\n    return render(request, 'converter/converter.html', {'form': form})\n"}, {"file": "converter.html", "path": "currency_converter/converter/templates/converter/converter.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            background-color: #f4f4f4;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            width: 400px;\n        }\n\n        h1 {\n            text-align: center;\n            color: #333;\n        }\n\n        form {\n            display: flex;\n            flex-direction: column;\n        }\n\n        label {\n            margin-top: 10px;\n            color: #555;\n        }\n\n        input[type=\"number\"], input[type=\"text\"] {\n            padding: 8px;\n            margin-top: 5px;\n            margin-bottom: 15px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n\n        button {\n            background-color: #007bff;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n            transition: background-color 0.3s;\n        }\n\n        button:hover {\n            background-color: #0056b3;\n        }\n\n        .error {\n            color: red;\n            margin-top: 10px;\n        }\n\n        .result {\n            margin-top: 20px;\n            padding: 10px;\n            background-color: #e9ecef;\n            border-radius: 4px;\n            text-align: center;\n        }\n    </style>\n</head>\n<body>\n\n    <div class=\"container\" id=\"converter-container\">\n        <h1 id=\"converter-title\">Currency Converter</h1>\n        <form id=\"converter-form\" method=\"post\">\n            {% csrf_token %}\n            <label for=\"id_amount\" id=\"amount-label\">Amount:</label>\n            <input type=\"number\" name=\"amount\" id=\"id_amount\" class=\"form-control\" value=\"{{ form.amount.value|default:'1.00' }}\" required>\n\n            <label for=\"id_from_currency\" id=\"from-currency-label\">From Currency:</label>\n            <input type=\"text\" name=\"from_currency\" id=\"id_from_currency\" class=\"form-control\" value=\"{{ form.from_currency.value|default:'USD' }}\" maxlength=\"3\" required>\n\n            <label for=\"id_to_currency\" id=\"to-currency-label\">To Currency:</label>\n            <input type=\"text\" name=\"to_currency\" id=\"id_to_currency\" class=\"form-control\" value=\"{{ form.to_currency.value|default:'EUR' }}\" maxlength=\"3\" required>\n\n            <button type=\"submit\" id=\"convert-button\" class=\"btn btn-primary\">Convert</button>\n\n            {% if error_message %}\n                <p class=\"error\" id=\"error-message\">{{ error_message }}</p>\n            {% endif %}\n\n            {% if converted_amount %}\n                <div class=\"result\" id=\"conversion-result\">\n                    {{ amount }} {{ from_currency }} = {{ converted_amount }} {{ to_currency }}\n                </div>\n            {% endif %}\n        </form>\n    </div>\n\n</body>\n</html>\n"}], "3": [{"file": "manage.py", "path": "", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "password_generator/settings.py", "path": "password_generator/", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-4+77z%t_2h=p#r=0#n&_9p5m764q(9r50r%0+*9*y0)2o07(0s'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION_DIR = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField"}, {"file": "password_generator/urls.py", "path": "password_generator/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('generator.urls'))\n]"}, {"file": "password_generator/wsgi.py", "path": "password_generator/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "generator/apps.py", "path": "generator/", "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'generator'"}, {"file": "generator/urls.py", "path": "generator/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password/', views.password, name='password')\n]"}, {"file": "generator/views.py", "path": "generator/", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'generator/home.html')\n\ndef password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase')\n    include_lowercase = request.GET.get('lowercase')\n    include_numbers = request.GET.get('numbers')\n    include_symbols = request.GET.get('symbols')\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase or not (include_uppercase or include_numbers or include_symbols) :\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_lowercase  # Ensure at least lowercase if nothing is selected\n\n    generated_password = ''.join(random.choice(characters) for i in range(length))\n\n    return render(request, 'generator/password.html', {'password': generated_password})\n"}, {"file": "templates/generator/home.html", "path": "templates/generator/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" href=\"{% static 'generator/style.css' %}\">\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Password Generator</h1>\n        <form id=\"password-form\" class=\"password-form\" action=\"{% url 'password' %}\">\n            <div id=\"length-group\" class=\"form-group\">\n                <label for=\"length\" id=\"length-label\" class=\"form-label\">Password Length:</label>\n                <input type=\"number\" id=\"length\" class=\"form-control\" name=\"length\" value=\"12\">\n            </div>\n            <div id=\"options-group\" class=\"form-group\">\n                <label for=\"uppercase\" id=\"uppercase-label\" class=\"form-label\">Include Uppercase:</label>\n                <input type=\"checkbox\" id=\"uppercase\" class=\"form-check-input\" name=\"uppercase\">\n                <label for=\"lowercase\" id=\"lowercase-label\" class=\"form-label\">Include Lowercase:</label>\n                <input type=\"checkbox\" id=\"lowercase\" class=\"form-check-input\" name=\"lowercase\" checked>\n                <label for=\"numbers\" id=\"numbers-label\" class=\"form-label\">Include Numbers:</label>\n                <input type=\"checkbox\" id=\"numbers\" class=\"form-check-input\" name=\"numbers\">\n                <label for=\"symbols\" id=\"symbols-label\" class=\"form-label\">Include Symbols:</label>\n                <input type=\"checkbox\" id=\"symbols\" class=\"form-check-input\" name=\"symbols\">\n            </div>\n            <button type=\"submit\" id=\"generate-button\" class=\"btn btn-primary\">Generate Password</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "templates/generator/password.html", "path": "templates/generator/", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Your Password</title>\n    <link rel=\"stylesheet\" href=\"{% static 'generator/style.css' %}\">\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"title\" class=\"title\">Your Generated Password:</h1>\n        <h2 id=\"password\" class=\"password\">{{ password }}</h2>\n        <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"btn btn-secondary\">Generate Another Password</a>\n    </div>\n</body>\n</html>"}, {"file": "static/generator/style.css", "path": "static/generator/", "code": "body {\n    font-family: sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n}\n\n.container {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    width: 80%;\n    max-width: 600px;\n    text-align: center;\n}\n\n.title {\n    color: #333;\n    margin-bottom: 20px;\n}\n\n.form-group {\n    margin-bottom: 15px;\n    text-align: left;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.form-control {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.form-check-input {\n    margin-right: 5px;\n}\n\n.btn {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 16px;\n    text-decoration: none;\n    display: inline-block;\n    margin-top: 10px;\n}\n\n.btn:hover {\n    background-color: #0056b3;\n}\n\n.btn-secondary {\n    background-color: #6c757d;\n}\n\n.btn-secondary:hover {\n    background-color: #545b62;\n}\n\n.password {\n    margin-top: 20px;\n    font-size: 1.2em;\n    color: #28a745;\n    word-break: break-all;\n}"}], "4": [{"file": "settings.py", "path": "qr_generator_project/qr_generator/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_generator_project/qr_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_generator_project/qr_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "apps.py", "path": "qr_generator_project/qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "models.py", "path": "qr_generator_project/qr_app/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "views.py", "path": "qr_generator_project/qr_app/views.py", "code": "import qrcode\nfrom io import BytesIO\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef generate_qr(request):\n    if request.method == 'POST':\n        data = request.POST.get('qr_text')\n        if data:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.constants.ERROR_CORRECT_L,\n                box_size=10,\n                border=4,\n            )\n            qr.add_data(data)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n            buffer = BytesIO()\n            img.save(buffer, 'PNG')\n            buffer.seek(0)\n\n            return HttpResponse(buffer, content_type='image/png')\n\n    return render(request, 'qr_app/index.html')"}, {"file": "urls.py", "path": "qr_generator_project/qr_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.generate_qr, name='generate_qr'),\n]"}, {"file": "index.html", "path": "qr_generator_project/templates/qr_app/index.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            background-color: #f4f4f4;\n        }\n\n        .container {\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n            text-align: center;\n        }\n\n        #qrForm {\n            margin-bottom: 20px;\n        }\n\n        #qrText {\n            padding: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            width: 300px;\n        }\n\n        #generateBtn {\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        #qrCodeImage {\n            margin-top: 20px;\n            max-width: 300px;\n            max-height: 300px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"appContainer\" class=\"container\">\n        <h1 id=\"pageTitle\" class=\"page-title\">QR Code Generator</h1>\n        <form id=\"qrForm\" method=\"post\" action=\"{% url 'generate_qr' %}\">\n            {% csrf_token %}\n            <input type=\"text\" id=\"qrText\" name=\"qr_text\" placeholder=\"Enter text for QR code\" class=\"input-field\">\n            <button type=\"submit\" id=\"generateBtn\" class=\"generate-button\">Generate QR Code</button>\n        </form>\n        {% if request.method == 'POST' %}\n        <img id=\"qrCodeImage\" src=\"data:image/png;base64,{{ qr_code_base64 }}\" alt=\"QR Code\" class=\"qr-image\">\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "qr_generator_project/qr_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "qr_generator_project/qr_generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "qr_generator_project/qr_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}], "8": [{"file": "settings.py", "path": "monthly_calendar/monthly_calendar/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'monthly_calendar.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'monthly_calendar.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]"}, {"file": "urls.py", "path": "monthly_calendar/monthly_calendar/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "monthly_calendar/monthly_calendar/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'monthly_calendar.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "monthly_calendar/calendar_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "monthly_calendar/calendar_app/views.py", "code": "import calendar\nfrom datetime import datetime, timedelta\nfrom django.shortcuts import render\nfrom django.utils.safestring import mark_safe\n\nfrom .models import Event\n\nclass Calendar:\n    def __init__(self, year, month):\n        self.year = year\n        self.month = month\n        self.calendar = calendar.HTMLCalendar(firstweekday=calendar.SUNDAY)\n\n    def formatday(self, day, events):\n        events_per_day = events.filter(start_time__day=day)\n        d = ''\n        for event in events_per_day:\n            d += f'<li> {event.title} </li>'\n\n        if day != 0:\n            return f\"<td><span class='date'>{day}</span><ul> {d} </ul></td>\"\n        return '<td></td>'\n\n    def formatweek(self, theweek, events):\n        week = ''\n        for d, weekday in theweek:\n            week += self.formatday(d, events)\n        return f'<tr> {week} </tr>'\n\n    def formatmonth(self, withyear=True):\n        events = Event.objects.filter(start_time__year=self.year, start_time__month=self.month)\n\n        cal = f'<table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" class=\"calendar\">\\n'\n        cal += f'{self.formatmonthname(self.year, self.month, withyear=withyear)}\\n'\n        cal += f'{self.formatweekdayrow()}\\n'\n        for week in self.calendar.monthdays2calendar(self.year, self.month):\n            cal += f'{self.formatweek(week, events)}\\n'\n        return cal\n\n    def formatmonthname(self, theyear, themonth, withyear=True):\n        if withyear:\n            s = '%s %s' % (calendar.month_name[themonth], theyear)\n        else:\n            s = '%s' % calendar.month_name[themonth]\n        return '<tr><th colspan=\"7\" class=\"month\">%s</th></tr>' % s\n\n    def formatweekdayrow(self):\n        s = ''.join(f'<th class=\"weekday\">{calendar.day_name[i]}</th>' for i in range(7))\n        return f'<tr>{s}</tr>'\n\ndef index(request):\n    now = datetime.now()\n    cal = Calendar(now.year, now.month)\n    html_cal = cal.formatmonth(withyear=True)\n    return render(request, 'calendar.html', {'calendar': mark_safe(html_cal)})"}, {"file": "urls.py", "path": "monthly_calendar/calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"}, {"file": "admin.py", "path": "monthly_calendar/calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "calendar.html", "path": "monthly_calendar/templates/calendar.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Monthly Calendar</title>\n    <style>\n        .calendar {\n            width: 100%;\n            border-collapse: collapse;\n        }\n\n        .calendar th, .calendar td {\n            border: 1px solid black;\n            padding: 8px;\n            text-align: center;\n        }\n\n        .calendar th {\n            background-color: #f2f2f2;\n        }\n\n        .date {\n            font-weight: bold;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"calendar-container\" class=\"calendar-container\">\n        <h1 id=\"calendar-title\" class=\"calendar-title\">Monthly Calendar</h1>\n        <div id=\"calendar\" class=\"calendar\">\n            {{ calendar }}\n        </div>\n    </div>\n</body>\n</html>"}], "10": [{"file": "settings.py", "path": "calorie_tracker/calorie_tracker/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'  # Change this!\nDEBUG = True  # Set to False in production\n\nALLOWED_HOSTS = []  # Add your domain here in production\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tracker',\n    'chartjs',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'"}, {"file": "urls.py", "path": "calorie_tracker/calorie_tracker/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('tracker/', include('tracker.urls')),\n    path('login/', auth_views.LoginView.as_view(template_name='tracker/login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(template_name='tracker/logout.html'), name='logout'),\n]\n"}, {"file": "wsgi.py", "path": "calorie_tracker/calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "calorie_tracker/tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Food(models.Model):\n    name = models.CharField(max_length=100)\n    calories = models.FloatField()\n\n    def __str__(self):\n        return self.name\n\nclass Meal(models.Model):\n    MEAL_CHOICES = [\n        ('Breakfast', 'Breakfast'),\n        ('Lunch', 'Lunch'),\n        ('Dinner', 'Dinner'),\n        ('Snack', 'Snack'),\n    ]\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    food = models.ForeignKey(Food, on_delete=models.CASCADE)\n    meal_type = models.CharField(max_length=20, choices=MEAL_CHOICES)\n    date = models.DateField(auto_now_add=True)\n    quantity = models.FloatField(default=1)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.food.name} - {self.meal_type} - {self.date}'\n\n    def total_calories(self):\n        return self.food.calories * self.quantity"}, {"file": "forms.py", "path": "calorie_tracker/tracker/forms.py", "code": "from django import forms\nfrom .models import Meal\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = ['food', 'meal_type', 'quantity']\n"}, {"file": "urls.py", "path": "calorie_tracker/tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('add_meal/', views.add_meal, name='add_meal'),\n    path('edit_meal/<int:meal_id>/', views.edit_meal, name='edit_meal'),\n    path('delete_meal/<int:meal_id>/', views.delete_meal, name='delete_meal'),\n    path('register/', views.register, name='register'),\n    path('daily_summary/', views.daily_summary, name='daily_summary'),\n    path('weekly_analysis/', views.weekly_analysis, name='weekly_analysis'),\n]\n"}, {"file": "views.py", "path": "calorie_tracker/tracker/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Food\nfrom .forms import MealForm\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.contrib.auth import login\nfrom django.db.models import Sum\nfrom datetime import date, timedelta\nimport json\n\n\ndef register(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')  # Redirect to home after registration\n    else:\n        form = UserCreationForm()\n    return render(request, 'tracker/register.html', {'form': form})\n\n@login_required\ndef home(request):\n    meals = Meal.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'tracker/home.html', {'meals': meals})\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('home')\n    else:\n        form = MealForm()\n    return render(request, 'tracker/add_meal.html', {'form': form})\n\n@login_required\ndef edit_meal(request, meal_id):\n    meal = get_object_or_404(Meal, pk=meal_id, user=request.user)\n    if request.method == 'POST':\n        form = MealForm(request.POST, instance=meal)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = MealForm(instance=meal)\n    return render(request, 'tracker/edit_meal.html', {'form': form})\n\n@login_required\ndef delete_meal(request, meal_id):\n    meal = get_object_or_404(Meal, pk=meal_id, user=request.user)\n    meal.delete()\n    return redirect('home')\n\n@login_required\ndef daily_summary(request):\n    today = date.today()\n    meals = Meal.objects.filter(user=request.user, date=today)\n    total_calories = meals.aggregate(Sum('food__calories'))['food__calories__sum'] or 0\n    return render(request, 'tracker/daily_summary.html', {'meals': meals, 'total_calories': total_calories})\n\n@login_required\ndef weekly_analysis(request):\n    today = date.today()\n    start_date = today - timedelta(days=6)\n    meals = Meal.objects.filter(user=request.user, date__range=[start_date, today])\n\n    # Aggregate calories per day\n    daily_calories = {}\n    for i in range(7):\n        current_date = start_date + timedelta(days=i)\n        daily_meals = meals.filter(date=current_date)\n        total_calories = sum([meal.total_calories() for meal in daily_meals])\n        daily_calories[current_date.strftime('%Y-%m-%d')] = total_calories\n\n    # Prepare data for Chart.js\n    labels = list(daily_calories.keys())\n    data = list(daily_calories.values())\n\n    context = {\n        'labels': json.dumps(labels),\n        'data': json.dumps(data),\n    }\n\n    return render(request, 'tracker/weekly_analysis.html', context)"}, {"file": "home.html", "path": "calorie_tracker/templates/tracker/home.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n  <h1 id=\"home-title\" class=\"main-title\">Calorie Tracker</h1>\n\n  <div id=\"meal-list\" class=\"meal-list\">\n    <h2>Your Meals</h2>\n    <a id=\"add-meal-link\" class=\"btn btn-primary\" href=\"{% url 'add_meal' %}\">Add Meal</a>\n\n    {% if meals %}\n      <table id=\"meal-table\" class=\"table table-striped\">\n        <thead>\n          <tr>\n            <th>Food</th>\n            <th>Meal Type</th>\n            <th>Quantity</th>\n            <th>Calories</th>\n            <th>Date</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {% for meal in meals %}\n            <tr>\n              <td>{{ meal.food.name }}</td>\n              <td>{{ meal.meal_type }}</td>\n              <td>{{ meal.quantity }}</td>\n              <td>{{ meal.total_calories }}</td>\n              <td>{{ meal.date }}</td>\n              <td>\n                <a id=\"edit-meal-{{ meal.id }}-link\" class=\"btn btn-sm btn-warning\" href=\"{% url 'edit_meal' meal.id %}\">Edit</a>\n                <a id=\"delete-meal-{{ meal.id }}-link\" class=\"btn btn-sm btn-danger\" href=\"{% url 'delete_meal' meal.id %}\">Delete</a>\n              </td>\n            </tr>\n          {% endfor %}\n        </tbody>\n      </table>\n    {% else %}\n      <p id=\"no-meals-message\" class=\"no-data-message\">No meals recorded yet.</p>\n    {% endif %}\n  </div>\n\n  <div id=\"summary-links\" class=\"summary-links\">\n    <a id=\"daily-summary-link\" class=\"btn btn-info\" href=\"{% url 'daily_summary' %}\">Daily Summary</a>\n    <a id=\"weekly-analysis-link\" class=\"btn btn-info\" href=\"{% url 'weekly_analysis' %}\">Weekly Analysis</a>\n  </div>\n\n{% endblock %}"}, {"file": "add_meal.html", "path": "calorie_tracker/templates/tracker/add_meal.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n  <h1 id=\"add-meal-title\" class=\"main-title\">Add Meal</h1>\n\n  <div id=\"add-meal-form-container\" class=\"form-container\">\n    <form id=\"add-meal-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"add-meal-submit\" class=\"btn btn-primary\" type=\"submit\">Add Meal</button>\n      <a id=\"add-meal-cancel\" class=\"btn btn-secondary\" href=\"{% url 'home' %}\">Cancel</a>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "edit_meal.html", "path": "calorie_tracker/templates/tracker/edit_meal.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n  <h1 id=\"edit-meal-title\" class=\"main-title\">Edit Meal</h1>\n\n  <div id=\"edit-meal-form-container\" class=\"form-container\">\n    <form id=\"edit-meal-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"edit-meal-submit\" class=\"btn btn-primary\" type=\"submit\">Save Changes</button>\n      <a id=\"edit-meal-cancel\" class=\"btn btn-secondary\" href=\"{% url 'home' %}\">Cancel</a>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "daily_summary.html", "path": "calorie_tracker/templates/tracker/daily_summary.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n  <h1 id=\"daily-summary-title\" class=\"main-title\">Daily Summary</h1>\n\n  <div id=\"daily-summary-details\" class=\"summary-details\">\n    <h2>Meals Today</h2>\n    {% if meals %}\n      <ul id=\"daily-meals-list\" class=\"meal-list\">\n        {% for meal in meals %}\n          <li id=\"daily-meal-{{ meal.id }}\" class=\"meal-item\">\n            {{ meal.food.name }} - {{ meal.meal_type }} - {{ meal.total_calories }} calories\n          </li>\n        {% endfor %}\n      </ul>\n    {% else %}\n      <p id=\"no-meals-today-message\" class=\"no-data-message\">No meals recorded for today.</p>\n    {% endif %}\n\n    <h3 id=\"total-calories-heading\" class=\"summary-heading\">Total Calories: <span id=\"total-calories-value\">{{ total_calories }}</span></h3>\n    <a id=\"back-to-home-link\" class=\"btn btn-secondary\" href=\"{% url 'home' %}\">Back to Home</a>\n  </div>\n\n{% endblock %}"}, {"file": "weekly_analysis.html", "path": "calorie_tracker/templates/tracker/weekly_analysis.html", "code": "{% extends 'tracker/base.html' %}\n{% load static %}\n\n{% block content %}\n  <h1 id=\"weekly-analysis-title\" class=\"main-title\">Weekly Analysis</h1>\n\n  <div id=\"weekly-analysis-chart-container\" class=\"chart-container\">\n    <canvas id=\"weekly-calorie-chart\"></canvas>\n  </div>\n\n  <a id=\"back-to-home-link\" class=\"btn btn-secondary\" href=\"{% url 'home' %}\">Back to Home</a>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n  <script>\n    const labels = JSON.parse('{{ labels|escapejs }}');\n    const data = JSON.parse('{{ data|escapejs }}');\n\n    const ctx = document.getElementById('weekly-calorie-chart').getContext('2d');\n    const myChart = new Chart(ctx, {\n      type: 'bar',\n      data: {\n        labels: labels,\n        datasets: [{\n          label: 'Calories Consumed',\n          data: data,\n          backgroundColor: 'rgba(54, 162, 235, 0.5)',\n          borderColor: 'rgba(54, 162, 235, 1)',\n          borderWidth: 1\n        }]\n      },\n      options: {\n        scales: {\n          y: {\n            beginAtZero: true\n          }\n        }\n      }\n    });\n  </script>\n{% endblock %}"}, {"file": "register.html", "path": "calorie_tracker/templates/tracker/register.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n  <h2 id=\"register-title\" class=\"main-title\">Register</h2>\n  <form id=\"register-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"register-submit\" class=\"btn btn-primary\" type=\"submit\">Register</button>\n    <a id=\"register-cancel\" class=\"btn btn-secondary\" href=\"{% url 'home' %}\">Cancel</a>\n  </form>\n{% endblock %}"}, {"file": "login.html", "path": "calorie_tracker/templates/tracker/login.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n  <h2 id=\"login-title\" class=\"main-title\">Login</h2>\n  <form id=\"login-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"login-submit\" class=\"btn btn-primary\" type=\"submit\">Login</button>\n  </form>\n{% endblock %}"}, {"file": "logout.html", "path": "calorie_tracker/templates/tracker/logout.html", "code": "{% extends 'tracker/base.html' %}\n\n{% block content %}\n  <h2 id=\"logout-title\" class=\"main-title\">Logout</h2>\n  <p id=\"logout-message\" class=\"logout-message\">You have been logged out.</p>\n  <a id=\"logout-home-link\" class=\"btn btn-primary\" href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "base.html", "path": "calorie_tracker/templates/tracker/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Calorie Tracker</title>\n  <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n  <link rel=\"stylesheet\" href=\"{% static 'tracker/style.css' %}\">\n</head>\n<body>\n  <nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a id=\"nav-brand\" class=\"navbar-brand\" href=\"{% url 'home' %}\">Calorie Tracker</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n      <ul class=\"navbar-nav\">\n        <li class=\"nav-item\">\n          <a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n        </li>\n        {% if user.is_authenticated %}\n          <li class=\"nav-item\">\n            <a id=\"nav-add-meal\" class=\"nav-link\" href=\"{% url 'add_meal' %}\">Add Meal</a>\n          </li>\n          <li class=\"nav-item\">\n            <a id=\"nav-logout\" class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n          </li>\n        {% else %}\n          <li class=\"nav-item\">\n            <a id=\"nav-register\" class=\"nav-link\" href=\"{% url 'register' %}\">Register</a>\n          </li>\n          <li class=\"nav-item\">\n            <a id=\"nav-login\" class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n          </li>\n        {% endif %}\n      </ul>\n    </div>\n  </nav>\n\n  <div id=\"content\" class=\"container mt-4\">\n    {% block content %}\n    {% endblock %}\n  </div>\n\n  <footer id=\"main-footer\" class=\"footer mt-5 py-3 bg-light\">\n    <div class=\"container text-center\">\n      <span id=\"footer-text\" class=\"text-muted\">Calorie Tracker App - &copy; 2023</span>\n    </div>\n  </footer>\n\n  <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n  <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n  <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "style.css", "path": "calorie_tracker/static/tracker/style.css", "code": "/* General Styles */\nbody {\n    font-family: sans-serif;\n}\n\n.main-title {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.container {\n    max-width: 960px;\n}\n\n/* Navigation Bar */\n#main-nav .navbar-brand {\n    font-weight: bold;\n}\n\n/* Meal List */\n.meal-list {\n    margin-bottom: 20px;\n}\n\n.meal-item {\n    padding: 10px;\n    border-bottom: 1px solid #eee;\n}\n\n/* Form Styles */\n.form-container {\n    max-width: 500px;\n    margin: 0 auto;\n    padding: 20px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\n/* Summary Details */\n.summary-details {\n    margin-bottom: 20px;\n}\n\n.summary-heading {\n    margin-top: 15px;\n}\n\n/* Chart Container */\n.chart-container {\n    width: 80%;\n    margin: 0 auto;\n}\n\n/* Footer */\n#main-footer {\n    text-align: center;\n}\n\n/*No Data Message */\n.no-data-message {\n  font-style: italic;\n  color: #777;\n}"}], "11": [{"file": "project_review/urls.py", "path": "project_review/project_review/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.project_list, name='project_list'),\n    path('project/<str:project_id>/', views.project_detail, name='project_detail'),\n    path('review/<str:project_id>/<str:page>/<str:function_name>/', views.review_test_code, name='review_test_code'),\n    path('update_status/<str:project_id>/<str:page>/<str:function_name>/', views.update_status, name='update_status'),\n]"}, {"file": "project_review/views.py", "path": "project_review/project_review/views.py", "code": "import json\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import JsonResponse\n\n# Load the JSON data (replace with actual data loading)\nJSON_DATA = '[{\"project_id\": \"3\", \"project_type\": \"website\", \"nl_prompt\": \"Create a website for a password generator.\", \"framework_technical_stack\": [{\"language\": \"Python\", \"technical_stack\": \"Django\"}], \"nl_checklist\": [{\"page\": \"Home\", \"required\": true, \"function\": [{\"function\": \"Display Welcome Message\", \"description\": \"Show a welcome message or introduction to the password generator.\", \"required\": false}, {\"function\": \"Navigation Button\", \"description\": \"Button to the password generator page.\", \"required\": true}]}, {\"page\": \"About\", \"required\": false, \"function\": [{\"function\": \"Description\", \"description\": \"Provide information about the purpose and functionality of the website.\", \"required\": false}]}], \"testcode\": [{\"page\": \"Home\", \"function\": [{\"function\": \"Display Welcome Message\", \"test\": \"def test_display_welcome_message(driver, test_url,swelcome_message_id):\\r\\n    driver.get(test_url)\\r\\n    welcome_message = driver.find_element(By.ID,swelcome_message_id)\\r\\n    assert welcome_message.is_displayed()\", \"parameter\": [{\"name\": \"test_url\", \"description\": \"the url for test\"}, {\"name\": \"swelcome_message_id\", \"description\": \"the id of the welcome message element\"}]}, {\"function\": \"Navigation Button\", \"test\": \"def test_navigation_button(driver, test_url,navigation_button_id, generator_id):\\r\\n    driver.get(test_url)\\r\\n    generate_button = driver.find_element(By.ID,navigation_button_id)\\r\\n    assert generate_button.is_displayed()\\r\\n    generate_button.click()\\r\\n    time.sleep(1)\\r\\n    generator = driver.find_element(By.ID,generator_id)\\r\\n    assert generator.is_displayed()\", \"parameter\": [{\"name\": \"test_url\", \"description\": \"the url for test\"}, {\"name\": \"navigation_button_id\", \"description\": \"the button id for navigation to generator\"}]}]}, {\"page\": \"About\", \"function\": [{\"function\": \"About Link\", \"test\": \"def test_about_link(driver, test_url, about_link_id):\\r\\n    driver.get(test_url)\\r\\n    about_link = driver.find_element(By.ID, about_link_id)\\r\\n    assert about_link.is_displayed()\\r\\n    about_link.click()\", \"parameter\": [{\"name\": \"test_url\", \"description\": \"the url for test\"}, {\"name\": \"about_link_id\", \"description\": \"the hyperlink id of about page in the home page\"}]}, {\"function\": \"Description\", \"test\": \"def test_description(driver, description_id):\\r\\n    description = driver.find_element(By.ID, description_id)\\r\\n    assert description.is_displayed()\", \"parameter\": [{\"name\": \"description_id\", \"description\": \"the id of the discription element\"}]}]}]}]'\nPROJECTS = json.loads(JSON_DATA)\n\ndef project_list(request):\n    return render(request, 'project_review/project_list.html', {'projects': PROJECTS})\n\n\ndef project_detail(request, project_id):\n    project = next((item for item in PROJECTS if item['project_id'] == project_id), None)\n    if project is None:\n        return render(request, 'project_review/project_not_found.html', {'project_id': project_id})\n    return render(request, 'project_review/project_detail.html', {'project': project})\n\n\ndef review_test_code(request, project_id, page, function_name):\n    project = next((item for item in PROJECTS if item['project_id'] == project_id), None)\n    if project is None:\n        return render(request, 'project_review/project_not_found.html', {'project_id': project_id})\n\n    test_code_data = None\n    for page_data in project['testcode']:\n        if page_data['page'] == page:\n            for function_data in page_data['function']:\n                if function_data['function'] == function_name:\n                    test_code_data = function_data\n                    break\n            if test_code_data:\n                break\n\n    if test_code_data is None:\n        return render(request, 'project_review/test_code_not_found.html', {'project_id': project_id, 'page': page, 'function_name': function_name})\n    \n    # Initialize status if it doesn't exist\n    if 'status' not in test_code_data:\n        test_code_data['status'] = 'Select'\n\n    return render(request, 'project_review/review_test_code.html', {\n        'project_id': project_id,\n        'page': page,\n        'function_name': function_name,\n        'test_code_data': test_code_data\n    })\n\n\ndef update_status(request, project_id, page, function_name):\n    if request.method == 'POST':\n        status = request.POST.get('status')\n\n        project = next((item for item in PROJECTS if item['project_id'] == project_id), None)\n        if project is None:\n            return JsonResponse({'status': 'error', 'message': 'Project not found'}) # Or handle error appropriately\n\n        for page_data in project['testcode']:\n            if page_data['page'] == page:\n                for function_data in page_data['function']:\n                    if function_data['function'] == function_name:\n                        function_data['status'] = status\n                        return JsonResponse({'status': 'success'})\n\n        return JsonResponse({'status': 'error', 'message': 'Test code not found'}) # Or handle error appropriately\n    else:\n        return JsonResponse({'status': 'error', 'message': 'Invalid request method'})"}, {"file": "project_review/templates/project_review/project_list.html", "path": "project_review/project_review/templates/project_review/project_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Project List</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .project-list {\n            list-style: none;\n            padding: 0;\n        }\n        .project-item {\n            border: 1px solid #ddd;\n            margin-bottom: 10px;\n            padding: 10px;\n            border-radius: 5px;\n        }\n        .project-link {\n            text-decoration: none;\n            color: #007bff;\n        }\n        .project-link:hover {\n            text-decoration: underline;\n        }\n    </style>\n</head>\n<body>\n    <h1>Project List</h1>\n    <ul class=\"project-list\">\n        {% for project in projects %}\n        <li class=\"project-item\">\n            <a class=\"project-link\" href=\"{% url 'project_detail' project.project_id %}\">Project ID: {{ project.project_id }} - {{ project.nl_prompt }}</a>\n        </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "project_review/templates/project_review/project_detail.html", "path": "project_review/project_review/templates/project_review/project_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Project Detail</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .project-details {\n            border: 1px solid #ddd;\n            padding: 15px;\n            border-radius: 5px;\n        }\n        .detail-item {\n            margin-bottom: 10px;\n        }\n        .review-link {\n            display: inline-block;\n            padding: 8px 12px;\n            background-color: #007bff;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n            margin-top: 10px;\n        }\n        .review-link:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <h1>Project Detail</h1>\n    <div class=\"project-details\">\n        <div class=\"detail-item\"><strong>Project ID:</strong> {{ project.project_id }}</div>\n        <div class=\"detail-item\"><strong>Project Type:</strong> {{ project.project_type }}</div>\n        <div class=\"detail-item\"><strong>Prompt:</strong> {{ project.nl_prompt }}</div>\n\n        <h2>Test Code Review</h2>\n        {% for page in project.testcode %}\n            <h3>Page: {{ page.page }}</h3>\n            {% for function in page.function %}\n                <p>\n                    Function: {{ function.function }} - \n                    <a class=\"review-link\" href=\"{% url 'review_test_code' project.project_id page.page function.function %}\">Review Test Code</a>\n                </p>\n            {% endfor %}\n        {% endfor %}\n    </div>\n    <a href=\"{% url 'project_list' %}\">Back to Project List</a>\n</body>\n</html>"}, {"file": "project_review/templates/project_review/review_test_code.html", "path": "project_review/project_review/templates/project_review/review_test_code.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Review Test Code</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .review-container {\n            border: 1px solid #ddd;\n            padding: 15px;\n            border-radius: 5px;\n        }\n        .code-block {\n            background-color: #f5f5f5;\n            padding: 10px;\n            border-radius: 5px;\n            white-space: pre-wrap; /* Important for preserving formatting */\n            overflow-x: auto;    /* Add horizontal scroll if needed */\n        }\n        .status-form {\n            margin-top: 10px;\n        }\n        .status-select {\n            padding: 5px;\n            border-radius: 3px;\n            border: 1px solid #ccc;\n        }\n        .update-button {\n            padding: 8px 12px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        .update-button:hover {\n            background-color: #218838;\n        }\n    </style>\n</head>\n<body>\n    <h1>Review Test Code</h1>\n    <div class=\"review-container\">\n        <h2>Project ID: {{ project_id }}</h2>\n        <h3>Page: {{ page }}</h3>\n        <h3>Function: {{ function_name }}</h3>\n\n        <p><strong>Test Code:</strong></p>\n        <div class=\"code-block\">\n            {{ test_code_data.test }}\n        </div>\n\n        <form class=\"status-form\" method=\"post\" action=\"{% url 'update_status' project_id page function_name %}\">\n            {% csrf_token %}\n            <label for=\"status\">Status:</label>\n            <select class=\"status-select\" name=\"status\" id=\"status\">\n                <option value=\"Select\" {% if test_code_data.status == 'Select' %}selected{% endif %}>Select</option>\n                <option value=\"Pass\" {% if test_code_data.status == 'Pass' %}selected{% endif %}>Pass</option>\n                <option value=\"Fail\" {% if test_code_data.status == 'Fail' %}selected{% endif %}>Fail</option>\n            </select>\n            <button class=\"update-button\" type=\"submit\">Update Status</button>\n        </form>\n    </div>\n    <a href=\"{% url 'project_detail' project_id %}\">Back to Project Detail</a>\n\n    <script>\n    // Optional: You can add JavaScript here to improve the user experience\n    // For example, you can use AJAX to update the status without reloading the page.\n    </script>\n</body>\n</html>"}, {"file": "project_review/templates/project_review/project_not_found.html", "path": "project_review/project_review/templates/project_review/project_not_found.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Project Not Found</title>\n</head>\n<body>\n    <h1>Project Not Found</h1>\n    <p>Project with ID {{ project_id }} not found.</p>\n    <a href=\"{% url 'project_list' %}\">Back to Project List</a>\n</body>\n</html>"}, {"file": "project_review/templates/project_review/test_code_not_found.html", "path": "project_review/project_review/templates/project_review/test_code_not_found.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Test Code Not Found</title>\n</head>\n<body>\n    <h1>Test Code Not Found</h1>\n    <p>Test code for Project ID {{ project_id }}, Page {{ page }}, Function {{ function_name }} not found.</p>\n    <a href=\"{% url 'project_detail' project_id %}\">Back to Project Detail</a>\n</body>\n</html>"}, {"file": "project_review/models.py", "path": "project_review/project_review/models.py", "code": "# models.py (You might not need this if you're directly loading from JSON)\n# However, a model might be useful for more complex data handling later\n\n# from django.db import models\n\n# class Project(models.Model):\n#     project_id = models.CharField(max_length=255, primary_key=True)\n#     project_type = models.CharField(max_length=255)\n#     nl_prompt = models.TextField()\n#     # ... (add other fields as needed)\n\n#     def __str__(self):\n#         return self.project_id"}, {"file": "project_review/admin.py", "path": "project_review/project_review/admin.py", "code": "# admin.py (Only if you're using Django models)\n# from django.contrib import admin\n# from .models import Project\n\n# admin.site.register(Project)"}, {"file": "project_review/apps.py", "path": "project_review/project_review/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ProjectReviewConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'project_review'"}, {"file": "project_review/project_review/__init__.py", "path": "project_review/project_review/project_review/__init__.py", "code": "default_app_config = 'project_review.apps.ProjectReviewConfig'"}, {"file": "project_review/project_review/settings.py", "path": "project_review/project_review/project_review/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'project_review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_review.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_review.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Define STATICFILES_DIRS"}, {"file": "project_review/project_review/wsgi.py", "path": "project_review/project_review/project_review/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_review.settings')\n\napplication = get_wsgi_application()"}, {"file": "project_review/static/style.css", "path": "project_review/project_review/static/style.css", "code": "/* Some example CSS, can be extend */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\n/* Add more styles for the elements */"}, {"file": "project_review/project_review/urls.py", "path": "project_review/project_review/project_review/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('project_review.urls')),\n]"}, {"file": "project_review/requirements.txt", "path": "project_review/requirements.txt", "code": "Django>=3.0,<4.0  # Or the Django Version You Wish\n# Add other dependencies as needed (e.g., requests, beautifulsoup4)"}], "14": [{"file": "manage.py", "path": "helloworld/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "helloworld/helloworld/__init__.py", "code": ""}, {"file": "settings.py", "path": "helloworld/helloworld/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here' # Replace with a real secret key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'helloworld.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'helloworld.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "helloworld/helloworld/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello.urls')), # Include the 'hello' app's URLs\n]"}, {"file": "wsgi.py", "path": "helloworld/helloworld/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'helloworld.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "helloworld/hello/__init__.py", "code": ""}, {"file": "admin.py", "path": "helloworld/hello/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "helloworld/hello/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloConfig(AppConfig):\n    name = 'hello'"}, {"file": "models.py", "path": "helloworld/hello/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "tests.py", "path": "helloworld/hello/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "views.py", "path": "helloworld/hello/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'hello/hello.html')"}, {"file": "urls.py", "path": "helloworld/hello/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "hello.html", "path": "helloworld/hello/templates/hello/hello.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World</title>\n</head>\n<body>\n    <h1 id=\"main-heading\" class=\"main-title\">Hello, world!</h1>\n</body>\n</html>"}], "15": [{"file": "manage.py", "path": "jump_to_hello/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jump_to_hello.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "jump_to_hello/", "code": ""}, {"file": "settings.py", "path": "jump_to_hello/", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'jump_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'jump_to_hello.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'jump_to_hello.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "jump_to_hello/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('jump_app.urls')),\n]"}, {"file": "wsgi.py", "path": "jump_to_hello/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'jump_to_hello.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "jump_to_hello/jump_app/", "code": ""}, {"file": "apps.py", "path": "jump_to_hello/jump_app/", "code": "from django.apps import AppConfig\n\n\nclass JumpAppConfig(AppConfig):\n    name = 'jump_app'"}, {"file": "models.py", "path": "jump_to_hello/jump_app/", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "jump_to_hello/jump_app/", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "views.py", "path": "jump_to_hello/jump_app/", "code": "from django.shortcuts import render, redirect\n\ndef index(request):\n    return render(request, 'jump_app/index.html')\n\ndef helloworld(request):\n    return render(request, 'jump_app/helloworld.html')\n"}, {"file": "urls.py", "path": "jump_to_hello/jump_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "index.html", "path": "jump_to_hello/jump_app/templates/jump_app/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Jump to Hello World</title>\n</head>\n<body>\n  <div id=\"main-container\" class=\"container\">\n    <button id=\"jump-button\" class=\"btn btn-primary\" onclick=\"window.location.href='{% url 'helloworld' %}'\">Jump to Hello World!</button>\n  </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "jump_to_hello/jump_app/templates/jump_app/", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World!</title>\n</head>\n<body>\n  <div id=\"hello-container\" class=\"container\">\n    <h1 id=\"hello-title\" class=\"title\">Hello, World!</h1>\n  </div>\n</body>\n</html>"}], "16": [{"file": "create_subject_table.bat", "path": "create_subject_table.bat", "code": "@echo off\r\n\r\nREM Check if Python is installed\r\nwhere python >nul 2>&1\r\nif %errorlevel% neq 0 (\r\n    echo Python is not installed. Please install Python and ensure it's in your PATH.\r\n    pause\r\n    exit /b 1\r\n)\r\n\r\nREM Check if required Python packages are installed\rnpython -c \"try:\r\n    import pandas\r\n    import openpyxl\r\nexcept ImportError:\r\n    print('Required Python packages (pandas, openpyxl) are not installed.')\r\n    print('Attempting to install them using pip...')\r\n    import subprocess\r\n    try:\r\n        subprocess.check_call(['python', '-m', 'pip', 'install', 'pandas', 'openpyxl'])\r\n        print('Packages installed successfully.')\r\n    except subprocess.CalledProcessError as e:\r\n        print(f'Error installing packages: {e}')\r\n        print('Please install pandas and openpyxl manually using: pip install pandas openpyxl')\r\n        exit()\r\n\r\n\" > nul 2>&1\r\nif %errorlevel% neq 0 (\r\n    echo Required Python packages (pandas, openpyxl) installation failed.\r\n    pause\r\n    exit /b 1\r\n)\r\n\r\nREM Run the Python script to create the subject table\rnpython subject_table_generator.py\r\n\r\necho Subject table created successfully!  Check 'Subject_Table.xlsx'.\r\npause\r\nexit /b 0"}, {"file": "subject_table_generator.py", "path": "subject_table_generator.py", "code": "import pandas as pd\n\n# Input and output file names\ninput_file = 'Spring Semester Subjects.xlsx'\noutput_file = 'Subject_Table.xlsx'\n\n# Read the Excel file into a pandas DataFrame\ntry:\n    df = pd.read_excel(input_file)\nexcept FileNotFoundError:\n    print(f\"Error: Input file '{input_file}' not found.\")\n    exit()\n\n# Define the weekdays and time periods for the table\nweekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\ntime_periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n\n# Create an empty DataFrame to store the subject table\nsubject_table = pd.DataFrame(index=time_periods, columns=weekdays)\nsubject_table = subject_table.fillna('') # Initialize with empty strings\n\n# Iterate through the rows of the input DataFrame and populate the subject table\nfor index, row in df.iterrows():\n    weekday = row['Weekday']\n    time = row['Time']\n    subject_name = row['Name']\n\n    # Update the subject table with the subject name\n    subject_table.loc[time, weekday] = subject_name\n\n# Save the subject table to a new Excel file\nsubject_table.to_excel(output_file)\n\nprint(f'Subject table generated and saved to {output_file}')"}, {"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": "Binary Excel File Content (This cannot be represented as a string in JSON).  You will need to create a sample Excel file named 'Spring Semester Subjects.xlsx' in the same directory as the script with the following data structure:\n\n| # | Name          | Weekday   | Time          |\n|---|---------------|-----------|---------------|\n| 1 | Math 101      | Monday    | First period  |\n| 2 | English 101   | Tuesday   | Second period |\n| 3 | History 101   | Wednesday | Third period  |\n| 4 | Science 101   | Thursday  | Fourth period |\n| 5 | Art 101       | Friday    | First period  |\n| 6 | Music 101     | Monday    | Second period |\n| 7 | PE 101        | Tuesday   | Third period  |\n| 8 | Computer 101  | Wednesday | Fourth period |\n| 9 | Chemistry 101 | Thursday  | First period  |\n| 10| Biology 101   | Friday    | Second period |"}], "17": [{"file": "run.bat", "path": "./run.bat", "code": "@echo off\nREM Check if Python is installed\nwhere python >nul 2>&1\nif %errorlevel% neq 0 (\n  echo Python is not installed. Please install Python and add it to your PATH.\n  pause\n  exit /b 1\n)\n\nREM Install required packages (pandas, statsmodels, openpyxl) - if they are not installed\npython -m pip show pandas >nul 2>&1\nif %errorlevel% neq 0 (\n  echo Installing pandas...\n  python -m pip install pandas\n)\n\npython -m pip show statsmodels >nul 2>&1\nif %errorlevel% neq 0 (\n  echo Installing statsmodels...\n  python -m pip install statsmodels\n)\n\npython -m pip show openpyxl >nul 2>&1\nif %errorlevel% neq 0 (\n  echo Installing openpyxl...\n  python -m pip install openpyxl\n)\n\nREM Run the Python script\npython main.py\n\npause"}, {"file": "main.py", "path": "./main.py", "code": "import pandas as pd\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import logit\n\n# Load the dataset\ndata = pd.read_excel(\"Gamedata.xlsx\")\n\n# Lag the 'result' variable by one period\ndata['result_lagged'] = data['result'].shift(1)\n\n# Drop the first row (due to the NaN introduced by the lag)\ndata = data.dropna()\n\n# Define the independent variables (all columns except 'result' and 'result_lagged')\nindependent_vars = data.columns.difference(['result', 'result_lagged'])\n\n# Create the formula for the logistic regression model\nformula = 'result ~ ' + ' + '.join(independent_vars)\n\n# Fit the logistic regression model\nmodel = logit(formula, data=data).fit()\n\n# Get the summary of the model\nsummary = model.summary()\n\n# Save the summary to an Excel file\nwith pd.ExcelWriter(\"Logistic.xlsx\") as writer:\n    summary_df = pd.DataFrame(summary.tables[1])  # Extract the coefficients table\n    summary_df.to_excel(writer, sheet_name='Coefficients', index=False)\n\n    # Optionally, add more model information to other sheets\n    # For example, you could add the model parameters to another sheet\n    # params_df = pd.DataFrame(model.params, columns=['Value'])\n    # params_df.to_excel(writer, sheet_name='Parameters')\n\n\nprint(\"Logistic regression model summary saved to Logistic.xlsx\")\n"}, {"file": "Gamedata.xlsx", "path": "./Gamedata.xlsx", "code": "Binary Excel file - Represents dummy dataset. Create an excel file with the name \"Gamedata.xlsx\" in the same directory. Its content should mimic game data, where 'result' is a binary outcome (e.g., 0 or 1), and other columns are numerical features. Example: Column 'result', 'feature1', 'feature2', 'feature3', 'feature4'. Populate this Excel file with at least 10 rows of dummy data to ensure the python script runs successfully. Make sure no sheets other than 'Sheet1' exists. Ensure sheetname 'Sheet1' is consistent. Note: this file should *NOT* be base64 encoded. This description suffices its content. Excel file must be present for code to function."}], "18": [{"file": "bashcrawl.py", "path": "./bashcrawl.py", "code": "import random\nimport os\nimport time\n\nclass Entity:\n    def __init__(self, name, hp, attack):\n        self.name = name\n        self.hp = hp\n        self.max_hp = hp\n        self.attack = attack\n\n    def is_alive(self):\n        return self.hp > 0\n\n    def take_damage(self, damage):\n        self.hp -= damage\n        if self.hp < 0:\n            self.hp = 0\n        print(f\"{self.name} takes {damage} damage!\")\n\n    def attack_target(self, target):\n        damage = random.randint(self.attack // 2, self.attack)\n        print(f\"{self.name} attacks {target.name} for {damage} damage!\")\n        target.take_damage(damage)\n\n    def heal(self, amount):\n        self.hp = min(self.max_hp, self.hp + amount)\n        print(f\"{self.name} heals for {amount} HP.\")\n\n\nclass Player(Entity):\n    def __init__(self, name):\n        super().__init__(name, 100, 15)\n        self.potions = 3\n\n    def use_potion(self):\n        if self.potions > 0:\n            self.heal(30)\n            self.potions -= 1\n            print(f\"You used a potion. You have {self.potions} potions left.\")\n        else:\n            print(\"You have no potions left!\")\n\n\nclass Monster(Entity):\n    def __init__(self, name, hp, attack):\n        super().__init__(name, hp, attack)\n\n\ndef clear_screen():\n    os.system('cls' if os.name == 'nt' else 'clear')\n\ndef encounter_monster(player):\n    monster_names = [\"Goblin\", \"Orc\", \"Troll\", \"Slime\"]\n    monster_name = random.choice(monster_names)\n    monster_hp = random.randint(30, 60)\n    monster_attack = random.randint(5, 12)\n    monster = Monster(monster_name, monster_hp, monster_attack)\n\n    print(f\"You encounter a wild {monster.name}!\")\n\n    while player.is_alive() and monster.is_alive():\n        print(f\"\\n{player.name}: HP: {player.hp}/{player.max_hp}, Potions: {player.potions}\")\n        print(f\"{monster.name}: HP: {monster.hp}/{monster.max_hp}\\n\")\n\n        print(\"1. Attack\")\n        print(\"2. Use Potion\")\n        print(\"3. Run Away\")\n\n        choice = input(\"> \")\n\n        if choice == '1':\n            player.attack_target(monster)\n            if monster.is_alive():\n                monster.attack_target(player)\n        elif choice == '2':\n            player.use_potion()\n        elif choice == '3':\n            print(\"You run away!\")\n            return True  # Player ran away\n        else:\n            print(\"Invalid choice.\")\n\n        time.sleep(1)\n\n        if not player.is_alive():\n            print(\"You have been defeated!\")\n            return False  # Player died\n        if not monster.is_alive():\n            print(f\"You defeated the {monster.name}!\")\n            return True  # Player won\n\n    return False\n\ndef main():\n    clear_screen()\n    print(\"Welcome to Bashcrawl!\")\n    player_name = input(\"Enter your name: \")\n    player = Player(player_name)\n\n    print(f\"\\nWelcome, {player.name}! Prepare for your adventure.\\n\")\n\n    while player.is_alive():\n        print(\"\\nWhat would you like to do?\")\n        print(\"1. Explore\")\n        print(\"2. Check Stats\")\n        print(\"3. Quit\")\n\n        choice = input(\"> \")\n\n        if choice == '1':\n            clear_screen()\n            success = encounter_monster(player)\n            if not success and not player.is_alive():\n                break # Player died\n\n        elif choice == '2':\n            clear_screen()\n            print(f\"{player.name}: HP: {player.hp}/{player.max_hp}, Attack: {player.attack}, Potions: {player.potions}\")\n        elif choice == '3':\n            print(\"Thanks for playing!\")\n            break\n        else:\n            print(\"Invalid choice.\")\n\n    print(\"Game Over!\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "run_game.sh", "path": "./run_game.sh", "code": "#!/bin/bash\n\n# Run the python script\npython3 bashcrawl.py"}], "19": [{"file": "death_histogram.bat", "path": "death_histogram.bat", "code": "@echo off\nREM This batch script requires Python and the pandas library to be installed.\nREM Install pandas: pip install pandas\n\npython death_histogram.py\n\npause"}, {"file": "death_histogram.py", "path": "death_histogram.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport os\n\n# Input CSV file name\nCSV_FILE = 'Deathlist.csv'\n\n# Field name for the death date\nDATE_COLUMN = 'Date of death'\n\n# Output histogram image file name\nOUTPUT_IMAGE = 'weekly_death_histogram.png'\n\n\n# Check if the CSV file exists\nif not os.path.exists(CSV_FILE):\n    print(f\"Error: CSV file '{CSV_FILE}' not found.\")\n    exit()\n\n\ntry:\n    # Read the CSV file into a pandas DataFrame\n    df = pd.read_csv(CSV_FILE)\n\n    # Convert the 'Date of death' column to datetime objects\n    df[DATE_COLUMN] = pd.to_datetime(df[DATE_COLUMN])\n\n    # Resample the data to weekly frequency and count the number of deaths per week\n    weekly_deaths = df[DATE_COLUMN].resample('W').count()\n\n    # Create the histogram\n    plt.figure(figsize=(12, 6))\n    plt.bar(weekly_deaths.index, weekly_deaths.values, width=6, color='skyblue') # Adjust width for better visualization\n    plt.xlabel('Week', fontsize=12, labelpad=10, color='#333')  # Add x-axis label\n    plt.ylabel('Number of Deaths', fontsize=12, labelpad=10, color='#333') # Add y-axis label\n    plt.title('Weekly Death Histogram', fontsize=16, fontweight='bold', color='#222') # Add title\n    plt.xticks(rotation=45, ha='right', fontsize=10) # Rotate x-axis labels\n    plt.yticks(fontsize=10)\n    plt.grid(axis='y', alpha=0.5) # Add a subtle grid\n    plt.tight_layout()\n\n    # Save the histogram to a file\n    plt.savefig(OUTPUT_IMAGE)\n    plt.close() # Close the plot to free up memory\n\n    print(f\"Weekly death histogram saved to '{OUTPUT_IMAGE}'\")\n\nexcept FileNotFoundError:\n    print(f\"Error: The file '{CSV_FILE}' was not found.\")\nexcept pd.errors.ParserError:\n    print(f\"Error: Could not parse the CSV file.  Please ensure the file is properly formatted.\")\nexcept KeyError:\n    print(f\"Error: The column '{DATE_COLUMN}' was not found in the CSV file. Please check the column name.\")\nexcept Exception as e:\n    print(f\"An unexpected error occurred: {e}\")\n"}, {"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death\n2023-01-01\n2023-01-03\n2023-01-05\n2023-01-08\n2023-01-10\n2023-01-12\n2023-01-15\n2023-01-17\n2023-01-19\n2023-01-22\n2023-01-24\n2023-01-26\n2023-01-29\n2023-01-31\n2023-02-02\n2023-02-05\n2023-02-07\n2023-02-09\n2023-02-12\n2023-02-14\n2023-02-16\n2023-02-19\n2023-02-21\n2023-02-23\n2023-02-26\n2023-02-28\n2023-03-02\n2023-03-05\n2023-03-07\n2023-03-09"}]}