{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# No model needed for a simple calculator like this, but kept for framework completeness.\n# You could potentially store BMI calculation history here if needed.\n\nclass BMICalculation(models.Model):\n    height = models.FloatField(blank=True, null=True)\n    weight = models.FloatField(blank=True, null=True)\n    bmi = models.FloatField(blank=True, null=True)\n    interpretation = models.CharField(max_length=255, blank=True, null=True)\n    unit_system = models.CharField(max_length=20, blank=True, null=True)  # e.g., 'metric' or 'imperial'\n\n    def __str__(self):\n        return f'BMI: {self.bmi}, Interpretation: {self.interpretation}'"}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\nfrom django.core.validators import MinValueValidator\n\nclass BMIForm(forms.Form):\n    height_feet = forms.IntegerField(required=False, validators=[MinValueValidator(0)], label='Height (Feet)')\n    height_inches = forms.FloatField(required=False, validators=[MinValueValidator(0)], label='Height (Inches)')\n    height_cm = forms.FloatField(required=False, validators=[MinValueValidator(0)], label='Height (cm)')\n\n    weight_lbs = forms.FloatField(required=False, validators=[MinValueValidator(0)], label='Weight (lbs)')\n    weight_kg = forms.FloatField(required=False, validators=[MinValueValidator(0)], label='Weight (kg)')\n\n    unit_system = forms.ChoiceField(choices=[('imperial', 'Feet/Inches & Pounds'), ('metric', 'Centimeters & Kilograms')], label='Unit System')\n\n    def clean(self):\n        cleaned_data = super().clean()\n        unit_system = cleaned_data.get('unit_system')\n\n        if unit_system == 'imperial':\n            if not (cleaned_data.get('height_feet') is not None and cleaned_data.get('weight_lbs') is not None and (cleaned_data.get('height_feet') > 0 or cleaned_data.get('height_inches')>0) and cleaned_data.get('weight_lbs') > 0):\n                raise forms.ValidationError('Please enter height (feet/inches) and weight (lbs).')\n\n        elif unit_system == 'metric':\n            if not (cleaned_data.get('height_cm') is not None and cleaned_data.get('weight_kg') is not None and cleaned_data.get('height_cm') > 0 and cleaned_data.get('weight_kg') > 0):\n                raise forms.ValidationError('Please enter height (cm) and weight (kg).')\n\n        return cleaned_data"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMIForm\n\ndef calculate_bmi(request):\n    bmi = None\n    interpretation = None\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            unit_system = form.cleaned_data['unit_system']\n\n            if unit_system == 'imperial':\n                height_feet = form.cleaned_data['height_feet']\n                height_inches = form.cleaned_data['height_inches']\n                weight_lbs = form.cleaned_data['weight_lbs']\n\n                height_inches_total = (height_feet * 12) + height_inches\n                height_meters = height_inches_total * 0.0254\n                weight_kg = weight_lbs * 0.453592\n\n            elif unit_system == 'metric':\n                height_cm = form.cleaned_data['height_cm']\n                weight_kg = form.cleaned_data['weight_kg']\n                height_meters = height_cm / 100\n\n            try:\n                bmi = weight_kg / (height_meters ** 2)\n            except ZeroDivisionError:\n                bmi = None  # Handle potential zero division error\n                interpretation = 'Invalid input: Height cannot be zero.'\n\n            if bmi:\n                if bmi < 18.5:\n                    interpretation = 'Underweight'\n                elif 18.5 <= bmi < 25:\n                    interpretation = 'Normal weight'\n                elif 25 <= bmi < 30:\n                    interpretation = 'Overweight'\n                else:\n                    interpretation = 'Obese'\n    else:\n        form = BMIForm()\n\n    return render(request, 'bmi_calculator/bmi_calculator.html', {'form': form, 'bmi': bmi, 'interpretation': interpretation})"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .calculator-container {\n            max-width: 500px;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .form-group {\n            margin-bottom: 10px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"], select {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        .button-container {\n            margin-top: 20px;\n        }\n        .button {\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .calculate-button {\n            background-color: #4CAF50;\n            color: white;\n        }\n        .reset-button {\n            background-color: #f44336;\n            color: white;\n        }\n        .result-container {\n            margin-top: 20px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"calculator-container\" id=\"calculatorContainer\">\n        <h1 id=\"mainHeading\">BMI Calculator</h1>\n        <form method=\"post\" id=\"bmiForm\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"formGroup\">\n                {{ form.as_p }}\n            </div>\n            <div class=\"button-container\" id=\"buttonContainer\">\n                <button type=\"submit\" class=\"button calculate-button\" id=\"calculateButton\">Calculate BMI</button>\n                <button type=\"reset\" class=\"button reset-button\" id=\"resetButton\">Reset</button>\n            </div>\n        </form>\n\n        {% if bmi %}\n            <div class=\"result-container\" id=\"resultContainer\">\n                <h2 id=\"bmiResult\">BMI Result: {{ bmi|floatformat:2 }}</h2>\n                <p id=\"bmiInterpretation\">Interpretation: {{ interpretation }}</p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "apps.py", "path": "bmi_calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BmiCalculatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bmi_calculator'"}, {"file": "settings.py", "path": "bmi_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases/\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators/\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "bmi_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('bmi_calculator/', include('bmi_calculator.urls')),\n    path('', include('bmi_calculator.urls')),\n]"}, {"file": "wsgi.py", "path": "bmi_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}]}