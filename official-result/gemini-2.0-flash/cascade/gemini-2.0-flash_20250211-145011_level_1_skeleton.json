{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\nclass BMIResult(models.Model):\n    height_cm = models.FloatField(null=True, blank=True)\n    height_ft = models.IntegerField(null=True, blank=True)\n    height_in = models.FloatField(null=True, blank=True)\n    weight_kg = models.FloatField(null=True, blank=True)\n    weight_lb = models.FloatField(null=True, blank=True)\n    bmi = models.FloatField(null=True, blank=True)\n    category = models.CharField(max_length=50, blank=True, null=True)\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'BMI Result: {self.bmi} - {self.category}'"}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMIForm(forms.Form):\n    unit_system = forms.ChoiceField(choices=[('metric', 'Metric'), ('imperial', 'Imperial')], label='Unit System')\n    height_cm = forms.FloatField(label='Height (cm)', required=False)\n    height_ft = forms.IntegerField(label='Height (feet)', required=False)\n    height_in = forms.FloatField(label='Height (inches)', required=False)\n    weight_kg = forms.FloatField(label='Weight (kg)', required=False)\n    weight_lb = forms.FloatField(label='Weight (lbs)', required=False)\n\n    def clean(self):\n        cleaned_data = super().clean()\n        unit_system = cleaned_data.get('unit_system')\n        height_cm = cleaned_data.get('height_cm')\n        height_ft = cleaned_data.get('height_ft')\n        height_in = cleaned_data.get('height_in')\n        weight_kg = cleaned_data.get('weight_kg')\n        weight_lb = cleaned_data.get('weight_lb')\n\n        if unit_system == 'metric':\n            if not height_cm:\n                self.add_error('height_cm', 'This field is required when using Metric units.')\n            if not weight_kg:\n                self.add_error('weight_kg', 'This field is required when using Metric units.')\n            if height_ft or height_in or weight_lb:\n                raise forms.ValidationError(\"Imperial units detected in Metric mode.\")\n        elif unit_system == 'imperial':\n            if not height_ft:\n                self.add_error('height_ft', 'This field is required when using Imperial units.')\n            if not height_in:\n                self.add_error('height_in', 'This field is required when using Imperial units.')\n            if not weight_lb:\n                self.add_error('weight_lb', 'This field is required when using Imperial units.')\n            if height_cm or weight_kg:\n                raise forms.ValidationError(\"Metric units detected in Imperial mode.\")\n        else:\n            raise forms.ValidationError(\"Invalid unit system selected.\")\n\n        return cleaned_data"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMIForm\nfrom .models import BMIResult\n\ndef calculate_bmi(height_cm, weight_kg):\n    height_m = height_cm / 100\n    bmi = weight_kg / (height_m ** 2)\n    return bmi\n\ndef get_bmi_category(bmi):\n    if bmi < 18.5:\n        return 'Underweight'\n    elif 18.5 <= bmi < 25:\n        return 'Normal Weight'\n    elif 25 <= bmi < 30:\n        return 'Overweight'\n    else:\n        return 'Obese'\n\n\ndef bmi_calculator_view(request):\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            unit_system = form.cleaned_data['unit_system']\n            if unit_system == 'metric':\n                height_cm = form.cleaned_data['height_cm']\n                weight_kg = form.cleaned_data['weight_kg']\n            else:\n                height_ft = form.cleaned_data['height_ft']\n                height_in = form.cleaned_data['height_in']\n                weight_lb = form.cleaned_data['weight_lb']\n                # Convert Imperial to Metric for calculation\n                height_cm = ((height_ft * 12) + height_in) * 2.54\n                weight_kg = weight_lb * 0.453592\n\n            bmi = calculate_bmi(height_cm, weight_kg)\n            category = get_bmi_category(bmi)\n\n            BMIResult.objects.create(\n                height_cm=height_cm,\n                weight_kg=weight_kg,\n                bmi=bmi,\n                category=category\n            )\n\n            return render(request, 'bmi_calculator/bmi_result.html', {'bmi': bmi, 'category': category})\n    else:\n        form = BMIForm()\n    return render(request, 'bmi_calculator/bmi_calculator.html', {'form': form})"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator_view, name='bmi_calculator'),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'bmi_calculator' to INSTALLED_APPS\nINSTALLED_APPS = [\n    ...\n    'bmi_calculator',\n]\n\n# Optionally configure template directory (if not default)\nTEMPLATES = [\n    {\n        ...\n        'DIRS': [BASE_DIR / 'templates'], # Ensure this is correct\n        ...\n    },\n]\n"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}BMI Calculator{% endblock %}</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"], select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #3e8e41;\n        }\n        .errorlist {\n            color: red;\n            margin-bottom: 10px;\n        }\n        .bmi-result {\n          margin-top: 20px;\n          font-size: 1.2em;\n          font-weight: bold;\n        }\n        .bmi-chart {\n            margin-top: 20px;\n            border: 1px solid #ddd;\n            padding: 10px;\n        }\n        .bmi-chart h3 {\n            margin-top: 0;\n        }\n        /* Responsive Design (Example) */\n        @media (max-width: 768px) {\n            .container {\n                width: 95%;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>\n"}, {"file": "bmi_calculator.html", "path": "templates/bmi_calculator/bmi_calculator.html", "code": "{% extends 'base.html' %}\n\n{% block title %}BMI Calculator{% endblock %}\n\n{% block content %}\n    <h1>BMI Calculator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Calculate BMI</button>\n    </form>\n{% endblock %}"}, {"file": "bmi_result.html", "path": "templates/bmi_calculator/bmi_result.html", "code": "{% extends 'base.html' %}\n\n{% block title %}BMI Result{% endblock %}\n\n{% block content %}\n    <h1>BMI Result</h1>\n    <div class=\"bmi-result\">\n        <p>Your BMI is: {{ bmi|floatformat:2 }}</p>\n        <p>Category: {{ category }}</p>\n    </div>\n\n    <div class=\"bmi-chart\">\n        <h3>BMI Categories</h3>\n        <p>Underweight: BMI less than 18.5</p>\n        <p>Normal Weight: BMI between 18.5 and 24.9</p>\n        <p>Overweight: BMI between 25 and 29.9</p>\n        <p>Obese: BMI 30 or greater</p>\n    </div>\n    <a href=\"{% url 'bmi_calculator' %}\">Calculate Again</a>\n{% endblock %}"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass ExchangeRate(models.Model):\n    from_currency = models.CharField(max_length=3)\n    to_currency = models.CharField(max_length=3)\n    rate = models.DecimalField(max_digits=10, decimal_places=6)\n    last_updated = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f'{self.from_currency} to {self.to_currency}: {self.rate}'"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import ExchangeRate\nimport json\n\ndef index(request):\n    # Implement logic to fetch currencies and initial data\n    return render(request, 'currency_converter/index.html', {})\n\ndef convert(request):\n    if request.method == 'POST':\n        data = json.loads(request.body.decode('utf-8'))\n        from_currency = data.get('from_currency')\n        to_currency = data.get('to_currency')\n        amount = float(data.get('amount'))\n\n        try:\n            exchange_rate = ExchangeRate.objects.get(\n                from_currency=from_currency, to_currency=to_currency\n            )\n            converted_amount = amount * exchange_rate.rate\n            last_updated = exchange_rate.last_updated\n            rate = exchange_rate.rate\n\n            return JsonResponse({\n                'converted_amount': converted_amount,\n                'rate': rate,\n                'last_updated': last_updated\n            })\n        except ExchangeRate.DoesNotExist:\n            return JsonResponse({'error': 'Exchange rate not found'}, status=404)\n    else:\n        return JsonResponse({'error': 'Invalid request'}, status=400)"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('convert/', views.convert, name='convert'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# No forms needed for a simple AJAX-based implementation\n# Add forms for settings page if needed\n"}, {"file": "templates/currency_converter/index.html", "path": "currency_converter/templates/currency_converter/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n    <script>\n        // JavaScript to handle currency conversion\n        async function convertCurrency() {\n            const fromCurrency = document.getElementById('fromCurrency').value;\n            const toCurrency = document.getElementById('toCurrency').value;\n            const amount = document.getElementById('amount').value;\n\n            const response = await fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: JSON.stringify({\n                    from_currency: fromCurrency,\n                    to_currency: toCurrency,\n                    amount: amount\n                })\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                document.getElementById('convertedAmount').innerText = data.converted_amount;\n                document.getElementById('rate').innerText = data.rate;\n                document.getElementById('lastUpdated').innerText = data.last_updated;\n            } else {\n                alert(data.error);\n            }\n        }\n    </script>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n\n    <div>\n        <label for=\"fromCurrency\">From Currency:</label>\n        <select id=\"fromCurrency\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n            <!-- Add more currencies -->\n        </select>\n    </div>\n\n    <div>\n        <label for=\"toCurrency\">To Currency:</label>\n        <select id=\"toCurrency\">\n            <option value=\"EUR\">EUR</option>\n            <option value=\"USD\">USD</option>\n            <option value=\"GBP\">GBP</option>\n            <!-- Add more currencies -->\n        </select>\n    </div>\n\n    <div>\n        <label for=\"amount\">Amount:</label>\n        <input type=\"number\" id=\"amount\" value=\"1\">\n    </div>\n\n    <button onclick=\"convertCurrency()\">Convert</button>\n\n    <div>\n        <h2>Conversion Result:</h2>\n        <p>Converted Amount: <span id=\"convertedAmount\"></span></p>\n        <p>Exchange Rate: <span id=\"rate\"></span></p>\n        <p>Last Updated: <span id=\"lastUpdated\"></span></p>\n    </div>\n\n</body>\n</html>"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import ExchangeRate\n\nadmin.site.register(ExchangeRate)"}], "3": [{"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# Example model (optional, if you want to store settings in a database)\n# class UserSettings(models.Model):\n#     user = models.ForeignKey(User, on_delete=models.CASCADE)\n#     default_password_length = models.IntegerField(default=12)\n#     include_uppercase = models.BooleanField(default=True)\n#     include_lowercase = models.BooleanField(default=True)\n#     include_numbers = models.BooleanField(default=True)\n#     include_symbols = models.BooleanField(default=True)\n\n#     def __str__(self):\n#         return f'Settings for {self.user.username}'"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nimport secrets\nimport string\nimport json\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\n\n\ndef home(request):\n    return render(request, 'password_generator/home.html')\n\ndef about(request):\n    return render(request, 'password_generator/about.html')\n\ndef settings(request):\n    return render(request, 'password_generator/settings.html')\n\n@csrf_exempt\ndef generate_password(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        length = data.get('length', 12)\n        include_uppercase = data.get('uppercase', True)\n        include_lowercase = data.get('lowercase', True)\n        include_numbers = data.get('numbers', True)\n        include_symbols = data.get('symbols', True)\n        exclude_similar = data.get('exclude_similar', False)\n\n        characters = ''\n        if include_uppercase:\n            characters += string.ascii_uppercase\n        if include_lowercase:\n            characters += string.ascii_lowercase\n        if include_numbers:\n            characters += string.digits\n        if include_symbols:\n            characters += string.punctuation\n\n        if exclude_similar:\n            chars_to_exclude = 'l1O0'\n            characters = ''.join(c for c in characters if c not in chars_to_exclude)\n\n        if not characters:\n            return JsonResponse({'error': 'Please select at least one character set.'}, status=400)\n\n        password = ''.join(secrets.choice(characters) for _ in range(length))\n        return JsonResponse({'password': password})\n    else:\n        return JsonResponse({'error': 'Invalid request method.'}, status=400)"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('settings/', views.settings, name='settings'),\n    path('generate_password/', views.generate_password, name='generate_password'),\n]"}, {"file": "forms.py", "path": "password_generator/forms.py", "code": "# You might not need forms.py if you handle settings via JavaScript/AJAX.\n# Example Form (if you use Django forms to manage user settings):\n# from django import forms\n\n# class SettingsForm(forms.Form):\n#     default_password_length = forms.IntegerField(label='Default Password Length', initial=12, min_value=8, max_value=32)\n#     include_uppercase = forms.BooleanField(label='Include Uppercase', initial=True, required=False)\n#     include_lowercase = forms.BooleanField(label='Include Lowercase', initial=True, required=False)\n#     include_numbers = forms.BooleanField(label='Include Numbers', initial=True, required=False)\n#     include_symbols = forms.BooleanField(label='Include Symbols', initial=True, required=False)"}, {"file": "home.html", "path": "password_generator/templates/password_generator/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1>Password Generator</h1>\n    <label for=\"passwordLength\">Password Length:</label>\n    <input type=\"number\" id=\"passwordLength\" value=\"12\" min=\"8\" max=\"32\"><br><br>\n\n    <input type=\"checkbox\" id=\"includeUppercase\" checked> Include Uppercase<br>\n    <input type=\"checkbox\" id=\"includeLowercase\" checked> Include Lowercase<br>\n    <input type=\"checkbox\" id=\"includeNumbers\" checked> Include Numbers<br>\n    <input type=\"checkbox\" id=\"includeSymbols\" checked> Include Symbols<br>\n    <input type=\"checkbox\" id=\"excludeSimilar\"> Exclude Similar Characters<br><br>\n\n    <button id=\"generateButton\">Generate Password</button><br><br>\n\n    <label for=\"generatedPassword\">Generated Password:</label>\n    <input type=\"text\" id=\"generatedPassword\" readonly><br><br>\n\n    <button id=\"copyButton\">Copy to Clipboard</button><br><br>\n\n    <a href=\"{% url 'about' %}\">About</a> | <a href=\"{% url 'settings' %}\">Settings</a>\n\n    <script>\n        document.getElementById('generateButton').addEventListener('click', function() {\n            const length = document.getElementById('passwordLength').value;\n            const uppercase = document.getElementById('includeUppercase').checked;\n            const lowercase = document.getElementById('includeLowercase').checked;\n            const numbers = document.getElementById('includeNumbers').checked;\n            const symbols = document.getElementById('includeSymbols').checked;\n            const excludeSimilar = document.getElementById('excludeSimilar').checked;\n\n            fetch('/generate_password/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': getCookie('csrftoken')  // Important for Django CSRF protection\n                },\n                body: JSON.stringify({\n                    length: parseInt(length),\n                    uppercase: uppercase,\n                    lowercase: lowercase,\n                    numbers: numbers,\n                    symbols: symbols,\n                    exclude_similar: excludeSimilar\n                })\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.password) {\n                    document.getElementById('generatedPassword').value = data.password;\n                } else if (data.error) {\n                    alert(data.error);\n                }\n            })\n            .catch(error => console.error('Error:', error));\n        });\n\n        document.getElementById('copyButton').addEventListener('click', function() {\n            const passwordField = document.getElementById('generatedPassword');\n            passwordField.select();\n            document.execCommand('copy');\n            alert('Password copied to clipboard!');\n        });\n\n        // Function to get CSRF token from cookies\n        function getCookie(name) {\n            let cookieValue = null;\n            if (document.cookie && document.cookie !== '') {\n                const cookies = document.cookie.split(';');\n                for (let i = 0; i < cookies.length; i++) {\n                    const cookie = cookies[i].trim();\n                    // Does this cookie string begin with the name we want?\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                        break;\n                    }\n                }\n            }\n            return cookieValue;\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator/templates/password_generator/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Password Generator</title>\n</head>\n<body>\n    <h1>About Password Generator</h1>\n    <p>This password generator helps you create strong and secure passwords.</p>\n    <p>The generated passwords are random and are not stored on our servers.</p>\n    <p>Contact us at: example@example.com</p>\n    <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'settings' %}\">Settings</a>\n</body>\n</html>"}, {"file": "settings.html", "path": "password_generator/templates/password_generator/settings.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <h1>Settings</h1>\n    <label for=\"defaultPasswordLength\">Default Password Length:</label>\n    <input type=\"number\" id=\"defaultPasswordLength\" value=\"12\" min=\"8\" max=\"32\"><br><br>\n\n    <label>Default Character Set:</label><br>\n    <input type=\"checkbox\" id=\"defaultUppercase\" checked> Uppercase<br>\n    <input type=\"checkbox\" id=\"defaultLowercase\" checked> Lowercase<br>\n    <input type=\"checkbox\" id=\"defaultNumbers\" checked> Numbers<br>\n    <input type=\"checkbox\" id=\"defaultSymbols\" checked> Symbols<br><br>\n\n    <button id=\"saveSettings\">Save Settings</button>\n    <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a>\n\n    <script>\n    // Example using localStorage (alternatively, use AJAX to save to the server)\n    document.getElementById('saveSettings').addEventListener('click', function() {\n        const length = document.getElementById('defaultPasswordLength').value;\n        const uppercase = document.getElementById('defaultUppercase').checked;\n        const lowercase = document.getElementById('defaultLowercase').checked;\n        const numbers = document.getElementById('defaultNumbers').checked;\n        const symbols = document.getElementById('defaultSymbols').checked;\n\n        localStorage.setItem('defaultPasswordLength', length);\n        localStorage.setItem('defaultUppercase', uppercase);\n        localStorage.setItem('defaultLowercase', lowercase);\n        localStorage.setItem('defaultNumbers', numbers);\n        localStorage.setItem('defaultSymbols', symbols);\n\n        alert('Settings Saved!');\n    });\n\n    // Load settings from localStorage on page load\n    window.onload = function() {\n        const length = localStorage.getItem('defaultPasswordLength') || 12;\n        const uppercase = localStorage.getItem('defaultUppercase') === 'true';\n        const lowercase = localStorage.getItem('defaultLowercase') === 'true';\n        const numbers = localStorage.getItem('defaultNumbers') === 'true';\n        const symbols = localStorage.getItem('defaultSymbols') === 'true';\n\n        document.getElementById('defaultPasswordLength').value = length;\n        document.getElementById('defaultUppercase').checked = uppercase;\n        document.getElementById('defaultLowercase').checked = lowercase;\n        document.getElementById('defaultNumbers').checked = numbers;\n        document.getElementById('defaultSymbols').checked = symbols;\n    }\n    </script>\n</body>\n</html>"}, {"file": "password_generator.css", "path": "password_generator/static/password_generator/password_generator.css", "code": "/* Basic CSS for styling */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\ninput[type=\"text\"], input[type=\"number\"] {\n    padding: 5px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n    margin-bottom: 10px;\n}\n\nbutton {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #3e8e41;\n}\n"}], "4": [{"file": "urls.py", "path": "qr_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('help/', views.help_page, name='help'),\n    path('generate_qr/', views.generate_qr, name='generate_qr'), # POST endpoint\n]"}, {"file": "views.py", "path": "qr_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport qrcode\nfrom io import BytesIO\nimport base64\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n\n\ndef help_page(request):\n    return render(request, 'help.html')\n\n@csrf_exempt\ndef generate_qr(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        data_type = request.POST.get('data_type', 'TEXT')\n        color = request.POST.get('color', '000000')\n        bg_color = request.POST.get('bg_color', 'FFFFFF')\n        logo_url = request.POST.get('logo_url', '')\n        error_correction = request.POST.get('error_correction', 'M')\n        short_url = request.POST.get('short_url', '')\n\n        # Generate QR Code\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.ERROR_CORRECT_M if error_correction == 'M' else qrcode.ERROR_CORRECT_L if error_correction == 'L' else qrcode.ERROR_CORRECT_H if error_correction == 'H' else qrcode.ERROR_CORRECT_Q,\n            box_size=10,\n            border=4,\n        )\n        if short_url:\n            #Shorten URL logic here (not implemented yet)\n            data = short_url\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=('#' + color), back_color=('#' + bg_color))\n\n        # Save the image to a buffer\n        buffer = BytesIO()\n        img.save(buffer, format='PNG')\n        img_str = base64.b64encode(buffer.getvalue()).decode()\n\n        return JsonResponse({'image': img_str})\n    else:\n        return JsonResponse({'error': 'Invalid request method'})"}, {"file": "models.py", "path": "qr_generator/models.py", "code": "from django.db import models\n\n# You might not need models for this project initially.\n# If you want to store QR code generation history, you can define a model here.\n\n# Example:\n# class QRCodeHistory(models.Model):\n#     data = models.TextField()\n#     data_type = models.CharField(max_length=50)\n#     created_at = models.DateTimeField(auto_now_add=True)"}, {"file": "forms.py", "path": "qr_generator/forms.py", "code": "from django import forms\n\n# Forms are not strictly required because the data is sent via AJAX.\n# However, if you want server-side form validation, you can define a form here.\n\n# Example:\n# class QRCodeForm(forms.Form):\n#     data = forms.CharField(label='Data')\n#     data_type = forms.ChoiceField(label='Data Type', choices=[('URL', 'URL'), ('TEXT', 'Text')])"}, {"file": "settings.py", "path": "qr_generator_project/settings.py", "code": "# Ensure that 'qr_generator' is added to INSTALLED_APPS\n# Configure TEMPLATES to point to your templates directory\n# Configure STATIC_URL and STATICFILES_DIRS for serving static files\n\n#Example in INSTALLED_APPS:\n#INSTALLED_APPS = [\n#    ...\n#    'qr_generator',\n#]"}, {"file": "home.html", "path": "qr_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1>QR Code Generator</h1>\n    <input type=\"text\" id=\"data\" placeholder=\"Enter data here\">\n\n    <select id=\"data_type\">\n        <option value=\"TEXT\">Text</option>\n        <option value=\"URL\">URL</option>\n        <option value=\"EMAIL\">Email</option>\n        <option value=\"PHONE\">Phone Number</option>\n    </select>\n\n    <input type=\"color\" id=\"color\" value=\"#000000\">\n    <input type=\"color\" id=\"bg_color\" value=\"#FFFFFF\">\n\n    <select id=\"error_correction\">\n      <option value=\"L\">L (Low)</option>\n      <option value=\"M\" selected>M (Medium)</option>\n      <option value=\"Q\">Q (Quartile)</option>\n      <option value=\"H\">H (High)</option>\n    </select>\n\n    <button onclick=\"generateQRCode()\">Generate QR Code</button>\n    <img id=\"qr_code_image\" src=\"\" alt=\"QR Code\">\n\n    <script>\n        function generateQRCode() {\n            const data = document.getElementById('data').value;\n            const dataType = document.getElementById('data_type').value;\n            const color = document.getElementById('color').value.substring(1); // Remove #\n            const bgColor = document.getElementById('bg_color').value.substring(1);\n            const errorCorrection = document.getElementById('error_correction').value;\n\n\n            const formData = new FormData();\n            formData.append('data', data);\n            formData.append('data_type', dataType);\n            formData.append('color', color);\n            formData.append('bg_color', bgColor);\n            formData.append('error_correction', errorCorrection);\n\n            fetch('/generate_qr/', {\n                method: 'POST',\n                body: formData,\n                headers: {\n                'X-CSRFToken': '{{ csrf_token }}'\n            }\n            })\n            .then(response => response.json())\n            .then(data => {\n                document.getElementById('qr_code_image').src = 'data:image/png;base64,' + data.image;\n            });\n        }\n    </script>\n    <a href=\"{% url 'about' %}\">About</a>\n    <a href=\"{% url 'help' %}\">Help</a>\n</body>\n</html>"}, {"file": "about.html", "path": "qr_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This QR Code Generator</h1>\n    <p>This website allows you to generate QR codes easily.</p>\n    <a href=\"{% url 'home' %}\">Home</a>\n    <a href=\"{% url 'help' %}\">Help</a>\n</body>\n</html>"}, {"file": "help.html", "path": "qr_generator/templates/help.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Help/FAQ</title>\n</head>\n<body>\n    <h1>Help/FAQ</h1>\n    <p>Find answers to common questions here.</p>\n    <a href=\"{% url 'home' %}\">Home</a>\n    <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}], "5": [{"file": "models.py", "path": "markdown_converter/models.py", "code": "from django.db import models\n\n# You can add models here if needed, for example, to store user preferences.\n# class UserPreferences(models.Model):\n#     user = models.ForeignKey(User, on_delete=models.CASCADE)\n#     theme = models.CharField(max_length=20, default='light')\n\n"}, {"file": "views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse, JsonResponse\nimport markdown\nimport os\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert_markdown(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        return JsonResponse({'html': html})\n    return JsonResponse({'error': 'Invalid request'})\n\ndef download_html(request):\n    if request.method == 'POST':\n        html_content = request.POST.get('html_content', '')\n        response = HttpResponse(html_content, content_type='text/html')\n        response['Content-Disposition'] = 'attachment; filename=\"converted.html\"'\n        return response\n    return HttpResponseBadRequest('Invalid request')\n\ndef settings(request):\n    return render(request, 'settings.html')\n\ndef help_about(request):\n    return render(request, 'help_about.html')"}, {"file": "urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert_markdown, name='convert_markdown'),\n    path('download/', views.download_html, name='download_html'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help_about, name='help_about'),\n]"}, {"file": "forms.py", "path": "markdown_converter/forms.py", "code": "from django import forms\n\n# You can add forms here if needed, for example, for settings.\n# class SettingsForm(forms.Form):\n#     theme = forms.ChoiceField(choices=[('light', 'Light'), ('dark', 'Dark')])\n"}, {"file": "templates/home.html", "path": "markdown_converter/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown Converter</title>\n    <style>\n        body { font-family: sans-serif; }\n        #markdown-input { width: 50%; height: 300px; }\n        #html-output { width: 50%; height: 300px; border: 1px solid #ccc; padding: 5px; overflow: auto; }\n    </style>\n</head>\n<body>\n    <h1>Markdown Converter</h1>\n    <textarea id=\"markdown-input\"></textarea>\n    <button id=\"convert-button\">Convert</button>\n    <div id=\"html-output\"></div>\n    <button id=\"download-button\">Download HTML</button>\n    <button id=\"copy-button\">Copy HTML</button>\n    <button id=\"clear-button\">Clear</button>\n\n    <script>\n        document.getElementById('convert-button').addEventListener('click', function() {\n            const markdownText = document.getElementById('markdown-input').value;\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: 'markdown_text=' + encodeURIComponent(markdownText)\n            })\n            .then(response => response.json())\n            .then(data => {\n                document.getElementById('html-output').innerHTML = data.html;\n            });\n        });\n\n        document.getElementById('download-button').addEventListener('click', function() {\n            const htmlContent = document.getElementById('html-output').innerHTML;\n            fetch('/download/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: 'html_content=' + encodeURIComponent(htmlContent)\n            })\n            .then(response => response.blob())\n            .then(blob => {\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = 'converted.html';\n                document.body.appendChild(a);\n                a.click();\n                a.remove();\n            });\n        });\n\n       document.getElementById('copy-button').addEventListener('click', function() {\n            const htmlContent = document.getElementById('html-output').innerHTML;\n            navigator.clipboard.writeText(htmlContent)\n                .then(() => {\n                    alert('HTML copied to clipboard!');\n                })\n                .catch(err => {\n                    console.error('Failed to copy: ', err);\n                });\n        });\n\n        document.getElementById('clear-button').addEventListener('click', function() {\n           document.getElementById('markdown-input').value = '';\n           document.getElementById('html-output').innerHTML = '';\n        });\n    </script>\n</body>\n</html>"}, {"file": "templates/settings.html", "path": "markdown_converter/templates/settings.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <h1>Settings</h1>\n    <p>Theme selection and other settings will be implemented here.</p>\n</body>\n</html>"}, {"file": "templates/help_about.html", "path": "markdown_converter/templates/help_about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Help / About</title>\n</head>\n<body>\n    <h1>Help / About</h1>\n    <p>Markdown syntax guide and about information will be implemented here.</p>\n</body>\n</html>"}, {"file": "static/style.css", "path": "markdown_converter/static/style.css", "code": "/* Basic CSS for styling */\nbody {\n    font-family: sans-serif;\n}\n"}], "6": [{"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.landing_page, name='landing_page'),\n    path('todos/', views.todo_list, name='todo_list'),\n    path('analytics/', views.analytics_dashboard, name='analytics_dashboard'),\n    # Add more URL patterns as needed\n]"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import JsonResponse\n\n# Dummy data (replace with database interactions later)\ntodos = [] # Example: [{'id': 1, 'text': 'Buy groceries', 'completed': False}]\n\ndef landing_page(request):\n    # Implement logic for the landing page\n    return render(request, 'landing_page.html')\n\ndef todo_list(request):\n    if request.method == 'GET':\n        # Return todos as JSON\n        return JsonResponse(todos, safe=False)\n    elif request.method == 'POST':\n        # Add a new todo (parse from request.body as JSON)\n        # Example: new_todo = json.loads(request.body)\n        pass # Implement\n    \n    # Handle POST, PUT, DELETE requests for CRUD operations\n    \n    return render(request, 'todo_list.html')\n\ndef analytics_dashboard(request):\n    # Implement analytics logic\n    # Calculate statistics and prepare data for charts\n    # You can return JSON data for AJAX updates or render with context\n    return render(request, 'analytics_dashboard.html')"}, {"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoItem(models.Model):\n    text = models.CharField(max_length=200)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.text"}, {"file": "serializers.py", "path": "todo_app/serializers.py", "code": "from rest_framework import serializers\nfrom .models import TodoItem\n\nclass TodoItemSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = TodoItem\n        fields = '__all__'"}, {"file": "templates/landing_page.html", "path": "todo_app/templates/landing_page.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App</title>\n</head>\n<body>\n    <h1>Todo App</h1>\n    <p>A simple todo application.</p>\n    <a href=\"{% url 'todo_list' %}\">Go to Todo List</a>\n    {% comment %} Optional: {% endcomment %}\n    <a href=\"{% url 'analytics_dashboard' %}\">Go to Analytics Dashboard</a>\n</body>\n</html>"}, {"file": "templates/todo_list.html", "path": "todo_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n</head>\n<body>\n    <h1>Todo List</h1>\n\n    <ul id=\"todo-list\">\n        </ul>\n\n    <button onclick=\"addTodoItem()\">Add Todo</button>\n\n    <script>\n        async function getTodos(){\n            let res = await fetch('/todos/');\n            let data = await res.json();\n            let todo_ul = document.getElementById('todo-list')\n            for(let todo of data){\n                let li = document.createElement('li');\n                li.innerHTML = todo.text + (todo.completed ? ' - completed':'')\n                todo_ul.appendChild(li)\n            }\n        }\n\n        async function addTodoItem(){\n            console.log('adding todo');\n        }\n        getTodos()\n\n    </script>\n\n    <script>\n    // Client-side JavaScript for interacting with the API\n    </script>\n</body>\n</html>"}, {"file": "templates/analytics_dashboard.html", "path": "todo_app/templates/analytics_dashboard.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Analytics Dashboard</title>\n</head>\n<body>\n    <h1>Analytics Dashboard</h1>\n    <!-- Display analytics data here -->\n</body>\n</html>"}, {"file": "settings.py", "path": "todo_app/settings.py", "code": "# Add 'rest_framework' to INSTALLED_APPS\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'corsheaders',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'corsheaders.middleware.CorsMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    ...\n]\n\n\nCORS_ORIGIN_ALLOW_ALL = True  # For development, restrict in production!"}], "7": [{"file": "models.py", "path": "budget_app/models.py", "code": "from django.db import models\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.CharField(max_length=255)\n    transaction_type = models.CharField(max_length=10, choices=[('income', 'Income'), ('expense', 'Expense')])\n\n    def __str__(self):\n        return self.description\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.category"}, {"file": "views.py", "path": "budget_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import JsonResponse\nfrom .models import Transaction, Budget\nimport json\n\ndef homepage(request):\n    # Implement Balance Overview, Recent Transactions, Budget Summary, Add Transaction Shortcut\n    transactions = Transaction.objects.all().order_by('-date')[:5] # Recent Transactions\n    total_income = sum([t.amount for t in Transaction.objects.filter(transaction_type='income')])\n    total_expenses = sum([t.amount for t in Transaction.objects.filter(transaction_type='expense')])\n    balance = total_income - total_expenses  # Balance Overview\n\n    budget_summary = {}\n    for budget in Budget.objects.all():\n        spent = sum([t.amount for t in Transaction.objects.filter(category=budget.category, transaction_type='expense')])\n        budget_summary[budget.category] = {'budgeted': budget.amount, 'spent': spent}\n\n    context = {\n        'balance': balance,\n        'transactions': transactions,\n        'budget_summary': budget_summary,\n    }\n    return render(request, 'homepage.html', context)\n\n\ndef transactions_view(request):\n    # Implement View All Transactions, Filter Transactions, Add New Transaction, Edit Transaction, Delete Transaction, Search Transactions\n    if request.method == 'POST' and request.content_type == 'application/json':\n      data = json.loads(request.body.decode('utf-8'))\n      date = data.get('date')\n      description = data.get('description')\n      amount = data.get('amount')\n      category = data.get('category')\n      transaction_type = data.get('transaction_type')\n      transaction = Transaction(date=date, description=description, amount=amount, category=category, transaction_type=transaction_type)\n      transaction.save()\n      return JsonResponse({'message': 'Transaction added successfully'}) # for Add New Transaction\n    \n    transactions = Transaction.objects.all().order_by('-date')\n    context = {'transactions': transactions}\n    return render(request, 'transactions.html', context)\n\ndef budgets_view(request):\n    # Implement Create New Budget, View Budgets, Edit Budget, Delete Budget, Budget Progress\n    budgets = Budget.objects.all()\n    context = {'budgets': budgets}\n    return render(request, 'budgets.html', context)\n\n\ndef reports_view(request):\n    # Implement Balance Chart, Spending Breakdown, Income vs. Expenses, Custom Report, Download Report\n    context = {}\n    return render(request, 'reports.html', context)\n\n\ndef settings_view(request):\n    # Implement Change Currency, Edit Profile, Set Budget Reminders, Change Password, Connect Bank Account\n    context = {}\n    return render(request, 'settings.html', context)"}, {"file": "urls.py", "path": "budget_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('transactions/', views.transactions_view, name='transactions'),\n    path('budgets/', views.budgets_view, name='budgets'),\n    path('reports/', views.reports_view, name='reports'),\n    path('settings/', views.settings_view, name='settings'),\n]"}, {"file": "settings.py", "path": "budget_project/settings.py", "code": "# Assuming a standard Django project structure\n# ... (other settings)\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget_app',  # Add your app\n]\n\n# ... (other settings)\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# ... (other settings)"}, {"file": "homepage.html", "path": "budget_app/templates/homepage.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Homepage</h1>\n    <h2>Balance Overview: {{ balance }}</h2>\n\n    <h2>Recent Transactions</h2>\n    <ul>\n        {% for transaction in transactions %}\n            <li>{{ transaction.date }} - {{ transaction.description }} - {{ transaction.amount }}</li>\n        {% endfor %}\n    </ul>\n\n    <h2>Budget Summary</h2>\n    {% for category, summary in budget_summary.items() %}\n        <p>{{ category }}: Budgeted - {{ summary.budgeted }}, Spent - {{ summary.spent }}</p>\n    {% endfor %}\n\n    <a href=\"{% url 'transactions' %}\">View All Transactions</a>\n    <a href=\"{% url 'budgets' %}\">View Budgets</a>\n    <a href=\"{% url 'reports' %}\">View Reports</a>\n    <a href=\"{% url 'settings' %}\">View Settings</a>\n{% endblock %}"}, {"file": "transactions.html", "path": "budget_app/templates/transactions.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Transactions</h1>\n    <ul>\n        {% for transaction in transactions %}\n            <li>{{ transaction.date }} - {{ transaction.description }} - {{ transaction.amount }} - {{ transaction.category }} - {{ transaction.transaction_type }}</li>\n        {% endfor %}\n    </ul>\n\n    <a href=\"{% url 'homepage' %}\">Back to Homepage</a>\n{% endblock %}"}, {"file": "budgets.html", "path": "budget_app/templates/budgets.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Budgets</h1>\n    <ul>\n        {% for budget in budgets %}\n            <li>{{ budget.category }} - {{ budget.amount }}</li>\n        {% endfor %}\n    </ul>\n\n    <a href=\"{% url 'homepage' %}\">Back to Homepage</a>\n{% endblock %}"}, {"file": "reports.html", "path": "budget_app/templates/reports.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Reports</h1>\n    <p>Reports Page Content</p>\n\n    <a href=\"{% url 'homepage' %}\">Back to Homepage</a>\n{% endblock %}"}, {"file": "settings.html", "path": "budget_app/templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Settings</h1>\n    <p>Settings Page Content</p>\n\n    <a href=\"{% url 'homepage' %}\">Back to Homepage</a>\n{% endblock %}"}, {"file": "base.html", "path": "budget_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Budget App</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    location = models.CharField(max_length=200, blank=True)\n    category = models.CharField(max_length=100, blank=True)\n    attendees = models.ManyToManyField('auth.User', related_name='events', blank=True)\n    recurrence = models.CharField(max_length=50, blank=True) # e.g., 'daily', 'weekly', 'monthly'\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\nclass Calendar(models.Model):\n    name = models.CharField(max_length=100)\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.urls import reverse\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Event, Calendar\nfrom .forms import EventForm, CalendarForm\nfrom django.http import HttpResponse\nimport json\nfrom django.core import serializers\n\n@login_required\ndef calendar_view(request):\n    # Placeholder for calendar view logic\n    events = Event.objects.filter(user=request.user)\n    return render(request, 'calendar_app/calendar.html', {'events': events})\n\n\n@login_required\ndef event_create(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            event = form.save(commit=False)\n            event.user = request.user\n            event.save()\n            form.save_m2m()\n            return redirect('calendar') # Redirect to calendar view\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/event_form.html', {'form': form})\n\n\n@login_required\ndef event_edit(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            event = form.save()\n            return redirect('calendar')  # Redirect to calendar view\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/event_form.html', {'form': form})\n\n@login_required\ndef event_delete(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('calendar') # Redirect to calendar view\n    return render(request, 'calendar_app/event_confirm_delete.html', {'event': event})\n\n@login_required\ndef calendar_list(request):\n    calendars = Calendar.objects.filter(user=request.user)\n    return render(request, 'calendar_app/calendar_list.html', {'calendars': calendars})\n\n@login_required\ndef calendar_create(request):\n    if request.method == 'POST':\n        form = CalendarForm(request.POST)\n        if form.is_valid():\n            calendar = form.save(commit=False)\n            calendar.user = request.user\n            calendar.save()\n            return redirect('calendar_list')  # Redirect to calendar list\n    else:\n        form = CalendarForm()\n    return render(request, 'calendar_app/calendar_form.html', {'form': form})\n\n@login_required\ndef calendar_edit(request, calendar_id):\n    calendar = get_object_or_404(Calendar, pk=calendar_id, user=request.user)\n    if request.method == 'POST':\n        form = CalendarForm(request.POST, instance=calendar)\n        if form.is_valid():\n            calendar = form.save()\n            return redirect('calendar_list')  # Redirect to calendar list\n    else:\n        form = CalendarForm(instance=calendar)\n    return render(request, 'calendar_app/calendar_form.html', {'form': form})\n\n\n@login_required\ndef calendar_delete(request, calendar_id):\n    calendar = get_object_or_404(Calendar, pk=calendar_id, user=request.user)\n    if request.method == 'POST':\n        calendar.delete()\n        return redirect('calendar_list')  # Redirect to calendar list\n    return render(request, 'calendar_app/calendar_confirm_delete.html', {'calendar': calendar})\n\n\n@login_required\ndef get_events_json(request):\n    events = Event.objects.filter(user=request.user)\n    data = serializers.serialize('json', events)\n    return HttpResponse(data, content_type='application/json')\n"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event, Calendar\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time', 'location', 'category', 'attendees', 'recurrence']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }\n\nclass CalendarForm(forms.ModelForm):\n    class Meta:\n        model = Calendar\n        fields = ['name']"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar'),\n    path('event/create/', views.event_create, name='event_create'),\n    path('event/<int:event_id>/edit/', views.event_edit, name='event_edit'),\n    path('event/<int:event_id>/delete/', views.event_delete, name='event_delete'),\n    path('calendars/', views.calendar_list, name='calendar_list'),\n    path('calendar/create/', views.calendar_create, name='calendar_create'),\n    path('calendar/<int:calendar_id>/edit/', views.calendar_edit, name='calendar_edit'),\n    path('calendar/<int:calendar_id>/delete/', views.calendar_delete, name='calendar_delete'),\n    path('events_json/', views.get_events_json, name='get_events_json'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# Include these lines in your settings.py file\n\nINSTALLED_APPS = [\n    ...\n    'calendar_app',\n    'crispy_forms',\n    'crispy_bootstrap5',\n    ...\n]\n\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\n\nCRISPY_TEMPLATE_PACK = 'bootstrap5'"}, {"file": "admin.py", "path": "calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event, Calendar\n\nadmin.site.register(Event)\nadmin.site.register(Calendar)"}], "9": [{"file": "models.py", "path": "chatbot_app/models.py", "code": "from django.db import models\n\n# Define your models here, e.g.\n# class User(models.Model):\n#     name = models.CharField(max_length=100)\n#     email = models.EmailField(unique=True)\n#     # ... other fields"}, {"file": "views.py", "path": "chatbot_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\n# Define your views here\n# def home(request):\n#     return render(request, 'home.html', {})\n\n# Example API endpoint\n# def chatbot_response(request):\n#     user_message = request.GET.get('message')\n#     # Process the message (e.g., using a chatbot library)\n#     bot_response = f\"Echo: {user_message}\"\n#     return JsonResponse({'response': bot_response})"}, {"file": "urls.py", "path": "chatbot_app/urls.py", "code": "from django.urls import path\n# from . import views\n\nurlpatterns = [\n    # path('', views.home, name='home'),\n    # path('api/chatbot', views.chatbot_response, name='chatbot_response'),\n]"}, {"file": "serializers.py", "path": "chatbot_app/serializers.py", "code": "from rest_framework import serializers\n\n# Example Serializer\n# class UserSerializer(serializers.ModelSerializer):\n#     class Meta:\n#         model = User\n#         fields = '__all__'"}, {"file": "forms.py", "path": "chatbot_app/forms.py", "code": "from django import forms\n\n# Define forms if you need any\n# class ContactForm(forms.Form):\n#     name = forms.CharField(max_length=100)\n#     email = forms.EmailField()\n#     message = forms.CharField(widget=forms.Textarea)"}, {"file": "settings.py", "path": "config/settings.py", "code": "# Django settings for config project.\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# ... (other standard Django settings)\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    # 'rest_framework',\n    'chatbot_app', # Add your app here\n]\n\n# ... (other standard Django settings)"}, {"file": "wsgi.py", "path": "config/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "chatbot_app/admin.py", "code": "from django.contrib import admin\n# from .models import YourModel\n\n# admin.site.register(YourModel)\n\n"}, {"file": "__init__.py", "path": "chatbot_app/__init__.py", "code": "default_app_config = 'chatbot_app.apps.ChatbotAppConfig'"}, {"file": "apps.py", "path": "chatbot_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ChatbotAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot_app'\n"}], "10": [{"file": "models.py", "path": "calorie_tracker/models.py", "code": "# calorie_tracker/models.py\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    age = models.IntegerField(null=True, blank=True)\n    gender = models.CharField(max_length=10, null=True, blank=True)\n    weight = models.FloatField(null=True, blank=True)\n    height = models.FloatField(null=True, blank=True)\n    weight_goal = models.FloatField(null=True, blank=True)\n    calorie_target = models.IntegerField(null=True, blank=True)\n    unit_preference = models.CharField(max_length=10, default='metric')\n\n    def __str__(self):\n        return self.user.username\n\nclass Food(models.Model):\n    name = models.CharField(max_length=200)\n    calories = models.FloatField()\n    protein = models.FloatField()\n    carbs = models.FloatField()\n    fat = models.FloatField()\n\n    def __str__(self):\n        return self.name\n\nclass FoodLog(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    food = models.ForeignKey(Food, on_delete=models.CASCADE)\n    date = models.DateField(auto_now_add=True)\n    meal = models.CharField(max_length=50)\n    portion_size = models.FloatField()\n\n    def __str__(self):\n        return f'{self.user.username} - {self.food.name} - {self.date}'\n\nclass Exercise(models.Model):\n    name = models.CharField(max_length=200)\n    calorie_burn_per_hour = models.FloatField()\n\n    def __str__(self):\n        return self.name\n\n\nclass ExerciseLog(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    exercise = models.ForeignKey(Exercise, on_delete=models.CASCADE)\n    date = models.DateField(auto_now_add=True)\n    duration = models.IntegerField()\n    intensity = models.CharField(max_length=50)\n\n    def __str__(self):\n        return f'{self.user.username} - {self.exercise.name} - {self.date}'\n\nclass WaterLog(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField(auto_now_add=True)\n    amount = models.FloatField() # Amount in ml or oz, based on UserProfile.unit_preference\n\n    def __str__(self):\n        return f'{self.user.username} - {self.date} - {self.amount}'\n\nclass WeightLog(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField(auto_now_add=True)\n    weight = models.FloatField()\n\n    def __str__(self):\n        return f'{self.user.username} - {self.date} - {self.weight}'"}, {"file": "views.py", "path": "calorie_tracker/views.py", "code": "# calorie_tracker/views.py\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom .models import UserProfile, Food, FoodLog, Exercise, ExerciseLog, WaterLog, WeightLog\nfrom .forms import UserProfileForm, FoodLogForm, ExerciseLogForm, WaterLogForm, WeightLogForm\nfrom django.db.models import Sum\nfrom django.contrib.auth.models import User\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup_view(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            # Log the user in\n            login(request, user)\n            return redirect('profile_setup') # Redirect to profile setup\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            # Log in the user\n            user = form.get_user()\n            login(request, user)\n            if 'next' in request.POST:\n                return redirect(request.POST.get('next'))\n            else:\n                return redirect('dashboard')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\ndef logout_view(request):\n    if request.method == 'POST':\n        logout(request)\n        return redirect('home')\n\n@login_required\ndef profile_setup(request):\n    try:\n        profile = UserProfile.objects.get(user=request.user)\n    except UserProfile.DoesNotExist:\n        profile = None\n\n    if request.method == 'POST':\n        form = UserProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            user_profile = form.save(commit=False)\n            user_profile.user = request.user\n            user_profile.save()\n            return redirect('dashboard')\n    else:\n        form = UserProfileForm(instance=profile)\n    return render(request, 'profile_setup.html', {'form': form})\n\n@login_required\ndef dashboard(request):\n    today = datetime.date.today()\n    try:\n        user_profile = UserProfile.objects.get(user=request.user)\n    except UserProfile.DoesNotExist:\n        return redirect('profile_setup') #Ensure Profile exists\n\n    food_logs = FoodLog.objects.filter(user=request.user, date=today)\n    exercise_logs = ExerciseLog.objects.filter(user=request.user, date=today)\n    water_logs = WaterLog.objects.filter(user=request.user, date=today)\n    weight_logs = WeightLog.objects.filter(user=request.user).order_by('-date')[:7]\n\n    total_calories = 0\n    total_protein = 0\n    total_carbs = 0\n    total_fat = 0\n\n    for log in food_logs:\n        total_calories += log.food.calories * log.portion_size\n        total_protein += log.food.protein * log.portion_size\n        total_carbs += log.food.carbs * log.portion_size\n        total_fat += log.food.fat * log.portion_size\n\n    total_calories_burned = 0\n    for log in exercise_logs:\n        total_calories_burned += log.exercise.calorie_burn_per_hour * (log.duration / 60.0)\n\n    total_water_intake = water_logs.aggregate(Sum('amount'))['amount__sum'] or 0\n\n    context = {\n        'user_profile': user_profile,\n        'food_logs': food_logs,\n        'exercise_logs': exercise_logs,\n        'water_logs': water_logs,\n        'weight_logs': weight_logs,\n        'total_calories': total_calories,\n        'total_protein': total_protein,\n        'total_carbs': total_carbs,\n        'total_fat': total_fat,\n        'total_calories_burned': total_calories_burned,\n        'total_water_intake': total_water_intake\n    }\n\n    return render(request, 'dashboard.html', context)\n\n@login_required\ndef food_log(request):\n    if request.method == 'POST':\n        form = FoodLogForm(request.POST)\n        if form.is_valid():\n            food_log = form.save(commit=False)\n            food_log.user = request.user\n            food_log.save()\n            return redirect('food_log')\n    else:\n        form = FoodLogForm()\n        # Filter recent foods for the current user\n        recent_foods = FoodLog.objects.filter(user=request.user).order_by('-date')[:5]\n\n    return render(request, 'food_log.html', {'form': form, 'recent_foods': recent_foods})\n\n@login_required\ndef exercise_log(request):\n    if request.method == 'POST':\n        form = ExerciseLogForm(request.POST)\n        if form.is_valid():\n            exercise_log = form.save(commit=False)\n            exercise_log.user = request.user\n            exercise_log.save()\n            return redirect('exercise_log')\n    else:\n        form = ExerciseLogForm()\n        # Filter recent exercises for current user\n        recent_exercises = ExerciseLog.objects.filter(user=request.user).order_by('-date')[:5]\n    return render(request, 'exercise_log.html', {'form': form, 'recent_exercises': recent_exercises})\n\n\n@login_required\ndef water_log(request):\n    if request.method == 'POST':\n        form = WaterLogForm(request.POST)\n        if form.is_valid():\n            water_log = form.save(commit=False)\n            water_log.user = request.user\n            water_log.save()\n            return redirect('water_log')\n    else:\n        form = WaterLogForm()\n    return render(request, 'water_log.html', {'form': form})\n\n@login_required\ndef weight_log(request):\n    if request.method == 'POST':\n        form = WeightLogForm(request.POST)\n        if form.is_valid():\n            weight_log = form.save(commit=False)\n            weight_log.user = request.user\n            weight_log.save()\n            return redirect('weight_log')\n    else:\n        form = WeightLogForm()\n    return render(request, 'weight_log.html', {'form': form})\n\n\n@login_required\ndef settings(request):\n    try:\n        profile = UserProfile.objects.get(user=request.user)\n    except UserProfile.DoesNotExist:\n        return redirect('profile_setup') #Redirect if profile doesnt exist\n\n    if request.method == 'POST':\n        form = UserProfileForm(request.POST, instance=profile)\n        if form.is_valid():\n            form.save()\n            return redirect('settings') # Refresh the page after saving\n    else:\n        form = UserProfileForm(instance=profile)\n\n    return render(request, 'settings.html', {'form': form})\n\n\n\n@login_required\ndef analysis(request):\n    # Add logic for the analysis view here\n    # Consider date ranges, charts, and data aggregation\n    today = datetime.date.today()\n    food_logs = FoodLog.objects.filter(user=request.user)\n    exercise_logs = ExerciseLog.objects.filter(user=request.user)\n\n    context = {\n        'food_logs': food_logs,\n        'exercise_logs': exercise_logs,\n    }\n    return render(request, 'analysis.html', context)\n\nimport datetime"}, {"file": "forms.py", "path": "calorie_tracker/forms.py", "code": "# calorie_tracker/forms.py\nfrom django import forms\nfrom .models import UserProfile, FoodLog, ExerciseLog, WaterLog, WeightLog\n\nclass UserProfileForm(forms.ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = ['age', 'gender', 'weight', 'height', 'weight_goal', 'calorie_target', 'unit_preference']\n\nclass FoodLogForm(forms.ModelForm):\n    class Meta:\n        model = FoodLog\n        fields = ['food', 'meal', 'portion_size']\n\nclass ExerciseLogForm(forms.ModelForm):\n    class Meta:\n        model = ExerciseLog\n        fields = ['exercise', 'duration', 'intensity']\n\nclass WaterLogForm(forms.ModelForm):\n    class Meta:\n        model = WaterLog\n        fields = ['amount']\n\nclass WeightLogForm(forms.ModelForm):\n    class Meta:\n        model = WeightLog\n        fields = ['weight']"}, {"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "# calorie_tracker/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup_view, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('profile_setup/', views.profile_setup, name='profile_setup'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('food_log/', views.food_log, name='food_log'),\n    path('exercise_log/', views.exercise_log, name='exercise_log'),\n    path('water_log/', views.water_log, name='water_log'),\n    path('weight_log/', views.weight_log, name='weight_log'),\n    path('settings/', views.settings, name='settings'),\n    path('analysis/', views.analysis, name='analysis'),\n]"}, {"file": "admin.py", "path": "calorie_tracker/admin.py", "code": "# calorie_tracker/admin.py\nfrom django.contrib import admin\nfrom .models import UserProfile, Food, FoodLog, Exercise, ExerciseLog, WaterLog, WeightLog\n\nadmin.site.register(UserProfile)\nadmin.site.register(Food)\nadmin.site.register(FoodLog)\nadmin.site.register(Exercise)\nadmin.site.register(ExerciseLog)\nadmin.site.register(WaterLog)\nadmin.site.register(WeightLog)"}, {"file": "settings.py", "path": "calorie_tracker_project/settings.py", "code": "# calorie_tracker_project/settings.py\n# Add 'calorie_tracker' to INSTALLED_APPS\n# Configure database settings\n# Configure static files settings\n# Add the following lines to the end of the file\nLOGIN_REDIRECT_URL = 'dashboard'\nLOGOUT_REDIRECT_URL = 'home'"}], "11": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    context = {\n        'welcome_message': 'Welcome to the Password Generator!',\n    }\n    return render(request, 'home.html', context)\n\n\ndef about(request):\n    context = {\n        'description': 'This website generates strong and secure passwords.',\n    }\n    return render(request, 'about.html', context)\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>{{ welcome_message }}</h1>\n    <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About</h1>\n    <p>{{ description }}</p>\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"}], "12": [{"file": "models.py", "path": "expense_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass ExpenseClaim(models.Model):\n    EXPENSE_TYPES = [\n        ('Travel', 'Travel'),\n        ('Labor', 'Labor'),\n        ('Management', 'Management'),\n        ('Equipment', 'Equipment'),\n    ]\n    STATUS_CHOICES = [\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected'),\n    ]\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    expense_type = models.CharField(max_length=20, choices=EXPENSE_TYPES)\n    date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField(blank=True, null=True)\n    supporting_document = models.FileField(upload_to='expense_documents/', blank=True, null=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')\n    approval_rejection_notes = models.TextField(blank=True, null=True)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f'Claim by {self.employee.username} - {self.expense_type} - {self.date}'\n\nclass Budget(models.Model):\n    EXPENSE_TYPES = [\n        ('Travel', 'Travel'),\n        ('Labor', 'Labor'),\n        ('Management', 'Management'),\n        ('Equipment', 'Equipment'),\n    ]\n    expense_type = models.CharField(max_length=20, choices=EXPENSE_TYPES, unique=True)\n    budget_limit = models.DecimalField(max_digits=10, decimal_places=2)\n    period_start = models.DateField()\n    period_end = models.DateField()\n\n    def __str__(self):\n        return f'{self.expense_type} Budget - {self.period_start} to {self.period_end}'"}, {"file": "views.py", "path": "expense_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required, user_passes_test\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.forms import AuthenticationForm, UserCreationForm\nfrom .models import ExpenseClaim, Budget\nfrom .forms import ExpenseClaimForm, BudgetForm\nfrom django.contrib import messages\n\ndef is_admin(user):\n    return user.is_staff\n\n@login_required\ndef employee_dashboard(request):\n    claims = ExpenseClaim.objects.filter(employee=request.user)\n    return render(request, 'employee_dashboard.html', {'claims': claims})\n\n@login_required\ndef submit_expense_claim(request):\n    if request.method == 'POST':\n        form = ExpenseClaimForm(request.POST, request.FILES)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            messages.success(request, 'Expense claim submitted successfully.')\n            return redirect('employee_dashboard')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = ExpenseClaimForm()\n    return render(request, 'submit_expense_claim.html', {'form': form})\n\n@login_required\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(ExpenseClaim, pk=claim_id)\n    if claim.employee != request.user and not request.user.is_staff:\n        messages.error(request, 'You do not have permission to view this claim.')\n        return redirect('employee_dashboard')\n    return render(request, 'view_claim_details.html', {'claim': claim})\n\n\n@login_required\ndef edit_pending_claim(request, claim_id):\n    claim = get_object_or_404(ExpenseClaim, pk=claim_id, employee=request.user, status='Pending')\n\n    if request.method == 'POST':\n        form = ExpenseClaimForm(request.POST, request.FILES, instance=claim)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Expense claim updated successfully.')\n            return redirect('employee_dashboard')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = ExpenseClaimForm(instance=claim)\n    return render(request, 'edit_pending_claim.html', {'form': form, 'claim': claim})\n\n@login_required\ndef delete_pending_claim(request, claim_id):\n    claim = get_object_or_404(ExpenseClaim, pk=claim_id, employee=request.user, status='Pending')\n    if request.method == 'POST':\n        claim.delete()\n        messages.success(request, 'Expense claim deleted successfully.')\n        return redirect('employee_dashboard')\n    return render(request, 'delete_pending_claim.html', {'claim': claim})\n\n\n@login_required\n@user_passes_test(is_admin)\ndef admin_dashboard(request):\n    claims = ExpenseClaim.objects.all()\n    return render(request, 'admin_dashboard.html', {'claims': claims})\n\n@login_required\n@user_passes_test(is_admin)\ndef filter_claims(request):\n    status = request.GET.get('status')\n    expense_type = request.GET.get('expense_type')\n    employee_id = request.GET.get('employee')\n\n    claims = ExpenseClaim.objects.all()\n\n    if status:\n        claims = claims.filter(status=status)\n    if expense_type:\n        claims = claims.filter(expense_type=expense_type)\n    if employee_id:\n        claims = claims.filter(employee_id=employee_id)\n\n    return render(request, 'admin_dashboard.html', {'claims': claims})\n\n\n@login_required\n@user_passes_test(is_admin)\ndef approve_reject_claim(request, claim_id):\n    claim = get_object_or_404(ExpenseClaim, pk=claim_id)\n    if request.method == 'POST':\n        status = request.POST.get('status')\n        notes = request.POST.get('notes')\n\n        if status in ['Approved', 'Rejected']:\n            claim.status = status\n            claim.approval_rejection_notes = notes\n            claim.save()\n            messages.success(request, f'Claim {status} successfully.')\n        else:\n            messages.error(request, 'Invalid status selected.')\n\n        return redirect('admin_dashboard')\n    return render(request, 'approve_reject_claim.html', {'claim': claim})\n\n@login_required\n@user_passes_test(is_admin)\ndef budget_management(request):\n    budgets = Budget.objects.all()\n    return render(request, 'budget_management.html', {'budgets': budgets})\n\n@login_required\n@user_passes_test(is_admin)\ndef set_budget_limit(request):\n    if request.method == 'POST':\n        form = BudgetForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Budget limit set successfully.')\n            return redirect('budget_management')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = BudgetForm()\n    return render(request, 'set_budget_limit.html', {'form': form})\n\n@login_required\n@user_passes_test(is_admin)\ndef view_budget_balances(request):\n    budgets = Budget.objects.all()\n    budget_balances = {}\n    for budget in budgets:\n        total_expenses = ExpenseClaim.objects.filter(expense_type=budget.expense_type, status='Approved', date__range=[budget.period_start, budget.period_end]).aggregate(models.Sum('amount'))['amount__sum'] or 0\n        balance = budget.budget_limit - total_expenses\n        budget_balances[budget.expense_type] = balance\n\n    return render(request, 'view_budget_balances.html', {'budget_balances': budget_balances, 'budgets': budgets})\n\n@login_required\n@user_passes_test(is_admin)\ndef generate_budget_report(request):\n    budgets = Budget.objects.all()\n    report_data = []\n\n    for budget in budgets:\n        total_expenses = ExpenseClaim.objects.filter(expense_type=budget.expense_type, status='Approved', date__range=[budget.period_start, budget.period_end]).aggregate(models.Sum('amount'))['amount__sum'] or 0\n        remaining_balance = budget.budget_limit - total_expenses\n        report_data.append({\n            'expense_type': budget.expense_type,\n            'budget_limit': budget.budget_limit,\n            'total_expenses': total_expenses,\n            'remaining_balance': remaining_balance\n        })\n\n    return render(request, 'generate_budget_report.html', {'report_data': report_data})\n\n@login_required\n@user_passes_test(is_admin)\ndef manage_users(request):\n    users = User.objects.all()\n    return render(request, 'manage_users.html', {'users': users})\n\n@login_required\n@user_passes_test(is_admin)\ndef create_user(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'User created successfully.')\n            return redirect('manage_users')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = UserCreationForm()\n    return render(request, 'create_user.html', {'form': form})\n\n@login_required\n@user_passes_test(is_admin)\ndef edit_user(request, user_id):\n    user = get_object_or_404(User, pk=user_id)\n    if request.method == 'POST':\n        # Consider using a custom user form for editing\n        form = UserCreationForm(request.POST, instance=user)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'User updated successfully.')\n            return redirect('manage_users')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = UserCreationForm(instance=user)\n    return render(request, 'edit_user.html', {'form': form, 'user': user})\n\n@login_required\n@user_passes_test(is_admin)\ndef delete_user(request, user_id):\n    user = get_object_or_404(User, pk=user_id)\n    if request.method == 'POST':\n        user.delete()\n        messages.success(request, 'User deleted successfully.')\n        return redirect('manage_users')\n    return render(request, 'delete_user.html', {'user': user})\n\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                messages.info(request, f\"You are now logged in as {username}.\")\n                if user.is_staff:\n                    return redirect('admin_dashboard')\n                else:\n                    return redirect('employee_dashboard')\n            else:\n                messages.error(request, \"Invalid username or password.\")\n        else:\n            messages.error(request, \"Invalid username or password.\")\n    form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\n\ndef user_logout(request):\n    logout(request)\n    messages.info(request, \"You have successfully logged out.\")\n    return redirect('login')\n\n\ndef password_reset(request):\n    #Implement Password Reset Functionality (using Django's built-in password reset views)\n    return render(request, 'password_reset.html')"}, {"file": "forms.py", "path": "expense_app/forms.py", "code": "from django import forms\nfrom .models import ExpenseClaim, Budget\n\nclass ExpenseClaimForm(forms.ModelForm):\n    class Meta:\n        model = ExpenseClaim\n        fields = ['expense_type', 'date', 'amount', 'description', 'supporting_document']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'})\n        }\n\nclass BudgetForm(forms.ModelForm):\n    class Meta:\n        model = Budget\n        fields = ['expense_type', 'budget_limit', 'period_start', 'period_end']\n        widgets = {\n            'period_start': forms.DateInput(attrs={'type': 'date'})\n            , 'period_end': forms.DateInput(attrs={'type': 'date'}) \n        }"}, {"file": "urls.py", "path": "expense_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('employee/', views.employee_dashboard, name='employee_dashboard'),\n    path('employee/submit_claim/', views.submit_expense_claim, name='submit_expense_claim'),\n    path('employee/claim/<int:claim_id>/', views.view_claim_details, name='view_claim_details'),\n    path('employee/claim/<int:claim_id>/edit/', views.edit_pending_claim, name='edit_pending_claim'),\n    path('employee/claim/<int:claim_id>/delete/', views.delete_pending_claim, name='delete_pending_claim'),\n\n    path('admin/', views.admin_dashboard, name='admin_dashboard'),\n    path('admin/filter_claims/', views.filter_claims, name='filter_claims'),\n    path('admin/claim/<int:claim_id>/approve_reject/', views.approve_reject_claim, name='approve_reject_claim'),\n    path('admin/budget_management/', views.budget_management, name='budget_management'),\n    path('admin/set_budget_limit/', views.set_budget_limit, name='set_budget_limit'),\n    path('admin/view_budget_balances/', views.view_budget_balances, name='view_budget_balances'),\n    path('admin/generate_budget_report/', views.generate_budget_report, name='generate_budget_report'),\n    path('admin/manage_users/', views.manage_users, name='manage_users'),\n    path('admin/create_user/', views.create_user, name='create_user'),\n    path('admin/user/<int:user_id>/edit/', views.edit_user, name='edit_user'),\n    path('admin/user/<int:user_id>/delete/', views.delete_user, name='delete_user'),\n\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n    path('password_reset/', views.password_reset, name='password_reset'),\n]"}, {"file": "settings.py", "path": "expense_project/settings.py", "code": "# Add 'expense_app' to INSTALLED_APPS\n\nINSTALLED_APPS = [\n    ...\n    'expense_app',\n]\n\n# Add the following to the bottom of the file, adjusting the directory name if needed\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n# Configure Login/Logout redirects.\nLOGIN_REDIRECT_URL = '/employee/' # Or '/admin/' depending on the user's role after login\nLOGOUT_REDIRECT_URL = '/login/'\n"}, {"file": "admin.py", "path": "expense_app/admin.py", "code": "from django.contrib import admin\nfrom .models import ExpenseClaim, Budget\n\nadmin.site.register(ExpenseClaim)\nadmin.site.register(Budget)"}, {"file": "employee_dashboard.html", "path": "expense_app/templates/employee_dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Employee Dashboard</h1>\n\n  <a href=\"{% url 'submit_expense_claim' %}\">Submit Expense Claim</a>\n\n  <h2>Your Expense Claims</h2>\n  <ul>\n    {% for claim in claims %}\n      <li>\n        {{ claim.expense_type }} - {{ claim.date }} - ${{ claim.amount }} - {{ claim.status }}\n        <a href=\"{% url 'view_claim_details' claim.id %}\">View Details</a>\n        {% if claim.status == 'Pending' %}\n          <a href=\"{% url 'edit_pending_claim' claim.id %}\">Edit</a>\n          <a href=\"{% url 'delete_pending_claim' claim.id %}\">Delete</a>\n        {% endif %}\n      </li>\n    {% empty %}\n      <li>No expense claims submitted.</li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}, {"file": "admin_dashboard.html", "path": "expense_app/templates/admin_dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Admin Dashboard</h1>\n\n  <form action=\"{% url 'filter_claims' %}\" method=\"get\">\n    <label for=\"status\">Status:</label>\n    <select name=\"status\" id=\"status\">\n      <option value=\"\">All</option>\n      <option value=\"Pending\">Pending</option>\n      <option value=\"Approved\">Approved</option>\n      <option value=\"Rejected\">Rejected</option>\n    </select>\n    <label for=\"expense_type\">Expense Type:</label>\n    <select name=\"expense_type\" id=\"expense_type\">\n      <option value=\"\">All</option>\n      <option value=\"Travel\">Travel</option>\n      <option value=\"Labor\">Labor</option>\n      <option value=\"Management\">Management</option>\n      <option value=\"Equipment\">Equipment</option>\n    </select>\n    <label for=\"employee\">Employee ID:</label>\n    <input type=\"number\" name=\"employee\" id=\"employee\">\n\n    <button type=\"submit\">Filter</button>\n  </form>\n\n\n  <h2>All Expense Claims</h2>\n  <ul>\n    {% for claim in claims %}\n      <li>\n        {{ claim.employee.username }} - {{ claim.expense_type }} - {{ claim.date }} - ${{ claim.amount }} - {{ claim.status }}\n        <a href=\"{% url 'view_claim_details' claim.id %}\">View Details</a>\n        <a href=\"{% url 'approve_reject_claim' claim.id %}\">Approve/Reject</a>\n      </li>\n    {% empty %}\n      <li>No expense claims submitted.</li>\n    {% endfor %}\n  </ul>\n\n    <a href=\"{% url 'budget_management' %}\">Budget Management</a>\n    <a href=\"{% url 'manage_users' %}\">Manage Users</a>\n\n{% endblock %}"}, {"file": "base.html", "path": "expense_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Expense Management System</title>\n</head>\n<body>\n    <nav>\n        <ul>\n            {% if user.is_authenticated %}\n                <li>Welcome, {{ user.username }}!</li>\n                <li><a href=\"{% url 'logout' %}\">Logout</a></li>\n                {% if user.is_staff %}\n                    <li><a href=\"{% url 'admin_dashboard' %}\">Admin Dashboard</a></li>\n                {% else %}\n                    <li><a href=\"{% url 'employee_dashboard' %}\">Employee Dashboard</a></li>\n                {% endif %}\n            {% else %}\n                <li><a href=\"{% url 'login' %}\">Login</a></li>\n            {% endif %}\n        </ul>\n    </nav>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "login.html", "path": "expense_app/templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Login</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Login</button>\n  </form>\n  <a href=\"{% url 'password_reset' %}\">Reset Password</a>\n{% endblock %}"}, {"file": "password_reset.html", "path": "expense_app/templates/password_reset.html", "code": "<h1>Password Reset</h1>\n<p>Implement Django's built-in password reset views here</p>\n"}, {"file": "submit_expense_claim.html", "path": "expense_app/templates/submit_expense_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Submit Expense Claim</h1>\n  <form method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit</button>\n  </form>\n{% endblock %}"}, {"file": "view_claim_details.html", "path": "expense_app/templates/view_claim_details.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Claim Details</h1>\n  <p>Expense Type: {{ claim.expense_type }}</p>\n  <p>Date: {{ claim.date }}</p>\n  <p>Amount: ${{ claim.amount }}</p>\n  <p>Description: {{ claim.description }}</p>\n  {% if claim.supporting_document %}\n    <p>Supporting Document: <a href=\"{{ claim.supporting_document.url }}\">View</a></p>\n  {% endif %}\n  <p>Status: {{ claim.status }}</p>\n  {% if claim.approval_rejection_notes %}\n    <p>Notes: {{ claim.approval_rejection_notes }}</p>\n  {% endif %}\n\n  {% if user.is_staff %}\n    <a href=\"{% url 'approve_reject_claim' claim.id %}\">Approve/Reject</a>\n  {% endif %}\n\n  <a href=\"{% if user.is_staff %}{% url 'admin_dashboard' %}{% else %}{% url 'employee_dashboard' %}{% endif %}\">Back to Dashboard</a>\n{% endblock %}"}, {"file": "edit_pending_claim.html", "path": "expense_app/templates/edit_pending_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Edit Pending Claim</h1>\n  <form method=\"post\" enctype=\"multipart/form-data\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Update</button>\n  </form>\n{% endblock %}"}, {"file": "delete_pending_claim.html", "path": "expense_app/templates/delete_pending_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Delete Pending Claim</h1>\n  <p>Are you sure you want to delete this claim?</p>\n  <form method=\"post\">\n    {% csrf_token %}\n    <button type=\"submit\">Delete</button>\n  </form>\n  <a href=\"{% url 'employee_dashboard' %}\">Cancel</a>\n{% endblock %}"}, {"file": "budget_management.html", "path": "expense_app/templates/budget_management.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Budget Management</h1>\n    <a href=\"{% url 'set_budget_limit' %}\">Set Budget Limit</a>\n    <a href=\"{% url 'view_budget_balances' %}\">View Budget Balances</a>\n    <a href=\"{% url 'generate_budget_report' %}\">Generate Budget Report</a>\n\n    <h2>Current Budgets</h2>\n    <ul>\n        {% for budget in budgets %}\n            <li>{{ budget.expense_type }} - Limit: ${{ budget.budget_limit }} ({{ budget.period_start }} - {{ budget.period_end }})</li>\n        {% empty %}\n            <li>No budgets set.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "set_budget_limit.html", "path": "expense_app/templates/set_budget_limit.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Set Budget Limit</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Set Limit</button>\n    </form>\n{% endblock %}"}, {"file": "view_budget_balances.html", "path": "expense_app/templates/view_budget_balances.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>View Budget Balances</h1>\n\n    {% for expense_type, balance in budget_balances.items %}\n        <p>{{ expense_type }}: ${{ balance }} remaining</p>\n    {% endfor %}\n\n{% endblock %}"}, {"file": "generate_budget_report.html", "path": "expense_app/templates/generate_budget_report.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Budget Report</h1>\n\n    <table>\n        <thead>\n            <tr>\n                <th>Expense Type</th>\n                <th>Budget Limit</th>\n                <th>Total Expenses</th>\n                <th>Remaining Balance</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for data in report_data %}\n                <tr>\n                    <td>{{ data.expense_type }}</td>\n                    <td>${{ data.budget_limit }}</td>\n                    <td>${{ data.total_expenses }}</td>\n                    <td>${{ data.remaining_balance }}</td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n{% endblock %}"}, {"file": "manage_users.html", "path": "expense_app/templates/manage_users.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Manage Users</h1>\n    <a href=\"{% url 'create_user' %}\">Create New User</a>\n\n    <h2>Existing Users</h2>\n    <ul>\n        {% for user in users %}\n            <li>{{ user.username }} - <a href=\"{% url 'edit_user' user.id %}\">Edit</a> - <a href=\"{% url 'delete_user' user.id %}\">Delete</a></li>\n        {% empty %}\n            <li>No users found.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "create_user.html", "path": "expense_app/templates/create_user.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Create New User</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Create User</button>\n    </form>\n{% endblock %}"}, {"file": "edit_user.html", "path": "expense_app/templates/edit_user.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Edit User</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Update User</button>\n    </form>\n{% endblock %}"}, {"file": "delete_user.html", "path": "expense_app/templates/delete_user.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Delete User</h1>\n    <p>Are you sure you want to delete {{ user.username }}?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Delete User</button>\n    </form>\n{% endblock %}"}, {"file": "approve_reject_claim.html", "path": "expense_app/templates/approve_reject_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Approve/Reject Claim</h1>\n    <p>Claim Details:</p>\n    <p>Expense Type: {{ claim.expense_type }}</p>\n    <p>Date: {{ claim.date }}</p>\n    <p>Amount: ${{ claim.amount }}</p>\n    <p>Description: {{ claim.description }}</p>\n\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"status\">Status:</label>\n        <select name=\"status\" id=\"status\">\n            <option value=\"Approved\">Approved</option>\n            <option value=\"Rejected\">Rejected</option>\n        </select><br><br>\n        <label for=\"notes\">Notes:</label><br>\n        <textarea name=\"notes\" id=\"notes\" rows=\"4\" cols=\"50\"></textarea><br><br>\n        <button type=\"submit\">Submit</button>\n    </form>\n{% endblock %}"}], "13": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, choices=[('Male', 'Male'), ('Female', 'Female'), ('Other', 'Other')], blank=True)\n    company = models.CharField(max_length=255, blank=True)\n    phone_number = models.CharField(max_length=20, blank=True)\n    preferred_products = models.ManyToManyField('Product', related_name='customers', blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'"}, {"file": "forms.py", "path": "myapp/forms.py", "code": "from django import forms\nfrom .models import Customer, Product, PurchaseRecord\n\nclass CustomerForm(forms.ModelForm):\n    class Meta:\n        model = Customer\n        fields = ['name', 'birthday', 'age', 'sex', 'company', 'phone_number', 'preferred_products']\n        widgets = {\n            'birthday': forms.DateInput(attrs={'type': 'date'}),\n        }\n\nclass ProductForm(forms.ModelForm):\n    class Meta:\n        model = Product\n        fields = ['name', 'category', 'recommended_price']\n\nclass PurchaseRecordForm(forms.ModelForm):\n    class Meta:\n        model = PurchaseRecord\n        fields = ['datetime', 'product', 'customer', 'quantity', 'amount']\n        widgets = {\n            'datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.core.paginator import Paginator\nfrom django.contrib.auth.decorators import user_passes_test\nfrom .models import Customer, Product, PurchaseRecord\nfrom .forms import CustomerForm, ProductForm, PurchaseRecordForm\n\n# Customer Management Views\n\ndef customer_list(request):\n    customers = Customer.objects.all()\n    paginator = Paginator(customers, 10)  # Show 10 customers per page.\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    return render(request, 'customer_list.html', {'page_obj': page_obj})\n\n\ndef customer_detail(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    return render(request, 'customer_detail.html', {'customer': customer})\n\n\ndef customer_create(request):\n    if request.method == 'POST':\n        form = CustomerForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_list')\n    else:\n        form = CustomerForm()\n    return render(request, 'customer_form.html', {'form': form})\n\n\ndef customer_update(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        form = CustomerForm(request.POST, instance=customer)\n        if form.is_valid():\n            form.save()\n            return redirect('customer_detail', pk=customer.pk)\n    else:\n        form = CustomerForm(instance=customer)\n    return render(request, 'customer_form.html', {'form': form})\n\n\ndef customer_delete(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    if request.method == 'POST':\n        customer.delete()\n        return redirect('customer_list')\n    return render(request, 'customer_confirm_delete.html', {'customer': customer})\n\ndef customer_search(request):\n    query = request.GET.get('q')\n    if query:\n        customers = Customer.objects.filter(name__icontains=query) | Customer.objects.filter(company__icontains=query) | Customer.objects.filter(phone_number__icontains=query)\n    else:\n        customers = Customer.objects.all()\n    return render(request, 'customer_search.html', {'customers': customers, 'query': query})\n\n# Product Management Views\n\ndef product_list(request):\n    products = Product.objects.all()\n    paginator = Paginator(products, 10)  # Show 10 products per page.\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    return render(request, 'product_list.html', {'page_obj': page_obj})\n\n\ndef product_detail(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    return render(request, 'product_detail.html', {'product': product})\n\n\ndef product_create(request):\n    if request.method == 'POST':\n        form = ProductForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('product_list')\n    else:\n        form = ProductForm()\n    return render(request, 'product_form.html', {'form': form})\n\n\ndef product_update(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    if request.method == 'POST':\n        form = ProductForm(request.POST, instance=product)\n        if form.is_valid():\n            form.save()\n            return redirect('product_detail', pk=product.pk)\n    else:\n        form = ProductForm(instance=product)\n    return render(request, 'product_form.html', {'form': form})\n\n\ndef product_delete(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    if request.method == 'POST':\n        product.delete()\n        return redirect('product_list')\n    return render(request, 'product_confirm_delete.html', {'product': product})\n\ndef product_search(request):\n    query = request.GET.get('q')\n    if query:\n        products = Product.objects.filter(name__icontains=query) | Product.objects.filter(category__icontains=query)\n    else:\n        products = Product.objects.all()\n    return render(request, 'product_search.html', {'products': products, 'query': query})\n\n# Purchase Record Management Views\n\ndef purchase_record_list(request):\n    purchase_records = PurchaseRecord.objects.all()\n    paginator = Paginator(purchase_records, 10)  # Show 10 records per page.\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n    return render(request, 'purchase_record_list.html', {'page_obj': page_obj})\n\n\ndef purchase_record_detail(request, pk):\n    purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\n    return render(request, 'purchase_record_detail.html', {'purchase_record': purchase_record})\n\n\ndef purchase_record_create(request):\n    if request.method == 'POST':\n        form = PurchaseRecordForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('purchase_record_list')\n    else:\n        form = PurchaseRecordForm()\n    return render(request, 'purchase_record_form.html', {'form': form})\n\n\ndef purchase_record_update(request, pk):\n    purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\n    if request.method == 'POST':\n        form = PurchaseRecordForm(request.POST, instance=purchase_record)\n        if form.is_valid():\n            form.save()\n            return redirect('purchase_record_detail', pk=purchase_record.pk)\n    else:\n        form = PurchaseRecordForm(instance=purchase_record)\n    return render(request, 'purchase_record_form.html', {'form': form})\n\n\ndef purchase_record_delete(request, pk):\n    purchase_record = get_object_or_404(PurchaseRecord, pk=pk)\n    if request.method == 'POST':\n        purchase_record.delete()\n        return redirect('purchase_record_list')\n    return render(request, 'purchase_record_confirm_delete.html', {'purchase_record': purchase_record})\n\ndef purchase_record_search(request):\n    query = request.GET.get('q')\n    if query:\n       #This search is very basic.  Improve it with date ranges and more specific fields\n        purchase_records = PurchaseRecord.objects.filter(customer__name__icontains=query) | PurchaseRecord.objects.filter(product__name__icontains=query)\n    else:\n        purchase_records = PurchaseRecord.objects.all()\n    return render(request, 'purchase_record_search.html', {'purchase_records': purchase_records, 'query': query})\n\n# Marketing Analysis Views (Administrator Only)\n\ndef is_administrator(user):\n    return user.is_staff  # Assuming superuser is admin\n\n@user_passes_test(is_administrator)\ndef sales_by_product(request):\n    # Implement logic to generate sales by product report\n    return render(request, 'sales_by_product.html')\n\n@user_passes_test(is_administrator)\ndef sales_by_category(request):\n    # Implement logic to generate sales by category report\n    return render(request, 'sales_by_category.html')\n\n@user_passes_test(is_administrator)\ndef sales_by_customer(request):\n    # Implement logic to generate sales by customer report\n    return render(request, 'sales_by_customer.html')\n\n@user_passes_test(is_administrator)\ndef top_selling_products(request):\n    # Implement logic to identify and display top-selling products\n    return render(request, 'top_selling_products.html')\n\n@user_passes_test(is_administrator)\ndef customer_purchase_trends(request):\n    # Implement logic to analyze customer purchase behavior\n    return render(request, 'customer_purchase_trends.html')\n\n@user_passes_test(is_administrator)\ndef generate_sales_report(request):\n    # Implement logic to generate customizable sales reports\n    return render(request, 'generate_sales_report.html')\n"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Customer Management URLs\n    path('customers/', views.customer_list, name='customer_list'),\n    path('customers/<int:pk>/', views.customer_detail, name='customer_detail'),\n    path('customers/create/', views.customer_create, name='customer_create'),\n    path('customers/<int:pk>/update/', views.customer_update, name='customer_update'),\n    path('customers/<int:pk>/delete/', views.customer_delete, name='customer_delete'),\n    path('customers/search/', views.customer_search, name='customer_search'),\n\n    # Product Management URLs\n    path('products/', views.product_list, name='product_list'),\n    path('products/<int:pk>/', views.product_detail, name='product_detail'),\n    path('products/create/', views.product_create, name='product_create'),\n    path('products/<int:pk>/update/', views.product_update, name='product_update'),\n    path('products/<int:pk>/delete/', views.product_delete, name='product_delete'),\n    path('products/search/', views.product_search, name='product_search'),\n\n    # Purchase Record Management URLs\n    path('purchase_records/', views.purchase_record_list, name='purchase_record_list'),\n    path('purchase_records/<int:pk>/', views.purchase_record_detail, name='purchase_record_detail'),\n    path('purchase_records/create/', views.purchase_record_create, name='purchase_record_create'),\n    path('purchase_records/<int:pk>/update/', views.purchase_record_update, name='purchase_record_update'),\n    path('purchase_records/<int:pk>/delete/', views.purchase_record_delete, name='purchase_record_delete'),\n    path('purchase_records/search/', views.purchase_record_search, name='purchase_record_search'),\n\n    # Marketing Analysis URLs (Administrator Only)\n    path('sales_by_product/', views.sales_by_product, name='sales_by_product'),\n    path('sales_by_category/', views.sales_by_category, name='sales_by_category'),\n    path('sales_by_customer/', views.sales_by_customer, name='sales_by_customer'),\n    path('top_selling_products/', views.top_selling_products, name='top_selling_products'),\n    path('customer_purchase_trends/', views.customer_purchase_trends, name='customer_purchase_trends'),\n    path('generate_sales_report/', views.generate_sales_report, name='generate_sales_report'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# ... other settings\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',  # Add your app\n]\n\n# ... other settings\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# Database configuration (example using SQLite)\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\n"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)"}, {"file": "customer_list.html", "path": "myapp/templates/customer_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Customer List</h1>\n    <a href=\"{% url 'customer_create' %}\">Add Customer</a>\n    <a href=\"{% url 'customer_search' %}\">Search Customers</a>\n    <ul>\n        {% for customer in page_obj %}\n            <li><a href=\"{% url 'customer_detail' customer.pk %}\">{{ customer.name }}</a></li>\n        {% endfor %}\n    </ul>\n    <div class=\"pagination\">\n        <span class=\"step-links\">\n            {% if page_obj.has_previous %}\n                <a href=\"?page=1\">&laquo; first</a>\n                <a href=\"?page={{ page_obj.previous_page_number }}\">previous</a>\n            {% endif %}\n\n            <span class=\"current\">\n                Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.\n            </span>\n\n            {% if page_obj.has_next %}\n                <a href=\"?page={{ page_obj.next_page_number }}\">next</a>\n                <a href=\"?page={{ page_obj.paginator.num_pages }}\">last &raquo;</a>\n            {% endif %}\n        </span>\n    </div>\n{% endblock %}"}, {"file": "customer_detail.html", "path": "myapp/templates/customer_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Customer Details</h1>\n    <p>Name: {{ customer.name }}</p>\n    <p>Birthday: {{ customer.birthday }}</p>\n    <p>Age: {{ customer.age }}</p>\n    <p>Sex: {{ customer.sex }}</p>\n    <p>Company: {{ customer.company }}</p>\n    <p>Phone Number: {{ customer.phone_number }}</p>\n    <p>Preferred Products:</p>\n    <ul>\n        {% for product in customer.preferred_products.all %}\n            <li>{{ product.name }}</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'customer_update' customer.pk %}\">Edit Customer</a>\n    <a href=\"{% url 'customer_delete' customer.pk %}\">Delete Customer</a>\n    <a href=\"{% url 'customer_list' %}\">Back to List</a>\n{% endblock %}"}, {"file": "customer_form.html", "path": "myapp/templates/customer_form.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Customer Form</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n        <a href=\"{% url 'customer_list' %}\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "customer_search.html", "path": "myapp/templates/customer_search.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Customer Search</h1>\n    <form method=\"get\">\n        <input type=\"text\" name=\"q\" value=\"{{ query|default:'' }}\" placeholder=\"Search by name, company, or phone number\">\n        <button type=\"submit\">Search</button>\n    </form>\n\n    {% if customers %}\n        <h2>Search Results</h2>\n        <ul>\n            {% for customer in customers %}\n                <li><a href=\"{% url 'customer_detail' customer.pk %}\">{{ customer.name }}</a></li>\n            {% endfor %}\n        </ul>\n    {% elif query %}\n        <p>No customers found matching your search criteria.</p>\n    {% endif %}\n    <a href=\"{% url 'customer_list' %}\">Back to List</a>\n{% endblock %}"}, {"file": "customer_confirm_delete.html", "path": "myapp/templates/customer_confirm_delete.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Confirm Delete</h1>\n    <p>Are you sure you want to delete {{ customer.name }}?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Yes, delete</button>\n        <a href=\"{% url 'customer_detail' customer.pk %}\">No, cancel</a>\n    </form>\n{% endblock %}"}, {"file": "product_list.html", "path": "myapp/templates/product_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Product List</h1>\n    <a href=\"{% url 'product_create' %}\">Add Product</a>\n    <a href=\"{% url 'product_search' %}\">Search Products</a>\n    <ul>\n        {% for product in page_obj %}\n            <li><a href=\"{% url 'product_detail' product.pk %}\">{{ product.name }}</a></li>\n        {% endfor %}\n    </ul>\n    <div class=\"pagination\">\n        <span class=\"step-links\">\n            {% if page_obj.has_previous %}\n                <a href=\"?page=1\">&laquo; first</a>\n                <a href=\"?page={{ page_obj.previous_page_number }}\">previous</a>\n            {% endif %}\n\n            <span class=\"current\">\n                Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.\n            </span>\n\n            {% if page_obj.has_next %}\n                <a href=\"?page={{ page_obj.next_page_number }}\">next</a>\n                <a href=\"?page={{ page_obj.paginator.num_pages }}\">last &raquo;</a>\n            {% endif %}\n        </span>\n    </div>\n{% endblock %}"}, {"file": "product_detail.html", "path": "myapp/templates/product_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Product Details</h1>\n    <p>Name: {{ product.name }}</p>\n    <p>Category: {{ product.category }}</p>\n    <p>Recommended Price: {{ product.recommended_price }}</p>\n    <a href=\"{% url 'product_update' product.pk %}\">Edit Product</a>\n    <a href=\"{% url 'product_delete' product.pk %}\">Delete Product</a>\n    <a href=\"{% url 'product_list' %}\">Back to List</a>\n{% endblock %}"}, {"file": "product_form.html", "path": "myapp/templates/product_form.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Product Form</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n        <a href=\"{% url 'product_list' %}\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "product_search.html", "path": "myapp/templates/product_search.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Product Search</h1>\n    <form method=\"get\">\n        <input type=\"text\" name=\"q\" value=\"{{ query|default:'' }}\" placeholder=\"Search by name or category\">\n        <button type=\"submit\">Search</button>\n    </form>\n\n    {% if products %}\n        <h2>Search Results</h2>\n        <ul>\n            {% for product in products %}\n                <li><a href=\"{% url 'product_detail' product.pk %}\">{{ product.name }}</a></li>\n            {% endfor %}\n        </ul>\n    {% elif query %}\n        <p>No products found matching your search criteria.</p>\n    {% endif %}\n    <a href=\"{% url 'product_list' %}\">Back to List</a>\n{% endblock %}"}, {"file": "product_confirm_delete.html", "path": "myapp/templates/product_confirm_delete.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Confirm Delete</h1>\n    <p>Are you sure you want to delete {{ product.name }}?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Yes, delete</button>\n        <a href=\"{% url 'product_detail' product.pk %}\">No, cancel</a>\n    </form>\n{% endblock %}"}, {"file": "purchase_record_list.html", "path": "myapp/templates/purchase_record_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Purchase Record List</h1>\n    <a href=\"{% url 'purchase_record_create' %}\">Add Purchase Record</a>\n    <a href=\"{% url 'purchase_record_search' %}\">Search Purchase Records</a>\n    <ul>\n        {% for record in page_obj %}\n            <li><a href=\"{% url 'purchase_record_detail' record.pk %}\">{{ record.customer.name }} - {{ record.product.name }} - {{ record.datetime }}</a></li>\n        {% endfor %}\n    </ul>\n    <div class=\"pagination\">\n        <span class=\"step-links\">\n            {% if page_obj.has_previous %}\n                <a href=\"?page=1\">&laquo; first</a>\n                <a href=\"?page={{ page_obj.previous_page_number }}\">previous</a>\n            {% endif %}\n\n            <span class=\"current\">\n                Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.\n            </span>\n\n            {% if page_obj.has_next %}\n                <a href=\"?page={{ page_obj.next_page_number }}\">next</a>\n                <a href=\"?page={{ page_obj.paginator.num_pages }}\">last &raquo;</a>\n            {% endif %}\n        </span>\n    </div>\n{% endblock %}"}, {"file": "purchase_record_detail.html", "path": "myapp/templates/purchase_record_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Purchase Record Details</h1>\n    <p>Datetime: {{ purchase_record.datetime }}</p>\n    <p>Product: {{ purchase_record.product.name }}</p>\n    <p>Customer: {{ purchase_record.customer.name }}</p>\n    <p>Quantity: {{ purchase_record.quantity }}</p>\n    <p>Amount: {{ purchase_record.amount }}</p>\n    <a href=\"{% url 'purchase_record_update' purchase_record.pk %}\">Edit Purchase Record</a>\n    <a href=\"{% url 'purchase_record_delete' purchase_record.pk %}\">Delete Purchase Record</a>\n    <a href=\"{% url 'purchase_record_list' %}\">Back to List</a>\n{% endblock %}"}, {"file": "purchase_record_form.html", "path": "myapp/templates/purchase_record_form.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Purchase Record Form</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n        <a href=\"{% url 'purchase_record_list' %}\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "purchase_record_search.html", "path": "myapp/templates/purchase_record_search.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Purchase Record Search</h1>\n    <form method=\"get\">\n        <input type=\"text\" name=\"q\" value=\"{{ query|default:'' }}\" placeholder=\"Search by customer or product\">\n        <button type=\"submit\">Search</button>\n    </form>\n\n    {% if purchase_records %}\n        <h2>Search Results</h2>\n        <ul>\n            {% for record in purchase_records %}\n                <li><a href=\"{% url 'purchase_record_detail' record.pk %}\">{{ record.customer.name }} - {{ record.product.name }} - {{ record.datetime }}</a></li>\n            {% endfor %}\n        </ul>\n    {% elif query %}\n        <p>No purchase records found matching your search criteria.</p>\n    {% endif %}\n    <a href=\"{% url 'purchase_record_list' %}\">Back to List</a>\n{% endblock %}"}, {"file": "purchase_record_confirm_delete.html", "path": "myapp/templates/purchase_record_confirm_delete.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Confirm Delete</h1>\n    <p>Are you sure you want to delete this purchase record?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Yes, delete</button>\n        <a href=\"{% url 'purchase_record_detail' purchase_record.pk %}\">No, cancel</a>\n    </form>\n{% endblock %}"}, {"file": "sales_by_product.html", "path": "myapp/templates/sales_by_product.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Sales by Product (Administrator Only)</h1>\n    <!-- Implement report display here -->\n    <p>Report content goes here.</p>\n{% endblock %}"}, {"file": "sales_by_category.html", "path": "myapp/templates/sales_by_category.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Sales by Category (Administrator Only)</h1>\n    <!-- Implement report display here -->\n    <p>Report content goes here.</p>\n{% endblock %}"}, {"file": "sales_by_customer.html", "path": "myapp/templates/sales_by_customer.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Sales by Customer (Administrator Only)</h1>\n    <!-- Implement report display here -->\n    <p>Report content goes here.</p>\n{% endblock %}"}, {"file": "top_selling_products.html", "path": "myapp/templates/top_selling_products.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Top Selling Products (Administrator Only)</h1>\n    <!-- Implement report display here -->\n    <p>Report content goes here.</p>\n{% endblock %}"}, {"file": "customer_purchase_trends.html", "path": "myapp/templates/customer_purchase_trends.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Customer Purchase Trends (Administrator Only)</h1>\n    <!-- Implement report display here -->\n    <p>Report content goes here.</p>\n{% endblock %}"}, {"file": "generate_sales_report.html", "path": "myapp/templates/generate_sales_report.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Generate Sales Report (Administrator Only)</h1>\n    <!-- Implement report generation form here -->\n    <p>Report generation form goes here.</p>\n{% endblock %}"}, {"file": "base.html", "path": "myapp/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% block title %}My App{% endblock %}</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "14": [{"file": "views.py", "path": "helloworld/views.py", "code": "from django.shortcuts import render\n\ndef helloworld_view(request):\n    return render(request, 'helloworld/helloworld.html')"}, {"file": "urls.py", "path": "helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.helloworld_view, name='helloworld'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('helloworld/', include('helloworld.urls')),\n]"}, {"file": "helloworld.html", "path": "helloworld/templates/helloworld/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello, World!</title>\n</head>\n<body>\n    <h1>Hello, world!</h1>\n</body>\n</html>"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "homepage.html", "path": "myapp/templates/homepage.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Homepage</title>\n</head>\n<body>\n    <h1>Welcome to the Homepage!</h1>\n    <a href=\"{% url 'helloworld' %}\"><button>Go to Hello World</button></a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n</head>\n<body>\n    <h1>Hello, world!</h1>\n</body>\n</html>"}], "16": [{"file": "input_handler.py", "path": "src/input_handler.py", "code": "import pandas as pd\n\nclass InputHandler:\n    def __init__(self, file_path):\n        self.file_path = file_path\n\n    def read_excel(self):\n        try:\n            df = pd.read_excel(self.file_path)\n            return df\n        except FileNotFoundError:\n            raise FileNotFoundError(\"Input file not found.\")\n        except Exception:\n            raise Exception(\"Error reading Excel file.\")\n\n    def verify_file_format(self):\n        if not self.file_path.endswith('.xlsx'):\n            raise ValueError(\"Invalid file format. Only .xlsx files are supported.\")\n\n    def validate_header(self, df):\n        expected_headers = ['#', 'Name', 'Weekday', 'Time']\n        if not all(header in df.columns for header in expected_headers):\n            raise ValueError(\"Missing header(s) in the input file.\")\n\n    def validate_time_options(self, df):\n        valid_time_options = ['First period', 'Second period', 'Third period', 'Fourth period']\n        if not df['Time'].isin(valid_time_options).all():\n            raise ValueError(\"Invalid time value(s) in the 'Time' column.\")\n\n    def process_input(self):\n        self.verify_file_format()\n        df = self.read_excel()\n        self.validate_header(df)\n        self.validate_time_options(df)\n        return df"}, {"file": "data_processor.py", "path": "src/data_processor.py", "code": "import pandas as pd\n\nclass DataProcessor:\n    def __init__(self):\n        pass\n\n    def extract_data(self, df):\n        # This is a placeholder.  The actual extraction depends on the dataframe format\n        data = df.to_dict('records')  # Example: Convert DataFrame to a list of dictionaries\n        return data\n\n    def transform_data(self, data):\n        subject_table = {}\n        for entry in data:\n            weekday = entry['Weekday']\n            time_slot = entry['Time']\n            subject_name = entry['Name']  # Or however the subject name is accessed\n\n            if weekday not in subject_table:\n                subject_table[weekday] = {}\n\n            subject_table[weekday][time_slot] = subject_name # Or the entire entry\n\n        return subject_table"}, {"file": "output_handler.py", "path": "src/output_handler.py", "code": "import pandas as pd\nimport openpyxl\nfrom openpyxl.utils.dataframe import dataframe_to_rows\nfrom openpyxl.styles import Font\n\nclass OutputHandler:\n    def __init__(self, output_file_path):\n        self.output_file_path = output_file_path\n\n    def create_excel_file(self):\n        workbook = openpyxl.Workbook()\n        self.workbook = workbook\n        self.sheet = workbook.active\n\n    def write_subject_table_to_excel(self, subject_table):\n        # First, determine the column order based on available time slots\n        all_time_slots = set()\n        for weekday in subject_table.keys():\n            all_time_slots.update(subject_table[weekday].keys())\n        time_slots = sorted(list(all_time_slots))\n\n        # Write the header row\n        header = ['Weekday'] + time_slots\n        self.sheet.append(header)\n\n        # Write the data rows\n        for weekday in sorted(subject_table.keys()):\n            row = [weekday]\n            for time_slot in time_slots:\n                row.append(subject_table[weekday].get(time_slot, '')) # Use get to handle missing slots\n            self.sheet.append(row)\n\n    def format_output_excel(self):\n        # Auto-adjust column widths\n        for column_cells in self.sheet.columns:\n            length = max(len(str(cell.value)) for cell in column_cells)  #Handles potential NoneType issue\n            self.sheet.column_dimensions[column_cells[0].column_letter].width = length + 2  # Add some padding\n\n        # Bold the header row\n        for cell in self.sheet[1]:  # row 1 contains the header\n            cell.font = Font(bold=True)\n\n    def save_excel_file(self):\n        try:\n            self.workbook.save(self.output_file_path)\n        except Exception as e:\n            raise IOError(f\"Error writing to output file: {e}\")\n\n    def process_output(self, subject_table):\n        self.create_excel_file()\n        self.write_subject_table_to_excel(subject_table)\n        self.format_output_excel()\n        self.save_excel_file()"}, {"file": "main.py", "path": "src/main.py", "code": "from src.input_handler import InputHandler\nfrom src.data_processor import DataProcessor\nfrom src.output_handler import OutputHandler\n\nINPUT_FILE_PATH = 'Spring Semester Subjects.xlsx'\nOUTPUT_FILE_PATH = 'Subject Table.xlsx'\n\ndef main():\n    try:\n        # Input\n        input_handler = InputHandler(INPUT_FILE_PATH)\n        df = input_handler.process_input()\n\n        # Processing\n        data_processor = DataProcessor()\n        extracted_data = data_processor.extract_data(df)\n        subject_table = data_processor.transform_data(extracted_data)\n\n        # Output\n        output_handler = OutputHandler(OUTPUT_FILE_PATH)\n        output_handler.process_output(subject_table)\n\n        print(f\"Successfully created {OUTPUT_FILE_PATH}\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except IOError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()"}], "17": [{"file": "data_input.py", "path": "src/data_input.py", "code": "import pandas as pd\n\ndef load_gamedata(filename='Gamedata.xlsx'):\n    \"\"\"Loads data from an Excel file.\n    Handles file not found and general loading errors.\n    Returns: pandas DataFrame or None if an error occurred.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found. Please ensure it exists in the same directory.\")\n        return None\n    except Exception as e:\n        print(f\"Error loading data: {e}\")\n        return None\n\nif __name__ == '__main__':\n    df = load_gamedata()\n    if df is not None:\n        print(\"Data loaded successfully.\")\n        print(df.head())\n"}, {"file": "data_preprocessing.py", "path": "src/data_preprocessing.py", "code": "import pandas as pd\n\ndef preprocess_data(df):\n    \"\"\"Preprocesses the data by lagging the 'result' variable,\n    handling missing values, defining dependent and independent variables,\n    and adding a constant.\n    Returns: A tuple containing X (independent variables), y (dependent variable),\n             and the original DataFrame (for output).\n    \"\"\"\n    df['result_lagged'] = df['result'].shift(1)\n    df = df.dropna()\n\n    y = df['result_lagged']\n    X = df.drop(['result', 'result_lagged'], axis=1)\n    X['const'] = 1  # Adding a constant for the intercept\n    return X, y, df\n\nif __name__ == '__main__':\n    # Create a sample DataFrame for testing\n    data = {'result': [0, 1, 0, 1, 0],\n            'feature1': [1, 2, 3, 4, 5],\n            'feature2': [6, 7, 8, 9, 10]}\n    sample_df = pd.DataFrame(data)\n    \n    X, y, df = preprocess_data(sample_df)\n    print(\"Independent Variables (X):\\n\", X)\n    print(\"\\nDependent Variable (y):\\n\", y)\n    print(\"\\nProcessed DataFrame:\\n\", df)\n"}, {"file": "model_building.py", "path": "src/model_building.py", "code": "import statsmodels.api as sm\n\ndef fit_logistic_regression(X, y):\n    \"\"\"Fits a logistic regression model using statsmodels.\n    Returns: The fitted logistic regression model.\n    \"\"\"\n    model = sm.Logit(y, X)\n    results = model.fit()\n    return results\n\nif __name__ == '__main__':\n    import pandas as pd\n    from data_preprocessing import preprocess_data  # Import preprocess_data from data_preprocessing.py\n\n    # Create a sample DataFrame for testing\n    data = {'result': [0, 1, 0, 1, 0],\n            'feature1': [1, 2, 3, 4, 5],\n            'feature2': [6, 7, 8, 9, 10]}\n    sample_df = pd.DataFrame(data)\n\n    # Preprocess the data using the function from data_preprocessing.py\n    X, y, df = preprocess_data(sample_df)\n\n    # Fit the logistic regression model\n    model_results = fit_logistic_regression(X, y)\n\n    # Print the model summary\n    print(model_results.summary())\n"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\ndef generate_and_save_summary(model_results, filename='Logistic.xlsx', sheet_name='Summary'):\n    \"\"\"Generates a model summary and saves it to an Excel file.\n    Prints a completion message.\n    \"\"\"\n    summary = model_results.summary()\n\n    # Convert summary to a pandas DataFrame for easier saving to Excel\n    results_as_html = summary.tables[1].as_html()\n    df = pd.read_html(results_as_html, header=0)[0]\n\n    # Also save the other statistical table to Excel, as it's useful\n    overall_results_as_html = summary.tables[0].as_html()\n    overall_df = pd.read_html(overall_results_as_html, header=0)[0]\n\n    with pd.ExcelWriter(filename) as writer:\n        df.to_excel(writer, sheet_name=sheet_name, index=False, startrow=2)\n\n        # Save the overall statistics above the coefficient results\n        overall_df.to_excel(writer, sheet_name=sheet_name, index=False, startrow=0)\n\n    print(f\"Logistic model summary has been successfully saved to '{filename}' on sheet '{sheet_name}'.\")\n\nif __name__ == '__main__':\n    import statsmodels.api as sm\n    import pandas as pd\n    from data_preprocessing import preprocess_data  # Import preprocess_data from data_preprocessing.py\n    from model_building import fit_logistic_regression\n    \n    # Create a sample DataFrame for testing\n    data = {'result': [0, 1, 0, 1, 0],\n            'feature1': [1, 2, 3, 4, 5],\n            'feature2': [6, 7, 8, 9, 10]}\n    sample_df = pd.DataFrame(data)\n\n    # Preprocess the data using the function from data_preprocessing.py\n    X, y, df = preprocess_data(sample_df)\n\n    # Fit the logistic regression model\n    model_results = fit_logistic_regression(X, y)\n\n    generate_and_save_summary(model_results)\n"}, {"file": "dependencies.py", "path": "src/dependencies.py", "code": "import subprocess\nimport sys\n\ndef install_packages():\n    \"\"\"Installs required Python packages if they are not already installed.\"\"\"\n    required_packages = ['pandas', 'openpyxl', 'scikit-learn', 'statsmodels']\n\n    for package in required_packages:\n        try:\n            __import__(package)\n        except ImportError:\n            print(f\"{package} not found. Installing...\")\n            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n            print(f\"{package} installed successfully.\")\n\nif __name__ == '__main__':\n    install_packages()\n"}, {"file": "main.py", "path": "src/main.py", "code": "from data_input import load_gamedata\nfrom data_preprocessing import preprocess_data\nfrom model_building import fit_logistic_regression\nfrom output import generate_and_save_summary\nfrom dependencies import install_packages\n\ndef main():\n    install_packages()\n    # Load the data\n    df = load_gamedata()\n    if df is None:\n        return  # Exit if data loading failed\n\n    # Preprocess the data\n    X, y, df = preprocess_data(df)\n\n    # Fit the logistic regression model\n    model_results = fit_logistic_regression(X, y)\n\n    # Generate and save the model summary\n    generate_and_save_summary(model_results)\n\nif __name__ == \"__main__\":\n    main()\n"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "def start_new_game():\n    pass\n\ndef load_game():\n    pass\n\ndef exit_game():\n    pass\n\n# Main menu logic here"}, {"file": "exploration.py", "path": "src/exploration.py", "code": "def move(direction):\n    pass\n\ndef look():\n    pass\n\ndef inventory():\n    pass\n\ndef pick_up(item):\n    pass\n\ndef drop(item):\n    pass\n\ndef use_item(item):\n    pass\n\ndef save_game():\n    pass\n\ndef exit_to_main_menu():\n    pass\n\n# Exploration logic here"}, {"file": "combat.py", "path": "src/combat.py", "code": "def attack(monster):\n    pass\n\ndef flee():\n    pass\n\ndef use_item_combat(item):\n    pass\n\ndef check_health():\n    pass\n\ndef check_monster_health():\n    pass\n\n# Combat logic here"}, {"file": "character.py", "path": "src/character.py", "code": "def check_stats():\n    pass\n\ndef equip(item):\n    pass\n\ndef unequip(item):\n    pass\n\n# Character logic here"}, {"file": "game_over.py", "path": "src/game_over.py", "code": "def restart_game():\n    pass\n\ndef exit_game():\n    pass\n\n# Game over logic here"}, {"file": "game.py", "path": "src/game.py", "code": "# Central game logic and state management\n# Includes state transitions between menu, exploration, combat, etc.\n# Imports and utilizes functions from other modules"}, {"file": "items.py", "path": "src/items.py", "code": "# Class definitions and functions to handle item behavior"}, {"file": "monsters.py", "path": "src/monsters.py", "code": "# Class definitions and functions to handle monster behavior"}], "19": [{"file": "main.py", "path": "src/main.py", "code": "# main.py\n\nimport csv\nfrom datetime import datetime, timedelta\n\n\ndef read_deathlist(filename):\n    \"\"\"Reads the CSV file containing death records.\"\"\"\n    try:\n        with open(filename, 'r') as csvfile:\n            reader = csv.DictReader(csvfile)\n            return list(reader)\n    except FileNotFoundError:\n        print(\"Error: Deathlist.csv not found.\")\n        return None\n\n\ndef parse_date_of_death(record):\n    \"\"\"Extracts the 'Date of death' field from each record.\"\"\"\n    try:\n        date_string = record['Date of death']\n        date_object = datetime.strptime(date_string, '%Y-%m-%d') # Adjust format as needed\n        return date_object\n    except ValueError:\n        print(f\"Warning: Invalid date format in record: {record}\")\n        return None\n    except KeyError:\n        print(f\"Warning: 'Date of death' column missing in record: {record}\")\n        return None\n\n\ndef group_by_week(death_records):\n    \"\"\"Groups the death records by week.\"\"\"\n    weekly_deaths = {}\n    for record in death_records:\n        death_date = parse_date_of_death(record)\n        if death_date:\n            week_start = death_date - timedelta(days=death_date.weekday())\n            week_start_str = week_start.strftime('%Y-%m-%d')\n            if week_start_str not in weekly_deaths:\n                weekly_deaths[week_start_str] = []\n            weekly_deaths[week_start_str].append(record)\n    return weekly_deaths\n\n\ndef count_deaths_per_week(weekly_deaths):\n    \"\"\"Counts the number of deaths that occurred in each week.\"\"\"\n    weekly_counts = {}\n    for week, records in weekly_deaths.items():\n        weekly_counts[week] = len(records)\n    return weekly_counts\n\n\ndef display_weekly_histogram(weekly_counts):\n    \"\"\"Prints a table showing the number of deaths for each week.\"\"\"\n    print(\"Weekly Death Counts:\\n\")\n    print(\"Week Start    | Deaths\")\n    print(\"--------------+--------\")\n    for week, count in sorted(weekly_counts.items()): # Sort weeks chronologically\n        print(f\"{week}    | {count}\")\n\n\ndef main():\n    \"\"\"Main function to execute the death analysis.\"\"\"\n    filename = 'Deathlist.csv'\n    death_records = read_deathlist(filename)\n    if death_records:\n        weekly_deaths = group_by_week(death_records)\n        weekly_counts = count_deaths_per_week(weekly_deaths)\n        display_weekly_histogram(weekly_counts)\n\nif __name__ == \"__main__\":\n    main()\n"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateField(auto_now_add=True)\n    author = models.CharField(max_length=100, default='Admin') # Example author field\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True) # Foreign key to category\n    # Add other fields as needed (e.g., image, slug)\n    def __str__(self):\n        return self.title\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom .models import BlogPost, Category\nfrom django.core.paginator import Paginator\n\ndef homepage(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5] # Get latest posts\n    featured_posts = BlogPost.objects.order_by('-publication_date')[:3] # Example, adjust logic\n    return render(request, 'blog/homepage.html', {'latest_posts': latest_posts, 'featured_posts': featured_posts})\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    return render(request, 'blog/blog_post_detail.html', {'post': post})\n\ndef category_page(request, category_id):\n    category = get_object_or_404(Category, pk=category_id)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_page.html', {'category': category, 'posts': posts})\n\ndef search_results(request):\n    query = request.GET.get('q')\n    results = BlogPost.objects.filter(title__icontains=query) # Simple title search\n    return render(request, 'blog/search_results.html', {'results': results, 'query': query})\n\ndef about_us(request):\n    return render(request, 'blog/about_us.html')\n\ndef contact(request):\n    return render(request, 'blog/contact.html')"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('category/<int:category_id>/', views.category_page, name='category_page'),\n    path('search/', views.search_results, name='search_results'),\n    path('about/', views.about_us, name='about_us'),\n    path('contact/', views.contact, name='contact'),\n]"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    message = forms.CharField(widget=forms.Textarea)"}]}