{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Form definitions\nclass BMICalculatorForm(forms.Form):\n    \"\"\"\n    A form to calculate BMI using weight and height.\n    \"\"\"\n    weight = forms.FloatField(label='Weight (kg)')\n    height = forms.FloatField(label='Height (m)')"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import BMICalculatorForm\n\n# Category thresholds\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\n# BMI interpretation descriptions\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\"\n}\n\ndef homepage(request):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    return render(request, 'homepage.html')\n\n\ndef bmi_calculator(request):\n    \"\"\"\n    Calculate BMI based on user input.\n    \"\"\"\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height']\n\n            if height <= 0:\n                bmi_value = \"Invalid height\"\n                category = \"Invalid height\"\n                interpretation = bmi_interpretation['Invalid height']\n            else:\n                bmi_value = round(weight / (height * height), 2)\n\n                if bmi_value < bmi_category['Underweight']:\n                    category = \"Underweight\"\n                elif bmi_value < bmi_category['Normal weight']:\n                    category = \"Normal weight\"\n                elif bmi_value < bmi_category['Overweight']:\n                    category = \"Overweight\"\n                else:\n                    category = \"Obese\"\n\n                interpretation = bmi_interpretation[category]\n\n            return render(request, 'bmi_calculator.html', {\n                'form': form,\n                'bmi_value': bmi_value,\n                'category': category,\n                'interpretation': interpretation\n            })\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form})\n\n\ndef advice(request):\n    \"\"\"\n    Provide health advice based on BMI.\n    \"\"\"\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advice</title>\n</head>\n<body>\n    <div id=\"advice-container\" class=\"advice-container\">\n        <h1 id=\"advice-title\" class=\"advice-title\">Health Advice</h1>\n        <p id=\"advice-text\" class=\"advice-text\">This page provides health recommendations based on BMI categories.</p>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"bmi-calculator-container\">\n        <h1 id=\"bmi-calculator-title\" class=\"bmi-calculator-title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields\" class=\"form-fields\">\n                {{ form.as_p }}\n            </div>\n            <button id=\"calculate-button\" class=\"calculate-button\" type=\"submit\">Calculate</button>\n        </form>\n\n        {% if bmi_value %}\n            <div id=\"bmi-results\" class=\"bmi-results\">\n                <h2 id=\"bmi-results-title\" class=\"bmi-results-title\">Results</h2>\n                <p id=\"bmi-value\" class=\"bmi-value\">Your BMI is: {{ bmi_value }}</p>\n                <p id=\"bmi-category\" class=\"bmi-category\">Category: {{ category }}</p>\n                <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">Interpretation: {{ interpretation }}</p>\n            </div>\n        {% endif %}\n\n        <button id=\"reset-button\" class=\"reset-button\" onclick=\"window.location.href='{% url 'bmi_calculator' %}'\">Reset</button>\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Homepage</title>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"homepage-container\">\n        <h1 id=\"homepage-title\" class=\"homepage-title\">Welcome to the BMI Calculator</h1>\n        <p id=\"homepage-text\" class=\"homepage-text\">This website allows you to calculate your Body Mass Index (BMI).</p>\n        <a id=\"calculator-link\" class=\"calculator-link\" href=\"{% url 'bmi_calculator' %}\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n# Project URL configurations\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView().get, name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView().get, name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    \"\"\"\n    Generates a random password based on the specified criteria.\n    \"\"\"\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return \"Please select at least one character set.\"\n\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    \"\"\"\n    Handles the password generation form and renders the result.\n    \"\"\"\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n        return render(request, 'generator.html', {'password': password, 'length': length,\n                                                    'uppercase': include_uppercase, 'lowercase': include_lowercase,\n                                                    'numbers': include_numbers, 'symbols': include_symbols})\n    else:\n        return render(request, 'generator.html')\n\n\nclass HomePageView:\n    \"\"\"\n    Renders the Home page of the password generator.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handles GET requests to the home page.\n        \"\"\"\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView:\n    \"\"\"\n    Renders the About Us page of the password generator.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handles GET requests to the about us page.\n        \"\"\"\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: auto;\n    overflow: hidden;\n    padding: 20px;\n}\n\nh1 {\n    color: #333;\n    text-align: center;\n}\n\n/* Password Generator Form Styles */\n.password-form {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-group label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.form-group input[type=\"number\"] {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.form-group input[type=\"checkbox\"] {\n    margin-right: 5px;\n}\n\n.generate-button {\n    background-color: #5cb85c;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    width: 100%;\n}\n\n.generate-button:hover {\n    background-color: #449d44;\n}\n\n/* Password Display Styles */\n.password-display {\n    margin-top: 20px;\n    padding: 15px;\n    background-color: #e9ecef;\n    border-radius: 4px;\n    text-align: center;\n    position: relative;\n}\n\n.password-text {\n    font-size: 1.2em;\n    margin-bottom: 10px;\n    word-break: break-all; /* Ensures long passwords wrap */\n}\n\n.copy-button {\n    background-color: #007bff;\n    color: white;\n    padding: 8px 12px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    margin-top: 10px;\n}\n\n.copy-button:hover {\n    background-color: #0056b3;\n}\n\n#copy-message {\n    display: none;\n    color: green;\n    margin-top: 10px;\n}\n\n/* About Us Styles */\n.about-us-content {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.about-us-content h2 {\n    color: #333;\n}\n\n.about-us-content p {\n    line-height: 1.6;\n}\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password-text').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <section id=\"about-us\" class=\"about-us-content\">\n            <h2 id=\"about-us-title\" class=\"about-us-title\">About Us</h2>\n            <p id=\"about-us-description\" class=\"about-us-description\">This is a simple password generator application built with Django.  It allows users to generate strong, random passwords based on their specified criteria. The application is designed to be user-friendly and secure, providing options for including uppercase letters, lowercase letters, numbers, and symbols.</p>\n            <p id=\"about-us-tech\" class=\"about-us-tech\">The frontend utilizes HTML, CSS, and JavaScript for a responsive user interface, while the backend is powered by Django, a high-level Python web framework that encourages rapid development and clean, pragmatic design.</p>\n        </section>\n    </div>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"generator-title\" class=\"generator-title\">Password Generator</h1>\n        <section id=\"password-form-section\" class=\"password-form\">\n            <form id=\"password-form\" method=\"post\">\n                {% csrf_token %}\n                <div class=\"form-group\">\n                    <label for=\"length\" id=\"length-label\">Password Length:</label>\n                    <input type=\"number\" id=\"length\" name=\"length\" value=\"{{ length|default:12 }}\" min=\"8\" max=\"32\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"uppercase\" id=\"uppercase-label\">Include Uppercase:</label>\n                    <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" {% if uppercase %}checked{% endif %}>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"lowercase\" id=\"lowercase-label\">Include Lowercase:</label>\n                    <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" {% if lowercase %}checked{% endif %}>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"numbers\" id=\"numbers-label\">Include Numbers:</label>\n                    <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" {% if numbers %}checked{% endif %}>\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"symbols\" id=\"symbols-label\">Include Symbols:</label>\n                    <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" {% if symbols %}checked{% endif %}>\n                </div>\n                <button type=\"submit\" id=\"generate-button\" class=\"generate-button\">Generate Password</button>\n            </form>\n        </section>\n\n        {% if password %}\n        <section id=\"password-display-section\" class=\"password-display\">\n            <div id=\"password-text\" class=\"password-text\">{{ password }}</div>\n            <button id=\"copy-button\" class=\"copy-button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n            <div id=\"copy-message\" class=\"copy-message\"></div>\n        </section>\n        {% endif %}\n    </div>\n    <script src=\"/static/js/scripts.js\"></script>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <section id=\"home-content\" class=\"home-content\">\n            <h1 id=\"home-title\" class=\"home-title\">Welcome to the Password Generator!</h1>\n            <p id=\"home-description\" class=\"home-description\">Generate strong, secure passwords with ease. Customize your password by specifying the length and including uppercase letters, lowercase letters, numbers, and symbols.</p>\n            <p id=\"home-get-started\" class=\"home-get-started\">Click <a href=\"/generator/\" id=\"generator-link\">here</a> to generate a password.</p>\n            <p id=\"home-about-us\" class=\"home-about-us\">Learn more <a href=\"/about-us/\" id=\"about-us-link\">about us</a>.</p>\n        </section>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    \"\"\"\n    Configuration class for the QR app.\n    \"\"\"\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse, FileResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\nfrom django.http import Http404\n\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'qr_app/home.html')\n\n\ndef hex_to_rgb(hex_color):\n    \"\"\"\n    Convert hex color to RGB tuple.\n    \"\"\"\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))\n\n\ndef generate_qr_code(request):\n    \"\"\"\n    Generate a QR code from provided data.\n    \"\"\"\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fg_color = request.POST.get('fg_color', '#000000')\n        bg_color = request.POST.get('bg_color', '#FFFFFF')\n        box_size = int(request.POST.get('box_size', 10))\n        border = int(request.POST.get('border', 4))\n        error_correction = request.POST.get('error_correction', 'L')\n\n        error_correction_levels = {\n            'L': qrcode.constants.ERROR_CORRECT_L,\n            'M': qrcode.constants.ERROR_CORRECT_M,\n            'Q': qrcode.constants.ERROR_CORRECT_Q,\n            'H': qrcode.constants.ERROR_CORRECT_H,\n        }\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=error_correction_levels[error_correction],\n            box_size=box_size,\n            border=border,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        fg_rgb = hex_to_rgb(fg_color)\n        bg_rgb = hex_to_rgb(bg_color)\n\n        img = qr.make_image(fill_color=fg_rgb, back_color=bg_rgb)\n\n        buffer = io.BytesIO()\n        img.save(buffer, format='PNG')\n        img_base64 = base64.b64encode(buffer.getvalue()).decode()\n\n        return render(request, 'qr_app/generate.html', {'qr_code': img_base64, 'data': data, 'fg_color': fg_color, 'bg_color': bg_color, 'box_size': box_size, 'border': border, 'error_correction': error_correction})\n    else:\n        return render(request, 'qr_app/generate.html')\n\ndef download_qr_code(request):\n    \"\"\"\n    Allow users to download the generated QR code.\n    \"\"\"\n    if request.method == 'POST':\n        img_data = request.POST.get('img_data')\n        if img_data:\n            img_data = base64.b64decode(img_data.split(',')[1])\n            img_file = io.BytesIO(img_data)\n            return FileResponse(img_file, as_attachment=True, filename='qrcode.png')\n        else:\n            raise Http404\n    else:\n        return HttpResponse(\"Method not allowed\", status=405)\n\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'qr_app/about.html')\n"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1 id=\"about-title\" class=\"mb-4\">About QR Code Generator</h1>\n        <p id=\"about-description\">This is a simple QR Code Generator web application built with Django. It allows you to generate and customize QR codes online.</p>\n\n        <h2 id=\"faq-title\" class=\"mt-4\">Frequently Asked Questions</h2>\n        <div id=\"faq-list\">\n            <div class=\"faq-item\">\n                <h3 class=\"faq-question\">What is a QR code?</h3>\n                <p class=\"faq-answer\">A QR code (Quick Response code) is a type of matrix barcode that can be read by smartphones and other devices. It can store various types of data, such as URLs, text, and contact information.</p>\n            </div>\n            <div class=\"faq-item\">\n                <h3 class=\"faq-question\">How do I generate a QR code?</h3>\n                <p class=\"faq-answer\">Simply enter the data you want to encode in the input field on the generate page, customize the colors and other options, and click the \"Generate\" button. The QR code will be displayed on the page.</p>\n            </div>\n            <div class=\"faq-item\">\n                <h3 class=\"faq-question\">Can I download the generated QR code?</h3>\n                <p class=\"faq-answer\">Yes, you can download the generated QR code as a PNG image by clicking the \"Download\" button.</p>\n            </div>\n        </div>\n\n        <h2 id=\"policies-title\" class=\"mt-4\">Policies</h2>\n        <p id=\"privacy-policy\"><strong>Privacy Policy:</strong> We do not store or share any of the data you enter to generate QR codes. Your data remains private and secure.</p>\n        <p id=\"terms-of-service\"><strong>Terms of Service:</strong> This application is provided as-is, and we are not responsible for any issues arising from its use.</p>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"generate-title\" class=\"mt-5 mb-4\">QR Code Generator</h1>\n        <form id=\"qr-form\" method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"data-input\">Data to encode:</label>\n                <input type=\"text\" class=\"form-control\" id=\"data-input\" name=\"data\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"fg-color-input\">Foreground Color:</label>\n                <input type=\"color\" class=\"form-control\" id=\"fg-color-input\" name=\"fg_color\" value=\"#000000\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"bg-color-input\">Background Color:</label>\n                <input type=\"color\" class=\"form-control\" id=\"bg-color-input\" name=\"bg_color\" value=\"#FFFFFF\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"box-size-input\">Box Size:</label>\n                <input type=\"number\" class=\"form-control\" id=\"box-size-input\" name=\"box_size\" value=\"10\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"border-input\">Border:</label>\n                <input type=\"number\" class=\"form-control\" id=\"border-input\" name=\"border\" value=\"4\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"error-correction-select\">Error Correction Level:</label>\n                <select class=\"form-control\" id=\"error-correction-select\" name=\"error_correction\">\n                    <option value=\"L\">L (Low)</option>\n                    <option value=\"M\">M (Medium)</option>\n                    <option value=\"Q\">Q (Quartile)</option>\n                    <option value=\"H\">H (High)</option>\n                </select>\n            </div>\n\n            <button id=\"generate-button\" type=\"submit\" class=\"btn btn-success\">Generate QR Code</button>\n        </form>\n\n        {% if qr_code %}\n        <div class=\"mt-4\">\n            <img id=\"qr-image\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n\n            <form id=\"download-form\" method=\"post\" action=\"{% url 'download_qr_code' %}\">\n                {% csrf_token %}\n                <input type=\"hidden\" name=\"img_data\" value=\"data:image/png;base64,{{ qr_code }}\">\n                <button id=\"download-button\" type=\"submit\" class=\"btn btn-primary\">Download QR Code</button>\n            </form>\n        </div>\n        {% endif %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container mt-5\">\n        <h1 id=\"home-title\" class=\"mb-4\">Welcome to QR Code Generator</h1>\n        <p id=\"home-description\" class=\"lead\">Generate your own QR codes quickly and easily!</p>\n\n        <div id=\"navigation-links\">\n            <a id=\"generate-link\" href=\"{% url 'generate_qr_code' %}\" class=\"btn btn-primary mr-3\">Generate QR Code</a>\n            <a id=\"about-link\" href=\"{% url 'about' %}\" class=\"btn btn-info\">About</a>\n        </div>\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\n\nALLOWED_HOSTS = []\n\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'qr_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\n\nTIME_ZONE = 'UTC'\n\n\nUSE_I18N = True\n\n\nUSE_L10N = True\n\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'qr_app/static')\n]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    \"\"\"\n    Configuration for the Example App.\n    \"\"\"\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n# Home view\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\n# Convert view\ndef convert(request):\n    \"\"\"\n    Handle Markdown to HTML conversion.\n    \"\"\"\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_content': html})\n    return render(request, 'convert.html')\n\n# About view\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About the Markdown to HTML Converter</h1>\n        <p id=\"about-description\" class=\"description\">\n            This application allows you to convert Markdown text into HTML format.  You can either paste your Markdown directly or upload a file.\n        </p>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"container\">\n        <h1 id=\"convert-title\" class=\"title\">Markdown to HTML Converter</h1>\n        <form id=\"convert-form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" class=\"markdown-input\" name=\"markdown_text\" rows=\"10\" cols=\"50\" placeholder=\"Enter Markdown here...\"></textarea>\n            <button id=\"convert-button\" class=\"convert-button\" type=\"submit\">Convert to HTML</button>\n        </form>\n        {% if html_content %}\n            <div id=\"html-output\" class=\"html-output\">\n                <h2>HTML Output:</h2>\n                <div id=\"html-content\" class=\"html-content\">{{ html_content|safe }}</div>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Markdown to HTML Converter</h1>\n        <p id=\"home-description\" class=\"description\">Convert your Markdown text into HTML effortlessly.</p>\n        <nav id=\"home-nav\" class=\"nav\">\n            <ul id=\"home-nav-list\" class=\"nav-list\">\n                <li id=\"home-nav-item-convert\" class=\"nav-item\"><a href=\"{% url 'convert' %}\">Convert</a></li>\n                <li id=\"home-nav-item-about\" class=\"nav-item\"><a href=\"{% url 'about' %}\">About</a></li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": null, "path": "media", "code": ""}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    \"\"\"\n    Todo List model\n    \"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoList.\n        \"\"\"\n        return self.title\n\n\nclass TodoItem(models.Model):\n    \"\"\"\n    Todo Item model\n    \"\"\"\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoItem.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item,\n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.generic import TemplateView, ListView, DetailView, CreateView, UpdateView, DeleteView\nfrom .models import TodoList, TodoItem\nfrom django.urls import reverse_lazy\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n    context_object_name = 'todolists'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['form'] = TodoListCreateForm()\n        return context\n\nclass TodoListCreateForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['title', 'description']\n\n    def post(self, request, *args, **kwargs):\n        form = TodoListCreateForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list')\n        else:\n            return render(request, self.template_name, {'todolists': TodoList.objects.all(), 'form': form})\n\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\n\ndef edit_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        form = TodoListCreateForm(request.POST, instance=todo)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list')\n    else:\n        form = TodoListCreateForm(instance=todo)\n    return render(request, 'edit_todo.html', {'form': form, 'todo': todo})\n\n\nclass TodoItemView(DetailView):\n    template_name = 'tasks.html'\n    model = TodoList\n    context_object_name = 'todolist'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todoitems'] = TodoItem.objects.filter(todolist=self.object)\n        context['form'] = TodoItemCreateForm(initial={'todolist': self.object})\n        return context\n\nclass TodoItemCreateForm(forms.ModelForm):\n    class Meta:\n        model = TodoItem\n        fields = ['title', 'description', 'todolist']\n        widgets = {'todolist': forms.HiddenInput()}\n\n\n    def post(self, request, *args, **kwargs):\n        form = TodoItemCreateForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('view_todo_item', pk=form.cleaned_data['todolist'].id)\n        else:\n            todolist = get_object_or_404(TodoList, pk=kwargs['pk'])\n            return render(request, self.template_name, {'todolist': todolist, 'todoitems': TodoItem.objects.filter(todolist=todolist), 'form': form})\n\n\ndef delete_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    todolist_id = item.todolist.id\n    item.delete()\n    return redirect('view_todo_item', pk=todolist_id)\n\n\ndef edit_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        form = TodoItemCreateForm(request.POST, instance=item)\n        if form.is_valid():\n            form.save()\n            return redirect('view_todo_item', pk=item.todolist.id)\n    else:\n        form = TodoItemCreateForm(instance=item)\n    return render(request, 'edit_todo_item.html', {'form': form, 'todoitem': item})\n\n\ndef complete_todo_item(request, pk):\n    item = get_object_or_404(TodoItem, pk=pk)\n    item.completed = not item.completed\n    item.save()\n    return redirect('view_todo_item', pk=item.todolist.id)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        total_tasks = todo_items.count()\n        completed_tasks = todo_items.filter(completed=True).count()\n        incomplete_tasks = total_tasks - completed_tasks\n\n        context['total_tasks'] = total_tasks\n        context['completed_tasks'] = completed_tasks\n        context['incomplete_tasks'] = incomplete_tasks\n        return context\n\nfrom django import forms"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <!-- \u5f15\u5165 Chart.js -->\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"analysis-container\" class=\"container\">\n        <h1>Task Analysis</h1>\n\n        <div id=\"task-summary\" class=\"summary\">\n            <p>Total tasks: {{ total_tasks }}</p>\n            <p>Completed tasks: {{ completed_tasks }}</p>\n            <p>Incomplete tasks: {{ incomplete_tasks }}</p>\n        </div>\n\n        <!-- Placeholder for chart -->\n        <canvas id=\"task-completion-chart\"></canvas>\n\n        <a href=\"{% url 'home' %}\" class=\"btn btn-secondary\">Return Home</a>\n    </div>\n\n    <script>\n        const ctx = document.getElementById('task-completion-chart').getContext('2d');\n        const myChart = new Chart(ctx, {\n            type: 'pie',\n            data: {\n                labels: ['Completed', 'Incomplete'],\n                datasets: [{\n                    label: 'Task Completion',\n                    data: [{{ completed_tasks }}, {{ incomplete_tasks }}]],\n                    backgroundColor: [\n                        'rgba(75, 192, 192, 0.2)',\n                        'rgba(255, 99, 132, 0.2)'\n                    ],\n                    borderColor: [\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(255, 99, 132, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    title: {\n                        display: true,\n                        text: 'Task Completion Rate'\n                    }\n                }\n            }\n        });\n    </script>\n\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n  <div id=\"edit-todo-container\" class=\"container\">\n    <h1>Edit Todo List</h1>\n    <form id=\"edit-todo-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\" class=\"btn btn-primary\">Update</button>\n      <a href=\"{% url 'todo_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n  </div>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n  <div id=\"edit-todo-item-container\" class=\"container\">\n    <h1>Edit Todo Item</h1>\n    <form id=\"edit-todo-item-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\" class=\"btn btn-primary\">Update</button>\n      <a href=\"{% url 'view_todo_item' todoitem.todolist.id %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n  </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1>Welcome to the Todo App!</h1>\n        <nav id=\"home-navigation\">\n            <ul>\n                <li><a href=\"{% url 'todo_list' %}\" class=\"btn btn-primary\">View Todo Lists</a></li>\n                <li><a href=\"{% url 'analysis' %}\" class=\"btn btn-info\">Task Analysis</a></li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n  <div id=\"task-list-container\" class=\"container\">\n    <h1>Todo List: {{ todolist.title }}</h1>\n    <p>{{ todolist.description }}</p>\n\n    <ul id=\"todo-items-list\" class=\"list-group\">\n      {% for item in todoitems %}\n        <li class=\"list-group-item\">\n          {{ item.title }}\n          <a href=\"{% url 'edit_todo_item' item.id %}\" class=\"btn btn-sm btn-warning\">Edit</a>\n          <a href=\"{% url 'delete_todo_item' item.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n          <a href=\"{% url 'complete_todo_item' item.id %}\" class=\"btn btn-sm btn-success\">{% if item.completed %} Mark Incomplete {% else %} Mark Complete {% endif %}</a>\n        </li>\n      {% endfor %}\n    </ul>\n\n    <form id=\"add-todo-item-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\" class=\"btn btn-primary\">Add Task</button>\n      <a href=\"{% url 'todo_list' %}\" class=\"btn btn-secondary\">Back to Lists</a>\n    </form>\n  </div>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n</head>\n<body>\n  <div id=\"todo-list-container\" class=\"container\">\n    <h1>Todo Lists</h1>\n\n    <ul id=\"todo-lists-ul\" class=\"list-group\">\n      {% for todo in todolists %}\n        <li class=\"list-group-item\">\n          <a href=\"{% url 'view_todo_item' todo.id %}\">{{ todo.title }}</a>\n          <a href=\"{% url 'edit_todo' todo.id %}\" class=\"btn btn-sm btn-warning\">Edit</a>\n          <a href=\"{% url 'delete_todo' todo.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n        </li>\n      {% endfor %}\n    </ul>\n\n    <form id=\"add-todo-list-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\" class=\"btn btn-primary\">Add List</button>\n      <a href=\"{% url 'home' %}\" class=\"btn btn-secondary\">Home</a>\n    </form>\n  </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'your-secret-key')\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = os.environ.get('DJANGO_DEBUG', True)\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n    'crispy_forms',\n    'crispy_bootstrap5'\n]\n\nCRISPY_TEMPLATE_PACK = 'bootstrap5'\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, TodoItem\n\nadmin.site.register(TodoList)\nadmin.site.register(TodoItem)"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExampleAppConfig(AppConfig):\n    default_auto_field = 'django.db.BigAutoField'\n    name = 'example_app'"}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    \"\"\"\n    Form for ContactSales model.\n    \"\"\"\n    class Meta:\n        \"\"\"\n        Meta\n        \"\"\"\n        model = ContactSales\n        fields = '__all__'\n\nclass SupportForm(forms.ModelForm):\n    \"\"\"\n    Form for SupportRequest model.\n    \"\"\"\n    class Meta:\n        \"\"\"\n        Meta\n        \"\"\"\n        model = SupportRequest\n        fields = '__all__'"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass ContactSales(models.Model):\n    \"\"\"\n    Model to store contact sales inquiries.\n    \"\"\"\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        \"\"\"\n        String representation of contact sales.\n        \"\"\"\n        return self.name\n\n\nclass SupportRequest(models.Model):\n    \"\"\"\n    Model to store support requests.\n    \"\"\"\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    subject = models.CharField(max_length=200)\n    description = models.TextField()\n\n    def __str__(self):\n        \"\"\"\n        String representation of support requests.\n        \"\"\"\n        return self.subject"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib import messages\nfrom django.views.generic import TemplateView, FormView\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\nfrom django.urls import reverse_lazy\n\nclass HomePageView(TemplateView):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    template_name = 'home.html'\n\n\nclass FeaturesPageView(TemplateView):\n    \"\"\"\n    Render the features page.\n    \"\"\"\n    template_name = 'features.html'\n\n\nclass PricingPageView(FormView):\n    \"\"\"\n    Handle pricing page and contact form submission.\n    \"\"\"\n    template_name = 'pricing.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('pricing')\n\n    def form_valid(self, form):\n        \"\"\"\n        Save the form and show success.\n        \"\"\"\n        form.save()\n        messages.success(self.request, 'Your inquiry has been submitted!')\n        return super().form_valid(form)\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Add previous requests to context.\n        \"\"\"\n        context = super().get_context_data(**kwargs)\n        context['contact_requests'] = ContactSales.objects.all()\n        return context\n\n\nclass SupportView(FormView):\n    \"\"\"\n    Handle support page and form submission.\n    \"\"\"\n    template_name = 'support.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('support')\n\n    def form_valid(self, form):\n        \"\"\"\n        Save the support request.\n        \"\"\"\n        form.save()\n        messages.success(self.request, 'Your support request has been submitted!')\n        return super().form_valid(form)\n\n    def get_context_data(self, **kwargs):\n        \"\"\"\n        Add previous support requests to context.\n        \"\"\"\n        context = super().get_context_data(**kwargs)\n        context['support_requests'] = SupportRequest.objects.all()\n        return context\n\n\nclass AboutUsPageView(TemplateView):\n    \"\"\"\n    Render the about us page.\n    \"\"\"\n    template_name = 'about.html'"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ContactSales',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField()),\n                ('message', models.TextField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField()),\n                ('subject', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n            ],\n        ),\n    ]"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-us-container\" class=\"container\">\n        <h1 id=\"about-us-title\" class=\"title\">About Us</h1>\n        <p id=\"about-us-description\" class=\"description\">Information about our team and company.</p>\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Features</title>\n</head>\n<body>\n    <div id=\"features-container\" class=\"container\">\n        <h1 id=\"features-title\" class=\"title\">AI Chatbot Features</h1>\n        <ul id=\"features-list\" class=\"feature-list\">\n            <li class=\"feature-item\" id=\"feature-item-1\">Feature 1: Natural Language Processing</li>\n            <li class=\"feature-item\" id=\"feature-item-2\">Feature 2: Machine Learning Powered</li>\n            <li class=\"feature-item\" id=\"feature-item-3\">Feature 3: 24/7 Availability</li>\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to AI Chatbot!</h1>\n        <p id=\"home-message\" class=\"message\">We offer cutting-edge AI solutions.</p>\n        <nav id=\"main-nav\" class=\"navigation\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a href=\"{% url 'features' %}\" id=\"features-link\" class=\"nav-link\">Features</a></li>\n                <li class=\"nav-item\"><a href=\"{% url 'pricing' %}\" id=\"pricing-link\" class=\"nav-link\">Pricing</a></li>\n                <li class=\"nav-item\"><a href=\"{% url 'support' %}\" id=\"support-link\" class=\"nav-link\">Support</a></li>\n                <li class=\"nav-item\"><a href=\"{% url 'about' %}\" id=\"about-link\" class=\"nav-link\">About Us</a></li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pricing</title>\n</head>\n<body>\n    <div id=\"pricing-container\" class=\"container\">\n        <h1 id=\"pricing-title\" class=\"title\">Pricing Plans</h1>\n        <p id=\"pricing-description\" class=\"description\">Choose the plan that's right for you.</p>\n\n        <form id=\"contact-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"contact-submit\" class=\"submit-button\">Contact Sales</button>\n            {% if messages %}\n                <ul class=\"messages\">\n                    {% for message in messages %}\n                        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                    {% endfor %}\n                </ul>\n            {% endif %}\n        </form>\n\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Support</title>\n</head>\n<body>\n    <div id=\"support-container\" class=\"container\">\n        <h1 id=\"support-title\" class=\"title\">Support</h1>\n        <p id=\"support-description\" class=\"description\">Submit your support request here.</p>\n\n        <form id=\"support-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"support-submit\" class=\"submit-button\">Submit Request</button>\n            {% if messages %}\n                <ul class=\"messages\">\n                    {% for message in messages %}\n                        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                    {% endfor %}\n                </ul>\n            {% endif %}\n        </form>\n\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"example_app.urls\")),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    \"\"\"\n    User registration form.\n    \"\"\"\n    pass\n\nclass LoginForm(UserCreationForm):\n    \"\"\"\n    User login form.\n    \"\"\"\n    pass\n\nclass MealForm(forms.ModelForm):\n    \"\"\"\n    Form for logging meals with specific fields and widgets.\n    \"\"\"\n    pass\nclass ActivityForm(forms.ModelForm):\n    \"\"\"\n    Form for logging activities with specific fields and widgets.\n    \"\"\"\n    pass\n\nclass ProfileForm(forms.ModelForm):\n    \"\"\"\n    Form for updating user profile and preferences.\n    \"\"\"\n    pass\n\nclass PreferencesForm(forms.ModelForm):\n    \"\"\"\n    Form for updating dietary preferences.\n    \"\"\"\n    pass\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.utils import timezone\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    \"\"\"\n    Create a user profile when a new user is created.\n    \"\"\"\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    \"\"\"\n    Save the user profile if the user instance is updated.\n    \"\"\"\n    instance.profile.save()\n\nclass UserProfile(models.Model):\n    \"\"\"\n    Extended user profile to include additional user information.\n    \"\"\"\n    pass\n\nclass Meal(models.Model):\n    \"\"\"\n    Model to log information about meals consumed by users.\n    \"\"\"\n    pass\n\nclass Activity(models.Model):\n    \"\"\"\n    Model to log activities and accompanying calorie expenditure.\n    \"\"\"\n    pass\n\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_search, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_search, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\n\ndef get_weekly_calorie_chart(user):\n    \"\"\"\n    Generate weekly calorie chart data for a specified user.\n    \"\"\"\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n\n    return week_data\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nimport matplotlib.pyplot as plt\nimport io\nimport base64\nfrom datetime import timedelta, date\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Activity, UserProfile\n\n\ndef home(request):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    pass\n\n\n\ndef signup(request):\n    \"\"\"\n    Handle user signup.\n    \"\"\"\n    pass\n\ndef login_view(request):\n    \"\"\"\n    Handle user login.\n    \"\"\"\n    pass\n\n\n@login_required\ndef dashboard(request):\n    \"\"\"\n    Display the user dashboard with daily and weekly statistics.\n    \"\"\"\n    pass\n\n\n@login_required\ndef meal_log(request):\n    \"\"\"\n    Log meals for the user's meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef add_meal(request):\n    \"\"\"\n    Add a new meal to the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef edit_meal(request, id):\n    \"\"\"\n    Edit an existing meal record.\n    \"\"\"\n    pass\n\n\n@login_required\ndef delete_meal(request, id):\n    \"\"\"\n    Delete a meal record from the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef activity_log(request):\n    \"\"\"\n    Log activities for the user's activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef add_activity(request):\n    \"\"\"\n    Add a new activity to the activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef edit_activity(request, id):\n    \"\"\"\n    Edit an existing activity record.\n    \"\"\"\n    pass\n\n\n@login_required\ndef delete_activity(request, id):\n    \"\"\"\n    Delete an activity record from the activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef settings(request):\n    \"\"\"\n    Render the settings page for updating user profile information.\n    \"\"\"\n    pass\n\n\n@login_required\ndef meal_search(request):\n    \"\"\"\n    Perform a search in the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef activity_search(request):\n    \"\"\"\n    Perform a search in the activity log.\n    \"\"\"\n    pass\n\n\ndef tutorials(request):\n    \"\"\"\n    Render the tutorials/help page.\n    \"\"\"\n    pass\n\n\n@login_required\ndef update_profile(request):\n    \"\"\"\n    Update user's profile information.\n    \"\"\"\n    pass\n\n\n@login_required\ndef update_preferences(request):\n    \"\"\"\n    Update user's dietary preferences.\n    \"\"\"\n    pass\n\n\n@login_required\ndef weekly_calorie_chart(request):\n    \"\"\"\n    Render the weekly calorie chart based on user's consumption and expenditure.\n    \"\"\"\n    pass\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Activity Log</title>\n</head>\n<body>\n    <!-- Render activity log with search and CRUD options -->\n\t<div id=\"activity-log-container\" class=\"container\">\n        <h1 id=\"activity-log-title\" class=\"title\">Activity Log</h1>\n        <div id=\"activity-search-area\" class=\"search-area\">\n            <!-- Search Form Here -->\n        </div>\n        <div id=\"activity-list\" class=\"activity-list\">\n            <!-- Activity List Items Here -->\n        </div>\n\t\t <a id=\"add-activity-link\" class=\"add-link\" href=\"{% url 'add_activity' %}\">Add New Activity</a>\n    </div>\n</body>\n</html>\n"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to add a new activity -->\n\t<div id=\"add-activity-container\" class=\"container\">\n        <h1 id=\"add-activity-title\" class=\"title\">Add New Activity</h1>\n        <form id=\"add-activity-form\" class=\"activity-form\">\n            <!-- Form fields here -->\n\t\t\t <button id=\"submit-activity-button\" class=\"submit-button\" type=\"submit\">Add Activity</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Meal - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to add a new meal -->\n\t<div id=\"add-meal-container\" class=\"container\">\n        <h1 id=\"add-meal-title\" class=\"title\">Add New Meal</h1>\n        <form id=\"add-meal-form\" class=\"meal-form\">\n            <!-- Form fields here -->\n\t\t\t<button id=\"submit-meal-button\" class=\"submit-button\" type=\"submit\">Add Meal</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Dashboard</title>\n</head>\n<body>\n    <!-- User dashboard with recent activities and statistics -->\n\t<div id=\"dashboard-container\" class=\"container\">\n        <h1 id=\"dashboard-title\" class=\"title\">Dashboard</h1>\n        <div id=\"daily-stats\" class=\"daily-stats\">\n            <!-- Daily Stats Displayed Here -->\n        </div>\n        <div id=\"weekly-chart\" class=\"weekly-chart\">\n            <!-- Weekly Calorie Chart Here -->\n        </div>\n        <div id=\"recent-activities\" class=\"recent-activities\">\n            <!-- Recent Activities Listed Here -->\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to edit an existing activity -->\n\t<div id=\"edit-activity-container\" class=\"container\">\n        <h1 id=\"edit-activity-title\" class=\"title\">Edit Activity</h1>\n        <form id=\"edit-activity-form\" class=\"activity-form\">\n            <!-- Form fields here -->\n\t\t\t<button id=\"update-activity-button\" class=\"update-button\" type=\"submit\">Update Activity</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Meal - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to edit an existing meal -->\n\t<div id=\"edit-meal-container\" class=\"container\">\n        <h1 id=\"edit-meal-title\" class=\"title\">Edit Meal</h1>\n        <form id=\"edit-meal-form\" class=\"meal-form\">\n            <!-- Form fields here -->\n\t\t\t<button id=\"update-meal-button\" class=\"update-button\" type=\"submit\">Update Meal</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Home</title>\n</head>\n<body>\n    <!-- Home page with welcome message and navigation links -->\n\t<div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to Calorie Tracker</h1>\n        <p id=\"home-description\" class=\"description\">Track your meals and activities to reach your fitness goals.</p>\n        <nav id=\"home-navigation\" class=\"navigation\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"signup-link\" class=\"nav-link\" href=\"{% url 'signup' %}\">Sign Up</a></li>\n                <li class=\"nav-item\"><a id=\"login-link\" class=\"nav-link\" href=\"{% url 'login' %}\">Login</a></li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form for user to login -->\n\t<div id=\"login-container\" class=\"container\">\n        <h1 id=\"login-title\" class=\"title\">Login</h1>\n        <form id=\"login-form\" class=\"login-form\">\n            <!-- Form fields here -->\n\t\t\t<button id=\"login-button\" class=\"submit-button\" type=\"submit\">Login</button>\n        </form>\n\t\t<p id=\"signup-prompt\" class=\"signup-prompt\">Don't have an account? <a id=\"signup-link\" href=\"{% url 'signup' %}\">Sign up</a></p>\n    </div>\n</body>\n</html>\n"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Meal Log</title>\n</head>\n<body>\n    <!-- Render meal log with search and CRUD options -->\n\t<div id=\"meal-log-container\" class=\"container\">\n        <h1 id=\"meal-log-title\" class=\"title\">Meal Log</h1>\n        <div id=\"meal-search-area\" class=\"search-area\">\n            <!-- Search Form Here -->\n        </div>\n        <div id=\"meal-list\" class=\"meal-list\">\n            <!-- Meal List Items Here -->\n        </div>\n\t\t<a id=\"add-meal-link\" class=\"add-link\" href=\"{% url 'add_meal' %}\">Add New Meal</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Settings</title>\n</head>\n<body>\n    <!-- Settings page for user preferences and profile updates -->\n\t<div id=\"settings-container\" class=\"container\">\n        <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n        <nav id=\"settings-navigation\" class=\"settings-navigation\">\n            <ul id=\"settings-list\" class=\"settings-list\">\n                <li class=\"settings-item\"><a id=\"update-profile-link\" class=\"settings-link\" href=\"{% url 'update_profile' %}\">Update Profile</a></li>\n                <li class=\"settings-item\"><a id=\"update-preferences-link\" class=\"settings-link\" href=\"{% url 'update_preferences' %}\">Update Preferences</a></li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to register a new user -->\n\t<div id=\"signup-container\" class=\"container\">\n        <h1 id=\"signup-title\" class=\"title\">Sign Up</h1>\n        <form id=\"signup-form\" class=\"signup-form\">\n            <!-- Form fields here -->\n\t\t\t<button id=\"signup-button\" class=\"submit-button\" type=\"submit\">Sign Up</button>\n        </form>\n\t\t<p id=\"login-prompt\" class=\"login-prompt\">Already have an account? <a id=\"login-link\" href=\"{% url 'login' %}\">Login</a></p>\n    </div>\n</body>\n</html>\n"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Tutorials - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Page displaying tutorials and help resources -->\n\t<div id=\"tutorials-container\" class=\"container\">\n        <h1 id=\"tutorials-title\" class=\"title\">Tutorials & Help</h1>\n        <div id=\"tutorials-content\" class=\"tutorials-content\">\n            <!-- Tutorial content here -->\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Preferences - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to update user dietary preferences -->\n\t<div id=\"update-preferences-container\" class=\"container\">\n        <h1 id=\"update-preferences-title\" class=\"title\">Update Dietary Preferences</h1>\n        <form id=\"update-preferences-form\" class=\"preferences-form\">\n            <!-- Form fields here -->\n\t\t\t<button id=\"update-preferences-button\" class=\"update-button\" type=\"submit\">Update Preferences</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Profile - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to update user profile information -->\n\t<div id=\"update-profile-container\" class=\"container\">\n        <h1 id=\"update-profile-title\" class=\"title\">Update Profile</h1>\n        <form id=\"update-profile-form\" class=\"profile-form\">\n            <!-- Form fields here -->\n\t\t\t<button id=\"update-profile-button\" class=\"update-button\" type=\"submit\">Update Profile</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Weekly Calorie Chart - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Display weekly calorie chart for user activities and meals -->\n\t<div id=\"weekly-chart-container\" class=\"container\">\n        <h1 id=\"weekly-chart-title\" class=\"title\">Weekly Calorie Chart</h1>\n        <div id=\"calorie-chart\" class=\"calorie-chart\">\n            <!-- Calorie chart rendered here -->\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "11": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\nclass JSONUploadForm(forms.Form):\n    \"\"\"\n    Form for uploading a JSON file with validations.\n    \"\"\"\n    json_file = forms.FileField(label='JSON File')\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Project(models.Model):\n    \"\"\"\n    Model representing a project with necessary attributes.\n    \"\"\"\n    name = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Review(models.Model):\n    \"\"\"\n    Model representing a review for a project.\n    \"\"\"\n    project = models.ForeignKey(Project, on_delete=models.CASCADE)\n    reviewer_name = models.CharField(max_length=100)\n    review_text = models.TextField()\n    rating = models.IntegerField(default=0)\n\n    def __str__(self):\n        return f'Review for {self.project.name} by {self.reviewer_name}'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('review/<int:project_id>/', views.review_view, name='review'),\n    path('upload/', views.upload_json_view, name='upload_json'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import json\nimport os\nimport time\nfrom django.http import HttpResponse, HttpResponseRedirect\nfrom django.shortcuts import render, get_object_or_404\nfrom django.contrib import messages\nfrom .forms import JSONUploadForm\nfrom .models import Project, Review\n\n\ndef review_view(request, project_id):\n    \"\"\"\n    Handle the review view by processing test cases and updating reviews.\n    \"\"\"\n    project = get_object_or_404(Project, pk=project_id)\n    if request.method == 'POST':\n        reviewer_name = request.POST.get('reviewer_name')\n        review_text = request.POST.get('review_text')\n        rating = request.POST.get('rating')\n\n        review = Review(project=project, reviewer_name=reviewer_name, review_text=review_text, rating=rating)\n        review.save()\n        messages.success(request, 'Review submitted successfully!')\n        return HttpResponseRedirect(f'/review/{project_id}/')\n\n    return render(request, 'review.html', {'project': project})\n\n\ndef home_view(request):\n    \"\"\"\n    Display the home page with project listings and upload form.\n    \"\"\"\n    projects = Project.objects.all()\n    return render(request, 'home.html', {'projects': projects})\n\n\ndef upload_json_view(request):\n    \"\"\"\n    Handles the JSON file upload.\n    \"\"\"\n    if request.method == 'POST':\n        form = JSONUploadForm(request.POST, request.FILES)\n        if form.is_valid():\n            json_file = request.FILES['json_file']\n            try:\n                data = json.load(json_file)\n                handle_json_upload(data)\n                messages.success(request, 'JSON file uploaded and processed successfully!')\n            except json.JSONDecodeError:\n                messages.error(request, 'Invalid JSON file.')\n            except Exception as e:\n                messages.error(request, f'Error processing JSON file: {e}')\n            return HttpResponseRedirect('/')\n    else:\n        form = JSONUploadForm()\n    return render(request, 'upload_json.html', {'form': form})\n\n\ndef handle_json_upload(data):\n    \"\"\"\n    Process the uploaded JSON file to update or create a project.\n    \"\"\"\n    try:\n        for item in data:\n            project_name = item.get('name')\n            project_description = item.get('description')\n\n            project, created = Project.objects.get_or_create(name=project_name, defaults={'description': project_description})\n\n            if not created:\n                project.description = project_description\n                project.save()\n    except Exception as e:\n        print(f'Error handling JSON data: {e}')\n\n\ndef about_view(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'about.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!-- app/templates/about.html -->\n{% extends 'base.html' %}\n{% block content %}\n    <div id=\"about-container\" class=\"about-container\">\n        <h1 id=\"about-title\" class=\"about-title\">About This Project</h1>\n        <p id=\"about-text\" class=\"about-text\">This is a project review website where users can upload, review, and rate various projects.</p>\n    </div>\n{% endblock %}\n"}, {"file": "base.html", "path": "example_app/templates/base.html", "code": "<!-- app/templates/base.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Project Review Site</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <header id=\"main-header\" class=\"main-header\">\n        <nav id=\"main-nav\" class=\"main-nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a></li>\n                <li class=\"nav-item\"><a id=\"upload-link\" class=\"nav-link\" href=\"{% url 'upload_json' %}\">Upload JSON</a></li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main-content\" class=\"main-content\">\n        {% block content %}\n        {% endblock %}\n    </main>\n\n    <footer id=\"main-footer\" class=\"main-footer\">\n        <p id=\"copyright-text\" class=\"copyright-text\">&copy; 2024 Project Review Site</p>\n    </footer>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!-- app/templates/home.html -->\n{% extends 'base.html' %}\n{% block content %}\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-title\">Project Listings</h1>\n        <ul id=\"project-list\" class=\"project-list\">\n            {% for project in projects %}\n                <li class=\"project-item\">\n                    <a id=\"project-link-{{ project.id }}\" class=\"project-link\" href=\"{% url 'review' project.id %}\">{{ project.name }}</a>\n                    <p id=\"project-description-{{ project.id }}\" class=\"project-description\">{{ project.description }}</p>\n                </li>\n            {% empty %}\n                <li id=\"no-projects-message\" class=\"no-projects-message\">No projects available.</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}\n"}, {"file": "review.html", "path": "example_app/templates/review.html", "code": "<!-- app/templates/review.html -->\n{% extends 'base.html' %}\n{% block content %}\n    <div id=\"review-container\" class=\"review-container\">\n        <h1 id=\"review-title\" class=\"review-title\">Reviewing: {{ project.name }}</h1>\n        <p id=\"project-description\" class=\"project-description\">{{ project.description }}</p>\n\n        <form id=\"review-form\" class=\"review-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label id=\"reviewer-name-label\" class=\"form-label\" for=\"reviewer_name\">Your Name:</label>\n                <input id=\"reviewer-name-input\" class=\"form-input\" type=\"text\" name=\"reviewer_name\" required>\n            </div>\n            <div class=\"form-group\">\n                <label id=\"review-text-label\" class=\"form-label\" for=\"review_text\">Your Review:</label>\n                <textarea id=\"review-text-textarea\" class=\"form-textarea\" name=\"review_text\" rows=\"4\" required></textarea>\n            </div>\n            <div class=\"form-group\">\n                <label id=\"rating-label\" class=\"form-label\" for=\"rating\">Rating (1-5):</label>\n                <input id=\"rating-input\" class=\"form-input\" type=\"number\" name=\"rating\" min=\"1\" max=\"5\" required>\n            </div>\n            <button id=\"submit-review-button\" class=\"submit-review-button\" type=\"submit\">Submit Review</button>\n        </form>\n\n        <h2 id=\"existing-reviews-title\" class=\"existing-reviews-title\">Existing Reviews:</h2>\n        <ul id=\"review-list\" class=\"review-list\">\n            {% for review in project.review_set.all %}\n                <li class=\"review-item\">\n                    <p id=\"reviewer-name-{{ review.id }}\" class=\"reviewer-name\"><strong>{{ review.reviewer_name }}:</strong></p>\n                    <p id=\"review-text-{{ review.id }}\" class=\"review-text\">{{ review.review_text }}</p>\n                    <p id=\"review-rating-{{ review.id }}\" class=\"review-rating\">Rating: {{ review.rating }}/5</p>\n                </li>\n            {% empty %}\n                <li id=\"no-reviews-message\" class=\"no-reviews-message\">No reviews yet. Be the first!</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}\n"}, {"file": "upload_json.html", "path": "example_app/templates/upload_json.html", "code": "{% extends 'base.html' %}\n{% block content %}\n<div id=\"upload-json-container\" class=\"upload-json-container\">\n    <h2 id=\"upload-json-title\" class=\"upload-json-title\">Upload JSON File</h2>\n    <form id=\"upload-json-form\" class=\"upload-json-form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label id=\"json-file-label\" class=\"form-label\" for=\"id_json_file\">JSON File:</label>\n            <input id=\"id_json_file\" class=\"form-input\" type=\"file\" name=\"json_file\" required>\n        </div>\n        <button id=\"upload-button\" class=\"upload-button\" type=\"submit\">Upload</button>\n    </form>\n\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n        <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</div>\n{% endblock %}"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "/* example_app/static/css/style.css */\n\nbody {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\n.main-header {\n    background-color: #333;\n    color: #fff;\n    padding: 1rem 0;\n    text-align: center;\n}\n\n.main-nav ul {\n    padding: 0;\n    list-style: none;\n}\n\n.main-nav li {\n    display: inline;\n    margin: 0 1rem;\n}\n\n.main-nav a {\n    color: #fff;\n    text-decoration: none;\n}\n\n.main-content {\n    padding: 2rem;\n    margin: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n}\n\n.main-footer {\n    text-align: center;\n    padding: 1rem 0;\n    background-color: #333;\n    color: #fff;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n}\n\n/* Home Page */\n.home-container {\n    margin-bottom: 60px;\n}\n\n.home-title {\n    margin-bottom: 1rem;\n    color: #333;\n}\n\n.project-list {\n    list-style: none;\n    padding: 0;\n}\n\n.project-item {\n    margin-bottom: 1rem;\n    padding: 1rem;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n\n.project-link {\n    text-decoration: none;\n    color: #007bff;\n    font-weight: bold;\n}\n\n.project-description {\n    color: #666;\n}\n\n/* Review Page */\n.review-container {\n    margin-bottom: 60px;\n}\n\n.review-title {\n    margin-bottom: 1rem;\n    color: #333;\n}\n\n.review-form {\n    margin-bottom: 2rem;\n}\n\n.form-group {\n    margin-bottom: 1rem;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 0.5rem;\n    font-weight: bold;\n}\n\n.form-input, .form-textarea {\n    width: 100%;\n    padding: 0.5rem;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.form-textarea {\n    resize: vertical;\n}\n\n.submit-review-button {\n    background-color: #007bff;\n    color: #fff;\n    padding: 0.5rem 1rem;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.existing-reviews-title {\n    margin-top: 2rem;\n    color: #333;\n}\n\n.review-list {\n    list-style: none;\n    padding: 0;\n}\n\n.review-item {\n    margin-bottom: 1rem;\n    padding: 1rem;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n}\n\n.reviewer-name {\n    font-weight: bold;\n}\n\n.review-rating {\n    color: #666;\n}\n\n/* About Page */\n.about-container {\n    margin-bottom: 60px;\n}\n\n.about-title {\n    margin-bottom: 1rem;\n    color: #333;\n}\n\n.about-text {\n    color: #666;\n}\n\n/* Upload JSON */\n.upload-json-container{\n    margin-bottom: 60px;\n}\n.upload-json-title{\n    margin-bottom: 1rem;\n    color: #333;\n}\n\n/* Messages */\n.messages{\n    list-style: none;\n    padding: 0;\n}\n\n.messages li{\n    padding: 10px;\n    margin-bottom: 5px;\n    border-radius: 4px;\n}\n\n.success{\n    background-color: #d4edda;\n    color: #155724;\n    border: 1px solid #c3e6cb;\n}\n\n.error{\n    background-color: #f8d7da;\n    color: #721c24;\n    border: 1px solid #f5c6cb;\n}\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n\n# LOGGING = {\n#     'version': 1,\n#     'disable_existing_loggers': False,\n#     'formatters': { #\u683c\u5f0f\u5316\u5668\n#         'standard': {\n#             'format': '[%(levelname)s][%(asctime)s][%(filename)s][%(funcName)s][%(lineno)d] > %(message)s'\n#             },\n#         'simple': {\n#             'format': '[%(levelname)s]> %(message)s'\n#             },\n#     },\n#     'filters': {\n#     'require_debug_true': {\n#         '()': 'django.utils.log.RequireDebugTrue',\n#         },\n#  },\n#     'handlers': {\n#         'default': {                                            # \u7528\u4e8e\u6587\u4ef6\u8f93\u51fa\n#             'level': 'DEBUG',                                    # \u8f93\u51fa\u65e5\u5fd7\u7b49\u7ea7\n#             'class': 'logging.handlers.RotatingFileHandler',    # \u65e5\u5fd7\u7c7b\u578b\n#             'filename': 'django.log',          # \u5177\u4f53\u65e5\u5fd7\u6587\u4ef6\u7684\u540d\u5b57\n#             'maxBytes': 1024 * 1024 * 2,                        # \u65e5\u5fd7\u5927\u5c0f\n#             'backupCount': 1,                                   # \u5907\u4efd\u6570\u91cf\n#             'formatter':'standard',                             # \u8f93\u51fa\u65e5\u5fd7\u683c\u5f0f\n#             'encoding': 'utf-8',                                # \u8f93\u51fa\u65e5\u5fd7\u7f16\u7801\n#         }\n#     },\n#     'loggers': {    #\u65e5\u5fd7\u5206\u914d\u5230\u54ea\u4e2ahandlers\u4e2d\n#         'django': {\n#             'handlers': ['default'],         # \u4e0a\u7ebf\u4e4b\u540e\u53ef\u4ee5\u628a'console'\u79fb\u9664\n#             'level':'DEBUG',\n#             'propagate': True,       # \u5411\u4e0d\u5411\u66f4\u9ad8\u7ea7\u7ea7\u522b\u7684logger\u4f20\u9012\n#         }\n#  }\n# }\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\n#hello-world-container {\n    text-align: center;\n}\n\n#hello-world-heading {\n    color: #333;\n    font-size: 3em;\n    margin-bottom: 20px;\n}\n\n.highlight {\n    color: blue;\n    font-weight: bold;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <div id=\"hello-world-container\" class=\"container\">\n        <h1 id=\"hello-world-heading\" class=\"heading\">Hello, <span class=\"highlight\">World</span>!</h1>\n        <p id=\"description\" class=\"description\">Welcome to my Django project.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='transactions_user')\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.date} - {self.amount} - {self.category}'\n\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE, related_name='support_request_user')\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Support Request from {self.name}'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n\n.button {\n    padding: 10px 20px;\n    font-size: 1rem;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    cursor: pointer;\n    border-radius: 5px;\n    text-decoration: none;\n}\n\n.button:hover {\n    background-color: #3e8e41;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body class=\"body\">\n    <div id=\"helloworld-container\" class=\"container\">\n        <h1 id=\"helloworld-title\" class=\"title\">Hello, World!</h1>\n        <a id=\"home-button\" class=\"button\" href=\"{% url 'home' %}\">Go to Home</a>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body class=\"body\">\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Home Page!</h1>\n        <a id=\"helloworld-button\" class=\"button\" href=\"{% url 'helloworld' %}\">Go to Hello World</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "16": [{"file": "main.py", "path": "main.py", "code": "import os\nimport pandas as pd\n\n# File paths\nINPUT_FILE = 'Spring Semester Subjects.xlsx'\nOUTPUT_FILE = 'Processed Subjects Table.xlsx'\n\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f'File not found: {file_path}')\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format.\n    \"\"\"\n    try:\n        pd.ExcelFile(file_path)\n    except Exception:\n        raise ValueError(f'Invalid Excel file format: {file_path}')\n\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    \"\"\"\n    required_columns = ['Subject Code', 'Subject Name', 'Credits']\n    for col in required_columns:\n        if col not in df.columns:\n            raise ValueError(f'Missing required column: {col}')\n\n    # Validate Credits column to be numeric\n    if not pd.api.types.is_numeric_dtype(df['Credits']):\n        raise ValueError('Credits column must be numeric.')\n\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    \"\"\"\n    check_file_exists(input_file)\n    check_file_format(input_file)\n\n    df = pd.read_excel(input_file)\n    validate_data(df)\n\n    # Optional: Perform any data transformation here\n    # Example: Convert Subject Code to uppercase\n    df['Subject Code'] = df['Subject Code'].str.upper()\n\n    df.to_excel(output_file, index=False)\n    print(f'Successfully processed and saved to {output_file}')\n\n\ndef main():\n    \"\"\"\n    Main execution function.\n    \"\"\"\n    try:\n        process_subjects(INPUT_FILE, OUTPUT_FILE)\n    except FileNotFoundError as e:\n        print(f'Error: {e}')\n    except ValueError as e:\n        print(f'Error: {e}')\n    except Exception as e:\n        print(f'An unexpected error occurred: {e}')\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nopenpyxl"}, {"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": "Subject Code\tSubject Name\tCredits\nCS101\tIntroduction to Programming\t3\nMA101\tCalculus I\t4\nEN101\tEnglish Composition\t3\nPH101\tPhysics I\t4"}], "17": [{"file": "17-stdanswer.py", "path": "17-stdanswer.py", "code": "import os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Read the dataset and ensure all columns are numeric.\n    Raise an error if any missing values (NaN) are found.\n    \"\"\"\n    data = pd.read_excel(input_file)\n    if data.isnull().any().any():\n        raise ValueError(\"Missing values (NaN) found in the dataset.\")\n    for col in data.columns:\n        if data[col].dtype not in ['int64', 'float64']:\n            try:\n                data[col] = pd.to_numeric(data[col])\n            except ValueError:\n                raise ValueError(f\"Column '{col}' is not numeric.\")\n    return data\n\n\ndef add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Add a one-period lag for the dependent variable and drop missing rows.\n    \"\"\"\n    data['lagged_' + target_column] = data[target_column].shift(1)\n    data = data.dropna()\n    return data\n\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepare the feature matrix (X) and target vector (y).\n    \"\"\"\n    X = data[[lagged_column]]\n    y = data[target_column]\n    X = sm.add_constant(X)\n    return X, y\n\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Build and fit a logistic regression model.\n    \"\"\"\n    model = sm.Logit(y, X)\n    result = model.fit()\n    return result\n\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Save the logistic regression summary to an Excel file.\n    \"\"\"\n    with pd.ExcelWriter(output_file) as writer:\n        result_summary = pd.DataFrame(result.summary().tables[1])\n        result_summary.to_excel(writer, sheet_name='Summary', index=False)\n\n\ndef main(input_file, output_file):\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    try:\n        data = read_and_validate_data(input_file)\n        target_column = 'Win'\n        lagged_column = 'lagged_Win'\n        data = add_lagged_dependent_variable(data, target_column)\n        X, y = prepare_features_and_target(data, target_column, lagged_column)\n        result = build_logistic_model(X, y)\n        save_summary_to_excel(result, output_file)\n        print(f\"Logistic regression summary saved to {output_file}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    main(input_file, output_file)"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}, {"file": "Gamedata.xlsx", "path": "Gamedata.xlsx", "code": "This file should contain your game data in an Excel format.\nIt needs at least a 'Win' column and other numeric columns for potential future expansion (not used in current base program but for future capabilities)\nThe first row must be the header row, and the column 'Win' should be either 0 or 1 for Loss or Win, representing whether the player won.\n\nExample:\n\n| Win | Feature1 | Feature2 |\n|-----|----------|----------|\n| 1   | 25       | 100      |\n| 0   | 18       | 75       |\n| 1   | 30       | 120      |\n| 0   | 22       | 90       |"}], "18": [{"file": "bashcrawl.py", "path": "bashcrawl.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        \"\"\"\n        Initializes the BashCrawl game with the root directory and available commands.\n        \"\"\"\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()  # Copy to allow multiple game instances\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\", \"take\"]\n        self.game_running = False\n\n    def print_main_menu(self):\n        \"\"\"\n        Displays the main menu options to the player.\n        \"\"\"\n        print(\"\\nWelcome to BashCrawl!\\n\")\n        print(\"1. Start Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        \"\"\"\n        Provide help information for the main menu.\n        \"\"\"\n        print(\"\\nBashCrawl is a text-based adventure game where you navigate a file system using bash-like commands.\\n\")\n        print(\"Start Game: Begins the game in the root directory.\")\n        print(\"Help: Displays this help message.\")\n        print(\"Quit: Exits the game.\\n\")\n\n    def print_game_help(self):\n        \"\"\"\n        Display in-game command help to the player.\n        \"\"\"\n        print(\"\\nAvailable commands:\\n\")\n        print(\"ls: Lists the contents of the current directory.\")\n        print(\"cd <directory>: Changes the current directory.  Use '..' to go up a level.\")\n        print(\"inventory: Checks your inventory.\")\n        print(\"take <item>: Takes an item from the current location and adds it to your inventory.\")\n        print(\"help: Displays this help message.\")\n        print(\"quit: Exits the game.\\n\")\n\n    def list_contents(self):\n        \"\"\"\n        List the contents of the current directory.\n        \"\"\"\n        contents = self.directory_structure.get(self.current_dir)\n        if contents:\n            print(\"\\nContents of {}:\".format(self.current_dir))\n            for item in contents:\n                print(item)\n        else:\n            print(\"\\nDirectory is empty.\")\n\n        # Check for item in current location\n        if self.current_dir in self.items:\n            print(\"You see a {}.\".format(self.items[self.current_dir]))\n\n\n    def change_directory(self, target_dir):\n        \"\"\"\n        Change the current directory to the specified target directory.\n        \"\"\"\n        if target_dir == \"..\":\n            if self.current_dir != ROOT_DIR:\n                parts = self.current_dir.split(os.path.sep)\n                self.current_dir = os.path.sep.join(parts[:-1]) or ROOT_DIR  # Handle root directory\n            else:\n                print(\"You are already in the root directory.\")\n            return\n\n        new_dir = os.path.join(self.current_dir, target_dir)\n\n        if new_dir in self.directory_structure.keys():\n            self.current_dir = new_dir\n            print(\"Changing directory to {}\".format(self.current_dir))\n        else:\n            print(\"Directory not found.\")\n\n    def check_inventory(self):\n        \"\"\"\n        Check and display the player's inventory.\n        \"\"\"\n        if self.inventory:\n            print(\"\\nInventory:\")\n            for item in self.inventory:\n                print(item)\n        else:\n            print(\"\\nInventory is empty.\")\n\n    def take_item(self, item_name):\n        \"\"\"\n        Takes an item from the current location and adds it to the inventory.\n        \"\"\"\n        if self.current_dir in self.items and self.items[self.current_dir] == item_name:\n            self.inventory.append(item_name)\n            del self.items[self.current_dir]\n            print(\"You took the {}.\".format(item_name))\n        else:\n            print(\"There is no {} here.\".format(item_name))\n\n\n    def play(self):\n        \"\"\"\n        Start the game loop and process player commands.\n        \"\"\"\n        self.game_running = True\n        while self.game_running:\n            print(\"\\nYou are in {}\".format(self.current_dir))\n            command = input(\"> \").split()\n\n            if not command:\n                continue\n\n            action = command[0].lower()\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    self.change_directory(command[1])\n                else:\n                    print(\"cd requires a directory name.\")\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                self.game_running = False\n                print(\"\\nThanks for playing!\")\n            elif action == \"take\":\n                if len(command) > 1:\n                    item_name = command[1]\n                    self.take_item(item_name)\n                else:\n                    print(\"take requires an item name.\")\n            else:\n                print(\"Invalid command. Type 'help' for a list of commands.\")\n\n    def main_menu(self):\n        \"\"\"\n        Display and manage interactions with the main menu.\n        \"\"\"\n        while True:\n            self.print_main_menu()\n            choice = input(\"> \")\n\n            if choice == \"1\":\n                self.play()\n                break  # Exit menu after game\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                print(\"Goodbye!\")\n                break\n            else:\n                print(\"Invalid choice. Please try again.\")\n\n\ndef main():\n    \"\"\"\n    Main function to initiate BashCrawl game.\n    \"\"\"\n    game = BashCrawl()\n    game.main_menu()\n\n\nif __name__ == \"__main__\":\n    main()\n"}], "19": [{"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death\n2023-01-01\n2023-01-07\n2023-01-07\n2023-01-14\n2023-01-21\n2023-01-28\n2023-02-04\n2023-02-11\n2023-02-18\n2023-02-25\n2023-03-04\n2023-03-11\n2023-03-18\n2023-03-25\n2023-04-01\n2023-04-08\n2023-04-15\n2023-04-22\n2023-04-29\n2023-05-06"}, {"file": "19-stdanswer.py", "path": "19-stdanswer.py", "code": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"\n    Check if a file exists at the given file path.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n\n\ndef read_dataset(file_path):\n    \"\"\"\n    Read the dataset from a CSV file and return a DataFrame.\n    \"\"\"\n    check_file_existence(file_path)\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except Exception as e:\n        raise ValueError(f\"Error reading dataset: {e}\")\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"\n    Validate that the dataset contains all required columns.\n    \"\"\"\n    for col in required_columns:\n        if col not in df.columns:\n            raise KeyError(f\"Required column '{col}' is missing.\")\n\n\ndef preprocess_dataset(df):\n    \"\"\"\n    Preprocess the dataset, including cleaning and formatting dates.\n    \"\"\"\n    try:\n        df['Date of death'] = pd.to_datetime(df['Date of death'])\n        df['Week'] = df['Date of death'].dt.isocalendar().week\n        return df\n    except Exception as e:\n        raise ValueError(f\"Error preprocessing dataset: {e}\")\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"\n    Plot the weekly deaths and save as a histogram image file.\n    \"\"\"\n    try:\n        plt.figure(figsize=(10, 6))\n        weekly_deaths.plot(kind='bar')\n        plt.title('Weekly Deaths')\n        plt.xlabel('Week Number')\n        plt.ylabel('Number of Deaths')\n        plt.savefig(output_file)\n        plt.close()\n    except Exception as e:\n        raise ValueError(f\"Error plotting weekly deaths: {e}\")\n\ndef main():\n    \"\"\"\n    Main execution function to process the dataset and plot the histogram.\n    \"\"\"\n    try:\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()"}]}