{"2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass Currency(models.Model):\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.code\n\nclass ExchangeRate(models.Model):\n    base_currency = models.ForeignKey(Currency, related_name='base_rates', on_delete=models.CASCADE)\n    target_currency = models.ForeignKey(Currency, related_name='target_rates', on_delete=models.CASCADE)\n    rate = models.FloatField()\n    timestamp = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        unique_together = ('base_currency', 'target_currency')\n\n    def __str__(self):\n        return f'{self.base_currency} to {self.target_currency}: {self.rate}'"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import Currency, ExchangeRate\n\n\ndef home(request):\n    currencies = Currency.objects.all()\n    context = {'currencies': currencies}\n    return render(request, 'home.html', context)\n\n\ndef convert_currency(request):\n    if request.method == 'GET':\n        base_currency_code = request.GET.get('base_currency')\n        target_currency_code = request.GET.get('target_currency')\n        amount = request.GET.get('amount')\n\n        try:\n            base_currency = Currency.objects.get(code=base_currency_code)\n            target_currency = Currency.objects.get(code=target_currency_code)\n            exchange_rate = ExchangeRate.objects.get(base_currency=base_currency, target_currency=target_currency).rate\n            converted_amount = float(amount) * exchange_rate\n\n            return JsonResponse({\n                'success': True,\n                'converted_amount': converted_amount,\n                'exchange_rate': exchange_rate\n            })\n        except Currency.DoesNotExist:\n            return JsonResponse({'success': False, 'error': 'Invalid currency code.'})\n        except ExchangeRate.DoesNotExist:\n            return JsonResponse({'success': False, 'error': 'Exchange rate not found.'})\n        except ValueError:\n            return JsonResponse({'success': False, 'error': 'Invalid amount.'})\n    else:\n        return JsonResponse({'success': False, 'error': 'Invalid request method.'})\n\n\ndef currency_details(request, currency_code):\n    # Placeholder for Currency Details Page functionality\n    return JsonResponse({'message': f'Details for {currency_code}'})"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert_currency, name='convert_currency'),\n    path('currency_details/<str:currency_code>/', views.currency_details, name='currency_details'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# Forms are not strictly required based on the initial checklist,\n# but are included here as they'd likely be needed for Settings page functionality.\n\nclass SettingsForm(forms.Form):\n    default_base_currency = forms.CharField(max_length=3, label='Default Base Currency')\n    default_target_currency = forms.CharField(max_length=3, label='Default Target Currency')\n    update_frequency = forms.IntegerField(label='Update Frequency (minutes)')"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency, ExchangeRate\n\nadmin.site.register(Currency)\nadmin.site.register(ExchangeRate)"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1 class=\"page-title\" id=\"page-title\">Currency Converter</h1>\n\n    <div class=\"form-group\">\n        <label for=\"base_currency\" class=\"form-label\">Base Currency:</label>\n        <select id=\"base_currency\" class=\"form-control\">\n            {% for currency in currencies %}\n                <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n            {% endfor %}\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"target_currency\" class=\"form-label\">Target Currency:</label>\n        <select id=\"target_currency\" class=\"form-control\">\n            {% for currency in currencies %}\n                <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n            {% endfor %}\n        </select>\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"amount\" class=\"form-label\">Amount:</label>\n        <input type=\"number\" id=\"amount\" class=\"form-control\">\n    </div>\n\n    <button id=\"convert_button\" class=\"btn btn-primary\">Convert</button>\n\n    <div id=\"result\" class=\"result-container\"></div>\n\n    <script>\n        const convertButton = document.getElementById('convert_button');\n        convertButton.addEventListener('click', function() {\n            const baseCurrency = document.getElementById('base_currency').value;\n            const targetCurrency = document.getElementById('target_currency').value;\n            const amount = document.getElementById('amount').value;\n\n            fetch(`/convert/?base_currency=${baseCurrency}&target_currency=${targetCurrency}&amount=${amount}`)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        document.getElementById('result').innerText = `Converted Amount: ${data.converted_amount} (Exchange Rate: ${data.exchange_rate})`;\n                    } else {\n                        document.getElementById('result').innerText = `Error: ${data.error}`;\n                    }\n                });\n        });\n    </script>\n</body>\n</html>"}, {"file": "settings.py", "path": "currency_converter_project/settings.py", "code": "# Minimal settings.py example - adjust as needed\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'currency_converter_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'currency_converter_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nSTATIC_URL = '/static/'"}, {"file": "wsgi.py", "path": "currency_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "currency_converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "apps.py", "path": "currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "currency_converter_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "currency_converter_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_asgi_application()"}], "3": [{"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport secrets\nimport string\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\n\ndef generate_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return HttpResponse('Please select at least one character type.')\n\n    password = ''.join(secrets.choice(characters) for _ in range(length))\n    return render(request, 'generated_password.html', {'password': password})\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generate_password/', views.generate_password, name='generate_password'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator - Home</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Password Generator!</h1>\n        <p id=\"home-description\" class=\"description\">This website helps you generate strong and secure passwords.</p>\n        <a href=\"{% url 'password_options' %}\" class=\"btn-link\">\n            <button id=\"generate-button\" class=\"btn btn-primary\">Generate Password</button>\n        </a>\n        {% if messages %}\n        <ul id=\"message-list\" class=\"messages\">\n            {% for message in messages %}\n                <li id=\"message-item-{{ forloop.counter }}\" {% if message.tags %} class=\"message-item {{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "password_options.html", "path": "templates/password_options.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator - Options</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"options-title\" class=\"title\">Password Options</h1>\n        <form id=\"options-form\" action=\"{% url 'generate_password' %}\" method=\"get\">\n            <div class=\"form-group\">\n                <label for=\"length\" id=\"length-label\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" value=\"12\" class=\"form-control\">\n            </div>\n            <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" class=\"form-check-input\">\n                <label for=\"uppercase\" id=\"uppercase-label\" class=\"form-check-label\">Include Uppercase</label>\n            </div>\n            <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" class=\"form-check-input\">\n                <label for=\"lowercase\" id=\"lowercase-label\" class=\"form-check-label\">Include Lowercase</label>\n            </div>\n            <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" class=\"form-check-input\">\n                <label for=\"numbers\" id=\"numbers-label\" class=\"form-check-label\">Include Numbers</label>\n            </div>\n            <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" class=\"form-check-input\">\n                <label for=\"symbols\" id=\"symbols-label\" class=\"form-check-label\">Include Symbols</label>\n            </div>\n            <button type=\"submit\" id=\"generate-button\" class=\"btn btn-primary\">Generate Password</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "generated_password.html", "path": "templates/generated_password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Generated Password</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"generated-title\" class=\"title\">Generated Password</h1>\n        <p id=\"password\" class=\"password-text\">{{ password }}</p>\n        <button id=\"copy-button\" class=\"btn btn-secondary\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n        <script>\n            function copyToClipboard() {\n                var password = document.getElementById(\"password\");\n                navigator.clipboard.writeText(password.textContent)\n                    .then(function() {\n                        alert('Password copied to clipboard!');\n                    })\n                    .catch(function(err) {\n                        console.error('Could not copy text: ', err);\n                        alert('Could not copy password. Please copy manually.');\n                    });\n            }\n        </script>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Password Generator</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Password Generator</h1>\n        <p id=\"about-description\" class=\"description\">This website is a simple password generator that allows you to create strong and random passwords based on your specified criteria. You can choose the length of the password and include/exclude uppercase letters, lowercase letters, numbers, and symbols.</p>\n    </div>\n</body>\n</html>"}, {"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "password_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "mysite/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-k@7y#u9n_#2%9s7a-n1*980608d1*w988-!g&6735$r$9*60(5'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),\n]\n"}, {"file": "wsgi.py", "path": "mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "mysite/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_asgi_application()\n"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail because Django is not installed.\n        # If Django is installed, then the environment variable may be\n        # incorrectly set.\n        try:\n            import django  # noqa: F401\n        except ImportError:\n            raise ImportError(\n                \"Couldn't import Django. Are you sure it's installed and \"\n                \"available on your PYTHONPATH environment variable? Did you \"\n                \"forget to activate a virtual environment?\"\n            ) from None\n        raise\n\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "mysite/__init__.py", "code": ""}, {"file": "__init__.py", "path": "templates/__init__.py", "code": ""}, {"file": "__init__.py", "path": "static/__init__.py", "code": ""}], "4": [{"file": "urls.py", "path": "qrcode_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr_code, name='generate_qr_code'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qrcode_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport qrcode\nimport io\nimport base64\nfrom django.views.decorators.csrf import csrf_exempt\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\n@csrf_exempt\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        text = request.POST.get('text')\n        box_size = int(request.POST.get('box_size', 10))\n        border_size = int(request.POST.get('border_size', 4))\n        error_correction = request.POST.get('error_correction', 'medium')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        error_correction_levels = {\n            'small': qrcode.constants.ERROR_CORRECT_L,\n            'medium': qrcode.constants.ERROR_CORRECT_M,\n            'large': qrcode.constants.ERROR_CORRECT_Q,\n        }\n\n        try:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=error_correction_levels[error_correction],\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n            buffer = io.BytesIO()\n            img.save(buffer, format='PNG')\n            img_str = base64.b64encode(buffer.getvalue()).decode('utf-8')\n\n            return JsonResponse({'image': img_str})\n        except Exception as e:\n            return JsonResponse({'error': str(e)})\n\n    return JsonResponse({'error': 'Invalid request method'}) #Or render to template\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "models.py", "path": "qrcode_generator/models.py", "code": "from django.db import models\n\n# No models needed for this simple example."}, {"file": "forms.py", "path": "qrcode_generator/forms.py", "code": "from django import forms\n\n# No forms needed, using POST directly in the view."}, {"file": "home.html", "path": "qrcode_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the QR Code Generator</h1>\n        <p id=\"home-description\" class=\"description\">Simple, welcoming text explaining what the website does.</p>\n        <a id=\"generate-link\" class=\"button\" href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "qrcode_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About This Website</h1>\n        <p id=\"about-description\" class=\"description\">Details about the website, its purpose, and how it works.</p>\n        <p id=\"privacy-policy\" class=\"policy\">Privacy Policy</p>\n        <p id=\"terms-of-service\" class=\"terms\">Terms of Service</p>\n    </div>\n</body>\n</html>"}, {"file": "generate_qr_code.html", "path": "qrcode_generator/templates/generate_qr_code.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"generator-container\" class=\"container\">\n        <h1 id=\"generator-title\" class=\"title\">QR Code Generator</h1>\n\n        <div id=\"text-group\" class=\"form-group\">\n            <label for=\"text\" id=\"text-label\">Text:</label><br>\n            <input type=\"text\" id=\"text\" name=\"text\" class=\"form-control\">\n        </div>\n\n        <div id=\"box-size-group\" class=\"form-group\">\n            <label for=\"box_size\" id=\"box-size-label\">Box Size (Max: 128):</label><br>\n            <input type=\"number\" id=\"box_size\" name=\"box_size\" min=\"1\" max=\"128\" value=\"10\" class=\"form-control\">\n        </div>\n\n        <div id=\"border-size-group\" class=\"form-group\">\n            <label for=\"border_size\" id=\"border-size-label\">Border Size (Max: 10):</label><br>\n            <input type=\"number\" id=\"border_size\" name=\"border_size\" min=\"0\" max=\"10\" value=\"4\" class=\"form-control\">\n        </div>\n\n        <div id=\"error-correction-group\" class=\"form-group\">\n            <label for=\"error_correction\" id=\"error-correction-label\">Error Correction:</label><br>\n            <select id=\"error_correction\" name=\"error_correction\" class=\"form-control\">\n                <option value=\"small\">Small</option>\n                <option value=\"medium\" selected>Medium</option>\n                <option value=\"large\">Large</option>\n            </select>\n        </div>\n\n        <div id=\"fill-color-group\" class=\"form-group\">\n            <label for=\"fill_color\" id=\"fill-color-label\">Fill Color:</label><br>\n            <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\" class=\"form-control\">\n        </div>\n\n        <div id=\"back-color-group\" class=\"form-group\">\n            <label for=\"back_color\" id=\"back-color-label\">Back Color:</label><br>\n            <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\" class=\"form-control\">\n        </div>\n\n        <button id=\"generate-button\" class=\"button\" onclick=\"generateQRCode()\">Generate</button>\n\n        <div id=\"qr_code_display\" class=\"qr-display\"></div>\n\n        <button id=\"download_button\" class=\"button\" style=\"display:none;\" onclick=\"downloadQRCode()\">Download QR Code</button>\n    </div>\n\n    <script>\n        function generateQRCode() {\n            var text = document.getElementById('text').value;\n            var boxSize = document.getElementById('box_size').value;\n            var borderSize = document.getElementById('border_size').value;\n            var errorCorrection = document.getElementById('error_correction').value;\n            var fillColor = document.getElementById('fill_color').value;\n            var backColor = document.getElementById('back_color').value;\n\n            fetch('/generate/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: `text=${text}&box_size=${boxSize}&border_size=${borderSize}&error_correction=${errorCorrection}&fill_color=${fillColor}&back_color=${backColor}`\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.image) {\n                    document.getElementById('qr_code_display').innerHTML = `<img id=\"qr-image\" src=\"data:image/png;base64,${data.image}\" alt=\"QR Code\">`;\n                    document.getElementById('download_button').style.display = 'block';\n                } else if (data.error) {\n                    alert('Error: ' + data.error);\n                }\n            });\n        }\n\n        function downloadQRCode() {\n            var qrCodeImage = document.querySelector('#qr_code_display img');\n            if (qrCodeImage) {\n                var link = document.createElement('a');\n                link.href = qrCodeImage.src;\n                link.download = 'qrcode.png';\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n            } else {\n                alert('No QR code generated yet.');\n            }\n        }\n    </script>\n</body>\n</html>"}, {"file": "settings.py", "path": "qrcode_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-j$i1$#i3h+t94k-y39d^bv7k6_l(d-9m%0#4@k3c6c7x-9c6a6'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcode_generator',  # Add this in the INSTALLED_APPS\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcode_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'qrcode_generator/templates'],  #Add this in the TEMPLATES settings\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcode_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'qrcode_generator/static',]\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "qrcode_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrcode_generator.urls')),\n]"}], "6": [{"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom django.http import JsonResponse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'home.html', {'todo_lists': todo_lists})\n\ndef todo_list_detail(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        name = request.POST['name']\n        TodoList.objects.create(name=name)\n        return redirect('home')\n    return render(request, 'create_todo_list.html')\n\ndef add_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        title = request.POST['title']\n        description = request.POST['description']\n        Task.objects.create(todo_list=todo_list, title=title, description=description)\n        return redirect('todo_list_detail', list_id=list_id)\n    return render(request, 'add_task.html', {'todo_list': todo_list})\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        task.title = request.POST['title']\n        task.description = request.POST['description']\n        task.save()\n        return redirect('todo_list_detail', list_id=task.todo_list.id)\n    return render(request, 'edit_task.html', {'task': task})\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list_detail', list_id=list_id)\n\ndef mark_task_completed(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', list_id=task.todo_list.id)\n\ndef task_completion_chart(request):\n    # Logic to create and return chart data (e.g., JSON)\n    # This is a placeholder, replace with your actual chart generation\n    completed_tasks = Task.objects.filter(completed=True).count()\n    total_tasks = Task.objects.all().count()\n    if total_tasks > 0:\n        completion_rate = (completed_tasks / total_tasks) * 100\n    else:\n        completion_rate = 0\n    data = {'completed_tasks': completed_tasks, 'total_tasks': total_tasks, 'completion_rate':completion_rate}\n    return JsonResponse(data)\n\n\ndef task_distribution_chart(request):\n    # Logic to create and return chart data (e.g., JSON)\n    # This is a placeholder, replace with your actual chart generation\n    lists = TodoList.objects.all()\n    data = []\n    for lst in lists:\n        task_count = Task.objects.filter(todo_list=lst).count()\n        data.append({'list_name': lst.name, 'task_count': task_count})\n\n    return JsonResponse({'task_distribution': data})"}, {"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('todo_list/<int:list_id>/', views.todo_list_detail, name='todo_list_detail'),\n    path('create_todo_list/', views.create_todo_list, name='create_todo_list'),\n    path('todo_list/<int:list_id>/add_task/', views.add_task, name='add_task'),\n    path('task/<int:task_id>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:task_id>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:task_id>/complete/', views.mark_task_completed, name='mark_task_completed'),\n    path('analysis/task_completion_chart/', views.task_completion_chart, name='task_completion_chart'),\n    path('analysis/task_distribution_chart/', views.task_distribution_chart, name='task_distribution_chart'),\n]"}, {"file": "home.html", "path": "todo_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"home-title\" class=\"home-title\">Todo Lists</h1>\n  <a id=\"create-list-link\" class=\"create-list-link\" href=\"{% url 'create_todo_list' %}\">Create New List</a>\n  <ul id=\"todo-lists-ul\" class=\"todo-lists-ul\">\n    {% for todo_list in todo_lists %}\n      <li class=\"todo-list-li\"><a id=\"todo-list-link-{{ todo_list.id }}\" class=\"todo-list-link\" href=\"{% url 'todo_list_detail' todo_list.id %}\">{{ todo_list.name }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}, {"file": "todo_list_detail.html", "path": "todo_app/templates/todo_list_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"list-name-title\" class=\"list-name-title\">{{ todo_list.name }}</h1>\n  <a id=\"add-task-link\" class=\"add-task-link\" href=\"{% url 'add_task' todo_list.id %}\">Add New Task</a>\n  <ul id=\"tasks-ul\" class=\"tasks-ul\">\n    {% for task in tasks %}\n      <li id=\"task-li-{{ task.id }}\" class=\"task-li\">\n        <span id=\"task-title-{{ task.id }}\" class=\"task-title\">{{ task.title }}</span> - <span id=\"task-description-{{ task.id }}\" class=\"task-description\">{{ task.description }}</span>\n        {% if task.completed %}\n          (<span id=\"task-completed-{{ task.id }}\" class=\"task-completed\">Completed</span>)\n        {% endif %}\n        <a id=\"edit-task-link-{{ task.id }}\" class=\"edit-task-link\" href=\"{% url 'edit_task' task.id %}\">Edit</a>\n        <a id=\"delete-task-link-{{ task.id }}\" class=\"delete-task-link\" href=\"{% url 'delete_task' task.id %}\">Delete</a>\n        <a id=\"complete-task-link-{{ task.id }}\" class=\"complete-task-link\" href=\"{% url 'mark_task_completed' task.id %}\">Mark as Completed</a>\n      </li>\n    {% endfor %}\n  </ul>\n\n  <button id=\"completionChartBtn\" class=\"completionChartBtn\">View Task Completion Chart</button>\n  <div id=\"completionChart\" class=\"completionChart\"></div>\n\n  <button id=\"distributionChartBtn\" class=\"distributionChartBtn\">View Task Distribution Chart</button>\n  <div id=\"distributionChart\" class=\"distributionChart\"></div>\n\n  <script>\n  document.getElementById('completionChartBtn').addEventListener('click', function() {\n    fetch('/analysis/task_completion_chart/')\n      .then(response => response.json())\n      .then(data => {\n        document.getElementById('completionChart').innerHTML = `Completed Tasks: ${data.completed_tasks}, Total Tasks: ${data.total_tasks}, Completion Rate: ${data.completion_rate}%`;\n      });\n  });\n\n    document.getElementById('distributionChartBtn').addEventListener('click', function() {\n        fetch('/analysis/task_distribution_chart/')\n          .then(response => response.json())\n          .then(data => {\n            let chartHTML = '';\n            if (data.task_distribution) {\n              data.task_distribution.forEach(item => {\n                chartHTML += `<p>${item.list_name}: ${item.task_count} tasks</p>`;\n              });\n            }\n            document.getElementById('distributionChart').innerHTML = chartHTML;\n          });\n      });\n  </script>\n\n{% endblock %}"}, {"file": "create_todo_list.html", "path": "todo_app/templates/create_todo_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"create-list-title\" class=\"create-list-title\">Create New Todo List</h1>\n  <form id=\"create-list-form\" class=\"create-list-form\" method=\"post\">\n    {% csrf_token %}\n    <label id=\"name-label\" class=\"name-label\" for=\"name\">List Name:</label><br>\n    <input type=\"text\" id=\"name\" class=\"name-input\" name=\"name\"><br><br>\n    <input type=\"submit\" id=\"create-button\" class=\"create-button\" value=\"Create\">\n  </form>\n{% endblock %}"}, {"file": "add_task.html", "path": "todo_app/templates/add_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"add-task-title\" class=\"add-task-title\">Add Task to {{ todo_list.name }}</h1>\n  <form id=\"add-task-form\" class=\"add-task-form\" method=\"post\">\n    {% csrf_token %}\n    <label id=\"title-label\" class=\"title-label\" for=\"title\">Title:</label><br>\n    <input type=\"text\" id=\"title\" class=\"title-input\" name=\"title\"><br><br>\n    <label id=\"description-label\" class=\"description-label\" for=\"description\">Description:</label><br>\n    <textarea id=\"description\" class=\"description-textarea\" name=\"description\"></textarea><br><br>\n    <input type=\"submit\" id=\"add-task-button\" class=\"add-task-button\" value=\"Add Task\">\n  </form>\n{% endblock %}"}, {"file": "edit_task.html", "path": "todo_app/templates/edit_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"edit-task-title\" class=\"edit-task-title\">Edit Task</h1>\n  <form id=\"edit-task-form\" class=\"edit-task-form\" method=\"post\">\n    {% csrf_token %}\n    <label id=\"title-label\" class=\"title-label\" for=\"title\">Title:</label><br>\n    <input type=\"text\" id=\"title\" class=\"title-input\" name=\"title\" value=\"{{ task.title }}\"><br><br>\n    <label id=\"description-label\" class=\"description-label\" for=\"description\">Description:</label><br>\n    <textarea id=\"description\" class=\"description-textarea\" name=\"description\">{{ task.description }}</textarea><br><br>\n    <input type=\"submit\" id=\"save-changes-button\" class=\"save-changes-button\" value=\"Save Changes\">\n  </form>\n{% endblock %}"}, {"file": "base.html", "path": "todo_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo App</title>\n    <style>\n    /*Basic CSS styling*/\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        h1 {\n            color: #333;\n        }\n        a {\n            color: #007bff;\n            text-decoration: none;\n        }\n        a:hover {\n            text-decoration: underline;\n        }\n        ul {\n            list-style: none;\n            padding: 0;\n        }\n        li {\n            margin-bottom: 5px;\n        }\n        form label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        form input[type=\"text\"], form textarea {\n            width: 300px;\n            padding: 5px;\n            margin-bottom: 10px;\n        }\n        form input[type=\"submit\"] {\n            background-color: #007bff;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            cursor: pointer;\n        }\n        button {\n            background-color: #28a745;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            cursor: pointer;\n            margin-top: 10px;\n        }\n        .home-title { font-size: 2em; }\n\n    </style>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "__init__.py", "path": "todo_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "todo_app/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)"}, {"file": "apps.py", "path": "todo_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todo_app'"}, {"file": "settings.py", "path": "django_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-#0@$m@$mz=w1z0j6y09w4*63+!b-!j#f#k9$v281a%9m=z'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'django_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'todo_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'django_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "django_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]"}, {"file": "wsgi.py", "path": "django_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "django_project/__init__.py", "code": ""}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.urls import reverse\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    current_date = timezone.now().date()\n    events = Event.objects.filter(start_time__date=current_date)\n    return render(request, 'home.html', {'current_date': current_date, 'events': events})\n\ndef calendar_view(request, year=None, month=None):\n    now = timezone.now()\n    if year is None or month is None:\n        year = now.year\n        month = now.month\n    else:\n        year = int(year)\n        month = int(month)\n    events = Event.objects.filter(start_time__year=year, start_time__month=month)\n    return render(request, 'calendar.html', {'year': year, 'month': month, 'events': events})\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'add_event.html', {'form': form})\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'event_details.html', {'event': event})\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event_id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'edit_event.html', {'form': form, 'event': event})\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'delete_event.html', {'event': event})\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query)\n    return render(request, 'search_events.html', {'events': events, 'query': query})\n\ndef list_events(request):\n    events = Event.objects.all()\n    return render(request, 'list_events.html', {'events': events})\n\ndef help_page(request):\n    return render(request, 'help.html')"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_month'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('list_events/', views.list_events, name='list_events'),\n    path('help/', views.help_page, name='help'),\n]"}, {"file": "settings.py", "path": "calendar_project/settings.py", "code": "# Include necessary settings like INSTALLED_APPS, MIDDLEWARE,\n# ROOT_URLCONF, TEMPLATES, DATABASES, STATIC_URL, etc.\n# Ensure 'calendar_app' is added to INSTALLED_APPS\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField"}, {"file": "urls.py", "path": "calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "calendar_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\nfrom django.core.asgi import get_asgi_application\n\napplication = get_asgi_application()"}, {"file": "home.html", "path": "calendar_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Home</h1>\n        <p id=\"current-date\" class=\"date\">Current Date: {{ current_date }}</p>\n        <a id=\"view-calendar-link\" class=\"button\" href=\"{% url 'calendar' %}\">View Calendar</a>\n\n        <h2 id=\"todays-events-title\" class=\"subtitle\">Today's Events</h2>\n        <ul id=\"events-list\" class=\"list\">\n            {% for event in events %}\n                <li class=\"list-item\"><a class=\"event-link\" href=\"{% url 'event_details' event.id %}\" id=\"event-{{ event.id }}\">{{ event.title }}</a></li>\n            {% empty %}\n                <li id=\"no-events\" class=\"list-item\">No events today.</li>\n            {% endfor %}\n        </ul>\n        <a id=\"add-event-link\" class=\"button\" href=\"{% url 'add_event' %}\">Add Event</a>\n    </div>\n{% endblock %}"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"calendar-container\" class=\"container\">\n        <h1 id=\"calendar-title\" class=\"title\">Calendar</h1>\n        <form id=\"calendar-form\" method=\"get\" action=\"{% url 'calendar' %}\" class=\"form\">\n            <div class=\"form-group\">\n                <label for=\"year\" class=\"form-label\">Year:</label>\n                <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\" class=\"form-input\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"month\" class=\"form-label\">Month:</label>\n                <select id=\"month\" name=\"month\" class=\"form-select\">\n                    {% for m in 'January February March April May June July August September October November December'.split %}\n                        <option value=\"{{ forloop.counter }}\" {% if forloop.counter == month %}selected{% endif %}>{{ m }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n            <button id=\"go-button\" type=\"submit\" class=\"button\">Go</button>\n        </form>\n        <p id=\"viewing-date\" class=\"date\">Viewing {{ month }}/{{ year }}</p>\n        <ul id=\"events-list\" class=\"list\">\n            {% for event in events %}\n                <li class=\"list-item\"><a class=\"event-link\" href=\"{% url 'event_details' event.id %}\" id=\"event-{{ event.id }}\">{{ event.title }}</a></li>\n            {% empty %}\n                <li id=\"no-events\" class=\"list-item\">No events this month.</li>\n            {% endfor %}\n        </ul>\n        <a id=\"add-event-link\" class=\"button\" href=\"{% url 'add_event' %}\">Add Event</a>\n        <a id=\"back-home-link\" class=\"button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n{% endblock %}"}, {"file": "add_event.html", "path": "calendar_app/templates/add_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"add-event-container\" class=\"container\">\n        <h1 id=\"add-event-title\" class=\"title\">Add Event</h1>\n        <form id=\"add-event-form\" method=\"post\" class=\"form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"save-button\" type=\"submit\" class=\"button\">Save</button>\n        </form>\n        <a id=\"cancel-link\" class=\"button\" href=\"{% url 'home' %}\">Cancel</a>\n    </div>\n{% endblock %}"}, {"file": "event_details.html", "path": "calendar_app/templates/event_details.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"event-details-container\" class=\"container\">\n        <h1 id=\"event-details-title\" class=\"title\">Event Details</h1>\n        <h2 id=\"event-title\" class=\"subtitle\">{{ event.title }}</h2>\n        <p id=\"event-description\" class=\"description\">Description: {{ event.description }}</p>\n        <p id=\"event-start-time\" class=\"start-time\">Start Time: {{ event.start_time }}</p>\n        <p id=\"event-end-time\" class=\"end-time\">End Time: {{ event.end_time }}</p>\n        <a id=\"edit-event-link\" class=\"button\" href=\"{% url 'edit_event' event.id %}\">Edit Event</a>\n        <a id=\"delete-event-link\" class=\"button\" href=\"{% url 'delete_event' event.id %}\">Delete Event</a>\n        <a id=\"back-home-link\" class=\"button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n{% endblock %}"}, {"file": "edit_event.html", "path": "calendar_app/templates/edit_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"edit-event-container\" class=\"container\">\n        <h1 id=\"edit-event-title\" class=\"title\">Edit Event</h1>\n        <form id=\"edit-event-form\" method=\"post\" class=\"form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"save-button\" type=\"submit\" class=\"button\">Save</button>\n        </form>\n        <a id=\"cancel-link\" class=\"button\" href=\"{% url 'event_details' event.id %}\">Cancel</a>\n    </div>\n{% endblock %}"}, {"file": "delete_event.html", "path": "calendar_app/templates/delete_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"delete-event-container\" class=\"container\">\n        <h1 id=\"delete-event-title\" class=\"title\">Delete Event</h1>\n        <p id=\"delete-confirmation\" class=\"confirmation\">Are you sure you want to delete \"{{ event.title }}\"?</p>\n        <form id=\"delete-event-form\" method=\"post\" class=\"form\">\n            {% csrf_token %}\n            <button id=\"delete-button\" type=\"submit\" class=\"button\">Delete</button>\n        </form>\n        <a id=\"cancel-link\" class=\"button\" href=\"{% url 'event_details' event.id %}\">Cancel</a>\n    </div>\n{% endblock %}"}, {"file": "search_events.html", "path": "calendar_app/templates/search_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"search-results-container\" class=\"container\">\n        <h1 id=\"search-results-title\" class=\"title\">Search Results</h1>\n        <form id=\"search-form\" method=\"get\" action=\"{% url 'search_events' %}\" class=\"form\">\n            <input type=\"text\" id=\"search-input\" name=\"q\" value=\"{{ query }}\" class=\"form-input\">\n            <button id=\"search-button\" type=\"submit\" class=\"button\">Search</button>\n        </form>\n        <ul id=\"events-list\" class=\"list\">\n            {% for event in events %}\n                <li class=\"list-item\"><a class=\"event-link\" href=\"{% url 'event_details' event.id %}\" id=\"event-{{ event.id }}\">{{ event.title }}</a></li>\n            {% empty %}\n                <li id=\"no-events\" class=\"list-item\">No events found.</li>\n            {% endfor %}\n        </ul>\n        <a id=\"back-home-link\" class=\"button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n{% endblock %}"}, {"file": "list_events.html", "path": "calendar_app/templates/list_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"all-events-container\" class=\"container\">\n        <h1 id=\"all-events-title\" class=\"title\">All Events</h1>\n        <ul id=\"events-list\" class=\"list\">\n            {% for event in events %}\n                <li class=\"list-item\"><a class=\"event-link\" href=\"{% url 'event_details' event.id %}\" id=\"event-{{ event.id }}\">{{ event.title }}</a></li>\n            {% empty %}\n                <li id=\"no-events\" class=\"list-item\">No events yet.</li>\n            {% endfor %}\n        </ul>\n        <a id=\"back-home-link\" class=\"button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n{% endblock %}"}, {"file": "help.html", "path": "calendar_app/templates/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"help-container\" class=\"container\">\n        <h1 id=\"help-title\" class=\"title\">Help</h1>\n        <h2 id=\"faq-title\" class=\"subtitle\">FAQ</h2>\n        <p id=\"faq-content\" class=\"content\">Some frequently asked questions and answers will be displayed here.</p>\n        <h2 id=\"user-guide-title\" class=\"subtitle\">User Guide</h2>\n        <p id=\"user-guide-content\" class=\"content\">A comprehensive user guide will be provided here.</p>\n        <a id=\"back-home-link\" class=\"button\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "calendar_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar App</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 800px;\n            margin: 0 auto;\n        }\n        .title {\n            font-size: 2em;\n            margin-bottom: 10px;\n        }\n        .subtitle {\n            font-size: 1.5em;\n            margin-bottom: 5px;\n        }\n        .content {\n            margin-bottom: 10px;\n        }\n        .button {\n            display: inline-block;\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n            margin-top: 10px;\n        }\n        .button:hover {\n            background-color: #0056b3;\n        }\n        .list {\n            list-style: none;\n            padding: 0;\n        }\n        .list-item {\n            margin-bottom: 5px;\n        }\n        .event-link {\n            color: #007bff;\n            text-decoration: none;\n        }\n        .event-link:hover {\n            text-decoration: underline;\n        }\n        .form-group {\n            margin-bottom: 10px;\n        }\n        .form-label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        .form-input, .form-select {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n    </style>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}, {"file": "requirements.txt", "path": "calendar_project/requirements.txt", "code": "Django>=4.0\n# Add other dependencies here"}], "9": [{"file": "urls.py", "path": "chatbot_project/chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('support/', views.support, name='support'),\n    # Optional About Us page, include if desired\n    # path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "chatbot_project/chatbot_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    # Read Product Overview\n    return render(request, 'home.html')\n\ndef features(request):\n    # List Key Features\n    return render(request, 'features.html')\n\ndef pricing(request):\n    # View Pricing Plans, Contact Sales (optional)\n    # Consider adding a form here for Contact Sales if desired\n    return render(request, 'pricing.html')\n\ndef support(request):\n    # FAQ, Support Message (optional)\n    # Consider adding a form here for Support Message if desired\n    return render(request, 'support.html')\n\n# Optional About Us view\n# def about(request):\n#     # Company Background\n#     return render(request, 'about.html')"}, {"file": "home.html", "path": "chatbot_project/chatbot_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"home-container\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-title\">Home</h1>\n        <p id=\"home-overview\" class=\"home-overview\">Product Overview: [Insert Overview Here]</p>\n    </div>\n{% endblock %}"}, {"file": "features.html", "path": "chatbot_project/chatbot_app/templates/features.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"features-container\" class=\"features-container\">\n        <h1 id=\"features-title\" class=\"features-title\">Features</h1>\n        <ul id=\"features-list\" class=\"features-list\">\n            <li class=\"feature-item\" id=\"feature-1\">[Feature 1]</li>\n            <li class=\"feature-item\" id=\"feature-2\">[Feature 2]</li>\n            <li class=\"feature-item\" id=\"feature-3\">[Feature 3]</li>\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "pricing.html", "path": "chatbot_project/chatbot_app/templates/pricing.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"pricing-container\" class=\"pricing-container\">\n        <h1 id=\"pricing-title\" class=\"pricing-title\">Pricing</h1>\n        <p id=\"pricing-plans\" class=\"pricing-plans\">[Pricing Plans]</p>\n        <!-- Optional Contact Sales form -->\n        <!--\n        <form id=\"contact-sales-form\" class=\"contact-sales-form\" method=\"post\">\n            {% csrf_token %}\n            [Form fields for contacting sales]\n            <button id=\"contact-sales-button\" class=\"contact-sales-button\" type=\"submit\">Contact Sales</button>\n        </form>\n        -->\n    </div>\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_project/chatbot_app/templates/support.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div id=\"support-container\" class=\"support-container\">\n        <h1 id=\"support-title\" class=\"support-title\">Support</h1>\n        <h2 id=\"faq-title\" class=\"faq-title\">FAQ</h2>\n        <p id=\"faq-content\" class=\"faq-content\">[FAQ Content]</p>\n        <!-- Optional Support Message form -->\n        <!--\n        <form id=\"support-message-form\" class=\"support-message-form\" method=\"post\">\n            {% csrf_token %}\n            [Form fields for support message]\n            <button id=\"send-message-button\" class=\"send-message-button\" type=\"submit\">Send Message</button>\n        </form>\n        -->\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "chatbot_project/chatbot_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n        }\n        nav {\n            background-color: #f0f0f0;\n            padding: 10px;\n            text-align: center;\n        }\n        nav a {\n            margin: 0 10px;\n            text-decoration: none;\n            color: #333;\n        }\n        hr {\n            margin: 10px 0;\n            border: 0.5px solid #ddd;\n        }\n        .home-container, .features-container, .pricing-container, .support-container {\n            padding: 20px;\n        }\n        .home-title, .features-title, .pricing-title, .support-title {\n            margin-bottom: 20px;\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a> |\n        <a id=\"nav-features\" class=\"nav-link\" href=\"{% url 'features' %}\">Features</a> |\n        <a id=\"nav-pricing\" class=\"nav-link\" href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a id=\"nav-support\" class=\"nav-link\" href=\"{% url 'support' %}\">Support</a>\n        <!--Optional About us link\n        <a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about' %}\">About Us</a>\n        -->\n    </nav>\n    <hr>\n    <main id=\"content\" class=\"content\">\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "forms.py", "path": "chatbot_project/chatbot_app/forms.py", "code": "from django import forms\n\nclass ContactSalesForm(forms.Form):\n    name = forms.CharField(max_length=100, label='Your Name')\n    email = forms.EmailField(label='Your Email')\n    message = forms.CharField(widget=forms.Textarea, label='Message')\n\nclass SupportMessageForm(forms.Form):\n    name = forms.CharField(max_length=100, label='Your Name')\n    email = forms.EmailField(label='Your Email')\n    subject = forms.CharField(max_length=200, label='Subject')\n    message = forms.CharField(widget=forms.Textarea, label='Message')"}, {"file": "models.py", "path": "chatbot_project/chatbot_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "chatbot_project/chatbot_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "__init__.py", "path": "chatbot_project/chatbot_app/__init__.py", "code": ""}, {"file": "apps.py", "path": "chatbot_project/chatbot_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ChatbotAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot_app'"}, {"file": "settings.py", "path": "chatbot_project/chatbot_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-65c6!w*l%7c67d6e#)27!7r9+193k!g5_d(0r3g2*a!j6e99t6'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'chatbot_app',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'chatbot_app/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'chatbot_app/static')]"}, {"file": "urls.py", "path": "chatbot_project/chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls'))\n]"}, {"file": "wsgi.py", "path": "chatbot_project/chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "chatbot_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "10": [{"file": "settings.py", "path": "calorie_tracker/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'home',\n    'dashboard',\n    'meal_log',\n    'activity_log',\n    'analysis',\n    'settings',\n    'help',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nLOGIN_REDIRECT_URL = 'dashboard:dashboard'\nLOGOUT_REDIRECT_URL = 'home:home'\n"}, {"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('home.urls')),  # Include URLs from the 'home' app\n    path('dashboard/', include('dashboard.urls')), # Include URLs from the 'dashboard' app\n    path('meals/', include('meal_log.urls')), # Include URLs from the 'meal_log' app\n    path('activities/', include('activity_log.urls')), # Include URLs from the 'activity_log' app\n    path('analysis/', include('analysis.urls')), # Include URLs from the 'analysis' app\n    path('settings/', include('settings.urls')), # Include URLs from the 'settings' app\n    path('help/', include('help.urls')), # Include URLs from the 'help' app\n]"}, {"file": "wsgi.py", "path": "calorie_tracker/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calorie_tracker.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "models.py", "path": "calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='meals', help_text='The user who created the meal.')\n    name = models.CharField(max_length=100, help_text='The name of the meal.')\n    calories = models.IntegerField(help_text='The number of calories in the meal.')\n    date = models.DateField(auto_now_add=True, help_text='The date the meal was logged.')\n\n    def __str__(self):\n        return f'{self.name} ({self.calories} calories)'\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='activities', help_text='The user who performed the activity.')\n    name = models.CharField(max_length=100, help_text='The name of the activity.')\n    calories_burned = models.IntegerField(help_text='The number of calories burned during the activity.')\n    date = models.DateField(auto_now_add=True, help_text='The date the activity was logged.')\n\n    def __str__(self):\n        return f'{self.name} ({self.calories_burned} calories burned)'"}, {"file": "views.py", "path": "home/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\n\ndef home(request):\n    # Welcome Message, Sign Up, Log In, View Dashboard (before login)\n    if request.user.is_authenticated:\n        return redirect('dashboard:dashboard') # Redirect to dashboard if logged in\n    return render(request, 'home/home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard:dashboard')\n    else:\n        form = UserCreationForm()\n    return render(request, 'home/signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard:dashboard')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'home/login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home:home') # Redirect to home after logout"}, {"file": "urls.py", "path": "home/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'home'\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]"}, {"file": "views.py", "path": "dashboard/views.py", "code": "from django.shortcuts import render\nfrom meal_log.models import Meal\nfrom activity_log.models import Activity\nfrom datetime import date\n\ndef dashboard(request):\n    today = date.today()\n    meals = Meal.objects.filter(user=request.user, date=today).order_by('-date')\n    activities = Activity.objects.filter(user=request.user, date=today).order_by('-date')\n\n    total_calories = sum(meal.calories for meal in meals)\n    total_calories_burned = sum(activity.calories_burned for activity in activities)\n\n    context = {\n        'meals': meals,\n        'activities': activities,\n        'total_calories': total_calories,\n        'total_calories_burned': total_calories_burned,\n    }\n    return render(request, 'dashboard/dashboard.html', context)"}, {"file": "urls.py", "path": "dashboard/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'dashboard'\n\nurlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n]"}, {"file": "views.py", "path": "meal_log/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Meal\nfrom .forms import MealForm\n\ndef meal_log(request):\n    if request.method == 'POST':\n        form = MealForm(request.POST)\n        if form.is_valid():\n            meal = form.save(commit=False)\n            meal.user = request.user\n            meal.save()\n            return redirect('dashboard:dashboard')\n    else:\n        form = MealForm()\n    meals = Meal.objects.filter(user=request.user).order_by('-date')\n\n    context = {\n        'form': form,\n        'meals': meals\n    }\n    return render(request, 'meal_log/meal_log.html', context)\n\n"}, {"file": "urls.py", "path": "meal_log/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'meal_log'\n\nurlpatterns = [\n    path('', views.meal_log, name='meal_log'),\n]"}, {"file": "views.py", "path": "activity_log/views.py", "code": "from django.shortcuts import render, redirect\nfrom .models import Activity\nfrom .forms import ActivityForm\n\ndef activity_log(request):\n    if request.method == 'POST':\n        form = ActivityForm(request.POST)\n        if form.is_valid():\n            activity = form.save(commit=False)\n            activity.user = request.user\n            activity.save()\n            return redirect('dashboard:dashboard')\n    else:\n        form = ActivityForm()\n\n    activities = Activity.objects.filter(user=request.user).order_by('-date')\n\n    context = {\n        'form': form,\n        'activities': activities\n    }\n    return render(request, 'activity_log/activity_log.html', context)\n"}, {"file": "urls.py", "path": "activity_log/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'activity_log'\n\nurlpatterns = [\n    path('', views.activity_log, name='activity_log'),\n]"}, {"file": "views.py", "path": "analysis/views.py", "code": "from django.shortcuts import render\n\ndef analysis(request):\n    # Weekly Calorie Chart\n    return render(request, 'analysis/analysis.html')\n"}, {"file": "urls.py", "path": "analysis/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'analysis'\n\nurlpatterns = [\n    path('', views.analysis, name='analysis'),\n]"}, {"file": "views.py", "path": "settings/views.py", "code": "from django.shortcuts import render\n\ndef settings_view(request):\n    # Profile, Preferences, Notifications, Privacy Settings\n    return render(request, 'settings/settings.html')\n"}, {"file": "urls.py", "path": "settings/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'settings'\n\nurlpatterns = [\n    path('', views.settings_view, name='settings'),\n]"}, {"file": "views.py", "path": "help/views.py", "code": "from django.shortcuts import render\n\ndef help_view(request):\n    # FAQ, Contact Support, Tutorials\n    return render(request, 'help/help.html')\n"}, {"file": "urls.py", "path": "help/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'help'\n\nurlpatterns = [\n    path('', views.help_view, name='help'),\n]"}, {"file": "forms.py", "path": "meal_log/forms.py", "code": "from django import forms\nfrom .models import Meal\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = ['name', 'calories']\n        widgets = {\n            'name': forms.TextInput(attrs={'class': 'form-control', 'id': 'mealName', 'placeholder': 'Enter meal name'}),\n            'calories': forms.NumberInput(attrs={'class': 'form-control', 'id': 'mealCalories', 'placeholder': 'Enter calories'}),\n        }"}, {"file": "forms.py", "path": "activity_log/forms.py", "code": "from django import forms\nfrom .models import Activity\n\nclass ActivityForm(forms.ModelForm):\n    class Meta:\n        model = Activity\n        fields = ['name', 'calories_burned']\n        widgets = {\n            'name': forms.TextInput(attrs={'class': 'form-control', 'id': 'activityName', 'placeholder': 'Enter activity name'}),\n            'calories_burned': forms.NumberInput(attrs={'class': 'form-control', 'id': 'activityCalories', 'placeholder': 'Enter calories burned'}),\n        }"}, {"file": "home.html", "path": "templates/home/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"homeContainer\">\n        <h1 class=\"mb-4\" id=\"homeTitle\">Welcome to Calorie Tracker!</h1>\n        <p class=\"lead\" id=\"homeDescription\">Track your meals and activities to stay healthy.</p>\n        <div class=\"d-grid gap-2\" id=\"homeButtons\">\n            <a href=\"{% url 'home:signup' %}\" class=\"btn btn-primary\" id=\"signupButton\">Sign Up</a>\n            <a href=\"{% url 'home:login' %}\" class=\"btn btn-secondary\" id=\"loginButton\">Log In</a>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "signup.html", "path": "templates/home/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"signupContainer\">\n        <h2 class=\"mb-3\" id=\"signupTitle\">Sign Up</h2>\n        <form method=\"post\" id=\"signupForm\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"signupSubmit\">Sign Up</button>\n        </form>\n        <p class=\"mt-3\" id=\"loginPrompt\">Already have an account? <a href=\"{% url 'home:login' %}\" id=\"loginLink\">Log In</a></p>\n    </div>\n{% endblock %}"}, {"file": "login.html", "path": "templates/home/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"loginContainer\">\n        <h2 class=\"mb-3\" id=\"loginTitle\">Log In</h2>\n        <form method=\"post\" id=\"loginForm\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"loginSubmit\">Log In</button>\n        </form>\n        <p class=\"mt-3\" id=\"signupPrompt\">Need an account? <a href=\"{% url 'home:signup' %}\" id=\"signupLink\">Sign Up</a></p>\n    </div>\n{% endblock %}"}, {"file": "dashboard.html", "path": "templates/dashboard/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"dashboardContainer\">\n        <h1 class=\"mb-4\" id=\"dashboardTitle\">Dashboard</h1>\n\n        <div class=\"row\" id=\"dashboardSummary\">\n            <div class=\"col-md-6\" id=\"calorieSummary\">\n                <h2 id=\"caloriesHeader\">Calories Today</h2>\n                <p id=\"totalCalories\">Total Calories Consumed: {{ total_calories }}</p>\n                <p id=\"totalCaloriesBurned\">Total Calories Burned: {{ total_calories_burned }}</p>\n            </div>\n        </div>\n\n        <div class=\"row mt-4\" id=\"mealAndActivityLogs\">\n            <div class=\"col-md-6\" id=\"mealLog\">\n                <h2 id=\"mealsHeader\">Today's Meals</h2>\n                <ul class=\"list-group\" id=\"mealList\">\n                    {% for meal in meals %}\n                        <li class=\"list-group-item\" id=\"mealItem{{ forloop.counter }}\">{{ meal.name }} - {{ meal.calories }} calories</li>\n                    {% empty %}\n                        <li class=\"list-group-item\" id=\"noMeals\">No meals logged today.</li>\n                    {% endfor %}\n                </ul>\n                <a href=\"{% url 'meal_log:meal_log' %}\" class=\"btn btn-primary mt-3\" id=\"addMealButton\">Add Meal</a>\n            </div>\n\n            <div class=\"col-md-6\" id=\"activityLog\">\n                <h2 id=\"activitiesHeader\">Today's Activities</h2>\n                <ul class=\"list-group\" id=\"activityList\">\n                    {% for activity in activities %}\n                        <li class=\"list-group-item\" id=\"activityItem{{ forloop.counter }}\">{{ activity.name }} - {{ activity.calories_burned }} calories burned</li>\n                    {% empty %}\n                        <li class=\"list-group-item\" id=\"noActivities\">No activities logged today.</li>\n                    {% endfor %}\n                </ul>\n                <a href=\"{% url 'activity_log:activity_log' %}\" class=\"btn btn-primary mt-3\" id=\"addActivityButton\">Add Activity</a>\n            </div>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "meal_log.html", "path": "templates/meal_log/meal_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"mealLogContainer\">\n        <h1 class=\"mb-4\" id=\"mealLogTitle\">Meal Log</h1>\n        <form method=\"post\" id=\"mealForm\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"mealSubmitButton\">Add Meal</button>\n        </form>\n\n        <h2 class=\"mt-4\" id=\"mealHistoryTitle\">Meal History</h2>\n        <ul class=\"list-group\" id=\"mealHistoryList\">\n            {% for meal in meals %}\n                <li class=\"list-group-item\" id=\"mealHistoryItem{{ forloop.counter }}\">{{ meal.name }} - {{ meal.calories }} calories - {{ meal.date }}</li>\n            {% empty %}\n                <li class=\"list-group-item\" id=\"noMealHistory\">No meals logged yet.</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "activity_log.html", "path": "templates/activity_log/activity_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"activityLogContainer\">\n        <h1 class=\"mb-4\" id=\"activityLogTitle\">Activity Log</h1>\n        <form method=\"post\" id=\"activityForm\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"activitySubmitButton\">Add Activity</button>\n        </form>\n\n        <h2 class=\"mt-4\" id=\"activityHistoryTitle\">Activity History</h2>\n        <ul class=\"list-group\" id=\"activityHistoryList\">\n            {% for activity in activities %}\n                <li class=\"list-group-item\" id=\"activityHistoryItem{{ forloop.counter }}\">{{ activity.name }} - {{ activity.calories_burned }} calories burned - {{ activity.date }}</li>\n            {% empty %}\n                <li class=\"list-group-item\" id=\"noActivityHistory\">No activities logged yet.</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "analysis.html", "path": "templates/analysis/analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"analysisContainer\">\n        <h1 class=\"mb-4\" id=\"analysisTitle\">Analysis</h1>\n        <p id=\"analysisDescription\">This page will display your weekly calorie chart.</p>\n    </div>\n{% endblock %}"}, {"file": "settings.html", "path": "templates/settings/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"settingsContainer\">\n        <h1 class=\"mb-4\" id=\"settingsTitle\">Settings</h1>\n        <p id=\"settingsDescription\">This page will allow you to manage your profile, preferences, and privacy settings.</p>\n    </div>\n{% endblock %}"}, {"file": "help.html", "path": "templates/help/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container mt-5\" id=\"helpContainer\">\n        <h1 class=\"mb-4\" id=\"helpTitle\">Help</h1>\n        <p id=\"helpDescription\">This page contains FAQs, contact support information, and tutorials.</p>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calorie Tracker</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <style>\n        body {\n            padding-top: 56px; /* Adjust for fixed navbar */\n        }\n    </style>\n</head>\n<body>\n\n    <nav class=\"navbar navbar-expand-lg navbar-dark bg-dark fixed-top\" id=\"mainNav\">\n        <div class=\"container\">\n            <a class=\"navbar-brand\" href=\"{% url 'home:home' %}\" id=\"brandLink\">Calorie Tracker</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\" id=\"navToggle\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav ms-auto\" id=\"navList\">\n                    {% if user.is_authenticated %}\n                        <li class=\"nav-item\" id=\"dashboardNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'dashboard:dashboard' %}\" id=\"dashboardLink\">Dashboard</a>\n                        </li>\n                        <li class=\"nav-item\" id=\"mealLogNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'meal_log:meal_log' %}\" id=\"mealLogLink\">Meal Log</a>\n                        </li>\n                        <li class=\"nav-item\" id=\"activityLogNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'activity_log:activity_log' %}\" id=\"activityLogLink\">Activity Log</a>\n                        </li>\n                         <li class=\"nav-item\" id=\"analysisNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'analysis:analysis' %}\" id=\"analysisLink\">Analysis</a>\n                        </li>\n                        <li class=\"nav-item\" id=\"settingsNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'settings:settings' %}\" id=\"settingsLink\">Settings</a>\n                        </li>\n                        <li class=\"nav-item\" id=\"helpNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'help:help' %}\" id=\"helpLink\">Help</a>\n                        </li>\n                        <li class=\"nav-item\" id=\"logoutNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'home:logout' %}\" id=\"logoutLink\">Logout</a>\n                        </li>\n                    {% else %}\n                        <li class=\"nav-item\" id=\"loginNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'home:login' %}\" id=\"loginLink\">Login</a>\n                        </li>\n                        <li class=\"nav-item\" id=\"signupNavItem\">\n                            <a class=\"nav-link\" href=\"{% url 'home:signup' %}\" id=\"signupLink\">Sign Up</a>\n                        </li>\n                    {% endif %}\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    <div class=\"container\">\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>"}], "11": [{"file": "review_app/settings.py", "path": "review_app/review_app/settings.py", "code": "DEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "review_app/urls.py", "path": "review_app/review_app/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review.urls')),\n]"}, {"file": "review_app/wsgi.py", "path": "review_app/review_app/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_app.settings')\n\napplication = get_wsgi_application()"}, {"file": "review/models.py", "path": "review_app/review/models.py", "code": "from django.db import models\n\nclass TestCode(models.Model):\n    file_name = models.CharField(max_length=255)\n    file_path = models.CharField(max_length=512)\n    code = models.TextField()\n    STATUS_CHOICES = [\n        ('Pass', 'Pass'),\n        ('Fail', 'Fail'),\n        ('Select', 'Select'),\n    ]\n    status = models.CharField(\n        max_length=20,\n        choices=STATUS_CHOICES,\n        default='Select'\n    )\n    review_notes = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return self.file_name"}, {"file": "review/forms.py", "path": "review_app/review/forms.py", "code": "from django import forms\n\nclass ImportFileForm(forms.Form):\n    json_file = forms.FileField()\n\nclass TestCodeReviewForm(forms.Form):\n    status = forms.ChoiceField(choices=[('Pass', 'Pass'), ('Fail', 'Fail'), ('Select', 'Select')])\n    review_notes = forms.CharField(widget=forms.Textarea)"}, {"file": "review/views.py", "path": "review_app/review/views.py", "code": "import json\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom .forms import ImportFileForm, TestCodeReviewForm\nfrom .models import TestCode\n\ndef home(request):\n    welcome_message = \"Welcome to the Code Review App!\"\n    test_codes = TestCode.objects.all()\n    import_form = ImportFileForm()\n    review_form = TestCodeReviewForm()\n\n    context = {\n        'welcome_message': welcome_message,\n        'test_codes': test_codes,\n        'import_form': import_form,\n        'review_form': review_form,\n    }\n\n    return render(request, 'home.html', context)\n\ndef about(request):\n    return render(request, 'about.html')\n\n\ndef import_json(request):\n    if request.method == 'POST':\n        form = ImportFileForm(request.POST, request.FILES)\n        if form.is_valid():\n            json_file = request.FILES['json_file']\n            try:\n                data = json.load(json_file)\n                for item in data:\n                    TestCode.objects.create(\n                        file_name=item['file'],\n                        file_path=item['path'],\n                        code=item['code']\n                    )\n                return redirect('home')  # Redirect to the home page after successful import\n            except json.JSONDecodeError:\n                return HttpResponse(\"Invalid JSON file.\", status=400)\n    else:\n        form = ImportFileForm()\n    return render(request, 'import_form.html', {'form': form})\n\ndef review_testcode(request, pk):\n    test_code = get_object_or_404(TestCode, pk=pk)\n    if request.method == 'POST':\n        form = TestCodeReviewForm(request.POST)\n        if form.is_valid():\n            test_code.status = form.cleaned_data['status']\n            test_code.review_notes = form.cleaned_data['review_notes']\n            test_code.save()\n            return redirect('home')  # Redirect to the home page after review\n    else:\n        form = TestCodeReviewForm(initial={'status': test_code.status, 'review_notes': test_code.review_notes})\n    return render(request, 'review_form.html', {'form': form, 'test_code': test_code})"}, {"file": "review/urls.py", "path": "review_app/review/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('import/', views.import_json, name='import_json'),\n    path('review/<int:pk>/', views.review_testcode, name='review_testcode'),\n]"}, {"file": "review/templates/home.html", "path": "review_app/review/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Code Review App</title>\n</head>\n<body>\n    <h1 id=\"welcome-message\" class=\"welcome-message\">{{ welcome_message }}</h1>\n\n    <div id=\"import-form-container\" class=\"import-form-container\">\n        <h2>Import JSON File</h2>\n        <form id=\"import-form\" class=\"import-form\" method=\"post\" enctype=\"multipart/form-data\" action=\"{% url 'import_json' %}\">\n            {% csrf_token %}\n            {{ import_form.as_p }}\n            <button type=\"submit\" id=\"import-button\" class=\"import-button\">Import</button>\n        </form>\n    </div>\n\n    <div id=\"test-code-list\" class=\"test-code-list\">\n        <h2>Test Codes</h2>\n        {% if test_codes %}\n            <ul>\n                {% for test_code in test_codes %}\n                    <li id=\"test-code-item-{{ test_code.pk }}\" class=\"test-code-item\">\n                        <strong>File:</strong> {{ test_code.file_name }} ({{test_code.file_path}})<br>\n                        <pre>{{ test_code.code }}</pre>\n                        <p><strong>Status:</strong> {{ test_code.status }}</p>\n                        <p><strong>Review Notes:</strong> {{ test_code.review_notes }}</p>\n\n                        <a href=\"{% url 'review_testcode' pk=test_code.pk %}\" id=\"review-link-{{ test_code.pk }}\" class=\"review-link\">Review</a>\n\n                    </li>\n                {% endfor %}\n            </ul>\n        {% else %}\n            <p id=\"no-test-codes-message\" class=\"no-test-codes-message\">No test codes available.</p>\n        {% endif %}\n    </div>\n\n    <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"about-link\">About</a>\n</body>\n</html>"}, {"file": "review/templates/about.html", "path": "review_app/review/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"about-title\">About This App</h1>\n    <p id=\"about-content\" class=\"about-content\">This is a simple Django app for reviewing code snippets.</p>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Home</a>\n</body>\n</html>"}, {"file": "review/templates/import_form.html", "path": "review_app/review/templates/import_form.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Import JSON</title>\n</head>\n<body>\n    <h1 id=\"import-title\" class=\"import-title\">Import JSON File</h1>\n    <form id=\"import-form\" class=\"import-form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"import-button\" class=\"import-button\">Import</button>\n    </form>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Home</a>\n</body>\n</html>"}, {"file": "review/templates/review_form.html", "path": "review_app/review/templates/review_form.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Review Test Code</title>\n</head>\n<body>\n    <h1 id=\"review-title\" class=\"review-title\">Review Test Code</h1>\n    <p id=\"file-name\" class=\"file-name\"><strong>File:</strong> {{ test_code.file_name }} ({{test_code.file_path}})</p>\n    <pre id=\"code-snippet\" class=\"code-snippet\">{{ test_code.code }}</pre>\n\n    <form id=\"review-form\" class=\"review-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\" class=\"submit-button\">Submit Review</button>\n    </form>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Home</a>\n</body>\n</html>"}, {"file": "tests/example1.py", "path": "review_app/tests/example1.py", "code": "def add(a, b):\n  return a + b"}, {"file": "tests/utils/example2.py", "path": "review_app/tests/utils/example2.py", "code": "def multiply(a, b):\n  return a * b"}, {"file": "review/admin.py", "path": "review_app/review/admin.py", "code": "from django.contrib import admin\nfrom .models import TestCode\n\nadmin.site.register(TestCode)"}, {"file": "review/apps.py", "path": "review_app/review/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ReviewConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'review'"}, {"file": "review/static/review/style.css", "path": "review_app/review/static/review/style.css", "code": "/* Add your CSS styles here */\nbody {\n    font-family: sans-serif;\n}\n\n.welcome-message {\n    color: green;\n}\n\n.test-code-item {\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 10px;\n}\n\n.review-link {\n    display: inline-block;\n    padding: 5px 10px;\n    background-color: #007bff;\n    color: white;\n    text-decoration: none;\n    border-radius: 5px;\n}\n\n.review-link:hover {\n    background-color: #0056b3;\n}\n"}, {"file": "review_app/__init__.py", "path": "review_app/review_app/__init__.py", "code": "default_app_config = 'review.apps.ReviewConfig'"}], "13": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255, null=True, blank=True)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name}'"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom django.http import HttpResponse\n\ndef home_page(request):\n    return HttpResponse(\"Welcome to the System!\")\n\n# Customer Management Views\n\ndef add_customer(request):\n    return HttpResponse(\"Add Customer functionality\")\n\ndef edit_customer(request, customer_id):\n    return HttpResponse(\"Edit Customer functionality\")\n\ndef delete_customer(request, customer_id):\n    return HttpResponse(\"Delete Customer functionality\")\n\ndef view_customer(request, customer_id):\n    return HttpResponse(\"View Customer functionality\")\n\n# Product Management Views\n\ndef add_product(request):\n    return HttpResponse(\"Add Product functionality\")\n\ndef edit_product(request, product_id):\n    return HttpResponse(\"Edit Product functionality\")\n\ndef delete_product(request, product_id):\n    return HttpResponse(\"Delete Product functionality\")\n\ndef view_product(request, product_id):\n    return HttpResponse(\"View Product functionality\")\n\n# Purchase Records Views\n\ndef add_purchase_record(request):\n    return HttpResponse(\"Add Purchase Record functionality\")\n\ndef edit_purchase_record(request, record_id):\n    return HttpResponse(\"Edit Purchase Record functionality\")\n\ndef delete_purchase_record(request, record_id):\n    return HttpResponse(\"Delete Purchase Record functionality\")\n\ndef view_purchase_record(request, record_id):\n    return HttpResponse(\"View Purchase Record functionality\")\n\n# Preferred Products Management Views\n\ndef add_preferred_product(request, customer_id, product_id):\n    return HttpResponse(\"Add Preferred Product functionality\")\n\ndef edit_preferred_product(request, customer_id, product_id):\n    return HttpResponse(\"Edit Preferred Product functionality\")\n\ndef delete_preferred_product(request, customer_id, product_id):\n    return HttpResponse(\"Delete Preferred Product functionality\")\n\ndef view_preferred_products(request, customer_id):\n    return HttpResponse(\"View Preferred Products functionality\")\n\n# Sales Analysis Views\n\ndef generate_sales_report(request):\n    return HttpResponse(\"Generate Sales Report functionality\")\n\ndef analyze_sales_trends(request):\n    return HttpResponse(\"Analyze Sales Trends functionality\")\n\ndef product_performance_analysis(request):\n    return HttpResponse(\"Product Performance Analysis functionality\")"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home_page'),\n\n    # Customer Management\n    path('customers/add/', views.add_customer, name='add_customer'),\n    path('customers/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customers/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customers/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n\n    # Product Management\n    path('products/add/', views.add_product, name='add_product'),\n    path('products/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('products/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('products/view/<int:product_id>/', views.view_product, name='view_product'),\n\n    # Purchase Records\n    path('purchases/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchases/edit/<int:record_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchases/delete/<int:record_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchases/view/<int:record_id>/', views.view_purchase_record, name='view_purchase_record'),\n\n    # Preferred Products\n    path('preferred_products/add/<int:customer_id>/<int:product_id>/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred_products/edit/<int:customer_id>/<int:product_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred_products/delete/<int:customer_id>/<int:product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred_products/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n\n    # Sales Analysis\n    path('sales/report/', views.generate_sales_report, name='generate_sales_report'),\n    path('sales/trends/', views.analyze_sales_trends, name='analyze_sales_trends'),\n    path('sales/performance/', views.product_performance_analysis, name='product_performance_analysis'),\n]"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": "default_app_config = 'myapp.apps.MyappConfig'"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-07!4e^#67b%q@e61q+l3!y4$3j*#i9=m3d2k*@$4z8e-r(j00!'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "14": [{"file": "views.py", "path": "helloworld/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    return render(request, 'helloworld/hello_world.html')"}, {"file": "urls.py", "path": "helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworld.urls')),\n]"}, {"file": "hello_world.html", "path": "helloworld/templates/helloworld/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            font-family: sans-serif;\n            background-color: #f0f0f0;\n        }\n\n        .container {\n            text-align: center;\n        }\n\n        .heading {\n            color: #333;\n            font-size: 3em;\n        }\n    </style>\n</head>\n<body id=\"body\" class=\"body\">\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"heading\" class=\"heading\">Hello World</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'helloworld/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'helloworld/static')]\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "apps.py", "path": "helloworld/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloworldConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworld'"}, {"file": "models.py", "path": "helloworld/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "helloworld/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"main-title\">Welcome!</h1>\n    <a id=\"helloworld-link\" class=\"button-link\" href=\"{% url 'helloworld' %}\">\n        <button id=\"helloworld-button\" class=\"primary-button\">Go to HelloWorld</button>\n    </a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1 id=\"helloworld-title\" class=\"main-title\">HelloWorld</h1>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myproject',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "admin.py", "path": "myproject/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "myproject/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}], "16": [{"file": "input_validation.py", "path": "modules/input_validation.py", "code": "def CheckFileExistence(filename):\n    # Implement file existence check logic here\n    pass\n\ndef ValidateHeaders(filename, expected_headers):\n    # Implement header validation logic here\n    pass\n\ndef ValidateTimeColumn(filename):\n    # Implement 'Time' column validation logic here\n    pass\n\ndef ValidateDataIntegrity(filename):\n    # Implement data integrity validation logic here\n    pass\n\ndef ValidateNullValue(filename):\n    # Implement missing value validation logic here\n    pass"}, {"file": "data_transformation.py", "path": "modules/data_transformation.py", "code": "def TransformToTwoDimensionTable(data):\n    # Implement data transformation to 2D table logic here\n    pass\n\ndef DataMapping(data):\n    # Implement data mapping logic here\n    pass"}, {"file": "output_creation.py", "path": "modules/output_creation.py", "code": "def CreateOutputExcelFile(filename):\n    # Implement Excel file creation logic here\n    pass\n\ndef SaveTableToExcel(data, filename):\n    # Implement saving 2D table data to Excel logic here\n    pass"}, {"file": "main.py", "path": "main.py", "code": "from modules import input_validation\nfrom modules import data_transformation\nfrom modules import output_creation\n\n\ndef main():\n    filename = 'Spring Semester Subjects.xlsx'\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n\n    # Input File Validation\n    input_validation.CheckFileExistence(filename)\n    input_validation.ValidateHeaders(filename, expected_headers)\n    input_validation.ValidateTimeColumn(filename)\n    input_validation.ValidateDataIntegrity(filename)\n    input_validation.ValidateNullValue(filename)\n\n    # Data Transformation (Placeholder - needs actual data loading)\n    data = [] # Load data from the excel file here instead of hardcoding it\n    transformed_data = data_transformation.TransformToTwoDimensionTable(data)\n    mapped_data = data_transformation.DataMapping(transformed_data)\n\n    # Output File Creation\n    output_filename = 'Transformed_Subjects.xlsx'\n    output_creation.CreateOutputExcelFile(output_filename)\n    output_creation.SaveTableToExcel(mapped_data, output_filename)\n\nif __name__ == \"__main__\":\n    main()"}], "17": [{"file": "data_preparation.py", "path": "src/data_preparation.py", "code": "import pandas as pd\n\n\ndef read_dataset(filename):\n    \"\"\"Loads the dataset from the specified file.\n\n    Args:\n        filename (str): The name of the Excel file to load.\n\n    Returns:\n        pandas.DataFrame: The loaded dataset.\n\n    Raises:\n        FileNotFoundError: If the file does not exist.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {filename}\")\n\n\ndef lag_dependent_variable(df, column_name='result', lag=1):\n    \"\"\"Applies a one-period lag to the specified column.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        column_name (str): The name of the column to lag.\n        lag (int): The number of periods to lag.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with the lagged column.\n    \"\"\"\n    df['result_lagged'] = df[column_name].shift(lag)\n    return df\n\n\ndef prepare_independent_variables(df, dependent_variable='result_lagged'):\n    \"\"\"Prepares the independent variables and checks for null values.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        dependent_variable (str): The name of the dependent variable column.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with independent variables.\n\n    Raises:\n        ValueError: If null values are found in the DataFrame.\n    \"\"\"\n    if df.isnull().any().any():\n        raise ValueError(\"Null values found in the DataFrame. Please handle them before proceeding.\")\n    \n    if df.empty:\n        raise ValueError(\"Empty DataFrame. Please check your dataset.\")\n\n    independent_variables = df.drop(columns=[dependent_variable], errors='ignore')\n    return independent_variables\n\n"}, {"file": "model_creation.py", "path": "src/model_creation.py", "code": "import statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\n\ndef create_logistic_model(X, y):\n    \"\"\"Creates a logistic regression model.\n\n    Args:\n        X (pandas.DataFrame): The independent variables.\n        y (pandas.Series): The dependent variable.\n\n    Returns:\n        statsmodels.discrete.discrete_model.BinaryResultsWrapper: The fitted logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)\n    model = sm.Logit(y, X)\n    results = model.fit()\n    return results\n\n\ndef generate_model_summary(model):\n    \"\"\"Generates a summary of the logistic model.\n\n    Args:\n        model (statsmodels.discrete.discrete_model.BinaryResultsWrapper): The fitted logistic regression model.\n\n    Returns:\n        str: The model summary.\n    \"\"\"\n    return model.summary()\n"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\n\ndef write_summary(summary, filename='Logistic.xlsx'):\n    \"\"\"Writes the model summary to an Excel file.\n\n    Args:\n        summary (str): The model summary.\n        filename (str): The name of the Excel file to write to.\n    \"\"\"\n    df = pd.DataFrame([summary])  # Convert string to DataFrame\n    df.to_excel(filename, index=False, header=False) # Write without index or header\n"}, {"file": "main.py", "path": "main.py", "code": "from src import data_preparation\nfrom src import model_creation\nfrom src import output\n\ndef main():\n    try:\n        # Data Preparation\n        df = data_preparation.read_dataset('Gamedata.xlsx')\n        df = data_preparation.lag_dependent_variable(df)\n        X = data_preparation.prepare_independent_variables(df, dependent_variable='result_lagged')\n        y = df['result_lagged'].dropna() # Drop NaN resulted from lagging\n\n        # Model Creation\n        model = model_creation.create_logistic_model(X, y)\n        summary = model_creation.generate_model_summary(model)\n\n        # Output\n        output.write_summary(summary, 'Logistic.xlsx')\n\n        print(\"Model summary written to Logistic.xlsx\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}, {"file": "Gamedata.xlsx", "path": "Gamedata.xlsx", "code": "This file should contain your game data in Excel format.  It should have a column named 'result' and any other columns you want to use as independent variables. You need to create this Excel file for the project to run. Example:\n\n| result | feature1 | feature2 |\n|---|---|---|\n| 1 | 0.5 | 0.2 |\n| 0 | 0.8 | 0.9 |\n| 1 | 0.1 | 0.3 |\n| 0 | 0.6 | 0.7 |"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "def start_game():\n    print(\"Starting the game...\")\n\ndef instructions():\n    print(\"Instructions:\\nUse commands like 'go north', 'take sword', 'look around'.\")\n\ndef exit_game():\n    print(\"Exiting the game. Goodbye!\")\n    import sys\n    sys.exit()\n\ndef main_menu():\n    while True:\n        print(\"\\nMain Menu:\\n1. Start Game\\n2. Instructions\\n3. Exit\")\n        choice = input(\"Enter your choice (1-3): \")\n\n        if choice == '1':\n            start_game()\n            break # Or go to a different game function\n        elif choice == '2':\n            instructions()\n        elif choice == '3':\n            exit_game()\n        else:\n            print(\"Invalid choice. Please try again.\")"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "class Room:\n    def __init__(self, name, description, items=None, exits=None):\n        self.name = name\n        self.description = description\n        self.items = items if items else []\n        self.exits = exits if exits else {}\n\n    def __str__(self):\n        return self.name + \": \" + self.description\n\n    def add_item(self, item):\n        self.items.append(item)\n\n    def remove_item(self, item):\n        if item in self.items:\n            self.items.remove(item)\n\n    def add_exit(self, direction, room):\n        self.exits[direction] = room\n\n\ndef move_player(room):\n    print(room)\n    return room #Returns the new room object.\n\n\ndef look_around(room):\n    print(room.description)\n    if room.items:\n        print(\"You see the following items: \", ', '.join(room.items))\n\n\ndef pick_item(room, item_name, inventory):\n    if item_name in room.items:\n        print(f\"You picked up the {item_name}.\")\n        room.remove_item(item_name)\n        inventory.append(item_name)\n    else:\n        print(\"That item isn't here.\")\n\n\ndef check_inventory(inventory):\n    if inventory:\n        print(\"Your inventory contains: \", ', '.join(inventory))\n    else:\n        print(\"Your inventory is empty.\")"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "def parse_command(command):\n    command = command.lower().split()\n    if not command:\n        return None, None, None #Handles empty input\n    action = command[0]\n    target = ' '.join(command[1:]) if len(command) > 1 else None # Join remaining words for target\n    return action, target, command #Return all tokens\n\n\ndef update_game_state(command, game_state):\n    action, target, tokens = parse_command(command)\n\n    if action == 'go':\n        if target in game_state['current_room'].exits:\n            game_state['current_room'] = game_state['current_room'].exits[target]\n            print(f\"You went {target}.\")\n            import game_environment\n            game_environment.look_around(game_state['current_room'])\n        else:\n            print(\"You can't go that way.\")\n\n    elif action == 'look':\n        import game_environment\n        game_environment.look_around(game_state['current_room'])\n\n    elif action == 'take':\n        if target:\n            import game_environment\n            game_environment.pick_item(game_state['current_room'], target, game_state['inventory'])\n        else:\n            print(\"Take what?\")\n\n    elif action == 'inventory':\n        import game_environment\n        game_environment.check_inventory(game_state['inventory'])\n\n    elif action == 'help':\n        import help_support\n        help_support.display_help()\n    elif action == 'exit':\n        import main_menu\n        main_menu.exit_game()\n    elif action == 'start':\n        print(\"Already in the game!\")\n    elif action: #If an action exists and isn't in the above cases, it's an invalid command\n        print(\"Invalid command.\")\n    return game_state"}, {"file": "help_support.py", "path": "src/help_support.py", "code": "def display_help():\n    print(\"\\nAvailable commands:\\n\")\n    print(\"  go [direction] - Move in the specified direction (north, south, east, west)\")\n    print(\"  look - Examine the current room\")\n    print(\"  take [item] - Pick up an item\")\n    print(\"  inventory - Check your inventory\")\n    print(\"  help - Display this help message\")\n    print(\"  exit - Quit the game\")"}, {"file": "game.py", "path": "src/game.py", "code": "import main_menu\nimport game_environment\nimport game_logic\nimport help_support\n\ndef main():\n    # Initialize game\n    inventory = []\n    # Sample rooms\n    room1 = game_environment.Room(\"The Foyer\", \"A grand entrance hall.\", [\"sword\", \"torch\"], {\"north\": None, \"east\": None})\n    room2 = game_environment.Room(\"The Armory\", \"A room filled with weapons and armor.\", [\"shield\"], {\"south\": room1})\n    room1.exits[\"north\"] = room2 #Set North exit of Room 1 to Room 2.\n\n    current_room = room1 # Start in the Foyer.\n\n    game_state = {\n        'inventory': inventory,\n        'current_room': current_room\n    }\n\n    print(\"Welcome to the Text Adventure Game!\")\n    game_environment.look_around(current_room)\n\n    # Main game loop\n    while True:\n        command = input(\"> \")\n        game_state = game_logic.update_game_state(command, game_state)\n\nif __name__ == \"__main__\":\n    main()"}], "19": [{"file": "batch_program.py", "path": "src/batch_program.py", "code": "# src/batch_program.py\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef ReadDeathlistData(file_path):\n    \"\"\"Load and read data from the 'Deathlist.csv' file.\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File not found at {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return None\n\n\ndef ProcessData(df):\n    \"\"\"Process the dataset to structure data appropriately for weekly analysis.\"\"\"\n    # Assuming the DataFrame has a date column named 'DateOfDeath'\n    try:\n        df['DateOfDeath'] = pd.to_datetime(df['DateOfDeath'])\n        df['WeekNumber'] = df['DateOfDeath'].dt.isocalendar().week\n        return df\n    except KeyError:\n        print(\"Error: 'DateOfDeath' column not found. Please ensure the CSV file has this column.\")\n        return None\n    except Exception as e:\n        print(f\"Error processing data: {e}\")\n        return None\n\n\ndef CalculateWeeklyDeaths(df):\n    \"\"\"Aggregate the data to calculate the number of deaths per week.\"\"\"\n    try:\n        weekly_deaths = df.groupby('WeekNumber').size().reset_index(name='DeathCount')\n        return weekly_deaths\n    except Exception as e:\n        print(f\"Error calculating weekly deaths: {e}\")\n        return None\n\n\ndef GenerateHistogram(weekly_deaths):\n    \"\"\"Create a histogram depicting the weekly deaths calculated from the dataset.\"\"\"\n    try:\n        plt.figure(figsize=(12, 6))  # Adjust figure size for better readability\n        plt.bar(weekly_deaths['WeekNumber'], weekly_deaths['DeathCount'], color='skyblue')\n        plt.xlabel('Week Number')\n        plt.ylabel('Number of Deaths')\n        plt.title('Weekly Deaths Histogram')\n        plt.grid(axis='y', alpha=0.75)\n        plt.tight_layout()\n        return plt  # Return the matplotlib object\n    except Exception as e:\n        print(f\"Error generating histogram: {e}\")\n        return None\n\n\ndef OutputHistogram(plt_object, output_path=None):\n    \"\"\"Print or display the generated histogram to the user.\"\"\"\n    if plt_object is not None:\n        if output_path:\n            try:\n                plt_object.savefig(output_path)\n                print(f\"Histogram saved to {output_path}\")\n            except Exception as e:\n                print(f\"Error saving histogram: {e}\")\n                plt_object.show()\n        else:\n            plt_object.show()\n    else:\n        print(\"No histogram to output.\")\n\n\ndef ValidateDataset(df):\n    \"\"\"Validate the dataset to ensure it contains the required data and format before processing.\"\"\"\n    if df is None:\n        print(\"Error: DataFrame is None. Unable to validate.\")\n        return False\n\n    required_columns = ['DateOfDeath'] # Add other required columns as needed.\n    for col in required_columns:\n        if col not in df.columns:\n            print(f\"Error: Required column '{col}' is missing from the dataset.\")\n            return False\n\n    # Add more validation checks as needed, e.g., data types, missing values, etc.\n    print(\"Dataset validation successful.\")\n    return True\n\n\n\n\ndef main():\n    deathlist_file = 'Deathlist.csv'  # Replace with actual path if needed\n    output_file = 'weekly_deaths_histogram.png'  # Replace if you want another name\n    \n    df = ReadDeathlistData(deathlist_file)\n\n    if df is None:\n        print(\"Failed to read data. Exiting.\")\n        return\n\n    if not ValidateDataset(df):\n        print(\"Dataset validation failed. Exiting.\")\n        return\n\n    processed_df = ProcessData(df)\n\n    if processed_df is None:\n        print(\"Failed to process data. Exiting.\")\n        return\n\n    weekly_deaths = CalculateWeeklyDeaths(processed_df)\n\n    if weekly_deaths is None:\n        print(\"Failed to calculate weekly deaths. Exiting.\")\n        return\n\n    histogram = GenerateHistogram(weekly_deaths)\n\n    if histogram is None:\n        print(\"Failed to generate histogram. Exiting.\")\n        return\n\n    OutputHistogram(histogram, output_file)\n\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "Deathlist.csv", "path": "data/Deathlist.csv", "code": "DateOfDeath\n2023-01-01\n2023-01-02\n2023-01-08\n2023-01-15\n2023-01-22\n2023-01-29\n2023-02-05\n2023-02-12\n2023-02-19\n2023-02-26\n2023-03-05\n2023-03-12\n2023-03-19\n2023-03-26\n2023-04-02\n2023-04-09\n2023-04-16\n2023-04-23\n2023-04-30\n2023-05-07\n2023-05-14\n2023-05-21\n2023-05-28\n2023-06-04\n2023-06-11\n2023-06-18\n2023-06-25\n2023-07-02\n2023-07-09\n2023-07-16\n2023-07-23\n2023-07-30\n2023-08-06\n2023-08-13\n2023-08-20\n2023-08-27\n2023-09-03\n2023-09-10\n2023-09-17\n2023-09-24\n2023-10-01\n2023-10-08\n2023-10-15\n2023-10-22\n2023-10-29\n2023-11-05\n2023-11-12\n2023-11-19\n2023-11-26\n2023-12-03\n2023-12-10\n2023-12-17\n2023-12-24\n2023-12-31"}, {"file": "README.md", "path": "README.md", "code": "# Weekly Deaths Analysis\n\nThis project analyzes a dataset of death dates to generate a histogram of weekly deaths.\n\n## Requirements\n\n*   Python 3.6 or higher\n*   pandas\n*   matplotlib\n\n## Installation\n\n1.  Clone the repository:\n\n    ```bash\n    git clone <repository_url>\n    cd weekly-deaths-analysis\n    ```\n\n2.  Install the dependencies:\n\n    ```bash\n    pip install pandas matplotlib\n    ```\n\n## Usage\n\n1.  Place your `Deathlist.csv` file in the `data/` directory (create the directory if it doesn't exist).  The `Deathlist.csv` should at least contain a column named `DateOfDeath`.\n\n2.  Run the `batch_program.py` script:\n\n    ```bash\n    python src/batch_program.py\n    ```\n\n3.  A histogram `weekly_deaths_histogram.png` will be generated and saved in the same directory as the script.\n\n## Project Structure\n\n```\nweekly-deaths-analysis/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 Deathlist.csv\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 batch_program.py\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 weekly_deaths_histogram.png\n```\n\n## Notes\n\n*   The `Deathlist.csv` file should have a column named `DateOfDeath`.\n*   You can modify the input and output file paths in the `main()` function of `batch_program.py`.\n*   The histogram will be displayed if the script fails to save it to a file.\n"}, {"file": ".gitignore", "path": ".gitignore", "code": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.eggs/\ndist/\nbuild/\nlib/\nlib64/\nweekly_deaths_histogram.png\n\n# JetBrains IDEs\n.idea/\n\n# VS Code\n.vscode/\n"}]}