{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Form definitions\nclass BMICalculatorForm(forms.Form):\n    \"\"\"\n    A form to calculate BMI using weight and height.\n    \"\"\"\n    weight = forms.FloatField(label='Weight (kg)')\n    height = forms.FloatField(label='Height (m)')"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import BMICalculatorForm\n\n# Category thresholds\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\n# BMI interpretation descriptions\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\"\n}\n\ndef homepage(request):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    return render(request, 'homepage.html')\n\n\ndef bmi_calculator(request):\n    \"\"\"\n    Calculate BMI based on user input.\n    \"\"\"\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height']\n            bmi = weight / (height ** 2) if height > 0 else None\n            \n            category = None\n            interpretation = None\n            \n            if bmi is not None:\n                for cat, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        category = cat\n                        interpretation = bmi_interpretation[cat]\n                        break\n                \n                context = {\n                    'form': form,\n                    'bmi': round(bmi, 2) if bmi else None,\n                    'category': category,\n                    'interpretation': interpretation,\n                }\n            else:\n                context = {\n                    'form': form,\n                    'bmi': None,\n                    'category': \"Invalid Height\",\n                    'interpretation': bmi_interpretation[\"Invalid height\"]\n                }\n                \n            return render(request, 'bmi_calculator.html', context)\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form, 'bmi': None, 'category': None, 'interpretation': None})\n\n\ndef advice(request):\n    \"\"\"\n    Provide health advice based on BMI.\n    \"\"\"\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advice</title>\n</head>\n<body>\n    <div id=\"advice-container\" class=\"advice-container\">\n        <h1 id=\"advice-title\" class=\"advice-title\">Health Advice</h1>\n        <p id=\"advice-content\" class=\"advice-content\">\n            The advice page provides health recommendations based on BMI categories.\n        </p>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"bmi-calculator-container\">\n        <h1 id=\"bmi-calculator-title\" class=\"bmi-calculator-title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" class=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-content\" class=\"form-content\">\n                {{ form.as_p }}\n                <button id=\"calculate-button\" class=\"calculate-button\" type=\"submit\">Calculate</button>\n            </div>\n        </form>\n        \n        {% if bmi %}\n            <div id=\"bmi-results\" class=\"bmi-results\">\n                <p id=\"bmi-value\" class=\"bmi-value\">Your BMI: {{ bmi }}</p>\n                <p id=\"bmi-category\" class=\"bmi-category\">Category: {{ category }}</p>\n                <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">Interpretation: {{ interpretation }}</p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Homepage</title>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"homepage-container\">\n        <h1 id=\"homepage-title\" class=\"homepage-title\">Welcome to the BMI Calculator!</h1>\n        <p id=\"homepage-description\" class=\"homepage-description\">\n            The homepage provides an introduction to BMI calculation and a link to navigate to the BMI calculator.\n        </p>\n        <a id=\"bmi-link\" class=\"bmi-link\" href=\"/bmi-calculator/\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n# Project URL configurations\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    '''\n    The form for user to use the converter\n    '''\n    source_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, label='Source Currency')\n    target_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, label='Target Currency')\n    amount = forms.DecimalField(label='Amount', initial=1.00)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    \"\"\"\n    Model for currency rate record\n    \"\"\"\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=20, decimal_places=10, verbose_name='Rate')\n    timestamp = models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')\n\n    class Meta:\n        verbose_name = 'Currency Conversion Rate'\n        verbose_name_plural = 'Currency Conversion Rates'\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency} at {self.rate}'\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport datetime\nfrom django.shortcuts import render\nfrom django.views.generic import TemplateView\nimport matplotlib.pyplot as plt\nimport io\nimport base64\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\ndef get_updated(source_currency, target_currency):\n    \"\"\"\n    Warning:\n    This function is a simulation of currency rate.\n    In the production environment, this function should be replaced with an api from professional currency exchanging market website.\n    \"\"\"\n    # random rate\n    USD_BASE = {\n        'USD': 1.00,\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'JPY': 110.00,\n        'AUD': 1.35,\n        'CNY': 7.00,\n        'CAD': 1.25,\n        'CHF': 0.92,\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\ndef get_conversion_rate(source_currency, target_currency):\n    try:\n        latest_rate = CurrencyConvertRateModel.objects.filter(source_currency=source_currency, target_currency=target_currency).latest('timestamp')\n        return latest_rate.rate\n    except CurrencyConvertRateModel.DoesNotExist:\n        return None\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            amount = form.cleaned_data['amount']\n\n            # Get Conversion Rate\n            conversion_rate = get_updated(source_currency, target_currency)\n\n            converted_amount = amount * conversion_rate\n            context = {\n                'form': form,\n                'source_currency': source_currency,\n                'target_currency': target_currency,\n                'amount': amount,\n                'converted_amount': converted_amount,\n                'conversion_rate': conversion_rate,\n            }\n            return render(request, self.template_name, context)\n        else:\n            return render(request, self.template_name, {'form': form})\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        source_currency = request.GET.get('source_currency', 'USD')\n        target_currency = request.GET.get('target_currency', 'EUR')\n\n        # Generate Sample Data (replace with actual database retrieval)\n        data = []\n        now = datetime.datetime.now()\n        for i in range(10):\n            date = now - datetime.timedelta(days=i)\n            rate = get_updated(source_currency, target_currency)\n            data.append((date, rate))\n\n        data.reverse()\n        # Plot Chart\n        chart_image = self.plot_chart(data, source_currency, target_currency)\n\n        context = {\n            'chart_image': chart_image,\n            'source_currency': source_currency,\n            'target_currency': target_currency\n        }\n        return render(request, self.template_name, context)\n\n    @staticmethod\n    def plot_chart(data, source_currency, target_currency):\n        plt.figure(figsize=(8, 4))\n        dates = [item[0] for item in data]\n        rates = [item[1] for item in data]\n        plt.plot(dates, rates)\n        plt.xlabel('Date')\n        plt.ylabel('Exchange Rate')\n        plt.title(f'{source_currency} to {target_currency} Exchange Rate Trends')\n        plt.grid(True)\n\n        # Save plot to buffer\n        buf = io.BytesIO()\n        plt.savefig(buf, format='png')\n        buf.seek(0)\n        string = base64.b64encode(buf.read())\n        uri = 'data:image/png;base64,' + string.decode('utf-8')\n        plt.close()\n        return uri\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-04 03:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=128, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=128, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=16, max_digits=32, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n        }\n\n        header {\n            background: #505050;\n            color: white;\n            padding-top: 30px;\n            min-height: 70px;\n            border-bottom: #bbb 1px solid;\n        }\n\n        header a {\n            color: #fff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-size: 16px;\n        }\n\n        header ul {\n            margin: 0;\n            padding: 0;\n            list-style: none;\n            overflow: hidden;\n        }\n\n        header li {\n            float: left;\n            display: inline;\n            padding: 0 20px 0 20px;\n        }\n\n        header #branding {\n            float: left;\n        }\n\n        header #branding h1 {\n            margin: 0;\n        }\n\n        header nav {\n            float: right;\n            margin-top: 10px;\n        }\n\n        #showcase {\n            min-height: 400px;\n            background: url('../images/showcase.jpg') no-repeat 0 -100px;\n            text-align: center;\n            color: #fff;\n        }\n\n        #showcase h1 {\n            margin-top: 100px;\n            font-size: 55px;\n            margin-bottom: 10px;\n        }\n\n        #newsletter {\n            padding: 15px;\n            color: #fff;\n            background: #35424a;\n        }\n\n        #newsletter h1 {\n            float: left;\n        }\n\n        #newsletter form {\n            float: right;\n            margin-top: 15px;\n        }\n\n        #newsletter input[type=\"email\"] {\n            padding: 4px;\n            height: 25px;\n            width: 250px;\n        }\n\n        .button_1 {\n            height: 38px;\n            background: #e8491d;\n            border: 0;\n            padding-left: 20px;\n            padding-right: 20px;\n            color: #fff;\n        }\n\n        .dark {\n            padding: 15px;\n            background: #35424a;\n            color: #fff;\n            margin-top: 10px;\n            margin-bottom: 10px;\n        }\n\n        aside#sidebar {\n            float: right;\n            width: 30%;\n            margin-top: 10px;\n        }\n\n        article#main-col {\n            float: left;\n            width: 65%;\n        }\n\n        footer {\n            padding: 20px;\n            margin-top: 20px;\n            color: #fff;\n            background-color: #e8491d;\n            text-align: center;\n        }\n\n        /* Media Queries */\n        @media(max-width: 768px) {\n            header #branding,\n            header nav,\n            header nav li,\n            #newsletter h1,\n            #newsletter form,\n            #boxes .box,\n            article#main-col,\n            aside#sidebar {\n                float: none;\n                text-align: center;\n                width: 100%;\n            }\n\n            header {\n                padding-bottom: 20px;\n            }\n\n            #showcase h1 {\n                margin-top: 40px;\n            }\n\n            #newsletter button {\n                display: block;\n                width: 100%;\n            }\n\n            #newsletter form input[type=\"email\"] {\n                width: 100%;\n                margin-bottom: 5px;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header id=\"main-header\">\n            <h1>Exchange Rate Trends</h1>\n        </header>\n        <section id=\"content\">\n            <img id=\"exchange-rate-chart\" class=\"exchange-rate-chart\" src=\"{{ chart_image }}\" alt=\"Exchange Rate Chart\">\n            <p>Showing trends for {{ source_currency }} to {{ target_currency }}.</p>\n        </section>\n        <footer id=\"main-footer\">\n            <p>Copyright &copy; 2024</p>\n        </footer>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n        }\n\n        header {\n            background: #505050;\n            color: white;\n            padding-top: 30px;\n            min-height: 70px;\n            border-bottom: #bbb 1px solid;\n        }\n\n        header a {\n            color: #fff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-size: 16px;\n        }\n\n        header ul {\n            margin: 0;\n            padding: 0;\n            list-style: none;\n            overflow: hidden;\n        }\n\n        header li {\n            float: left;\n            display: inline;\n            padding: 0 20px 0 20px;\n        }\n\n        header #branding {\n            float: left;\n        }\n\n        header #branding h1 {\n            margin: 0;\n        }\n\n        header nav {\n            float: right;\n            margin-top: 10px;\n        }\n\n        #showcase {\n            min-height: 400px;\n            background: url('../images/showcase.jpg') no-repeat 0 -100px;\n            text-align: center;\n            color: #fff;\n        }\n\n        #showcase h1 {\n            margin-top: 100px;\n            font-size: 55px;\n            margin-bottom: 10px;\n        }\n\n        #newsletter {\n            padding: 15px;\n            color: #fff;\n            background: #35424a;\n        }\n\n        #newsletter h1 {\n            float: left;\n        }\n\n        #newsletter form {\n            float: right;\n            margin-top: 15px;\n        }\n\n        #newsletter input[type=\"email\"] {\n            padding: 4px;\n            height: 25px;\n            width: 250px;\n        }\n\n        .button_1 {\n            height: 38px;\n            background: #e8491d;\n            border: 0;\n            padding-left: 20px;\n            padding-right: 20px;\n            color: #fff;\n        }\n\n        .dark {\n            padding: 15px;\n            background: #35424a;\n            color: #fff;\n            margin-top: 10px;\n            margin-bottom: 10px;\n        }\n\n        aside#sidebar {\n            float: right;\n            width: 30%;\n            margin-top: 10px;\n        }\n\n        article#main-col {\n            float: left;\n            width: 65%;\n        }\n\n        footer {\n            padding: 20px;\n            margin-top: 20px;\n            color: #fff;\n            background-color: #e8491d;\n            text-align: center;\n        }\n\n        /* Media Queries */\n        @media(max-width: 768px) {\n            header #branding,\n            header nav,\n            header nav li,\n            #newsletter h1,\n            #newsletter form,\n            #boxes .box,\n            article#main-col,\n            aside#sidebar {\n                float: none;\n                text-align: center;\n                width: 100%;\n            }\n\n            header {\n                padding-bottom: 20px;\n            }\n\n            #showcase h1 {\n                margin-top: 40px;\n            }\n\n            #newsletter button {\n                display: block;\n                width: 100%;\n            }\n\n            #newsletter form input[type=\"email\"] {\n                width: 100%;\n                margin-bottom: 5px;\n            }\n        }\n\n        .currency-converter-form {\n            margin-top: 20px;\n            padding: 20px;\n            background-color: #fff;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        .form-group {\n            margin-bottom: 15px;\n        }\n\n        .form-group label {\n            display: block;\n            font-weight: bold;\n            margin-bottom: 5px;\n        }\n\n        .form-group select,\n        .form-group input[type=\"number\"] {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        .form-group button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        .conversion-result {\n            margin-top: 20px;\n            padding: 15px;\n            background-color: #e6f7e7;\n            border: 1px solid #b3e0b5;\n            border-radius: 4px;\n        }\n\n        .conversion-result p {\n            margin: 0;\n            font-size: 16px;\n        }\n        header a {\n            color: #fff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-size: 16px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <header id=\"main-header\">\n            <h1>Currency Converter</h1>\n            <nav>\n              <ul>\n                <li><a href=\"/trends/\">Trends</a></li>\n              </ul>\n            </nav>\n        </header>\n\n        <section id=\"main\">\n            <article id=\"main-col\">\n                <form id=\"currency-converter-form\" class=\"currency-converter-form\" method=\"post\">\n                    {% csrf_token %}\n                    <div class=\"form-group\">\n                        <label for=\"id_source_currency\">Source Currency:</label>\n                        {{ form.source_currency }}\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"id_target_currency\">Target Currency:</label>\n                        {{ form.target_currency }}\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"id_amount\">Amount:</label>\n                        {{ form.amount }}\n                    </div>\n                    <div class=\"form-group\">\n                        <button type=\"submit\">Convert</button>\n                    </div>\n                </form>\n\n                {% if converted_amount %}\n                <div id=\"conversion-result\" class=\"conversion-result\">\n                    <p><b>{{ amount }} {{ source_currency }}</b> is equal to <b>{{ converted_amount|floatformat:2 }} {{ target_currency }}</b></p>\n                    <p>Conversion Rate: {{ conversion_rate|floatformat:4 }}</p>\n                </div>\n                {% endif %}\n            </article>\n        </section>\n\n        <footer id=\"main-footer\">\n            <p>Copyright &copy; 2024</p>\n        </footer>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', views.ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', views.InfoView, name='info'),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "from django.contrib import admin\nfrom .models import CurrencyConvertRateModel\n\n@admin.register(CurrencyConvertRateModel)\nclass CurrencyConvertRateAdmin(admin.ModelAdmin):\n    list_display = ('source_currency', 'target_currency', 'rate', 'timestamp')\n    list_filter = ('source_currency', 'target_currency')\n    search_fields = ('source_currency', 'target_currency')\n    date_hierarchy = 'timestamp'\n"}, {"file": "info.html", "path": "example_app/templates/info.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Info</title>\n</head>\n<body>\n    <h1>This page is for demonstration purposes.</h1>\n</body>\n</html>"}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView().get, name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView().get, name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    \"\"\"\n    Generates a random password based on the specified criteria.\n    \"\"\"\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return \"Please select at least one character type.\"\n\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    \"\"\"\n    Handles the password generation form and renders the result.\n    \"\"\"\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n\n        return render(request, 'generator.html', {'password': password})\n    else:\n        return render(request, 'generator.html')\n\n\nclass HomePageView:\n    \"\"\"\n    Renders the Home page of the password generator.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handles GET requests to the home page.\n        \"\"\"\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView:\n    \"\"\"\n    Renders the About Us page of the password generator.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handles GET requests to the about us page.\n        \"\"\"\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n.container { width: 80%; margin: 0 auto; }\n.password-display { margin-bottom: 20px; }\n#copy-message { display: none; color: green; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    // Placeholder function for copying password to clipboard\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        // Show a message on the page instead of using alert\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';  // Make the message visible\n        // Hide the message after 3 seconds\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        // In case of error (e.g., clipboard API not supported)\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"about-us-container\" class=\"container\">\n        <h1 id=\"about-us-title\">About Us</h1>\n        <p id=\"about-us-content\">This is a simple password generator application built with Django.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n    <script src=\"/static/js/scripts.js\"></script>\n</head>\n<body>\n    <div id=\"generator-container\" class=\"container\">\n        <h1 id=\"generator-title\">Password Generator</h1>\n        <form id=\"password-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"length-group\" class=\"form-group\">\n                <label for=\"length\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" value=\"12\">\n            </div>\n            <div id=\"options-group\" class=\"form-group\">\n                <label for=\"uppercase\">Include Uppercase:</label>\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" checked><br>\n                <label for=\"lowercase\">Include Lowercase:</label>\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" checked><br>\n                <label for=\"numbers\">Include Numbers:</label>\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" checked><br>\n                <label for=\"symbols\">Include Symbols:</label>\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n            </div>\n            <button id=\"generate-button\" type=\"submit\">Generate Password</button>\n        </form>\n\n        {% if password %}\n        <div id=\"password-display\" class=\"password-display\">\n            <p id=\"password\">{{ password }}</p>\n            <button id=\"copy-button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n            <p id=\"copy-message\" style=\"display:none;\"></p>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\">Welcome to the Password Generator!</h1>\n        <p id=\"home-description\">Generate strong and secure passwords with ease.</p>\n        <a id=\"generator-link\" href=\"/generator/\">Generate Password</a>\n        <a id=\"about-us-link\" href=\"/about-us/\">About Us</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"example_app/static\"),\n]\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    \"\"\"\n    Configuration class for the QR app.\n    \"\"\"\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse, FileResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'qr_app/home.html')\n\n\ndef hex_to_rgb(value):\n    \"\"\"\n    Convert hex color to RGB tuple.\n    \"\"\"\n    value = value.lstrip('#')\n    lv = len(value)\n    return tuple(int(value[i:i + lv // 3], 16) for i in range(0, lv, lv // 3))\n\n\ndef generate_qr_code(request):\n    \"\"\"\n    Generate a QR code from provided data.\n    \"\"\"\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        fg_color = request.POST.get('fg_color', '#000000')\n        bg_color = request.POST.get('bg_color', '#FFFFFF')\n\n        try:\n            fg_color_rgb = hex_to_rgb(fg_color)\n            bg_color_rgb = hex_to_rgb(bg_color)\n        except:\n            fg_color_rgb = (0, 0, 0)\n            bg_color_rgb = (255, 255, 255)\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.constants.ERROR_CORRECT_L,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fg_color_rgb, back_color=bg_color_rgb)\n        img_buffer = io.BytesIO()\n        img.save(img_buffer, format='PNG')\n        img_bytes = img_buffer.getvalue()\n\n        img_base64 = base64.b64encode(img_bytes).decode('utf-8')\n\n        return render(request, 'qr_app/generate.html', {'qr_image': img_base64, 'data': data, 'fg_color': fg_color, 'bg_color': bg_color})\n    return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    \"\"\"\n    Allow users to download the generated QR code.\n    \"\"\"\n    if request.method == 'POST':\n        img_base64 = request.POST.get('qr_image')\n        data = request.POST.get('data')\n\n        if img_base64:\n            img_bytes = base64.b64decode(img_base64)\n            img_io = io.BytesIO(img_bytes)\n            return FileResponse(img_io, as_attachment=True, filename=f'qrcode_{data}.png')\n\n    return HttpResponse('Error: No QR code image found.')\n\n\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'qr_app/about.html')\n"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About QR Code Generator</h1>\n        <p id=\"about-description\" class=\"description\">\n            This is a simple QR Code Generator web application built with Django. It allows you to generate QR codes from text, URLs, or any other data.  You can also customize the colors.\n        </p>\n        <h2 id=\"faq-title\" class=\"faq-title\">Frequently Asked Questions</h2>\n        <div id=\"faq-list\" class=\"faq-list\">\n            <div id=\"faq-item-1\" class=\"faq-item\">\n                <h3 id=\"faq-question-1\" class=\"faq-question\">What is a QR Code?</h3>\n                <p id=\"faq-answer-1\" class=\"faq-answer\">A QR Code (Quick Response Code) is a type of matrix barcode (or two-dimensional barcode) first designed in 1994 for the automotive industry in Japan. A barcode is a machine-readable optical label that contains information about the item to which it is attached.</p>\n            </div>\n            <div id=\"faq-item-2\" class=\"faq-item\">\n                <h3 id=\"faq-question-2\" class=\"faq-question\">How do I use this QR Code Generator?</h3>\n                <p id=\"faq-answer-2\" class=\"faq-answer\">Simply enter the data you want to encode into the QR code, choose your desired colors, and click the 'Generate QR Code' button.  You can then download the generated image.</p>\n            </div>\n            <div id=\"faq-item-3\" class=\"faq-item\">\n                <h3 id=\"faq-question-3\" class=\"faq-question\">Is this service free?</h3>\n                <p id=\"faq-answer-3\" class=\"faq-answer\">Yes, this QR Code Generator is completely free to use.</p>\n            </div>\n        </div>\n        <div id=\"policies-section\" class=\"policies-section\">\n            <h2 id=\"policies-title\" class=\"policies-title\">Policies</h2>\n            <p id=\"policy-statement\" class=\"policy-statement\">We do not store any of the data you enter into the QR code generator. Your privacy is important to us.</p>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n\n        #qr-image-container {\n            margin-top: 20px;\n            text-align: center;\n        }\n\n        #qr-image {\n            max-width: 300px;\n            max-height: 300px;\n            border: 1px solid #ccc;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"generate-container\" class=\"container\">\n        <h1 id=\"generate-title\" class=\"title\">QR Code Generator</h1>\n        <form id=\"qr-form\" method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <label id=\"data-label\" for=\"data\">Data:</label>\n            <input id=\"data\" type=\"text\" name=\"data\" required>\n\n            <label id=\"fg-color-label\" for=\"fg_color\">Foreground Color:</label>\n            <input id=\"fg_color\" type=\"color\" name=\"fg_color\" value=\"#000000\">\n\n            <label id=\"bg-color-label\" for=\"bg_color\">Background Color:</label>\n            <input id=\"bg_color\" type=\"color\" name=\"bg_color\" value=\"#FFFFFF\">\n\n            <button id=\"generate-button\" type=\"submit\">Generate QR Code</button>\n        </form>\n\n        {% if qr_image %}\n        <div id=\"qr-image-container\">\n            <img id=\"qr-image\" src=\"data:image/png;base64,{{ qr_image }}\" alt=\"QR Code\">\n            <form id=\"download-form\" method=\"post\" action=\"{% url 'download_qr_code' %}\">\n                {% csrf_token %}\n                <input type=\"hidden\" name=\"qr_image\" value=\"{{ qr_image }}\">\n                <input type=\"hidden\" name=\"data\" value=\"{{ data }}\">\n                <button id=\"download-button\" type=\"submit\">Download QR Code</button>\n            </form>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        h1 {\n            text-align: center;\n        }\n\n        .navigation {\n            display: flex;\n            justify-content: center;\n            margin-top: 30px;\n        }\n\n        .navigation a {\n            margin: 0 15px;\n            text-decoration: none;\n            color: #007bff;\n            padding: 8px 16px;\n            border: 1px solid #007bff;\n            border-radius: 5px;\n        }\n\n        .navigation a:hover {\n            background-color: #007bff;\n            color: white;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to QR Code Generator!</h1>\n        <p id=\"home-description\" class=\"description\">\n            Generate and customize your QR codes online.\n        </p>\n\n        <nav id=\"main-nav\" class=\"navigation\">\n            <a id=\"generate-link\" class=\"nav-link\" href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n            <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\n\nALLOWED_HOSTS = []\n\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\n\nTIME_ZONE = 'UTC'\n\n\nUSE_I18N = True\n\n\nUSE_L10N = True\n\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = '/static/'\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    \"\"\"\n    Configuration for the Example App.\n    \"\"\"\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n# Home view\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\n# Convert view\ndef convert(request):\n    \"\"\"\n    Handle Markdown to HTML conversion.\n    \"\"\"\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html': html})\n    return render(request, 'convert.html')\n\n# About view\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Markdown Converter</h1>\n        <p id=\"about-description\" class=\"description\">\n            This application provides a simple way to convert Markdown text to HTML.\n            It's built using Django and the Python Markdown library.\n        </p>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"container\">\n        <h1 id=\"convert-title\" class=\"title\">Markdown to HTML Converter</h1>\n        <form id=\"convert-form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" name=\"markdown_text\" rows=\"10\" cols=\"50\" placeholder=\"Enter Markdown text here\"></textarea><br>\n            <button id=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n        {% if html %}\n        <div id=\"html-output\" class=\"output\">\n            <h2>HTML Output:</h2>\n            <div id=\"html-content\">{{ html|safe }}</div>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to Markdown Converter</h1>\n        <p id=\"home-description\" class=\"description\">\n            Convert your Markdown text to HTML quickly and easily!\n        </p>\n        <nav id=\"home-navigation\" class=\"navigation\">\n            <a id=\"convert-link\" href=\"{% url 'convert' %}\">Convert</a>\n            <a id=\"about-link\" href=\"{% url 'about' %}\">About</a>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": null, "path": "media", "code": ""}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import include, path\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}], "7": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main function to execute Django commands\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\n\nclass Category(models.Model):\n    \"\"\"\n    Model for representing the category of transactions.\n    \"\"\"\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the category.\n        \"\"\"\n        return self.name\n\n\nclass Transaction(models.Model):\n    \"\"\"\n    Model for representing a financial transaction.\n    \"\"\"\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the transaction.\n        \"\"\"\n        return f'${self.amount} - {self.category} on {self.date.strftime('%Y-%m-%d')}'\n\n\nclass SupportRequest(models.Model):\n    \"\"\"\n    Model for capturing support requests from users.\n    \"\"\"\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns a string representation of the support request.\n        \"\"\"\n        return f'Support request from {self.name} ({self.email})'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import *\n\n# URL patterns for routing views\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('login/', LoginView.as_view(), name='login'),\n    path('signup/', SignupView.as_view(), name='signup'),\n    path('logout/', LogoutView.as_view(), name='logout'),\n    path('dashboard/', DashboardView.as_view(), name='dashboard'),\n    path('charts/', ChartsView.as_view(), name='charts'),\n    path('settings/', SettingsView.as_view(), name='settings'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('download_report/', DownloadReportView.as_view(), name='download_report'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import csv\nfrom datetime import datetime\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.db import models\nfrom django.db.models import Sum\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse, HttpRequest\nfrom django.utils.timezone import now\nfrom django.views.generic import View, TemplateView\nfrom django.contrib.auth import authenticate, login, update_session_auth_hash, logout\nfrom django.contrib.auth.models import User\nfrom django.contrib import messages\nfrom .models import Category, Transaction, SupportRequest\nfrom django.urls import reverse\n\n\nclass LoginRequiredView(LoginRequiredMixin, View):\n    \"\"\"\n    Basic view that requires login.\n    \"\"\"\n    login_url = '/login/'\n    redirect_field_name = 'next'\n\n\nclass HomeView(TemplateView):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    template_name = 'home.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n\nclass LoginView(View):\n    \"\"\"\n    Handles user login functionality.\n    \"\"\"\n    template_name = 'login.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        username = request.POST.get('username')\n        password = request.POST.get('password')\n        user = authenticate(request, username=username, password=password)\n        if user is not None:\n            login(request, user)\n            messages.success(request, 'Logged in successfully.')\n            return redirect('dashboard')\n        else:\n            messages.error(request, 'Invalid username or password.')\n            return render(request, self.template_name)\n\n\nclass SignupView(View):\n    \"\"\"\n    Manages the signup process for new users.\n    \"\"\"\n    template_name = 'signup.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        username = request.POST.get('username')\n        email = request.POST.get('email')\n        password = request.POST.get('password')\n        password2 = request.POST.get('password2')\n\n        if password != password2:\n            messages.error(request, 'Passwords do not match.')\n            return render(request, self.template_name, {'username': username, 'email': email})\n\n        if User.objects.filter(username=username).exists():\n            messages.error(request, 'Username already exists.')\n            return render(request, self.template_name, {'email': email})\n\n        if User.objects.filter(email=email).exists():\n            messages.error(request, 'Email already exists.')\n            return render(request, self.template_name, {'username': username})\n\n        user = User.objects.create_user(username, email, password)\n        user.save()\n        messages.success(request, 'Account created successfully. Please log in.')\n        return redirect('login')\n\n\nclass LogoutView(LoginRequiredView):\n    \"\"\"\n    Logs out the user and redirects to the login page.\n    \"\"\"\n\n    def get(self, request):\n        logout(request)\n        messages.success(request, 'Logged out successfully.')\n        return redirect('home')\n\n\nclass DashboardView(LoginRequiredView, TemplateView):\n    \"\"\"\n    Handles displaying and interacting with the dashboard.\n    \"\"\"\n    template_name = 'dashboard.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        user = self.request.user\n        transactions = Transaction.objects.filter(user=user).order_by('-date')\n        context['transactions'] = transactions\n        return context\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name, self.get_context_data())\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        # Handle dashboard post actions (e.g., adding a transaction)\n        pass\n\n\nclass ChartsView(LoginRequiredView, TemplateView):\n    \"\"\"\n    Renders and provides data for the charts page.\n    \"\"\"\n    template_name = 'charts.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        user = self.request.user\n        transactions = Transaction.objects.filter(user=user)\n\n        # Prepare data for transaction charts\n        category_data = {}\n        for transaction in transactions:\n            category = transaction.category.name\n            if category in category_data:\n                category_data[category] += float(transaction.amount)\n            else:\n                category_data[category] = float(transaction.amount)\n\n        context['category_labels'] = list(category_data.keys())\n        context['category_values'] = list(category_data.values())\n\n        return context\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name, self.get_context_data())\n\n\nclass SettingsView(LoginRequiredView, TemplateView):\n    \"\"\"\n    Provides user settings management.\n    \"\"\"\n    template_name = 'settings.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        # Handle updates and changes to settings\n        pass\n\n\nclass SupportView(LoginRequiredView, TemplateView):\n    \"\"\"\n    Allows users to view and submit support requests.\n    \"\"\"\n    template_name = 'support.html'\n\n    def get(self, request: HttpRequest) -> HttpResponse:\n        return render(request, self.template_name)\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        name = request.POST.get('name')\n        email = request.POST.get('email')\n        message = request.POST.get('message')\n\n        SupportRequest.objects.create(name=name, email=email, message=message)\n        messages.success(request, 'Support request submitted successfully.')\n        return redirect('support')\n\n\nclass DownloadReportView(LoginRequiredView):\n    \"\"\"\n    Enables users to download financial reports.\n    \"\"\"\n\n    def post(self, request: HttpRequest) -> HttpResponse:\n        user = request.user\n        transactions = Transaction.objects.filter(user=user)\n\n        response = HttpResponse(\n            content_type='text/csv',\n            headers={'Content-Disposition': 'attachment; filename=\"transaction_report.csv\"'},\n        )\n\n        writer = csv.writer(response)\n        writer.writerow(['Date', 'Category', 'Amount', 'Description'])\n\n        for transaction in transactions:\n            writer.writerow([\n                transaction.date.strftime('%Y-%m-%d'),\n                transaction.category.name,\n                transaction.amount,\n                transaction.description\n            ])\n\n        return response\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "charts.html", "path": "example_app/templates/charts.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Transaction Charts</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"charts-title\" class=\"mt-4 mb-4\">Transaction Charts</h1>\n\n        <div class=\"row\">\n            <div class=\"col-md-6\">\n                <canvas id=\"categoryChart\" aria-label=\"Transaction Categories\"></canvas>\n            </div>\n            <div class=\"col-md-6\">\n                <p>Description or additional charts can go here.</p>\n            </div>\n        </div>\n    </div>\n\n    <script>\n        const categoryLabels = {{ category_labels|safe }};\n        const categoryValues = {{ category_values|safe }};\n\n        const categoryChartCanvas = document.getElementById('categoryChart').getContext('2d');\n        const categoryChart = new Chart(categoryChartCanvas, {\n            type: 'pie',\n            data: {\n                labels: categoryLabels,\n                datasets: [{\n                    label: 'Transaction Distribution by Category',\n                    data: categoryValues,\n                    backgroundColor: [\n                        'rgba(255, 99, 132, 0.7)',\n                        'rgba(54, 162, 235, 0.7)',\n                        'rgba(255, 206, 86, 0.7)',\n                        'rgba(75, 192, 192, 0.7)',\n                        'rgba(153, 102, 255, 0.7)',\n                        'rgba(255, 159, 64, 0.7)'\n                    ],\n                    borderColor: [\n                        'rgba(255, 99, 132, 1)',\n                        'rgba(54, 162, 235, 1)',\n                        'rgba(255, 206, 86, 1)',\n                        'rgba(75, 192, 192, 1)',\n                        'rgba(153, 102, 255, 1)',\n                        'rgba(255, 159, 64, 1)'\n                    ],\n                    borderWidth: 1\n                }]\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                plugins: {\n                    legend: {\n                        position: 'bottom',\n                    },\n                    title: {\n                        display: true,\n                        text: 'Transaction Distribution by Category',\n                        padding: 20,\n                        font: {\n                            size: 18\n                        }\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Dashboard</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"dashboard-title\" class=\"mt-4 mb-4\">Dashboard</h1>\n        <p id=\"welcome-message\">Welcome, {{ user.username }}!</p>\n\n        <div class=\"mb-3\">\n            <a href=\"{% url 'logout' %}\" class=\"btn btn-danger\">Logout</a>\n            <a href=\"{% url 'charts' %}\" class=\"btn btn-primary\">View Charts</a>\n        </div>\n\n        <h2 id=\"transactions-header\">Transactions</h2>\n        <table class=\"table table-bordered\" id=\"transactions-table\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Category</th>\n                    <th>Amount</th>\n                    <th>Description</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for transaction in transactions %}\n                    <tr>\n                        <td>{{ transaction.date }}</td>\n                        <td>{{ transaction.category }}</td>\n                        <td>{{ transaction.amount }}</td>\n                        <td>{{ transaction.description }}</td>\n                    </tr>\n                {% empty %}\n                    <tr>\n                        <td colspan=\"4\">No transactions found.</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n\n        <form id=\"download-report-form\" method=\"post\" action=\"{% url 'download_report' %}\">\n            {% csrf_token %}\n            <button type=\"submit\" class=\"btn btn-success\">Download Report</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"mt-5 mb-4\">Welcome to the Financial Tracker!</h1>\n        <p id=\"home-description\" class=\"lead\">Manage your transactions and gain insights into your spending.</p>\n\n        <div class=\"d-grid gap-2 col-6 mx-auto\">\n            <a href=\"{% url 'login' %}\" class=\"btn btn-primary btn-lg\" id=\"login-button\">Login</a>\n            <a href=\"{% url 'signup' %}\" class=\"btn btn-success btn-lg\" id=\"signup-button\">Signup</a>\n            <a href=\"{% url 'support' %}\" class=\"btn btn-outline-secondary btn-lg\" id=\"support-button\">Support</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Login</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"login-title\" class=\"mt-5 mb-4\">Login</h1>\n\n        {% if messages %}\n            <div class=\"messages\">\n                {% for message in messages %}\n                    <div class=\"alert {% if message.tags %}alert-{{ message.tags }}{% endif %}\">{{ message }}</div>\n                {% endfor %}\n            </div>\n        {% endif %}\n\n        <form id=\"login-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"mb-3\">\n                <label for=\"username\" class=\"form-label\">Username</label>\n                <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" required>\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"password\" class=\"form-label\">Password</label>\n                <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" required>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"login-submit\">Login</button>\n            <p class=\"mt-3\">Don't have an account? <a href=\"{% url 'signup' %}\" id=\"signup-link\">Sign up</a></p>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Settings</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"settings-title\" class=\"mt-5 mb-4\">Settings</h1>\n        <p id=\"settings-description\">Update your profile details and manage settings.</p>\n\n        <form id=\"settings-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"mb-3\">\n                <label for=\"email\" class=\"form-label\">Email address</label>\n                <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" value=\"{{ user.email }}\">\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"username\" class=\"form-label\">Username</label>\n                <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" value=\"{{ user.username }}\">\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"settings-submit\">Update Settings</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Signup</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"signup-title\" class=\"mt-5 mb-4\">Signup</h1>\n\n        {% if messages %}\n            <div class=\"messages\">\n                {% for message in messages %}\n                    <div class=\"alert {% if message.tags %}alert-{{ message.tags }}{% endif %}\">{{ message }}</div>\n                {% endfor %}\n            </div>\n        {% endif %}\n\n        <form id=\"signup-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"mb-3\">\n                <label for=\"username\" class=\"form-label\">Username</label>\n                <input type=\"text\" class=\"form-control\" id=\"username\" name=\"username\" value=\"{{ username }}\" required>\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"email\" class=\"form-label\">Email address</label>\n                <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" value=\"{{ email }}\" required>\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"password\" class=\"form-label\">Password</label>\n                <input type=\"password\" class=\"form-control\" id=\"password\" name=\"password\" required>\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"password2\" class=\"form-label\">Confirm Password</label>\n                <input type=\"password\" class=\"form-control\" id=\"password2\" name=\"password2\" required>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"signup-submit\">Signup</button>\n            <p class=\"mt-3\">Already have an account? <a href=\"{% url 'login' %}\" id=\"login-link\">Login</a></p>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Support</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"support-title\" class=\"mt-5 mb-4\">Support</h1>\n        <p id=\"support-description\">Need assistance? Submit a support request.</p>\n\n        {% if messages %}\n            <div class=\"messages\">\n                {% for message in messages %}\n                    <div class=\"alert {% if message.tags %}alert-{{ message.tags }}{% endif %}\">{{ message }}</div>\n                {% endfor %}\n            </div>\n        {% endif %}\n\n        <form id=\"support-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"mb-3\">\n                <label for=\"name\" class=\"form-label\">Your Name</label>\n                <input type=\"text\" class=\"form-control\" id=\"name\" name=\"name\" required>\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"email\" class=\"form-label\">Your Email</label>\n                <input type=\"email\" class=\"form-control\" id=\"email\" name=\"email\" required>\n            </div>\n            <div class=\"mb-3\">\n                <label for=\"message\" class=\"form-label\">Message</label>\n                <textarea class=\"form-control\" id=\"message\" name=\"message\" rows=\"4\" required></textarea>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"support-submit\">Submit Request</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Security settings and key configuration\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\n# Hosts allowed to serve the application\nALLOWED_HOSTS = []\n\n# Application definitions\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\n# Middleware settings\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n# URL configuration\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# WSGI application\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\n# Database configuration\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Locale and timezone settings\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\n# Static files (CSS, JavaScript, Images) settings\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')] #Add this line to configure where static files are\nLOGIN_REDIRECT_URL = 'dashboard'\nLOGOUT_REDIRECT_URL = 'home'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n# Main URL routing configuration\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\n# Setup the default Django settings module for the WSGI application\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "from django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields([\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n            ]),\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields([\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n            ]),\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields([\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('date', models.DateField()),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),\n            ]),\n        ),\n    ]\n"}, {"file": "style.css", "path": "example_app/static/style.css", "code": "/* Example styles - feel free to adjust */\nbody {\n    font-family: Arial, sans-serif;\n    margin: 20px;\n}\n\nh1 {\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: 0 auto;\n}\n\n.btn {\n    padding: 10px 20px;\n    text-decoration: none;\n    color: white;\n    background-color: #007bff;\n    border: none;\n    cursor: pointer;\n}\n\n.btn-primary {\n    background-color: #007bff;\n}\n\n.btn-success {\n    background-color: #28a745;\n}\n"}], "8": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main function to execute Django command line utilities.\n    \"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Ensure it's installed and available on PYTHONPATH.\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\n\nclass EventForm(forms.ModelForm):\n    \"\"\"\n    Form for the Event model with custom DateTime field.\n    \"\"\"\n\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']\n\n    datetime = forms.DateTimeField(widget=forms.DateTimeInput(attrs={'type': 'datetime-local'}))"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\n\nclass Event(models.Model):\n    \"\"\"\n    Model representing an event with title, description, and dates.\n    \"\"\"\n\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        String representation of the event.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AddEventView, EditEventView, DeleteEventView, ListEventsView, EventDetailsView, HelpView\n\n\nurlpatterns = [\n    \"\"\"\n    URL patterns for the application.\n    \"\"\"\n    path('', HomePageView.as_view(), name='home'),\n    path('calendar/add-event/', AddEventView.as_view(), name='add_event'),\n    path('calendar/edit-event/<int:event_id>/', EditEventView.as_view(), name='edit_event'),\n    path('calendar/delete-event/<int:event_id>/', DeleteEventView.as_view(), name='delete_event'),\n    path('calendar/view-events/', ListEventsView.as_view(), name='view_events'),\n    path('calendar/view-event-details/<int:event_id>/', EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', HelpView.faq, name='faq'),\n    path('help/user-guide/', HelpView.user_guide, name='user_guide'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.http import HttpResponse\nfrom django.contrib import messages\n\nfrom .forms import EventForm\nfrom .models import Event\n\n\nclass HomePageView(View):\n    \"\"\"\n    Handles rendering of the home page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Displays the calendar with events for the selected month and year.\n        \"\"\"\n        today = datetime.now()\n        year = today.year\n        month = today.month\n        cal = calendar.monthcalendar(year, month)\n        events = Event.objects.filter(datetime__year=year, datetime__month=month)\n        return render(request, 'home.html', {'calendar': cal, 'month': month, 'year': year, 'events': events})\n\n\nclass AddEventView(View):\n    \"\"\"\n    Handles adding new events to the calendar.\n    \"\"\"\n    def get(self, request):\n        form = EventForm()\n        return render(request, 'add_event.html', {'form': form})\n\n    def post(self, request):\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Event added successfully!')\n            return redirect('home')\n        return render(request, 'add_event.html', {'form': form})\n\n\nclass EditEventView(View):\n    \"\"\"\n    Handles modifying existing events in the calendar.\n    \"\"\"\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventForm(instance=event)\n        return render(request, 'edit_event.html', {'form': form, 'event_id': event_id})\n\n    def post(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Event updated successfully!')\n            return redirect('home')\n        return render(request, 'edit_event.html', {'form': form, 'event_id': event_id})\n\n\nclass DeleteEventView(View):\n    \"\"\"\n    Handles deleting events from the calendar.\n    \"\"\"\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        return render(request, 'delete_event.html', {'event': event})\n\n    def post(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        event.delete()\n        messages.success(request, 'Event deleted successfully!')\n        return redirect('home')\n\n\nclass ListEventsView(View):\n    \"\"\"\n    Handles displaying and searching the list of events.\n    \"\"\"\n    def get(self, request):\n        query = request.GET.get('q')\n        if query:\n            events = Event.objects.filter(Q(title__icontains=query) | Q(description__icontains=query))\n        else:\n            events = Event.objects.all()\n        return render(request, 'view_events.html', {'events': events})\n\n\nclass EventDetailsView(View):\n    \"\"\"\n    Handles displaying detailed information about a selected event.\n    \"\"\"\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        return render(request, 'view_event_details.html', {'event': event})\n\n\nclass HelpView:\n    \"\"\"\n    Handles the help and support sections.\n    \"\"\"\n\n    @staticmethod\n    def faq(request):\n        \"\"\"\n        Displays frequently asked questions.\n        \"\"\"\n        return render(request, 'faq.html')\n\n    @staticmethod\n    def user_guide(request):\n        \"\"\"\n        Offers a detailed guide on how to use the application.\n        \"\"\"\n        return render(request, 'user_guide.html')"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-30 08:50\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "add_event.html", "path": "example_app/templates/add_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Event</title>\n</head>\n<body>\n    <div id=\"addEventContainer\" class=\"container\">\n        <h1 id=\"addEventTitle\" class=\"title\">Add New Event</h1>\n        <form id=\"addEventForm\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"formFields\" class=\"form-fields\">\n                <div class=\"form-group\">\n                    <label for=\"id_title\" class=\"form-label\">Title:</label>\n                    {{ form.title }}\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"id_description\" class=\"form-label\">Description:</label>\n                    {{ form.description }}\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"id_datetime\" class=\"form-label\">Date and Time:</label>\n                    {{ form.datetime }}\n                </div>\n            </div>\n            <button id=\"addEventButton\" type=\"submit\" class=\"submit-button\">Add Event</button>\n            <a href=\"{% url 'home' %}\" id=\"cancelButton\" class=\"cancel-button\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "example_app/templates/edit_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Event</title>\n</head>\n<body>\n    <div id=\"editEventContainer\" class=\"container\">\n        <h1 id=\"editEventTitle\" class=\"title\">Edit Event</h1>\n        <form id=\"editEventForm\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"formFields\" class=\"form-fields\">\n                <div class=\"form-group\">\n                    <label for=\"id_title\" class=\"form-label\">Title:</label>\n                    {{ form.title }}\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"id_description\" class=\"form-label\">Description:</label>\n                    {{ form.description }}\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"id_datetime\" class=\"form-label\">Date and Time:</label>\n                    {{ form.datetime }}\n                </div>\n            </div>\n            <button id=\"saveEventButton\" type=\"submit\" class=\"submit-button\">Save Changes</button>\n            <a href=\"{% url 'home' %}\" id=\"cancelButton\" class=\"cancel-button\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "faq.html", "path": "example_app/templates/faq.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>FAQ</title>\n</head>\n<body>\n    <div id=\"faqContainer\" class=\"container\">\n        <h1 id=\"faqTitle\" class=\"title\">Frequently Asked Questions</h1>\n        <div id=\"faqContent\" class=\"faq-content\">\n            <div class=\"faq-item\">\n                <h2 class=\"faq-question\">How do I add an event?</h2>\n                <p class=\"faq-answer\">Go to the 'Add Event' page and fill out the form.</p>\n            </div>\n            <div class=\"faq-item\">\n                <h2 class=\"faq-question\">How do I edit an event?</h2>\n                <p class=\"faq-answer\">Click on an event on the home page calendar, then click 'Edit'.</p>\n            </div>\n            <div class=\"faq-item\">\n                <h2 class=\"faq-question\">How do I delete an event?</h2>\n                <p class=\"faq-answer\">Click on an event on the home page calendar, then click 'Delete'.</p>\n            </div>\n        </div>\n        <a href=\"{% url 'home' %}\" id=\"homeButton\" class=\"home-button\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home Page</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n        .calendar {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"homeContainer\" class=\"container\">\n        <h1 id=\"homeTitle\" class=\"title\">Event Calendar</h1>\n        <div id=\"calendarContainer\" class=\"calendar\">\n            <h2>{{ month }}/{{ year }}</h2>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Sun</th><th>Mon</th><th>Tue</th><th>Wed</th><th>Thu</th><th>Fri</th><th>Sat</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {% for week in calendar %}\n                        <tr>\n                            {% for day in week %}\n                                <td>\n                                    {% if day != 0 %}\n                                        {{ day }}\n                                        {% for event in events %}\n                                            {% if event.datetime.day == day %}\n                                                <a href=\"{% url 'view_event_details' event.id %}\">{{ event.title }}</a>\n                                            {% endif %}\n                                        {% endfor %}\n                                    {% endif %}\n                                </td>\n                            {% endfor %}\n                        </tr>\n                    {% endfor %}\n                </tbody>\n            </table>\n            <a href=\"{% url 'add_event' %}\" id=\"addEventLink\" class=\"add-event-link\">Add Event</a>\n            <a href=\"{% url 'view_events' %}\" id=\"viewEventsLink\" class=\"view-events-link\">View All Events</a>\n            <a href=\"{% url 'faq' %}\" id=\"faqLink\" class=\"faq-link\">FAQ</a>\n            <a href=\"{% url 'user_guide' %}\" id=\"userGuideLink\" class=\"user-guide-link\">User Guide</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "user_guide.html", "path": "example_app/templates/user_guide.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Guide</title>\n</head>\n<body>\n    <div id=\"userGuideContainer\" class=\"container\">\n        <h1 id=\"userGuideTitle\" class=\"title\">User Guide</h1>\n        <div id=\"userGuideContent\" class=\"user-guide-content\">\n            <section id=\"addingEvents\" class=\"guide-section\">\n                <h2>Adding Events</h2>\n                <p>To add a new event, click on the 'Add Event' link. Fill out the form with the event title, description, and date/time.  Then click 'Add Event'.</p>\n            </section>\n            <section id=\"editingEvents\" class=\"guide-section\">\n                <h2>Editing Events</h2>\n                <p>To edit an existing event, click on the event title on the calendar. This will take you to the event details page. Click the 'Edit' link to modify the event details.</p>\n            </section>\n            <section id=\"deletingEvents\" class=\"guide-section\">\n                <h2>Deleting Events</h2>\n                <p>To delete an event, click on the event title on the calendar. From the event details page, click the 'Delete' link to remove the event.</p>\n            </section>\n        </div>\n        <a href=\"{% url 'home' %}\" id=\"homeButton\" class=\"home-button\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "view_events.html", "path": "example_app/templates/view_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event List</title>\n</head>\n<body>\n    <div id=\"eventListContainer\" class=\"container\">\n        <h1 id=\"eventListTitle\" class=\"title\">Event List</h1>\n        <form id=\"searchForm\" method=\"get\">\n            <input type=\"text\" id=\"searchInput\" name=\"q\" placeholder=\"Search events...\">\n            <button id=\"searchButton\" type=\"submit\">Search</button>\n        </form>\n        <ul id=\"eventList\" class=\"event-list\">\n            {% for event in events %}\n                <li class=\"event-item\">\n                    <a href=\"{% url 'view_event_details' event.id %}\">{{ event.title }} - {{ event.datetime }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n        <a href=\"{% url 'home' %}\" id=\"homeButton\" class=\"home-button\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "view_event_details.html", "path": "example_app/templates/view_event_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Details</title>\n</head>\n<body>\n    <div id=\"eventDetailsContainer\" class=\"container\">\n        <h1 id=\"eventDetailsTitle\" class=\"title\">Event Details</h1>\n        <h2 id=\"eventTitle\" class=\"event-title\">{{ event.title }}</h2>\n        <p id=\"eventDescription\" class=\"event-description\">{{ event.description }}</p>\n        <p id=\"eventDateTime\" class=\"event-datetime\">Date and Time: {{ event.datetime }}</p>\n        <a href=\"{% url 'edit_event' event.id %}\" id=\"editEventLink\" class=\"edit-event-link\">Edit</a>\n        <a href=\"{% url 'delete_event' event.id %}\" id=\"deleteEventLink\" class=\"delete-event-link\">Delete</a>\n        <a href=\"{% url 'home' %}\" id=\"homeButton\" class=\"home-button\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "project_name/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "project_name/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_name.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project_name/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n\nurlpatterns = [\n    \"\"\"\n    URL patterns for the project.\n    \"\"\"\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project_name/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "project_name/__init__.py", "code": ""}], "9": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"example_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import ContactSales, SupportRequest\n\nclass ContactForm(forms.ModelForm):\n    \"\"\"\n    Form for ContactSales model.\n    \"\"\"\n    class Meta:\n        \"\"\"\n        Meta\n        \"\"\"\n        model = ContactSales\n        fields = ['name', 'email', 'message']\n\n\nclass SupportForm(forms.ModelForm):\n    \"\"\"\n    Form for SupportRequest model.\n    \"\"\"\n    class Meta:\n        \"\"\"\n        Meta\n        \"\"\"\n        model = SupportRequest\n        fields = ['name', 'email', 'issue_description']"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass ContactSales(models.Model):\n    \"\"\"\n    Model to store contact sales inquiries.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    message = models.TextField()\n\n    def __str__(self):\n        \"\"\"\n        String representation of contact sales.\n        \"\"\"\n        return self.name\n\n\nclass SupportRequest(models.Model):\n    \"\"\"\n    Model to store support requests.\n    \"\"\"\n    name = models.CharField(max_length=255)\n    email = models.EmailField()\n    issue_description = models.TextField()\n\n    def __str__(self):\n        \"\"\"\n        String representation of support requests.\n        \"\"\"\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, FeaturesPageView, PricingPageView, SupportView, AboutUsPageView, ContactFormView, SupportFormView\n\nurlpatterns = [\n    path('', HomePageView.as_view(), name='home'),\n    path('features/', FeaturesPageView.as_view(), name='features'),\n    path('pricing/', PricingPageView.as_view(), name='pricing'),\n    path('support/', SupportView.as_view(), name='support'),\n    path('about/', AboutUsPageView.as_view(), name='about'),\n    path('contact/', ContactFormView.as_view(), name='contact'),\n    path('submit_support/', SupportFormView.as_view(), name='submit_support'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.contrib import messages\nfrom django.views.generic import TemplateView, FormView\nfrom django.urls import reverse_lazy\nfrom .forms import ContactForm, SupportForm\nfrom .models import ContactSales, SupportRequest\n\n\nclass HomePageView(TemplateView):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    template_name = 'home.html'\n\n\nclass FeaturesPageView(TemplateView):\n    \"\"\"\n    Render the features page.\n    \"\"\"\n    template_name = 'features.html'\n\n\nclass PricingPageView(TemplateView):\n    \"\"\"\n    Handle pricing page and contact form submission.\n    \"\"\"\n    template_name = 'pricing.html'\n\n\nclass SupportView(TemplateView):\n    \"\"\"\n    Handle support page and form submission.\n    \"\"\"\n    template_name = 'support.html'\n\n\nclass AboutUsPageView(TemplateView):\n    \"\"\"\n    Render the about us page.\n    \"\"\"\n    template_name = 'about.html'\n\n\nclass ContactFormView(FormView):\n    template_name = 'contact_form.html'\n    form_class = ContactForm\n    success_url = reverse_lazy('home')  # Redirect to home after successful submission\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your message has been sent!')\n        return super().form_valid(form)\n\nclass SupportFormView(FormView):\n    template_name = 'support_form.html'\n    form_class = SupportForm\n    success_url = reverse_lazy('home')  # Redirect to home after successful submission\n\n    def form_valid(self, form):\n        form.save()\n        messages.success(self.request, 'Your support request has been sent!')\n        return super().form_valid(form)\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "from django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='ContactSales',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField()),\n                ('message', models.TextField()),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('email', models.EmailField()),\n                ('issue_description', models.TextField()),\n            ],\n        ),\n    ]\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Us</h1>\n        <p id=\"about-description\" class=\"description\">Learn about our company and our mission.</p>\n        <div id=\"team-members\" class=\"team-members\">\n            <div class=\"team-member\">\n                <img src=\"#\" alt=\"Team Member 1\" id=\"member-1-image\" class=\"member-image\">\n                <h2 id=\"member-1-name\" class=\"member-name\">Team Member 1</h2>\n                <p id=\"member-1-bio\" class=\"member-bio\">Bio of Team Member 1</p>\n            </div>\n            <div class=\"team-member\">\n                <img src=\"#\" alt=\"Team Member 2\" id=\"member-2-image\" class=\"member-image\">\n                <h2 id=\"member-2-name\" class=\"member-name\">Team Member 2</h2>\n                <p id=\"member-2-bio\" class=\"member-bio\">Bio of Team Member 2</p>\n            </div>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "features.html", "path": "example_app/templates/features.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Features</title>\n</head>\n<body>\n    <div id=\"features-container\" class=\"container\">\n        <h1 id=\"features-title\" class=\"title\">Our Amazing Features</h1>\n        <ul id=\"features-list\" class=\"features-list\">\n            <li id=\"feature-1\" class=\"feature-item\">Feature 1: Detailed description of Feature 1.</li>\n            <li id=\"feature-2\" class=\"feature-item\">Feature 2: Detailed description of Feature 2.</li>\n            <li id=\"feature-3\" class=\"feature-item\">Feature 3: Detailed description of Feature 3.</li>\n        </ul>\n        <p id=\"features-disclaimer\" class=\"disclaimer\">Disclaimer about our features.</p>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-welcome\" class=\"welcome-message\">Welcome to Our AI Chatbot</h1>\n        <p id=\"home-intro\" class=\"intro-text\">This is an introductory message about our amazing chatbot.</p>\n        <nav id=\"home-navigation\" class=\"navigation\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a href=\"{% url 'features' %}\" id=\"nav-features\" class=\"nav-link\">Features</a></li>\n                <li class=\"nav-item\"><a href=\"{% url 'pricing' %}\" id=\"nav-pricing\" class=\"nav-link\">Pricing</a></li>\n                <li class=\"nav-item\"><a href=\"{% url 'support' %}\" id=\"nav-support\" class=\"nav-link\">Support</a></li>\n                <li class=\"nav-item\"><a href=\"{% url 'about' %}\" id=\"nav-about\" class=\"nav-link\">About Us</a></li>\n                <li class=\"nav-item\"><a href=\"{% url 'contact' %}\" id=\"nav-contact\" class=\"nav-link\">Contact</a></li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": "pricing.html", "path": "example_app/templates/pricing.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pricing</title>\n</head>\n<body>\n    <div id=\"pricing-container\" class=\"container\">\n        <h1 id=\"pricing-title\" class=\"title\">Our Pricing Plans</h1>\n        <div id=\"pricing-plans\" class=\"pricing-plans\">\n            <div id=\"plan-basic\" class=\"plan basic\">\n                <h2 id=\"plan-basic-title\" class=\"plan-title\">Basic</h2>\n                <p id=\"plan-basic-price\" class=\"plan-price\">$10/month</p>\n                <p id=\"plan-basic-description\" class=\"plan-description\">Description of the Basic plan.</p>\n            </div>\n            <div id=\"plan-premium\" class=\"plan premium\">\n                <h2 id=\"plan-premium-title\" class=\"plan-title\">Premium</h2>\n                <p id=\"plan-premium-price\" class=\"plan-price\">$20/month</p>\n                <p id=\"plan-premium-description\" class=\"plan-description\">Description of the Premium plan.</p>\n            </div>\n        </div>\n        <a href=\"{% url 'contact' %}\" id=\"pricing-contact-link\" class=\"contact-link\">Contact Sales</a>\n    </div>\n</body>\n</html>"}, {"file": "support.html", "path": "example_app/templates/support.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Support</title>\n</head>\n<body>\n    <div id=\"support-container\" class=\"container\">\n        <h1 id=\"support-title\" class=\"title\">Support</h1>\n        <p id=\"support-description\" class=\"description\">How can we help you?</p>\n        <a href=\"{% url 'submit_support' %}\" id=\"support-form-link\" class=\"support-form-link\">Submit Support Request</a>\n        <div id=\"faq-section\" class=\"faq-section\">\n            <h2 id=\"faq-title\" class=\"faq-title\">Frequently Asked Questions</h2>\n            <ul id=\"faq-list\" class=\"faq-list\">\n                <li id=\"faq-1\" class=\"faq-item\">Question 1: Answer 1</li>\n                <li id=\"faq-2\" class=\"faq-item\">Question 2: Answer 2</li>\n            </ul>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "contact_form.html", "path": "example_app/templates/contact_form.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Contact Us</title>\n</head>\n<body>\n    <div id=\"contact-form-container\" class=\"container\">\n        <h1 id=\"contact-form-title\" class=\"title\">Contact Us</h1>\n        <form id=\"contact-form\" method=\"post\" class=\"contact-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"contact-form-submit\" class=\"submit-button\">Submit</button>\n        </form>\n        {% if messages %}\n            <ul id=\"messages-list\" class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "support_form.html", "path": "example_app/templates/support_form.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Support Request Form</title>\n</head>\n<body>\n    <div id=\"support-form-container\" class=\"container\">\n        <h1 id=\"support-form-title\" class=\"title\">Submit Support Request</h1>\n        <form id=\"support-form\" method=\"post\" class=\"support-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"support-form-submit\" class=\"submit-button\">Submit</button>\n        </form>\n        {% if messages %}\n            <ul id=\"messages-list\" class=\"messages\">\n                {% for message in messages %}\n                    <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n                {% endfor %}\n            </ul>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "example_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, \"static\"),\n]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(\"example_app.urls\")),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}], "10": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom django.contrib.auth.models import User\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .models import Meal, Activity, UserProfile\n\nclass SignUpForm(UserCreationForm):\n    \"\"\"\n    User registration form.\n    \"\"\"\n    pass\n\nclass LoginForm(UserCreationForm):\n    \"\"\"\n    User login form.\n    \"\"\"\n    pass\n\nclass MealForm(forms.ModelForm):\n    \"\"\"\n    Form for logging meals with specific fields and widgets.\n    \"\"\"\n    pass\nclass ActivityForm(forms.ModelForm):\n    \"\"\"\n    Form for logging activities with specific fields and widgets.\n    \"\"\"\n    pass\n\nclass ProfileForm(forms.ModelForm):\n    \"\"\"\n    Form for updating user profile and preferences.\n    \"\"\"\n    pass\n\nclass PreferencesForm(forms.ModelForm):\n    \"\"\"\n    Form for updating dietary preferences.\n    \"\"\"\n    pass\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.utils import timezone\n\n@receiver(post_save, sender=User)\ndef create_user_profile(sender, instance, created, **kwargs):\n    \"\"\"\n    Create a user profile when a new user is created.\n    \"\"\"\n    if created:\n        UserProfile.objects.create(user=instance)\n\n@receiver(post_save, sender=User)\ndef save_user_profile(sender, instance, **kwargs):\n    \"\"\"\n    Save the user profile if the user instance is updated.\n    \"\"\"\n    instance.profile.save()\n\nclass UserProfile(models.Model):\n    \"\"\"\n    Extended user profile to include additional user information.\n    \"\"\"\n    pass\n\nclass Meal(models.Model):\n    \"\"\"\n    Model to log information about meals consumed by users.\n    \"\"\"\n    pass\n\nclass Activity(models.Model):\n    \"\"\"\n    Model to log activities and accompanying calorie expenditure.\n    \"\"\"\n    pass\n\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal/search/', views.meal_search, name='meal_search'),\n    path('meal/log/', views.meal_search, name='meal_log'),\n    path('meal/add/', views.add_meal, name='add_meal'),\n    path('meal/edit/<int:id>/', views.edit_meal, name='edit_meal'),\n    path('meal/delete/<int:id>/', views.delete_meal, name='delete_meal'),\n    path('activity/search/', views.activity_search, name='activity_search'),\n    path('activity/log/', views.activity_search, name='activity_log'),\n    path('activity/add/', views.add_activity, name='add_activity'),\n    path('activity/edit/<int:id>/', views.edit_activity, name='edit_activity'),\n    path('activity/delete/<int:id>/', views.delete_activity, name='delete_activity'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/update/', views.update_profile, name='update_profile'),\n    path('preferences/update/', views.update_preferences, name='update_preferences'),\n    path('analysis/weekly/', views.weekly_calorie_chart, name='weekly_calorie_chart'),\n    path('help/', views.tutorials, name='tutorials'),\n]\n"}, {"file": "utils.py", "path": "example_app/utils.py", "code": "import datetime\nfrom .models import Meal, Activity\n\n\ndef get_weekly_calorie_chart(user):\n    \"\"\"\n    Generate weekly calorie chart data for a specified user.\n    \"\"\"\n    today = datetime.date.today()\n    week_data = {\n        'dates': [],\n        'intake': [],\n        'expenditure': []\n    }\n    for i in range(7):\n        day = today - datetime.timedelta(days=i)\n        daily_meals = Meal.objects.filter(user=user, date=day)\n        daily_activities = Activity.objects.filter(user=user, date=day)\n\n        daily_calories_intake = sum(meal.calories for meal in daily_meals)\n        daily_calories_burned = sum(activity.calories_burned for activity in daily_activities)\n\n        week_data['dates'].append(day.strftime('%Y-%m-%d'))\n        week_data['intake'].append(daily_calories_intake)\n        week_data['expenditure'].append(daily_calories_burned)\n\n    week_data['dates'].reverse()\n    week_data['intake'].reverse()\n    week_data['expenditure'].reverse()\n\n    return week_data\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "from datetime import date\n\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth import login, authenticate\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib import messages\nfrom .models import Meal, Activity, UserProfile\nfrom .forms import LoginForm, SignUpForm, MealForm, ActivityForm, ProfileForm, PreferencesForm\nfrom .utils import get_weekly_calorie_chart\nimport matplotlib.pyplot as plt\nimport io\nimport base64\nfrom datetime import timedelta, date\nfrom django.shortcuts import render\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Activity, UserProfile\n\n\ndef home(request):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    pass\n\n\ndef signup(request):\n    \"\"\"\n    Handle user signup.\n    \"\"\"\n    pass\n\ndef login_view(request):\n    \"\"\"\n    Handle user login.\n    \"\"\"\n    pass\n\n\n@login_required\ndef dashboard(request):\n    \"\"\"\n    Display the user dashboard with daily and weekly statistics.\n    \"\"\"\n    pass\n\n\n@login_required\ndef meal_log(request):\n    \"\"\"\n    Log meals for the user's meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef add_meal(request):\n    \"\"\"\n    Add a new meal to the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef edit_meal(request, id):\n    \"\"\"\n    Edit an existing meal record.\n    \"\"\"\n    pass\n\n\n@login_required\ndef delete_meal(request, id):\n    \"\"\"\n    Delete a meal record from the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef activity_log(request):\n    \"\"\"\n    Log activities for the user's activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef add_activity(request):\n    \"\"\"\n    Add a new activity to the activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef edit_activity(request, id):\n    \"\"\"\n    Edit an existing activity record.\n    \"\"\"\n    pass\n\n\n@login_required\ndef delete_activity(request, id):\n    \"\"\"\n    Delete an activity record from the activity log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef settings(request):\n    \"\"\"\n    Render the settings page for updating user profile information.\n    \"\"\"\n    pass\n\n\n@login_required\ndef meal_search(request):\n    \"\"\"\n    Perform a search in the meal log.\n    \"\"\"\n    pass\n\n\n@login_required\ndef activity_search(request):\n    \"\"\"\n    Perform a search in the activity log.\n    \"\"\"\n    pass\n\n\ndef tutorials(request):\n    \"\"\"\n    Render the tutorials/help page.\n    \"\"\"\n    pass\n\n\n@login_required\ndef update_profile(request):\n    \"\"\"\n    Update user's profile information.\n    \"\"\"\n    pass\n\n\n@login_required\ndef update_preferences(request):\n    \"\"\"\n    Update user's dietary preferences.\n    \"\"\"\n    pass\n\n\n@login_required\ndef weekly_calorie_chart(request):\n    \"\"\"\n    Render the weekly calorie chart based on user's consumption and expenditure.\n    \"\"\"\n    pass\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "activity_log.html", "path": "example_app/templates/activity_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Activity Log</title>\n</head>\n<body>\n    <!-- Render activity log with search and CRUD options -->\n    <div id=\"activity-log-container\" class=\"container\">\n        <h1 id=\"activity-log-title\" class=\"page-title\">Activity Log</h1>\n        <div id=\"activity-search\" class=\"search-bar\">\n            <!-- Search input and button -->\n        </div>\n        <table id=\"activity-table\" class=\"data-table\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Activity</th>\n                    <th>Calories Burned</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                <!-- Activity data rows -->\n            </tbody>\n        </table>\n        <a id=\"add-activity-link\" class=\"add-button\" href=\"#\">Add Activity</a>\n    </div>\n</body>\n</html>\n"}, {"file": "add_activity.html", "path": "example_app/templates/add_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to add a new activity -->\n    <div id=\"add-activity-container\" class=\"container\">\n        <h1 id=\"add-activity-title\" class=\"page-title\">Add Activity</h1>\n        <form id=\"add-activity-form\" class=\"data-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"activity-name\">Activity Name:</label>\n                <input type=\"text\" id=\"activity-name\" name=\"activity_name\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"calories-burned\">Calories Burned:</label>\n                <input type=\"number\" id=\"calories-burned\" name=\"calories_burned\" required>\n            </div>\n            <button type=\"submit\" id=\"add-activity-button\" class=\"submit-button\">Add Activity</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "add_meal.html", "path": "example_app/templates/add_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Meal - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to add a new meal -->\n    <div id=\"add-meal-container\" class=\"container\">\n        <h1 id=\"add-meal-title\" class=\"page-title\">Add Meal</h1>\n        <form id=\"add-meal-form\" class=\"data-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"meal-name\">Meal Name:</label>\n                <input type=\"text\" id=\"meal-name\" name=\"meal_name\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"calories\">Calories:</label>\n                <input type=\"number\" id=\"calories\" name=\"calories\" required>\n            </div>\n            <button type=\"submit\" id=\"add-meal-button\" class=\"submit-button\">Add Meal</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "dashboard.html", "path": "example_app/templates/dashboard.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Dashboard</title>\n</head>\n<body>\n    <!-- User dashboard with recent activities and statistics -->\n    <div id=\"dashboard-container\" class=\"container\">\n        <h1 id=\"dashboard-title\" class=\"page-title\">Dashboard</h1>\n        <div id=\"daily-summary\" class=\"summary-section\">\n            <h2>Daily Summary</h2>\n            <!-- Display daily calorie intake and expenditure -->\n        </div>\n        <div id=\"weekly-chart\" class=\"chart-section\">\n            <h2>Weekly Calorie Chart</h2>\n            <!-- Display chart -->\n        </div>\n        <div id=\"recent-activities\" class=\"activity-section\">\n            <h2>Recent Activities</h2>\n            <!-- List recent activities -->\n        </div>\n        <div id=\"quick-links\" class=\"links-section\">\n            <a id=\"add-meal-link\" class=\"button-link\" href=\"#\">Add Meal</a>\n            <a id=\"add-activity-link\" class=\"button-link\" href=\"#\">Add Activity</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "edit_activity.html", "path": "example_app/templates/edit_activity.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Activity - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to edit an existing activity -->\n    <div id=\"edit-activity-container\" class=\"container\">\n        <h1 id=\"edit-activity-title\" class=\"page-title\">Edit Activity</h1>\n        <form id=\"edit-activity-form\" class=\"data-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"activity-name\">Activity Name:</label>\n                <input type=\"text\" id=\"activity-name\" name=\"activity_name\" value=\"\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"calories-burned\">Calories Burned:</label>\n                <input type=\"number\" id=\"calories-burned\" name=\"calories_burned\" value=\"\" required>\n            </div>\n            <button type=\"submit\" id=\"update-activity-button\" class=\"submit-button\">Update Activity</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "edit_meal.html", "path": "example_app/templates/edit_meal.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Meal - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to edit an existing meal -->\n    <div id=\"edit-meal-container\" class=\"container\">\n        <h1 id=\"edit-meal-title\" class=\"page-title\">Edit Meal</h1>\n        <form id=\"edit-meal-form\" class=\"data-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"meal-name\">Meal Name:</label>\n                <input type=\"text\" id=\"meal-name\" name=\"meal_name\" value=\"\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"calories\">Calories:</label>\n                <input type=\"number\" id=\"calories\" name=\"calories\" value=\"\" required>\n            </div>\n            <button type=\"submit\" id=\"update-meal-button\" class=\"submit-button\">Update Meal</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Home</title>\n</head>\n<body>\n    <!-- Home page with welcome message and navigation links -->\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"page-title\">Welcome to Calorie Tracker</h1>\n        <p id=\"home-description\" class=\"description\">Track your meals and activities to achieve your health goals.</p>\n        <div id=\"navigation-links\" class=\"nav-links\">\n            <a id=\"login-link\" class=\"nav-link\" href=\"#\">Login</a>\n            <a id=\"signup-link\" class=\"nav-link\" href=\"#\">Sign Up</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "login.html", "path": "example_app/templates/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form for user to login -->\n    <div id=\"login-container\" class=\"container\">\n        <h1 id=\"login-title\" class=\"page-title\">Login</h1>\n        <form id=\"login-form\" class=\"data-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required>\n            </div>\n            <button type=\"submit\" id=\"login-button\" class=\"submit-button\">Login</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "meal_log.html", "path": "example_app/templates/meal_log.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Meal Log</title>\n</head>\n<body>\n    <!-- Render meal log with search and CRUD options -->\n    <div id=\"meal-log-container\" class=\"container\">\n        <h1 id=\"meal-log-title\" class=\"page-title\">Meal Log</h1>\n        <div id=\"meal-search\" class=\"search-bar\">\n            <!-- Search input and button -->\n        </div>\n        <table id=\"meal-table\" class=\"data-table\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Meal</th>\n                    <th>Calories</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                <!-- Meal data rows -->\n            </tbody>\n        </table>\n        <a id=\"add-meal-link\" class=\"add-button\" href=\"#\">Add Meal</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "example_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Calorie Tracker - Settings</title>\n</head>\n<body>\n    <!-- Settings page for user preferences and profile updates -->\n    <div id=\"settings-container\" class=\"container\">\n        <h1 id=\"settings-title\" class=\"page-title\">Settings</h1>\n        <div id=\"profile-settings\" class=\"settings-section\">\n            <h2>Profile</h2>\n            <a id=\"update-profile-link\" class=\"button-link\" href=\"#\">Update Profile</a>\n        </div>\n        <div id=\"preferences-settings\" class=\"settings-section\">\n            <h2>Preferences</h2>\n            <a id=\"update-preferences-link\" class=\"button-link\" href=\"#\">Update Preferences</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "signup.html", "path": "example_app/templates/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Sign Up - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to register a new user -->\n    <div id=\"signup-container\" class=\"container\">\n        <h1 id=\"signup-title\" class=\"page-title\">Sign Up</h1>\n        <form id=\"signup-form\" class=\"data-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"username\">Username:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"password\">Password:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"confirm-password\">Confirm Password:</label>\n                <input type=\"password\" id=\"confirm-password\" name=\"confirm_password\" required>\n            </div>\n            <button type=\"submit\" id=\"signup-button\" class=\"submit-button\">Sign Up</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "tutorials.html", "path": "example_app/templates/tutorials.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Tutorials - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Page displaying tutorials and help resources -->\n    <div id=\"tutorials-container\" class=\"container\">\n        <h1 id=\"tutorials-title\" class=\"page-title\">Tutorials</h1>\n        <div id=\"tutorial-list\" class=\"tutorial-section\">\n            <h2>How to Track Your Calories</h2>\n            <!-- Tutorial content -->\n        </div>\n        <div id=\"faq\" class=\"faq-section\">\n            <h2>FAQ</h2>\n            <!-- Frequently asked questions -->\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "update_preferences.html", "path": "example_app/templates/update_preferences.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Preferences - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to update user dietary preferences -->\n    <div id=\"update-preferences-container\" class=\"container\">\n        <h1 id=\"update-preferences-title\" class=\"page-title\">Update Preferences</h1>\n        <form id=\"update-preferences-form\" class=\"data-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"dietary-restrictions\">Dietary Restrictions:</label>\n                <input type=\"text\" id=\"dietary-restrictions\" name=\"dietary_restrictions\">\n            </div>\n            <button type=\"submit\" id=\"update-preferences-button\" class=\"submit-button\">Update Preferences</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "update_profile.html", "path": "example_app/templates/update_profile.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Update Profile - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Form to update user profile information -->\n    <div id=\"update-profile-container\" class=\"container\">\n        <h1 id=\"update-profile-title\" class=\"page-title\">Update Profile</h1>\n        <form id=\"update-profile-form\" class=\"data-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"email\">Email:</label>\n                <input type=\"email\" id=\"email\" name=\"email\">\n            </div>\n            <button type=\"submit\" id=\"update-profile-button\" class=\"submit-button\">Update Profile</button>\n        </form>\n    </div>\n</body>\n</html>\n"}, {"file": "weekly_calorie_chart.html", "path": "example_app/templates/weekly_calorie_chart.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Weekly Calorie Chart - Calorie Tracker</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'your_app/css/styles.css' %}\">\n</head>\n<body>\n    <!-- Display weekly calorie chart for user activities and meals -->\n    <div id=\"weekly-chart-container\" class=\"container\">\n        <h1 id=\"weekly-chart-title\" class=\"page-title\">Weekly Calorie Chart</h1>\n        <div id=\"chart\" class=\"chart-display\">\n            <!-- Chart will be rendered here -->\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = '/static/'\n\nLOGIN_URL = '/login/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}\n\n.hello-world-container {\n    text-align: center;\n}\n\n.hello-world-heading {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body class=\"hello-world-body\">\n    <div id=\"hello-world-container\" class=\"hello-world-container\">\n        <h1 id=\"hello-world-heading\" class=\"hello-world-heading\">Hello, World!</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    user = models.ForeignKey('auth.User', related_name='transactions_user', on_delete=models.CASCADE)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.amount} - {self.date}'\n\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey('auth.User', related_name='support_request_user', on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n\n.home-container {\n    text-align: center;\n}\n\n.home-button {\n    padding: 10px 20px;\n    font-size: 1.2rem;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    cursor: pointer;\n    border-radius: 5px;\n    text-decoration: none;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body class=\"helloworld-body\" id=\"helloworld-body\">\n    <h1 id=\"helloworld-title\" class=\"helloworld-title\">Hello, World!</h1>\n    <a href=\"{% url 'home' %}\" class=\"home-button\" id=\"home-button\">Back to Home</a>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body class=\"home-body\" id=\"home-body\">\n    <div class=\"home-container\" id=\"home-container\">\n        <h1 class=\"home-title\" id=\"home-title\">Welcome!</h1>\n        <a href=\"{% url 'helloworld' %}\" class=\"home-button\" id=\"helloworld-link\">Go to Hello World</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "16": [{"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": ""}, {"file": "16-stdanswer.py", "path": "16-stdanswer.py", "code": "import os\nimport pandas as pd\n\n# File paths\ninput_file = \"Spring Semester Subjects.xlsx\"\noutput_file = \"Processed Subjects Table.xlsx\"\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"The file {file_path} does not exist.\")\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format.\n    \"\"\"\n    try:\n        pd.read_excel(file_path)\n    except Exception as e:\n        raise ValueError(f\"The file {file_path} is not a valid Excel file: {e}\")\n\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    \"\"\"\n    required_columns = [\"Subject Code\", \"Subject Name\", \"Credits\"]\n    for col in required_columns:\n        if col not in df.columns:\n            raise ValueError(f\"Required column '{col}' is missing in the Excel file.\")\n    \n    # Check for null or empty values in required columns (can be expanded)\n    for col in required_columns:\n        if df[col].isnull().any():\n            raise ValueError(f\"Column '{col}' contains missing values.\")\n\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    \"\"\"\n    check_file_exists(input_file)\n    check_file_format(input_file)\n\n    df = pd.read_excel(input_file)\n    validate_data(df)\n\n    # Perform any desired data transformations here.\n    # Example: Add a column combining subject code and name\n    df['Full Subject'] = df['Subject Code'] + \" - \" + df['Subject Name']\n\n    df.to_excel(output_file, index=False)\n    print(f\"Successfully processed and saved to {output_file}\")\n\n\ndef main():\n    \"\"\"\n    Main execution function.\n    \"\"\"\n    try:\n        process_subjects(input_file, output_file)\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "README.md", "path": "README.md", "code": "# Subject Processing Script\n\nThis script processes subject data from an Excel file (`Spring Semester Subjects.xlsx`) and saves the processed data to another Excel file (`Processed Subjects Table.xlsx`).\n\n## Prerequisites\n\n*   Python 3.6+\n*   `pandas` library\n*   `openpyxl` library (required for writing to Excel files)\n\n## Installation\n\n1.  Make sure you have Python installed.\n2.  Install the required libraries using pip:\n\n    ```bash\n    pip install pandas openpyxl\n    ```\n\n## Usage\n\n1.  Place the `Spring Semester Subjects.xlsx` file in the same directory as the script.\n2.  Run the script:\n\n    ```bash\n    python 16-stdanswer.py\n    ```\n\n3.  The processed data will be saved to `Processed Subjects Table.xlsx` in the same directory.\n\n## Input File Format\n\nThe `Spring Semester Subjects.xlsx` file should have the following columns:\n\n*   `Subject Code` (String)\n*   `Subject Name` (String)\n*   `Credits` (Number)\n\n## Error Handling\n\nThe script includes error handling for:\n\n*   File not found\n*   Invalid file format (not an Excel file)\n*   Missing required columns in the Excel file\n*   Missing values in the required columns.\n\n## Customization\n\nYou can modify the `process_subjects` function to perform custom data transformations as needed. For example, you can add or remove columns, calculate new values, or filter the data.\n"}], "17": [{"file": "main.py", "path": "main.py", "code": "import os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\nINPUT_FILE = \"Gamedata.xlsx\"\nOUTPUT_FILE = \"Logistic.xlsx\"\n\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Read the dataset and ensure all columns are numeric.\n    Raise an error if any missing values (NaN) are found.\n    \"\"\"\n    try:\n        data = pd.read_excel(input_file)\n        # Check if all columns are numeric\n        for col in data.columns:\n            if not pd.api.types.is_numeric_dtype(data[col]):\n                raise ValueError(f\"Column '{col}' is not numeric.\")\n        # Check for missing values\n        if data.isnull().any().any():\n            raise ValueError(\"Missing values (NaN) found in the dataset.\")\n        return data\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"Input file '{input_file}' not found.\")\n    except ValueError as e:\n        raise ValueError(str(e))\n\n\n\ndef add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Add a one-period lag for the dependent variable and drop missing rows.\n    \"\"\"\n    data['Lagged_' + target_column] = data[target_column].shift(1)\n    data = data.dropna()\n    return data\n\n\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepare the feature matrix (X) and target vector (y).\n    \"\"\"\n    y = data[target_column]\n    X = data.drop(columns=[target_column]) # Include all other columns as features, including the lagged one.\n    return X, y\n\n\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Build and fit a logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)  # Add a constant term for the intercept\n    model = sm.Logit(y, X)\n    results = model.fit()\n    return results\n\n\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Save the logistic regression summary to an Excel file.\n    \"\"\"\n    with pd.ExcelWriter(output_file) as writer:\n        # Summary statistics\n        summary_df = pd.DataFrame(result.summary().tables[1].data)\n        summary_df.to_excel(writer, sheet_name='Summary', index=False, header=False)\n\n        # Predicted probabilities and actual values (for evaluation, optional)\n        predictions = result.predict(result.model.exog)\n        predictions_df = pd.DataFrame({'Actual': result.model.endog, 'Predicted Probability': predictions})\n        predictions_df.to_excel(writer, sheet_name='Predictions', index=False)\n\n\n\ndef main(input_file, output_file, target_column):\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    try:\n        # 1. Read and validate data\n        data = read_and_validate_data(input_file)\n\n        # 2. Add lagged dependent variable\n        data = add_lagged_dependent_variable(data, target_column)\n\n        # 3. Prepare features and target\n        X, y = prepare_features_and_target(data, target_column, 'Lagged_' + target_column)\n\n        # 4. Build logistic model\n        model_results = build_logistic_model(X, y)\n\n        # 5. Save summary to Excel\n        save_summary_to_excel(model_results, output_file)\n\n        print(f\"Logistic regression analysis completed.  Results saved to '{output_file}'\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    # Specify the target column name here\n    TARGET_COLUMN = \"Won\"\n    main(INPUT_FILE, OUTPUT_FILE, TARGET_COLUMN)\n"}, {"file": "Gamedata.xlsx", "path": "Gamedata.xlsx", "code": "Dummy Gamedata.xlsx content.\nThis file should contain your game data in Excel format.\nExample structure:\n\n| GameID | Date       | Score | Won |\n|--------|------------|-------|-----|\n| 1      | 2023-01-01 | 75    | 1   |\n| 2      | 2023-01-08 | 60    | 0   |\n| 3      | 2023-01-15 | 80    | 1   |\n| ...    | ...        | ...   | ... |\n\nWhere 'Won' is the target (dependent) variable.\nEnsure all columns used are numeric and free of NaN values."}], "18": [{"file": "18-stdanswer.py", "path": "18-stdanswer.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        \"\"\"\n        Initializes the BashCrawl game with the root directory and available commands.\n        \"\"\"\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()  # Copy to allow multiple game instances\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        \"\"\"\n        Displays the main menu options to the player.\n        \"\"\"\n        pass\n\n    def main_menu_help(self):\n        \"\"\"\n        Provide help information for the main menu.\n        \"\"\"\n        pass\n\n    def print_game_help(self):\n        \"\"\"\n        Display in-game command help to the player.\n        \"\"\"\n        pass\n\n    def list_contents(self):\n        \"\"\"\n        List the contents of the current directory.\n        \"\"\"\n        pass\n\n    def change_directory(self, target_dir):\n        \"\"\"\n        Change the current directory to the specified target directory.\n        \"\"\"\n        pass\n\n    def check_inventory(self):\n        \"\"\"\n        Check and display the player's inventory.\n        \"\"\"\n        pass\n\n    def play(self):\n        \"\"\"\n        Start the game loop and process player commands.\n        \"\"\"\n        pass\n\n    def main_menu(self):\n        \"\"\"\n        Display and manage interactions with the main menu.\n        \"\"\"\n        pass\n\n\ndef main():\n    \"\"\"\n    Main function to initiate BashCrawl game.\n    \"\"\"\n    game = BashCrawl()\n    game.main_menu()\n\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "README.md", "path": "README.md", "code": "# BashCrawl\n\nA simple text-based adventure game where you navigate a file system using bash-like commands.\n\n## How to run\n\n1.  Save the `18-stdanswer.py` file.\n2.  Open a terminal or command prompt.\n3.  Navigate to the directory where you saved the file.\n4.  Run the game using `python 18-stdanswer.py`.\n\n## Commands\n\n*   `ls`: List the contents of the current directory.\n*   `cd <directory>`: Change the current directory.\n*   `inventory`: Check the player's inventory.\n*   `help`: Display in-game command help.\n*   `quit`: Quit the game.\n"}, {"file": "requirements.txt", "path": "requirements.txt", "code": ""}], "19": [{"file": "Deathlist.csv", "path": "Deathlist.csv", "code": "Date of death\n2023-01-01\n2023-01-08\n2023-01-15\n2023-01-01\n2023-01-22\n2023-01-29\n2023-02-05\n2023-02-12\n2023-02-19\n2023-02-26\n2023-03-05\n2023-03-12\n2023-03-19\n2023-03-26\n2023-04-02\n2023-04-09\n2023-04-16\n2023-04-23\n2023-04-30\n2023-05-07\n2023-05-14\n2023-05-21\n2023-05-28\n2023-06-04\n2023-06-11\n2023-06-18\n2023-06-25\n2023-07-02\n2023-07-09\n2023-07-16"}, {"file": "19-stdanswer.py", "path": "19-stdanswer.py", "code": "import os\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nrequired_columns = ['Date of death']\n\n\ndef check_file_existence(file_path):\n    \"\"\"\n    Check if a file exists at the given file path.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n\n\ndef read_dataset(file_path):\n    \"\"\"\n    Read the dataset from a CSV file and return a DataFrame.\n    \"\"\"\n    check_file_existence(file_path)\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except pd.errors.EmptyDataError:\n        raise ValueError(f\"The file {file_path} is empty.\")\n    except pd.errors.ParserError:\n        raise ValueError(f\"Error parsing the CSV file {file_path}. Check its format.\")\n\n\ndef validate_dataset(df, required_columns):\n    \"\"\"\n    Validate that the dataset contains all required columns.\n    \"\"\"\n    missing_columns = [col for col in required_columns if col not in df.columns]\n    if missing_columns:\n        raise KeyError(f\"Missing required columns: {missing_columns}\")\n\n\ndef preprocess_dataset(df):\n    \"\"\"\n    Preprocess the dataset, including cleaning and formatting dates.\n    \"\"\"\n    try:\n        df['Date of death'] = pd.to_datetime(df['Date of death'], errors='raise')\n        df['Week'] = df['Date of death'].dt.isocalendar().week\n        return df\n    except ValueError as e:\n        raise ValueError(f\"Error converting 'Date of death' to datetime: {e}\")\n\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    \"\"\"\n    Plot the weekly deaths and save as a histogram image file.\n    \"\"\"\n    plt.figure(figsize=(12, 6))\n    weekly_deaths.plot(kind='bar', color='skyblue')\n    plt.title('Weekly Deaths')\n    plt.xlabel('Week Number')\n    plt.ylabel('Number of Deaths')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.savefig(output_file)\n\n\ndef main():\n    \"\"\"\n    Main execution function to process the dataset and plot the histogram.\n    \"\"\"\n    try:\n        df = read_dataset(input_file)\n        validate_dataset(df, required_columns)\n        df = preprocess_dataset(df)\n        weekly_deaths = df.groupby('Week').size()\n        plot_weekly_deaths(weekly_deaths, output_file)\n        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\n        print(e)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == '__main__':\n    main()"}]}