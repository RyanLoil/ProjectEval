{"1": [{"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calculate/', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef calculate_bmi(request):\n    if request.method == 'POST':\n        height = float(request.POST.get('height'))\n        weight = float(request.POST.get('weight'))\n        height_unit = request.POST.get('height_unit')\n        weight_unit = request.POST.get('weight_unit')\n\n        # Conversion to meters and kilograms\n        if height_unit == 'inches':\n            height = height * 0.0254\n        elif height_unit == 'cm':\n            height = height / 100\n\n        if weight_unit == 'lbs':\n            weight = weight * 0.453592\n\n        try:\n            bmi = weight / (height ** 2)\n        except ZeroDivisionError:\n            return JsonResponse({'error': 'Height cannot be zero.'})\n\n        bmi = round(bmi, 2)\n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif 18.5 <= bmi < 25:\n            category = 'Normal'\n        elif 25 <= bmi < 30:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n        return JsonResponse({'bmi': bmi, 'category': category})\n\n    return render(request, 'bmi_calculator.html')"}, {"file": "models.py", "path": "bmi_calculator/models.py", "code": "# No models are strictly necessary for this basic BMI calculator\n# but this is a good place to put database interactions if you were\n# going to save the results to the database.\nfrom django.db import models\n\n"}, {"file": "home.html", "path": "bmi_calculator/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator Home</title>\n</head>\n<body>\n    <h1>Welcome to the BMI Calculator</h1>\n    <p>This calculator helps you determine your Body Mass Index (BMI).</p>\n    <p>BMI is a measure of body fat based on height and weight.</p>\n    <a href=\"{% url 'calculate_bmi' %}\">Go to BMI Calculator</a>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1>BMI Calculator</h1>\n    <form id=\"bmiForm\">\n        <div>\n            <label for=\"height\">Height:</label>\n            <input type=\"number\" id=\"height\" name=\"height\" required>\n            <select id=\"height_unit\" name=\"height_unit\">\n                <option value=\"cm\">cm</option>\n                <option value=\"inches\">inches</option>\n            </select>\n        </div>\n        <div>\n            <label for=\"weight\">Weight:</label>\n            <input type=\"number\" id=\"weight\" name=\"weight\" required>\n            <select id=\"weight_unit\" name=\"weight_unit\">\n                <option value=\"kg\">kg</option>\n                <option value=\"lbs\">lbs</option>\n            </select>\n        </div>\n        <button type=\"button\" onclick=\"calculateBMI()\">Calculate</button>\n        <button type=\"button\" onclick=\"resetForm()\">Reset</button>\n    </form>\n\n    <div id=\"result\" style=\"display:none;\">\n        <h2>Your BMI:</h2>\n        <p>BMI: <span id=\"bmiValue\"></span></p>\n        <p>Category: <span id=\"bmiCategory\"></span></p>\n    </div>\n\n\n    <script>\n        function calculateBMI() {\n            const height = document.getElementById('height').value;\n            const weight = document.getElementById('weight').value;\n            const height_unit = document.getElementById('height_unit').value;\n            const weight_unit = document.getElementById('weight_unit').value;\n\n            fetch('/calculate/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: `height=${height}&weight=${weight}&height_unit=${height_unit}&weight_unit=${weight_unit}`\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                  alert(data.error);\n                  return;\n                }\n                document.getElementById('bmiValue').textContent = data.bmi;\n                document.getElementById('bmiCategory').textContent = data.category;\n                document.getElementById('result').style.display = 'block';\n            });\n        }\n\n        function resetForm() {\n            document.getElementById('bmiForm').reset();\n            document.getElementById('result').style.display = 'none';\n        }\n    </script>\n</body>\n</html>"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\n# Example Model (Adjust to your specific needs)\n# class Currency(models.Model):\n#     code = models.CharField(max_length=3, unique=True)\n#     name = models.CharField(max_length=50)\n#\n#     def __str__(self):\n#         return self.code"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\n# Home Page View\ndef home(request):\n    # Implement: Select Base Currency, Select Target Currency, Enter Amount, Convert Button, Display Conversion Result, Exchange Rate Info\n    context = {}\n    return render(request, 'home.html', context)\n\n# Currency Details Page View (Optional)\ndef currency_details(request):\n    # Implement: Currency Information, Historical Exchange Rates\n    context = {}\n    return render(request, 'currency_details.html', context)\n\n# Settings Page View (Optional)\ndef settings(request):\n    # Implement: Set Default Currencies, Set Update Frequency\n    context = {}\n    return render(request, 'settings.html', context)\n\n# API endpoint for currency conversion (Example)\ndef convert_currency(request):\n    # Implement the conversion logic here based on the request data\n    # Example:\n    # base_currency = request.GET.get('base_currency')\n    # target_currency = request.GET.get('target_currency')\n    # amount = float(request.GET.get('amount'))\n    # conversion_rate = get_exchange_rate(base_currency, target_currency)\n    # converted_amount = amount * conversion_rate\n    # return JsonResponse({'converted_amount': converted_amount, 'exchange_rate': conversion_rate})\n\n    return JsonResponse({'error': 'Conversion logic not implemented'})"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    # Optional URL patterns for other pages\n    # path('currency_details/', views.currency_details, name='currency_details'),\n    # path('settings/', views.settings, name='settings'),\n    path('convert/', views.convert_currency, name='convert_currency'), # API endpoint\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# Example Form for conversion (customize as needed)\n# class CurrencyConverterForm(forms.Form):\n#     base_currency = forms.CharField(max_length=3)\n#     target_currency = forms.CharField(max_length=3)\n#     amount = forms.DecimalField()"}, {"file": "home.html", "path": "currency_converter/templates/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n    <!-- Implement: Select Base Currency, Select Target Currency, Enter Amount, Convert Button, Display Conversion Result, Exchange Rate Info -->\n\n    <form id=\"currencyForm\">\n        <label for=\"baseCurrency\">Base Currency:</label>\n        <select id=\"baseCurrency\" name=\"baseCurrency\">\n            <!-- Populate with currency options -->\n        </select><br><br>\n\n        <label for=\"targetCurrency\">Target Currency:</label>\n        <select id=\"targetCurrency\" name=\"targetCurrency\">\n            <!-- Populate with currency options -->\n        </select><br><br>\n\n        <label for=\"amount\">Amount:</label>\n        <input type=\"number\" id=\"amount\" name=\"amount\" value=\"1\"><br><br>\n\n        <button type=\"button\" onclick=\"convertCurrency()\">Convert</button><br><br>\n\n        <label>Conversion Result:</label>\n        <span id=\"conversionResult\"></span><br><br>\n\n        <label>Exchange Rate:</label>\n        <span id=\"exchangeRate\"></span>\n    </form>\n\n    <script>\n        function convertCurrency() {\n            const baseCurrency = document.getElementById(\"baseCurrency\").value;\n            const targetCurrency = document.getElementById(\"targetCurrency\").value;\n            const amount = document.getElementById(\"amount\").value;\n\n            fetch(`/convert/?base_currency=${baseCurrency}&target_currency=${targetCurrency}&amount=${amount}`)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.error) {\n                        document.getElementById(\"conversionResult\").innerText = data.error;\n                        document.getElementById(\"exchangeRate\").innerText = \"\";\n                    } else {\n                        document.getElementById(\"conversionResult\").innerText = data.converted_amount;\n                        document.getElementById(\"exchangeRate\").innerText = data.exchange_rate;\n                    }\n                });\n        }\n    </script>\n\n</body>\n</html>"}, {"file": "settings.py", "path": "currency_converter/templates/settings.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <h1>Settings</h1>\n    <!-- Implement: Set Default Currencies, Set Update Frequency -->\n\n    <form>\n        <label for=\"defaultBaseCurrency\">Default Base Currency:</label>\n        <select id=\"defaultBaseCurrency\" name=\"defaultBaseCurrency\">\n            <!-- Populate with currency options -->\n        </select><br><br>\n\n        <label for=\"defaultTargetCurrency\">Default Target Currency:</label>\n        <select id=\"defaultTargetCurrency\" name=\"defaultTargetCurrency\">\n            <!-- Populate with currency options -->\n        </select><br><br>\n\n        <label for=\"updateFrequency\">Update Frequency (minutes):</label>\n        <input type=\"number\" id=\"updateFrequency\" name=\"updateFrequency\" value=\"60\"><br><br>\n\n        <button type=\"submit\">Save Settings</button>\n    </form>\n</body>\n</html>"}, {"file": "currency_details.html", "path": "currency_converter/templates/currency_details.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Details</title>\n</head>\n<body>\n    <h1>Currency Details</h1>\n    <!-- Implement: Currency Information, Historical Exchange Rates -->\n</body>\n</html>"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generated_password/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generated_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters  # Default to letters if nothing is selected\n\n    generated_password = ''.join(random.choice(characters) for i in range(length))\n\n    return render(request, 'generated_password.html', {'password': generated_password})\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# No models needed for this simple password generator"}, {"file": "forms.py", "path": "password_generator/forms.py", "code": "from django import forms\n\n# No forms needed for this implementation"}, {"file": "home.html", "path": "password_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1>Welcome to the Password Generator!</h1>\n    <p>Create strong and secure passwords.</p>\n    <a href=\"{% url 'password_options' %}\">Generate Password</a>\n    {% if False %}<p> Optional Welcome message </p>{% endif %}\n</body>\n</html>"}, {"file": "password_options.html", "path": "password_generator/templates/password_options.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Options</title>\n</head>\n<body>\n    <h1>Password Options</h1>\n    <form action=\"{% url 'generated_password' %}\" method=\"get\">\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" value=\"12\"><br><br>\n\n        <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\"> <label for=\"uppercase\">Include Uppercase</label><br>\n        <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\"> <label for=\"lowercase\">Include Lowercase</label><br>\n        <input type=\"checkbox\" id=\"numbers\" name=\"numbers\"> <label for=\"numbers\">Include Numbers</label><br>\n        <input type=\"checkbox\" id=\"symbols\" name=\"symbols\"> <label for=\"symbols\">Include Symbols</label><br><br>\n\n        <button type=\"submit\">Generate Password</button>\n    </form>\n</body>\n</html>"}, {"file": "generated_password.html", "path": "password_generator/templates/generated_password.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Generated Password</title>\n</head>\n<body>\n    <h1>Generated Password</h1>\n    <p>Your new password is: <strong>{{ password }}</strong></p>\n    <button onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n    <script>\n        function copyToClipboard() {\n            navigator.clipboard.writeText(\"{{ password }}\")\n            alert(\"Password copied to clipboard!\");\n        }\n    </script>\n\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About Password Generator</h1>\n    <p>This website generates random passwords based on your selected criteria.</p>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}], "4": [{"file": "urls.py", "path": "qrcode_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr, name='generate_qr'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qrcode_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport qrcode\nimport io\nimport base64\nfrom django.views.decorators.csrf import csrf_exempt\nfrom PIL import Image\n\ndef home(request):\n    return render(request, 'home.html')\n\n@csrf_exempt\ndef generate_qr(request):\n    if request.method == 'POST':\n        text = request.POST.get('text', '')\n        box_size = int(request.POST.get('box_size', 10))\n        border_size = int(request.POST.get('border_size', 4))\n        error_correction = request.POST.get('error_correction', 'medium')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        error_correction_levels = {\n            'small': qrcode.ERROR_CORRECT_L,\n            'medium': qrcode.ERROR_CORRECT_M,\n            'large': qrcode.ERROR_CORRECT_H,\n        }\n\n        error_correction_level = error_correction_levels.get(error_correction, qrcode.ERROR_CORRECT_M)\n\n        try:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=error_correction_level,\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=fill_color, back_color=back_color)\n            \n            buffer = io.BytesIO()\n            img.save(buffer, format=\"PNG\")\n            img_str = base64.b64encode(buffer.getvalue()).decode('utf-8')\n\n            return JsonResponse({'image': img_str})\n        except Exception as e:\n            return JsonResponse({'error': str(e)})\n    else:\n        return render(request, 'qr_generator.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "models.py", "path": "qrcode_generator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "forms.py", "path": "qrcode_generator/forms.py", "code": "from django import forms\n\n# You can add forms here if needed"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to QR Code Generator</h1>\n    <p>Simple, welcoming text explaining what the website does.</p>\n    <a href=\"/generate/\"><button>Generate QR Code</button></a>\n</body>\n</html>"}, {"file": "qr_generator.html", "path": "templates/qr_generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n</head>\n<body>\n    <h1>QR Code Generator</h1>\n\n    <label for=\"text\">Text/URL:</label>\n    <input type=\"text\" id=\"text\" name=\"text\"><br><br>\n\n    <label for=\"box_size\">Box Size (1-128):</label>\n    <input type=\"number\" id=\"box_size\" name=\"box_size\" value=\"10\" min=\"1\" max=\"128\"><br><br>\n\n    <label for=\"border_size\">Border Size (0-10):</label>\n    <input type=\"number\" id=\"border_size\" name=\"border_size\" value=\"4\" min=\"0\" max=\"10\"><br><br>\n\n    <label for=\"error_correction\">Error Correction:</label>\n    <select id=\"error_correction\" name=\"error_correction\">\n        <option value=\"small\">Small</option>\n        <option value=\"medium\" selected>Medium</option>\n        <option value=\"large\">Large</option>\n    </select><br><br>\n\n    <label for=\"fill_color\">Fill Color:</label>\n    <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\"><br><br>\n\n    <label for=\"back_color\">Background Color:</label>\n    <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\"><br><br>\n\n    <button id=\"generate\">Generate QR Code</button>\n\n    <div id=\"qr_code_display\"></div>\n    <a id=\"download_link\" style=\"display:none;\" download=\"qrcode.png\">Download QR Code</a>\n    <div id=\"error_message\" style=\"color: red;\"></div>\n    <script>\n        $(document).ready(function() {\n            $('#generate').click(function() {\n                var text = $('#text').val();\n                var box_size = $('#box_size').val();\n                var border_size = $('#border_size').val();\n                var error_correction = $('#error_correction').val();\n                var fill_color = $('#fill_color').val();\n                var back_color = $('#back_color').val();\n\n                $.ajax({\n                    url: '/generate/',\n                    type: 'POST',\n                    data: {\n                        text: text,\n                        box_size: box_size,\n                        border_size: border_size,\n                        error_correction: error_correction,\n                        fill_color: fill_color,\n                        back_color: back_color,\n                        csrfmiddlewaretoken: '{{ csrf_token }}'\n                    },\n                    success: function(data) {\n                        if (data.error) {\n                            $('#error_message').text(data.error);\n                            $('#qr_code_display').html('');\n                            $('#download_link').hide();\n                        } else {\n                            $('#error_message').text('');\n                            $('#qr_code_display').html('<img src=\"data:image/png;base64,' + data.image + '\" alt=\"QR Code\">');\n                            $('#download_link').attr('href', 'data:image/png;base64,' + data.image);\n                            $('#download_link').show();\n                        }\n                    },\n                    error: function(xhr, status, error) {\n                        $('#error_message').text('An error occurred: ' + error);\n                        $('#qr_code_display').html('');\n                        $('#download_link').hide();\n                    }\n                });\n            });\n        });\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About Us</h1>\n    <p>Details about the website, its purpose, and how it works.</p>\n\n    <h2>Privacy Policy</h2>\n    <p>The privacy policy of the website.</p>\n\n    <h2>Terms of Service</h2>\n    <p>The terms of service of the website.</p>\n</body>\n</html>"}, {"file": "settings.py", "path": "qrcode_project/settings.py", "code": "# Add 'qrcode_generator' to INSTALLED_APPS\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcode_generator',  # Add this line\n]\n\n# Configure TEMPLATES to point to the 'templates' directory.\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],  # Add this line\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n"}], "5": [{"file": "urls.py", "path": "converter_project/converter_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "converter_project/converter_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport markdown\n\ndef home(request):\n    return render(request, 'converter_app/home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        context = {'html_output': html_output}\n        return render(request, 'converter_app/convert.html', context)\n    else:\n        return render(request, 'converter_app/convert.html')\n\ndef about(request):\n    return render(request, 'converter_app/about.html')"}, {"file": "models.py", "path": "converter_project/converter_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "forms.py", "path": "converter_project/converter_app/forms.py", "code": "from django import forms\n\n# Optionally use forms for file upload or more complex input"}, {"file": "home.html", "path": "converter_project/converter_app/templates/converter_app/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Welcome to the Markdown to HTML Converter!</h1>\n  <p>This tool allows you to convert Markdown text into HTML.</p>\n  <a href=\"{% url 'convert' %}\">Convert Markdown</a>\n  <a href=\"{% url 'about' %}\">About</a>\n{% endblock %}"}, {"file": "convert.html", "path": "converter_project/converter_app/templates/converter_app/convert.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Markdown to HTML Converter</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    <textarea name=\"markdown_text\" rows=\"10\" cols=\"50\"></textarea><br>\n    <button type=\"submit\">Convert</button>\n  </form>\n\n  {% if html_output %}\n    <h2>HTML Output:</h2>\n    <div id=\"html_output\">\n      {{ html_output|safe }}\n    </div>\n  {% endif %}\n{% endblock %}"}, {"file": "about.html", "path": "converter_project/converter_app/templates/converter_app/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>About This Converter</h1>\n  <p>Information about the team or individual who developed the converter.</p>\n  <p>Optional FAQ section.</p>\n{% endblock %}"}, {"file": "base.html", "path": "converter_project/converter_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown Converter</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "settings.py", "path": "converter_project/converter_project/settings.py", "code": "# add 'converter_app' to INSTALLED_APPS\n# configure templates directory in TEMPLATES\n# Configure static file serving (optional, for CSS/JS)"}], "6": [{"file": "models.py", "path": "todo/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE, related_name='tasks')\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    due_date = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todo/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom .forms import TodoListForm, TaskForm\nfrom django.urls import reverse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'todo/home.html', {'todo_lists': todo_lists})\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TodoListForm()\n    return render(request, 'todo/create_todo_list.html', {'form': form})\n\ndef todo_list_detail(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    tasks = todo_list.tasks.all()\n    form = TaskForm()\n    return render(request, 'todo/todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks, 'form': form})\n\ndef create_task(request, todo_list_pk):\n    todo_list = get_object_or_404(TodoList, pk=todo_list_pk)\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.todo_list = todo_list\n            task.save()\n            return redirect('todo_list_detail', pk=todo_list.pk)\n    else:\n        form = TaskForm()\n    return render(request, 'todo/create_task.html', {'form': form, 'todo_list': todo_list})\n\ndef edit_task(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list_detail', pk=task.todo_list.pk)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'todo/edit_task.html', {'form': form, 'task': task})\n\ndef delete_task(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    todo_list_pk = task.todo_list.pk\n    task.delete()\n    return redirect('todo_list_detail', pk=todo_list_pk)\n\ndef mark_task_completed(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', pk=task.todo_list.pk)\n"}, {"file": "forms.py", "path": "todo/forms.py", "code": "from django import forms\nfrom .models import TodoList, Task\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['name']\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'due_date']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date'})\n        }"}, {"file": "urls.py", "path": "todo/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('create_todo_list/', views.create_todo_list, name='create_todo_list'),\n    path('todo_list/<int:pk>/', views.todo_list_detail, name='todo_list_detail'),\n    path('todo_list/<int:todo_list_pk>/create_task/', views.create_task, name='create_task'),\n    path('task/<int:pk>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:pk>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:pk>/complete/', views.mark_task_completed, name='mark_task_completed'),\n]"}, {"file": "settings.py", "path": "your_project/settings.py", "code": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo',\n]\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]"}, {"file": "home.html", "path": "todo/templates/todo/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Todo Lists</h1>\n  <a href=\"{% url 'create_todo_list' %}\">Create New Todo List</a>\n  <ul>\n    {% for todo_list in todo_lists %}\n      <li><a href=\"{% url 'todo_list_detail' todo_list.pk %}\">{{ todo_list.name }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}, {"file": "todo_list_detail.html", "path": "todo/templates/todo/todo_list_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>{{ todo_list.name }}</h1>\n  <a href=\"{% url 'create_task' todo_list.pk %}\">Add New Task</a>\n  <ul>\n    {% for task in tasks %}\n      <li>\n        {{ task.title }}\n        {% if task.completed %}\n          (Completed)\n        {% else %}\n          <a href=\"{% url 'mark_task_completed' task.pk %}\">Mark Complete</a>\n        {% endif %}\n        <a href=\"{% url 'edit_task' task.pk %}\">Edit</a>\n        <a href=\"{% url 'delete_task' task.pk %}\">Delete</a>\n      </li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}, {"file": "create_todo_list.html", "path": "todo/templates/todo/create_todo_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Create Todo List</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "create_task.html", "path": "todo/templates/todo/create_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Create Task</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "edit_task.html", "path": "todo/templates/todo/edit_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Edit Task</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "base.html", "path": "todo/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App</title>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}], "7": [{"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('reports/', views.reports, name='reports'),\n    path('settings1/', views.settings1, name='settings1'),\n    path('settings2/', views.settings2, name='settings2'),\n    path('add_transaction/', views.add_transaction, name='add_transaction'), # Example URL for add_transaction\n    path('edit_transaction/<int:transaction_id>/', views.edit_transaction, name='edit_transaction'), # Example URL for edit_transaction\n    path('delete_transaction/<int:transaction_id>/', views.delete_transaction, name='delete_transaction'),#Example URL for delete_transaction\n    path('add_category/', views.add_category, name='add_category'),#Example URL for add_category\n    path('edit_category/<int:category_id>/', views.edit_category, name='edit_category'),#Example URL for edit_category\n    path('delete_category/<int:category_id>/', views.delete_category, name='delete_category'),#Example URL for delete_category\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.user_login, name='login'),\n]"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef balance_tracker(request):\n    return render(request, 'balance_tracker.html')\n\ndef reports(request):\n    return render(request, 'reports.html')\n\ndef settings1(request):\n    return render(request, 'settings1.html')\n\ndef settings2(request):\n    return render(request, 'settings2.html')\n\n# Example views (to be fleshed out with actual logic)\ndef add_transaction(request):\n    # Logic to handle adding a transaction\n    return HttpResponse(\"Add Transaction\")\n\ndef edit_transaction(request, transaction_id):\n    # Logic to handle editing a transaction\n    return HttpResponse(f\"Edit Transaction {transaction_id}\")\n\ndef delete_transaction(request, transaction_id):\n    # Logic to handle deleting a transaction\n    return HttpResponse(f\"Delete Transaction {transaction_id}\")\n\ndef add_category(request):\n    # Logic to handle adding a category\n    return HttpResponse(\"Add Category\")\n\ndef edit_category(request, category_id):\n    # Logic to handle editing a category\n    return HttpResponse(f\"Edit Category {category_id}\")\n\ndef delete_category(request, category_id):\n    # Logic to handle deleting a category\n    return HttpResponse(f\"Delete Category {category_id}\")\n\n\ndef signup(request):\n    return HttpResponse(\"Sign Up\")\n\n\ndef user_login(request):\n    return HttpResponse(\"User Login\")\n"}, {"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n    description = models.CharField(max_length=200, blank=True)\n\n    def __str__(self):\n        return f'{self.date} - {self.amount} - {self.category}'"}, {"file": "forms.py", "path": "budget_control/forms.py", "code": "from django import forms\nfrom .models import Transaction, Category\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['date', 'amount', 'category', 'description']\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']"}, {"file": "home.html", "path": "templates/home.html", "code": "<h1>Home Page</h1>\n<a href=\"{% url 'login' %}\">Login</a>\n<a href=\"{% url 'signup' %}\">Sign Up</a>\n<a href=\"#\">Support</a>\n<a href=\"{% url 'balance_tracker' %}\">Balance Tracker</a>\n<a href=\"{% url 'reports' %}\">Reports</a>\n<a href=\"{% url 'settings1' %}\">Settings 1</a>\n<a href=\"{% url 'settings2' %}\">Settings 2</a>"}, {"file": "balance_tracker.html", "path": "templates/balance_tracker.html", "code": "<h1>Balance Tracker</h1>\n<a href=\"{% url 'add_transaction' %}\">Add Transaction</a>"}, {"file": "reports.html", "path": "templates/reports.html", "code": "<h1>Reports</h1>"}, {"file": "settings1.html", "path": "templates/settings1.html", "code": "<h1>Settings 1</h1>\n<a href=\"{% url 'add_category' %}\">Add Category</a>"}, {"file": "settings2.html", "path": "templates/settings2.html", "code": "<h1>Settings 2</h1>"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    current_date = timezone.now().date()\n    events = Event.objects.filter(start_time__date=current_date)\n    return render(request, 'calendar_app/home.html', {'current_date': current_date, 'events': events})\n\ndef calendar_view(request, year=None, month=None):\n    if year is None or month is None:\n        now = timezone.now()\n        year = now.year\n        month = now.month\n    return render(request, 'calendar_app/calendar.html', {'year': year, 'month': month})\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/add_event.html', {'form': form})\n\ndef event_detail(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendar_app/event_detail.html', {'event': event})\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_detail', event_id=event.id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/edit_event.html', {'form': form, 'event': event})\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'calendar_app/delete_event.html', {'event': event})\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query) if query else Event.objects.all()\n    return render(request, 'calendar_app/search_events.html', {'events': events, 'query': query})\n\ndef list_all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/list_events.html', {'events': events})"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_month'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_detail, name='event_detail'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('events/all/', views.list_all_events, name='list_all_events'),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'calendar_app' to INSTALLED_APPS\nINSTALLED_APPS = [\n    ...\n    'calendar_app',\n]\n\n# Add template directory\nTEMPLATES = [\n    {\n        ...\n        'DIRS': [BASE_DIR / 'templates'],\n        ...\n    },\n]\n\n# Database configuration (e.g., using SQLite)\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}"}, {"file": "home.html", "path": "templates/calendar_app/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome</h1>\n    <p>Today's Date: {{ current_date }}</p>\n\n    <h2>Events for Today</h2>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events for today.</li>\n        {% endfor %}\n    </ul>\n\n    <a href=\"{% url 'calendar' %}\">View Calendar</a>\n    <a href=\"{% url 'add_event' %}\">Add New Event</a>\n{% endblock %}"}, {"file": "calendar.html", "path": "templates/calendar_app/calendar.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Calendar</h1>\n\n    <form method=\"get\" action=\"{% url 'calendar_month' year=year month=month %}\">\n      <label for=\"month\">Select Month:</label>\n      <select name=\"month\" id=\"month\">\n          {% for i in '123456789ABC'|make_list %}\n            {% with month_num=forloop.counter %}\n              <option value=\"{{month_num}}\" {% if month == month_num %}selected{% endif %}>{{ month_num }}</option>\n            {% endwith %}\n          {% endfor %}\n\n      </select>\n\n      <label for=\"year\">Select Year:</label>\n      <input type=\"number\" name=\"year\" id=\"year\" value=\"{{year}}\">\n\n      <button type=\"submit\">Go</button>\n    </form>\n\n    <p>Year: {{ year }}, Month: {{ month }}</p>\n\n    <a href=\"{% url 'add_event' %}\">Add Event</a>\n{% endblock %}"}, {"file": "add_event.html", "path": "templates/calendar_app/add_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Add Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n    </form>\n    <a href=\"{% url 'home' %}\">Cancel</a>\n{% endblock %}"}, {"file": "event_detail.html", "path": "templates/calendar_app/event_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Event Details</h1>\n    <h2>{{ event.title }}</h2>\n    <p>Description: {{ event.description }}</p>\n    <p>Start Time: {{ event.start_time }}</p>\n    <p>End Time: {{ event.end_time }}</p>\n\n    <a href=\"{% url 'edit_event' event.id %}\">Edit</a>\n    <a href=\"{% url 'delete_event' event.id %}\">Delete</a>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "edit_event.html", "path": "templates/calendar_app/edit_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Edit Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Update</button>\n    </form>\n    <a href=\"{% url 'event_detail' event.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "delete_event.html", "path": "templates/calendar_app/delete_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Delete Event</h1>\n    <p>Are you sure you want to delete \"{{ event.title }}\"?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Delete</button>\n    </form>\n    <a href=\"{% url 'event_detail' event.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "search_events.html", "path": "templates/calendar_app/search_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Search Results</h1>\n    <form method=\"get\" action=\"{% url 'search_events' %}\">\n        <input type=\"text\" name=\"q\" placeholder=\"Search events\" value=\"{{ query }}\">\n        <button type=\"submit\">Search</button>\n    </form>\n\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events found.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "list_events.html", "path": "templates/calendar_app/list_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>All Events</h1>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}</li>\n        {% empty %}\n            <li>No events found.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar App</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'calendar' %}\">Calendar</a> |\n        <a href=\"{% url 'add_event' %}\">Add Event</a> |\n        <a href=\"{% url 'search_events' %}\">Search Events</a> |\n        <a href=\"{% url 'list_all_events' %}\">List All Events</a>\n    </nav>\n    <hr>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "9": [{"file": "urls.py", "path": "ai_chatbot/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('support/', views.support, name='support'),\n    # path('about/', views.about, name='about'), #About page is optional\n]"}, {"file": "views.py", "path": "ai_chatbot/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    # Display a brief overview of the AI Chatbot's capabilities and benefits.\n    return render(request, 'home.html')\n\ndef features(request):\n    # Showcase the main features of the AI Chatbot.\n    return render(request, 'features.html')\n\ndef pricing(request):\n    # Display different pricing plans and subscription options.\n    # Provide a form to contact the sales team for customized solutions.\n    return render(request, 'pricing.html')\n\ndef support(request):\n    # Provide answers to frequently asked questions about the AI Chatbot.\n    # Offer a form for users needing assistance.\n    return render(request, 'support.html')\n\n# def about(request):\n#     # Show information about the company and team behind the AI Chatbot.\n#     return render(request, 'about.html')\n"}, {"file": "home.html", "path": "ai_chatbot/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Home</h1>\n    <p>Product Overview:  [AI Chatbot's capabilities and benefits]</p>\n{% endblock %}"}, {"file": "features.html", "path": "ai_chatbot/templates/features.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Features</h1>\n    <p>List Key Features: [Main features of the AI Chatbot]</p>\n{% endblock %}"}, {"file": "pricing.html", "path": "ai_chatbot/templates/pricing.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Pricing</h1>\n    <p>View Pricing Plans: [Different pricing plans and subscription options]</p>\n    <p>Contact Sales: [Form to contact the sales team]</p>\n{% endblock %}"}, {"file": "support.html", "path": "ai_chatbot/templates/support.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Support</h1>\n    <p>FAQ: [Answers to frequently asked questions]</p>\n    <p>Support Message: [Form for users needing assistance]</p>\n{% endblock %}"}, {"file": "base.html", "path": "ai_chatbot/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'features' %}\">Features</a> |\n        <a href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a href=\"{% url 'support' %}\">Support</a>\n        {# <a href=\"{% url 'about' %}\">About</a> #}\n    </nav>\n    <hr>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "forms.py", "path": "ai_chatbot/forms.py", "code": "from django import forms\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    message = forms.CharField(widget=forms.Textarea)\n\nclass SupportForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    subject = forms.CharField(max_length=200)\n    message = forms.CharField(widget=forms.Textarea)"}], "10": [{"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path, include\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal_log/', include('meal_log.urls')),  # Include meal_log app's URLs\n    path('activity_log/', include('activity_log.urls')), # Include activity_log app's URLs\n    path('analysis/', views.analysis, name='analysis'),\n    path('settings/', views.settings_view, name='settings'),\n    path('help/', include('help.urls')),  # Include help app's URLs\n    path('accounts/', include('accounts.urls')), #include authentication related urls\n]"}, {"file": "views.py", "path": "calorie_tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\n\ndef home(request):\n    # Welcome message, Sign Up, Log In, View Dashboard (before login) - Implement in template\n    return render(request, 'home.html')\n\n@login_required\ndef dashboard(request):\n    # Daily Calorie Intake, Recent Meals, Add Meal, Recent Activities, Add Activity - Implement context data and template\n    return render(request, 'dashboard.html')\n\n@login_required\ndef analysis(request):\n    # Weekly Calorie Chart - Implement chart generation and template\n    return render(request, 'analysis.html')\n\n@login_required\ndef settings_view(request):\n    # Handle profile, preferences, notifications, privacy settings\n    return render(request, 'settings.html')"}, {"file": "models.py", "path": "calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    # Add user profile fields here (e.g., dietary preferences, goals)\n    def __str__(self):\n        return self.user.username"}, {"file": "forms.py", "path": "calorie_tracker/forms.py", "code": "from django import forms\n\n#Forms related to user settings\nclass ProfileForm(forms.Form):\n    # Example fields (customize as needed)\n    first_name = forms.CharField(max_length=100, required=False)\n    last_name = forms.CharField(max_length=100, required=False)\n\nclass PreferencesForm(forms.Form):\n   #add prefereces fields\n    pass"}, {"file": "admin.py", "path": "calorie_tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import UserProfile\n\nadmin.site.register(UserProfile)"}, {"file": "urls.py", "path": "meal_log/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.meal_log, name='meal_log'),\n    path('search/', views.meal_search, name='meal_search'),\n    path('edit/<int:meal_id>/', views.edit_meal, name='edit_meal'),\n    path('delete/<int:meal_id>/', views.delete_meal, name='delete_meal'),\n]"}, {"file": "views.py", "path": "meal_log/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\n\n@login_required\ndef meal_log(request):\n    # Display meals - Implement template\n    return render(request, 'meal_log/meal_log.html')\n\n@login_required\ndef meal_search(request):\n    # Implement search functionality\n    return render(request, 'meal_log/meal_search.html')\n\n@login_required\ndef edit_meal(request, meal_id):\n    # Edit meal details - Implement form and logic\n    return render(request, 'meal_log/edit_meal.html')\n\n@login_required\ndef delete_meal(request, meal_id):\n    # Delete a meal - Implement confirmation and deletion\n    return redirect('meal_log')"}, {"file": "urls.py", "path": "activity_log/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.activity_log, name='activity_log'),\n    path('search/', views.activity_search, name='activity_search'),\n    path('edit/<int:activity_id>/', views.edit_activity, name='edit_activity'),\n    path('delete/<int:activity_id>/', views.delete_activity, name='delete_activity'),\n]"}, {"file": "views.py", "path": "activity_log/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\n\n@login_required\ndef activity_log(request):\n    # Display activities - Implement template\n    return render(request, 'activity_log/activity_log.html')\n\n@login_required\ndef activity_search(request):\n    # Implement search functionality\n    return render(request, 'activity_log/activity_search.html')\n\n@login_required\ndef edit_activity(request, activity_id):\n    # Edit activity details - Implement form and logic\n    return render(request, 'activity_log/edit_activity.html')\n\n@login_required\ndef delete_activity(request, activity_id):\n    # Delete an activity - Implement confirmation and deletion\n    return redirect('activity_log')"}, {"file": "urls.py", "path": "help/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.help_view, name='help'),\n    path('faq/', views.faq, name='faq'),\n    path('contact/', views.contact_support, name='contact_support'),\n    path('tutorials/', views.tutorials, name='tutorials'),\n]"}, {"file": "views.py", "path": "help/views.py", "code": "from django.shortcuts import render\n\ndef help_view(request):\n    return render(request, 'help/help.html')\n\ndef faq(request):\n    #faq view\n    return render(request, 'help/faq.html')\n\ndef contact_support(request):\n    #contact view\n    return render(request, 'help/contact.html')\n\ndef tutorials(request):\n    #tutorial view\n    return render(request, 'help/tutorials.html')"}, {"file": "urls.py", "path": "accounts/urls.py", "code": "from django.urls import path\nfrom . import views\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('signup/', views.signup, name='signup'),\n    path('login/', auth_views.LoginView.as_view(template_name='accounts/login.html'), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='/'), name='logout'), # Redirect to home page after logout\n]"}, {"file": "views.py", "path": "accounts/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('login')  # Redirect to login page after successful signup\n    else:\n        form = UserCreationForm()\n    return render(request, 'accounts/signup.html', {'form': form})"}], "11": [{"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport json\n\ndef home(request):\n    if request.method == 'POST':\n        status = request.POST.get('status')\n        review_note = request.POST.get('review_note')\n        # Handle file upload (optional)\n        if 'json_file' in request.FILES:\n            json_file = request.FILES['json_file']\n            try:\n                data = json.load(json_file)\n                # Process the JSON data\n                pass\n            except json.JSONDecodeError:\n                # Handle invalid JSON\n                pass\n\n        context = {\n            'welcome_message': 'Welcome to the Review App!',  # Replace with actual welcome message\n        }\n\n        return render(request, 'home.html', context)\n    else:\n\n        context = {\n            'welcome_message': 'Welcome to the Review App!', # Replace with actual welcome message\n        }\n        return render(request, 'home.html', context)\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>{{ welcome_message }}</h1>\n\n    <form method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n\n        <label for=\"status\">Status:</label>\n        <select name=\"status\" id=\"status\">\n            <option value=\"Select\">Select</option>\n            <option value=\"Pass\">Pass</option>\n            <option value=\"Fail\">Fail</option>\n        </select><br><br>\n\n        <label for=\"review_note\">Review Note:</label><br>\n        <textarea name=\"review_note\" id=\"review_note\" rows=\"4\" cols=\"50\"></textarea><br><br>\n\n        <label for=\"json_file\">Import JSON File:</label>\n        <input type=\"file\" name=\"json_file\" id=\"json_file\"><br><br>\n\n        <button type=\"submit\">Submit</button>\n    </form>\n\n    <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>\n"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About</h1>\n    <p>This web application is designed for reviewing test codes...</p>\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>\n"}, {"file": "models.py", "path": "app/models.py", "code": "from django.db import models\n\n# Define your models here (if needed)\n"}], "12": [{"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('home.urls')), # Home\n    path('employee/', include('employee_portal.urls')), # Frontend (Employee Portal)\n    path('admin/', include('admin_portal.urls')), # Admin Page (Accounting Administrator Portal)\n    path('budget/', include('budget_control.urls')), # Budget Control Application\n]"}, {"file": "home/urls.py", "path": "expense_tracker/home/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'), # View Home\n    path('signup/', views.signup, name='signup'), # Sign Up\n    path('login/', views.login_view, name='login'), # Log In\n]"}, {"file": "home/views.py", "path": "expense_tracker/home/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout, authenticate\n\ndef home(request):\n    return render(request, 'home/home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('employee:submit_claim') # Redirect to employee portal after signup\n    else:\n        form = UserCreationForm()\n    return render(request, 'home/signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('employee:submit_claim') # Redirect to employee portal after login\n    else:\n        form = AuthenticationForm()\n    return render(request, 'home/login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home') #Redirect to home page after log out\n"}, {"file": "employee_portal/urls.py", "path": "expense_tracker/employee_portal/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'employee'\n\nurlpatterns = [\n    path('submit/', views.submit_claim, name='submit_claim'), # Submit Claim\n    path('status/', views.view_claim_status, name='view_claim_status'), # View Claim Status\n    path('edit/<int:claim_id>/', views.edit_submitted_claim, name='edit_submitted_claim'), # Edit Submitted Claim\n]"}, {"file": "employee_portal/views.py", "path": "expense_tracker/employee_portal/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import Claim\nfrom .forms import ClaimForm\nfrom django.contrib.auth.decorators import login_required\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            return redirect('employee:view_claim_status')\n    else:\n        form = ClaimForm()\n    return render(request, 'employee_portal/submit_claim.html', {'form': form})\n\n@login_required\ndef view_claim_status(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'employee_portal/view_claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_submitted_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            form.save()\n            return redirect('employee:view_claim_status')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'employee_portal/edit_claim.html', {'form': form, 'claim_id': claim_id})\n"}, {"file": "employee_portal/models.py", "path": "expense_tracker/employee_portal/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=100)  # Travel, Labor, Management, Equipment\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submission_date = models.DateField(auto_now_add=True)\n    status = models.CharField(max_length=20, default='pending') # approved, rejected, pending\n    reason_for_rejection = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'Claim by {self.employee.username} - {self.claim_type}'"}, {"file": "employee_portal/forms.py", "path": "expense_tracker/employee_portal/forms.py", "code": "from django import forms\nfrom .models import Claim\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['claim_type', 'amount', 'description']\n"}, {"file": "admin_portal/urls.py", "path": "expense_tracker/admin_portal/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'admin'\n\nurlpatterns = [\n    path('approve/<int:claim_id>/', views.approve_claim, name='approve_claim'), # Approve Claim\n    path('reject/<int:claim_id>/', views.reject_claim, name='reject_claim'), # Reject Claim with Reason\n    path('details/<int:claim_id>/', views.view_claim_details, name='view_claim_details'), # View Claim Details\n    path('search/', views.search_claims, name='search_claims'), # Search and Filter Claims\n    path('', views.admin_dashboard, name='admin_dashboard'), # Admin Dashboard\n]"}, {"file": "admin_portal/views.py", "path": "expense_tracker/admin_portal/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom employee_portal.models import Claim\nfrom django.contrib.auth.decorators import user_passes_test\nfrom django.contrib.auth.models import User\n\ndef is_accounting_admin(user):\n    return user.is_staff # Replace with your actual admin check\n\n@user_passes_test(is_accounting_admin)\ndef admin_dashboard(request):\n    claims = Claim.objects.all()\n    return render(request, 'admin_portal/admin_dashboard.html', {'claims': claims})\n\n\n@user_passes_test(is_accounting_admin)\ndef approve_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    claim.status = 'approved'\n    claim.save()\n    return redirect('admin:admin_dashboard')\n\n@user_passes_test(is_accounting_admin)\ndef reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    if request.method == 'POST':\n        reason = request.POST.get('reason')\n        claim.status = 'rejected'\n        claim.reason_for_rejection = reason\n        claim.save()\n        return redirect('admin:admin_dashboard')\n    return render(request, 'admin_portal/reject_claim.html', {'claim': claim})\n\n@user_passes_test(is_accounting_admin)\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    return render(request, 'admin_portal/claim_details.html', {'claim': claim})\n\n@user_passes_test(is_accounting_admin)\ndef search_claims(request):\n    search_term = request.GET.get('q')\n    claims = Claim.objects.all()\n    if search_term:\n        claims = claims.filter(description__icontains=search_term) #Example filter on description\n    return render(request, 'admin_portal/admin_dashboard.html', {'claims': claims})\n"}, {"file": "budget_control/urls.py", "path": "expense_tracker/budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'budget'\n\nurlpatterns = [\n    path('analyze/', views.analyze_expense_balances, name='analyze_expense_balances'), # Analyze Expense Balances\n    path('reports/', views.generate_reports, name='generate_reports'), # Generate Reports\n    path('limits/', views.set_budget_limits, name='set_budget_limits'), # Set Budget Limits\n    path('alerts/', views.send_budget_alerts, name='send_budget_alerts'), # Send Budget Alerts\n]"}, {"file": "budget_control/views.py", "path": "expense_tracker/budget_control/views.py", "code": "from django.shortcuts import render\nfrom django.contrib.auth.decorators import user_passes_test\nfrom employee_portal.models import Claim\n\ndef is_accounting_admin(user):\n    return user.is_staff # Replace with your actual admin check\n\n@user_passes_test(is_accounting_admin)\ndef analyze_expense_balances(request):\n    # Logic to analyze expense balances across categories\n    # Example: Calculate total expenses per claim type\n    expense_data = Claim.objects.values('claim_type').annotate(total_amount=Sum('amount'))\n    return render(request, 'budget_control/analyze_expenses.html', {'expense_data': expense_data})\n\n@user_passes_test(is_accounting_admin)\ndef generate_reports(request):\n    # Logic to generate financial reports\n    # Example: Create a report of all claims within a date range\n    #This is a placeholder, you would need to implement actual report generation logic\n    return render(request, 'budget_control/generate_reports.html')\n\n@user_passes_test(is_accounting_admin)\ndef set_budget_limits(request):\n    # Logic to set budget limits for expense categories\n    if request.method == 'POST':\n        #Get budget limit data and store it (e.g. in database)\n        pass\n    return render(request, 'budget_control/set_budget_limits.html')\n\n\n@user_passes_test(is_accounting_admin)\ndef send_budget_alerts(request):\n    # Logic to send alerts when budget limits are near or exceeded\n    #This is a placeholder, you would need to implement actual alert sending logic\n    return render(request, 'budget_control/send_budget_alerts.html')\n\nfrom django.db.models import Sum"}], "13": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, blank=True)\n    company = models.CharField(max_length=255, blank=True)\n    phone_number = models.CharField(max_length=20, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name}'"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\ndef home(request):\n    return render(request, 'home.html')\n\n# Customer Management\ndef add_customer(request):\n    return HttpResponse(\"Add Customer\")\n\ndef edit_customer(request, customer_id):\n    return HttpResponse(\"Edit Customer\")\n\ndef delete_customer(request, customer_id):\n    return HttpResponse(\"Delete Customer\")\n\ndef view_customer(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    return render(request, 'view_customer.html', {'customer': customer})\n\n\n# Product Management\ndef add_product(request):\n    return HttpResponse(\"Add Product\")\n\ndef edit_product(request, product_id):\n    return HttpResponse(\"Edit Product\")\n\ndef delete_product(request, product_id):\n    return HttpResponse(\"Delete Product\")\n\ndef view_product(request, product_id):\n    return HttpResponse(\"View Product\")\n\n# Purchase Records\ndef add_purchase_record(request):\n    return HttpResponse(\"Add Purchase Record\")\n\ndef edit_purchase_record(request, purchase_id):\n    return HttpResponse(\"Edit Purchase Record\")\n\ndef delete_purchase_record(request, purchase_id):\n    return HttpResponse(\"Delete Purchase Record\")\n\ndef view_purchase_record(request, purchase_id):\n    return HttpResponse(\"View Purchase Record\")\n\n# Preferred Products Management\ndef add_preferred_product(request, customer_id):\n    return HttpResponse(\"Add Preferred Product\")\n\ndef edit_preferred_product(request, customer_id):\n    return HttpResponse(\"Edit Preferred Product\")\n\ndef delete_preferred_product(request, customer_id, product_id):\n    return HttpResponse(\"Delete Preferred Product\")\n\ndef view_preferred_products(request, customer_id):\n    return HttpResponse(\"View Preferred Products\")\n\n# Sales Analysis\ndef generate_sales_report(request):\n    return HttpResponse(\"Generate Sales Report\")\n\ndef analyze_sales_trends(request):\n    return HttpResponse(\"Analyze Sales Trends\")\n\ndef product_performance_analysis(request):\n    return HttpResponse(\"Product Performance Analysis\")"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n\n    # Customer Management\n    path('customer/add/', views.add_customer, name='add_customer'),\n    path('customer/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customer/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customer/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n\n    # Product Management\n    path('product/add/', views.add_product, name='add_product'),\n    path('product/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('product/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('product/view/<int:product_id>/', views.view_product, name='view_product'),\n\n    # Purchase Records\n    path('purchase/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchase/edit/<int:purchase_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchase/delete/<int:purchase_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchase/view/<int:purchase_id>/', views.view_purchase_record, name='view_purchase_record'),\n\n    # Preferred Products Management\n    path('preferred/add/<int:customer_id>/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred/edit/<int:customer_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred/delete/<int:customer_id>/<int:product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n\n    # Sales Analysis\n    path('sales/report/', views.generate_sales_report, name='generate_sales_report'),\n    path('sales/trends/', views.analyze_sales_trends, name='analyze_sales_trends'),\n    path('sales/performance/', views.product_performance_analysis, name='product_performance_analysis'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# settings.py\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the System!</h1>\n    <p>This is an overview of the system features.</p>\n</body>\n</html>"}, {"file": "view_customer.html", "path": "templates/view_customer.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>View Customer</title>\n</head>\n<body>\n    <h1>Customer Details</h1>\n    <p>Name: {{ customer.name }}</p>\n    <p>Birthday: {{ customer.birthday }}</p>\n    <p>Age: {{ customer.age }}</p>\n    <p>Sex: {{ customer.sex }}</p>\n    <p>Company: {{ customer.company }}</p>\n    <p>Phone Number: {{ customer.phone_number }}</p>\n</body>\n</html>"}], "14": [{"file": "views.py", "path": "hello_world/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    return render(request, 'hello_world/hello_world.html', {})\n"}, {"file": "urls.py", "path": "hello_world/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('hello/', include('hello_world.urls')),\n]"}, {"file": "hello_world.html", "path": "hello_world/templates/hello_world/hello_world.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            font-family: sans-serif;\n            background-color: #f0f0f0;\n        }\n        .hello-text {\n            font-size: 2em;\n            color: #333;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"hello-text\">Hello World</div>\n</body>\n</html>"}, {"file": "apps.py", "path": "hello_world/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloWorldConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hello_world'\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'hello_world' to INSTALLED_APPS\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello_world',\n]\n\n#Add template directory\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'hello_world/templates'], # Add this line\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nSTATIC_URL = 'static/'\n"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome!</h1>\n    <a href=\"{% url 'helloworld' %}\"><button>Go to HelloWorld</button></a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "templates/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1>HelloWorld</h1>\n</body>\n</html>"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}], "16": [{"file": "input_validation.py", "path": "modules/input_validation.py", "code": "def check_file_existence(filepath):\n    # Implement file existence check logic here\n    pass\n\ndef validate_headers(filepath, expected_headers):\n    # Implement header validation logic here\n    pass\n\ndef validate_time_column(filepath):\n    # Implement time column validation logic here\n    pass\n\ndef validate_data_integrity(filepath):\n    # Implement data integrity validation logic here\n    pass\n\ndef validate_null_value(filepath):\n    # Implement null value validation logic here\n    pass"}, {"file": "data_transformation.py", "path": "modules/data_transformation.py", "code": "def transform_to_two_dimension_table(data):\n    # Implement data transformation logic here\n    pass\n\ndef data_mapping(data):\n    # Implement data mapping logic here\n    pass"}, {"file": "output_creation.py", "path": "modules/output_creation.py", "code": "def create_output_excel_file(filename):\n    # Implement output file creation logic here\n    pass\n\ndef save_table_to_excel(data, filename):\n    # Implement saving table data to excel logic here\n    pass"}, {"file": "main.py", "path": "main.py", "code": "import modules.input_validation as input_validation\nimport modules.data_transformation as data_transformation\nimport modules.output_creation as output_creation\n\ndef main():\n    filepath = 'Spring Semester Subjects.xlsx'\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n\n    # Input File Validation\n    input_validation.check_file_existence(filepath)\n    input_validation.validate_headers(filepath, expected_headers)\n    input_validation.validate_time_column(filepath)\n    input_validation.validate_data_integrity(filepath)\n    input_validation.validate_null_value(filepath)\n\n    # Data Transformation\n    # Assuming you have loaded data into a variable called 'data'\n    data = [] # Placeholder. Replace with actual data loading.\n    transformed_data = data_transformation.transform_to_two_dimension_table(data)\n    mapped_data = data_transformation.data_mapping(transformed_data)\n\n    # Output File Creation\n    output_filename = 'Transformed_Subjects.xlsx'\n    output_creation.create_output_excel_file(output_filename)\n    output_creation.save_table_to_excel(mapped_data, output_filename)\n\nif __name__ == \"__main__\":\n    main()"}], "17": [{"file": "data_preparation.py", "path": "src/data_preparation.py", "code": "import pandas as pd\n\ndef read_dataset(filename):\n    \"\"\"Load the dataset.\n    Args:\n        filename (str): The name of the file.\n    Returns:\n        pandas.DataFrame: The loaded dataset.\n    Raises:\n        FileNotFoundError: If the file does not exist.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {filename}\")\n\n\ndef lag_dependent_variable(df, column_name='result', periods=1):\n    \"\"\"Apply a lag to the dependent variable.\n    Args:\n        df (pandas.DataFrame): The DataFrame.\n        column_name (str): The name of the column to lag.\n        periods (int): The number of periods to lag.\n    Returns:\n        pandas.DataFrame: The DataFrame with the lagged column.\n    \"\"\"\n    df['lagged_result'] = df[column_name].shift(periods=periods)\n    return df\n\n\ndef prepare_independent_variables(df, dependent_variable='lagged_result'):\n    \"\"\"Prepare the independent variables.\n    Args:\n        df (pandas.DataFrame): The DataFrame.\n        dependent_variable (str): The name of the dependent variable.\n    Returns:\n        pandas.DataFrame: DataFrame with independent variables.\n    Raises:\n        ValueError: If null values are found.\n        ValueError: If the DataFrame is empty.\n    \"\"\"\n    if df.isnull().any().any():\n        raise ValueError(\"Null values found in the DataFrame.\")\n    if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n    independent_variables = [col for col in df.columns if col != dependent_variable]\n    return df[independent_variables]\n"}, {"file": "model_creation.py", "path": "src/model_creation.py", "code": "import statsmodels.api as sm\n\ndef create_logistic_model(X, y):\n    \"\"\"Develop a logistic regression model.\n    Args:\n        X (pandas.DataFrame): The independent variables.\n        y (pandas.Series): The dependent variable.\n    Returns:\n        statsmodels.discrete.discrete_model.BinaryResultsWrapper: The fitted logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)  # Add a constant for the intercept\n    model = sm.Logit(y, X)\n    results = model.fit()\n    return results\n\n\ndef generate_model_summary(model):\n    \"\"\"Generate a summary of the logistic model.\n    Args:\n        model (statsmodels.discrete.discrete_model.BinaryResultsWrapper): The fitted logistic regression model.\n    Returns:\n        str: The summary of the model.\n    \"\"\"\n    return model.summary()\n"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\ndef write_summary(summary, filename='Logistic.xlsx'):\n    \"\"\"Output the model summary to a file.\n    Args:\n        summary (str): The model summary.\n        filename (str): The name of the file to write to.\n    \"\"\"\n    df = pd.DataFrame([summary])\n    df.to_excel(filename, index=False)\n"}, {"file": "main.py", "path": "src/main.py", "code": "from src import data_preparation\nfrom src import model_creation\nfrom src import output\n\ndef main():\n    try:\n        # Data Preparation\n        df = data_preparation.read_dataset('Gamedata.xlsx')\n        df = data_preparation.lag_dependent_variable(df)\n        X = data_preparation.prepare_independent_variables(df, dependent_variable='lagged_result')\n        y = df['lagged_result'].dropna()\n        X = X.loc[y.index] # align X index with y index\n\n        # Model Creation\n        model = model_creation.create_logistic_model(X, y)\n        summary = model_creation.generate_model_summary(model)\n\n        # Output\n        output.write_summary(str(summary))\n        print(\"Model summary written to Logistic.xlsx\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "def start_game():\n    pass\n\ndef instructions():\n    pass\n\ndef exit_game():\n    pass\n\ndef main_menu():\n    pass\n"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "def move_player(room):\n    pass\n\ndef look_around(room):\n    pass\n\ndef pick_item(room):\n    pass\n\ndef check_inventory(player):\n    pass\n"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "def parse_command(command, game_state):\n    pass\n\ndef update_game_state(game_state, action):\n    pass\n"}, {"file": "help_and_support.py", "path": "src/help_and_support.py", "code": "def display_help():\n    pass\n"}, {"file": "game.py", "path": "src/game.py", "code": "from src import main_menu\nfrom src import game_environment\nfrom src import game_logic\nfrom src import help_and_support\n\ndef main():\n    pass\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "player.py", "path": "src/player.py", "code": "class Player:\n    def __init__(self):\n        pass"}, {"file": "room.py", "path": "src/room.py", "code": "class Room:\n    def __init__(self, name, description):\n        pass"}], "19": [{"file": "batch_program.py", "path": "batch_program.py", "code": "# batch_program.py\n\n# Import necessary libraries\n\n\ndef ReadDeathlistData():\n    \"\"\"Load and read data from the 'Deathlist.csv' file.\"\"\"\n    pass\n\n\ndef ProcessData():\n    \"\"\"Process the dataset to structure data appropriately for weekly analysis.\"\"\"\n    pass\n\n\ndef CalculateWeeklyDeaths():\n    \"\"\"Aggregate the data to calculate the number of deaths per week.\"\"\"\n    pass\n\n\ndef GenerateHistogram():\n    \"\"\"Create a histogram depicting the weekly deaths calculated from the dataset.\"\"\"\n    pass\n\n\ndef OutputHistogram():\n    \"\"\"Print or display the generated histogram to the user.\"\"\"\n    pass\n\n\ndef ValidateDataset():\n    \"\"\"Validate the dataset to ensure it contains the required data and format before processing.\"\"\"\n    pass\n\n\ndef main():\n    # Main function to orchestrate the batch program\n    ReadDeathlistData()\n    ProcessData()\n    CalculateWeeklyDeaths()\n    GenerateHistogram()\n    OutputHistogram()\n    #Optional ValidateDataset()\n\nif __name__ == \"__main__\":\n    main()\n"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    author = models.CharField(max_length=100, default=\"Author\")\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=100)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.blog_post.title}'"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import BlogPost, Category, Comment\nfrom django.core.paginator import Paginator, EmptyPage, PageNotAnInteger\nfrom django.db.models import Q\nfrom django.contrib import messages\nfrom django.contrib.auth.decorators import login_required\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5]\n    context = {'latest_posts': latest_posts}\n    return render(request, 'blog/home.html', context)\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all().order_by('-publication_date')\n    context = {'post': post, 'comments': comments}\n    return render(request, 'blog/blog_post_detail.html', context)\n\n@login_required\ndef add_post(request):\n    return render(request, 'blog/add_post.html')\n\n@login_required\ndef manage_post(request):\n    posts = BlogPost.objects.all().order_by('-publication_date')\n    context = {'posts': posts}\n    return render(request, 'blog/manage_post.html', context)\n\n@login_required\ndef manage_comments(request):\n    comments = Comment.objects.all().order_by('-publication_date')\n    context = {'comments': comments}\n    return render(request, 'blog/manage_comments.html', context)\n\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\n\ndef categories(request):\n    categories = Category.objects.all()\n    context = {'categories': categories}\n    return render(request, 'blog/categories.html', context)\n\n\ndef archive(request):\n    posts = BlogPost.objects.all().order_by('-publication_date')\n    context = {'posts': posts}\n    return render(request, 'blog/archive.html', context)\n\n\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        posts = BlogPost.objects.filter(Q(title__icontains=query) | Q(content__icontains=query))\n    else:\n        posts = BlogPost.objects.all()\n    context = {'posts': posts, 'query': query}\n    return render(request, 'blog/search.html', context)\n\n\ndef category_detail(request, category_name):\n    category = get_object_or_404(Category, name=category_name)\n    posts = BlogPost.objects.filter(category=category)\n    context = {'category': category, 'posts': posts}\n    return render(request, 'blog/category_detail.html', context)"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('category/<str:category_name>/', views.category_detail, name='category_detail'),\n    path('archive/', views.archive, name='archive'),\n    path('search/', views.search, name='search'),\n    path('add_post/', views.add_post, name='add_post'),\n    path('manage_post/', views.manage_post, name='manage_post'),\n    path('manage_comments/', views.manage_comments, name='manage_comments'),\n]"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']"}, {"file": "admin.py", "path": "blog/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Category, Comment\n\nadmin.site.register(BlogPost)\nadmin.site.register(Category)\nadmin.site.register(Comment)"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'blog' to INSTALLED_APPS\nINSTALLED_APPS = [\n    ...\n    'blog',\n]\n\n# Add MEDIA_URL and MEDIA_ROOT for serving media files (if needed)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')"}, {"file": "base.html", "path": "templates/blog/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Blog</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a>\n        <a href=\"{% url 'about' %}\">About</a>\n        <a href=\"{% url 'categories' %}\">Categories</a>\n        <a href=\"{% url 'archive' %}\">Archive</a>\n        <a href=\"{% url 'add_post' %}\">Add Post</a>\n        <a href=\"{% url 'manage_post' %}\">Manage Post</a>\n        <a href=\"{% url 'manage_comments' %}\">Manage Comments</a>\n        <form action=\"{% url 'search' %}\" method=\"get\">\n            <input type=\"text\" name=\"q\" placeholder=\"Search\">\n            <button type=\"submit\">Search</button>\n        </form>\n    </nav>\n    <main>\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "home.html", "path": "templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>Latest Blog Posts</h1>\n    <ul>\n        {% for post in latest_posts %}\n            <li><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "blog_post_detail.html", "path": "templates/blog/blog_post_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>{{ post.title }}</h1>\n    <p>By {{ post.author }} on {{ post.publication_date }}</p>\n    <p>{{ post.content }}</p>\n\n    <h2>Comments</h2>\n    {% for comment in comments %}\n        <div>\n            <p><strong>{{ comment.author }}</strong>: {{ comment.content }}</p>\n            <small>{{ comment.publication_date }}</small>\n        </div>\n    {% endfor %}\n\n    <!-- Comment Form (If you implement it) -->\n{% endblock %}"}, {"file": "about.html", "path": "templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>About Us</h1>\n    <p>This is a blog about...</p>\n    <!-- Add author information and contact form here -->\n{% endblock %}"}, {"file": "categories.html", "path": "templates/blog/categories.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>Categories</h1>\n    <ul>\n        {% for category in categories %}\n            <li><a href=\"{% url 'category_detail' category_name=category.name %}\">{{ category.name }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "archive.html", "path": "templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>Archive</h1>\n\n    <ul>\n    {% for post in posts %}\n    <li>{{post.title}} - {{post.publication_date}}</li>\n    {% endfor %}\n    </ul>\n\n    <!-- Add date filtering/month links here -->\n{% endblock %}"}, {"file": "search.html", "path": "templates/blog/search.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>Search Results for \"{{ query }}\"</h1>\n\n    {% if posts %}\n        <ul>\n            {% for post in posts %}\n                <li><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></li>\n            {% endfor %}\n        </ul>\n    {% else %}\n        <p>No results found.</p>\n    {% endif %}\n{% endblock %}"}, {"file": "add_post.html", "path": "templates/blog/add_post.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>Add New Post</h1>\n\n    <!-- Add form here -->\n\n{% endblock %}"}, {"file": "manage_post.html", "path": "templates/blog/manage_post.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>Manage Posts</h1>\n\n    <!-- Add form here -->\n        <ul>\n            {% for post in posts %}\n                <li>{{post.title}} - {{post.publication_date}}</li>\n            {% endfor %}\n        </ul>\n\n{% endblock %}"}, {"file": "manage_comments.html", "path": "templates/blog/manage_comments.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>Manage Comments</h1>\n\n    <!-- Add form here -->\n\n{% endblock %}"}, {"file": "category_detail.html", "path": "templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <h1>Category: {{ category.name }}</h1>\n    <ul>\n        {% for post in posts %}\n            <li><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}]}