{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# No model needed for a simple calculator like this, but kept for framework completeness.\n# You could potentially store BMI calculation history here if needed.\n\nclass BMICalculation(models.Model):\n    height = models.FloatField(blank=True, null=True)\n    weight = models.FloatField(blank=True, null=True)\n    bmi = models.FloatField(blank=True, null=True)\n    interpretation = models.CharField(max_length=255, blank=True, null=True)\n    unit_system = models.CharField(max_length=20, blank=True, null=True)  # e.g., 'metric' or 'imperial'\n\n    def __str__(self):\n        return f'BMI: {self.bmi}, Interpretation: {self.interpretation}'"}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\nfrom django.core.validators import MinValueValidator\n\nclass BMIForm(forms.Form):\n    height_feet = forms.IntegerField(required=False, validators=[MinValueValidator(0)], label='Height (Feet)')\n    height_inches = forms.FloatField(required=False, validators=[MinValueValidator(0)], label='Height (Inches)')\n    height_cm = forms.FloatField(required=False, validators=[MinValueValidator(0)], label='Height (cm)')\n\n    weight_lbs = forms.FloatField(required=False, validators=[MinValueValidator(0)], label='Weight (lbs)')\n    weight_kg = forms.FloatField(required=False, validators=[MinValueValidator(0)], label='Weight (kg)')\n\n    unit_system = forms.ChoiceField(choices=[('imperial', 'Feet/Inches & Pounds'), ('metric', 'Centimeters & Kilograms')], label='Unit System')\n\n    def clean(self):\n        cleaned_data = super().clean()\n        unit_system = cleaned_data.get('unit_system')\n\n        if unit_system == 'imperial':\n            if not (cleaned_data.get('height_feet') is not None and cleaned_data.get('weight_lbs') is not None and (cleaned_data.get('height_feet') > 0 or cleaned_data.get('height_inches')>0) and cleaned_data.get('weight_lbs') > 0):\n                raise forms.ValidationError('Please enter height (feet/inches) and weight (lbs).')\n\n        elif unit_system == 'metric':\n            if not (cleaned_data.get('height_cm') is not None and cleaned_data.get('weight_kg') is not None and cleaned_data.get('height_cm') > 0 and cleaned_data.get('weight_kg') > 0):\n                raise forms.ValidationError('Please enter height (cm) and weight (kg).')\n\n        return cleaned_data"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMIForm\n\ndef calculate_bmi(request):\n    bmi = None\n    interpretation = None\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            unit_system = form.cleaned_data['unit_system']\n\n            if unit_system == 'imperial':\n                height_feet = form.cleaned_data['height_feet']\n                height_inches = form.cleaned_data['height_inches']\n                weight_lbs = form.cleaned_data['weight_lbs']\n\n                height_inches_total = (height_feet * 12) + height_inches\n                height_meters = height_inches_total * 0.0254\n                weight_kg = weight_lbs * 0.453592\n\n            elif unit_system == 'metric':\n                height_cm = form.cleaned_data['height_cm']\n                weight_kg = form.cleaned_data['weight_kg']\n                height_meters = height_cm / 100\n\n            try:\n                bmi = weight_kg / (height_meters ** 2)\n            except ZeroDivisionError:\n                bmi = None  # Handle potential zero division error\n                interpretation = 'Invalid input: Height cannot be zero.'\n\n            if bmi:\n                if bmi < 18.5:\n                    interpretation = 'Underweight'\n                elif 18.5 <= bmi < 25:\n                    interpretation = 'Normal weight'\n                elif 25 <= bmi < 30:\n                    interpretation = 'Overweight'\n                else:\n                    interpretation = 'Obese'\n    else:\n        form = BMIForm()\n\n    return render(request, 'bmi_calculator/bmi_calculator.html', {'form': form, 'bmi': bmi, 'interpretation': interpretation})"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1>BMI Calculator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Calculate BMI</button>\n        <button type=\"reset\">Reset</button>\n    </form>\n\n    {% if bmi %}\n        <h2>BMI Result: {{ bmi|floatformat:2 }}</h2>\n        <p>Interpretation: {{ interpretation }}</p>\n    {% endif %}\n</body>\n</html>"}, {"file": "apps.py", "path": "bmi_calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BmiCalculatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bmi_calculator'"}]}