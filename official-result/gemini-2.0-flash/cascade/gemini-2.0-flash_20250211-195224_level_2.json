{"2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\n# You might want to store currency information here if needed.\nclass Currency(models.Model):\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=50)\n    symbol = models.CharField(max_length=5)\n    \n    def __str__(self):\n        return self.code"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .utils import get_exchange_rate\n\ndef home(request):\n    context = {}\n    if request.method == 'POST':\n        base_currency = request.POST.get('base_currency')\n        target_currency = request.POST.get('target_currency')\n        amount = request.POST.get('amount')\n        exchange_rate = get_exchange_rate(base_currency, target_currency)\n        converted_amount = float(amount) * exchange_rate\n        context['base_currency'] = base_currency\n        context['target_currency'] = target_currency\n        context['amount'] = amount\n        context['converted_amount'] = converted_amount\n        context['exchange_rate'] = exchange_rate\n\n    return render(request, 'currency_converter/home.html', context)"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"title\">Currency Converter</h1>\n        <form method=\"post\" class=\"converter-form\" id=\"converterForm\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"base_currency\" class=\"form-label\">Base Currency:</label>\n                <select id=\"base_currency\" name=\"base_currency\" class=\"form-select\">\n                    <option value=\"USD\">USD</option>\n                    <option value=\"EUR\">EUR</option>\n                    <option value=\"GBP\">GBP</option>\n                    <!-- Add more currency options -->\n                </select>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"target_currency\" class=\"form-label\">Target Currency:</label>\n                <select id=\"target_currency\" name=\"target_currency\" class=\"form-select\">\n                    <option value=\"USD\">USD</option>\n                    <option value=\"EUR\">EUR</option>\n                    <option value=\"GBP\">GBP</option>\n                    <!-- Add more currency options -->\n                </select>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"amount\" class=\"form-label\">Amount:</label>\n                <input type=\"number\" id=\"amount\" name=\"amount\" step=\"0.01\" class=\"form-input\">\n            </div>\n\n            <button type=\"submit\" class=\"convert-button\">Convert</button>\n        </form>\n\n        {% if base_currency %}\n        <p class=\"conversion-info\">You are converting {{ amount }} {{ base_currency }} to {{ target_currency }}.</p>\n        {% endif %}\n\n        {% if converted_amount %}\n        <p class=\"result\">Converted Amount: {{ converted_amount }} {{ target_currency }}</p>\n        <p class=\"exchange-rate\">Exchange Rate: {{ exchange_rate }}</p>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "utils.py", "path": "currency_converter/utils.py", "code": "import requests\n\ndef get_exchange_rate(base_currency, target_currency):\n    # Replace with an actual API call to get the exchange rate\n    api_url = f'https://api.exchangerate.host/convert?from={base_currency}&to={target_currency}'\n    response = requests.get(api_url)\n    data = response.json()\n    if data['success']:\n      return data['info']['rate']\n    else:\n      return 1.0 # Placeholder, replace with actual implementation"}, {"file": "apps.py", "path": "currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency\n\nadmin.site.register(Currency)"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": "default_app_config = 'currency_converter.apps.CurrencyConverterConfig'"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'currency_converter/templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'currency_converter/static')] # added this line\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generated_password/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generated_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters + string.digits  # Default to letters and numbers\n\n    generated_password = ''.join(random.choice(characters) for i in range(length))\n\n    return render(request, 'generated_password.html', {'password': generated_password})\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "password_generator/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Password Generator</h1>\n        <p id=\"home-description\" class=\"description\">A simple tool to generate strong passwords.</p>\n        <a id=\"generate-link\" class=\"btn btn-primary\" href=\"{% url 'password_options' %}\">Generate Password</a>\n    </div>\n{% endblock %}"}, {"file": "password_options.html", "path": "password_generator/templates/password_options.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div class=\"container\">\n        <h1 id=\"options-title\" class=\"title\">Password Options</h1>\n        <form id=\"options-form\" action=\"{% url 'generated_password' %}\" method=\"get\">\n            <div class=\"form-group\">\n                <label id=\"length-label\" for=\"length\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" value=\"12\" class=\"form-control\">\n            </div>\n            <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" class=\"form-check-input\">\n                <label id=\"uppercase-label\" for=\"uppercase\" class=\"form-check-label\">Include Uppercase</label>\n            </div>\n            <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" class=\"form-check-input\">\n                <label id=\"lowercase-label\" for=\"lowercase\" class=\"form-check-label\">Include Lowercase</label>\n            </div>\n            <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" class=\"form-check-input\">\n                <label id=\"numbers-label\" for=\"numbers\" class=\"form-check-label\">Include Numbers</label>\n            </div>\n            <div class=\"form-check\">\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" class=\"form-check-input\">\n                <label id=\"symbols-label\" for=\"symbols\" class=\"form-check-label\">Include Symbols</label>\n            </div>\n            <button id=\"generate-button\" type=\"submit\" class=\"btn btn-primary\">Generate Password</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "generated_password.html", "path": "password_generator/templates/generated_password.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div class=\"container\">\n        <h1 id=\"generated-title\" class=\"title\">Generated Password</h1>\n        <p id=\"password\" class=\"password-text\">{{ password }}</p>\n        <button id=\"copy-button\" class=\"btn btn-secondary\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n        <script>\n            function copyToClipboard() {\n                var passwordText = document.getElementById(\"password\").innerText;\n                navigator.clipboard.writeText(passwordText)\n                    .then(function() {\n                        alert('Password copied to clipboard!');\n                    })\n                    .catch(function(err) {\n                        console.error('Could not copy password: ', err);\n                    });\n            }\n        </script>\n    </div>\n{% endblock %}"}, {"file": "about.html", "path": "password_generator/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <div class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About</h1>\n        <p id=\"about-description\" class=\"description\">This website is a simple password generator.</p>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "password_generator/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        .container {\n            margin-top: 20px;\n        }\n        .title {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n        .password-text {\n            font-size: 1.5em;\n            margin-bottom: 15px;\n        }\n    </style>\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Password Generator</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n    {% block content %}{% endblock %}\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here' # Replace with a real secret key\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',  # Our app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'password_generator/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'password_generator/static')]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "password_generator/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": "default_app_config = 'password_generator.apps.PasswordGeneratorConfig'"}, {"file": "apps.py", "path": "password_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'"}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}], "5": [{"file": "urls.py", "path": "converter_project/converter_project/urls.py", "code": "from django.urls import path\nfrom converter_app import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "converter_project/converter_app/views.py", "code": "from django.shortcuts import render\nimport markdown\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text, extensions=['fenced_code'])\n        return render(request, 'convert.html', {'html_output': html_output})\n    else:\n        return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "converter_project/converter_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Markdown to HTML Converter!</h1>\n        <p id=\"home-description\" class=\"description\">This tool allows you to convert Markdown text to HTML.</p>\n        <a id=\"convert-link\" class=\"button\" href=\"{% url 'convert' %}\">Convert</a>\n        <a id=\"about-link\" class=\"button\" href=\"{% url 'about' %}\">About</a>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "converter_project/converter_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Convert Markdown to HTML</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"container\">\n        <h1 id=\"convert-title\" class=\"title\">Markdown to HTML Converter</h1>\n        <form id=\"convert-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label id=\"markdown-label\" for=\"markdown_text\">Markdown Input:</label><br>\n                <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"50\"></textarea><br><br>\n            </div>\n            <button id=\"convert-button\" class=\"button\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if html_output %}\n        <div id=\"output-container\" class=\"output\">\n            <h2 id=\"output-title\" class=\"output-title\">HTML Output:</h2>\n            <pre id=\"html-output\" class=\"output-content\">{{ html_output }}</pre>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "converter_project/converter_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Us</h1>\n        <p id=\"about-description\" class=\"description\">This converter was developed by ...</p>\n        <p id=\"about-faq\" class=\"faq\">FAQ: ...</p>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "converter_project/converter_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'converter_app',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'converter_app', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'converter_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'converter_app', 'static')]\n"}, {"file": "urls.py", "path": "converter_project/converter_app/urls.py", "code": "# converter_app/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = []"}, {"file": "wsgi.py", "path": "converter_project/converter_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_project.settings')\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "converter_project/converter_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "converter_project/converter_app/models.py", "code": "from django.db import models\n\n# Create your models here."}], "7": [{"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('reports/', views.reports, name='reports'),\n    path('settings/', views.settings, name='settings'),\n    path('login/', views.user_login, name='login'),\n    path('signup/', views.sign_up, name='signup'),\n    path('logout/', views.user_logout, name='logout'),\n    path('add_category/', views.add_category, name='add_category'),\n    path('edit_category/<int:category_id>/', views.edit_category, name='edit_category'),\n    path('delete_category/<int:category_id>/', views.delete_category, name='delete_category'),\n    path('add_transaction/', views.add_transaction, name='add_transaction'),\n    path('edit_transaction/<int:transaction_id>/', views.edit_transaction, name='edit_transaction'),\n    path('delete_transaction/<int:transaction_id>/', views.delete_transaction, name='delete_transaction'),\n]"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.forms import AuthenticationForm, UserCreationForm\nfrom django.contrib.auth.decorators import login_required\nfrom .forms import CategoryForm, TransactionForm\nfrom .models import Category, Transaction\nfrom django.db.models import Sum\n\n@login_required\ndef home(request):\n    # View Dashboard\n    total_income = Transaction.objects.filter(user=request.user, amount__gt=0).aggregate(Sum('amount'))['amount__sum'] or 0\n    total_expense = Transaction.objects.filter(user=request.user, amount__lt=0).aggregate(Sum('amount'))['amount__sum'] or 0\n\n    context = {\n        'total_income': total_income,\n        'total_expense': abs(total_expense),\n    }\n    return render(request, 'home.html', context)\n\n@login_required\ndef balance_tracker(request):\n    # View Balance Chart, Add Transaction, Filter Transactions, View Balance Structure Chart, Edit Transaction, Delete Transaction\n    transactions = Transaction.objects.filter(user=request.user).order_by('-date')\n    context = {'transactions': transactions}\n    return render(request, 'balance_tracker.html', context)\n\n@login_required\ndef reports(request):\n    # Generate Monthly Report, Export Data\n    return render(request, 'reports.html')\n\n@login_required\ndef settings(request):\n    # Update Profile, Add Category, Edit Category, Delete Category, List Category\n    categories = Category.objects.filter(user=request.user)\n    context = {'categories': categories}\n    return render(request, 'settings.html', context)\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('home')\n        else:\n            return render(request, 'login.html', {'form': form, 'error': 'Invalid username or password.'})\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\n\ndef sign_up(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\n@login_required\ndef user_logout(request):\n    logout(request)\n    return redirect('login')\n\n@login_required\ndef add_category(request):\n    if request.method == 'POST':\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            category = form.save(commit=False)\n            category.user = request.user\n            category.save()\n            return redirect('settings')\n    else:\n        form = CategoryForm()\n    return render(request, 'add_category.html', {'form': form})\n\n@login_required\ndef edit_category(request, category_id):\n    category = get_object_or_404(Category, pk=category_id, user=request.user)\n    if request.method == 'POST':\n        form = CategoryForm(request.POST, instance=category)\n        if form.is_valid():\n            form.save()\n            return redirect('settings')\n    else:\n        form = CategoryForm(instance=category)\n    return render(request, 'edit_category.html', {'form': form, 'category_id': category_id})\n\n@login_required\ndef delete_category(request, category_id):\n    category = get_object_or_404(Category, pk=category_id, user=request.user)\n    category.delete()\n    return redirect('settings')\n\n@login_required\ndef add_transaction(request):\n    if request.method == 'POST':\n        form = TransactionForm(request.POST)\n        if form.is_valid():\n            transaction = form.save(commit=False)\n            transaction.user = request.user\n            transaction.save()\n            return redirect('balance_tracker')\n    else:\n        form = TransactionForm()\n        form.fields['category'].queryset = Category.objects.filter(user=request.user)\n    return render(request, 'add_transaction.html', {'form': form})\n\n@login_required\ndef edit_transaction(request, transaction_id):\n    transaction = get_object_or_404(Transaction, pk=transaction_id, user=request.user)\n    if request.method == 'POST':\n        form = TransactionForm(request.POST, instance=transaction)\n        if form.is_valid():\n            form.save()\n            return redirect('balance_tracker')\n    else:\n        form = TransactionForm(instance=transaction)\n        form.fields['category'].queryset = Category.objects.filter(user=request.user)\n    return render(request, 'edit_transaction.html', {'form': form, 'transaction_id': transaction_id})\n\n@login_required\ndef delete_transaction(request, transaction_id):\n    transaction = get_object_or_404(Transaction, pk=transaction_id, user=request.user)\n    transaction.delete()\n    return redirect('balance_tracker')"}, {"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return self.description"}, {"file": "forms.py", "path": "budget_control/forms.py", "code": "from django import forms\nfrom .models import Category, Transaction\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        model = Transaction\n        fields = ['date', 'description', 'amount', 'category']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'})\n        }\n\n    def __init__(self, *args, **kwargs):\n        user = kwargs.pop('user', None)\n        super().__init__(*args, **kwargs)\n        if user:\n            self.fields['category'].queryset = Category.objects.filter(user=user)"}, {"file": "settings.py", "path": "budget_control_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget_control', # Add this line\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'], # Add this line\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\n# Add login redirect URL\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'login'"}, {"file": "urls.py", "path": "budget_control_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget_control.urls')),\n]"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"home-page\" class=\"container mt-5\">\n    <h1 id=\"home-title\" class=\"mb-4\">Welcome to Your Budget Control Dashboard</h1>\n\n    <div id=\"summary-section\" class=\"card\">\n        <div class=\"card-body\">\n            <h2 class=\"card-title\">Summary</h2>\n            <p class=\"card-text\">Total Income: ${{ total_income }}</p>\n            <p class=\"card-text\">Total Expenses: ${{ total_expense }}</p>\n            <p class=\"card-text\">Net Balance: ${{ total_income - total_expense }}</p>\n        </div>\n    </div>\n\n    <div id=\"navigation-section\" class=\"mt-4\">\n        <a href=\"{% url 'balance_tracker' %}\" class=\"btn btn-primary\">Balance Tracker</a>\n        <a href=\"{% url 'reports' %}\" class=\"btn btn-secondary\">Reports</a>\n        <a href=\"{% url 'settings' %}\" class=\"btn btn-info\">Settings</a>\n    </div>\n</div>\n{% endblock %}"}, {"file": "balance_tracker.html", "path": "templates/balance_tracker.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"balance-tracker-page\" class=\"container mt-5\">\n    <h1 id=\"balance-tracker-title\" class=\"mb-4\">Balance Tracker</h1>\n\n    <a href=\"{% url 'add_transaction' %}\" class=\"btn btn-success mb-3\">Add Transaction</a>\n\n    <table id=\"transaction-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Description</th>\n                <th>Amount</th>\n                <th>Category</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for transaction in transactions %}\n            <tr>\n                <td>{{ transaction.date }}</td>\n                <td>{{ transaction.description }}</td>\n                <td>{{ transaction.amount }}</td>\n                <td>{{ transaction.category }}</td>\n                <td>\n                    <a href=\"{% url 'edit_transaction' transaction.id %}\" class=\"btn btn-sm btn-primary\">Edit</a>\n                    <a href=\"{% url 'delete_transaction' transaction.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "reports.html", "path": "templates/reports.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"reports-page\" class=\"container mt-5\">\n    <h1 id=\"reports-title\" class=\"mb-4\">Reports</h1>\n\n    <p>This is the reports page. You can generate monthly reports and export data here.</p>\n</div>\n{% endblock %}"}, {"file": "settings.html", "path": "templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"settings-page\" class=\"container mt-5\">\n    <h1 id=\"settings-title\" class=\"mb-4\">Settings</h1>\n\n    <h2>Category Management</h2>\n    <a href=\"{% url 'add_category' %}\" class=\"btn btn-success mb-3\">Add Category</a>\n\n    <table id=\"category-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for category in categories %}\n            <tr>\n                <td>{{ category.name }}</td>\n                <td>\n                    <a href=\"{% url 'edit_category' category.id %}\" class=\"btn btn-sm btn-primary\">Edit</a>\n                    <a href=\"{% url 'delete_category' category.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                </td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n</div>\n{% endblock %}"}, {"file": "login.html", "path": "templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"login-page\" class=\"container mt-5\">\n    <h1 id=\"login-title\" class=\"mb-4\">Login</h1>\n\n    {% if error %}\n    <div class=\"alert alert-danger\" role=\"alert\">\n        {{ error }}\n    </div>\n    {% endif %}\n\n    <form id=\"login-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">Login</button>\n    </form>\n\n    <p class=\"mt-3\">Don't have an account? <a href=\"{% url 'signup' %}\">Sign up</a></p>\n</div>\n{% endblock %}"}, {"file": "signup.html", "path": "templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"signup-page\" class=\"container mt-5\">\n    <h1 id=\"signup-title\" class=\"mb-4\">Sign Up</h1>\n\n    <form id=\"signup-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">Sign Up</button>\n    </form>\n\n    <p class=\"mt-3\">Already have an account? <a href=\"{% url 'login' %}\">Login</a></p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Budget Control</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                {% if user.is_authenticated %}\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'balance_tracker' %}\">Balance Tracker</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'reports' %}\">Reports</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'settings' %}\">Settings</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n                </li>\n                {% else %}\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n                </li>\n                {% endif %}\n            </ul>\n        </div>\n    </nav>\n\n    <div id=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n"}, {"file": "add_category.html", "path": "templates/add_category.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"add-category-page\" class=\"container mt-5\">\n    <h1 id=\"add-category-title\" class=\"mb-4\">Add Category</h1>\n\n    <form id=\"add-category-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">Add Category</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "edit_category.html", "path": "templates/edit_category.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"edit-category-page\" class=\"container mt-5\">\n    <h1 id=\"edit-category-title\" class=\"mb-4\">Edit Category</h1>\n\n    <form id=\"edit-category-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">Update Category</button>\n        <a href=\"{% url 'settings' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "add_transaction.html", "path": "templates/add_transaction.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"add-transaction-page\" class=\"container mt-5\">\n    <h1 id=\"add-transaction-title\" class=\"mb-4\">Add Transaction</h1>\n\n    <form id=\"add-transaction-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">Add Transaction</button>\n    </form>\n</div>\n{% endblock %}"}, {"file": "edit_transaction.html", "path": "templates/edit_transaction.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div id=\"edit-transaction-page\" class=\"container mt-5\">\n    <h1 id=\"edit-transaction-title\" class=\"mb-4\">Edit Transaction</h1>\n\n    <form id=\"edit-transaction-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\">Update Transaction</button>\n        <a href=\"{% url 'balance_tracker' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "styles.css", "path": "static/css/styles.css", "code": "/* Add your custom styles here */\nbody {\n    font-family: sans-serif;\n}\n\n.container {\n    max-width: 800px;\n    margin: 0 auto;\n}\n\n.navbar {\n    margin-bottom: 20px;\n}\n\n.alert {\n    margin-bottom: 20px;\n}\n\n.btn {\n    margin-right: 10px;\n}"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom datetime import datetime\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    today = datetime.now()\n    events = Event.objects.filter(start_time__month=today.month, start_time__year=today.year).order_by('start_time')\n    return render(request, 'calendar_app/home.html', {'current_date': today, 'events': events})\n\ndef calendar_view(request, year=None, month=None):\n    today = datetime.now()\n\n    if year is None or month is None:\n        year = today.year\n        month = today.month\n    else:\n        year = int(year)\n        month = int(month)\n\n    events = Event.objects.filter(start_time__month=month, start_time__year=year).order_by('start_time')\n    return render(request, 'calendar_app/calendar.html', {'year': year, 'month': month, 'events': events, 'current_date': today})\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/add_event.html', {'form': form})\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendar_app/event_details.html', {'event': event})\n\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event.id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/edit_event.html', {'form': form, 'event': event})\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'calendar_app/delete_event.html', {'event': event})\n\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query)\n    return render(request, 'calendar_app/search_events.html', {'events': events, 'query': query})\n\n\ndef list_all_events(request):\n    events = Event.objects.all().order_by('start_time')\n    return render(request, 'calendar_app/list_all_events.html', {'events': events})\n\ndef help_page(request):\n    return render(request, 'calendar_app/help.html')"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_with_date'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('events/', views.list_all_events, name='list_all_events'),\n    path('help/', views.help_page, name='help'),\n]"}, {"file": "home.html", "path": "calendar_app/templates/calendar_app/home.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Home</h1>\n        <p id=\"current-date\" class=\"date\">Current Date: {{ current_date }}</p>\n        <div class=\"links\">\n            <a id=\"calendar-link\" class=\"btn btn-primary\" href=\"{% url 'calendar' %}\">View Full Calendar</a>\n            <a id=\"add-event-link\" class=\"btn btn-success\" href=\"{% url 'add_event' %}\">Add New Event</a>\n        </div>\n\n        <h2 id=\"upcoming-events-title\" class=\"subtitle\">Upcoming Events</h2>\n        <ul id=\"event-list\" class=\"list\">\n            {% for event in events %}\n                <li class=\"list-item\">\n                    <a id=\"event-link-{{ event.id }}\" class=\"event-link\" href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}\n                </li>\n            {% empty %}\n                <li class=\"list-item\">No events scheduled for this month.</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar_app/calendar.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"calendar-container\" class=\"container\">\n        <h1 id=\"calendar-title\" class=\"title\">Calendar</h1>\n        <p id=\"current-year-month\" class=\"year-month\">Year: {{ year }}, Month: {{ month }}</p>\n\n        <form id=\"calendar-form\" method=\"get\" action=\"{% url 'calendar' %}\" class=\"form\">\n            <div class=\"form-group\">\n                <label for=\"year\" class=\"form-label\">Year:</label>\n                <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\" class=\"form-control\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"month\" class=\"form-label\">Month:</label>\n                <select id=\"month\" name=\"month\" class=\"form-control\">\n                    {% for i in '123456789AB'|make_list %}\n                        {% with month_num=forloop.counter %}\n                            <option value=\"{{ month_num }}\" {% if month_num == month %}selected{% endif %}>{{ month_num }}</option>\n                        {% endwith %}\n                    {% endfor %}\n                </select>\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary\">Go</button>\n        </form>\n        <a id=\"add-event-link\" class=\"btn btn-success\" href=\"{% url 'add_event' %}\">Add New Event</a>\n\n        <h2 id=\"events-title\" class=\"subtitle\">Events for {{ month }}/{{ year }}</h2>\n        <ul id=\"event-list\" class=\"list\">\n            {% for event in events %}\n                <li class=\"list-item\">\n                    <a id=\"event-link-{{ event.id }}\" class=\"event-link\" href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}\n                </li>\n            {% empty %}\n                <li class=\"list-item\">No events scheduled for this month.</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "add_event.html", "path": "calendar_app/templates/calendar_app/add_event.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"add-event-container\" class=\"container\">\n        <h1 id=\"add-event-title\" class=\"title\">Add Event</h1>\n        <form id=\"add-event-form\" method=\"post\" class=\"form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" class=\"btn btn-success\">Save</button>\n        </form>\n        <a id=\"cancel-link\" class=\"btn btn-secondary\" href=\"{% url 'home' %}\">Cancel</a>\n    </div>\n{% endblock %}"}, {"file": "event_details.html", "path": "calendar_app/templates/calendar_app/event_details.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"event-details-container\" class=\"container\">\n        <h1 id=\"event-details-title\" class=\"title\">Event Details</h1>\n        <h2 id=\"event-title\" class=\"subtitle\">{{ event.title }}</h2>\n        <p id=\"event-description\" class=\"description\">Description: {{ event.description }}</p>\n        <p id=\"event-start-time\" class=\"start-time\">Start Time: {{ event.start_time }}</p>\n        <p id=\"event-end-time\" class=\"end-time\">End Time: {{ event.end_time }}</p>\n        <div class=\"links\">\n            <a id=\"edit-event-link\" class=\"btn btn-primary\" href=\"{% url 'edit_event' event.id %}\">Edit Event</a>\n            <a id=\"delete-event-link\" class=\"btn btn-danger\" href=\"{% url 'delete_event' event.id %}\">Delete Event</a>\n        </div>\n        <a id=\"back-to-home-link\" class=\"btn btn-secondary\" href=\"{% url 'home' %}\">Back to Home</a>\n    </div>\n{% endblock %}"}, {"file": "edit_event.html", "path": "calendar_app/templates/calendar_app/edit_event.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"edit-event-container\" class=\"container\">\n        <h1 id=\"edit-event-title\" class=\"title\">Edit Event</h1>\n        <form id=\"edit-event-form\" method=\"post\" class=\"form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" class=\"btn btn-success\">Save</button>\n        </form>\n        <a id=\"cancel-link\" class=\"btn btn-secondary\" href=\"{% url 'event_details' event.id %}\">Cancel</a>\n    </div>\n{% endblock %}"}, {"file": "delete_event.html", "path": "calendar_app/templates/calendar_app/delete_event.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"delete-event-container\" class=\"container\">\n        <h1 id=\"delete-event-title\" class=\"title\">Delete Event</h1>\n        <p id=\"confirmation-message\" class=\"message\">Are you sure you want to delete \"{{ event.title }}\"?</p>\n        <form id=\"delete-event-form\" method=\"post\" class=\"form\">\n            {% csrf_token %}\n            <button type=\"submit\" class=\"btn btn-danger\">Delete</button>\n        </form>\n        <a id=\"cancel-link\" class=\"btn btn-secondary\" href=\"{% url 'event_details' event.id %}\">Cancel</a>\n    </div>\n{% endblock %}"}, {"file": "search_events.html", "path": "calendar_app/templates/calendar_app/search_events.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"search-results-container\" class=\"container\">\n        <h1 id=\"search-results-title\" class=\"title\">Search Results</h1>\n        <h2 id=\"search-query\" class=\"subtitle\">Search results for: {{ query }}</h2>\n\n        <ul id=\"event-list\" class=\"list\">\n            {% for event in events %}\n                <li class=\"list-item\">\n                    <a id=\"event-link-{{ event.id }}\" class=\"event-link\" href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}\n                </li>\n            {% empty %}\n                <li class=\"list-item\">No events found matching your search.</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "list_all_events.html", "path": "calendar_app/templates/calendar_app/list_all_events.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"all-events-container\" class=\"container\">\n        <h1 id=\"all-events-title\" class=\"title\">All Events</h1>\n\n        <ul id=\"event-list\" class=\"list\">\n            {% for event in events %}\n                <li class=\"list-item\">\n                    <a id=\"event-link-{{ event.id }}\" class=\"event-link\" href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}</li>\n            {% empty %}\n                <li class=\"list-item\">No events found.</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "help.html", "path": "calendar_app/templates/calendar_app/help.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <div id=\"help-container\" class=\"container\">\n        <h1 id=\"help-title\" class=\"title\">Help</h1>\n        <h2 id=\"faq-title\" class=\"subtitle\">FAQ</h2>\n        <p id=\"faq-content\" class=\"content\">Content for Frequently Asked Questions here</p>\n\n        <h2 id=\"user-guide-title\" class=\"subtitle\">User Guide</h2>\n        <p id=\"user-guide-content\" class=\"content\">Comprehensive instructions on how to use this calendar application.</p>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "calendar_app/templates/calendar_app/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar App</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        .container {\n            margin-top: 20px;\n        }\n        .title {\n            font-size: 2em;\n            margin-bottom: 20px;\n        }\n        .subtitle {\n            font-size: 1.5em;\n            margin-bottom: 10px;\n        }\n        .list {\n            list-style: none;\n            padding: 0;\n        }\n        .list-item {\n            margin-bottom: 5px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"container\">\n            <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Calendar App</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'calendar' %}\">Calendar</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'list_all_events' %}\">All Events</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'search_events' %}?q=\">Search</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'help' %}\">Help</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n    <hr>\n    <div id=\"content-container\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "calendar_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "calendar_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\nfrom channels.routing import ProtocolTypeRouter, URLRouter\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "calendar_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "__init__.py", "path": "calendar_project/__init__.py", "code": ""}], "9": [{"file": "urls.py", "path": "chatbot_project/chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('support/', views.support, name='support'),\n    #path('about/', views.about, name='about'), # optional\n]"}, {"file": "views.py", "path": "chatbot_project/chatbot_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'chatbot_app/home.html')\n\ndef features(request):\n    return render(request, 'chatbot_app/features.html')\n\ndef pricing(request):\n    if request.method == 'POST':\n        # Process contact sales form\n        pass\n    return render(request, 'chatbot_app/pricing.html')\n\n#def about(request):\n#    return render(request, 'chatbot_app/about.html') # optional\n\ndef support(request):\n    if request.method == 'POST':\n        # Process support form\n        pass\n    return render(request, 'chatbot_app/support.html')\n"}, {"file": "home.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/home.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n    <h1 id=\"home-title\" class=\"home-title\">Product Overview</h1>\n    <p id=\"home-description\" class=\"home-description\">Display a brief overview of the AI Chatbot's capabilities and benefits.</p>\n{% endblock %}"}, {"file": "features.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/features.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n    <h1 id=\"features-title\" class=\"features-title\">Key Features</h1>\n    <p id=\"features-description\" class=\"features-description\">Showcase the main features of the AI Chatbot.</p>\n{% endblock %}"}, {"file": "pricing.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/pricing.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n    <h1 id=\"pricing-title\" class=\"pricing-title\">Pricing Plans</h1>\n    <p id=\"pricing-description\" class=\"pricing-description\">Display different pricing plans and subscription options.</p>\n\n    <h2 id=\"contact-sales-title\" class=\"contact-sales-title\">Contact Sales</h2>\n    <form id=\"contact-sales-form\" class=\"contact-sales-form\" method=\"post\">\n        {% csrf_token %}\n        <!-- Contact form fields here -->\n        <label for=\"name\" class=\"contact-label\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" class=\"contact-input\"><br><br>\n        <label for=\"email\" class=\"contact-label\">Email:</label>\n        <input type=\"email\" id=\"email\" name=\"email\" class=\"contact-input\"><br><br>\n        <label for=\"message\" class=\"contact-label\">Message:</label>\n        <textarea id=\"message\" name=\"message\" class=\"contact-textarea\"></textarea><br><br>\n        <button id=\"contact-sales-button\" class=\"contact-sales-button\" type=\"submit\">Contact Sales</button>\n    </form>\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/support.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n    <h1 id=\"faq-title\" class=\"faq-title\">FAQ</h1>\n    <p id=\"faq-description\" class=\"faq-description\">Provide answers to frequently asked questions about the AI Chatbot.</p>\n\n    <h2 id=\"support-form-title\" class=\"support-form-title\">Support</h2>\n    <form id=\"support-form\" class=\"support-form\" method=\"post\">\n        {% csrf_token %}\n        <!-- Support form fields here -->\n        <label for=\"subject\" class=\"support-label\">Subject:</label>\n        <input type=\"text\" id=\"subject\" name=\"subject\" class=\"support-input\"><br><br>\n        <label for=\"description\" class=\"support-label\">Description:</label>\n        <textarea id=\"description\" name=\"description\" class=\"support-textarea\"></textarea><br><br>\n        <button id=\"support-button\" class=\"support-button\" type=\"submit\">Submit</button>\n    </form>\n{% endblock %}"}, {"file": "base.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot</title>\n    <link rel=\"stylesheet\" href=\"../../static/chatbot_app/style.css\">\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a> |\n        <a id=\"nav-features\" class=\"nav-link\" href=\"{% url 'features' %}\">Features</a> |\n        <a id=\"nav-pricing\" class=\"nav-link\" href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a id=\"nav-support\" class=\"nav-link\" href=\"{% url 'support' %}\">Support</a>\n        {# optional: | <a href=\"{% url 'about' %}\">About Us</a> #}\n    </nav>\n    <hr>\n    <div id=\"content\" class=\"content\">\n        {% block content %}\n        {% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "chatbot_project/chatbot_app/static/chatbot_app/style.css", "code": "/* Basic styling for the site */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\n.main-nav {\n    margin-bottom: 20px;\n}\n\n.nav-link {\n    text-decoration: none;\n    color: blue;\n    margin-right: 10px;\n}\n\n.home-title, .features-title, .pricing-title, .faq-title {\n    color: #333;\n}\n\n.home-description, .features-description, .pricing-description, .faq-description {\n    line-height: 1.6;\n}\n\n.contact-sales-form, .support-form {\n    margin-top: 20px;\n}\n\n.contact-label, .support-label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.contact-input, .support-input, .contact-textarea, .support-textarea {\n    width: 300px;\n    padding: 8px;\n    margin-bottom: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\n.contact-textarea, .support-textarea {\n    height: 100px;\n}\n\n.contact-sales-button, .support-button {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 15px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.content {\n    margin-top: 20px;\n}\n"}, {"file": "settings.py", "path": "chatbot_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'chatbot_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'chatbot_app/static'),\n]\n"}, {"file": "urls.py", "path": "chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),\n]"}, {"file": "wsgi.py", "path": "chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "manage.py", "path": "chatbot_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "11": [{"file": "manage.py", "path": "/", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_tool.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "settings.py", "path": "review_tool/", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_tool.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_tool.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "review_tool/", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review_app.urls')),\n]"}, {"file": "__init__.py", "path": "review_tool/", "code": "default_app_config = 'review_app.apps.ReviewAppConfig'"}, {"file": "models.py", "path": "review_app/", "code": "from django.db import models\n\nclass TestCode(models.Model):\n    page = models.CharField(max_length=255)\n    function_name = models.CharField(max_length=255)\n    description = models.TextField()\n    required = models.BooleanField()\n    file_name = models.CharField(max_length=255, blank=True, null=True)\n    file_path = models.CharField(max_length=255, blank=True, null=True)\n    code = models.TextField(blank=True, null=True)\n    STATUS_CHOICES = [\n        ('Pass', 'Pass'),\n        ('Fail', 'Fail'),\n        ('Select', 'Select'),\n    ]\n    status = models.CharField(\n        max_length=20,\n        choices=STATUS_CHOICES,\n        default='Select',\n    )\n    review_notes = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.page} - {self.function_name}'\n"}, {"file": "forms.py", "path": "review_app/", "code": "from django import forms\nfrom .models import TestCode\n\nclass TestCodeReviewForm(forms.ModelForm):\n    class Meta:\n        model = TestCode\n        fields = ['status', 'review_notes']\n\nclass ImportJSONForm(forms.Form):\n    json_file = forms.FileField()\n"}, {"file": "views.py", "path": "review_app/", "code": "import json\nfrom django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .models import TestCode\nfrom .forms import TestCodeReviewForm, ImportJSONForm\n\ndef home_view(request):\n    test_codes = TestCode.objects.all()\n    welcome_message = \"Welcome to the Review Tool!\"\n    if request.method == 'POST':\n        form = TestCodeReviewForm(request.POST)\n        if form.is_valid():\n            # Handle form submission here (e.g., update the database)\n            pass # Replace this with your logic\n    else:\n        form = TestCodeReviewForm()\n\n    return render(request, 'review_app/home.html', {\n        'test_codes': test_codes,\n        'welcome_message': welcome_message,\n        'form': form,  # Pass the form to the template\n    })\n\n\ndef about_view(request):\n    return render(request, 'review_app/about.html')\n\n\ndef import_json_view(request):\n    if request.method == 'POST':\n        form = ImportJSONForm(request.POST, request.FILES)\n        if form.is_valid():\n            json_file = request.FILES['json_file']\n            try:\n                data = json.load(json_file)\n                for item in data:\n                    TestCode.objects.create(**item)\n                return HttpResponse('JSON data imported successfully!')\n            except json.JSONDecodeError:\n                return HttpResponse('Invalid JSON file.')\n        else:\n            return HttpResponse('Form is invalid.')\n    else:\n        form = ImportJSONForm()\n    return render(request, 'review_app/import_json.html', {'form': form})\n"}, {"file": "urls.py", "path": "review_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n    path('import/', views.import_json_view, name='import_json'),\n]"}, {"file": "home.html", "path": "review_app/templates/review_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Review Tool</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"title\">Review Tool</h1>\n    <p id=\"welcome-message\" class=\"message\">{{ welcome_message }}</p>\n\n    <table id=\"test-code-table\" class=\"table\">\n        <thead>\n            <tr>\n                <th>Page</th>\n                <th>Function Name</th>\n                <th>Description</th>\n                <th>Required</th>\n                <th>File Name</th>\n                <th>File Path</th>\n                <th>Code</th>\n                <th>Status</th>\n                <th>Review Notes</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for test_code in test_codes %}\n            <tr id=\"test-code-row-{{ test_code.id }}\" class=\"test-code-row\">\n                <td>{{ test_code.page }}</td>\n                <td>{{ test_code.function_name }}</td>\n                <td>{{ test_code.description }}</td>\n                <td>{{ test_code.required }}</td>\n                <td>{{ test_code.file_name }}</td>\n                <td>{{ test_code.file_path }}</td>\n                <td>{{ test_code.code }}</td>\n                <td>{{ test_code.status }}</td>\n                <td>{{ test_code.review_notes }}</td>\n            </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\n\n    <form id=\"review-form\" method=\"post\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"submit-button\" class=\"button\">Submit Review</button>\n    </form>\n\n    <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"link\">About</a>\n    <a href=\"{% url 'import_json' %}\" id=\"import-link\" class=\"link\">Import JSON</a>\n\n\n</body>\n</html>"}, {"file": "about.html", "path": "review_app/templates/review_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"title\">About This Tool</h1>\n    <p id=\"about-description\" class=\"description\">This is a simple review tool created using Django.</p>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"link\">Home</a>\n</body>\n</html>"}, {"file": "import_json.html", "path": "review_app/templates/review_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Import JSON</title>\n</head>\n<body>\n    <h1 id=\"import-title\" class=\"title\">Import JSON Data</h1>\n\n    <form id=\"import-form\" method=\"post\" enctype=\"multipart/form-data\" class=\"form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id=\"import-button\" class=\"button\">Import</button>\n    </form>\n\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"link\">Home</a>\n</body>\n</html>"}, {"file": "__init__.py", "path": "review_app/", "code": "default_app_config = 'review_app.apps.ReviewAppConfig'"}, {"file": "apps.py", "path": "review_app/", "code": "from django.apps import AppConfig\n\n\nclass ReviewAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'review_app'\n"}, {"file": "admin.py", "path": "review_app/", "code": "from django.contrib import admin\nfrom .models import TestCode\n\nadmin.site.register(TestCode)\n"}], "12": [{"file": "models.py", "path": "expense_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=255, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    description = models.TextField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    submission_date = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=255, default='Pending', choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')])\n    rejection_reason = models.TextField(blank=True, null=True)\n    # Add other relevant fields like receipt, etc.\n\n    def __str__(self):\n        return f'Claim {self.id} - {self.claim_type} - {self.status}'\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=255, unique=True)\n    budget_limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.category} Budget: {self.budget_limit}'\n\n# Consider adding a model for Expense Category to link claims and budgets\n"}, {"file": "views.py", "path": "expense_tracker/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Claim, Budget\nfrom django.contrib import messages\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup_view(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('employee_portal') # Redirect to employee portal after signup\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('employee_portal')  # Redirect to employee portal after login\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n\n@login_required\ndef employee_portal(request):\n    return render(request, 'employee_portal.html')\n\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        claim_type = request.POST.get('claim_type')\n        description = request.POST.get('description')\n        amount = request.POST.get('amount')\n\n        claim = Claim(employee=request.user, claim_type=claim_type, description=description, amount=amount)\n        claim.save()\n        messages.success(request, 'Claim submitted successfully!')\n        return redirect('employee_portal')\n    return render(request, 'submit_claim.html')\n\n\n@login_required\ndef view_claim_status(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'view_claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user, status='Pending')\n\n    if request.method == 'POST':\n        claim.claim_type = request.POST.get('claim_type')\n        claim.description = request.POST.get('description')\n        claim.amount = request.POST.get('amount')\n        claim.save()\n        messages.success(request, 'Claim updated successfully!')\n        return redirect('view_claim_status')\n\n    return render(request, 'edit_claim.html', {'claim': claim})\n\n\n@login_required\ndef admin_portal(request):\n    claims = Claim.objects.all()\n    return render(request, 'admin_portal.html', {'claims': claims})\n\n@login_required\ndef approve_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('admin_portal')\n\n@login_required\ndef reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    if request.method == 'POST':\n        rejection_reason = request.POST.get('rejection_reason')\n        claim.status = 'Rejected'\n        claim.rejection_reason = rejection_reason\n        claim.save()\n        return redirect('admin_portal')\n    return render(request, 'reject_claim.html', {'claim': claim})\n\n@login_required\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    return render(request, 'view_claim_details.html', {'claim': claim})\n\n@login_required\ndef search_claims(request):\n    if request.method == 'GET':\n        query = request.GET.get('q')\n        claims = Claim.objects.filter(description__icontains=query)\n        return render(request, 'admin_portal.html', {'claims': claims})\n    return redirect('admin_portal')\n\n@login_required\ndef budget_control(request):\n  budgets = Budget.objects.all()\n  return render(request, 'budget_control.html', {'budgets': budgets})\n\n@login_required\ndef analyze_expense_balances(request):\n    # Implement logic to analyze balances across categories\n    return HttpResponse(\"Analyze Expense Balances - Under Construction\")\n\n@login_required\ndef generate_reports(request):\n    # Implement report generation logic\n    return HttpResponse(\"Generate Reports - Under Construction\")\n\n@login_required\ndef set_budget_limits(request):\n    if request.method == 'POST':\n        category = request.POST.get('category')\n        budget_limit = request.POST.get('budget_limit')\n        try:\n            budget = Budget.objects.get(category=category)\n            budget.budget_limit = budget_limit\n        except Budget.DoesNotExist:\n            budget = Budget(category=category, budget_limit=budget_limit)\n\n        budget.save()\n        return redirect('budget_control')\n\n    return redirect('budget_control')\n\n@login_required\ndef send_budget_alerts(request):\n    # Implement budget alert logic\n    return HttpResponse(\"Send Budget Alerts - Under Construction\")"}, {"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup_view, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('employee_portal/', views.employee_portal, name='employee_portal'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('view_claim_status/', views.view_claim_status, name='view_claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('admin_portal/', views.admin_portal, name='admin_portal'),\n    path('approve_claim/<int:claim_id>/', views.approve_claim, name='approve_claim'),\n    path('reject_claim/<int:claim_id>/', views.reject_claim, name='reject_claim'),\n    path('view_claim_details/<int:claim_id>/', views.view_claim_details, name='view_claim_details'),\n    path('search_claims/', views.search_claims, name='search_claims'),\n    path('budget_control/', views.budget_control, name='budget_control'),\n    path('analyze_expense_balances/', views.analyze_expense_balances, name='analyze_expense_balances'),\n    path('generate_reports/', views.generate_reports, name='generate_reports'),\n    path('set_budget_limits/', views.set_budget_limits, name='set_budget_limits'),\n    path('send_budget_alerts/', views.send_budget_alerts, name='send_budget_alerts'),\n]"}, {"file": "settings.py", "path": "expense_tracker_project/settings.py", "code": "import os\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expense_tracker', # Add your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_tracker_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')], #Add templates directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'expense_tracker_project.wsgi.application'\n\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Add static directory\n\n\n# Default primary key field type\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'employee_portal'\nLOGOUT_REDIRECT_URL = 'home'\n"}, {"file": "admin.py", "path": "expense_tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim, Budget\n\nadmin.site.register(Claim)\nadmin.site.register(Budget)\n"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Expense Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            padding-top: 56px; /* Adjusted for fixed navbar */\n        }\n        .navbar {\n            background-color: #343a40 !important;\n        }\n        .navbar-brand,\n        .nav-link {\n            color: white !important;\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"navbar\" class=\"navbar navbar-expand-lg navbar-dark fixed-top\">\n        <a id=\"navbarBrand\" class=\"navbar-brand\" href=\"{% url 'home' %}\">Expense Tracker</a>\n        <button id=\"navbarToggler\" class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav ml-auto\">\n                {% if user.is_authenticated %}\n                    <li id=\"logoutNavItem\" class=\"nav-item\"><a id=\"logoutLink\" class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a></li>\n                {% else %}\n                    <li id=\"loginNavItem\" class=\"nav-item\"><a id=\"loginLink\" class=\"nav-link\" href=\"{% url 'login' %}\">Login</a></li>\n                    <li id=\"signupNavItem\" class=\"nav-item\"><a id=\"signupLink\" class=\"nav-link\" href=\"{% url 'signup' %}\">Signup</a></li>\n                {% endif %}\n            </ul>\n        </div>\n    </nav>\n\n    <div id=\"container\" class=\"container mt-4\">\n        {% if messages %}\n            {% for message in messages %}\n                <div id=\"messageAlert\" class=\"alert alert-{{ message.tags }} alert-dismissible fade show\" role=\"alert\">\n                    {{ message }}\n                    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n            {% endfor %}\n        {% endif %}\n\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"homeContent\">\n        <h1 id=\"homeTitle\">Welcome to the Expense Tracker!</h1>\n        <p id=\"homeText\">Please log in or sign up to access the employee portal.</p>\n    </div>\n{% endblock %}"}, {"file": "login.html", "path": "templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"loginContent\">\n        <h2 id=\"loginTitle\">Login</h2>\n        <form id=\"loginForm\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"loginButton\" type=\"submit\" class=\"btn btn-primary\">Login</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "signup.html", "path": "templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"signupContent\">\n        <h2 id=\"signupTitle\">Signup</h2>\n        <form id=\"signupForm\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"signupButton\" type=\"submit\" class=\"btn btn-primary\">Signup</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "employee_portal.html", "path": "templates/employee_portal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"employeePortalContent\">\n        <h2 id=\"employeePortalTitle\">Employee Portal</h2>\n        <p id=\"welcomeMessage\">Welcome, {{ user.username }}!</p>\n        <a id=\"submitClaimLink\" href=\"{% url 'submit_claim' %}\" class=\"btn btn-primary\">Submit Claim</a><br>\n        <a id=\"viewClaimStatusLink\" href=\"{% url 'view_claim_status' %}\" class=\"btn btn-secondary\">View Claim Status</a>\n    </div>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "templates/submit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"submitClaimContent\">\n        <h2 id=\"submitClaimTitle\">Submit Claim</h2>\n        <form id=\"submitClaimForm\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"claim_type\" id=\"claimTypeLabel\">Claim Type:</label>\n                <select name=\"claim_type\" id=\"claim_type\" class=\"form-control\">\n                    <option value=\"Travel\">Travel</option>\n                    <option value=\"Labor\">Labor</option>\n                    <option value=\"Management\">Management</option>\n                    <option value=\"Equipment\">Equipment</option>\n                </select>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\" id=\"descriptionLabel\">Description:</label>\n                <textarea name=\"description\" id=\"description\" rows=\"4\" cols=\"50\" class=\"form-control\"></textarea>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"amount\" id=\"amountLabel\">Amount:</label>\n                <input type=\"number\" name=\"amount\" id=\"amount\" step=\"0.01\" class=\"form-control\">\n            </div>\n\n            <button id=\"submitButton\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "view_claim_status.html", "path": "templates/view_claim_status.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"viewClaimStatusContent\">\n        <h2 id=\"claimStatusTitle\">Claim Status</h2>\n        <ul id=\"claimList\" class=\"list-group\">\n            {% for claim in claims %}\n                <li class=\"list-group-item\">\n                    Claim ID: {{ claim.id }}, Type: {{ claim.claim_type }}, Status: {{ claim.status }}\n                    <a id=\"editClaimLink{{ claim.id }}\" href=\"{% url 'edit_claim' claim.id %}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                </li>\n            {% empty %}\n                <li id=\"noClaimsMessage\" class=\"list-group-item\">No claims submitted yet.</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "edit_claim.html", "path": "templates/edit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"editClaimContent\">\n        <h2 id=\"editClaimTitle\">Edit Claim</h2>\n        <form id=\"editClaimForm\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"claim_type\" id=\"claimTypeLabel\">Claim Type:</label>\n                <select name=\"claim_type\" id=\"claim_type\" class=\"form-control\">\n                    <option value=\"Travel\" {% if claim.claim_type == 'Travel' %}selected{% endif %}>Travel</option>\n                    <option value=\"Labor\" {% if claim.claim_type == 'Labor' %}selected{% endif %}>Labor</option>\n                    <option value=\"Management\" {% if claim.claim_type == 'Management' %}selected{% endif %}>Management</option>\n                    <option value=\"Equipment\" {% if claim.claim_type == 'Equipment' %}selected{% endif %}>Equipment</option>\n                </select>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\" id=\"descriptionLabel\">Description:</label>\n                <textarea name=\"description\" id=\"description\" rows=\"4\" cols=\"50\" class=\"form-control\">{{ claim.description }}</textarea>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"amount\" id=\"amountLabel\">Amount:</label>\n                <input type=\"number\" name=\"amount\" id=\"amount\" step=\"0.01\" value=\"{{ claim.amount }}\" class=\"form-control\">\n            </div>\n\n            <button id=\"updateButton\" type=\"submit\" class=\"btn btn-primary\">Update</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "admin_portal.html", "path": "templates/admin_portal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"adminPortalContent\">\n        <h2 id=\"adminPortalTitle\">Admin Portal</h2>\n        <form id=\"searchForm\" action=\"{% url 'search_claims' %}\" method=\"get\">\n            <div class=\"form-group\">\n              <input type=\"text\" name=\"q\" id=\"searchInput\" class=\"form-control\" placeholder=\"Search Claims\">\n            </div>\n            <button type=\"submit\" id=\"searchButton\" class=\"btn btn-primary\">Search</button>\n        </form>\n        <ul id=\"claimList\" class=\"list-group\">\n            {% for claim in claims %}\n                <li class=\"list-group-item\">\n                    Claim ID: {{ claim.id }}, Employee: {{ claim.employee.username }}, Type: {{ claim.claim_type }}, Status: {{ claim.status }}\n                    <a id=\"approveClaimLink{{ claim.id }}\" href=\"{% url 'approve_claim' claim.id %}\" class=\"btn btn-success btn-sm\">Approve</a>\n                    <a id=\"rejectClaimLink{{ claim.id }}\" href=\"{% url 'reject_claim' claim.id %}\" class=\"btn btn-danger btn-sm\">Reject</a>\n                    <a id=\"viewDetailsLink{{ claim.id }}\" href=\"{% url 'view_claim_details' claim.id %}\" class=\"btn btn-info btn-sm\">View Details</a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "reject_claim.html", "path": "templates/reject_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"rejectClaimContent\">\n        <h2 id=\"rejectClaimTitle\">Reject Claim</h2>\n        <p id=\"claimInfo\">Claim ID: {{ claim.id }}, Type: {{ claim.claim_type }}</p>\n        <form id=\"rejectionForm\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"rejection_reason\" id=\"rejectionReasonLabel\">Rejection Reason:</label>\n                <textarea name=\"rejection_reason\" id=\"rejection_reason\" rows=\"4\" cols=\"50\" class=\"form-control\"></textarea>\n            </div>\n            <button id=\"rejectButton\" type=\"submit\" class=\"btn btn-danger\">Reject Claim</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "view_claim_details.html", "path": "templates/view_claim_details.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"claimDetailsContent\">\n        <h2 id=\"claimDetailsTitle\">Claim Details</h2>\n        <p id=\"claimId\">Claim ID: {{ claim.id }}</p>\n        <p id=\"employeeName\">Employee: {{ claim.employee.username }}</p>\n        <p id=\"claimType\">Type: {{ claim.claim_type }}</p>\n        <p id=\"claimDescription\">Description: {{ claim.description }}</p>\n        <p id=\"claimAmount\">Amount: {{ claim.amount }}</p>\n        <p id=\"submissionDate\">Submission Date: {{ claim.submission_date }}</p>\n        <p id=\"claimStatus\">Status: {{ claim.status }}</p>\n        {% if claim.rejection_reason %}\n            <p id=\"rejectionReason\">Rejection Reason: {{ claim.rejection_reason }}</p>\n        {% endif %}\n    </div>\n{% endblock %}"}, {"file": "budget_control.html", "path": "templates/budget_control.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"budgetControlContent\">\n        <h2 id=\"budgetControlTitle\">Budget Control</h2>\n        <a id=\"analyzeBalancesLink\" href=\"{% url 'analyze_expense_balances' %}\" class=\"btn btn-link\">Analyze Expense Balances</a><br>\n        <a id=\"generateReportsLink\" href=\"{% url 'generate_reports' %}\" class=\"btn btn-link\">Generate Reports</a><br>\n        <a id=\"sendAlertsLink\" href=\"{% url 'send_budget_alerts' %}\" class=\"btn btn-link\">Send Budget Alerts</a>\n\n        <h3 id=\"setLimitsTitle\">Set Budget Limits</h3>\n        <form id=\"setLimitsForm\" method=\"post\" action=\"{% url 'set_budget_limits' %}\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"category\" id=\"categoryLabel\">Category:</label>\n                <input type=\"text\" name=\"category\" id=\"category\" class=\"form-control\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"budget_limit\" id=\"budgetLimitLabel\">Budget Limit:</label>\n                <input type=\"number\" name=\"budget_limit\" id=\"budget_limit\" step=\"0.01\" class=\"form-control\">\n            </div>\n\n            <button id=\"setLimitButton\" type=\"submit\" class=\"btn btn-primary\">Set Limit</button>\n        </form>\n\n        <h3 id=\"currentBudgetsTitle\">Current Budgets</h3>\n        <ul id=\"budgetsList\" class=\"list-group\">\n            {% for budget in budgets %}\n                <li class=\"list-group-item\">{{ budget.category }}: {{ budget.budget_limit }}</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "wsgi.py", "path": "expense_tracker_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_tracker_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "expense_tracker_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('expense_tracker.urls'))\n]"}], "13": [{"file": "models.py", "path": "app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255, null=True, blank=True)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer} - {self.product} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer} - {self.product}'"}, {"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\n# Home Page\ndef home(request):\n    return render(request, 'home.html')\n\n# Customer Management\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'customer_list.html', {'customers': customers})\n\ndef customer_detail(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    return render(request, 'customer_detail.html', {'customer': customer})\n\ndef customer_create(request):\n    return HttpResponse('Implement Customer Creation View')\n\ndef customer_update(request, pk):\n    return HttpResponse('Implement Customer Update View')\n\ndef customer_delete(request, pk):\n    return HttpResponse('Implement Customer Delete View')\n\n# Product Management\ndef product_list(request):\n    products = Product.objects.all()\n    return render(request, 'product_list.html', {'products': products})\n\ndef product_detail(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    return render(request, 'product_detail.html', {'product': product})\n\ndef product_create(request):\n    return HttpResponse('Implement Product Creation View')\n\ndef product_update(request, pk):\n    return HttpResponse('Implement Product Update View')\n\ndef product_delete(request, pk):\n    return HttpResponse('Implement Product Delete View')\n\n# Purchase Records\ndef purchase_list(request):\n    purchases = PurchaseRecord.objects.all()\n    return render(request, 'purchase_list.html', {'purchases': purchases})\n\ndef purchase_detail(request, pk):\n    purchase = get_object_or_404(PurchaseRecord, pk=pk)\n    return render(request, 'purchase_detail.html', {'purchase': purchase})\n\ndef purchase_create(request):\n    return HttpResponse('Implement Purchase Creation View')\n\ndef purchase_update(request, pk):\n    return HttpResponse('Implement Purchase Update View')\n\ndef purchase_delete(request, pk):\n    return HttpResponse('Implement Purchase Delete View')\n\n# Preferred Products Management\ndef preferred_product_list(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    preferred_products = PreferredProduct.objects.filter(customer=customer)\n    return render(request, 'preferred_product_list.html', {'preferred_products': preferred_products, 'customer': customer})\n\n\ndef preferred_product_create(request, customer_id):\n    return HttpResponse('Implement Preferred Product Creation View')\n\ndef preferred_product_update(request, pk):\n    return HttpResponse('Implement Preferred Product Update View')\n\ndef preferred_product_delete(request, pk):\n    return HttpResponse('Implement Preferred Product Delete View')\n\n# Sales Analysis\ndef sales_report(request):\n    return HttpResponse('Implement Sales Report View')\n\ndef sales_trends(request):\n    return HttpResponse('Implement Sales Trends Analysis View')\n\ndef product_performance(request):\n    return HttpResponse('Implement Product Performance Analysis View')"}, {"file": "urls.py", "path": "app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n\n    # Customer Management\n    path('customers/', views.customer_list, name='customer_list'),\n    path('customers/<int:pk>/', views.customer_detail, name='customer_detail'),\n    path('customers/create/', views.customer_create, name='customer_create'),\n    path('customers/<int:pk>/update/', views.customer_update, name='customer_update'),\n    path('customers/<int:pk>/delete/', views.customer_delete, name='customer_delete'),\n\n    # Product Management\n    path('products/', views.product_list, name='product_list'),\n    path('products/<int:pk>/', views.product_detail, name='product_detail'),\n    path('products/create/', views.product_create, name='product_create'),\n    path('products/<int:pk>/update/', views.product_update, name='product_update'),\n    path('products/<int:pk>/delete/', views.product_delete, name='product_delete'),\n\n    # Purchase Records\n    path('purchases/', views.purchase_list, name='purchase_list'),\n    path('purchases/<int:pk>/', views.purchase_detail, name='purchase_detail'),\n    path('purchases/create/', views.purchase_create, name='purchase_create'),\n    path('purchases/<int:pk>/update/', views.purchase_update, name='purchase_update'),\n    path('purchases/<int:pk>/delete/', views.purchase_delete, name='purchase_delete'),\n\n    # Preferred Products Management\n    path('customers/<int:customer_id>/preferred_products/', views.preferred_product_list, name='preferred_product_list'),\n    path('customers/<int:customer_id>/preferred_products/create/', views.preferred_product_create, name='preferred_product_create'),\n    path('preferred_products/<int:pk>/update/', views.preferred_product_update, name='preferred_product_update'),\n    path('preferred_products/<int:pk>/delete/', views.preferred_product_delete, name='preferred_product_delete'),\n\n    # Sales Analysis\n    path('sales_report/', views.sales_report, name='sales_report'),\n    path('sales_trends/', views.sales_trends, name='sales_trends'),\n    path('product_performance/', views.product_performance, name='product_performance'),\n]"}, {"file": "admin.py", "path": "app/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the System!</h1>\n        <p id=\"home-overview\" class=\"overview\">Overview of system features...</p>\n    </div>\n</body>\n</html>"}, {"file": "customer_list.html", "path": "templates/customer_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Customers</title>\n</head>\n<body>\n    <div id=\"customer-list-container\" class=\"container\">\n        <h1 id=\"customer-list-title\" class=\"title\">Customers</h1>\n        <ul id=\"customer-list\" class=\"list\">\n            {% for customer in customers %}\n                <li class=\"list-item\">\n                    <a id=\"customer-link-{{ customer.id }}\" class=\"customer-link\" href=\"{% url 'customer_detail' customer.id %}\">{{ customer.name }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "customer_detail.html", "path": "templates/customer_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ customer.name }}</title>\n</head>\n<body>\n    <div id=\"customer-detail-container\" class=\"container\">\n        <h1 id=\"customer-detail-name\" class=\"title\">{{ customer.name }}</h1>\n        <p id=\"customer-detail-birthday\" class=\"detail\">Birthday: {{ customer.birthday }}</p>\n        <p id=\"customer-detail-age\" class=\"detail\">Age: {{ customer.age }}</p>\n        <p id=\"customer-detail-sex\" class=\"detail\">Sex: {{ customer.sex }}</p>\n        <p id=\"customer-detail-company\" class=\"detail\">Company: {{ customer.company }}</p>\n        <p id=\"customer-detail-phone\" class=\"detail\">Phone Number: {{ customer.phone_number }}</p>\n    </div>\n</body>\n</html>"}, {"file": "product_list.html", "path": "templates/product_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Products</title>\n</head>\n<body>\n    <div id=\"product-list-container\" class=\"container\">\n        <h1 id=\"product-list-title\" class=\"title\">Products</h1>\n        <ul id=\"product-list\" class=\"list\">\n            {% for product in products %}\n                <li class=\"list-item\">\n                    <a id=\"product-link-{{ product.id }}\" class=\"product-link\" href=\"{% url 'product_detail' product.id %}\">{{ product.name }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "product_detail.html", "path": "templates/product_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ product.name }}</title>\n</head>\n<body>\n    <div id=\"product-detail-container\" class=\"container\">\n        <h1 id=\"product-detail-name\" class=\"title\">{{ product.name }}</h1>\n        <p id=\"product-detail-category\" class=\"detail\">Category: {{ product.category }}</p>\n        <p id=\"product-detail-price\" class=\"detail\">Recommended Price: {{ product.recommended_price }}</p>\n    </div>\n</body>\n</html>"}, {"file": "purchase_list.html", "path": "templates/purchase_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Purchase Records</title>\n</head>\n<body>\n    <div id=\"purchase-list-container\" class=\"container\">\n        <h1 id=\"purchase-list-title\" class=\"title\">Purchase Records</h1>\n        <ul id=\"purchase-list\" class=\"list\">\n            {% for purchase in purchases %}\n                <li class=\"list-item\">\n                    <a id=\"purchase-link-{{ purchase.id }}\" class=\"purchase-link\" href=\"{% url 'purchase_detail' purchase.id %}\">{{ purchase.customer }} - {{ purchase.product }} - {{ purchase.datetime }}</a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "purchase_detail.html", "path": "templates/purchase_detail.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Purchase Record Detail</title>\n</head>\n<body>\n    <div id=\"purchase-detail-container\" class=\"container\">\n        <h1 id=\"purchase-detail-title\" class=\"title\">Purchase Record Detail</h1>\n        <p id=\"purchase-detail-customer\" class=\"detail\">Customer: {{ purchase.customer }}</p>\n        <p id=\"purchase-detail-product\" class=\"detail\">Product: {{ purchase.product }}</p>\n        <p id=\"purchase-detail-datetime\" class=\"detail\">Datetime: {{ purchase.datetime }}</p>\n        <p id=\"purchase-detail-quantity\" class=\"detail\">Quantity: {{ purchase.quantity }}</p>\n        <p id=\"purchase-detail-amount\" class=\"detail\">Amount: {{ purchase.amount }}</p>\n    </div>\n</body>\n</html>"}, {"file": "preferred_product_list.html", "path": "templates/preferred_product_list.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Preferred Products</title>\n</head>\n<body>\n    <div id=\"preferred-product-list-container\" class=\"container\">\n        <h1 id=\"preferred-product-list-title\" class=\"title\">Preferred Products for {{ customer.name }}</h1>\n        <ul id=\"preferred-product-list\" class=\"list\">\n            {% for product in preferred_products %}\n                <li id=\"preferred-product-item-{{ product.product.id }}\" class=\"list-item\">{{ product.product.name }}</li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "app/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "your_project_name/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "your_project_name/__init__.py", "code": ""}, {"file": "settings.py", "path": "your_project_name/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'your_project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'your_project_name.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "your_project_name/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "14": [{"file": "urls.py", "path": "helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "views.py", "path": "helloworld/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'helloworld/hello_world.html', {})\n"}, {"file": "models.py", "path": "helloworld/models.py", "code": "from django.db import models\n\n# No models required for this simple example\n"}, {"file": "templates/hello_world.html", "path": "helloworld/templates/helloworld/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            font-family: sans-serif;\n        }\n    </style>\n</head>\n<body id=\"body\" class=\"body\">\n    <h1 id=\"hello-world-heading\" class=\"hello-world-heading\">Hello World</h1>\n</body>\n</html>"}, {"file": "apps.py", "path": "helloworld/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloworldConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworld'\n"}, {"file": "__init__.py", "path": "helloworld/__init__.py", "code": "default_app_config = 'helloworld.apps.HelloworldConfig'"}, {"file": "settings.py", "path": "mysite/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n\nTEMPLATES[0]['DIRS'] = [os.path.join(BASE_DIR, 'templates')]\n"}, {"file": "urls.py", "path": "mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('helloworld/', include('helloworld.urls')),\n    path('admin/', admin.site.urls),\n]"}, {"file": "wsgi.py", "path": "mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your\"\n            \" PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import include, path\n\nurlpatterns = [\n    path('', include('myapp.urls')),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome!</h1>\n        <a id=\"home-helloworld-link\" href=\"{% url 'helloworld' %}\">\n            <button id=\"home-helloworld-button\" class=\"button\">Go to HelloWorld</button>\n        </a>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <div id=\"helloworld-container\" class=\"container\">\n        <h1 id=\"helloworld-title\" class=\"title\">HelloWorld</h1>\n    </div>\n</body>\n</html>"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'myapp', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail for some other reason.\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from None\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "16": [{"file": "input_file_validation.py", "path": "modules/input_file_validation.py", "code": "def check_file_existence(filepath):\n    pass\n\ndef validate_headers(filepath, expected_headers):\n    pass\n\ndef validate_time_column(filepath, allowed_times):\n    pass\n\ndef validate_data_integrity(filepath):\n    pass\n\ndef validate_null_value(filepath):\n    pass\n\ndef validate_input_file(filepath):\n    check_file_existence(filepath)\n    validate_headers(filepath, ['#', 'Name', 'Weekday', 'Time'])\n    validate_time_column(filepath, ['First period', 'Second period', 'Third period', 'Fourth period'])\n    validate_data_integrity(filepath)\n    validate_null_value(filepath)\n"}, {"file": "data_transformation.py", "path": "modules/data_transformation.py", "code": "def transform_to_two_dimension_table(data):\n    pass\n\ndef data_mapping(data, table):\n    pass\n\ndef transform_data(data):\n    table = transform_to_two_dimension_table(data)\n    data_mapping(data, table)\n    return table\n"}, {"file": "output_file_creation.py", "path": "modules/output_file_creation.py", "code": "def create_output_excel_file(filename):\n    pass\n\ndef save_table_to_excel(table, filename):\n    pass\n\ndef create_output_file(table, filename):\n    create_output_excel_file(filename)\n    save_table_to_excel(table, filename)\n"}, {"file": "main.py", "path": "main.py", "code": "import modules.input_file_validation as input_validation\nimport modules.data_transformation as data_transformation\nimport modules.output_file_creation as output_file_creation\n\ndef main():\n    input_file = 'Spring Semester Subjects.xlsx'\n    output_file = 'Transformed_Subjects.xlsx'\n\n    try:\n        input_validation.validate_input_file(input_file)\n        # Load data from input file (implementation needed)\n        data = [] # Placeholder - should be loaded from input_file\n        transformed_table = data_transformation.transform_data(data)\n        output_file_creation.create_output_file(transformed_table, output_file)\n        print(f\"Successfully transformed data and saved to {output_file}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nopenpyxl"}], "17": [{"file": "data_preparation.py", "path": "DataPreparation/data_preparation.py", "code": "import pandas as pd\n\ndef read_dataset(filename):\n    # Load the dataset\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found.\")\n        return None\n\ndef lag_dependent_variable(df, column_name):\n    # Lag the dependent variable\n    df['lagged_result'] = df[column_name].shift(1)\n    df = df.dropna()\n    return df\n\ndef prepare_independent_variables(df, dependent_variable):\n    # Prepare independent variables and check for null values\n    X = df.drop(dependent_variable, axis=1)\n    if X.isnull().any().any():\n        print(\"Error: Null values found in independent variables. Please handle them.\")\n        return None\n    if X.empty:\n        print(\"Error: Independent variable dataframe is empty.\")\n        return None\n    return X, df[dependent_variable]\n\nif __name__ == '__main__':\n    # Example usage\n    filename = 'Gamedata.xlsx'\n    df = read_dataset(filename)\n    if df is not None:\n        df = lag_dependent_variable(df, 'result')\n        if df is not None:\n            X, y = prepare_independent_variables(df.drop(columns=['lagged_result']), 'result')\n            if X is not None:\n                print(\"Data preparation complete.\")\n"}, {"file": "model_creation.py", "path": "ModelCreation/model_creation.py", "code": "import pandas as pd\nimport statsmodels.api as sm\n\ndef create_logistic_model(X, y):\n    # Create a logistic regression model\n    try:\n        X = sm.add_constant(X) # Add a constant for the intercept\n        model = sm.Logit(y, X)\n        results = model.fit()\n        return results\n    except Exception as e:\n        print(f\"Error creating the logistic model: {e}\")\n        return None\n\ndef generate_model_summary(model_results):\n    # Generate a model summary\n    if model_results:\n        return model_results.summary()\n    else:\n        return None\n\nif __name__ == '__main__':\n    # Example usage (replace with actual data)\n    data = {'feature1': [1, 2, 3, 4, 5], 'feature2': [6, 7, 8, 9, 10], 'result': [0, 1, 0, 1, 0]}\n    df = pd.DataFrame(data)\n    X = df[['feature1', 'feature2']]\n    y = df['result']\n\n    model_results = create_logistic_model(X, y)\n    if model_results:\n        summary = generate_model_summary(model_results)\n        print(summary)\n"}, {"file": "output.py", "path": "Output/output.py", "code": "import pandas as pd\n\ndef write_summary(summary, filename):\n    # Output the model summary to an Excel file\n    if summary:\n        try:\n            with pd.ExcelWriter(filename) as writer:\n                summary_df = pd.read_html(summary.tables[1].as_html(), header=0, index_col=0)[0] # Extract results table\n                summary_df.to_excel(writer, sheet_name='Model Summary')\n            print(f\"Model summary written to '{filename}'.\")\n        except Exception as e:\n            print(f\"Error writing to Excel file: {e}\")\n    else:\n        print(\"No summary to write.\")\n\nif __name__ == '__main__':\n    # Example usage (replace with actual summary)\n    example_summary = '''\n    <caption id=\"summary-caption\" class=\"summary-caption\">Logit Regression Results</caption>\n    <tr id=\"dep-variable-row\" class=\"summary-row\">\n    <th class=\"summary-header\">Dep. Variable:</th> <td class=\"summary-cell\">result</td> <th class=\"summary-header\">  No. Observations:  </th>  <td class=\"summary-cell\">     5</td>\n    </tr>\n    <tr id=\"model-row\" class=\"summary-row\">\n    <th class=\"summary-header\">Model:</th>         <td class=\"summary-cell\">Logit</td>  <th class=\"summary-header\">  Df Residuals:      </th>  <td class=\"summary-cell\">     2</td>\n    </tr>\n    <tr id=\"method-row\" class=\"summary-row\">\n    <th class=\"summary-header\">Method:</th>        <td class=\"summary-cell\">MLE</td>    <th class=\"summary-header\">  Df Model:          </th>  <td class=\"summary-cell\">     2</td>\n    </tr>\n    <tr id=\"date-row\" class=\"summary-row\">\n    <th class=\"summary-header\">Date:</th>          <td class=\"summary-cell\">Mon, 27 Nov 2023</td> <th class=\"summary-header\">  Pseudo R-squ.:     </th> <td class=\"summary-cell\">0.000</td>\n    </tr>\n    <tr id=\"time-row\" class=\"summary-row\">\n    <th class=\"summary-header\">Time:</th>          <td class=\"summary-cell\">18:42:28</td> <th class=\"summary-header\">  Log-Likelihood:    </th> <td class=\"summary-cell\"> -3.4660</td>\n    </tr>\n    <tr id=\"converged-row\" class=\"summary-row\">\n    <th class=\"summary-header\">converged:</th>     <td class=\"summary-cell\">True</td>   <th class=\"summary-header\">  LL-Null:           </th> <td class=\"summary-cell\"> -3.4660</td>\n    </tr>\n    <tr id=\"covariance-row\" class=\"summary-row\">\n    <th class=\"summary-header\">Covariance Type:</th> <td class=\"summary-cell\">nonrobust</td><th class=\"summary-header\">  LLR p-value:        </th> <td class=\"summary-cell\"> 1.000</td>\n    </tr>\n    </table>\n    <table>\n    <tr id=\"coef-header-row\" class=\"summary-row\">\n    <td class=\"summary-cell\"></td>          <th class=\"summary-header\">coef</th>     <th class=\"summary-header\">std err</th>   <th class=\"summary-header\">z</th>      <th class=\"summary-header\">P>|z|</th>  <th class=\"summary-header\">[0.025</th>    <th class=\"summary-header\">0.975]</th>  </tr>\n    <tr id=\"const-row\" class=\"summary-row\">\n    <th class=\"summary-header\">const</th>    <td class=\"summary-cell\">   -0.0002</td> <td class=\"summary-cell\">  248.799</td> <td class=\"summary-cell\">-1.007e-06</td> <td class=\"summary-cell\"> 1.000</td> <td class=\"summary-cell\"> -487.791</td> <td class=\"summary-cell\">  487.791</td>\n    </tr>\n    <tr id=\"feature1-row\" class=\"summary-row\">\n    <th class=\"summary-header\">feature1</th> <td class=\"summary-cell\">   -0.0001</td> <td class=\"summary-cell\">  106.593</td> <td class=\"summary-cell\">-9.079e-07</td> <td class=\"summary-cell\"> 1.000</td> <td class=\"summary-cell\"> -208.916</td> <td class=\"summary-cell\">  208.916</td>\n    </tr>\n    <tr id=\"feature2-row\" class=\"summary-row\">\n    <th class=\"summary-header\">feature2</th> <td class=\"summary-cell\">    0.0001</td> <td class=\"summary-cell\">   44.733</td> <td class=\"summary-cell\"> 2.907e-06</td> <td class=\"summary-cell\"> 1.000</td> <td class=\"summary-cell\">  -87.676</td> <td class=\"summary-cell\">   87.676</td>\n    </tr>\n    </table>\n    '''\n    filename = 'Logistic.xlsx'\n    write_summary(example_summary, filename)\n"}, {"file": "main.py", "path": "main.py", "code": "from DataPreparation import data_preparation\nfrom ModelCreation import model_creation\nfrom Output import output\n\n# Main script to orchestrate the process\n\ndef main():\n    # 1. Data Preparation\n    filename = 'Gamedata.xlsx'\n    df = data_preparation.read_dataset(filename)\n\n    if df is not None:\n        df = data_preparation.lag_dependent_variable(df, 'result')\n        if df is not None:\n            X, y = data_preparation.prepare_independent_variables(df.drop(columns=['lagged_result']), 'result')\n\n            if X is not None:\n\n                # 2. Model Creation\n                model_results = model_creation.create_logistic_model(X, y)\n\n                if model_results:\n                    summary = model_creation.generate_model_summary(model_results)\n\n                    # 3. Output\n                    output_filename = 'Logistic.xlsx'\n                    output.write_summary(summary.as_html(), output_filename)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "Gamedata.xlsx", "path": "DataPreparation/Gamedata.xlsx", "code": "Place Holder for game data excel file. Create a file with this name, with column 'result' and some other features"}, {"file": "README.md", "path": "README.md", "code": "# Logistic Regression Project\n\nThis project implements a logistic regression model for prediction.\n\n## Project Structure\n\n```\n.\n\u251c\u2500\u2500 DataPreparation/\n\u2502   \u251c\u2500\u2500 data_preparation.py  # Data preparation functions\n\u2502   \u2514\u2500\u2500 Gamedata.xlsx        # Example dataset (to be created by you)\n\u251c\u2500\u2500 ModelCreation/\n\u2502   \u2514\u2500\u2500 model_creation.py  # Model creation functions\n\u251c\u2500\u2500 Output/\n\u2502   \u2514\u2500\u2500 output.py          # Output writing functions\n\u251c\u2500\u2500 main.py                # Main execution script\n\u2514\u2500\u2500 README.md              # Project documentation\n```\n\n## Dependencies\n\n*   pandas\n*   statsmodels\n*   xlrd (if reading .xls files)\n*   openpyxl (if writing .xlsx files)\n\nInstall dependencies with:\n\n```bash\npip install pandas statsmodels xlrd openpyxl\n```\n\n## Usage\n\n1.  **Data Preparation:**\n    *   Create a `Gamedata.xlsx` file inside the `DataPreparation` directory.\n    *   Ensure that the excel file contains a column named `result` with some numeric values and other independent features columns.\n\n2.  **Run the main script:**\n\n    ```bash\n    python main.py\n    ```\n\n3.  **Output:**\n    *   The model summary will be saved to `Logistic.xlsx` in the project root directory.\n\n## Note\n\n*   The `Gamedata.xlsx` should be created by the user with real dataset.\n*   Exception handling is included, but handling of null values in indepedent variable needs to be considered while creating the excel file.\n"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "# Main Menu functions: Start Game, Instructions, Exit Game\n\ndef start_game():\n    # Code to start a new game session\n    print(\"Starting game...\")\n\n\ndef instructions():\n    # Code to display game instructions\n    print(\"Instructions: Use commands like 'move', 'look', 'take'.\")\n\n\ndef exit_game():\n    # Code to exit the game\n    print(\"Exiting game...\")\n    exit()\n\n# Main Menu Logic\n\ndef main_menu():\n    while True:\n        print(\"\\nMain Menu\")\n        print(\"1. Start Game\")\n        print(\"2. Instructions\")\n        print(\"3. Exit Game\")\n\n        choice = input(\"Enter your choice: \")\n\n        if choice == '1':\n            start_game()\n            break # breaks after starting the game\n        elif choice == '2':\n            instructions()\n        elif choice == '3':\n            exit_game()\n        else:\n            print(\"Invalid choice. Please try again.\")\n\nif __name__ == '__main__':\n    main_menu()"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "# Game Environment functions: Move Player, Look Around, Pick Item, Check Inventory\n\nclass Room:\n    def __init__(self, name, description, items=None):\n        self.name = name\n        self.description = description\n        self.items = items if items is not None else []\n        self.exits = {}\n\n    def add_exit(self, direction, room):\n        self.exits[direction] = room\n\n    def __str__(self):\n        return f\"{self.name}\\n{self.description}\\nItems: {', '.join(self.items) if self.items else 'None'}\\nExits: {', '.join(self.exits.keys()) if self.exits else 'None'}\"\n\ndef move_player(current_room, direction):\n    if direction in current_room.exits:\n        return current_room.exits[direction]\n    else:\n        print(\"You can't go that way.\")\n        return current_room # Return current room if move fails\n\n\ndef look_around(room):\n    print(room)\n\n\ndef pick_item(room, item_name):\n    if item_name in room.items:\n        room.items.remove(item_name)\n        print(f\"You picked up {item_name}.\")\n        return item_name # Returning the item picked\n    else:\n        print(\"That item is not in this room.\")\n        return None # Returning None if item is not found.\n\n\n\ndef check_inventory(inventory):\n    if inventory:\n        print(\"Inventory: \", ', '.join(inventory))\n    else:\n        print(\"Your inventory is empty.\")"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "# Game Logic functions: Parse Command, Update Game State\n\ndef parse_command(command):\n    words = command.lower().split()\n    if not words:\n        return None, None, None\n\n    action = words[0]\n    if len(words) > 1:\n        target = words[1]\n    else:\n        target = None\n\n    if len(words) > 2:\n        additional_info = ' '.join(words[2:])\n    else:\n        additional_info = None\n\n    return action, target, additional_info\n\n\ndef update_game_state(action, target, current_room, inventory):\n    if action == \"move\":\n        new_room = move_player(current_room, target)\n        if new_room != current_room:\n            return new_room, inventory\n        else:\n            return current_room, inventory\n\n    elif action == \"look\":\n        look_around(current_room)\n        return current_room, inventory\n\n    elif action == \"take\":\n        item = pick_item(current_room, target)\n        if item:\n            inventory.append(item)\n        return current_room, inventory\n\n    elif action == \"inventory\":\n        check_inventory(inventory)\n        return current_room, inventory\n\n    elif action == \"help\":\n        display_help()\n        return current_room, inventory\n\n    else:\n        print(\"Invalid command.\")\n        return current_room, inventory\n\nfrom src.game_environment import move_player, look_around, pick_item\nfrom src.help_support import display_help\nfrom src.game_environment import check_inventory #imports check inventory so we can call it within update_game_state"}, {"file": "help_support.py", "path": "src/help_support.py", "code": "# Help and Support function: Display Help\n\ndef display_help():\n    print(\"\\nAvailable Commands:\")\n    print(\"  move [direction] - Move in a specified direction (e.g., move north)\")\n    print(\"  look - Look around the current room\")\n    print(\"  take [item] - Pick up an item in the room (e.g., take key)\")\n    print(\"  inventory - Check your current inventory\")\n    print(\"  help - Display this help message\")"}, {"file": "none.py", "path": "src/none.py", "code": "#This file serves as a placeholder for functionality which\n#may not be present.\n#This may include items, characters, or world information"}, {"file": "main.py", "path": "src/main.py", "code": "from src.main_menu import main_menu\nfrom src.game_environment import Room\nfrom src.game_logic import parse_command, update_game_state\n\n# Initialize game world\nroom1 = Room(\"The Starting Room\", \"A dimly lit room with a dusty floor.\", [\"key\"])\nroom2 = Room(\"The Second Room\", \"A room with a strange symbol on the wall.\")\nroom1.add_exit(\"north\", room2)\nroom2.add_exit(\"south\", room1)\n\ncurrent_room = room1 #starting room\ninventory = []\n\n# Game loop\ndef game_loop():\n    global current_room, inventory\n    while True:\n        print(\"\\n\" + str(current_room))\n        command = input(\"> \")\n        action, target, additional_info = parse_command(command)\n        if action == 'exit':\n            print(\"Thanks for playing!\")\n            break\n        current_room, inventory = update_game_state(action, target, current_room, inventory)\n\n# Main function to start the game\nif __name__ == \"__main__\":\n    main_menu()\n    game_loop()"}], "19": [{"file": "batch_program.py", "path": "src/batch_program.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef ReadDeathlistData(file_path):\n    \"\"\"Load and read data from the 'Deathlist.csv' file.\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File not found at {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"Error reading data: {e}\")\n        return None\n\n\ndef ProcessData(df):\n    \"\"\"Process the dataset to structure data appropriately for weekly analysis.\"\"\"\n    # Example: Convert date column to datetime objects\n    try:\n        df['date'] = pd.to_datetime(df['date'])\n        return df\n    except KeyError:\n        print(\"Error: 'date' column not found.\")\n        return None\n    except Exception as e:\n        print(f\"Error processing data: {e}\")\n        return None\n\n\ndef CalculateWeeklyDeaths(df):\n    \"\"\"Aggregate the data to calculate the number of deaths per week.\"\"\"\n    try:\n        weekly_deaths = df.groupby(pd.Grouper(key='date', freq='W')).size()\n        return weekly_deaths\n    except Exception as e:\n        print(f\"Error calculating weekly deaths: {e}\")\n        return None\n\n\ndef GenerateHistogram(weekly_deaths):\n    \"\"\"Create a histogram depicting the weekly deaths calculated from the dataset.\"\"\"\n    if weekly_deaths is None or weekly_deaths.empty:\n        print(\"No weekly deaths data available to generate histogram.\")\n        return None\n    try:\n        plt.figure(figsize=(12, 6))\n        plt.hist(weekly_deaths, bins=20, edgecolor='black')\n        plt.xlabel('Weekly Deaths')\n        plt.ylabel('Frequency')\n        plt.title('Distribution of Weekly Deaths')\n        return plt\n    except Exception as e:\n        print(f\"Error generating histogram: {e}\")\n        return None\n\n\ndef OutputHistogram(histogram):\n    \"\"\"Print or display the generated histogram to the user.\"\"\"\n    if histogram:\n        plt.show()\n    else:\n        print(\"No histogram to display.\")\n\n\ndef ValidateDataset(df):\n    \"\"\"Validate the dataset to ensure it contains the required data and format before processing.\"\"\"\n    # Example: Check if 'date' and 'cause_of_death' columns exist\n    if df is None:\n        print(\"Dataset is empty.\")\n        return False\n    required_columns = ['date', 'cause_of_death'] #Adjust this with the correct column names\n    if not all(col in df.columns for col in required_columns):\n        print(f\"Missing required columns. Ensure the following columns exist: {required_columns}\")\n        return False\n    return True\n\n\n\ndef main():\n    file_path = 'Deathlist.csv'\n    df = ReadDeathlistData(file_path)\n\n    if df is not None:\n        if ValidateDataset(df):\n            processed_df = ProcessData(df)\n            if processed_df is not None:\n                weekly_deaths = CalculateWeeklyDeaths(processed_df)\n                if weekly_deaths is not None:\n                    histogram = GenerateHistogram(weekly_deaths)\n                    OutputHistogram(histogram)\n        else:\n            print(\"Dataset validation failed.\")\n    else:\n        print(\"Failed to read the deathlist data.\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "Deathlist.csv", "path": "data/Deathlist.csv", "code": "date,cause_of_death\n2023-01-01,Heart Disease\n2023-01-05,Accident\n2023-01-08,Cancer\n2023-01-12,Heart Disease\n2023-01-15,Stroke\n2023-01-19,Accident\n2023-01-22,Cancer\n2023-01-26,Heart Disease\n2023-01-29,Stroke\n2023-02-02,Accident\n2023-02-05,Cancer\n2023-02-09,Heart Disease\n2023-02-12,Stroke\n2023-02-16,Accident\n2023-02-19,Cancer\n2023-02-23,Heart Disease\n2023-02-26,Stroke\n2023-03-01,Accident\n2023-03-04,Cancer\n2023-03-08,Heart Disease"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n    \n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE)\n    author = models.CharField(max_length=100)\n    text = models.TextField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.blog_post.title}'\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import BlogPost, Comment, Category\nfrom .forms import CommentForm, BlogPostForm, CategoryForm\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5]\n    return render(request, 'blog/home.html', {'latest_posts': latest_posts})\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = Comment.objects.filter(blog_post=post).order_by('-date')\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.blog_post = post\n            comment.save()\n            return redirect('blog_post_detail', pk=post.pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/blog_post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\ndef add_blog_post(request):\n    if request.method == 'POST':\n        form = BlogPostForm(request.POST)\n        if form.is_valid():\n            post = form.save()\n            return redirect('blog_post_detail', pk=post.pk)\n    else:\n        form = BlogPostForm()\n    return render(request, 'blog/add_blog_post.html', {'form': form})\n\ndef manage_blog_post(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    if request.method == 'POST':\n        form = BlogPostForm(request.POST, instance=post)\n        if form.is_valid():\n            post = form.save()\n            return redirect('blog_post_detail', pk=post.pk)\n    else:\n        form = BlogPostForm(instance=post)\n    return render(request, 'blog/manage_blog_post.html', {'form': form, 'post':post})\n\ndef delete_blog_post(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    post.delete()\n    return redirect('home')\n\ndef manage_comment(request, pk):\n   comment = get_object_or_404(Comment, pk=pk)\n   if request.method == 'POST':\n        comment.delete()\n        return redirect('blog_post_detail', pk=comment.blog_post.pk) \n   return render(request, 'blog/manage_comment.html', {'comment': comment})\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\ndef categories(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/categories.html', {'categories': categories})\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\ndef add_category(request):\n    if request.method == 'POST':\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            category = form.save()\n            return redirect('categories')\n    else:\n        form = CategoryForm()\n    return render(request, 'blog/add_category.html', {'form': form})\n\ndef manage_category(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    if request.method == 'POST':\n        form = CategoryForm(request.POST, instance=category)\n        if form.is_valid():\n            category = form.save()\n            return redirect('categories')\n    else:\n        form = CategoryForm(instance=category)\n    return render(request, 'blog/manage_category.html', {'form': form, 'category':category})\n\ndef delete_category(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    return redirect('categories')\n\ndef archive(request):\n    return render(request, 'blog/archive.html')"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost, Category\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'text']\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('post/add/', views.add_blog_post, name='add_blog_post'),\n    path('post/manage/<int:pk>/', views.manage_blog_post, name='manage_blog_post'),\n    path('post/delete/<int:pk>/', views.delete_blog_post, name='delete_blog_post'),\n    path('comment/manage/<int:pk>/', views.manage_comment, name='manage_comment'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('categories/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/add/', views.add_category, name='add_category'),\n    path('category/manage/<int:pk>/', views.manage_category, name='manage_category'),\n    path('category/delete/<int:pk>/', views.delete_category, name='delete_category'),\n    path('archive/', views.archive, name='archive'),\n]"}, {"file": "home.html", "path": "blog/templates/blog/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"home-title\" class=\"home-title\">Latest Blog Posts</h1>\n  {% for post in latest_posts %}\n    <h2 id=\"post-title-{{ post.pk }}\" class=\"post-title\"><a href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></h2>\n    <p id=\"post-date-{{ post.pk }}\" class=\"post-date\">{{ post.publication_date }}</p>\n    <p id=\"post-content-{{ post.pk }}\" class=\"post-content\">{{ post.content|truncatewords:50 }}</p>\n  {% endfor %}\n  <form id=\"search-form\" class=\"search-form\" action=\"\" method=\"get\">\n    <input id=\"search-input\" class=\"search-input\" type=\"text\" placeholder=\"Search\" name=\"q\">\n    <button id=\"search-button\" class=\"search-button\" type=\"submit\">Search</button>\n  </form>\n{% endblock %}"}, {"file": "blog_post_detail.html", "path": "blog/templates/blog/blog_post_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"post-detail-title\" class=\"post-detail-title\">{{ post.title }}</h1>\n  <p id=\"post-detail-date\" class=\"post-detail-date\">{{ post.publication_date }}</p>\n  <p id=\"post-detail-content\" class=\"post-detail-content\">{{ post.content }}</p>\n\n  <h2 id=\"comments-section-title\" class=\"comments-section-title\">Comments</h2>\n  {% for comment in comments %}\n    <p id=\"comment-author-date-{{ comment.pk }}\" class=\"comment-author-date\">{{ comment.author }} - {{ comment.date }}</p>\n    <p id=\"comment-text-{{ comment.pk }}\" class=\"comment-text\">{{ comment.text }}</p>\n    <a id=\"delete-comment-link-{{ comment.pk }}\" class=\"delete-comment-link\" href=\"{% url 'manage_comment' comment.pk %}\">Delete comment</a>\n  {% endfor %}\n\n  <h2 id=\"add-comment-title\" class=\"add-comment-title\">Add a Comment</h2>\n  <form id=\"comment-form\" class=\"comment-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"submit-comment-button\" class=\"submit-comment-button\" type=\"submit\">Submit</button>\n  </form>\n  <a id=\"manage-post-link\" class=\"manage-post-link\" href=\"{% url 'manage_blog_post' post.pk %}\">Manage post</a>\n  <a id=\"delete-post-link\" class=\"delete-post-link\" href=\"{% url 'delete_blog_post' post.pk %}\">Delete post</a>\n\n{% endblock %}"}, {"file": "add_blog_post.html", "path": "blog/templates/blog/add_blog_post.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"add-post-title\" class=\"add-post-title\">Add Blog Post</h1>\n  <form id=\"add-post-form\" class=\"add-post-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"save-post-button\" class=\"save-post-button\" type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "manage_blog_post.html", "path": "blog/templates/blog/manage_blog_post.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"manage-post-title\" class=\"manage-post-title\">Manage Blog Post</h1>\n  <form id=\"manage-post-form\" class=\"manage-post-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"save-changes-button\" class=\"save-changes-button\" type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "manage_comment.html", "path": "blog/templates/blog/manage_comment.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"delete-comment-title\" class=\"delete-comment-title\">Delete comment</h1>\n  <form id=\"delete-comment-form\" class=\"delete-comment-form\" method=\"post\">\n    {% csrf_token %}\n    <button id=\"delete-comment-button\" class=\"delete-comment-button\" type=\"submit\">Delete</button>\n  </form>\n{% endblock %}"}, {"file": "about.html", "path": "blog/templates/blog/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"about-us-title\" class=\"about-us-title\">About Us</h1>\n  <p id=\"about-author-info\" class=\"about-author-info\">Information about the author or team.</p>\n  <p id=\"about-contact-info\" class=\"about-contact-info\">Contact information.</p>\n{% endblock %}"}, {"file": "categories.html", "path": "blog/templates/blog/categories.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"categories-title\" class=\"categories-title\">Categories</h1>\n  <ul id=\"categories-list\" class=\"categories-list\">\n    {% for category in categories %}\n      <li id=\"category-item-{{ category.pk }}\" class=\"category-item\"><a id=\"category-link-{{ category.pk }}\" class=\"category-link\" href=\"{% url 'category_detail' category.pk %}\">{{ category.name }}</a></li>\n    {% endfor %}\n  </ul>\n  <a id=\"add-category-link\" class=\"add-category-link\" href=\"{% url 'add_category' %}\">Add Category</a>\n{% endblock %}"}, {"file": "category_detail.html", "path": "blog/templates/blog/category_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"category-detail-title\" class=\"category-detail-title\">{{ category.name }}</h1>\n  <ul id=\"category-posts-list\" class=\"category-posts-list\">\n    {% for post in posts %}\n      <li id=\"category-post-item-{{ post.pk }}\" class=\"category-post-item\"><a id=\"category-post-link-{{ post.pk }}\" class=\"category-post-link\" href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></li>\n    {% endfor %}\n  </ul>\n  <a id=\"manage-category-link\" class=\"manage-category-link\" href=\"{% url 'manage_category' category.pk %}\">Manage category</a>\n  <a id=\"delete-category-link\" class=\"delete-category-link\" href=\"{% url 'delete_category' category.pk %}\">Delete category</a>\n{% endblock %}"}, {"file": "add_category.html", "path": "blog/templates/blog/add_category.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"add-category-title\" class=\"add-category-title\">Add Category</h1>\n  <form id=\"add-category-form\" class=\"add-category-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"save-category-button\" class=\"save-category-button\" type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "manage_category.html", "path": "blog/templates/blog/manage_category.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"manage-category-title\" class=\"manage-category-title\">Manage Category</h1>\n  <form id=\"manage-category-form\" class=\"manage-category-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button id=\"save-category-changes-button\" class=\"save-category-changes-button\" type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "archive.html", "path": "blog/templates/blog/archive.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"archive-title\" class=\"archive-title\">Archive</h1>\n  <p id=\"archive-content\" class=\"archive-content\">Archive content will go here.</p>\n{% endblock %}"}, {"file": "base.html", "path": "blog/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <style>\n        /* Basic CSS for styling */\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n        }\n        nav {\n            background-color: #f0f0f0;\n            padding: 10px;\n            text-align: center;\n        }\n        nav a {\n            margin: 0 10px;\n            text-decoration: none;\n            color: #333;\n        }\n        .container {\n            width: 80%;\n            margin: 20px auto;\n        }\n        /* Add more styling as needed */\n    </style>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a> |\n        <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a> |\n        <a id=\"categories-link\" class=\"nav-link\" href=\"{% url 'categories' %}\">Categories</a> |\n        <a id=\"archive-link\" class=\"nav-link\" href=\"{% url 'archive' %}\">Archive</a>\n    </nav>\n    <hr>\n    <div id=\"content\" class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "mysite/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'blog/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'blog/static')]\n"}, {"file": "urls.py", "path": "mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "wsgi.py", "path": "mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "blog/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Comment, Category\n\nadmin.site.register(BlogPost)\nadmin.site.register(Comment)\nadmin.site.register(Category)"}, {"file": "blog/__init__.py", "path": "blog/__init__.py", "code": ""}, {"file": "mysite/__init__.py", "path": "mysite/__init__.py", "code": ""}]}