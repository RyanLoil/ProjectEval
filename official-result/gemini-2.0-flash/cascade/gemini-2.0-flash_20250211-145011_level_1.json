{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\nclass BMIResult(models.Model):\n    height_cm = models.FloatField(null=True, blank=True)\n    height_ft = models.IntegerField(null=True, blank=True)\n    height_in = models.FloatField(null=True, blank=True)\n    weight_kg = models.FloatField(null=True, blank=True)\n    weight_lb = models.FloatField(null=True, blank=True)\n    bmi = models.FloatField(null=True, blank=True)\n    category = models.CharField(max_length=50, blank=True, null=True)\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'BMI Result: {self.bmi} - {self.category}'"}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMIForm(forms.Form):\n    unit_system = forms.ChoiceField(choices=[('metric', 'Metric'), ('imperial', 'Imperial')], label='Unit System', widget=forms.Select(attrs={'id': 'unit_system_select', 'class': 'form-control'}))\n    height_cm = forms.FloatField(label='Height (cm)', required=False, widget=forms.NumberInput(attrs={'id': 'height_cm_input', 'class': 'form-control'}))\n    height_ft = forms.IntegerField(label='Height (feet)', required=False, widget=forms.NumberInput(attrs={'id': 'height_ft_input', 'class': 'form-control'}))\n    height_in = forms.FloatField(label='Height (inches)', required=False, widget=forms.NumberInput(attrs={'id': 'height_in_input', 'class': 'form-control'}))\n    weight_kg = forms.FloatField(label='Weight (kg)', required=False, widget=forms.NumberInput(attrs={'id': 'weight_kg_input', 'class': 'form-control'}))\n    weight_lb = forms.FloatField(label='Weight (lbs)', required=False, widget=forms.NumberInput(attrs={'id': 'weight_lb_input', 'class': 'form-control'}))\n\n    def clean(self):\n        cleaned_data = super().clean()\n        unit_system = cleaned_data.get('unit_system')\n        height_cm = cleaned_data.get('height_cm')\n        height_ft = cleaned_data.get('height_ft')\n        height_in = cleaned_data.get('height_in')\n        weight_kg = cleaned_data.get('weight_kg')\n        weight_lb = cleaned_data.get('weight_lb')\n\n        if unit_system == 'metric':\n            if not height_cm:\n                self.add_error('height_cm', 'This field is required when using Metric units.')\n            if not weight_kg:\n                self.add_error('weight_kg', 'This field is required when using Metric units.')\n            if height_ft or height_in or weight_lb:\n                raise forms.ValidationError(\"Imperial units detected in Metric mode.\")\n        elif unit_system == 'imperial':\n            if not height_ft:\n                self.add_error('height_ft', 'This field is required when using Imperial units.')\n            if not height_in:\n                self.add_error('height_in', 'This field is required when using Imperial units.')\n            if not weight_lb:\n                self.add_error('weight_lb', 'This field is required when using Imperial units.')\n            if height_cm or weight_kg:\n                raise forms.ValidationError(\"Metric units detected in Imperial mode.\")\n        else:\n            raise forms.ValidationError(\"Invalid unit system selected.\")\n\n        return cleaned_data"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMIForm\nfrom .models import BMIResult\n\ndef calculate_bmi(height_cm, weight_kg):\n    height_m = height_cm / 100\n    bmi = weight_kg / (height_m ** 2)\n    return bmi\n\ndef get_bmi_category(bmi):\n    if bmi < 18.5:\n        return 'Underweight'\n    elif 18.5 <= bmi < 25:\n        return 'Normal Weight'\n    elif 25 <= bmi < 30:\n        return 'Overweight'\n    else:\n        return 'Obese'\n\n\ndef bmi_calculator_view(request):\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            unit_system = form.cleaned_data['unit_system']\n            if unit_system == 'metric':\n                height_cm = form.cleaned_data['height_cm']\n                weight_kg = form.cleaned_data['weight_kg']\n            else:\n                height_ft = form.cleaned_data['height_ft']\n                height_in = form.cleaned_data['height_in']\n                weight_lb = form.cleaned_data['weight_lb']\n                # Convert Imperial to Metric for calculation\n                height_cm = ((height_ft * 12) + height_in) * 2.54\n                weight_kg = weight_lb * 0.453592\n\n            bmi = calculate_bmi(height_cm, weight_kg)\n            category = get_bmi_category(bmi)\n\n            BMIResult.objects.create(\n                height_cm=height_cm,\n                weight_kg=weight_kg,\n                bmi=bmi,\n                category=category\n            )\n\n            return render(request, 'bmi_calculator/bmi_result.html', {'bmi': bmi, 'category': category})\n    else:\n        form = BMIForm()\n    return render(request, 'bmi_calculator/bmi_calculator.html', {'form': form})"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.bmi_calculator_view, name='bmi_calculator'),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-some_random_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi_calculator.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}BMI Calculator{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"], select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 10px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #3e8e41;\n        }\n        .errorlist {\n            color: red;\n            margin-bottom: 10px;\n        }\n        .bmi-result {\n          margin-top: 20px;\n          font-size: 1.2em;\n          font-weight: bold;\n        }\n        .bmi-chart {\n            margin-top: 20px;\n            border: 1px solid #ddd;\n            padding: 10px;\n        }\n        .bmi-chart h3 {\n            margin-top: 0;\n        }\n        /* Responsive Design (Example) */\n        @media (max-width: 768px) {\n            .container {\n                width: 95%;\n            }\n        }\n    </style>\n</head>\n<body>\n    <div id=\"main-container\" class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "templates/bmi_calculator/bmi_calculator.html", "code": "{% extends 'base.html' %}\n\n{% block title %}BMI Calculator{% endblock %}\n\n{% block content %}\n    <h1 id=\"calculator-title\" class=\"mb-4\">BMI Calculator</h1>\n    <form id=\"bmi-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"calculate-button\" type=\"submit\" class=\"btn btn-primary\">Calculate BMI</button>\n    </form>\n    {% if form.errors %}\n    <div id=\"form-errors\" class=\"alert alert-danger mt-3\">\n        {% for field, errors in form.errors.items %}\n            {% for error in errors %}\n                <p>{{ field }}: {{ error }}</p>\n            {% endfor %}\n        {% endfor %}\n    </div>\n{% endif %}\n{% endblock %}"}, {"file": "bmi_result.html", "path": "templates/bmi_calculator/bmi_result.html", "code": "{% extends 'base.html' %}\n\n{% block title %}BMI Result{% endblock %}\n\n{% block content %}\n    <h1 id=\"result-title\" class=\"mb-4\">BMI Result</h1>\n    <div id=\"bmi-result\" class=\"bmi-result\">\n        <p id=\"bmi-value\">Your BMI is: {{ bmi|floatformat:2 }}</p>\n        <p id=\"bmi-category\">Category: {{ category }}</p>\n    </div>\n\n    <div id=\"bmi-chart\" class=\"bmi-chart\">\n        <h3 id=\"chart-header\">BMI Categories</h3>\n        <p id=\"underweight\">Underweight: BMI less than 18.5</p>\n        <p id=\"normal-weight\">Normal Weight: BMI between 18.5 and 24.9</p>\n        <p id=\"overweight\">Overweight: BMI between 25 and 29.9</p>\n        <p id=\"obese\">Obese: BMI 30 or greater</p>\n    </div>\n    <a id=\"calculate-again-link\" href=\"{% url 'bmi_calculator' %}\">Calculate Again</a>\n{% endblock %}"}, {"file": "admin.py", "path": "bmi_calculator/admin.py", "code": "from django.contrib import admin\nfrom .models import BMIResult\n\nadmin.site.register(BMIResult)"}, {"file": ".gitignore", "path": "./.gitignore", "code": "# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# Distribution / packaging\n.eggs/\ndist/\nbuild/\nlib/\nlib64/\nparts/\nsbin/\ndocs/\n*.egg-info/\n.installed.cfg\n*.manifest\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\n\n# Translations\n*.mo\n*.pot\n\n# Django stuff:\n*.log\nlocal_settings.py\ndb.sqlite3\n\n# Celery Beat schedule file:\ncelerybeat-schedule\n\n# Spyder project settings\n.spyderproject\n.spyproject\n\n# Rope project settings\n.ropeproject\n\n# mkdocs documentation\n/site\n\n# virtualenv\nvenv/\n.venv/\n\n# PyCharm\n.idea/\n\n# VSCode\n.vscode/\n\n# OS generated files\n.DS_Store\nThumbs.db"}, {"file": "static.txt", "path": "bmi_calculator/static/bmi_calculator/static.txt", "code": "//This is just a placeholder to make git happy\n"}, {"file": "requirements.txt", "path": "./requirements.txt", "code": "Django>=4.0,<5.0\n"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass ExchangeRate(models.Model):\n    from_currency = models.CharField(max_length=3)\n    to_currency = models.CharField(max_length=3)\n    rate = models.DecimalField(max_digits=10, decimal_places=6)\n    last_updated = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        return f'{self.from_currency} to {self.to_currency}: {self.rate}'"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import ExchangeRate\nimport json\n\ndef index(request):\n    # Implement logic to fetch currencies and initial data\n    return render(request, 'currency_converter/index.html', {})\n\ndef convert(request):\n    if request.method == 'POST':\n        data = json.loads(request.body.decode('utf-8'))\n        from_currency = data.get('from_currency')\n        to_currency = data.get('to_currency')\n        amount = float(data.get('amount'))\n\n        try:\n            exchange_rate = ExchangeRate.objects.get(\n                from_currency=from_currency, to_currency=to_currency\n            )\n            converted_amount = amount * exchange_rate.rate\n            last_updated = exchange_rate.last_updated\n            rate = exchange_rate.rate\n\n            return JsonResponse({\n                'converted_amount': converted_amount,\n                'rate': rate,\n                'last_updated': last_updated\n            })\n        except ExchangeRate.DoesNotExist:\n            return JsonResponse({'error': 'Exchange rate not found'}, status=404)\n    else:\n        return JsonResponse({'error': 'Invalid request'}, status=400)"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('convert/', views.convert, name='convert'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# No forms needed for a simple AJAX-based implementation\n# Add forms for settings page if needed\n"}, {"file": "templates/currency_converter/index.html", "path": "currency_converter/templates/currency_converter/index.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n    <script>\n        // JavaScript to handle currency conversion\n        async function convertCurrency() {\n            const fromCurrency = document.getElementById('fromCurrency').value;\n            const toCurrency = document.getElementById('toCurrency').value;\n            const amount = document.getElementById('amount').value;\n\n            const response = await fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: JSON.stringify({\n                    from_currency: fromCurrency,\n                    to_currency: toCurrency,\n                    amount: amount\n                })\n            });\n\n            const data = await response.json();\n\n            if (response.ok) {\n                document.getElementById('convertedAmount').innerText = data.converted_amount;\n                document.getElementById('rate').innerText = data.rate;\n                document.getElementById('lastUpdated').innerText = data.last_updated;\n            } else {\n                alert(data.error);\n            }\n        }\n    </script>\n</head>\n<body>\n    <h1 class=\"converter-title\" id=\"converterTitle\">Currency Converter</h1>\n\n    <div class=\"currency-input-group\" id=\"fromCurrencyGroup\">\n        <label for=\"fromCurrency\" class=\"currency-label\">From Currency:</label>\n        <select id=\"fromCurrency\" class=\"currency-select\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n            <!-- Add more currencies -->\n        </select>\n    </div>\n\n    <div class=\"currency-input-group\" id=\"toCurrencyGroup\">\n        <label for=\"toCurrency\" class=\"currency-label\">To Currency:</label>\n        <select id=\"toCurrency\" class=\"currency-select\">\n            <option value=\"EUR\">EUR</option>\n            <option value=\"USD\">USD</option>\n            <option value=\"GBP\">GBP</option>\n            <!-- Add more currencies -->\n        </select>\n    </div>\n\n    <div class=\"currency-input-group\" id=\"amountGroup\">\n        <label for=\"amount\" class=\"currency-label\">Amount:</label>\n        <input type=\"number\" id=\"amount\" class=\"currency-amount\" value=\"1\">\n    </div>\n\n    <button onclick=\"convertCurrency()\" class=\"convert-button\" id=\"convertButton\">Convert</button>\n\n    <div class=\"conversion-result\" id=\"conversionResult\">\n        <h2>Conversion Result:</h2>\n        <p>Converted Amount: <span id=\"convertedAmount\" class=\"converted-amount\"></span></p>\n        <p>Exchange Rate: <span id=\"rate\" class=\"exchange-rate\"></span></p>\n        <p>Last Updated: <span id=\"lastUpdated\" class=\"last-updated\"></span></p>\n    </div>\n\n</body>\n</html>"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import ExchangeRate\n\nadmin.site.register(ExchangeRate)"}, {"file": "settings.py", "path": "currency_converter_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases/\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators/\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "currency_converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('currency/', include('currency_converter.urls')), #Include app URLs\n    path('admin/', admin.site.urls),\n]"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "wsgi.py", "path": "currency_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "3": [{"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# Example model (optional, if you want to store settings in a database)\n# class UserSettings(models.Model):\n#     user = models.ForeignKey(User, on_delete=models.CASCADE)\n#     default_password_length = models.IntegerField(default=12)\n#     include_uppercase = models.BooleanField(default=True)\n#     include_lowercase = models.BooleanField(default=True)\n#     include_numbers = models.BooleanField(default=True)\n#     include_symbols = models.BooleanField(default=True)\n\n#     def __str__(self):\n#         return f'Settings for {self.user.username}'"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nimport secrets\nimport string\nimport json\nfrom django.http import JsonResponse\nfrom django.views.decorators.csrf import csrf_exempt\n\n\ndef home(request):\n    return render(request, 'password_generator/home.html')\n\ndef about(request):\n    return render(request, 'password_generator/about.html')\n\ndef settings(request):\n    return render(request, 'password_generator/settings.html')\n\n@csrf_exempt\ndef generate_password(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        length = data.get('length', 12)\n        include_uppercase = data.get('uppercase', True)\n        include_lowercase = data.get('lowercase', True)\n        include_numbers = data.get('numbers', True)\n        include_symbols = data.get('symbols', True)\n        exclude_similar = data.get('exclude_similar', False)\n\n        characters = ''\n        if include_uppercase:\n            characters += string.ascii_uppercase\n        if include_lowercase:\n            characters += string.ascii_lowercase\n        if include_numbers:\n            characters += string.digits\n        if include_symbols:\n            characters += string.punctuation\n\n        if exclude_similar:\n            chars_to_exclude = 'l1O0'\n            characters = ''.join(c for c in characters if c not in chars_to_exclude)\n\n        if not characters:\n            return JsonResponse({'error': 'Please select at least one character set.'}, status=400)\n\n        password = ''.join(secrets.choice(characters) for _ in range(length))\n        return JsonResponse({'password': password})\n    else:\n        return JsonResponse({'error': 'Invalid request method.'}, status=400)"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('settings/', views.settings, name='settings'),\n    path('generate_password/', views.generate_password, name='generate_password'),\n]"}, {"file": "forms.py", "path": "password_generator/forms.py", "code": "# You might not need forms.py if you handle settings via JavaScript/AJAX.\n# Example Form (if you use Django forms to manage user settings):\n# from django import forms\n\n# class SettingsForm(forms.Form):\n#     default_password_length = forms.IntegerField(label='Default Password Length', initial=12, min_value=8, max_value=32)\n#     include_uppercase = forms.BooleanField(label='Include Uppercase', initial=True, required=False)\n#     include_lowercase = forms.BooleanField(label='Include Lowercase', initial=True, required=False)\n#     include_numbers = forms.BooleanField(label='Include Numbers', initial=True, required=False)\n#     include_symbols = forms.BooleanField(label='Include Symbols', initial=True, required=False)"}, {"file": "home.html", "path": "password_generator/templates/password_generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <style>\n      body {\n          font-family: sans-serif;\n          margin: 20px;\n      }\n\n      input[type=\"text\"], input[type=\"number\"] {\n          padding: 5px;\n          border: 1px solid #ccc;\n          border-radius: 4px;\n          box-sizing: border-box;\n          margin-bottom: 10px;\n      }\n\n      button {\n          background-color: #4CAF50;\n          color: white;\n          padding: 10px 20px;\n          border: none;\n          border-radius: 4px;\n          cursor: pointer;\n      }\n\n      button:hover {\n          background-color: #3e8e41;\n      }\n    </style>\n</head>\n<body>\n    <h1 class=\"main-title\">Password Generator</h1>\n    <div class=\"form-group\">\n        <label for=\"passwordLength\" class=\"form-label\">Password Length:</label>\n        <input type=\"number\" id=\"passwordLength\" class=\"form-control\" value=\"12\" min=\"8\" max=\"32\">\n    </div>\n\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"includeUppercase\" class=\"form-check-input\" checked>\n        <label for=\"includeUppercase\" class=\"form-check-label\">Include Uppercase</label>\n    </div>\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"includeLowercase\" class=\"form-check-input\" checked>\n        <label for=\"includeLowercase\" class=\"form-check-label\">Include Lowercase</label>\n    </div>\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"includeNumbers\" class=\"form-check-input\" checked>\n        <label for=\"includeNumbers\" class=\"form-check-label\">Include Numbers</label>\n    </div>\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"includeSymbols\" class=\"form-check-input\" checked>\n        <label for=\"includeSymbols\" class=\"form-check-label\">Include Symbols</label>\n    </div>\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"excludeSimilar\" class=\"form-check-input\">\n        <label for=\"excludeSimilar\" class=\"form-check-label\">Exclude Similar Characters</label>\n    </div>\n\n    <button id=\"generateButton\" class=\"btn btn-primary\">Generate Password</button>\n\n    <div class=\"form-group\">\n        <label for=\"generatedPassword\" class=\"form-label\">Generated Password:</label>\n        <input type=\"text\" id=\"generatedPassword\" class=\"form-control\" readonly>\n    </div>\n\n    <button id=\"copyButton\" class=\"btn btn-secondary\">Copy to Clipboard</button>\n\n    <div class=\"links\">\n        <a href=\"{% url 'about' %}\">About</a> | <a href=\"{% url 'settings' %}\">Settings</a>\n    </div>\n\n    <script>\n        document.getElementById('generateButton').addEventListener('click', function() {\n            const length = document.getElementById('passwordLength').value;\n            const uppercase = document.getElementById('includeUppercase').checked;\n            const lowercase = document.getElementById('includeLowercase').checked;\n            const numbers = document.getElementById('includeNumbers').checked;\n            const symbols = document.getElementById('includeSymbols').checked;\n            const excludeSimilar = document.getElementById('excludeSimilar').checked;\n\n            fetch('/generate_password/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': getCookie('csrftoken')  // Important for Django CSRF protection\n                },\n                body: JSON.stringify({\n                    length: parseInt(length),\n                    uppercase: uppercase,\n                    lowercase: lowercase,\n                    numbers: numbers,\n                    symbols: symbols,\n                    exclude_similar: excludeSimilar\n                })\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.password) {\n                    document.getElementById('generatedPassword').value = data.password;\n                } else if (data.error) {\n                    alert(data.error);\n                }\n            })\n            .catch(error => console.error('Error:', error));\n        });\n\n        document.getElementById('copyButton').addEventListener('click', function() {\n            const passwordField = document.getElementById('generatedPassword');\n            passwordField.select();\n            document.execCommand('copy');\n            alert('Password copied to clipboard!');\n        });\n\n        // Function to get CSRF token from cookies\n        function getCookie(name) {\n            let cookieValue = null;\n            if (document.cookie && document.cookie !== '') {\n                const cookies = document.cookie.split(';');\n                for (let i = 0; i < cookies.length; i++) {\n                    const cookie = cookies[i].trim();\n                    // Does this cookie string begin with the name we want?\n                    if (cookie.substring(0, name.length + 1) === (name + '=')) {\n                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                        break;\n                    }\n                }\n            }\n            return cookieValue;\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator/templates/password_generator/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Password Generator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1 class=\"about-title\">About Password Generator</h1>\n    <p class=\"about-text\">This password generator helps you create strong and secure passwords.</p>\n    <p class=\"about-text\">The generated passwords are random and are not stored on our servers.</p>\n    <p class=\"about-text\">Contact us at: example@example.com</p>\n    <div class=\"links\">\n        <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'settings' %}\">Settings</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.html", "path": "password_generator/templates/password_generator/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Settings</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n    </style>\n</head>\n<body>\n    <h1 class=\"settings-title\">Settings</h1>\n    <div class=\"form-group\">\n        <label for=\"defaultPasswordLength\" class=\"form-label\">Default Password Length:</label>\n        <input type=\"number\" id=\"defaultPasswordLength\" class=\"form-control\" value=\"12\" min=\"8\" max=\"32\">\n    </div>\n\n    <p class=\"settings-label\">Default Character Set:</p>\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"defaultUppercase\" class=\"form-check-input\" checked>\n        <label for=\"defaultUppercase\" class=\"form-check-label\">Uppercase</label>\n    </div>\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"defaultLowercase\" class=\"form-check-input\" checked>\n        <label for=\"defaultLowercase\" class=\"form-check-label\">Lowercase</label>\n    </div>\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"defaultNumbers\" class=\"form-check-input\" checked>\n        <label for=\"defaultNumbers\" class=\"form-check-label\">Numbers</label>\n    </div>\n    <div class=\"form-check\">\n        <input type=\"checkbox\" id=\"defaultSymbols\" class=\"form-check-input\" checked>\n        <label for=\"defaultSymbols\" class=\"form-check-label\">Symbols</label>\n    </div>\n\n    <button id=\"saveSettings\" class=\"btn btn-primary\">Save Settings</button>\n    <div class=\"links\">\n        <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a>\n    </div>\n\n    <script>\n    // Example using localStorage (alternatively, use AJAX to save to the server)\n    document.getElementById('saveSettings').addEventListener('click', function() {\n        const length = document.getElementById('defaultPasswordLength').value;\n        const uppercase = document.getElementById('defaultUppercase').checked;\n        const lowercase = document.getElementById('defaultLowercase').checked;\n        const numbers = document.getElementById('defaultNumbers').checked;\n        const symbols = document.getElementById('defaultSymbols').checked;\n\n        localStorage.setItem('defaultPasswordLength', length);\n        localStorage.setItem('defaultUppercase', uppercase);\n        localStorage.setItem('defaultLowercase', lowercase);\n        localStorage.setItem('defaultNumbers', numbers);\n        localStorage.setItem('defaultSymbols', symbols);\n\n        alert('Settings Saved!');\n    });\n\n    // Load settings from localStorage on page load\n    window.onload = function() {\n        const length = localStorage.getItem('defaultPasswordLength') || 12;\n        const uppercase = localStorage.getItem('defaultUppercase') === 'true';\n        const lowercase = localStorage.getItem('defaultLowercase') === 'true';\n        const numbers = localStorage.getItem('defaultNumbers') === 'true';\n        const symbols = localStorage.getItem('defaultSymbols') === 'true';\n\n        document.getElementById('defaultPasswordLength').value = length;\n        document.getElementById('defaultUppercase').checked = uppercase;\n        document.getElementById('defaultLowercase').checked = lowercase;\n        document.getElementById('defaultNumbers').checked = numbers;\n        document.getElementById('defaultSymbols').checked = symbols;\n    }\n    </script>\n</body>\n</html>"}, {"file": "password_generator.css", "path": "password_generator/static/password_generator/password_generator.css", "code": "/* Basic CSS for styling */\nbody {\n    font-family: sans-serif;\n    margin: 20px;\n}\n\ninput[type=\"text\"], input[type=\"number\"] {\n    padding: 5px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n    margin-bottom: 10px;\n}\n\nbutton {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\nbutton:hover {\n    background-color: #3e8e41;\n}\n"}, {"file": "wsgi.py", "path": "password_generator_project/password_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "password_generator_project/password_generator_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\nfrom django.core.asgi import get_asgi_application\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "password_generator_project/password_generator_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-7$69#o!d(s0x^u0l8-9@y+!5h0)s3j5z(x!n0o&w90-1y3-6r='\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION_NEW = 'password_generator_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'password_generator/static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nWSGI_APPLICATION = 'password_generator_project.wsgi.application'"}, {"file": "urls.py", "path": "password_generator_project/password_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),\n]"}], "4": [{"file": "urls.py", "path": "qr_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('help/', views.help_page, name='help'),\n    path('generate_qr/', views.generate_qr, name='generate_qr'), # POST endpoint\n]"}, {"file": "views.py", "path": "qr_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport qrcode\nfrom io import BytesIO\nimport base64\nfrom django.views.decorators.csrf import csrf_exempt\n\n@csrf_exempt\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef about(request):\n    return render(request, 'about.html')\n\n\ndef help_page(request):\n    return render(request, 'help.html')\n\n@csrf_exempt\ndef generate_qr(request):\n    if request.method == 'POST':\n        data = request.POST.get('data', '')\n        data_type = request.POST.get('data_type', 'TEXT')\n        color = request.POST.get('color', '000000')\n        bg_color = request.POST.get('bg_color', 'FFFFFF')\n        logo_url = request.POST.get('logo_url', '')\n        error_correction = request.POST.get('error_correction', 'M')\n        short_url = request.POST.get('short_url', '')\n\n        # Generate QR Code\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.ERROR_CORRECT_M if error_correction == 'M' else qrcode.ERROR_CORRECT_L if error_correction == 'L' else qrcode.ERROR_CORRECT_H if error_correction == 'H' else qrcode.ERROR_CORRECT_Q,\n            box_size=10,\n            border=4,\n        )\n        if short_url:\n            #Shorten URL logic here (not implemented yet)\n            data = short_url\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=('#' + color), back_color=('#' + bg_color))\n\n        # Save the image to a buffer\n        buffer = BytesIO()\n        img.save(buffer, format='PNG')\n        img_str = base64.b64encode(buffer.getvalue()).decode()\n\n        return JsonResponse({'image': img_str})\n    else:\n        return JsonResponse({'error': 'Invalid request method'})"}, {"file": "models.py", "path": "qr_generator/models.py", "code": "from django.db import models\n\n# You might not need models for this project initially.\n# If you want to store QR code generation history, you can define a model here.\n\n# Example:\n# class QRCodeHistory(models.Model):\n#     data = models.TextField()\n#     data_type = models.CharField(max_length=50)\n#     created_at = models.DateTimeField(auto_now_add=True)"}, {"file": "forms.py", "path": "qr_generator/forms.py", "code": "from django import forms\n\n# Forms are not strictly required because the data is sent via AJAX.\n# However, if you want server-side form validation, you can define a form here.\n\n# Example:\n# class QRCodeForm(forms.Form):\n#     data = forms.CharField(label='Data')\n#     data_type = forms.ChoiceField(label='Data Type', choices=[('URL', 'URL'), ('TEXT', 'Text')]"}, {"file": "settings.py", "path": "qr_generator_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'qr_generator/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_generator_project.wsgi.application'\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'qr_generator/static')]\n\n\n# Ensure that 'qr_generator' is added to INSTALLED_APPS\n# Configure TEMPLATES to point to your templates directory\n# Configure STATIC_URL and STATICFILES_DIRS for serving static files\n\n#Example in INSTALLED_APPS:\n#INSTALLED_APPS = [\n#    ...\n#    'qr_generator',\n#]"}, {"file": "urls.py", "path": "qr_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "home.html", "path": "qr_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"main-title\" class=\"title\">QR Code Generator</h1>\n\n        <div class=\"input-group\">\n            <label for=\"data-input\" class=\"label\">Data:</label>\n            <input type=\"text\" id=\"data-input\" class=\"input\" placeholder=\"Enter data here\">\n        </div>\n\n        <div class=\"input-group\">\n            <label for=\"data-type-select\" class=\"label\">Data Type:</label>\n            <select id=\"data-type-select\" class=\"select\">\n                <option value=\"TEXT\">Text</option>\n                <option value=\"URL\">URL</option>\n                <option value=\"EMAIL\">Email</option>\n                <option value=\"PHONE\">Phone Number</option>\n            </select>\n        </div>\n\n        <div class=\"input-group color-picker\">\n            <label for=\"color-input\" class=\"label\">Color:</label>\n            <input type=\"color\" id=\"color-input\" class=\"color\" value=\"#000000\">\n        </div>\n\n        <div class=\"input-group color-picker\">\n            <label for=\"bg-color-input\" class=\"label\">Background Color:</label>\n            <input type=\"color\" id=\"bg-color-input\" class=\"color\" value=\"#FFFFFF\">\n        </div>\n\n        <div class=\"input-group\">\n            <label for=\"error-correction-select\" class=\"label\">Error Correction:</label>\n            <select id=\"error-correction-select\" class=\"select\">\n                <option value=\"L\">L (Low)</option>\n                <option value=\"M\" selected>M (Medium)</option>\n                <option value=\"Q\">Q (Quartile)</option>\n                <option value=\"H\">H (High)</option>\n            </select>\n        </div>\n\n        <button id=\"generate-button\" class=\"button\" onclick=\"generateQRCode()\">Generate QR Code</button>\n        <img id=\"qr-code-image\" class=\"qr-code\" src=\"\" alt=\"QR Code\">\n\n        <div class=\"links\">\n            <a href=\"{% url 'about' %}\" class=\"link\">About</a>\n            <a href=\"{% url 'help' %}\" class=\"link\">Help</a>\n        </div>\n    </div>\n\n    <script>\n        function generateQRCode() {\n            const data = document.getElementById('data-input').value;\n            const dataType = document.getElementById('data-type-select').value;\n            const color = document.getElementById('color-input').value.substring(1); // Remove #\n            const bgColor = document.getElementById('bg-color-input').value.substring(1);\n            const errorCorrection = document.getElementById('error-correction-select').value;\n\n            const formData = new FormData();\n            formData.append('data', data);\n            formData.append('data_type', dataType);\n            formData.append('color', color);\n            formData.append('bg_color', bgColor);\n            formData.append('error_correction', errorCorrection);\n\n            fetch('/generate_qr/', {\n                method: 'POST',\n                body: formData,\n                headers: {\n                    'X-CSRFToken': '{{ csrf_token }}'\n                }\n            })\n            .then(response => response.json())\n            .then(data => {\n                document.getElementById('qr-code-image').src = 'data:image/png;base64,' + data.image;\n            });\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "qr_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About This QR Code Generator</h1>\n        <p id=\"about-text\" class=\"text\">This website allows you to generate QR codes easily.</p>\n\n        <div class=\"links\">\n            <a href=\"{% url 'home' %}\" class=\"link\">Home</a>\n            <a href=\"{% url 'help' %}\" class=\"link\">Help</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "help.html", "path": "qr_generator/templates/help.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Help/FAQ</title>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"help-title\" class=\"title\">Help/FAQ</h1>\n        <p id=\"help-text\" class=\"text\">Find answers to common questions here.</p>\n\n        <div class=\"links\">\n            <a href=\"{% url 'home' %}\" class=\"link\">Home</a>\n            <a href=\"{% url 'about' %}\" class=\"link\">About</a>\n        </div>\n    </div>\n</body>\n</html>"}], "5": [{"file": "mysite/settings.py", "path": "mysite/mysite/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong secret key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'markdown_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] "}, {"file": "mysite/urls.py", "path": "mysite/mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('markdown_converter.urls')),\n]"}, {"file": "mysite/wsgi.py", "path": "mysite/mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()"}, {"file": "markdown_converter/models.py", "path": "markdown_converter/models.py", "code": "from django.db import models\n\n# You can add models here if needed, for example, to store user preferences.\n# class UserPreferences(models.Model):\n#     user = models.ForeignKey(User, on_delete=models.CASCADE)\n#     theme = models.CharField(max_length=20, default='light')\n\n"}, {"file": "markdown_converter/views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse, JsonResponse, HttpResponseBadRequest\nimport markdown\nimport os\nfrom django.views.decorators.csrf import csrf_exempt\n\ndef home(request):\n    return render(request, 'home.html')\n\n@csrf_exempt\ndef convert_markdown(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        return JsonResponse({'html': html})\n    return JsonResponse({'error': 'Invalid request'})\n\n@csrf_exempt\ndef download_html(request):\n    if request.method == 'POST':\n        html_content = request.POST.get('html_content', '')\n        response = HttpResponse(html_content, content_type='text/html')\n        response['Content-Disposition'] = 'attachment; filename=\"converted.html\"'\n        return response\n    return HttpResponseBadRequest('Invalid request')\n\n\ndef settings(request):\n    return render(request, 'settings.html')\n\n\ndef help_about(request):\n    return render(request, 'help_about.html')"}, {"file": "markdown_converter/urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert_markdown, name='convert_markdown'),\n    path('download/', views.download_html, name='download_html'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help_about, name='help_about'),\n]"}, {"file": "markdown_converter/forms.py", "path": "markdown_converter/forms.py", "code": "from django import forms\n\n# You can add forms here if needed, for example, for settings.\n# class SettingsForm(forms.Form):\n#     theme = forms.ChoiceField(choices=[('light', 'Light'), ('dark', 'Dark')])\n"}, {"file": "markdown_converter/templates/home.html", "path": "markdown_converter/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown Converter</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"main-title\" class=\"title\">Markdown Converter</h1>\n        <div class=\"input-output-container\">\n            <textarea id=\"markdown-input\" class=\"input-area\" placeholder=\"Enter Markdown Text Here\"></textarea>\n            <div id=\"html-output\" class=\"output-area\"></div>\n        </div>\n        <div class=\"button-container\">\n            <button id=\"convert-button\" class=\"button\">Convert</button>\n            <button id=\"download-button\" class=\"button\">Download HTML</button>\n            <button id=\"copy-button\" class=\"button\">Copy HTML</button>\n            <button id=\"clear-button\" class=\"button\">Clear</button>\n        </div>\n    </div>\n\n    <script>\n        document.getElementById('convert-button').addEventListener('click', function() {\n            const markdownText = document.getElementById('markdown-input').value;\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: 'markdown_text=' + encodeURIComponent(markdownText)\n            })\n            .then(response => response.json())\n            .then(data => {\n                document.getElementById('html-output').innerHTML = data.html;\n            });\n        });\n\n        document.getElementById('download-button').addEventListener('click', function() {\n            const htmlContent = document.getElementById('html-output').innerHTML;\n            fetch('/download/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: 'html_content=' + encodeURIComponent(htmlContent)\n            })\n            .then(response => response.blob())\n            .then(blob => {\n                const url = window.URL.createObjectURL(blob);\n                const a = document.createElement('a');\n                a.href = url;\n                a.download = 'converted.html';\n                document.body.appendChild(a);\n                a.click();\n                a.remove();\n            });\n        });\n\n       document.getElementById('copy-button').addEventListener('click', function() {\n            const htmlContent = document.getElementById('html-output').innerHTML;\n            navigator.clipboard.writeText(htmlContent)\n                .then(() => {\n                    alert('HTML copied to clipboard!');\n                })\n                .catch(err => {\n                    console.error('Failed to copy: ', err);\n                });\n        });\n\n        document.getElementById('clear-button').addEventListener('click', function() {\n           document.getElementById('markdown-input').value = '';\n           document.getElementById('html-output').innerHTML = '';\n        });\n    </script>\n</body>\n</html>"}, {"file": "markdown_converter/templates/settings.html", "path": "markdown_converter/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Settings</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n        <p>Theme selection and other settings will be implemented here.</p>\n    </div>\n</body>\n</html>"}, {"file": "markdown_converter/templates/help_about.html", "path": "markdown_converter/templates/help_about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Help / About</title>\n    <link rel=\"stylesheet\" href=\"/static/style.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"help-title\" class=\"title\">Help / About</h1>\n        <p>Markdown syntax guide and about information will be implemented here.</p>\n    </div>\n</body>\n</html>"}, {"file": "markdown_converter/static/style.css", "path": "markdown_converter/static/style.css", "code": "/* Basic CSS for styling */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    text-align: center;\n    margin-bottom: 20px;\n    color: #0056b3;\n}\n\n.input-output-container {\n    display: flex;\n    gap: 20px;\n}\n\n.input-area, .output-area {\n    width: 100%;\n    height: 300px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n    font-size: 16px;\n    resize: vertical;\n    overflow: auto;\n}\n\n.button-container {\n    margin-top: 20px;\n    text-align: center;\n}\n\n.button {\n    padding: 10px 20px;\n    margin: 0 10px;\n    border: none;\n    background-color: #007bff;\n    color: white;\n    border-radius: 5px;\n    cursor: pointer;\n    font-size: 16px;\n    transition: background-color 0.3s;\n}\n\n.button:hover {\n    background-color: #0056b3;\n}\n"}, {"file": "markdown_converter/admin.py", "path": "markdown_converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "markdown_converter/apps.py", "path": "markdown_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MarkdownConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'markdown_converter'\n"}], "7": [{"file": "models.py", "path": "budget_app/models.py", "code": "from django.db import models\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.CharField(max_length=255)\n    transaction_type = models.CharField(max_length=10, choices=[('income', 'Income'), ('expense', 'Expense')])\n\n    def __str__(self):\n        return self.description\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.category"}, {"file": "views.py", "path": "budget_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import JsonResponse\nfrom .models import Transaction, Budget\nimport json\n\ndef homepage(request):\n    # Implement Balance Overview, Recent Transactions, Budget Summary, Add Transaction Shortcut\n    transactions = Transaction.objects.all().order_by('-date')[:5] # Recent Transactions\n    total_income = sum([t.amount for t in Transaction.objects.filter(transaction_type='income')])\n    total_expenses = sum([t.amount for t in Transaction.objects.filter(transaction_type='expense')])\n    balance = total_income - total_expenses  # Balance Overview\n\n    budget_summary = {}\n    for budget in Budget.objects.all():\n        spent = sum([t.amount for t in Transaction.objects.filter(category=budget.category, transaction_type='expense')])\n        budget_summary[budget.category] = {'budgeted': budget.amount, 'spent': spent}\n\n    context = {\n        'balance': balance,\n        'transactions': transactions,\n        'budget_summary': budget_summary,\n    }\n    return render(request, 'homepage.html', context)\n\n\ndef transactions_view(request):\n    # Implement View All Transactions, Filter Transactions, Add New Transaction, Edit Transaction, Delete Transaction, Search Transactions\n    if request.method == 'POST' and request.content_type == 'application/json':\n      data = json.loads(request.body.decode('utf-8'))\n      date = data.get('date')\n      description = data.get('description')\n      amount = data.get('amount')\n      category = data.get('category')\n      transaction_type = data.get('transaction_type')\n      transaction = Transaction(date=date, description=description, amount=amount, category=category, transaction_type=transaction_type)\n      transaction.save()\n      return JsonResponse({'message': 'Transaction added successfully'}) # for Add New Transaction\n    \n    transactions = Transaction.objects.all().order_by('-date')\n    context = {'transactions': transactions}\n    return render(request, 'transactions.html', context)\n\ndef budgets_view(request):\n    # Implement Create New Budget, View Budgets, Edit Budget, Delete Budget, Budget Progress\n    budgets = Budget.objects.all()\n    context = {'budgets': budgets}\n    return render(request, 'budgets.html', context)\n\n\ndef reports_view(request):\n    # Implement Balance Chart, Spending Breakdown, Income vs. Expenses, Custom Report, Download Report\n    context = {}\n    return render(request, 'reports.html', context)\n\n\ndef settings_view(request):\n    # Implement Change Currency, Edit Profile, Set Budget Reminders, Change Password, Connect Bank Account\n    context = {}\n    return render(request, 'settings.html', context)"}, {"file": "urls.py", "path": "budget_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('transactions/', views.transactions_view, name='transactions'),\n    path('budgets/', views.budgets_view, name='budgets'),\n    path('reports/', views.reports_view, name='reports'),\n    path('settings/', views.settings_view, name='settings'),\n]"}, {"file": "settings.py", "path": "budget_project/settings.py", "code": "# Assuming a standard Django project structure\n# ... (other settings)\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget_app',  # Add your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "homepage.html", "path": "budget_app/templates/homepage.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"homepage-container\" class=\"container\">\n        <h1 id=\"homepage-title\" class=\"title\">Homepage</h1>\n        <h2 id=\"balance-overview\" class=\"subtitle\">Balance Overview: {{ balance }}</h2>\n\n        <section id=\"recent-transactions\" class=\"section\">\n            <h2 class=\"section-title\">Recent Transactions</h2>\n            <ul id=\"transaction-list\" class=\"list\">\n                {% for transaction in transactions %}\n                    <li class=\"list-item\" id=\"transaction-{{ forloop.counter }}\">{{ transaction.date }} - {{ transaction.description }} - {{ transaction.amount }}</li>\n                {% endfor %}\n            </ul>\n        </section>\n\n        <section id=\"budget-summary\" class=\"section\">\n            <h2 class=\"section-title\">Budget Summary</h2>\n            {% for category, summary in budget_summary.items() %}\n                <p id=\"budget-{{ category|slugify }}\" class=\"budget-item\">{{ category }}: Budgeted - {{ summary.budgeted }}, Spent - {{ summary.spent }}</p>\n            {% endfor %}\n        </section>\n\n        <div id=\"navigation-links\" class=\"navigation\">\n            <a id=\"view-transactions-link\" class=\"button\" href=\"{% url 'transactions' %}\">View All Transactions</a>\n            <a id=\"view-budgets-link\" class=\"button\" href=\"{% url 'budgets' %}\">View Budgets</a>\n            <a id=\"view-reports-link\" class=\"button\" href=\"{% url 'reports' %}\">View Reports</a>\n            <a id=\"view-settings-link\" class=\"button\" href=\"{% url 'settings' %}\">View Settings</a>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "transactions.html", "path": "budget_app/templates/transactions.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"transactions-container\" class=\"container\">\n        <h1 id=\"transactions-title\" class=\"title\">Transactions</h1>\n        <ul id=\"transaction-list\" class=\"list\">\n            {% for transaction in transactions %}\n                <li id=\"transaction-{{ forloop.counter }}\" class=\"list-item\">\n                    {{ transaction.date }} - {{ transaction.description }} - {{ transaction.amount }} - {{ transaction.category }} - {{ transaction.transaction_type }}\n                </li>\n            {% endfor %}\n        </ul>\n\n        <a id=\"back-to-homepage-link\" class=\"button\" href=\"{% url 'homepage' %}\">Back to Homepage</a>\n    </div>\n{% endblock %}"}, {"file": "budgets.html", "path": "budget_app/templates/budgets.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"budgets-container\" class=\"container\">\n        <h1 id=\"budgets-title\" class=\"title\">Budgets</h1>\n        <ul id=\"budget-list\" class=\"list\">\n            {% for budget in budgets %}\n                <li id=\"budget-{{ forloop.counter }}\" class=\"list-item\">\n                    {{ budget.category }} - {{ budget.amount }}\n                </li>\n            {% endfor %}\n        </ul>\n\n        <a id=\"back-to-homepage-link\" class=\"button\" href=\"{% url 'homepage' %}\">Back to Homepage</a>\n    </div>\n{% endblock %}"}, {"file": "reports.html", "path": "budget_app/templates/reports.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"reports-container\" class=\"container\">\n        <h1 id=\"reports-title\" class=\"title\">Reports</h1>\n        <p id=\"reports-content\" class=\"content\">Reports Page Content</p>\n\n        <a id=\"back-to-homepage-link\" class=\"button\" href=\"{% url 'homepage' %}\">Back to Homepage</a>\n    </div>\n{% endblock %}"}, {"file": "settings.html", "path": "budget_app/templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"settings-container\" class=\"container\">\n        <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n        <p id=\"settings-content\" class=\"content\">Settings Page Content</p>\n\n        <a id=\"back-to-homepage-link\" class=\"button\" href=\"{% url 'homepage' %}\">Back to Homepage</a>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "budget_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget App</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n            padding: 20px;\n        }\n        .title {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n        .section {\n            margin-bottom: 20px;\n            padding: 10px;\n            background-color: #fff;\n            border: 1px solid #ddd;\n        }\n        .section-title {\n            font-size: 1.2em;\n            margin-bottom: 10px;\n        }\n        .list {\n            list-style: none;\n            padding: 0;\n        }\n        .list-item {\n            padding: 8px;\n            border-bottom: 1px solid #eee;\n        }\n        .list-item:last-child {\n            border-bottom: none;\n        }\n        .budget-item {\n            padding: 5px;\n        }\n        .navigation {\n            text-align: center;\n        }\n        .button {\n            display: inline-block;\n            padding: 10px 20px;\n            margin: 5px;\n            background-color: #5cb85c;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n        }\n        .button:hover {\n            background-color: #4cae4c;\n        }\n    </style>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "wsgi.py", "path": "budget_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "budget_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget_app.urls'))\n]"}, {"file": "__init__.py", "path": "budget_app/__init__.py", "code": "default_app_config = 'budget_app.apps.BudgetAppConfig'"}, {"file": "apps.py", "path": "budget_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BudgetAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget_app'"}, {"file": "admin.py", "path": "budget_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction, Budget\n\nadmin.site.register(Transaction)\nadmin.site.register(Budget)"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    location = models.CharField(max_length=200, blank=True)\n    category = models.CharField(max_length=100, blank=True)\n    attendees = models.ManyToManyField('auth.User', related_name='events', blank=True)\n    recurrence = models.CharField(max_length=50, blank=True) # e.g., 'daily', 'weekly', 'monthly'\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title\n\nclass Calendar(models.Model):\n    name = models.CharField(max_length=100)\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.urls import reverse\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Event, Calendar\nfrom .forms import EventForm, CalendarForm\nfrom django.http import HttpResponse\nimport json\nfrom django.core import serializers\n\n@login_required\ndef calendar_view(request):\n    # Placeholder for calendar view logic\n    events = Event.objects.filter(user=request.user)\n    return render(request, 'calendar_app/calendar.html', {'events': events})\n\n\n@login_required\ndef event_create(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            event = form.save(commit=False)\n            event.user = request.user\n            event.save()\n            form.save_m2m()\n            return redirect('calendar') # Redirect to calendar view\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/event_form.html', {'form': form})\n\n\n@login_required\ndef event_edit(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            event = form.save()\n            return redirect('calendar')  # Redirect to calendar view\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/event_form.html', {'form': form})\n\n@login_required\ndef event_delete(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('calendar') # Redirect to calendar view\n    return render(request, 'calendar_app/event_confirm_delete.html', {'event': event})\n\n@login_required\ndef calendar_list(request):\n    calendars = Calendar.objects.filter(user=request.user)\n    return render(request, 'calendar_app/calendar_list.html', {'calendars': calendars})\n\n@login_required\ndef calendar_create(request):\n    if request.method == 'POST':\n        form = CalendarForm(request.POST)\n        if form.is_valid():\n            calendar = form.save(commit=False)\n            calendar.user = request.user\n            calendar.save()\n            return redirect('calendar_list')  # Redirect to calendar list\n    else:\n        form = CalendarForm()\n    return render(request, 'calendar_app/calendar_form.html', {'form': form})\n\n@login_required\ndef calendar_edit(request, calendar_id):\n    calendar = get_object_or_404(Calendar, pk=calendar_id, user=request.user)\n    if request.method == 'POST':\n        form = CalendarForm(request.POST, instance=calendar)\n        if form.is_valid():\n            calendar = form.save()\n            return redirect('calendar_list')  # Redirect to calendar list\n    else:\n        form = CalendarForm(instance=calendar)\n    return render(request, 'calendar_app/calendar_form.html', {'form': form})\n\n\n@login_required\ndef calendar_delete(request, calendar_id):\n    calendar = get_object_or_404(Calendar, pk=calendar_id, user=request.user)\n    if request.method == 'POST':\n        calendar.delete()\n        return redirect('calendar_list')  # Redirect to calendar list\n    return render(request, 'calendar_app/calendar_confirm_delete.html', {'calendar': calendar})\n\n\n@login_required\ndef get_events_json(request):\n    events = Event.objects.filter(user=request.user)\n    data = serializers.serialize('json', events)\n    return HttpResponse(data, content_type='application/json')\n"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event, Calendar\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time', 'location', 'category', 'attendees', 'recurrence']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }\n\nclass CalendarForm(forms.ModelForm):\n    class Meta:\n        model = Calendar\n        fields = ['name']"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.calendar_view, name='calendar'),\n    path('event/create/', views.event_create, name='event_create'),\n    path('event/<int:event_id>/edit/', views.event_edit, name='event_edit'),\n    path('event/<int:event_id>/delete/', views.event_delete, name='event_delete'),\n    path('calendars/', views.calendar_list, name='calendar_list'),\n    path('calendar/create/', views.calendar_create, name='calendar_create'),\n    path('calendar/<int:calendar_id>/edit/', views.calendar_edit, name='calendar_edit'),\n    path('calendar/<int:calendar_id>/delete/', views.calendar_delete, name='calendar_delete'),\n    path('events_json/', views.get_events_json, name='get_events_json'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# Include these lines in your settings.py file\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n    'crispy_forms',\n    'crispy_bootstrap5',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = []\nSTATIC_ROOT = 'static'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = '/'\nLOGOUT_REDIRECT_URL = '/'\n\nCRISPY_TEMPLATE_PACK = 'bootstrap5'\n\nSECRET_KEY = 'your_secret_key_here'"}, {"file": "admin.py", "path": "calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event, Calendar\n\nadmin.site.register(Event)\nadmin.site.register(Calendar)"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('django.contrib.auth.urls')),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "base.html", "path": "calendar_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Calendar App{% endblock %}</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <nav id=\"navbar\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"container-fluid\">\n            <a id=\"brand\" class=\"navbar-brand\" href=\"#\">Calendar</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav\">\n                    <li class=\"nav-item\">\n                        <a id=\"home-link\" class=\"nav-link active\" aria-current=\"page\" href=\"{% url 'calendar' %}\">Home</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"calendar-list-link\" class=\"nav-link\" href=\"{% url 'calendar_list' %}\">Calendars</a>\n                    </li>\n                    {% if user.is_authenticated %}\n                    <li class=\"nav-item\">\n                        <a id=\"logout-link\" class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n                    </li>\n                    {% else %}\n                    <li class=\"nav-item\">\n                        <a id=\"login-link\" class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"register-link\" class=\"nav-link\" href=\"{% url 'register' %}\">Register</a>\n                    </li>\n                    {% endif %}\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    <div id=\"content\" class=\"container mt-4\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar_app/calendar.html", "code": "{% extends 'base.html' %}\n\n{% block title %}Calendar{% endblock %}\n\n{% block content %}\n  <h1 id=\"calendar-title\" class=\"mb-4\">Calendar</h1>\n  <a id=\"create-event-link\" href=\"{% url 'event_create' %}\" class=\"btn btn-primary mb-3\">Create Event</a>\n\n  <div id=\"events-container\" class=\"row\">\n    {% for event in events %}\n      <div id=\"event-card-{{ event.id }}\" class=\"col-md-4 mb-3\">\n        <div class=\"card\">\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{ event.title }}</h5>\n            <p class=\"card-text\">{{ event.description }}</p>\n            <p class=\"card-text\">Start: {{ event.start_time }}</p>\n            <p class=\"card-text\">End: {{ event.end_time }}</p>\n            <a id=\"edit-event-link-{{ event.id }}\" href=\"{% url 'event_edit' event.id %}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n            <a id=\"delete-event-link-{{ event.id }}\" href=\"{% url 'event_delete' event.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n          </div>\n        </div>\n      </div>\n    {% endfor %}\n  </div>\n\n  <script>\n      // You can add JavaScript here for more dynamic functionality\n      // For example, you can use JavaScript to fetch events and display them on the calendar.\n  </script>\n{% endblock %}"}, {"file": "event_form.html", "path": "calendar_app/templates/calendar_app/event_form.html", "code": "{% extends 'base.html' %}\n{% load crispy_forms_tags %}\n\n{% block title %}Event Form{% endblock %}\n\n{% block content %}\n    <h1 id=\"event-form-title\" class=\"mb-4\">Event Form</h1>\n    <form id=\"event-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form|crispy }}\n        <button id=\"submit-event-button\" type=\"submit\" class=\"btn btn-primary\">Save</button>\n        <a id=\"cancel-event-link\" href=\"{% url 'calendar' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "event_confirm_delete.html", "path": "calendar_app/templates/calendar_app/event_confirm_delete.html", "code": "{% extends 'base.html' %}\n\n{% block title %}Delete Event{% endblock %}\n\n{% block content %}\n    <h1 id=\"delete-event-title\" class=\"mb-4\">Delete Event</h1>\n    <p id=\"delete-event-confirmation\">Are you sure you want to delete event: {{ event.title }}?</p>\n    <form id=\"delete-event-form\" method=\"post\">\n        {% csrf_token %}\n        <button id=\"confirm-delete-event-button\" type=\"submit\" class=\"btn btn-danger\">Confirm Delete</button>\n        <a id=\"cancel-delete-event-link\" href=\"{% url 'calendar' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "calendar_list.html", "path": "calendar_app/templates/calendar_app/calendar_list.html", "code": "{% extends 'base.html' %}\n\n{% block title %}Calendar List{% endblock %}\n\n{% block content %}\n    <h1 id=\"calendar-list-title\" class=\"mb-4\">Calendar List</h1>\n    <a id=\"create-calendar-link\" href=\"{% url 'calendar_create' %}\" class=\"btn btn-primary mb-3\">Create Calendar</a>\n\n    <ul id=\"calendar-list\" class=\"list-group\">\n        {% for calendar in calendars %}\n            <li id=\"calendar-item-{{ calendar.id }}\" class=\"list-group-item d-flex justify-content-between align-items-center\">\n                {{ calendar.name }}\n                <div>\n                    <a id=\"edit-calendar-link-{{ calendar.id }}\" href=\"{% url 'calendar_edit' calendar.id %}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                    <a id=\"delete-calendar-link-{{ calendar.id }}\" href=\"{% url 'calendar_delete' calendar.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                </div>\n            </li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "calendar_form.html", "path": "calendar_app/templates/calendar_app/calendar_form.html", "code": "{% extends 'base.html' %}\n{% load crispy_forms_tags %}\n\n{% block title %}Calendar Form{% endblock %}\n\n{% block content %}\n    <h1 id=\"calendar-form-title\" class=\"mb-4\">Calendar Form</h1>\n    <form id=\"calendar-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form|crispy }}\n        <button id=\"submit-calendar-button\" type=\"submit\" class=\"btn btn-primary\">Save</button>\n        <a id=\"cancel-calendar-link\" href=\"{% url 'calendar_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "calendar_confirm_delete.html", "path": "calendar_app/templates/calendar_app/calendar_confirm_delete.html", "code": "{% extends 'base.html' %}\n\n{% block title %}Delete Calendar{% endblock %}\n\n{% block content %}\n    <h1 id=\"delete-calendar-title\" class=\"mb-4\">Delete Calendar</h1>\n    <p id=\"delete-calendar-confirmation\">Are you sure you want to delete calendar: {{ calendar.name }}?</p>\n    <form id=\"delete-calendar-form\" method=\"post\">\n        {% csrf_token %}\n        <button id=\"confirm-delete-calendar-button\" type=\"submit\" class=\"btn btn-danger\">Confirm Delete</button>\n        <a id=\"cancel-delete-calendar-link\" href=\"{% url 'calendar_list' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n{% endblock %}"}, {"file": "register.html", "path": "calendar_app/templates/registration/register.html", "code": "{% extends 'base.html' %}\n{% load crispy_forms_tags %}\n\n{% block title %}Register{% endblock %}\n\n{% block content %}\n    <div class=\"container py-5\">\n        <h1 id=\"register-title\">Register</h1>\n        <form id=\"register-form\" method=\"POST\">\n            {% csrf_token %}\n            {{ form|crispy }}\n            <button id=\"register-button\" class=\"btn btn-primary\" type=\"submit\">Register</button>\n        </form>\n        <p id=\"already-have-account\">Already have an account? <a id=\"login-redirect\" href=\"{% url 'login' %}\">Login</a></p>\n    </div>\n{% endblock %}"}], "9": [{"file": "models.py", "path": "chatbot_app/models.py", "code": "from django.db import models\n\nclass Chat(models.Model):\n    user_message = models.TextField()\n    bot_response = models.TextField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.timestamp}: {self.user_message}'"}, {"file": "views.py", "path": "chatbot_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import Chat\n\ndef home(request):\n    chats = Chat.objects.all().order_by('timestamp')\n    return render(request, 'home.html', {'chats': chats})\n\ndef chatbot_response(request):\n    if request.method == 'POST':\n        user_message = request.POST.get('message')\n        # Simple echo bot\n        bot_response = f'Echo: {user_message}'\n\n        # Save to the database\n        chat = Chat(user_message=user_message, bot_response=bot_response)\n        chat.save()\n\n        return JsonResponse({'response': bot_response})\n    else:\n        return JsonResponse({'error': 'Invalid request method'})"}, {"file": "urls.py", "path": "chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('api/chatbot', views.chatbot_response, name='chatbot_response'),\n]"}, {"file": "serializers.py", "path": "chatbot_app/serializers.py", "code": "from rest_framework import serializers\nfrom .models import Chat\n\nclass ChatSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Chat\n        fields = '__all__'"}, {"file": "forms.py", "path": "chatbot_app/forms.py", "code": "# forms.py is not required for this implementation"}, {"file": "settings.py", "path": "config/settings.py", "code": "# Django settings for config project.\n\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n# ... (other standard Django settings)\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'chatbot_app', # Add your app here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'config.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'config.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    # Add path to static files \n]\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "config/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "chatbot_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Chat\n\nadmin.site.register(Chat)"}, {"file": "__init__.py", "path": "chatbot_app/__init__.py", "code": "default_app_config = 'chatbot_app.apps.ChatbotAppConfig'"}, {"file": "apps.py", "path": "chatbot_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ChatbotAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'chatbot_app'"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Chatbot</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n        .container {\n            max-width: 800px;\n            margin: 20px auto;\n            background-color: #fff;\n            padding: 20px;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n        #chat-container {\n            margin-bottom: 20px;\n        }\n        .message {\n            padding: 10px;\n            margin-bottom: 5px;\n            border-radius: 5px;\n        }\n        .user-message {\n            background-color: #DCF8C6;\n            text-align: right;\n        }\n        .bot-message {\n            background-color: #ECE5DD;\n            text-align: left;\n        }\n        #input-area {\n            display: flex;\n        }\n        #message-input {\n            flex-grow: 1;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        #send-button {\n            padding: 10px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"main-container\">\n        <h1>Chatbot</h1>\n        <div id=\"chat-container\" class=\"chat-container\">\n            {% for chat in chats %}\n                <div class=\"message user-message\" id=\"user-message-{{ forloop.counter }}\">{{ chat.user_message }}</div>\n                <div class=\"message bot-message\" id=\"bot-message-{{ forloop.counter }}\">{{ chat.bot_response }}</div>\n            {% endfor %}\n        </div>\n        <div id=\"input-area\" class=\"input-area\">\n            <input type=\"text\" id=\"message-input\" class=\"message-input\" placeholder=\"Type your message...\">\n            <button id=\"send-button\" class=\"send-button\">Send</button>\n        </div>\n    </div>\n\n    <script>\n        document.getElementById('send-button').addEventListener('click', function() {\n            const messageInput = document.getElementById('message-input');\n            const message = messageInput.value;\n\n            if (message.trim() !== '') {\n                fetch('/api/chatbot', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/x-www-form-urlencoded',\n                        'X-CSRFToken': '{{ csrf_token }}'\n                    },\n                    body: 'message=' + message\n                })\n                .then(response => response.json())\n                .then(data => {\n                    const chatContainer = document.getElementById('chat-container');\n                    const userMessageDiv = document.createElement('div');\n                    userMessageDiv.classList.add('message', 'user-message');\n                    userMessageDiv.textContent = message;\n                    chatContainer.appendChild(userMessageDiv);\n\n                    const botMessageDiv = document.createElement('div');\n                    botMessageDiv.classList.add('message', 'bot-message');\n                    botMessageDiv.textContent = data.response;\n                    chatContainer.appendChild(botMessageDiv);\n\n                    messageInput.value = ''; // Clear the input field\n                });\n            }\n        });\n    </script>\n</body>\n</html>"}, {"file": "urls.py", "path": "config/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),\n]"}], "11": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    context = {\n        'welcome_message': 'Welcome to the Password Generator!',\n    }\n    return render(request, 'home.html', context)\n\n\ndef about(request):\n    context = {\n        'description': 'This website generates strong and secure passwords.',\n    }\n    return render(request, 'about.html', context)"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">{{ welcome_message }}</h1>\n    <a id=\"about-link\" class=\"about-link\" href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"about-title\">About</h1>\n    <p id=\"about-description\" class=\"about-description\">{{ description }}</p>\n    <a id=\"home-link\" class=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong secret key\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Add this line\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your\"+\n            \"PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "urls.py", "path": "password_generator/password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),  # Include your app's URLs\n]"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "homepage.html", "path": "myapp/templates/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Homepage</title>\n    <style>\n        body { font-family: sans-serif; }\n        .homepage-container { text-align: center; margin-top: 50px; }\n        .homepage-title { color: #333; }\n        .homepage-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer; border-radius: 5px; }\n    </style>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"homepage-container\">\n        <h1 id=\"homepage-title\" class=\"homepage-title\">Welcome to the Homepage!</h1>\n        <a id=\"helloworld-link\" href=\"{% url 'helloworld' %}\">\n            <button id=\"helloworld-button\" class=\"homepage-button\">Go to Hello World</button>\n        </a>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n      body { font-family: sans-serif; }\n      .helloworld-container { text-align: center; margin-top: 50px; }\n      .helloworld-title { color: #333; }\n    </style>\n</head>\n<body>\n    <div id=\"helloworld-container\" class=\"helloworld-container\">\n      <h1 id=\"helloworld-title\" class=\"helloworld-title\">Hello, world!</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'myapp/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'myapp/static')]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myproject.urls'))\n]\n"}], "17": [{"file": "data_input.py", "path": "src/data_input.py", "code": "import pandas as pd\n\ndef load_gamedata(filename='Gamedata.xlsx'):\n    \"\"\"Loads data from an Excel file.\n    Handles file not found and general loading errors.\n    Returns: pandas DataFrame or None if an error occurred.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found. Please ensure it exists in the same directory.\")\n        return None\n    except Exception as e:\n        print(f\"Error loading data: {e}\")\n        return None\n\nif __name__ == '__main__':\n    df = load_gamedata()\n    if df is not None:\n        print(\"Data loaded successfully.\")\n        print(df.head())\n"}, {"file": "data_preprocessing.py", "path": "src/data_preprocessing.py", "code": "import pandas as pd\n\ndef preprocess_data(df):\n    \"\"\"Preprocesses the data by lagging the 'result' variable,\n    handling missing values, defining dependent and independent variables,\n    and adding a constant.\n    Returns: A tuple containing X (independent variables), y (dependent variable),\n             and the original DataFrame (for output).\n    \"\"\"\n    df['result_lagged'] = df['result'].shift(1)\n    df = df.dropna()\n\n    y = df['result_lagged']\n    X = df.drop(['result', 'result_lagged'], axis=1)\n    X['const'] = 1  # Adding a constant for the intercept\n    return X, y, df\n\nif __name__ == '__main__':\n    # Create a sample DataFrame for testing\n    data = {'result': [0, 1, 0, 1, 0],\n            'feature1': [1, 2, 3, 4, 5],\n            'feature2': [6, 7, 8, 9, 10]}\n    sample_df = pd.DataFrame(data)\n    \n    X, y, df = preprocess_data(sample_df)\n    print(\"Independent Variables (X):\\n\", X)\n    print(\"\\nDependent Variable (y):\\n\", y)\n    print(\"\\nProcessed DataFrame:\\n\", df)\n"}, {"file": "model_building.py", "path": "src/model_building.py", "code": "import statsmodels.api as sm\n\ndef fit_logistic_regression(X, y):\n    \"\"\"Fits a logistic regression model using statsmodels.\n    Returns: The fitted logistic regression model.\n    \"\"\"\n    model = sm.Logit(y, X)\n    results = model.fit()\n    return results\n\nif __name__ == '__main__':\n    import pandas as pd\n    from data_preprocessing import preprocess_data  # Import preprocess_data from data_preprocessing.py\n\n    # Create a sample DataFrame for testing\n    data = {'result': [0, 1, 0, 1, 0],\n            'feature1': [1, 2, 3, 4, 5],\n            'feature2': [6, 7, 8, 9, 10]}\n    sample_df = pd.DataFrame(data)\n\n    # Preprocess the data using the function from data_preprocessing.py\n    X, y, df = preprocess_data(sample_df)\n\n    # Fit the logistic regression model\n    model_results = fit_logistic_regression(X, y)\n\n    # Print the model summary\n    print(model_results.summary())\n"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\ndef generate_and_save_summary(model_results, filename='Logistic.xlsx', sheet_name='Summary'):\n    \"\"\"Generates a model summary and saves it to an Excel file.\n    Prints a completion message.\n    \"\"\"\n    summary = model_results.summary()\n\n    # Convert summary to a pandas DataFrame for easier saving to Excel\n    results_as_html = summary.tables[1].as_html()\n    df = pd.read_html(results_as_html, header=0)[0]\n\n    # Also save the other statistical table to Excel, as it's useful\n    overall_results_as_html = summary.tables[0].as_html()\n    overall_df = pd.read_html(overall_results_as_html, header=0)[0]\n\n    with pd.ExcelWriter(filename) as writer:\n        df.to_excel(writer, sheet_name=sheet_name, index=False, startrow=2)\n\n        # Save the overall statistics above the coefficient results\n        overall_df.to_excel(writer, sheet_name=sheet_name, index=False, startrow=0)\n\n    print(f\"Logistic model summary has been successfully saved to '{filename}' on sheet '{sheet_name}'.\")\n\nif __name__ == '__main__':\n    import statsmodels.api as sm\n    import pandas as pd\n    from data_preprocessing import preprocess_data  # Import preprocess_data from data_preprocessing.py\n    from model_building import fit_logistic_regression\n    \n    # Create a sample DataFrame for testing\n    data = {'result': [0, 1, 0, 1, 0],\n            'feature1': [1, 2, 3, 4, 5],\n            'feature2': [6, 7, 8, 9, 10]}\n    sample_df = pd.DataFrame(data)\n\n    # Preprocess the data using the function from data_preprocessing.py\n    X, y, df = preprocess_data(sample_df)\n\n    # Fit the logistic regression model\n    model_results = fit_logistic_regression(X, y)\n\n    generate_and_save_summary(model_results)\n"}, {"file": "dependencies.py", "path": "src/dependencies.py", "code": "import subprocess\nimport sys\n\ndef install_packages():\n    \"\"\"Installs required Python packages if they are not already installed.\"\"\"\n    required_packages = ['pandas', 'openpyxl', 'scikit-learn', 'statsmodels']\n\n    for package in required_packages:\n        try:\n            __import__(package)\n        except ImportError:\n            print(f\"{package} not found. Installing...\")\n            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])\n            print(f\"{package} installed successfully.\")\n\nif __name__ == '__main__':\n    install_packages()\n"}, {"file": "main.py", "path": "src/main.py", "code": "from data_input import load_gamedata\nfrom data_preprocessing import preprocess_data\nfrom model_building import fit_logistic_regression\nfrom output import generate_and_save_summary\nfrom dependencies import install_packages\n\ndef main():\n    install_packages()\n    # Load the data\n    df = load_gamedata()\n    if df is None:\n        return  # Exit if data loading failed\n\n    # Preprocess the data\n    X, y, df = preprocess_data(df)\n\n    # Fit the logistic regression model\n    model_results = fit_logistic_regression(X, y)\n\n    # Generate and save the model summary\n    generate_and_save_summary(model_results)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "Gamedata.xlsx", "path": "data/Gamedata.xlsx", "code": ""}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "def start_new_game():\n    pass\n\ndef load_game():\n    pass\n\ndef exit_game():\n    pass\n\n# Main menu logic here"}, {"file": "exploration.py", "path": "src/exploration.py", "code": "def move(direction):\n    pass\n\ndef look():\n    pass\n\ndef inventory():\n    pass\n\ndef pick_up(item):\n    pass\n\ndef drop(item):\n    pass\n\ndef use_item(item):\n    pass\n\ndef save_game():\n    pass\n\ndef exit_to_main_menu():\n    pass\n\n# Exploration logic here"}, {"file": "combat.py", "path": "src/combat.py", "code": "def attack(monster):\n    pass\n\ndef flee():\n    pass\n\ndef use_item_combat(item):\n    pass\n\ndef check_health():\n    pass\n\ndef check_monster_health():\n    pass\n\n# Combat logic here"}, {"file": "character.py", "path": "src/character.py", "code": "def check_stats():\n    pass\n\ndef equip(item):\n    pass\n\ndef unequip(item):\n    pass\n\n# Character logic here"}, {"file": "game_over.py", "path": "src/game_over.py", "code": "def restart_game():\n    pass\n\ndef exit_game():\n    pass\n\n# Game over logic here"}, {"file": "game.py", "path": "src/game.py", "code": "# Central game logic and state management\n# Includes state transitions between menu, exploration, combat, etc.\n# Imports and utilizes functions from other modules"}, {"file": "items.py", "path": "src/items.py", "code": "# Class definitions and functions to handle item behavior"}, {"file": "monsters.py", "path": "src/monsters.py", "code": "# Class definitions and functions to handle monster behavior"}, {"file": "main.py", "path": "src/main.py", "code": "from src import game\n\nif __name__ == \"__main__\":\n    # Initialize and start the game\n    # Example:\n    # game.start_game()\n    print(\"Game Started\")"}], "19": [{"file": "main.py", "path": "src/main.py", "code": "# main.py\n\nimport csv\nfrom datetime import datetime, timedelta\n\n\ndef read_deathlist(filename):\n    \"\"\"Reads the CSV file containing death records.\"\"\"\n    try:\n        with open(filename, 'r') as csvfile:\n            reader = csv.DictReader(csvfile)\n            return list(reader)\n    except FileNotFoundError:\n        print(\"Error: Deathlist.csv not found.\")\n        return None\n\n\ndef parse_date_of_death(record):\n    \"\"\"Extracts the 'Date of death' field from each record.\"\"\"\n    try:\n        date_string = record['Date of death']\n        date_object = datetime.strptime(date_string, '%Y-%m-%d') # Adjust format as needed\n        return date_object\n    except ValueError:\n        print(f\"Warning: Invalid date format in record: {record}\")\n        return None\n    except KeyError:\n        print(f\"Warning: 'Date of death' column missing in record: {record}\")\n        return None\n\n\ndef group_by_week(death_records):\n    \"\"\"Groups the death records by week.\"\"\"\n    weekly_deaths = {}\n    for record in death_records:\n        death_date = parse_date_of_death(record)\n        if death_date:\n            week_start = death_date - timedelta(days=death_date.weekday())\n            week_start_str = week_start.strftime('%Y-%m-%d')\n            if week_start_str not in weekly_deaths:\n                weekly_deaths[week_start_str] = []\n            weekly_deaths[week_start_str].append(record)\n    return weekly_deaths\n\n\ndef count_deaths_per_week(weekly_deaths):\n    \"\"\"Counts the number of deaths that occurred in each week.\"\"\"\n    weekly_counts = {}\n    for week, records in weekly_deaths.items():\n        weekly_counts[week] = len(records)\n    return weekly_counts\n\n\ndef display_weekly_histogram(weekly_counts):\n    \"\"\"Prints a table showing the number of deaths for each week.\"\"\"\n    print(\"Weekly Death Counts:\\n\")\n    print(\"Week Start    | Deaths\")\n    print(\"--------------+--------\")\n    for week, count in sorted(weekly_counts.items()): # Sort weeks chronologically\n        print(f\"{week}    | {count}\")\n\n\ndef main():\n    \"\"\"Main function to execute the death analysis.\"\"\"\n    filename = 'Deathlist.csv'\n    death_records = read_deathlist(filename)\n    if death_records:\n        weekly_deaths = group_by_week(death_records)\n        weekly_counts = count_deaths_per_week(weekly_deaths)\n        display_weekly_histogram(weekly_counts)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "Deathlist.csv", "path": "data/Deathlist.csv", "code": "Date of death,Name,Age\n2023-01-01,John Doe,75\n2023-01-08,Jane Smith,62\n2023-01-08,Robert Jones,88\n2023-01-15,Emily Brown,45\n2023-01-22,Michael Davis,91\n2023-01-29,Jessica Wilson,58\n2023-02-05,David Garcia,70\n2023-02-12,Ashley Rodriguez,39\n2023-02-19,Christopher Williams,82\n2023-02-26,Brittany Martinez,66\n2023-03-05,Justin Anderson,51\n2023-03-12,Amanda Thomas,79\n2023-03-19,Brandon Jackson,48\n2023-03-26,Nicole White,95\n"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateField(auto_now_add=True)\n    author = models.CharField(max_length=100, default='Admin') # Example author field\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True) # Foreign key to category\n    # Add other fields as needed (e.g., image, slug)\n    def __str__(self):\n        return self.title\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom .models import BlogPost, Category\nfrom django.core.paginator import Paginator\n\ndef homepage(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5] # Get latest posts\n    featured_posts = BlogPost.objects.order_by('-publication_date')[:3] # Example, adjust logic\n    return render(request, 'blog/homepage.html', {'latest_posts': latest_posts, 'featured_posts': featured_posts})\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    return render(request, 'blog/blog_post_detail.html', {'post': post})\n\ndef category_page(request, category_id):\n    category = get_object_or_404(Category, pk=category_id)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_page.html', {'category': category, 'posts': posts})\n\ndef search_results(request):\n    query = request.GET.get('q')\n    results = BlogPost.objects.filter(title__icontains=query) # Simple title search\n    return render(request, 'blog/search_results.html', {'results': results, 'query': query})\n\ndef about_us(request):\n    return render(request, 'blog/about_us.html')\n\ndef contact(request):\n    return render(request, 'blog/contact.html')"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('category/<int:category_id>/', views.category_page, name='category_page'),\n    path('search/', views.search_results, name='search_results'),\n    path('about/', views.about_us, name='about_us'),\n    path('contact/', views.contact, name='contact'),\n]"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    message = forms.CharField(widget=forms.Textarea)"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "homepage.html", "path": "templates/blog/homepage.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <link rel=\"stylesheet\" href=\"{% static 'blog/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"site-title\" class=\"site-title\">My Awesome Blog</h1>\n        <nav id=\"nav\" class=\"nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'homepage' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about_us' %}\">About</a></li>\n                <li class=\"nav-item\"><a id=\"nav-contact\" class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a></li>\n                <li class=\"nav-item\">\n                    <form id=\"search-form\" class=\"search-form\" action=\"{% url 'search_results' %}\" method=\"get\">\n                        <input type=\"text\" id=\"search-input\" class=\"search-input\" name=\"q\" placeholder=\"Search...\">\n                        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n                    </form>\n                </li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"featured-posts\" class=\"featured-posts\">\n            <h2 class=\"section-title\">Featured Posts</h2>\n            <div id=\"featured-posts-container\" class=\"posts-container\">\n                {% for post in featured_posts %}\n                    <article id=\"featured-post-{{ post.pk }}\" class=\"post\">\n                        <h3 class=\"post-title\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></h3>\n                        <p class=\"post-date\">{{ post.publication_date }}</p>\n                        <p class=\"post-content\">{{ post.content|truncatewords:50 }}</p>\n                        <a id=\"read-more-{{ post.pk }}\" class=\"read-more\" href=\"{% url 'blog_post_detail' pk=post.pk %}\">Read More</a>\n                    </article>\n                {% endfor %}\n            </div>\n        </section>\n\n        <section id=\"latest-posts\" class=\"latest-posts\">\n            <h2 class=\"section-title\">Latest Posts</h2>\n            <div id=\"latest-posts-container\" class=\"posts-container\">\n                {% for post in latest_posts %}\n                    <article id=\"latest-post-{{ post.pk }}\" class=\"post\">\n                        <h3 class=\"post-title\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></h3>\n                        <p class=\"post-date\">{{ post.publication_date }}</p>\n                        <p class=\"post-content\">{{ post.content|truncatewords:50 }}</p>\n                        <a id=\"read-more-{{ post.pk }}\" class=\"read-more\" href=\"{% url 'blog_post_detail' pk=post.pk %}\">Read More</a>\n                    </article>\n                {% endfor %}\n            </div>\n        </section>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>"}, {"file": "blog_post_detail.html", "path": "templates/blog/blog_post_detail.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{{ post.title }}</title>\n    <link rel=\"stylesheet\" href=\"{% static 'blog/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"site-title\" class=\"site-title\">My Awesome Blog</h1>\n        <nav id=\"nav\" class=\"nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'homepage' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about_us' %}\">About</a></li>\n                <li class=\"nav-item\"><a id=\"nav-contact\" class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a></li>\n                <li class=\"nav-item\">\n                    <form id=\"search-form\" class=\"search-form\" action=\"{% url 'search_results' %}\" method=\"get\">\n                        <input type=\"text\" id=\"search-input\" class=\"search-input\" name=\"q\" placeholder=\"Search...\">\n                        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n                    </form>\n                </li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <article id=\"post-detail\" class=\"post-detail\">\n            <h2 id=\"post-title\" class=\"post-title\">{{ post.title }}</h2>\n            <p id=\"post-date\" class=\"post-date\">{{ post.publication_date }}</p>\n            <p id=\"post-content\" class=\"post-content\">{{ post.content }}</p>\n        </article>\n        <a href=\"{% url 'homepage' %}\" class=\"back-home\">Back to Home</a>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>"}, {"file": "category_page.html", "path": "templates/blog/category_page.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Category: {{ category.name }}</title>\n    <link rel=\"stylesheet\" href=\"{% static 'blog/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"site-title\" class=\"site-title\">My Awesome Blog</h1>\n        <nav id=\"nav\" class=\"nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'homepage' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about_us' %}\">About</a></li>\n                <li class=\"nav-item\"><a id=\"nav-contact\" class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a></li>\n                <li class=\"nav-item\">\n                    <form id=\"search-form\" class=\"search-form\" action=\"{% url 'search_results' %}\" method=\"get\">\n                        <input type=\"text\" id=\"search-input\" class=\"search-input\" name=\"q\" placeholder=\"Search...\">\n                        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n                    </form>\n                </li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <h2 id=\"category-title\" class=\"category-title\">Category: {{ category.name }}</h2>\n        <div id=\"category-posts-container\" class=\"posts-container\">\n            {% for post in posts %}\n                <article id=\"category-post-{{ post.pk }}\" class=\"post\">\n                    <h3 class=\"post-title\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></h3>\n                    <p class=\"post-date\">{{ post.publication_date }}</p>\n                    <p class=\"post-content\">{{ post.content|truncatewords:50 }}</p>\n                    <a id=\"read-more-{{ post.pk }}\" class=\"read-more\" href=\"{% url 'blog_post_detail' pk=post.pk %}\">Read More</a>\n                </article>\n            {% endfor %}\n        </div>\n        <a href=\"{% url 'homepage' %}\" class=\"back-home\">Back to Home</a>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>"}, {"file": "search_results.html", "path": "templates/blog/search_results.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Search Results for: {{ query }}</title>\n    <link rel=\"stylesheet\" href=\"{% static 'blog/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"site-title\" class=\"site-title\">My Awesome Blog</h1>\n        <nav id=\"nav\" class=\"nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'homepage' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about_us' %}\">About</a></li>\n                <li class=\"nav-item\"><a id=\"nav-contact\" class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a></li>\n                <li class=\"nav-item\">\n                    <form id=\"search-form\" class=\"search-form\" action=\"{% url 'search_results' %}\" method=\"get\">\n                        <input type=\"text\" id=\"search-input\" class=\"search-input\" name=\"q\" placeholder=\"Search...\">\n                        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n                    </form>\n                </li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <h2 id=\"search-results-title\" class=\"search-results-title\">Search Results for: {{ query }}</h2>\n        <div id=\"search-results-container\" class=\"posts-container\">\n            {% if results %}\n                {% for post in results %}\n                    <article id=\"search-result-{{ post.pk }}\" class=\"post\">\n                        <h3 class=\"post-title\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></h3>\n                        <p class=\"post-date\">{{ post.publication_date }}</p>\n                        <p class=\"post-content\">{{ post.content|truncatewords:50 }}</p>\n                        <a id=\"read-more-{{ post.pk }}\" class=\"read-more\" href=\"{% url 'blog_post_detail' pk=post.pk %}\">Read More</a>\n                    </article>\n                {% endfor %}\n            {% else %}\n                <p id=\"no-results\" class=\"no-results\">No results found.</p>\n            {% endif %}\n        </div>\n        <a href=\"{% url 'homepage' %}\" class=\"back-home\">Back to Home</a>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>"}, {"file": "about_us.html", "path": "templates/blog/about_us.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" href=\"{% static 'blog/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"site-title\" class=\"site-title\">My Awesome Blog</h1>\n        <nav id=\"nav\" class=\"nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'homepage' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about_us' %}\">About</a></li>\n                <li class=\"nav-item\"><a id=\"nav-contact\" class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a></li>\n                <li class=\"nav-item\">\n                    <form id=\"search-form\" class=\"search-form\" action=\"{% url 'search_results' %}\" method=\"get\">\n                        <input type=\"text\" id=\"search-input\" class=\"search-input\" name=\"q\" placeholder=\"Search...\">\n                        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n                    </form>\n                </li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"about-us\" class=\"about-us\">\n            <h2 id=\"about-us-title\" class=\"about-us-title\">About Us</h2>\n            <p id=\"about-us-content\" class=\"about-us-content\">This is a blog about everything and nothing. We hope you enjoy reading our thoughts.</p>\n        </section>\n        <a href=\"{% url 'homepage' %}\" class=\"back-home\">Back to Home</a>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>"}, {"file": "contact.html", "path": "templates/blog/contact.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Contact Us</title>\n    <link rel=\"stylesheet\" href=\"{% static 'blog/style.css' %}\">\n</head>\n<body>\n    <header id=\"header\" class=\"header\">\n        <h1 id=\"site-title\" class=\"site-title\">My Awesome Blog</h1>\n        <nav id=\"nav\" class=\"nav\">\n            <ul id=\"nav-list\" class=\"nav-list\">\n                <li class=\"nav-item\"><a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'homepage' %}\">Home</a></li>\n                <li class=\"nav-item\"><a id=\"nav-about\" class=\"nav-link\" href=\"{% url 'about_us' %}\">About</a></li>\n                <li class=\"nav-item\"><a id=\"nav-contact\" class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a></li>\n                <li class=\"nav-item\">\n                    <form id=\"search-form\" class=\"search-form\" action=\"{% url 'search_results' %}\" method=\"get\">\n                        <input type=\"text\" id=\"search-input\" class=\"search-input\" name=\"q\" placeholder=\"Search...\">\n                        <button type=\"submit\" id=\"search-button\" class=\"search-button\">Search</button>\n                    </form>\n                </li>\n            </ul>\n        </nav>\n    </header>\n\n    <main id=\"main\" class=\"main\">\n        <section id=\"contact-form-section\" class=\"contact-form-section\">\n            <h2 id=\"contact-form-title\" class=\"contact-form-title\">Contact Us</h2>\n            <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n                {% csrf_token %}\n                <div class=\"form-group\">\n                    <label for=\"id_name\" class=\"form-label\">Name:</label>\n                    <input type=\"text\" name=\"name\" id=\"id_name\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"id_email\" class=\"form-label\">Email:</label>\n                    <input type=\"email\" name=\"email\" id=\"id_email\" class=\"form-control\">\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"id_message\" class=\"form-label\">Message:</label>\n                    <textarea name=\"message\" id=\"id_message\" class=\"form-control\"></textarea>\n                </div>\n                <button type=\"submit\" id=\"contact-submit-button\" class=\"contact-submit-button\">Submit</button>\n            </form>\n        </section>\n        <a href=\"{% url 'homepage' %}\" class=\"back-home\">Back to Home</a>\n    </main>\n\n    <footer id=\"footer\" class=\"footer\">\n        <p>&copy; 2023 My Blog</p>\n    </footer>\n</body>\n</html>"}, {"file": "style.css", "path": "static/blog/style.css", "code": "/* Basic Styling */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.header {\n    background-color: #333;\n    color: #fff;\n    padding: 10px 0;\n    text-align: center;\n}\n\n.site-title {\n    margin: 0;\n}\n\n.nav-list {\n    padding: 0;\n    margin: 0;\n    list-style: none;\n    display: flex;\n    justify-content: center;\n}\n\n.nav-item {\n    margin: 0 10px;\n}\n\n.nav-link {\n    color: #fff;\n    text-decoration: none;\n}\n\n.main {\n    padding: 20px;\n    min-height: 600px; /* Ensure some content height */\n}\n\n.section-title {\n    margin-bottom: 15px;\n    border-bottom: 2px solid #ccc;\n    padding-bottom: 5px;\n}\n\n.posts-container {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-around;\n}\n\n.post {\n    width: 300px;\n    margin-bottom: 20px;\n    padding: 15px;\n    background-color: #fff;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\n.post-title a {\n    color: #333;\n    text-decoration: none;\n}\n\n.post-date {\n    font-size: 0.8em;\n    color: #777;\n    margin-bottom: 10px;\n}\n\n.post-content {\n    line-height: 1.6;\n}\n\n.read-more {\n    display: inline-block;\n    margin-top: 10px;\n    padding: 8px 12px;\n    background-color: #333;\n    color: #fff;\n    text-decoration: none;\n    border-radius: 5px;\n}\n\n.footer {\n    background-color: #333;\n    color: #fff;\n    text-align: center;\n    padding: 10px 0;\n    position: fixed;\n    bottom: 0;\n    width: 100%;\n}\n\n/* Search Form */\n.search-form {\n    display: flex;\n}\n\n.search-input {\n    padding: 8px;\n    border: none;\n    border-radius: 5px 0 0 5px;\n}\n\n.search-button {\n    padding: 8px 12px;\n    background-color: #555;\n    color: #fff;\n    border: none;\n    border-radius: 0 5px 5px 0;\n    cursor: pointer;\n}\n\n/* Category Page */\n.category-title {\n    margin-bottom: 20px;\n}\n\n/* Search Results */\n.search-results-title {\n    margin-bottom: 20px;\n}\n\n.no-results {\n    font-style: italic;\n    color: #777;\n}\n\n/* About Us & Contact */\n.about-us-title, .contact-form-title {\n    margin-bottom: 15px;\n}\n\n.contact-form-section {\n    max-width: 500px;\n    margin: 0 auto;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    margin-bottom: 5px;\n}\n\n.form-control {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 5px;\n}\n\n.contact-submit-button {\n    padding: 10px 15px;\n    background-color: #333;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n}\n\n.back-home {\n    display: block;\n    margin-top: 20px;\n    padding: 10px 15px;\n    background-color: #333;\n    color: #fff;\n    text-decoration: none;\n    border-radius: 5px;\n    text-align: center;\n    width: 100px; /* Adjust the width as needed */\n    margin-left: auto;\n    margin-right: auto;\n}\n"}, {"file": "__init__.py", "path": "blog/__init__.py", "code": ""}, {"file": "admin.py", "path": "blog/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Category\n\nadmin.site.register(BlogPost)\nadmin.site.register(Category)"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()"}]}