{"2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass Currency(models.Model):\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=50)\n    symbol = models.CharField(max_length=5)\n\n    def __str__(self):\n        return self.code"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom .models import Currency\nfrom .forms import ConversionForm\n\ndef home(request):\n    if request.method == 'POST':\n        form = ConversionForm(request.POST)\n        if form.is_valid():\n            base_currency = form.cleaned_data['base_currency']\n            target_currency = form.cleaned_data['target_currency']\n            amount = form.cleaned_data['amount']\n\n            # In a real application, you would fetch the exchange rate\n            # and perform the conversion here.\n            # For this example, we'll just return a dummy result.\n            conversion_rate = 1.2  # Replace with actual exchange rate\n            converted_amount = amount * conversion_rate\n\n            context = {\n                'form': form,\n                'base_currency': base_currency,\n                'target_currency': target_currency,\n                'amount': amount,\n                'converted_amount': converted_amount,\n                'conversion_rate': conversion_rate,\n            }\n            return render(request, 'currency_converter/home.html', context)\n    else:\n        form = ConversionForm()\n        context = {'form': form}\n    return render(request, 'currency_converter/home.html', context)\n\n"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\nfrom .models import Currency\n\nclass ConversionForm(forms.Form):\n    base_currency = forms.ModelChoiceField(queryset=Currency.objects.all(), label='Base Currency')\n    target_currency = forms.ModelChoiceField(queryset=Currency.objects.all(), label='Target Currency')\n    amount = forms.DecimalField(label='Amount')\n"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <style>\n        .container { width: 80%; margin: 0 auto; padding: 20px; }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; }\n        input[type=\"number\"], select { width: 100%; padding: 8px; border: 1px solid #ccc; border-radius: 4px; box-sizing: border-box; }\n        button { background-color: #4CAF50; color: white; padding: 10px 20px; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #45a049; }\n        .result { margin-top: 20px; padding: 10px; border: 1px solid #eee; background-color: #f9f9f9; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"title\" class=\"main-title\">Currency Converter</h1>\n        <form id=\"conversion-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"id_base_currency\">Base Currency:</label>\n                {{ form.base_currency }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_target_currency\">Target Currency:</label>\n                {{ form.target_currency }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_amount\">Amount:</label>\n                {{ form.amount }}\n            </div>\n            <button id=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n        <div id=\"conversion-result\" class=\"result\">\n            <p><strong>{{ amount }} {{ base_currency }}</strong> is equal to <strong>{{ converted_amount }} {{ target_currency }}</strong></p>\n            <p>Conversion Rate: <strong>{{ conversion_rate }}</strong></p>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency\n\nadmin.site.register(Currency)"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "apps.py", "path": "currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-0i$v7j$7gq*61e@4#32j-x4+s97(m8$q5z0@k0_91n87m8#1_l'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # add this line\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generated_password/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length'))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        characters = ''\n        if include_uppercase:\n            characters += string.ascii_uppercase\n        if include_lowercase:\n            characters += string.ascii_lowercase\n        if include_numbers:\n            characters += string.digits\n        if include_symbols:\n            characters += string.punctuation\n\n        if not characters:\n            characters = string.ascii_letters  # Default to letters if nothing is selected\n\n        generated_password = ''.join(random.choice(characters) for i in range(length))\n\n        return render(request, 'generated_password.html', {'password': generated_password})\n\n    return render(request, 'password_options.html')\n\ndef generated_password(request):\n    # Password generation logic should happen in password_options\n    # This view should ideally just display the password from a session or POST request.\n    return render(request, 'generated_password.html', {'password': 'Error: Password not generated correctly.'})\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "home.html", "path": "password_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"title\">Welcome to the Password Generator!</h1>\n    <p id=\"home-description\" class=\"description\">This is a simple password generator website.</p>\n    <a id=\"generate-password-link\" class=\"link\" href=\"{% url 'password_options' %}\">Generate Password</a>\n    {% if show_welcome_message %}<p id=\"welcome-message\" class=\"message\">Welcome message example!</p>{% endif %}\n</body>\n</html>"}, {"file": "password_options.html", "path": "password_generator/templates/password_options.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Options</title>\n</head>\n<body>\n    <h1 id=\"options-title\" class=\"title\">Password Options</h1>\n    <form id=\"password-form\" method=\"post\" action=\"{% url 'password_options' %}\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label id=\"length-label\" class=\"label\" for=\"length\">Password Length:</label>\n            <input id=\"length\" class=\"input\" type=\"number\" name=\"length\" min=\"1\" max=\"128\" value=\"12\">\n        </div>\n\n        <div class=\"form-group\">\n            <input id=\"uppercase\" class=\"checkbox\" type=\"checkbox\" name=\"uppercase\">\n            <label id=\"uppercase-label\" class=\"label\" for=\"uppercase\">Include Uppercase Letters</label>\n        </div>\n\n        <div class=\"form-group\">\n            <input id=\"lowercase\" class=\"checkbox\" type=\"checkbox\" name=\"lowercase\">\n            <label id=\"lowercase-label\" class=\"label\" for=\"lowercase\">Include Lowercase Letters</label>\n        </div>\n\n        <div class=\"form-group\">\n            <input id=\"numbers\" class=\"checkbox\" type=\"checkbox\" name=\"numbers\">\n            <label id=\"numbers-label\" class=\"label\" for=\"numbers\">Include Numbers</label>\n        </div>\n\n        <div class=\"form-group\">\n            <input id=\"symbols\" class=\"checkbox\" type=\"checkbox\" name=\"symbols\">\n            <label id=\"symbols-label\" class=\"label\" for=\"symbols\">Include Symbols</label>\n        </div>\n\n        <button id=\"generate-button\" class=\"button\" type=\"submit\">Generate Password</button>\n    </form>\n</body>\n</html>"}, {"file": "generated_password.html", "path": "password_generator/templates/generated_password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Generated Password</title>\n</head>\n<body>\n    <h1 id=\"generated-title\" class=\"title\">Generated Password</h1>\n    <p id=\"password-text\" class=\"password-text\">Your generated password is: <strong id=\"password-value\" class=\"password\">{{ password }}</strong></p>\n    <button id=\"copy-button\" class=\"button\" onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n    <script>\n        function copyToClipboard() {\n            navigator.clipboard.writeText('{{ password }}');\n            alert(\"Password copied to clipboard!\");\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"title\">About This Password Generator</h1>\n    <p id=\"about-description\" class=\"description\">This website is designed to generate strong and random passwords based on your specifications. You can customize the password length and character types (uppercase, lowercase, numbers, symbols) to meet your security needs.</p>\n</body>\n</html>"}, {"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# No models needed for this simple application"}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "from django.contrib import admin\n\n# No admin configuration needed for this simple application"}, {"file": "settings.py", "path": "password_generator_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'password_generator/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'password_generator/static')]\n"}, {"file": "wsgi.py", "path": "password_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "password_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),\n]"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": "default_app_config = 'password_generator.apps.PasswordGeneratorConfig'"}, {"file": "apps.py", "path": "password_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'"}], "4": [{"file": "urls.py", "path": "qrcode_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr, name='generate_qr'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qrcode_generator/views.py", "code": "from django.shortcuts import render, redirect\nimport qrcode\nfrom io import BytesIO\nimport base64\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_qr(request):\n    if request.method == 'POST':\n        text = request.POST.get('text', '')\n        box_size = int(request.POST.get('box_size', '10')) # Default box_size value\n        border_size = int(request.POST.get('border_size', '4')) # Default border_size value\n        ecc = request.POST.get('ecc', 'medium') # Default border_size value\n        fill_color = request.POST.get('fill_color', 'black') # Default fill_color value\n        back_color = request.POST.get('back_color', 'white') # Default back_color value\n\n        error_correction_levels = {\n            'small': qrcode.constants.ERROR_CORRECT_L,\n            'medium': qrcode.constants.ERROR_CORRECT_M,\n            'large': qrcode.constants.ERROR_CORRECT_H,\n        }\n        error_correction = error_correction_levels.get(ecc, qrcode.constants.ERROR_CORRECT_M)\n\n        try:\n            qr = qrcode.QRCode(\n                version=None,\n                error_correction=error_correction,\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n            buffer = BytesIO()\n            img.save(buffer, 'PNG')\n            img_data = base64.b64encode(buffer.getvalue()).decode('utf-8')\n\n            return render(request, 'qr_code_generator.html', {'qr_code': img_data})\n\n        except Exception as e:\n            return render(request, 'qr_code_generator.html', {'error': str(e)})\n\n    return render(request, 'qr_code_generator.html')\n\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "qrcode_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">Welcome to QR Code Generator!</h1>\n    <p id=\"home-description\" class=\"home-description\">Simple, welcoming text explaining what the website does.</p>\n    <a href=\"{% url 'generate_qr' %}\" id=\"generate-link\" class=\"generate-link\">\n        <button id=\"generate-button\" class=\"generate-button\">Generate QR Code</button>\n    </a>\n</body>\n</html>"}, {"file": "qr_code_generator.html", "path": "qrcode_generator/templates/qr_code_generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1 id=\"generator-title\" class=\"generator-title\">QR Code Generator</h1>\n    <form method=\"post\" id=\"qr-form\" class=\"qr-form\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"text\" id=\"text-label\" class=\"text-label\">Text/URL:</label>\n            <input type=\"text\" id=\"text\" name=\"text\" class=\"text-input\"><br><br>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"box_size\" id=\"box_size-label\" class=\"box_size-label\">Box Size (Max 128):</label>\n            <input type=\"number\" id=\"box_size\" name=\"box_size\" min=\"1\" max=\"128\" value=\"10\" class=\"box_size-input\"><br><br>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"border_size\" id=\"border_size-label\" class=\"border_size-label\">Border Size (Max 10):</label>\n            <input type=\"number\" id=\"border_size\" name=\"border_size\" min=\"0\" max=\"10\" value=\"4\" class=\"border_size-input\"><br><br>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"ecc\" id=\"ecc-label\" class=\"ecc-label\">Error Correction Rate:</label>\n            <select id=\"ecc\" name=\"ecc\" class=\"ecc-select\">\n                <option value=\"small\" class=\"ecc-option\">Small</option>\n                <option value=\"medium\" selected class=\"ecc-option\">Medium</option>\n                <option value=\"large\" class=\"ecc-option\">Large</option>\n            </select><br><br>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"fill_color\" id=\"fill_color-label\" class=\"fill_color-label\">Fill Color:</label>\n            <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\" class=\"fill_color-input\"><br><br>\n        </div>\n        <div class=\"form-group\">\n            <label for=\"back_color\" id=\"back_color-label\" class=\"back_color-label\">Back Color:</label>\n            <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\" class=\"back_color-input\"><br><br>\n        </div>\n        <button type=\"submit\" id=\"generate-submit\" class=\"generate-submit\">Generate</button>\n    </form>\n\n    {% if qr_code %}\n        <h2 id=\"generated-qr-title\" class=\"generated-qr-title\">Generated QR Code:</h2>\n        <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\" id=\"qr-image\" class=\"qr-image\">\n        <a href=\"data:image/png;base64,{{ qr_code }}\" download=\"qrcode.png\" id=\"download-link\" class=\"download-link\">\n            <button id=\"download-button\" class=\"download-button\">Download QR Code</button>\n        </a>\n    {% endif %}\n\n    {% if error %}\n        <p style=\"color:red;\" id=\"error-message\" class=\"error-message\">{{ error }}</p>\n    {% endif %}\n</body>\n</html>"}, {"file": "about.html", "path": "qrcode_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"about-title\">About This Website</h1>\n    <p id=\"about-description\" class=\"about-description\">Details about the website, its purpose, and how it works.</p>\n\n    <h2 id=\"privacy-title\" class=\"privacy-title\">Privacy Policy</h2>\n    <p id=\"privacy-description\" class=\"privacy-description\">The privacy policy of the website.</p>\n\n    <h2 id=\"terms-title\" class=\"terms-title\">Terms of Service</h2>\n    <p id=\"terms-description\" class=\"terms-description\">The terms of service of the website.</p>\n</body>\n</html>"}, {"file": "models.py", "path": "qrcode_generator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "qrcode_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "__init__.py", "path": "qrcode_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "qrcodegeneratorproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcode_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcodegeneratorproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'qrcode_generator/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcodegeneratorproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'qrcode_generator/static')]\n"}, {"file": "urls.py", "path": "qrcodegeneratorproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrcode_generator.urls')),\n]"}, {"file": "wsgi.py", "path": "qrcodegeneratorproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcodegeneratorproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "Django\nqrcode\npillow\n"}, {"file": "__init__.py", "path": "qrcodegeneratorproject/__init__.py", "code": ""}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault(\n        'DJANGO_SETTINGS_MODULE', 'qrcodegeneratorproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "5": [{"file": "urls.py", "path": "converter_project/converter_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "converter_project/converter_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport markdown\n\ndef home(request):\n    context = {}\n    return render(request, 'home.html', context)\n\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        context = {'html_output': html_output}\n        return render(request, 'convert.html', context)\n    else:\n        return render(request, 'convert.html')\n\ndef about(request):\n    context = {}\n    return render(request, 'about.html', context)"}, {"file": "home.html", "path": "converter_project/converter_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome!</h1>\n        <p id=\"home-description\" class=\"description\">This is a Markdown to HTML converter.</p>\n        <div id=\"home-links\" class=\"links\">\n            <a id=\"convert-link\" class=\"link\" href=\"{% url 'convert' %}\">Convert</a> |\n            <a id=\"about-link\" class=\"link\" href=\"{% url 'about' %}\">About</a>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "convert.html", "path": "converter_project/converter_app/templates/convert.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"convert-container\" class=\"container\">\n        <h1 id=\"convert-title\" class=\"title\">Convert Markdown to HTML</h1>\n        <form id=\"convert-form\" class=\"form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" class=\"textarea\" name=\"markdown_text\" rows=\"10\" cols=\"50\"></textarea><br>\n            <button id=\"convert-button\" class=\"button\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if html_output %}\n            <h2 id=\"output-title\" class=\"output-title\">HTML Output:</h2>\n            <div id=\"html-output\" class=\"output\" >{{ html_output|safe }}</div>\n        {% endif %}\n    </div>\n{% endblock %}"}, {"file": "about.html", "path": "converter_project/converter_app/templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About</h1>\n        <p id=\"about-description\" class=\"description\">This converter was created by...</p>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "converter_project/converter_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f0f0f0;\n        }\n\n        .container {\n            max-width: 800px;\n            margin: 20px auto;\n            padding: 20px;\n            background-color: #fff;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        .title {\n            text-align: center;\n            color: #333;\n        }\n\n        .description {\n            text-align: center;\n            color: #666;\n        }\n\n        .links {\n            text-align: center;\n            margin-top: 20px;\n        }\n\n        .link {\n            margin: 0 10px;\n            text-decoration: none;\n            color: #007bff;\n        }\n\n        .form {\n            margin-top: 20px;\n        }\n\n        .textarea {\n            width: 100%;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n\n        .button {\n            background-color: #007bff;\n            color: #fff;\n            padding: 10px 20px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        .button:hover {\n            background-color: #0056b3;\n        }\n\n        .output-title {\n            margin-top: 20px;\n            color: #333;\n        }\n\n        .output {\n            margin-top: 10px;\n            padding: 10px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            background-color: #f9f9f9;\n        }\n    </style>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "models.py", "path": "converter_project/converter_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "converter_project/converter_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "converter_project/converter_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter_app'"}, {"file": "settings.py", "path": "converter_project/converter_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong secret key\nDEBUG = True  # Set to False in production\nALLOWED_HOSTS = ['*']  # Configure allowed hosts for production\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'converter_app', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'converter_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'converter_app', 'static')]\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "converter_project/converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter_app.urls')),\n]"}, {"file": "wsgi.py", "path": "converter_project/converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "converter_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "6": [{"file": "models.py", "path": "todoapp/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE, related_name='tasks')\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    due_date = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todoapp/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.urls import reverse\nfrom .models import TodoList, Task\nfrom django.http import JsonResponse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'todoapp/home.html', {'todo_lists': todo_lists})\n\ndef todo_list_detail(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = todo_list.tasks.all()\n    return render(request, 'todoapp/todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        TodoList.objects.create(name=name)\n        return redirect('home')\n    return render(request, 'todoapp/create_todo_list.html')\n\ndef create_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        due_date = request.POST.get('due_date') or None  # Handle empty due_date\n        Task.objects.create(todo_list=todo_list, title=title, description=description, due_date=due_date)\n        return redirect('todo_list_detail', list_id=list_id)\n    return render(request, 'todoapp/create_task.html', {'todo_list': todo_list})\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        task.title = request.POST.get('title')\n        task.description = request.POST.get('description')\n        task.due_date = request.POST.get('due_date') or None  # Handle empty due_date\n        task.save()\n        return redirect('todo_list_detail', list_id=task.todo_list.id)\n    return render(request, 'todoapp/edit_task.html', {'task': task})\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list_detail', list_id=list_id)\n\ndef mark_task_completed(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', list_id=task.todo_list.id)\n\n\n# Example Analysis Views (Optional)\n\ndef task_completion_chart(request):\n    # Dummy data for demonstration\n    data = {\n        'labels': ['Completed', 'Incomplete'],\n        'datasets': [{\n            'label': 'Tasks',\n            'data': [60, 40],\n            'backgroundColor': ['green', 'red']\n        }]\n    }\n    return JsonResponse(data)\n\ndef task_distribution_chart(request):\n    # Dummy data for demonstration\n    data = {\n        'labels': ['List 1', 'List 2', 'List 3'],\n        'datasets': [{\n            'label': 'Tasks',\n            'data': [30, 20, 50],\n            'backgroundColor': ['blue', 'orange', 'purple']\n        }]\n    }\n    return JsonResponse(data)"}, {"file": "urls.py", "path": "todoapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('list/<int:list_id>/', views.todo_list_detail, name='todo_list_detail'),\n    path('list/create/', views.create_todo_list, name='create_todo_list'),\n    path('list/<int:list_id>/task/create/', views.create_task, name='create_task'),\n    path('task/<int:task_id>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:task_id>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:task_id>/complete/', views.mark_task_completed, name='mark_task_completed'),\n\n    # Analysis URLs (Optional)\n    path('analysis/completion_chart/', views.task_completion_chart, name='task_completion_chart'),\n    path('analysis/distribution_chart/', views.task_distribution_chart, name='task_distribution_chart'),\n]"}, {"file": "home.html", "path": "todoapp/templates/todoapp/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App - Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">Todo Lists</h1>\n    <ul id=\"todo-list\" class=\"todo-list\">\n        {% for todo_list in todo_lists %}\n            <li class=\"todo-list-item\">\n                <a id=\"todo-list-link-{{ todo_list.id }}\" class=\"todo-list-link\" href=\"{% url 'todo_list_detail' todo_list.id %}\">{{ todo_list.name }}</a>\n            </li>\n        {% endfor %}\n    </ul>\n    <a id=\"create-todo-list-link\" class=\"create-todo-list-link\" href=\"{% url 'create_todo_list' %}\">Create New Todo List</a>\n</body>\n</html>"}, {"file": "todo_list_detail.html", "path": "todoapp/templates/todoapp/todo_list_detail.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List - {{ todo_list.name }}</title>\n</head>\n<body>\n    <h1 id=\"todo-list-detail-title\" class=\"todo-list-detail-title\">{{ todo_list.name }}</h1>\n    <ul id=\"task-list\" class=\"task-list\">\n        {% for task in tasks %}\n            <li class=\"task-item\">\n                <span id=\"task-title-{{ task.id }}\" class=\"task-title\">{{ task.title }}</span> - <span id=\"task-description-{{ task.id }}\" class=\"task-description\">{{ task.description }}</span>\n                {% if task.completed %} <span class=\"completed-tag\">(Completed)</span> {% endif %}\n                <a id=\"edit-task-link-{{ task.id }}\" class=\"edit-task-link\" href=\"{% url 'edit_task' task.id %}\">Edit</a>\n                <a id=\"delete-task-link-{{ task.id }}\" class=\"delete-task-link\" href=\"{% url 'delete_task' task.id %}\">Delete</a>\n                {% if not task.completed %}\n                    <a id=\"mark-completed-link-{{ task.id }}\" class=\"mark-completed-link\" href=\"{% url 'mark_task_completed' task.id %}\">Mark as Completed</a>\n                {% endif %}\n            </li>\n        {% endfor %}\n    </ul>\n    <a id=\"add-new-task-link\" class=\"add-new-task-link\" href=\"{% url 'create_task' todo_list.id %}\">Add New Task</a>\n    <a id=\"back-to-home-link\" class=\"back-to-home-link\" href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "create_todo_list.html", "path": "todoapp/templates/todoapp/create_todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Create Todo List</title>\n</head>\n<body>\n    <h1 id=\"create-todo-list-title\" class=\"create-todo-list-title\">Create New Todo List</h1>\n    <form id=\"create-todo-list-form\" class=\"create-todo-list-form\" method=\"post\">\n        {% csrf_token %}\n        <label id=\"name-label\" class=\"name-label\" for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\" class=\"name-input\"><br><br>\n        <input type=\"submit\" id=\"create-button\" class=\"create-button\" value=\"Create\">\n    </form>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'home' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "create_task.html", "path": "todoapp/templates/todoapp/create_task.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Create Task</title>\n</head>\n<body>\n    <h1 id=\"create-task-title\" class=\"create-task-title\">Create New Task for {{ todo_list.name }}</h1>\n    <form id=\"create-task-form\" class=\"create-task-form\" method=\"post\">\n        {% csrf_token %}\n        <label id=\"title-label\" class=\"title-label\" for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" class=\"title-input\"><br><br>\n        <label id=\"description-label\" class=\"description-label\" for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\" class=\"description-textarea\"></textarea><br><br>\n        <label id=\"due-date-label\" class=\"due-date-label\" for=\"due_date\">Due Date:</label><br>\n        <input type=\"date\" id=\"due_date\" name=\"due_date\" class=\"due-date-input\"><br><br>\n        <input type=\"submit\" id=\"create-button\" class=\"create-button\" value=\"Create\">\n    </form>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'todo_list_detail' todo_list.id %}\">Cancel</a>\n</body>\n</html>"}, {"file": "edit_task.html", "path": "todoapp/templates/todoapp/edit_task.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Task</title>\n</head>\n<body>\n    <h1 id=\"edit-task-title\" class=\"edit-task-title\">Edit Task</h1>\n    <form id=\"edit-task-form\" class=\"edit-task-form\" method=\"post\">\n        {% csrf_token %}\n        <label id=\"title-label\" class=\"title-label\" for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" class=\"title-input\" value=\"{{ task.title }}\"><br><br>\n        <label id=\"description-label\" class=\"description-label\" for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\" class=\"description-textarea\">{{ task.description }}</textarea><br><br>\n         <label id=\"due-date-label\" class=\"due-date-label\" for=\"due_date\">Due Date:</label><br>\n        <input type=\"date\" id=\"due_date\" name=\"due_date\" class=\"due-date-input\" value=\"{{ task.due_date|date:'Y-m-d' }}\"><br><br>\n        <input type=\"submit\" id=\"save-button\" class=\"save-button\" value=\"Save\">\n    </form>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'todo_list_detail' task.todo_list.id %}\">Cancel</a>\n</body>\n</html>"}, {"file": "admin.py", "path": "todoapp/admin.py", "code": "from django.contrib import admin\nfrom .models import TodoList, Task\n\nadmin.site.register(TodoList)\nadmin.site.register(Task)"}, {"file": "apps.py", "path": "todoapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass TodoappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'todoapp'"}, {"file": "__init__.py", "path": "todoapp/__init__.py", "code": ""}, {"file": "settings.py", "path": "todoproject/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-YOUR_SECRET_KEY'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todoapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todoproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todoproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "todoproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todoapp.urls')),\n]"}, {"file": "wsgi.py", "path": "todoproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todoproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todoproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "7": [{"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True)\n    description = models.CharField(max_length=200, blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.date} - {self.amount} - {self.category}'\n\nclass Category(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField('auth.User', on_delete=models.CASCADE)\n    # Add any additional user profile fields here\n\n    def __str__(self):\n        return self.user.username"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Transaction, Category\nfrom django.http import JsonResponse\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.forms import AuthenticationForm, UserCreationForm\nfrom django.shortcuts import render, redirect\nfrom django.contrib import messages\n\n\n# Home page views\ndef home(request):\n    if request.user.is_authenticated:\n        return redirect('dashboard')\n    else:\n        return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            messages.success(request, 'Account created successfully!')\n            return redirect('dashboard')  # Redirect to dashboard after signup\n        else:\n            messages.error(request, 'Signup failed. Please check the form.')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                messages.info(request, f\"You are now logged in as {username}.\")\n                return redirect('dashboard')\n            else:\n                messages.error(request, 'Invalid username or password.')\n        else:\n            messages.error(request, 'Invalid username or password.')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\ndef user_logout(request):\n    logout(request)\n    messages.info(request, \"You have successfully logged out.\")\n    return redirect('home')\n\n@login_required\ndef dashboard(request):\n    transactions = Transaction.objects.filter(category__name='Travel', amount__gt=100)\n    return render(request, 'dashboard.html', {'transactions': transactions})\n\n\n# Balance Tracker views\n@login_required\ndef balance_tracker(request):\n    transactions = Transaction.objects.all()\n    categories = Category.objects.all()\n\n    if request.method == 'POST':\n        date = request.POST.get('date')\n        amount = request.POST.get('amount')\n        category_id = request.POST.get('category')\n        description = request.POST.get('description')\n        transaction_id = request.POST.get('transaction_id')  # For editing\n\n        if transaction_id:\n            # Editing existing transaction\n            transaction = Transaction.objects.get(pk=transaction_id)\n            transaction.date = date\n            transaction.amount = amount\n            transaction.category_id = category_id\n            transaction.description = description\n            transaction.save()\n        else:\n            # Adding new transaction\n            transaction = Transaction(date=date, amount=amount, category_id=category_id, description=description)\n            transaction.save()\n\n        return redirect('balance_tracker')\n\n    return render(request, 'balance_tracker.html', {'transactions': transactions, 'categories': categories})\n\n@login_required\ndef delete_transaction(request, transaction_id):\n    transaction = Transaction.objects.get(pk=transaction_id)\n    transaction.delete()\n    return redirect('balance_tracker')\n\n\n# Category views\n@login_required\ndef category_list(request):\n    categories = Category.objects.all()\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        category_id = request.POST.get('category_id')\n\n        if category_id:\n            # Editing existing category\n            category = Category.objects.get(pk=category_id)\n            category.name = name\n            category.save()\n        else:\n            # Adding new category\n            category = Category(name=name)\n            category.save()\n\n        return redirect('category_list')\n    return render(request, 'category_list.html', {'categories': categories})\n\n@login_required\ndef delete_category(request, category_id):\n    category = Category.objects.get(pk=category_id)\n    category.delete()\n    return redirect('category_list')\n\n\n# Reports views\n@login_required\ndef reports(request):\n    # Implement report generation logic here\n    return render(request, 'reports.html')\n\n\n# Settings views\n@login_required\ndef settings(request):\n    # Implement settings update logic here\n    return render(request, 'settings.html')\n\n\n# Help views\ndef help_view(request):\n    # Implement help / FAQ logic here\n    return render(request, 'help.html')"}, {"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('delete_transaction/<int:transaction_id>/', views.delete_transaction, name='delete_transaction'),\n    path('categories/', views.category_list, name='category_list'),\n    path('delete_category/<int:category_id>/', views.delete_category, name='delete_category'),\n    path('reports/', views.reports, name='reports'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help_view, name='help'),\n]"}, {"file": "templates/base.html", "path": "budget_control/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <!-- Add your CSS and JavaScript links here -->\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n\n        .nav {\n            background-color: #333;\n            overflow: hidden;\n        }\n\n        .nav a {\n            float: left;\n            display: block;\n            color: white;\n            text-align: center;\n            padding: 14px 16px;\n            text-decoration: none;\n        }\n\n        .nav a:hover {\n            background-color: #ddd;\n            color: black;\n        }\n\n        .main {\n            padding: 20px;\n        }\n\n        .footer {\n            background-color: #333;\n            color: white;\n            text-align: center;\n            padding: 10px;\n            position: fixed;\n            bottom: 0;\n            width: 100%;\n        }\n    </style>\n</head>\n<body>\n    <nav class=\"nav\" id=\"main-nav\">\n        <!-- Navigation bar content -->\n        <a class=\"nav-link\" id=\"home-link\" href=\"{% url 'home' %}\">Home</a>\n        {% if user.is_authenticated %}\n            <a class=\"nav-link\" id=\"dashboard-link\" href=\"{% url 'dashboard' %}\">Dashboard</a>\n            <a class=\"nav-link\" id=\"balance-tracker-link\" href=\"{% url 'balance_tracker' %}\">Balance Tracker</a>\n            <a class=\"nav-link\" id=\"categories-link\" href=\"{% url 'categories' %}\">Categories</a>\n            <a class=\"nav-link\" id=\"reports-link\" href=\"{% url 'reports' %}\">Reports</a>\n            <a class=\"nav-link\" id=\"settings-link\" href=\"{% url 'settings' %}\">Settings</a>\n            <a class=\"nav-link\" id=\"logout-link\" href=\"{% url 'logout' %}\">Logout</a>\n\n        {% else %}\n            <a class=\"nav-link\" id=\"login-link\" href=\"{% url 'login' %}\">Login</a>\n            <a class=\"nav-link\" id=\"signup-link\" href=\"{% url 'signup' %}\">Signup</a>\n        {% endif %}\n         <a class=\"nav-link\" id=\"help-link\" href=\"{% url 'help' %}\">Help</a>\n    </nav>\n\n    <main class=\"main\" id=\"main-content\">\n        {% block content %}\n        {% endblock %}\n    </main>\n\n    <footer class=\"footer\" id=\"main-footer\">\n        <!-- Footer content -->\n        <p>&copy; 2023 Budget Control</p>\n    </footer>\n</body>\n</html>"}, {"file": "templates/home.html", "path": "budget_control/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 class=\"mt-4 mb-3\">Welcome to Budget Control</h1>\n        <p class=\"lead\">Manage your finances effectively.</p>\n        <p>\n            <a class=\"btn btn-primary\" href=\"{% url 'login' %}\" role=\"button\" id=\"login-button\">Login</a> or\n            <a class=\"btn btn-success\" href=\"{% url 'signup' %}\" role=\"button\" id=\"signup-button\">Sign Up</a>.\n        </p>\n        <p>Need help? <a href=\"{% url 'help' %}\" id=\"help-link\">Contact Support</a>.</p>\n    </div>\n{% endblock %}"}, {"file": "templates/dashboard.html", "path": "budget_control/templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 class=\"mt-4\">Dashboard</h1>\n        <p>Welcome, {{ user.username }}!</p>\n\n\n        <h2 class=\"mt-4\">Recent Transactions (Example):</h2>\n        <ul class=\"list-group\">\n        {% for transaction in transactions %}\n            <li class=\"list-group-item\" id=\"transaction-{{ forloop.counter }}\">{{ transaction.date }} - {{ transaction.amount }} - {{ transaction.category }} - {{ transaction.description }}</li>\n        {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "templates/balance_tracker.html", "path": "budget_control/templates/balance_tracker.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 class=\"mt-4\">Balance Tracker</h1>\n\n        <h2 class=\"mt-3\">Add/Edit Transaction</h2>\n        <form method=\"post\" id=\"transaction-form\">\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"transaction_id\" id=\"transaction_id\">\n\n            <div class=\"form-group\">\n                <label for=\"date\">Date:</label>\n                <input type=\"date\" class=\"form-control\" name=\"date\" id=\"date\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"amount\">Amount:</label>\n                <input type=\"number\" class=\"form-control\" name=\"amount\" id=\"amount\" step=\"0.01\" required>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"category\">Category:</label>\n                <select class=\"form-control\" name=\"category\" id=\"category\" required>\n                    {% for category in categories %}\n                        <option value=\"{{ category.id }}\">{{ category.name }}</option>\n                    {% endfor %}\n                </select>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\">Description:</label>\n                <input type=\"text\" class=\"form-control\" name=\"description\" id=\"description\">\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"save-transaction-button\">Save Transaction</button>\n        </form>\n\n        <h2 class=\"mt-4\">Transactions</h2>\n        <table class=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>Date</th>\n                    <th>Amount</th>\n                    <th>Category</th>\n                    <th>Description</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for transaction in transactions %}\n                    <tr>\n                        <td>{{ transaction.date }}</td>\n                        <td>{{ transaction.amount }}</td>\n                        <td>{{ transaction.category }}</td>\n                        <td>{{ transaction.description }}</td>\n                        <td>\n                            <button class=\"btn btn-sm btn-warning\" onclick=\"editTransaction('{{ transaction.id }}', '{{ transaction.date }}', '{{ transaction.amount }}', '{{ transaction.category.id }}', '{{ transaction.description }}')\" id=\"edit-transaction-{{ transaction.id }}\">Edit</button>\n                            <a class=\"btn btn-sm btn-danger\" href=\"{% url 'delete_transaction' transaction.id %}\" id=\"delete-transaction-{{ transaction.id }}\">Delete</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n\n        <script>\n            function editTransaction(id, date, amount, category, description) {\n                document.getElementById('transaction_id').value = id;\n                document.getElementById('date').value = date;\n                document.getElementById('amount').value = amount;\n                document.getElementById('category').value = category;\n                document.getElementById('description').value = description;\n            }\n        </script>\n    </div>\n{% endblock %}"}, {"file": "templates/category_list.html", "path": "budget_control/templates/category_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 class=\"mt-4\">Categories</h1>\n\n        <h2 class=\"mt-3\">Add/Edit Category</h2>\n        <form method=\"post\" id=\"category-form\">\n            {% csrf_token %}\n            <input type=\"hidden\" name=\"category_id\" id=\"category_id\">\n\n            <div class=\"form-group\">\n                <label for=\"name\">Name:</label>\n                <input type=\"text\" class=\"form-control\" name=\"name\" id=\"name\" required>\n            </div>\n\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"save-category-button\">Save Category</button>\n        </form>\n\n        <h2 class=\"mt-4\">Existing Categories</h2>\n        <table class=\"table table-striped\">\n            <thead>\n                <tr>\n                    <th>Name</th>\n                    <th>Actions</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for category in categories %}\n                    <tr>\n                        <td>{{ category.name }}</td>\n                        <td>\n                            <button class=\"btn btn-sm btn-warning\" onclick=\"editCategory('{{ category.id }}', '{{ category.name }}')\" id=\"edit-category-{{ category.id }}\">Edit</button>\n                            <a class=\"btn btn-sm btn-danger\" href=\"{% url 'delete_category' category.id %}\" id=\"delete-category-{{ category.id }}\">Delete</a>\n                        </td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n\n        <script>\n            function editCategory(id, name) {\n                document.getElementById('category_id').value = id;\n                document.getElementById('name').value = name;\n            }\n        </script>\n    </div>\n{% endblock %}"}, {"file": "templates/reports.html", "path": "budget_control/templates/reports.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 class=\"mt-4\">Reports</h1>\n        <p>Generate financial reports here.</p>\n        <!-- Implement report generation form/logic here -->\n    </div>\n{% endblock %}"}, {"file": "templates/settings.html", "path": "budget_control/templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 class=\"mt-4\">Settings</h1>\n        <p>Update your profile and preferences here.</p>\n        <!-- Implement settings update form/logic here -->\n    </div>\n{% endblock %}"}, {"file": "templates/help.html", "path": "budget_control/templates/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h1 class=\"mt-4\">Help</h1>\n        <p>Find FAQs and support information here.</p>\n        <!-- Display FAQs and contact support information here -->\n    </div>\n{% endblock %}"}, {"file": "templates/login.html", "path": "budget_control/templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container\">\n    <h2 class=\"mt-4\">Login</h2>\n\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n\n    <form method=\"post\" class=\"mt-3\" id=\"login-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-primary\" id=\"login-button\">Login</button>\n    </form>\n\n    <p class=\"mt-3\">Don't have an account? <a href=\"{% url 'signup' %}\" id=\"signup-link\">Sign up</a></p>\n</div>\n{% endblock %}"}, {"file": "templates/signup.html", "path": "budget_control/templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container\">\n    <h2 class=\"mt-4\">Sign Up</h2>\n\n    {% if messages %}\n        <ul class=\"messages\">\n            {% for message in messages %}\n                <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n\n    <form method=\"post\" class=\"mt-3\" id=\"signup-form\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" class=\"btn btn-success\" id=\"signup-button\">Sign Up</button>\n    </form>\n\n    <p class=\"mt-3\">Already have an account? <a href=\"{% url 'login' %}\" id=\"login-link\">Log in</a></p>\n</div>\n{% endblock %}"}, {"file": "admin.py", "path": "budget_control/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction, Category, UserProfile\n\nadmin.site.register(Transaction)\nadmin.site.register(Category)\nadmin.site.register(UserProfile)"}, {"file": "serializers.py", "path": "budget_control/serializers.py", "code": "from rest_framework import serializers\nfrom .models import Transaction, Category\n\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'\n\nclass TransactionSerializer(serializers.ModelSerializer):\n    category = CategorySerializer(read_only=True)\n    category_id = serializers.PrimaryKeyRelatedField(\n        queryset=Category.objects.all(), source='category', write_only=True, allow_null=True\n    )\n\n    class Meta:\n        model = Transaction\n        fields = '__all__' "}, {"file": "api_views.py", "path": "budget_control/api_views.py", "code": "from rest_framework import generics, permissions\nfrom .models import Transaction, Category\nfrom .serializers import TransactionSerializer, CategorySerializer\n\n\nclass TransactionListCreate(generics.ListCreateAPIView):\n    queryset = Transaction.objects.all()\n    serializer_class = TransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\n    def perform_create(self, serializer):\n        serializer.save()\n\nclass TransactionRetrieveUpdateDestroy(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Transaction.objects.all()\n    serializer_class = TransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\nclass CategoryListCreate(generics.ListCreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    permission_classes = [permissions.IsAuthenticated]\n\nclass CategoryRetrieveUpdateDestroy(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    permission_classes = [permissions.IsAuthenticated]"}, {"file": "api_urls.py", "path": "budget_control/api_urls.py", "code": "from django.urls import path\nfrom . import api_views\n\nurlpatterns = [\n    path('transactions/', api_views.TransactionListCreate.as_view(), name='transaction-list-create'),\n    path('transactions/<int:pk>/', api_views.TransactionRetrieveUpdateDestroy.as_view(), name='transaction-retrieve-update-destroy'),\n    path('categories/', api_views.CategoryListCreate.as_view(), name='category-list-create'),\n    path('categories/<int:pk>/', api_views.CategoryRetrieveUpdateDestroy.as_view(), name='category-retrieve-update-destroy'),\n]"}, {"file": "templates/base_api.html", "path": "budget_control/templates/base_api.html", "code": "<!-- templates/base_api.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control API</title>\n    <!-- Add Bootstrap CSS for basic styling -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\">\n</head>\n<body>\n\n    <div class=\"container\" id=\"api-container\">\n        <h1 id=\"api-title\">Budget Control API</h1>\n        <p id=\"api-description\">Welcome to the API documentation for Budget Control.</p>\n        <hr>\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <!-- Add Bootstrap JS and jQuery if needed -->\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4CQQK2LNj+yzK9jnU5Qq4sFwpCvLCunbztWzjZ\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js\" integrity=\"sha384-9/reFTOT+VxF6p+1hYg5voKs9QHAw5D+Vn2K+e+Nq2CQzlRN/nrW6oZy4IWvTnvp\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "budget_control/settings.py", "code": "# Include REST framework in INSTALLED_APPS\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'budget_control',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication'\n    ]\n}\n"}, {"file": "wsgi.py", "path": "budget_control/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget_control.urls')),\n    path('api/', include('budget_control.api_urls'))\n]"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.urls import reverse\nfrom datetime import datetime\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    today = datetime.now()\n    events = Event.objects.filter(start_time__year=today.year, start_time__month=today.month)\n    return render(request, 'calendar_app/home.html', {'today': today, 'events':events})\n\n\ndef calendar_view(request, year=None, month=None):\n    today = datetime.now()\n    if year is None or month is None:\n      year = today.year\n      month = today.month\n\n    try:\n        year = int(year)\n        month = int(month)\n    except ValueError:\n        year = today.year\n        month = today.month\n\n    events = Event.objects.filter(start_time__year=year, start_time__month=month)\n    return render(request, 'calendar_app/calendar.html', {'year': year, 'month': month, 'events':events})\n\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/add_event.html', {'form': form})\n\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendar_app/event_details.html', {'event': event})\n\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event_id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/edit_event.html', {'form': form, 'event': event})\n\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'calendar_app/delete_event.html', {'event': event})\n\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query)\n    return render(request, 'calendar_app/search_results.html', {'events': events, 'query': query})\n\n\ndef list_all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/list_all_events.html', {'events': events})"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_month'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('events/all/', views.list_all_events, name='list_all_events'),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "# settings.py\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nDATETIME_INPUT_FORMATS = [\n    '%Y-%m-%dT%H:%M:%S',  # '2006-10-25T14:30:59'\n    '%Y-%m-%dT%H:%M:%S.%f',  # '2006-10-25T14:30:59.000215'\n    '%Y-%m-%dT%H:%M',     # '2006-10-25T14:30'\n    '%Y-%m-%d %H:%M:%S',\n    '%Y-%m-%d %H:%M:%S.%f',\n    '%Y-%m-%d %H:%M',\n    '%Y-%m-%d',            # '2006-10-25'\n    '%m/%d/%Y %H:%M:%S',\n    '%m/%d/%Y %H:%M:%S.%f',\n    '%m/%d/%Y %H:%M',\n    '%m/%d/%Y',\n    '%m/%d/%y %H:%M:%S',\n    '%m/%d/%y %H:%M:%S.%f',\n    '%m/%d/%y %H:%M',\n    '%m/%d/%y',\n]\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_asgi_application()"}, {"file": "home.html", "path": "calendar_app/templates/calendar_app/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Calendar App</h1>\n        <p id=\"today-date\" class=\"date\">Today is: {{ today }}</p>\n        <div class=\"links\" id=\"home-links\">\n            <a href=\"{% url 'calendar' %}\" class=\"link\" id=\"calendar-link\">View Calendar</a> |\n            <a href=\"{% url 'add_event' %}\" class=\"link\" id=\"add-event-link\">Add Event</a> |\n            <a href=\"{% url 'list_all_events' %}\" class=\"link\" id=\"all-events-link\">All Events</a>\n        </div>\n\n        <h2 id=\"upcoming-events-title\">Upcoming Events</h2>\n        <ul id=\"event-list\">\n            {% for event in events %}\n                <li class=\"event-item\" id=\"event-item-{{ event.id }}\">\n                    <a href=\"{% url 'event_details' event_id=event.id %}\" class=\"event-link\" id=\"event-link-{{ event.id }}\">{{ event.title }}</a> ({{ event.start_time }})\n                </li>\n            {% empty %}\n                <li id=\"no-events-message\">No events scheduled for this month.</li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar_app/calendar.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"calendar-container\">\n        <h1 class=\"title\" id=\"calendar-title\">Calendar for {{ month }}/{{ year }}</h1>\n\n        <form method=\"get\" action=\"{% url 'calendar' %}\" id=\"calendar-form\">\n            <div class=\"form-group\" id=\"year-group\">\n                <label for=\"year\" id=\"year-label\">Year:</label>\n                <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\" class=\"form-control\">\n            </div>\n            <div class=\"form-group\" id=\"month-group\">\n                <label for=\"month\" id=\"month-label\">Month:</label>\n                <select id=\"month\" name=\"month\" class=\"form-control\">\n                    {% for i in '123456789abc'|make_list %}\n                        {% with month_num=forloop.counter %}\n                            <option value=\"{{ month_num }}\" {% if month_num == month %}selected{% endif %}>{{ month_num }}</option>\n                        {% endwith %}\n                    {% endfor %}\n                </select>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"go-button\">Go</button>\n        </form>\n\n        <div class=\"links\" id=\"calendar-links\">\n            <a href=\"{% url 'home' %}\" class=\"link\" id=\"home-link\">Back to Home</a> |\n            <a href=\"{% url 'add_event' %}\" class=\"link\" id=\"add-event-link\">Add Event</a>\n        </div>\n\n        <h2 id=\"events-this-month-title\">Events this Month</h2>\n        <ul id=\"events-list\">\n            {% for event in events %}\n                <li class=\"event-item\" id=\"event-item-{{ event.id }}\">\n                    <a href=\"{% url 'event_details' event_id=event.id %}\" class=\"event-link\" id=\"event-link-{{ event.id }}\">{{ event.title }}</a> ({{ event.start_time }})\n                </li>\n            {% empty %}\n                <li id=\"no-events-message\">No events scheduled for this month.</li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>\n"}, {"file": "add_event.html", "path": "calendar_app/templates/calendar_app/add_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Event</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"add-event-container\">\n        <h1 class=\"title\" id=\"add-event-title\">Add a New Event</h1>\n        <form method=\"post\" id=\"add-event-form\">\n            {% csrf_token %}\n            <div id=\"form-fields\">{{ form.as_p }}</div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"save-event-button\">Save Event</button>\n        </form>\n        <a href=\"{% url 'home' %}\" id=\"cancel-link\">Cancel</a>\n    </div>\n</body>\n</html>"}, {"file": "event_details.html", "path": "calendar_app/templates/calendar_app/event_details.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Details</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"event-details-container\">\n        <h1 class=\"title\" id=\"event-title\">{{ event.title }}</h1>\n        <p id=\"event-description\"><strong class=\"label\">Description:</strong> {{ event.description }}</p>\n        <p id=\"event-start-time\"><strong class=\"label\">Start Time:</strong> {{ event.start_time }}</p>\n        <p id=\"event-end-time\"><strong class=\"label\">End Time:</strong> {{ event.end_time }}</p>\n\n        <div class=\"links\" id=\"event-details-links\">\n            <a href=\"{% url 'edit_event' event_id=event.id %}\" class=\"link\" id=\"edit-event-link\">Edit Event</a> |\n            <a href=\"{% url 'delete_event' event_id=event.id %}\" class=\"link\" id=\"delete-event-link\">Delete Event</a> |\n            <a href=\"{% url 'home' %}\" class=\"link\" id=\"home-link\">Back to Home</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "calendar_app/templates/calendar_app/edit_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Event</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"edit-event-container\">\n        <h1 class=\"title\" id=\"edit-event-title\">Edit Event: {{ event.title }}</h1>\n        <form method=\"post\" id=\"edit-event-form\">\n            {% csrf_token %}\n            <div id=\"form-fields\">{{ form.as_p }}</div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"update-event-button\">Update Event</button>\n        </form>\n        <a href=\"{% url 'event_details' event_id=event.id %}\" id=\"cancel-link\">Cancel</a>\n    </div>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "calendar_app/templates/calendar_app/delete_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Event</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"delete-event-container\">\n        <h1 class=\"title\" id=\"delete-event-title\">Delete Event: {{ event.title }}</h1>\n        <p id=\"delete-confirmation\">Are you sure you want to delete this event?</p>\n        <form method=\"post\" id=\"delete-event-form\">\n            {% csrf_token %}\n            <button type=\"submit\" class=\"btn btn-danger\" id=\"delete-button\">Delete</button>\n        </form>\n        <a href=\"{% url 'event_details' event_id=event.id %}\" id=\"cancel-link\">Cancel</a>\n    </div>\n</body>\n</html>"}, {"file": "search_results.html", "path": "calendar_app/templates/calendar_app/search_results.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Search Results</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"search-results-container\">\n        <h1 class=\"title\" id=\"search-results-title\">Search Results for \"{{ query }}\"</h1>\n\n        <ul id=\"search-results-list\">\n            {% for event in events %}\n                <li class=\"event-item\" id=\"event-item-{{ event.id }}\">\n                    <a href=\"{% url 'event_details' event_id=event.id %}\" class=\"event-link\" id=\"event-link-{{ event.id }}\">{{ event.title }}</a>\n                </li>\n            {% empty %}\n                <li id=\"no-results-message\">No events found matching your search.</li>\n            {% endfor %}\n        </ul>\n        <a href=\"{% url 'home' %}\" id=\"home-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "list_all_events.html", "path": "calendar_app/templates/calendar_app/list_all_events.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>All Events</title>\n    <link rel=\"stylesheet\" href=\"{% static 'calendar_app/style.css' %}\">\n</head>\n<body>\n    <div class=\"container\" id=\"all-events-container\">\n        <h1 class=\"title\" id=\"all-events-title\">All Events</h1>\n\n        <ul id=\"all-events-list\">\n            {% for event in events %}\n                <li class=\"event-item\" id=\"event-item-{{ event.id }}\">\n                    <a href=\"{% url 'event_details' event_id=event.id %}\" class=\"event-link\" id=\"event-link-{{ event.id }}\">{{ event.title }}</a>\n                </li>\n            {% empty %}\n                <li id=\"no-events-message\">No events found.</li>\n            {% endfor %}\n        </ul>\n        <a href=\"{% url 'home' %}\" id=\"home-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "calendar_app/static/calendar_app/style.css", "code": "/* Basic styling for the calendar app */\n\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n    color: #333;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    text-align: center;\n    margin-bottom: 20px;\n    color: #007bff;\n}\n\n.date {\n    text-align: center;\n    margin-bottom: 20px;\n    color: #6c757d;\n}\n\n.links {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.link {\n    margin: 0 10px;\n    color: #007bff;\n    text-decoration: none;\n}\n\n.link:hover {\n    text-decoration: underline;\n}\n\nul {\n    list-style: none;\n    padding: 0;\n}\n\nli {\n    margin-bottom: 10px;\n}\n\n.event-item {\n    padding: 10px;\n    border-bottom: 1px solid #eee;\n}\n\n.event-link {\n    color: #007bff;\n    text-decoration: none;\n}\n\n.event-link:hover {\n    text-decoration: underline;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\nlabel {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.form-control {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.btn {\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    font-size: 16px;\n}\n\n.btn-primary {\n    background-color: #007bff;\n    color: #fff;\n}\n\n.btn-primary:hover {\n    background-color: #0056b3;\n}\n\n.btn-danger {\n    background-color: #dc3545;\n    color: #fff;\n}\n\n.btn-danger:hover {\n    background-color: #c82333;\n}\n\n#form-fields p label{\n    display: block;\n}\n"}], "9": [{"file": "urls.py", "path": "chatbot_project/chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('support/', views.support, name='support'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "chatbot_project/chatbot_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import ContactSalesForm, SupportMessageForm\n\ndef home(request):\n    context = {}\n    return render(request, 'home.html', context)\n\n\ndef features(request):\n    context = {}\n    return render(request, 'features.html', context)\n\n\ndef pricing(request):\n    if request.method == 'POST':\n        form = ContactSalesForm(request.POST)\n        if form.is_valid():\n            # Process the form data (e.g., send an email)\n            pass\n    else:\n        form = ContactSalesForm()\n    context = {'form': form}\n    return render(request, 'pricing.html', context)\n\n\ndef support(request):\n    if request.method == 'POST':\n        form = SupportMessageForm(request.POST)\n        if form.is_valid():\n            # Process the form data (e.g., send an email)\n            pass\n    else:\n        form = SupportMessageForm()\n    context = {'form': form}\n    return render(request, 'support.html', context)\n\n\ndef about(request):\n    context = {}\n    return render(request, 'about.html', context)"}, {"file": "home.html", "path": "chatbot_project/chatbot_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"home-title\" class=\"page-title\">Home</h1>\n    <p id=\"home-overview\" class=\"overview-text\">AI Chatbot Product Overview</p>\n{% endblock %}"}, {"file": "features.html", "path": "chatbot_project/chatbot_app/templates/features.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"features-title\" class=\"page-title\">Features</h1>\n    <p id=\"features-list\" class=\"feature-description\">Key Features</p>\n{% endblock %}"}, {"file": "pricing.html", "path": "chatbot_project/chatbot_app/templates/pricing.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"pricing-title\" class=\"page-title\">Pricing</h1>\n    <p id=\"pricing-plans\" class=\"pricing-description\">Pricing Plans</p>\n\n    <h2 id=\"contact-sales-heading\" class=\"form-heading\">Contact Sales</h2>\n    <form id=\"contact-sales-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"contact-submit\" class=\"submit-button\" type=\"submit\">Submit</button>\n    </form>\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_project/chatbot_app/templates/support.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"support-title\" class=\"page-title\">Support</h1>\n    <p id=\"support-faq\" class=\"faq-text\">FAQ</p>\n\n    <h2 id=\"support-form-heading\" class=\"form-heading\">Need Further Assistance?</h2>\n    <form id=\"support-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"support-submit\" class=\"submit-button\" type=\"submit\">Submit</button>\n    </form>\n{% endblock %}"}, {"file": "about.html", "path": "chatbot_project/chatbot_app/templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"about-title\" class=\"page-title\">About Us</h1>\n    <p id=\"company-background\" class=\"company-info\">Company Background</p>\n{% endblock %}"}, {"file": "base.html", "path": "chatbot_project/chatbot_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot</title>\n    <style>\n      .nav-link { margin-right: 10px;}\n      .page-title {font-size: 2em; margin-bottom: 10px;}\n      .overview-text, .feature-description, .pricing-description, .faq-text, .company-info { line-height: 1.6; }\n      .form-heading { margin-top: 20px; font-size: 1.5em;}\n      .submit-button { padding: 10px 20px; background-color: #4CAF50; color: white; border: none; cursor: pointer;}\n\n    </style>\n</head>\n<body>\n    <nav id=\"main-nav\">\n        <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a> |\n        <a id=\"features-link\" class=\"nav-link\" href=\"{% url 'features' %}\">Features</a> |\n        <a id=\"pricing-link\" class=\"nav-link\" href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a id=\"support-link\" class=\"nav-link\" href=\"{% url 'support' %}\">Support</a> |\n        <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About Us</a>\n    </nav>\n    <hr>\n    <main id=\"main-content\">\n      {% block content %}\n      {% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "forms.py", "path": "chatbot_project/chatbot_app/forms.py", "code": "from django import forms\n\nclass ContactSalesForm(forms.Form):\n    name = forms.CharField(label='Your Name', max_length=100, widget=forms.TextInput(attrs={'id': 'contact-name', 'class': 'form-input'}))\n    email = forms.EmailField(label='Your Email', widget=forms.EmailInput(attrs={'id': 'contact-email', 'class': 'form-input'}))\n    message = forms.CharField(label='Message', widget=forms.Textarea(attrs={'id': 'contact-message', 'class': 'form-textarea'}))\n\nclass SupportMessageForm(forms.Form):\n    name = forms.CharField(label='Your Name', max_length=100, widget=forms.TextInput(attrs={'id': 'support-name', 'class': 'form-input'}))\n    email = forms.EmailField(label='Your Email', widget=forms.EmailInput(attrs={'id': 'support-email', 'class': 'form-input'}))\n    message = forms.CharField(label='Message', widget=forms.Textarea(attrs={'id': 'support-message', 'class': 'form-textarea'}))"}, {"file": "settings.py", "path": "chatbot_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'chatbot_app', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'chatbot_app', 'static')]\n"}, {"file": "urls.py", "path": "chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),\n]"}, {"file": "wsgi.py", "path": "chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "chatbot_project/chatbot_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "models.py", "path": "chatbot_project/chatbot_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "__init__.py", "path": "chatbot_project/chatbot_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "chatbot_project/__init__.py", "code": ""}, {"file": "manage.py", "path": "chatbot_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "11": [{"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport json\n\n\ndef home(request):\n    if request.method == 'POST':\n        # Handle form submission (status selection, notes, file import)\n        selected_status = request.POST.get('status')\n        review_notes = request.POST.get('notes')\n        imported_file = request.FILES.get('json_file')\n\n        if imported_file:\n            try:\n                data = json.load(imported_file)\n                # Process the imported JSON data\n                context = {\n                    'welcome_message': 'Welcome to the Reviewer',\n                    'json_data': data\n                }\n            except json.JSONDecodeError:\n                context = {\n                    'welcome_message': 'Welcome to the Reviewer',\n                    'error_message': 'Invalid JSON file.'\n                }\n\n\n        else:\n            context = {\n                'welcome_message': 'Welcome to the Reviewer',\n                'selected_status': selected_status,\n                'review_notes': review_notes\n\n            }\n\n\n\n        return render(request, 'home.html', context)\n\n\n    else:\n        # Initial page load\n        context = {\n            'welcome_message': 'Welcome to the Reviewer'\n        }\n        return render(request, 'home.html', context)\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "home.html", "path": "myproject/myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <style>\n        .container { width: 80%; margin: 0 auto; }\n        .error-message { color: red; }\n        .form-group { margin-bottom: 10px; }\n        label { display: block; margin-bottom: 5px; }\n        textarea { width: 100%; }\n        .json-data { white-space: pre-wrap; word-break: break-all; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"welcome-heading\">{{ welcome_message }}</h1>\n\n        {% if error_message %}\n            <p id=\"error-paragraph\" class=\"error-message\">{{ error_message }}</p>\n        {% endif %}\n\n        <form id=\"review-form\" method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n\n            <div class=\"form-group\">\n                <label for=\"status\" id=\"status-label\">Status:</label>\n                <select id=\"status\" name=\"status\" class=\"form-control\">\n                    <option value=\"Select\">Select</option>\n                    <option value=\"Pass\">Pass</option>\n                    <option value=\"Fail\">Fail</option>\n                </select>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"notes\" id=\"notes-label\">Review Notes:</label>\n                <textarea id=\"notes\" name=\"notes\" rows=\"4\" cols=\"50\" class=\"form-control\"></textarea>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"json_file\" id=\"json-file-label\">Import JSON File:</label>\n                <input type=\"file\" id=\"json_file\" name=\"json_file\" class=\"form-control\">\n            </div>\n\n            <button type=\"submit\" id=\"submit-button\" class=\"btn btn-primary\">Submit</button>\n        </form>\n\n        {% if json_data %}\n            <h2>Imported JSON Data:</h2>\n            <pre id=\"json-data-pre\" class=\"json-data\">{{ json_data|safe }}</pre>\n        {% endif %}\n    </div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "myproject/myapp/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n    <style>\n        .container { width: 80%; margin: 0 auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1>About This Website</h1>\n        <p>This website is designed for reviewing test code.</p>\n        <p>It allows users to import JSON files containing test code snippets, select a status (Pass/Fail), and add review notes.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "models.py", "path": "myproject/myapp/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "myproject/myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "myproject/myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"}, {"file": "__init__.py", "path": "myproject/myapp/__init__.py", "code": ""}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'myapp', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "asgi.py", "path": "myproject/myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "13": [{"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'myapp', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'myapp', 'static')]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255, null=True, blank=True)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name}'"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\n# Customer Management Views\n\ndef add_customer(request):\n    return HttpResponse('Add Customer - Implement Form and Logic')\n\ndef edit_customer(request, customer_id):\n    return HttpResponse('Edit Customer - Implement Form and Logic')\n\ndef delete_customer(request, customer_id):\n    return HttpResponse('Delete Customer - Implement Logic')\n\ndef view_customer(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    return render(request, 'view_customer.html', {'customer': customer})\n\n# Product Management Views\n\ndef add_product(request):\n    return HttpResponse('Add Product - Implement Form and Logic')\n\ndef edit_product(request, product_id):\n    return HttpResponse('Edit Product - Implement Form and Logic')\n\ndef delete_product(request, product_id):\n    return HttpResponse('Delete Product - Implement Logic')\n\ndef view_product(request, product_id):\n    product = get_object_or_404(Product, pk=product_id)\n    return render(request, 'view_product.html', {'product': product})\n\n# Purchase Record Views\n\ndef add_purchase_record(request):\n    return HttpResponse('Add Purchase Record - Implement Form and Logic')\n\ndef edit_purchase_record(request, record_id):\n    return HttpResponse('Edit Purchase Record - Implement Form and Logic')\n\ndef delete_purchase_record(request, record_id):\n    return HttpResponse('Delete Purchase Record - Implement Logic')\n\ndef view_purchase_record(request, record_id):\n    record = get_object_or_404(PurchaseRecord, pk=record_id)\n    return render(request, 'view_purchase_record.html', {'record': record})\n\n\n# Preferred Products Management Views\n\ndef add_preferred_product(request):\n    return HttpResponse('Add Preferred Product - Implement Form and Logic')\n\ndef edit_preferred_product(request, customer_id, product_id):\n    return HttpResponse('Edit Preferred Product - Implement Form and Logic')\n\ndef delete_preferred_product(request, customer_id, product_id):\n    return HttpResponse('Delete Preferred Product - Implement Logic')\n\ndef view_preferred_products(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    preferred_products = PreferredProduct.objects.filter(customer=customer)\n    return render(request, 'view_preferred_products.html', {'customer': customer, 'preferred_products': preferred_products})\n\n\n# Sales Analysis Views\n\ndef generate_sales_report(request):\n    return HttpResponse('Generate Sales Report - Implement Logic')\n\ndef analyze_sales_trends(request):\n    return HttpResponse('Analyze Sales Trends - Implement Logic')\n\ndef product_performance_analysis(request):\n    return HttpResponse('Product Performance Analysis - Implement Logic')"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n\n    path('customer/add/', views.add_customer, name='add_customer'),\n    path('customer/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customer/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customer/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n\n    path('product/add/', views.add_product, name='add_product'),\n    path('product/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('product/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('product/view/<int:product_id>/', views.view_product, name='view_product'),\n\n    path('purchase/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchase/edit/<int:record_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchase/delete/<int:record_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchase/view/<int:record_id>/', views.view_purchase_record, name='view_purchase_record'),\n\n    path('preferred/add/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred/edit/<int:customer_id>/<int:product_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred/delete/<int:customer_id>/<int:product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n\n    path('sales/report/', views.generate_sales_report, name='generate_sales_report'),\n    path('sales/trends/', views.analyze_sales_trends, name='analyze_sales_trends'),\n    path('sales/performance/', views.product_performance_analysis, name='product_performance_analysis'),\n]"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "home.html", "path": "myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the System!</h1>\n        <p id=\"home-overview\" class=\"overview\">Overview of system features goes here.</p>\n\n        <h2 id=\"navigation-title\" class=\"subtitle\">Navigation</h2>\n        <ul id=\"navigation-list\" class=\"nav-list\">\n            <li class=\"nav-item\"><a id=\"add-customer-link\" class=\"nav-link\" href=\"{% url 'add_customer' %}\">Add Customer</a></li>\n            <li class=\"nav-item\"><a id=\"customer-list-link\" class=\"nav-link\" href=\"#\">Customer List (Implement Later)</a></li>\n            <li class=\"nav-item\"><a id=\"add-product-link\" class=\"nav-link\" href=\"{% url 'add_product' %}\">Add Product</a></li>\n            <li class=\"nav-item\"><a id=\"product-list-link\" class=\"nav-link\" href=\"#\">Product List (Implement Later)</a></li>\n            <li class=\"nav-item\"><a id=\"add-purchase-record-link\" class=\"nav-link\" href=\"{% url 'add_purchase_record' %}\">Add Purchase Record</a></li>\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "view_customer.html", "path": "myapp/templates/view_customer.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>View Customer</title>\n</head>\n<body>\n    <div id=\"customer-details-container\" class=\"container\">\n        <h1 id=\"customer-details-title\" class=\"title\">Customer Details</h1>\n        <p id=\"customer-name\" class=\"detail\">Name: {{ customer.name }}</p>\n        <p id=\"customer-birthday\" class=\"detail\">Birthday: {{ customer.birthday }}</p>\n        <p id=\"customer-age\" class=\"detail\">Age: {{ customer.age }}</p>\n        <p id=\"customer-sex\" class=\"detail\">Sex: {{ customer.sex }}</p>\n        <p id=\"customer-company\" class=\"detail\">Company: {{ customer.company }}</p>\n        <p id=\"customer-phone\" class=\"detail\">Phone Number: {{ customer.phone_number }}</p>\n\n        <div id=\"customer-actions\" class=\"actions\">\n            <a id=\"edit-customer-link\" class=\"action-link\" href=\"{% url 'edit_customer' customer.id %}\">Edit</a>\n            <a id=\"delete-customer-link\" class=\"action-link\" href=\"{% url 'delete_customer' customer.id %}\">Delete</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "view_product.html", "path": "myapp/templates/view_product.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>View Product</title>\n</head>\n<body>\n    <div id=\"product-details-container\" class=\"container\">\n        <h1 id=\"product-details-title\" class=\"title\">Product Details</h1>\n        <p id=\"product-name\" class=\"detail\">Name: {{ product.name }}</p>\n        <p id=\"product-category\" class=\"detail\">Category: {{ product.category }}</p>\n        <p id=\"product-price\" class=\"detail\">Recommended Price: {{ product.recommended_price }}</p>\n\n        <div id=\"product-actions\" class=\"actions\">\n            <a id=\"edit-product-link\" class=\"action-link\" href=\"{% url 'edit_product' product.id %}\">Edit</a>\n            <a id=\"delete-product-link\" class=\"action-link\" href=\"{% url 'delete_product' product.id %}\">Delete</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "view_purchase_record.html", "path": "myapp/templates/view_purchase_record.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>View Purchase Record</title>\n</head>\n<body>\n    <div id=\"purchase-record-container\" class=\"container\">\n        <h1 id=\"purchase-record-title\" class=\"title\">Purchase Record Details</h1>\n        <p id=\"purchase-datetime\" class=\"detail\">Datetime: {{ record.datetime }}</p>\n        <p id=\"purchase-product\" class=\"detail\">Product: {{ record.product.name }}</p>\n        <p id=\"purchase-customer\" class=\"detail\">Customer: {{ record.customer.name }}</p>\n        <p id=\"purchase-quantity\" class=\"detail\">Quantity: {{ record.quantity }}</p>\n        <p id=\"purchase-amount\" class=\"detail\">Amount: {{ record.amount }}</p>\n\n        <div id=\"purchase-actions\" class=\"actions\">\n            <a id=\"edit-purchase-link\" class=\"action-link\" href=\"{% url 'edit_purchase_record' record.id %}\">Edit</a>\n            <a id=\"delete-purchase-link\" class=\"action-link\" href=\"{% url 'delete_purchase_record' record.id %}\">Delete</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "view_preferred_products.html", "path": "myapp/templates/view_preferred_products.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>View Preferred Products</title>\n</head>\n<body>\n    <div id=\"preferred-products-container\" class=\"container\">\n        <h1 id=\"preferred-products-title\" class=\"title\">Preferred Products for {{ customer.name }}</h1>\n        <ul id=\"preferred-products-list\" class=\"product-list\">\n            {% for product in preferred_products %}\n                <li class=\"product-item\">\n                    <span class=\"product-name\">{{ product.product.name }}</span>\n                    <a id=\"delete-preferred-product-link\" class=\"remove-link\" href=\"{% url 'delete_preferred_product' customer.id product.product.id %}\">Remove</a>\n                </li>\n            {% empty %}\n                <li class=\"no-products\">No preferred products found.</li>\n            {% endfor %}\n        </ul>\n        <a id=\"add-preferred-product-link\" class=\"add-link\" href=\"{% url 'add_preferred_product' %}\">Add Preferred Product</a>\n    </div>\n</body>\n</html>"}], "14": [{"file": "views.py", "path": "helloworld/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    context = {'message': 'Hello World'}\n    return render(request, 'helloworld/hello_world.html', context)"}, {"file": "urls.py", "path": "helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworld.urls')),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'helloworld',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail because Django is not installed.\n        # The Python path may need to be updated to include the Django project directory.\n        # The setuptools package might be out of date.\n        # The virtual environment may not be activated.\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from None\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "hello_world.html", "path": "templates/helloworld/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n        }\n        .hello-text {\n            font-family: Arial, sans-serif;\n            font-size: 2em;\n            color: #333;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"hello-container\" class=\"hello-text-container\">\n        <p id=\"hello-message\" class=\"hello-text\">{{ message }}</p>\n    </div>\n</body>\n</html>"}, {"file": "models.py", "path": "helloworld/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "helloworld/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-heading\" class=\"heading\">Welcome!</h1>\n        <a id=\"home-link\" href=\"{% url 'helloworld' %}\">\n            <button id=\"home-button\" class=\"button\">Go to HelloWorld</button>\n        </a>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <div id=\"helloworld-container\" class=\"container\">\n        <h1 id=\"helloworld-heading\" class=\"heading\">HelloWorld!</h1>\n        <a id=\"helloworld-link\" href=\"{% url 'home' %}\" >\n           Back to Home\n        </a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path(\"admin/\", admin.site.urls),\n    path(\"\", include(\"myapp.urls\"))\n]"}], "16": [{"file": "input_validation.py", "path": "validation/input_validation.py", "code": "def check_file_existence(filename):\n    \"\"\"Checks if the specified file exists.\"\"\"\n    import os\n    if not os.path.exists(filename):\n        raise FileNotFoundError(f\"Error: The file '{filename}' does not exist.\")\n\n\ndef validate_headers(filename, expected_headers):\n    \"\"\"Validates that the Excel file has the expected headers.\"\"\"\n    import pandas as pd\n    try:\n        df = pd.read_excel(filename)\n        actual_headers = list(df.columns)\n        if actual_headers != expected_headers:\n            raise ValueError(f\"Error: Expected headers {expected_headers}, but found {actual_headers}.\")\n    except FileNotFoundError:\n        print(f\"File not found: {filename}\")\n        return False\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n    return True\n\ndef validate_time_column(filename):\n    \"\"\"Validates the 'Time' column to ensure the time format is correct (HH:MM - HH:MM).\"\"\"\n    import pandas as pd\n    import re\n    try:\n        df = pd.read_excel(filename)\n        if 'Time' not in df.columns:\n            print(\"Time column does not exist.\")\n            return False\n\n        time_pattern = re.compile(r'^([01]?[0-9]|2[0-3]):[0-5][0-9] - ([01]?[0-9]|2[0-3]):[0-5][0-9]$')\n        for time_str in df['Time']:\n            if not isinstance(time_str, str) or not time_pattern.match(time_str):\n                print(f\"Invalid time format: {time_str}\")\n                return False\n    except FileNotFoundError:\n        print(f\"File not found: {filename}\")\n        return False\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n    return True\n\n\ndef validate_data_integrity(filename):\n    \"\"\"Placeholder for complex data integrity validation rules.\"\"\"\n    # Add more sophisticated checks, e.g., ensuring weekday matches time.\n    import pandas as pd\n    try:\n        df = pd.read_excel(filename)\n\n        # Example (Placeholder): Check if 'Name' column has any empty strings\n        if df['Name'].isnull().any():\n            print(\"Error: 'Name' column contains null values.\")\n            return False\n\n    except FileNotFoundError:\n        print(f\"File not found: {filename}\")\n        return False\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n    return True\n\n\ndef validate_null_value(filename):\n    \"\"\"Checks for null values in any of the columns.\"\"\"\n    import pandas as pd\n    try:\n        df = pd.read_excel(filename)\n        if df.isnull().values.any():\n            print(\"Error: File contains null values.\")\n            return False\n    except FileNotFoundError:\n        print(f\"File not found: {filename}\")\n        return False\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n    return True"}, {"file": "data_transformation.py", "path": "transformation/data_transformation.py", "code": "import pandas as pd\n\ndef transform_to_two_dimension_table(data):\n    \"\"\"Transforms the input data into a two-dimensional table (DataFrame).\"\"\"\n    # Assuming 'data' is a list of dictionaries or similar structure\n    # This is a simplified example; adjust based on the actual data structure.\n    if not data:\n        return pd.DataFrame()\n\n    df = pd.DataFrame(data)\n    return df\n\n\ndef data_mapping(data, table):\n    \"\"\"Placeholder function for mapping data from the original data source to the transformed table.\"\"\"\n    # Example:\n    # This function could be used to enrich the 'table' DataFrame with additional information\n    # based on the original 'data'.  For instance, lookups, calculations, etc.\n    # Since the exact nature of data mapping depends heavily on the data and requirements,\n    # this example is intentionally left as a placeholder.\n    pass"}, {"file": "output_creation.py", "path": "output/output_creation.py", "code": "import pandas as pd\nimport os\n\ndef create_output_excel_file(filename):\n    \"\"\"Creates an empty Excel file if it doesn't exist.\"\"\"\n    if not os.path.exists(filename):\n        # Create an empty DataFrame and save it to the file\n        df = pd.DataFrame()\n        df.to_excel(filename, index=False)\n\ndef save_table_to_excel(table, filename):\n    \"\"\"Saves a Pandas DataFrame to an Excel file.\"\"\"\n    try:\n        table.to_excel(filename, index=False)\n    except Exception as e:\n        print(f\"An error occurred while saving to Excel: {e}\")"}, {"file": "main.py", "path": "main.py", "code": "import input_validation\nimport data_transformation\nimport output_creation\nimport pandas as pd\n\ndef load_data_from_excel(filename):\n    \"\"\"Loads data from an Excel file using pandas.\"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df.to_dict('records')  # Convert DataFrame to list of dictionaries\n    except FileNotFoundError:\n        print(f\"File not found: {filename}\")\n        return []\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return []\n\n\ndef main():\n    # Input File Validation\n    filename = 'Spring Semester Subjects.xlsx'\n    try:\n        input_validation.check_file_existence(filename)\n        if not input_validation.validate_headers(filename, ['#', 'Name', 'Weekday', 'Time']):\n            print(\"Header validation failed. Exiting.\")\n            return\n        if not input_validation.validate_time_column(filename):\n            print(\"Time column validation failed. Exiting.\")\n            return\n        if not input_validation.validate_data_integrity(filename):\n            print(\"Data integrity validation failed. Exiting.\")\n            return\n        if not input_validation.validate_null_value(filename):\n            print(\"Null value validation failed. Exiting.\")\n            return\n\n        # Data Loading\n        data = load_data_from_excel(filename)\n        if not data:\n            print(\"Failed to load data. Exiting.\")\n            return\n\n        # Data Transformation\n        transformed_table = data_transformation.transform_to_two_dimension_table(data)\n        data_transformation.data_mapping(data, transformed_table)\n\n        # Output File Creation\n        output_filename = 'Transformed_Subjects.xlsx'\n        output_creation.create_output_excel_file(output_filename)\n        output_creation.save_table_to_excel(transformed_table, output_filename)\n\n        print(f\"Successfully transformed and saved data to {output_filename}\")\n\n    except FileNotFoundError as e:\n        print(e)\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == '__main__':\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nopenpyxl"}, {"file": "README.md", "path": "README.md", "code": "# Data Transformation Project\n\nThis project takes an Excel file as input, validates the data, transforms it into a two-dimensional table, and saves the transformed data to a new Excel file.\n\n## Requirements\n\n- Python 3.6+\n- pandas\n- openpyxl\n\nInstall the required packages using:\n\n```bash\npip install -r requirements.txt\n```\n\n## Usage\n\n1.  Place the input Excel file named `Spring Semester Subjects.xlsx` in the same directory as the `main.py` file.\n2.  Run the `main.py` script:\n\n```bash\npython main.py\n```\n\n3.  The transformed data will be saved to a new Excel file named `Transformed_Subjects.xlsx` in the same directory.\n\n## Project Structure\n\n```\n.\n\u251c\u2500\u2500 main.py\n\u251c\u2500\u2500 validation/\n\u2502   \u2514\u2500\u2500 input_validation.py\n\u251c\u2500\u2500 transformation/\n\u2502   \u2514\u2500\u2500 data_transformation.py\n\u251c\u2500\u2500 output/\n\u2502   \u2514\u2500\u2500 output_creation.py\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 README.md\n```\n\n## Functionality\n\n-   **Input Validation:**\n    -   Checks if the input file exists.\n    -   Validates the headers of the input file.\n    -   Validates the format of the 'Time' column.\n    -   Checks for data integrity issues (placeholder for more complex checks).\n    -   Checks for null values in the input data.\n-   **Data Transformation:**\n    -   Transforms the input data into a two-dimensional table using pandas DataFrames.\n    -   Provides a placeholder for data mapping and enrichment.\n-   **Output Creation:**\n    -   Creates a new Excel file to store the transformed data.\n    -   Saves the transformed table to the Excel file.\n\n## Notes\n\n-   The `data_mapping` function in `data_transformation.py` is a placeholder and needs to be implemented based on the specific data transformation requirements.\n-   The `validate_data_integrity` function in `input_validation.py` can be extended to include more sophisticated data validation checks.\n-   Error handling has been included to catch common errors such as file not found and invalid data formats.\n"}, {"file": "Spring Semester Subjects.xlsx", "path": "Spring Semester Subjects.xlsx", "code": "Mock Excel File Content\n#\tName\tWeekday\tTime\n1\tCalculus I\tMonday\t08:00 - 09:00\n2\tLinear Algebra\tTuesday\t10:00 - 11:00\n3\tPhysics I\tWednesday\t14:00 - 15:00\n4\tChemistry\tThursday\t16:00 - 17:00\n5\tEnglish\tFriday\t09:00 - 10:00"}], "17": [{"file": "DataPreparation.py", "path": "DataPreparation.py", "code": "import pandas as pd\n\ndef ReadDataset(filename):\n    \"\"\"Load the dataset.\n    Args: filename (str): The name of the Excel file.\n    Returns: pandas.DataFrame: The loaded dataset.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found.\")\n        return None\n\n\ndef LagDependentVariable(df, column_name):\n    \"\"\"Apply a one-period lag to the dependent variable.\n    Args: df (pandas.DataFrame): The input DataFrame.\n          column_name (str): The name of the column to lag.\n    Returns: pandas.DataFrame: The DataFrame with the lagged variable.\n    \"\"\"\n    df['lagged_' + column_name] = df[column_name].shift(1)\n    df = df.dropna()\n    return df\n\n\ndef PrepareIndependentVariables(df):\n    \"\"\"Prepare the independent variables.\n    Args: df (pandas.DataFrame): The input DataFrame.\n    Returns: pandas.DataFrame: The prepared independent variables.\n    \"\"\"\n    # Select all columns except the target and lagged target variables\n    X = df.drop(['result', 'lagged_result'], axis=1, errors='ignore')\n    return X\n\n\ndef main():\n    # Read Dataset\n    df = ReadDataset('Gamedata.xlsx')\n    \n    if df is not None:\n        # Lag Dependent Variable\n        df = LagDependentVariable(df, 'result')\n        \n        # Prepare Independent Variables\n        X = PrepareIndependentVariables(df)\n\n        # Save prepared data (optional, for debugging or later use)\n        X.to_csv('independent_variables.csv', index=False)\n\n        print(\"Data preparation completed. Independent variables saved to independent_variables.csv\")\n    else:\n        print(\"Data preparation failed.\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "ModelCreation.py", "path": "ModelCreation.py", "code": "import pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import classification_report\nimport statsmodels.api as sm  # For detailed model summary\n\ndef CreateLogisticModel(X, y):\n    \"\"\"Develop a logistic regression model.\n    Args: X (pandas.DataFrame): The independent variables.\n          y (pandas.Series): The dependent variable.\n    Returns: LogisticRegression: The trained logistic regression model.\n    \"\"\"\n    # Split data into training and testing sets\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    # Create Logistic Regression model\n    model = LogisticRegression(solver='liblinear', random_state=42)\n    model.fit(X_train, y_train)\n\n    # Evaluate the model\n    y_pred = model.predict(X_test)\n    print(classification_report(y_test, y_pred))\n\n    return model\n\n\ndef GenerateModelSummary(model, X, y):\n    \"\"\"Generate a summary of the logistic model.\n    Args: model (LogisticRegression): The trained logistic regression model.\n    Returns: str: The model summary.\n    \"\"\"\n    # Statsmodels provides more detailed summary\n    X = sm.add_constant(X)\n    model_sm = sm.Logit(y, X).fit()\n    return model_sm.summary().as_text()\n\n\ndef main():\n    # Load prepared data (replace with actual loading)\n    try:\n        X = pd.read_csv('independent_variables.csv')\n        y = pd.read_excel('Gamedata.xlsx')['result'].iloc[1:] # Correctly align target with lagged data\n\n    except FileNotFoundError:\n        print(\"Error: Independent variables or Gamedata.xlsx file not found.  Run DataPreparation.py first.\")\n        return\n    except KeyError:\n        print(\"Error: 'result' column not found in Gamedata.xlsx\")\n        return\n    \n    # Create Logistic Model\n    model = CreateLogisticModel(X, y)\n\n    # Generate Model Summary\n    summary = GenerateModelSummary(model, X, y)\n\n    # Save Model Summary to a file\n    with open('model_summary.txt', 'w') as f:\n        f.write(summary)\n    print(\"Model summary saved to model_summary.txt\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "Output.py", "path": "Output.py", "code": "import pandas as pd\n\ndef WriteSummary(summary, filename):\n    \"\"\"Output the model summary to an Excel file.\n    Args: summary (str): The model summary.\n          filename (str): The name of the Excel file.\n    \"\"\"\n    df = pd.DataFrame([summary])\n    try:\n        df.to_excel(filename, index=False, header=False)\n        print(f\"Model summary written to {filename}\")\n    except Exception as e:\n        print(f\"Error writing to {filename}: {e}\")\n\n\ndef main():\n    # Load Model Summary (replace with actual loading)\n    try:\n        with open('model_summary.txt', 'r') as f:\n            summary = f.read()\n    except FileNotFoundError:\n        print(\"Error: model_summary.txt not found. Run ModelCreation.py first.\")\n        return\n\n    # Write Summary to Excel\n    WriteSummary(summary, 'Logistic.xlsx')\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nscikit-learn\nstatsmodels"}, {"file": "README.md", "path": "README.md", "code": "# Logistic Regression Project\n\nThis project implements a logistic regression model for predicting game outcomes.\n\n## Project Structure\n\n*   `DataPreparation.py`:  Loads, preprocesses, and prepares the data for modeling.\n*   `ModelCreation.py`: Creates, trains, and evaluates the logistic regression model. Generates a model summary.\n*   `Output.py`: Writes the model summary to an Excel file.\n*   `requirements.txt`: Lists the Python packages required to run the project.\n*   `README.md`: Provides an overview of the project.\n\n## Setup\n\n1.  **Create a virtual environment (recommended):**\n    ```bash\n    python -m venv venv\n    source venv/bin/activate  # On Linux/macOS\n    venv\\Scripts\\activate  # On Windows\n    ```\n\n2.  **Install dependencies:**\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n## Usage\n\n1.  **Prepare the data:**\n    *   Place your dataset in an Excel file named `Gamedata.xlsx` in the same directory as the scripts.\n    *   Make sure the Excel file contains a column named `result` representing the target variable.\n    *   Run `DataPreparation.py` to load and prepare the data:\n        ```bash\n        python DataPreparation.py\n        ```\n        This will create a file named `independent_variables.csv` containing the prepared independent variables.\n\n2.  **Create and train the model:**\n    *   Run `ModelCreation.py` to create and train the logistic regression model:\n        ```bash\n        python ModelCreation.py\n        ```\n        This will generate a file named `model_summary.txt` containing the model summary.\n\n3.  **Output the model summary:**\n    *   Run `Output.py` to write the model summary to an Excel file:\n        ```bash\n        python Output.py\n        ```\n        This will create a file named `Logistic.xlsx` containing the model summary.\n\n## Notes\n\n*   Make sure to have the `Gamedata.xlsx` file with the 'result' column in the correct location before running the scripts.\n*   The `DataPreparation.py` script creates the `independent_variables.csv` file, which is used by `ModelCreation.py`.  Ensure that you run `DataPreparation.py` before `ModelCreation.py`.\n*   The `ModelCreation.py` script creates the `model_summary.txt` file, which is used by `Output.py`.  Ensure that you run `ModelCreation.py` before `Output.py`.\n\n## Example Gamedata.xlsx Structure\n\n| feature1 | feature2 | feature3 | result |\n|----------|----------|----------|--------|\n| 0.5      | 0.2      | 0.8      | 1      |\n| 0.7      | 0.9      | 0.1      | 0      |\n| 0.3      | 0.6      | 0.4      | 1      |\n| ...      | ...      | ...      | ...    |\n"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=100)\n    text = models.TextField()\n    created_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.author + ': ' + self.text[:20]\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import BlogPost, Comment, Category\nfrom django.core.paginator import Paginator\nfrom django.db.models import Q\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5]\n    context = {'latest_posts': latest_posts}\n    return render(request, 'blog/home.html', context)\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    return render(request, 'blog/blog_post_detail.html', {'post': post})\n\ndef search(request):\n    query = request.GET.get('q')\n    results = BlogPost.objects.filter(Q(title__icontains=query) | Q(content__icontains=query))\n    return render(request, 'blog/search_results.html', {'results': results, 'query': query})\n\n# Placeholder views - to be implemented\n\ndef add_post(request):\n    return HttpResponse(\"Add Post - Implementation Pending\")\n\ndef manage_post(request, pk):\n    return HttpResponse(\"Manage Post - Implementation Pending\")\n\ndef manage_comments(request, pk):\n    return HttpResponse(\"Manage Comments - Implementation Pending\")\n\ndef about(request):\n    return HttpResponse(\"About Page - Implementation Pending\")\n\ndef categories(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/categories.html', {'categories': categories})\n\ndef category_detail(request, category_name):\n    category = get_object_or_404(Category, name=category_name)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\ndef manage_categories(request):\n    return HttpResponse(\"Manage Categories - Implementation Pending\")\n\ndef archive(request):\n    return HttpResponse(\"Archive - Implementation Pending\")"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('search/', views.search, name='search'),\n\tpath('add_post/', views.add_post, name='add_post'),\n\tpath('manage_post/<int:pk>/', views.manage_post, name='manage_post'),\n\tpath('manage_comments/<int:pk>/', views.manage_comments, name='manage_comments'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('categories/<str:category_name>/', views.category_detail, name='category_detail'),\n    path('manage_categories/', views.manage_categories, name='manage_categories'),\n    path('archive/', views.archive, name='archive'),\n]"}, {"file": "home.html", "path": "blog/templates/blog/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"home-container\" class=\"container\">\n    <h1 id=\"home-title\" class=\"page-title\">Welcome to the Blog</h1>\n\n    <form id=\"search-form\" class=\"search-form\" action=\"{% url 'search' %}\" method=\"get\">\n        <input id=\"search-input\" class=\"search-input\" type=\"text\" name=\"q\" placeholder=\"Search posts...\">\n        <button id=\"search-button\" class=\"search-button\" type=\"submit\">Search</button>\n    </form>\n\n    <h2 id=\"latest-posts-title\" class=\"section-title\">Latest Posts</h2>\n    <ul id=\"latest-posts-list\" class=\"post-list\">\n        {% for post in latest_posts %}\n            <li class=\"post-item\"><a class=\"post-link\" href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n    </div>\n{% endblock %}"}, {"file": "blog_post_detail.html", "path": "blog/templates/blog/blog_post_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"post-detail-container\" class=\"container\">\n    <h1 id=\"post-title\" class=\"post-title\">{{ post.title }}</h1>\n    <p id=\"post-content\" class=\"post-content\">{{ post.content }}</p>\n    <p id=\"post-publication-date\" class=\"post-publication-date\">Published: {{ post.publication_date }}</p>\n\n    <h2 id=\"comments-title\" class=\"comments-title\">Comments</h2>\n    <p id=\"comments-placeholder\" class=\"comments-placeholder\">Comments Section - Implementation Pending</p>\n    </div>\n{% endblock %}"}, {"file": "search_results.html", "path": "blog/templates/blog/search_results.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"search-results-container\" class=\"container\">\n    <h1 id=\"search-results-title\" class=\"page-title\">Search Results for \"{{ query }}\"</h1>\n\n    {% if results %}\n        <ul id=\"search-results-list\" class=\"post-list\">\n            {% for post in results %}\n                <li class=\"post-item\"><a class=\"post-link\" href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></li>\n            {% endfor %}\n        </ul>\n    {% else %}\n        <p id=\"no-results-message\" class=\"no-results-message\">No results found.</p>\n    {% endif %}\n    </div>\n{% endblock %}"}, {"file": "categories.html", "path": "blog/templates/blog/categories.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"categories-container\" class=\"container\">\n    <h1 id=\"categories-title\" class=\"page-title\">Blog Categories</h1>\n\n    <ul id=\"categories-list\" class=\"category-list\">\n        {% for category in categories %}\n            <li class=\"category-item\"><a class=\"category-link\" href=\"{% url 'category_detail' category.name %}\">{{ category.name }}</a></li>\n        {% endfor %}\n    </ul>\n\n    <a id=\"manage-categories-link\" class=\"manage-categories-link\" href=\"{% url 'manage_categories' %}\">Manage Categories</a>\n    </div>\n{% endblock %}"}, {"file": "category_detail.html", "path": "blog/templates/blog/category_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"category-detail-container\" class=\"container\">\n    <h1 id=\"category-title\" class=\"page-title\">Category: {{ category.name }}</h1>\n\n    <ul id=\"category-posts-list\" class=\"post-list\">\n        {% for post in posts %}\n            <li class=\"post-item\"><a class=\"post-link\" href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "blog/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n        }\n        nav {\n            background-color: #333;\n            color: #fff;\n            padding: 10px 0;\n            text-align: center;\n        }\n        nav a {\n            color: #fff;\n            text-decoration: none;\n            padding: 0 15px;\n        }\n        nav a:hover {\n            text-decoration: underline;\n        }\n        hr {\n            border: 1px solid #ddd;\n        }\n        .page-title {\n            font-size: 2em;\n            margin-bottom: 20px;\n        }\n        .search-form {\n            margin-bottom: 20px;\n        }\n        .search-input {\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n        }\n        .search-button {\n            padding: 8px 12px;\n            background-color: #333;\n            color: #fff;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .post-list {\n            list-style: none;\n            padding: 0;\n        }\n        .post-item {\n            margin-bottom: 10px;\n        }\n        .post-link {\n            color: #007bff;\n            text-decoration: none;\n        }\n        .post-link:hover {\n            text-decoration: underline;\n        }\n\n        .category-list {\n            list-style: none;\n            padding: 0;\n        }\n        .category-item {\n            margin-bottom: 10px;\n        }\n        .category-link {\n            color: #007bff;\n            text-decoration: none;\n        }\n        .category-link:hover {\n            text-decoration: underline;\n        }\n        .manage-categories-link {\n          display: inline-block;\n          margin-top: 10px;\n          padding: 8px 12px;\n          background-color: #555;\n          color: #fff;\n          text-decoration: none;\n          border-radius: 4px;\n        }\n        .manage-categories-link:hover {\n            background-color: #777;\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a> |\n        <a id=\"categories-link\" class=\"nav-link\" href=\"{% url 'categories' %}\">Categories</a> |\n        <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a> |\n\t\t<a id=\"archive-link\" class=\"nav-link\" href=\"{% url 'archive' %}\">Archive</a>\n    </nav>\n    <hr id=\"nav-divider\" class=\"nav-divider\">\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "admin.py", "path": "blog/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Comment, Category\n\nadmin.site.register(BlogPost)\nadmin.site.register(Comment)\nadmin.site.register(Category)"}, {"file": "apps.py", "path": "blog/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'"}, {"file": "__init__.py", "path": "blog/__init__.py", "code": ""}, {"file": "settings.py", "path": "mysite/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'blog/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'blog/static')]\n"}, {"file": "urls.py", "path": "mysite/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "wsgi.py", "path": "mysite/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "mysite/__init__.py", "code": ""}, {"file": "static.txt", "path": "blog/static/static.txt", "code": "Place for static files"}]}