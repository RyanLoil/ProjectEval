{"1": [{"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calculator/', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'bmi_calculator/home.html')\n\ndef bmi_calculator(request):\n    bmi = None\n    category = None\n\n    if request.method == 'POST':\n        height = float(request.POST.get('height'))\n        weight = float(request.POST.get('weight'))\n        height_unit = request.POST.get('height_unit')\n        weight_unit = request.POST.get('weight_unit')\n\n        if height_unit == 'inches':\n            height = height * 0.0254  # Convert inches to meters\n        else:\n            height = height / 100 # convert cm to meter\n\n        if weight_unit == 'lbs':\n            weight = weight * 0.453592  # Convert lbs to kg\n\n        bmi = round(weight / (height * height), 2)\n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif 18.5 <= bmi < 25:\n            category = 'Normal'\n        elif 25 <= bmi < 30:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n    return render(request, 'bmi_calculator/bmi_calculator.html', {'bmi': bmi, 'category': category})\n"}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\n# You might not need a separate form, the view can handle the input directly\n# But if you want a Django form, you can define it here\n# Example:\n# class BMIForm(forms.Form):\n#     height = forms.FloatField(label=\"Height\")\n#     weight = forms.FloatField(label=\"Weight\")\n"}, {"file": "home.html", "path": "bmi_calculator/templates/bmi_calculator/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home Page</title>\n</head>\n<body>\n    <h1>Welcome to the BMI Calculator</h1>\n    <p>This calculator helps you determine your Body Mass Index (BMI).</p>\n    <a href=\"{% url 'bmi_calculator' %}\">Go to BMI Calculator</a>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1>BMI Calculator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"height\">Height:</label>\n        <input type=\"number\" name=\"height\" required>\n        <select name=\"height_unit\">\n            <option value=\"cm\">cm</option>\n            <option value=\"inches\">inches</option>\n        </select><br><br>\n\n        <label for=\"weight\">Weight:</label>\n        <input type=\"number\" name=\"weight\" required>\n        <select name=\"weight_unit\">\n            <option value=\"kg\">kg</option>\n            <option value=\"lbs\">lbs</option>\n        </select><br><br>\n\n        <button type=\"submit\">Calculate BMI</button>\n        <button type=\"reset\">Reset</button>\n    </form>\n\n    {% if bmi %}\n        <h2>Your BMI: {{ bmi }}</h2>\n        <p>Category: {{ category }}</p>\n    {% endif %}\n</body>\n</html>"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass Currency(models.Model):\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=50)\n\n    def __str__(self):\n        return self.code\n\nclass ExchangeRate(models.Model):\n    base_currency = models.ForeignKey(Currency, related_name='base_rates', on_delete=models.CASCADE)\n    target_currency = models.ForeignKey(Currency, related_name='target_rates', on_delete=models.CASCADE)\n    rate = models.FloatField()\n    timestamp = models.DateTimeField(auto_now=True)\n\n    class Meta:\n        unique_together = ('base_currency', 'target_currency')\n\n    def __str__(self):\n        return f'{self.base_currency} to {self.target_currency}: {self.rate}'"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import Currency, ExchangeRate\n\n\ndef home(request):\n    currencies = Currency.objects.all()\n    context = {'currencies': currencies}\n    return render(request, 'home.html', context)\n\n\ndef convert_currency(request):\n    if request.method == 'GET':\n        base_currency_code = request.GET.get('base_currency')\n        target_currency_code = request.GET.get('target_currency')\n        amount = request.GET.get('amount')\n\n        try:\n            base_currency = Currency.objects.get(code=base_currency_code)\n            target_currency = Currency.objects.get(code=target_currency_code)\n            exchange_rate = ExchangeRate.objects.get(base_currency=base_currency, target_currency=target_currency).rate\n            converted_amount = float(amount) * exchange_rate\n\n            return JsonResponse({\n                'success': True,\n                'converted_amount': converted_amount,\n                'exchange_rate': exchange_rate\n            })\n        except Currency.DoesNotExist:\n            return JsonResponse({'success': False, 'error': 'Invalid currency code.'})\n        except ExchangeRate.DoesNotExist:\n            return JsonResponse({'success': False, 'error': 'Exchange rate not found.'})\n        except ValueError:\n            return JsonResponse({'success': False, 'error': 'Invalid amount.'})\n    else:\n        return JsonResponse({'success': False, 'error': 'Invalid request method.'})\n\n\ndef currency_details(request, currency_code):\n    # Placeholder for Currency Details Page functionality\n    return JsonResponse({'message': f'Details for {currency_code}'})"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert_currency, name='convert_currency'),\n    path('currency_details/<str:currency_code>/', views.currency_details, name='currency_details'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# Forms are not strictly required based on the initial checklist,\n# but are included here as they'd likely be needed for Settings page functionality.\n\nclass SettingsForm(forms.Form):\n    default_base_currency = forms.CharField(max_length=3, label='Default Base Currency')\n    default_target_currency = forms.CharField(max_length=3, label='Default Target Currency')\n    update_frequency = forms.IntegerField(label='Update Frequency (minutes)')"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency, ExchangeRate\n\nadmin.site.register(Currency)\nadmin.site.register(ExchangeRate)"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n\n    <label for=\"base_currency\">Base Currency:</label>\n    <select id=\"base_currency\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select><br><br>\n\n    <label for=\"target_currency\">Target Currency:</label>\n    <select id=\"target_currency\">\n        {% for currency in currencies %}\n            <option value=\"{{ currency.code }}\">{{ currency.code }} - {{ currency.name }}</option>\n        {% endfor %}\n    </select><br><br>\n\n    <label for=\"amount\">Amount:</label>\n    <input type=\"number\" id=\"amount\"><br><br>\n\n    <button id=\"convert_button\">Convert</button><br><br>\n\n    <div id=\"result\"></div>\n\n    <script>\n        const convertButton = document.getElementById('convert_button');\n        convertButton.addEventListener('click', function() {\n            const baseCurrency = document.getElementById('base_currency').value;\n            const targetCurrency = document.getElementById('target_currency').value;\n            const amount = document.getElementById('amount').value;\n\n            fetch(`/convert/?base_currency=${baseCurrency}&target_currency=${targetCurrency}&amount=${amount}`)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.success) {\n                        document.getElementById('result').innerText = `Converted Amount: ${data.converted_amount} (Exchange Rate: ${data.exchange_rate})`;\n                    } else {\n                        document.getElementById('result').innerText = `Error: ${data.error}`;\n                    }\n                });\n        });\n    </script>\n</body>\n</html>"}, {"file": "settings.py", "path": "currency_converter_project/settings.py", "code": "# Minimal settings.py example - adjust as needed\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'currency_converter_project.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\nWSGI_APPLICATION = 'currency_converter_project.wsgi.application'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\nSTATIC_URL = '/static/'"}, {"file": "wsgi.py", "path": "currency_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "currency_converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}], "3": [{"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport secrets\nimport string\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\n\ndef generate_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        return HttpResponse('Please select at least one character type.')\n\n    password = ''.join(secrets.choice(characters) for _ in range(length))\n    return render(request, 'generated_password.html', {'password': password})\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generate_password/', views.generate_password, name='generate_password'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator - Home</title>\n</head>\n<body>\n    <h1>Welcome to the Password Generator!</h1>\n    <p>This website helps you generate strong and secure passwords.</p>\n    <a href=\"{% url 'password_options' %}\"><button>Generate Password</button></a>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n</body>\n</html>"}, {"file": "password_options.html", "path": "templates/password_options.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator - Options</title>\n</head>\n<body>\n    <h1>Password Options</h1>\n    <form action=\"{% url 'generate_password' %}\" method=\"get\">\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" value=\"12\"><br><br>\n\n        <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\">\n        <label for=\"uppercase\">Include Uppercase</label><br><br>\n\n        <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\">\n        <label for=\"lowercase\">Include Lowercase</label><br><br>\n\n        <input type=\"checkbox\" id=\"numbers\" name=\"numbers\">\n        <label for=\"numbers\">Include Numbers</label><br><br>\n\n        <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n        <label for=\"symbols\">Include Symbols</label><br><br>\n\n        <button type=\"submit\">Generate Password</button>\n    </form>\n</body>\n</html>"}, {"file": "generated_password.html", "path": "templates/generated_password.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Generated Password</title>\n</head>\n<body>\n    <h1>Generated Password</h1>\n    <p id=\"password\">{{ password }}</p>\n    <button onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n    <script>\n        function copyToClipboard() {\n            var password = document.getElementById(\"password\");\n            navigator.clipboard.writeText(password.textContent)\n                .then(function() {\n                    alert('Password copied to clipboard!');\n                })\n                .catch(function(err) {\n                    console.error('Could not copy text: ', err);\n                    alert('Could not copy password. Please copy manually.');\n                });\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About Password Generator</title>\n</head>\n<body>\n    <h1>About Password Generator</h1>\n    <p>This website is a simple password generator that allows you to create strong and random passwords based on your specified criteria. You can choose the length of the password and include/exclude uppercase letters, lowercase letters, numbers, and symbols.</p>\n</body>\n</html>"}, {"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "apps.py", "path": "password_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'\n"}], "4": [{"file": "urls.py", "path": "qrcode_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr_code, name='generate_qr_code'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qrcode_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport qrcode\nimport io\nimport base64\nfrom django.views.decorators.csrf import csrf_exempt\nfrom django.conf import settings\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\n@csrf_exempt\ndef generate_qr_code(request):\n    if request.method == 'POST':\n        text = request.POST.get('text')\n        box_size = int(request.POST.get('box_size', 10))\n        border_size = int(request.POST.get('border_size', 4))\n        error_correction = request.POST.get('error_correction', 'medium')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        error_correction_levels = {\n            'small': qrcode.constants.ERROR_CORRECT_L,\n            'medium': qrcode.constants.ERROR_CORRECT_M,\n            'large': qrcode.constants.ERROR_CORRECT_Q,\n        }\n\n        try:\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=error_correction_levels[error_correction],\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n            buffer = io.BytesIO()\n            img.save(buffer, format='PNG')\n            img_str = base64.b64encode(buffer.getvalue()).decode('utf-8')\n\n            return JsonResponse({'image': img_str})\n        except Exception as e:\n            return JsonResponse({'error': str(e)}))\n\n    return JsonResponse({'error': 'Invalid request method'}) #Or render to template \n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "models.py", "path": "qrcode_generator/models.py", "code": "from django.db import models\n\n# No models needed for this simple example.\n"}, {"file": "forms.py", "path": "qrcode_generator/forms.py", "code": "from django import forms\n\n# No forms needed, using POST directly in the view.\n"}, {"file": "home.html", "path": "qrcode_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1>Welcome to the QR Code Generator</h1>\n    <p>Simple, welcoming text explaining what the website does.</p>\n    <a href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n</body>\n</html>"}, {"file": "about.html", "path": "qrcode_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Website</h1>\n    <p>Details about the website, its purpose, and how it works.</p>\n    <p>Privacy Policy</p>\n    <p>Terms of Service</p>\n</body>\n</html>"}, {"file": "generate_qr_code.html", "path": "qrcode_generator/templates/generate_qr_code.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n  <h1>QR Code Generator</h1>\n  <label for=\"text\">Text:</label><br>\n  <input type=\"text\" id=\"text\" name=\"text\"><br><br>\n\n  <label for=\"box_size\">Box Size (Max: 128):</label><br>\n  <input type=\"number\" id=\"box_size\" name=\"box_size\" min=\"1\" max=\"128\" value=\"10\"><br><br>\n\n  <label for=\"border_size\">Border Size (Max: 10):</label><br>\n  <input type=\"number\" id=\"border_size\" name=\"border_size\" min=\"0\" max=\"10\" value=\"4\"><br><br>\n\n  <label for=\"error_correction\">Error Correction:</label><br>\n  <select id=\"error_correction\" name=\"error_correction\">\n      <option value=\"small\">Small</option>\n      <option value=\"medium\" selected>Medium</option>\n      <option value=\"large\">Large</option>\n  </select><br><br>\n\n  <label for=\"fill_color\">Fill Color:</label><br>\n  <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\"><br><br>\n\n  <label for=\"back_color\">Back Color:</label><br>\n  <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\"><br><br>\n\n  <button onclick=\"generateQRCode()\">Generate</button>\n\n  <div id=\"qr_code_display\"></div>\n\n  <button id=\"download_button\" style=\"display:none;\" onclick=\"downloadQRCode()\">Download QR Code</button>\n\n  <script>\n        function generateQRCode() {\n          var text = document.getElementById('text').value;\n          var boxSize = document.getElementById('box_size').value;\n          var borderSize = document.getElementById('border_size').value;\n          var errorCorrection = document.getElementById('error_correction').value;\n          var fillColor = document.getElementById('fill_color').value;\n          var backColor = document.getElementById('back_color').value;\n\n          fetch('/generate/', {\n              method: 'POST',\n              headers: {\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                  'X-CSRFToken': '{{ csrf_token }}'\n              },\n              body: `text=${text}&box_size=${boxSize}&border_size=${borderSize}&error_correction=${errorCorrection}&fill_color=${fillColor}&back_color=${backColor}`\n          })\n          .then(response => response.json())\n          .then(data => {\n              if (data.image) {\n                  document.getElementById('qr_code_display').innerHTML = `<img src=\"data:image/png;base64,${data.image}\" alt=\"QR Code\">`;\n                  document.getElementById('download_button').style.display = 'block';\n              } else if (data.error) {\n                  alert('Error: ' + data.error);\n              }\n          });\n      }\n\n      function downloadQRCode() {\n          var qrCodeImage = document.querySelector('#qr_code_display img');\n          if (qrCodeImage) {\n            var link = document.createElement('a');\n            link.href = qrCodeImage.src;\n            link.download = 'qrcode.png';\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n          } else {\n              alert('No QR code generated yet.');\n          }\n      }\n\n  </script>\n</body>\n</html>"}, {"file": "settings.py", "path": "qrcode_project/settings.py", "code": "#Add this in the TEMPLATES settings\n'DIRS': [BASE_DIR / 'qrcode_generator/templates'],\n\n# Add this in the INSTALLED_APPS\n'qrcode_generator',\n"}], "5": [{"file": "urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\nimport markdown\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_output': html_output, 'markdown_text':markdown_text})\n    return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "markdown_converter/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Markdown to HTML Converter!</h1>\n    <p>This tool allows you to convert Markdown text into HTML.</p>\n    <a href=\"{% url 'convert' %}\">Convert</a>\n    <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "convert.html", "path": "markdown_converter/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <h1>Markdown to HTML Converter</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <textarea name=\"markdown_text\" rows=\"10\" cols=\"50\">{% if markdown_text %}{{ markdown_text }}{% endif %}</textarea><br>\n        <button type=\"submit\">Convert</button>\n    </form>\n\n    {% if html_output %}\n        <h2>HTML Output:</h2>\n        <div style=\"border: 1px solid black; padding: 10px;\">\n            {{ html_output|safe }}\n        </div>\n    {% endif %}\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"}, {"file": "about.html", "path": "markdown_converter/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About Us</h1>\n    <p>This converter was developed by ...</p>\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"}, {"file": "models.py", "path": "markdown_converter/models.py", "code": "from django.db import models\n\n# Add models if needed, otherwise leave empty"}, {"file": "forms.py", "path": "markdown_converter/forms.py", "code": "from django import forms\n\n# Add forms if needed, otherwise leave empty"}, {"file": "admin.py", "path": "markdown_converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "settings.py", "path": "markdown_converter_project/settings.py", "code": "# Add 'markdown_converter' to INSTALLED_APPS\n# Ensure TEMPLATES include 'DIRS': [BASE_DIR / 'markdown_converter/templates']"}, {"file": "wsgi.py", "path": "markdown_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_converter_project.settings')\n\napplication = get_wsgi_application()"}], "6": [{"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom django.http import JsonResponse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'home.html', {'todo_lists': todo_lists})\n\ndef todo_list_detail(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        name = request.POST['name']\n        TodoList.objects.create(name=name)\n        return redirect('home')\n    return render(request, 'create_todo_list.html')\n\ndef add_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        title = request.POST['title']\n        description = request.POST['description']\n        Task.objects.create(todo_list=todo_list, title=title, description=description)\n        return redirect('todo_list_detail', list_id=list_id)\n    return render(request, 'add_task.html', {'todo_list': todo_list})\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        task.title = request.POST['title']\n        task.description = request.POST['description']\n        task.save()\n        return redirect('todo_list_detail', list_id=task.todo_list.id)\n    return render(request, 'edit_task.html', {'task': task})\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list_detail', list_id=list_id)\n\ndef mark_task_completed(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', list_id=task.todo_list.id)\n\ndef task_completion_chart(request):\n    # Logic to create and return chart data (e.g., JSON)\n    # This is a placeholder, replace with your actual chart generation\n    completed_tasks = Task.objects.filter(completed=True).count()\n    total_tasks = Task.objects.all().count()\n    if total_tasks > 0:\n        completion_rate = (completed_tasks / total_tasks) * 100\n    else:\n        completion_rate = 0\n    data = {'completed_tasks': completed_tasks, 'total_tasks': total_tasks, 'completion_rate':completion_rate}\n    return JsonResponse(data)\n\n\ndef task_distribution_chart(request):\n    # Logic to create and return chart data (e.g., JSON)\n    # This is a placeholder, replace with your actual chart generation\n    lists = TodoList.objects.all()\n    data = []\n    for lst in lists:\n        task_count = Task.objects.filter(todo_list=lst).count()\n        data.append({'list_name': lst.name, 'task_count': task_count})\n\n    return JsonResponse({'task_distribution': data})"}, {"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('todo_list/<int:list_id>/', views.todo_list_detail, name='todo_list_detail'),\n    path('create_todo_list/', views.create_todo_list, name='create_todo_list'),\n    path('todo_list/<int:list_id>/add_task/', views.add_task, name='add_task'),\n    path('task/<int:task_id>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:task_id>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:task_id>/complete/', views.mark_task_completed, name='mark_task_completed'),\n    path('analysis/task_completion_chart/', views.task_completion_chart, name='task_completion_chart'),\n    path('analysis/task_distribution_chart/', views.task_distribution_chart, name='task_distribution_chart'),\n]"}, {"file": "home.html", "path": "todo_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Todo Lists</h1>\n  <a href=\"{% url 'create_todo_list' %}\">Create New List</a>\n  <ul>\n    {% for todo_list in todo_lists %}\n      <li><a href=\"{% url 'todo_list_detail' todo_list.id %}\">{{ todo_list.name }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}, {"file": "todo_list_detail.html", "path": "todo_app/templates/todo_list_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>{{ todo_list.name }}</h1>\n  <a href=\"{% url 'add_task' todo_list.id %}\">Add New Task</a>\n  <ul>\n    {% for task in tasks %}\n      <li>\n        {{ task.title }} - {{ task.description }}\n        {% if task.completed %}\n          (Completed)\n        {% endif %}\n        <a href=\"{% url 'edit_task' task.id %}\">Edit</a>\n        <a href=\"{% url 'delete_task' task.id %}\">Delete</a>\n        <a href=\"{% url 'mark_task_completed' task.id %}\">Mark as Completed</a>\n      </li>\n    {% endfor %}\n  </ul>\n\n  <button id=\"completionChartBtn\">View Task Completion Chart</button>\n  <div id=\"completionChart\"></div>\n\n  <button id=\"distributionChartBtn\">View Task Distribution Chart</button>\n  <div id=\"distributionChart\"></div>\n\n  <script>\n  document.getElementById('completionChartBtn').addEventListener('click', function() {\n    fetch('/analysis/task_completion_chart/')\n      .then(response => response.json())\n      .then(data => {\n        document.getElementById('completionChart').innerHTML = `Completed Tasks: ${data.completed_tasks}, Total Tasks: ${data.total_tasks}, Completion Rate: ${data.completion_rate}%`;\n      });\n  });\n\n    document.getElementById('distributionChartBtn').addEventListener('click', function() {\n        fetch('/analysis/task_distribution_chart/')\n          .then(response => response.json())\n          .then(data => {\n            let chartHTML = '';\n            if (data.task_distribution) {\n              data.task_distribution.forEach(item => {\n                chartHTML += `<p>${item.list_name}: ${item.task_count} tasks</p>`;\n              });\n            }\n            document.getElementById('distributionChart').innerHTML = chartHTML;\n          });\n      });\n  </script>\n\n{% endblock %}"}, {"file": "create_todo_list.html", "path": "todo_app/templates/create_todo_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Create New Todo List</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"name\">List Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <input type=\"submit\" value=\"Create\">\n  </form>\n{% endblock %}"}, {"file": "add_task.html", "path": "todo_app/templates/add_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Add Task to {{ todo_list.name }}</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"title\">Title:</label><br>\n    <input type=\"text\" id=\"title\" name=\"title\"><br><br>\n    <label for=\"description\">Description:</label><br>\n    <textarea id=\"description\" name=\"description\"></textarea><br><br>\n    <input type=\"submit\" value=\"Add Task\">\n  </form>\n{% endblock %}"}, {"file": "edit_task.html", "path": "todo_app/templates/edit_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Edit Task</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"title\">Title:</label><br>\n    <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ task.title }}\"><br><br>\n    <label for=\"description\">Description:</label><br>\n    <textarea id=\"description\" name=\"description\">{{ task.description }}</textarea><br><br>\n    <input type=\"submit\" value=\"Save Changes\">\n  </form>\n{% endblock %}"}, {"file": "base.html", "path": "todo_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "7": [{"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('login/', views.user_login, name='login'),\n    path('signup/', views.signup, name='signup'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('reports/', views.reports, name='reports'),\n    path('settings1/', views.settings1, name='settings1'),\n    path('settings2/', views.settings2, name='settings2'),\n    path('help/', views.help_page, name='help'),\n    path('add_transaction/', views.add_transaction, name='add_transaction'),\n    path('edit_transaction/<int:transaction_id>/', views.edit_transaction, name='edit_transaction'),\n    path('delete_transaction/<int:transaction_id>/', views.delete_transaction, name='delete_transaction'),\n    path('add_category/', views.add_category, name='add_category'),\n    path('edit_category/<int:category_id>/', views.edit_category, name='edit_category'),\n    path('delete_category/<int:category_id>/', views.delete_category, name='delete_category'),\n    path('export_data/', views.export_data, name='export_data'),\n\n]"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom django.contrib.auth.decorators import login_required\n\n# Home Page\ndef home(request):\n    return render(request, 'home.html')\n\n# User Authentication\ndef user_login(request):\n    return render(request, 'login.html')\n\n\ndef signup(request):\n    return render(request, 'signup.html')\n\n\n# Dashboard\n@login_required\ndef dashboard(request):\n    return render(request, 'dashboard.html')\n\n\n# Balance Tracker\n@login_required\ndef balance_tracker(request):\n    return render(request, 'balance_tracker.html')\n\n\n@login_required\ndef add_transaction(request):\n    return HttpResponse('Add Transaction Functionality')\n\n@login_required\ndef edit_transaction(request, transaction_id):\n    return HttpResponse(f'Edit Transaction Functionality {transaction_id}')\n\n@login_required\ndef delete_transaction(request, transaction_id):\n    return HttpResponse(f'Delete Transaction Functionality {transaction_id}')\n\n\n# Reports\n@login_required\ndef reports(request):\n    return render(request, 'reports.html')\n\n@login_required\ndef export_data(request):\n    return HttpResponse('Export Data Functionality')\n\n\n# Settings Pages\n@login_required\ndef settings1(request):\n    return render(request, 'settings1.html')\n\n@login_required\ndef add_category(request):\n    return HttpResponse('Add Category Functionality')\n\n@login_required\ndef edit_category(request, category_id):\n    return HttpResponse(f'Edit Category Functionality {category_id}')\n\n@login_required\ndef delete_category(request, category_id):\n    return HttpResponse(f'Delete Category Functionality {category_id}')\n\n@login_required\ndef settings2(request):\n    return render(request, 'settings2.html')\n\n\n# Help Page\ndef help_page(request):\n    return render(request, 'help.html')"}, {"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True)\n    description = models.CharField(max_length=200, blank=True)\n\n    def __str__(self):\n        return self.description"}, {"file": "admin.py", "path": "budget_control/admin.py", "code": "from django.contrib import admin\nfrom .models import Category, Transaction\n\nadmin.site.register(Category)\nadmin.site.register(Transaction)"}, {"file": "forms.py", "path": "budget_control/forms.py", "code": "from django import forms\nfrom .models import Transaction, Category\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['date', 'amount', 'category', 'description']\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.urls import reverse\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    current_date = timezone.now().date()\n    events = Event.objects.filter(start_time__date=current_date)\n    return render(request, 'home.html', {'current_date': current_date, 'events': events})\n\ndef calendar_view(request, year=None, month=None):\n    now = timezone.now()\n    if year is None or month is None:\n        year = now.year\n        month = now.month\n    else:\n        year = int(year)\n        month = int(month)\n    events = Event.objects.filter(start_time__year=year, start_time__month=month)\n    return render(request, 'calendar.html', {'year': year, 'month': month, 'events': events})\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'add_event.html', {'form': form})\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'event_details.html', {'event': event})\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event_id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'edit_event.html', {'form': form, 'event': event})\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'delete_event.html', {'event': event})\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query)\n    return render(request, 'search_events.html', {'events': events, 'query': query})\n\ndef list_events(request):\n    events = Event.objects.all()\n    return render(request, 'list_events.html', {'events': events})\n\ndef help_page(request):\n    return render(request, 'help.html')"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_month'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('list_events/', views.list_events, name='list_events'),\n    path('help/', views.help_page, name='help'),\n]"}, {"file": "settings.py", "path": "calendar_project/settings.py", "code": "# Include necessary settings like INSTALLED_APPS, MIDDLEWARE,\n# ROOT_URLCONF, TEMPLATES, DATABASES, STATIC_URL, etc.\n# Ensure 'calendar_app' is added to INSTALLED_APPS\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\n# Define the templates directory\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n"}, {"file": "urls.py", "path": "calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "home.html", "path": "calendar_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Home</h1>\n    <p>Current Date: {{ current_date }}</p>\n    <a href=\"{% url 'calendar' %}\">View Calendar</a>\n    <h2>Today's Events</h2>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events today.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_event' %}\">Add Event</a>\n{% endblock %}"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Calendar</h1>\n    <form method=\"get\" action=\"{% url 'calendar' %}\">\n        <label for=\"year\">Year:</label>\n        <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\">\n        <label for=\"month\">Month:</label>\n        <select id=\"month\" name=\"month\">\n            {% for m in 'January February March April May June July August September October November December'.split %}\n                <option value=\"{{ forloop.counter }}\" {% if forloop.counter == month %}selected{% endif %}>{{ m }}</option>\n            {% endfor %}\n        </select>\n        <button type=\"submit\">Go</button>\n    </form>\n    <p>Viewing {{ month }}/{{ year }}</p>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events this month.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_event' %}\">Add Event</a>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "add_event.html", "path": "calendar_app/templates/add_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Add Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n    </form>\n    <a href=\"{% url 'home' %}\">Cancel</a>\n{% endblock %}"}, {"file": "event_details.html", "path": "calendar_app/templates/event_details.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Event Details</h1>\n    <h2>{{ event.title }}</h2>\n    <p>Description: {{ event.description }}</p>\n    <p>Start Time: {{ event.start_time }}</p>\n    <p>End Time: {{ event.end_time }}</p>\n    <a href=\"{% url 'edit_event' event.id %}\">Edit Event</a>\n    <a href=\"{% url 'delete_event' event.id %}\">Delete Event</a>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "edit_event.html", "path": "calendar_app/templates/edit_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Edit Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n    </form>\n    <a href=\"{% url 'event_details' event.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "delete_event.html", "path": "calendar_app/templates/delete_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Delete Event</h1>\n    <p>Are you sure you want to delete \"{{ event.title }}\"?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Delete</button>\n    </form>\n    <a href=\"{% url 'event_details' event.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "search_events.html", "path": "calendar_app/templates/search_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Search Results</h1>\n    <form method=\"get\" action=\"{% url 'search_events' %}\">\n        <input type=\"text\" name=\"q\" value=\"{{ query }}\">\n        <button type=\"submit\">Search</button>\n    </form>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events found.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "list_events.html", "path": "calendar_app/templates/list_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>All Events</h1>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events yet.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "help.html", "path": "calendar_app/templates/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Help</h1>\n    <h2>FAQ</h2>\n    <p>Some frequently asked questions and answers will be displayed here.</p>\n    <h2>User Guide</h2>\n    <p>A comprehensive user guide will be provided here.</p>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "base.html", "path": "calendar_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar App</title>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}], "9": [{"file": "urls.py", "path": "chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('support/', views.support, name='support'),\n    # Optional About Us page, include if desired\n    # path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "chatbot_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    # Read Product Overview\n    return render(request, 'home.html')\n\ndef features(request):\n    # List Key Features\n    return render(request, 'features.html')\n\ndef pricing(request):\n    # View Pricing Plans, Contact Sales (optional)\n    # Consider adding a form here for Contact Sales if desired\n    return render(request, 'pricing.html')\n\ndef support(request):\n    # FAQ, Support Message (optional)\n    # Consider adding a form here for Support Message if desired\n    return render(request, 'support.html')\n\n# Optional About Us view\n# def about(request):\n#     # Company Background\n#     return render(request, 'about.html')"}, {"file": "home.html", "path": "chatbot_app/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Home</h1>\n    <p>Product Overview: [Insert Overview Here]</p>\n{% endblock %}"}, {"file": "features.html", "path": "chatbot_app/templates/features.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Features</h1>\n    <ul>\n        <li>[Feature 1]</li>\n        <li>[Feature 2]</li>\n        <li>[Feature 3]</li>\n        </ul>\n{% endblock %}"}, {"file": "pricing.html", "path": "chatbot_app/templates/pricing.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Pricing</h1>\n    <p>[Pricing Plans]</p>\n    <!-- Optional Contact Sales form -->\n    <!--\n    <form method=\"post\">\n        {% csrf_token %}\n        [Form fields for contacting sales]\n        <button type=\"submit\">Contact Sales</button>\n    </form>\n    -->\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_app/templates/support.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Support</h1>\n    <h2>FAQ</h2>\n    <p>[FAQ Content]</p>\n    <!-- Optional Support Message form -->\n    <!--\n    <form method=\"post\">\n        {% csrf_token %}\n        [Form fields for support message]\n        <button type=\"submit\">Send Message</button>\n    </form>\n    -->\n{% endblock %}"}, {"file": "base.html", "path": "chatbot_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'features' %}\">Features</a> |\n        <a href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a href=\"{% url 'support' %}\">Support</a>\n        <!--Optional About us link\n        <a href=\"{% url 'about' %}\">About Us</a>\n        -->\n    </nav>\n    <hr>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "forms.py", "path": "chatbot_app/forms.py", "code": "# from django import forms\n\n# class ContactSalesForm(forms.Form):\n#     name = forms.CharField(max_length=100)\n#     email = forms.EmailField()\n#     message = forms.CharField(widget=forms.Textarea)\n\n# class SupportMessageForm(forms.Form):\n#     name = forms.CharField(max_length=100)\n#     email = forms.EmailField()\n#     subject = forms.CharField(max_length=200)\n#     message = forms.CharField(widget=forms.Textarea)"}, {"file": "models.py", "path": "chatbot_app/models.py", "code": "from django.db import models\n\n# Create your models here."}], "10": [{"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('home.urls')),  # Include URLs from the 'home' app\n    path('dashboard/', include('dashboard.urls')), # Include URLs from the 'dashboard' app\n    path('meals/', include('meal_log.urls')), # Include URLs from the 'meal_log' app\n    path('activities/', include('activity_log.urls')), # Include URLs from the 'activity_log' app\n    path('analysis/', include('analysis.urls')), # Include URLs from the 'analysis' app\n    path('settings/', include('settings.urls')), # Include URLs from the 'settings' app\n    path('help/', include('help.urls')), # Include URLs from the 'help' app\n]"}, {"file": "views.py", "path": "home/views.py", "code": "from django.shortcuts import render, redirect\n\ndef home(request):\n    # Welcome Message, Sign Up, Log In, View Dashboard (before login)\n    if request.user.is_authenticated:\n        return redirect('dashboard:dashboard') # Redirect to dashboard if logged in\n    return render(request, 'home/home.html')\n\ndef signup(request):\n    # Sign Up logic\n    return render(request, 'home/signup.html')\n\ndef login_view(request):\n    # Login logic\n    return render(request, 'home/login.html')\n\ndef logout_view(request):\n    # Logout logic\n    return redirect('home:home') # Redirect to home after logout"}, {"file": "urls.py", "path": "home/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'home'\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]"}, {"file": "views.py", "path": "dashboard/views.py", "code": "from django.shortcuts import render\n\ndef dashboard(request):\n    # Daily Calorie Intake, Recent Meals, Add Meal, Recent Activities, Add Activity\n    return render(request, 'dashboard/dashboard.html')\n"}, {"file": "urls.py", "path": "dashboard/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'dashboard'\n\nurlpatterns = [\n    path('', views.dashboard, name='dashboard'),\n]"}, {"file": "views.py", "path": "meal_log/views.py", "code": "from django.shortcuts import render\n\ndef meal_log(request):\n    # Meal Search, Edit Meal, Delete Meal\n    return render(request, 'meal_log/meal_log.html')\n"}, {"file": "urls.py", "path": "meal_log/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'meal_log'\n\nurlpatterns = [\n    path('', views.meal_log, name='meal_log'),\n]"}, {"file": "views.py", "path": "activity_log/views.py", "code": "from django.shortcuts import render\n\ndef activity_log(request):\n    # Activity Search, Edit Activity, Delete Activity\n    return render(request, 'activity_log/activity_log.html')\n"}, {"file": "urls.py", "path": "activity_log/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'activity_log'\n\nurlpatterns = [\n    path('', views.activity_log, name='activity_log'),\n]"}, {"file": "views.py", "path": "analysis/views.py", "code": "from django.shortcuts import render\n\ndef analysis(request):\n    # Weekly Calorie Chart\n    return render(request, 'analysis/analysis.html')\n"}, {"file": "urls.py", "path": "analysis/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'analysis'\n\nurlpatterns = [\n    path('', views.analysis, name='analysis'),\n]"}, {"file": "views.py", "path": "settings/views.py", "code": "from django.shortcuts import render\n\ndef settings_view(request):\n    # Profile, Preferences, Notifications, Privacy Settings\n    return render(request, 'settings/settings.html')\n"}, {"file": "urls.py", "path": "settings/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'settings'\n\nurlpatterns = [\n    path('', views.settings_view, name='settings'),\n]"}, {"file": "views.py", "path": "help/views.py", "code": "from django.shortcuts import render\n\ndef help_view(request):\n    # FAQ, Contact Support, Tutorials\n    return render(request, 'help/help.html')\n"}, {"file": "urls.py", "path": "help/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'help'\n\nurlpatterns = [\n    path('', views.help_view, name='help'),\n]"}, {"file": "models.py", "path": "calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    calories = models.IntegerField()\n    date = models.DateField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    calories_burned = models.IntegerField()\n    date = models.DateField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n"}], "11": {"django_project": {"name": "review_app", "apps": [{"name": "review", "models": [{"name": "TestCode", "fields": [{"name": "file_name", "type": "CharField", "max_length": 255}, {"name": "file_path", "type": "CharField", "max_length": 512}, {"name": "code", "type": "TextField"}, {"name": "status", "type": "CharField", "max_length": 20, "choices": ["Pass", "Fail", "Select"], "default": "Select"}, {"name": "review_notes", "type": "TextField", "blank": true, "null": true}]}], "forms": [{"name": "ImportFileForm", "fields": [{"name": "json_file", "type": "FileField"}]}, {"name": "TestCodeReviewForm", "fields": [{"name": "status", "type": "ChoiceField", "choices": ["Pass", "Fail", "Select"]}, {"name": "review_notes", "type": "CharField", "widget": "Textarea"}]}], "views": [{"name": "home", "template": "home.html", "context": ["welcome_message", "test_codes", "import_form", "review_form"]}, {"name": "about", "template": "about.html"}], "templates": [{"name": "home.html", "structure": ["Display Welcome Message", "Import File Form", "Test Code List with Review Forms"]}, {"name": "about.html", "structure": ["About Page Content"]}], "urls": [{"path": "/", "view": "home", "name": "home"}, {"path": "/about/", "view": "about", "name": "about"}, {"path": "/import/", "view": "import_json", "name": "import_json"}, {"path": "/review/<int:pk>/", "view": "review_testcode", "name": "review_testcode"}]}], "settings": {"DEBUG": "True", "ALLOWED_HOSTS": "['*']", "INSTALLED_APPS": "['review']", "MIDDLEWARE": "['django.middleware.common.CommonMiddleware','django.middleware.csrf.CsrfViewMiddleware']"}}, "test_data": [{"file": "example1.py", "path": "tests/example1.py", "code": "def add(a, b):\n  return a + b"}, {"file": "example2.py", "path": "tests/utils/example2.py", "code": "def multiply(a, b):\n  return a * b"}]}, "12": [{"file": "models.py", "path": "expense_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=255, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submission_date = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=20, default='Pending', choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')])\n    rejection_reason = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f\"Claim by {self.employee.username} - {self.claim_type} - {self.status}\"\n\nclass BudgetLimit(models.Model):\n    category = models.CharField(max_length=255, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f\"Budget Limit for {self.category}: {self.limit}\""}, {"file": "views.py", "path": "expense_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout, authenticate\nfrom django.contrib.auth.decorators import login_required, user_passes_test\nfrom django.contrib import messages\nfrom .models import Claim, BudgetLimit\nfrom .forms import ClaimForm, BudgetLimitForm\nfrom django.db.models import Sum\n\ndef is_accounting_admin(user):\n    return user.is_staff #Example, adjust based on your admin definition\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef signup_view(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('employee_portal')  # Redirect to employee portal after signup\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                if is_accounting_admin(user):\n                    return redirect('admin_portal')\n                else:\n                    return redirect('employee_portal')\n            else:\n                messages.error(request, \"Invalid username or password.\")\n        else:\n            messages.error(request, \"Invalid username or password.\")\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n\n@login_required\ndef employee_portal(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'employee_portal.html', {'claims': claims})\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            return redirect('employee_portal')\n    else:\n        form = ClaimForm()\n    return render(request, 'submit_claim.html', {'form': form})\n\n@login_required\ndef view_claim_status(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n    return render(request, 'view_claim_status.html', {'claim': claim})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user, status='Pending')\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            form.save()\n            return redirect('employee_portal')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'edit_claim.html', {'form': form, 'claim_id': claim_id})\n\n@login_required\n@user_passes_test(is_accounting_admin)\ndef admin_portal(request):\n    claims = Claim.objects.all()\n    return render(request, 'admin_portal.html', {'claims': claims})\n\n@login_required\n@user_passes_test(is_accounting_admin)\ndef approve_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('admin_portal')\n\n@login_required\n@user_passes_test(is_accounting_admin)\ndef reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    if request.method == 'POST':\n        rejection_reason = request.POST.get('rejection_reason')\n        claim.status = 'Rejected'\n        claim.rejection_reason = rejection_reason\n        claim.save()\n        return redirect('admin_portal')\n    return render(request, 'reject_claim.html', {'claim': claim})\n\n@login_required\n@user_passes_test(is_accounting_admin)\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    return render(request, 'view_claim_details.html', {'claim': claim})\n\n@login_required\n@user_passes_test(is_accounting_admin)\ndef search_claims(request):\n    if request.method == 'GET':\n        query = request.GET.get('q')\n        status = request.GET.get('status')\n        claim_type = request.GET.get('claim_type')\n\n        claims = Claim.objects.all()\n\n        if query:\n            claims = claims.filter(employee__username__icontains=query)  # Example search\n        if status:\n            claims = claims.filter(status=status)\n        if claim_type:\n            claims = claims.filter(claim_type=claim_type)\n\n        return render(request, 'admin_portal.html', {'claims': claims})\n    else:\n        return redirect('admin_portal')\n\n@login_required\n@user_passes_test(is_accounting_admin)\ndef budget_control(request):\n    budget_limits = BudgetLimit.objects.all()\n    expenses = {}\n    for category in ['Travel', 'Labor', 'Management', 'Equipment']:\n        expenses[category] = Claim.objects.filter(claim_type=category, status='Approved').aggregate(Sum('amount'))['amount__sum'] or 0\n\n    context = {\n        'budget_limits': budget_limits,\n        'expenses': expenses,\n    }\n    return render(request, 'budget_control.html', context)\n\n@login_required\n@user_passes_test(is_accounting_admin)\ndef set_budget_limit(request):\n    if request.method == 'POST':\n        form = BudgetLimitForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('budget_control')\n    else:\n        form = BudgetLimitForm()\n    return render(request, 'set_budget_limit.html', {'form': form})\n\n@login_required\n@user_passes_test(is_accounting_admin)\ndef generate_reports(request):\n   # Implement report generation logic here\n   return render(request, 'generate_reports.html')\n\ndef send_budget_alerts():\n   # Placeholder function for sending budget alerts.\n   # Needs proper configuration and implementation.\n   pass"}, {"file": "forms.py", "path": "expense_app/forms.py", "code": "from django import forms\nfrom .models import Claim, BudgetLimit\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['claim_type', 'amount', 'description']\n\nclass BudgetLimitForm(forms.ModelForm):\n    class Meta:\n        model = BudgetLimit\n        fields = ['category', 'limit']"}, {"file": "urls.py", "path": "expense_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup_view, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('employee/', views.employee_portal, name='employee_portal'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim/<int:claim_id>/', views.view_claim_status, name='view_claim_status'),\n    path('claim/<int:claim_id>/edit/', views.edit_claim, name='edit_claim'),\n    path('admin/', views.admin_portal, name='admin_portal'),\n    path('admin/claim/<int:claim_id>/approve/', views.approve_claim, name='approve_claim'),\n    path('admin/claim/<int:claim_id>/reject/', views.reject_claim, name='reject_claim'),\n    path('admin/claim/<int:claim_id>/details/', views.view_claim_details, name='view_claim_details'),\n    path('admin/search/', views.search_claims, name='search_claims'),\n    path('budget_control/', views.budget_control, name='budget_control'),\n    path('set_budget_limit/', views.set_budget_limit, name='set_budget_limit'),\n    path('generate_reports/', views.generate_reports, name='generate_reports'),\n]"}, {"file": "settings.py", "path": "expense_app/settings.py", "code": "ALLOWED_HOSTS = ['*'] #Don't use in production\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expense_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'expense_app.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'employee_portal'  # Redirect after login\nLOGOUT_REDIRECT_URL = 'home'  # Redirect after logout"}, {"file": "home.html", "path": "expense_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Welcome to the Expense Claim System</h1>\n  <p>Please sign up or log in to continue.</p>\n\n  <a href=\"{% url 'signup' %}\">Sign Up</a>\n  <a href=\"{% url 'login' %}\">Log In</a>\n{% endblock %}"}, {"file": "signup.html", "path": "expense_app/templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Sign Up</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Sign Up</button>\n  </form>\n{% endblock %}"}, {"file": "login.html", "path": "expense_app/templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Log In</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Log In</button>\n  </form>\n{% endblock %}"}, {"file": "employee_portal.html", "path": "expense_app/templates/employee_portal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Employee Portal</h2>\n  <a href=\"{% url 'submit_claim' %}\">Submit New Claim</a>\n\n  <h3>Your Claims:</h3>\n  <ul>\n    {% for claim in claims %}\n      <li>\n        Claim ID: {{ claim.id }} | Type: {{ claim.claim_type }} | Status: {{ claim.status }} | Amount: {{claim.amount}} |\n        <a href=\"{% url 'view_claim_status' claim.id %}\">View Status</a> |\n          {% if claim.status == 'Pending' %}\n            <a href=\"{% url 'edit_claim' claim.id %}\">Edit</a>\n          {% endif %}\n      </li>\n    {% empty %}\n      <li>No claims submitted yet.</li>\n    {% endfor %}\n  </ul>\n\n  <a href=\"{% url 'logout' %}\">Logout</a>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "expense_app/templates/submit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Submit Claim</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit</button>\n  </form>\n{% endblock %}"}, {"file": "view_claim_status.html", "path": "expense_app/templates/view_claim_status.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Claim Status</h2>\n  <p>Claim Type: {{ claim.claim_type }}</p>\n  <p>Amount: {{ claim.amount }}</p>\n  <p>Description: {{ claim.description }}</p>\n  <p>Status: {{ claim.status }}</p>\n  {% if claim.rejection_reason %}\n    <p>Rejection Reason: {{ claim.rejection_reason }}</p>\n  {% endif %}\n\n  <a href=\"{% url 'employee_portal' %}\">Back to Portal</a>\n{% endblock %}"}, {"file": "edit_claim.html", "path": "expense_app/templates/edit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Edit Claim</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Update Claim</button>\n  </form>\n  <a href=\"{% url 'employee_portal' %}\">Cancel</a>\n{% endblock %}"}, {"file": "admin_portal.html", "path": "expense_app/templates/admin_portal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Admin Portal</h2>\n\n  <form method=\"get\" action=\"{% url 'search_claims' %}\">\n      <input type=\"text\" name=\"q\" placeholder=\"Search by Employee Username\">\n      <select name=\"status\">\n          <option value=\"\">All Statuses</option>\n          <option value=\"Pending\">Pending</option>\n          <option value=\"Approved\">Approved</option>\n          <option value=\"Rejected\">Rejected</option>\n      </select>\n      <select name=\"claim_type\">\n          <option value=\"\">All Claim Types</option>\n          <option value=\"Travel\">Travel</option>\n          <option value=\"Labor\">Labor</option>\n          <option value=\"Management\">Management</option>\n          <option value=\"Equipment\">Equipment</option>\n      </select>\n      <button type=\"submit\">Search</button>\n  </form>\n\n  <h3>All Claims:</h3>\n  <ul>\n    {% for claim in claims %}\n      <li>\n        Claim ID: {{ claim.id }} | Employee: {{ claim.employee.username }} | Type: {{ claim.claim_type }} | Status: {{ claim.status }} | Amount: {{claim.amount}} |\n        <a href=\"{% url 'view_claim_details' claim.id %}\">View Details</a> |\n        {% if claim.status == 'Pending' %}\n          <a href=\"{% url 'approve_claim' claim.id %}\">Approve</a> |\n          <a href=\"{% url 'reject_claim' claim.id %}\">Reject</a>\n        {% endif %}\n      </li>\n    {% empty %}\n      <li>No claims found.</li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'budget_control' %}\">Budget Control</a>\n  <a href=\"{% url 'logout' %}\">Logout</a>\n{% endblock %}"}, {"file": "reject_claim.html", "path": "expense_app/templates/reject_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Reject Claim</h2>\n  <p>Are you sure you want to reject claim ID: {{ claim.id }}?</p>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"rejection_reason\">Rejection Reason:</label>\n    <textarea name=\"rejection_reason\" required></textarea><br>\n    <button type=\"submit\">Reject Claim</button>\n  </form>\n  <a href=\"{% url 'admin_portal' %}\">Cancel</a>\n{% endblock %}"}, {"file": "view_claim_details.html", "path": "expense_app/templates/view_claim_details.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Claim Details</h2>\n  <p>Employee: {{ claim.employee.username }}</p>\n  <p>Claim Type: {{ claim.claim_type }}</p>\n  <p>Amount: {{ claim.amount }}</p>\n  <p>Description: {{ claim.description }}</p>\n  <p>Submission Date: {{ claim.submission_date }}</p>\n  <p>Status: {{ claim.status }}</p>\n  {% if claim.rejection_reason %}\n    <p>Rejection Reason: {{ claim.rejection_reason }}</p>\n  {% endif %}\n  <a href=\"{% url 'admin_portal' %}\">Back to Admin Portal</a>\n{% endblock %}"}, {"file": "budget_control.html", "path": "expense_app/templates/budget_control.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Budget Control</h2>\n  <a href=\"{% url 'set_budget_limit' %}\">Set Budget Limit</a>\n\n  <h3>Budget Limits:</h3>\n  <table>\n    <thead>\n      <tr>\n        <th>Category</th>\n        <th>Limit</th>\n        <th>Expenses</th>\n        <th>Balance</th>\n      </tr>\n    </thead>\n    <tbody>\n      {% for limit in budget_limits %}\n        <tr>\n          <td>{{ limit.category }}</td>\n          <td>{{ limit.limit }}</td>\n          <td>{{ expenses|get_item:limit.category }}</td>\n          <td>{{ limit.limit|sub:expenses|get_item:limit.category }}</td>\n        </tr>\n      {% endfor %}\n    </tbody>\n  </table>\n<a href=\"{% url 'generate_reports' %}\">Generate Reports</a>\n  <a href=\"{% url 'admin_portal' %}\">Back to Admin Portal</a>\n{% endblock %}\n\n{% load mathfilters %}\n{% load custom_tags %}\n"}, {"file": "set_budget_limit.html", "path": "expense_app/templates/set_budget_limit.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Set Budget Limit</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Set Limit</button>\n  </form>\n  <a href=\"{% url 'budget_control' %}\">Cancel</a>\n{% endblock %}"}, {"file": "base.html", "path": "expense_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Expense Claim System</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "wsgi.py", "path": "expense_app/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_app.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "expense_app/__init__.py", "code": "default_app_config = 'expense_app.apps.ExpenseAppConfig'"}, {"file": "apps.py", "path": "expense_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ExpenseAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'expense_app'"}, {"file": "generate_reports.html", "path": "expense_app/templates/generate_reports.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Generate Reports</h2>\n  <p>Report generation logic will be implemented here.</p>\n  <a href=\"{% url 'budget_control' %}\">Back to Budget Control</a>\n{% endblock %}"}, {"file": "custom_tags.py", "path": "expense_app/templatetags/custom_tags.py", "code": "from django import template\n\nregister = template.Library()\n\n@register.filter\ndef get_item(dictionary, key):\n    return dictionary.get(key)"}], "13": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255, null=True, blank=True)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name}'"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom django.http import HttpResponse\n\n\ndef home_page(request):\n    return HttpResponse(\"Welcome to the System!\")\n\n# Customer Management Views\n\ndef add_customer(request):\n    return HttpResponse(\"Add Customer functionality\")\n\ndef edit_customer(request, customer_id):\n    return HttpResponse(\"Edit Customer functionality\")\n\ndef delete_customer(request, customer_id):\n    return HttpResponse(\"Delete Customer functionality\")\n\ndef view_customer(request, customer_id):\n    return HttpResponse(\"View Customer functionality\")\n\n# Product Management Views\n\ndef add_product(request):\n    return HttpResponse(\"Add Product functionality\")\n\ndef edit_product(request, product_id):\n    return HttpResponse(\"Edit Product functionality\")\n\ndef delete_product(request, product_id):\n    return HttpResponse(\"Delete Product functionality\")\n\ndef view_product(request, product_id):\n    return HttpResponse(\"View Product functionality\")\n\n# Purchase Records Views\n\ndef add_purchase_record(request):\n    return HttpResponse(\"Add Purchase Record functionality\")\n\ndef edit_purchase_record(request, record_id):\n    return HttpResponse(\"Edit Purchase Record functionality\")\n\ndef delete_purchase_record(request, record_id):\n    return HttpResponse(\"Delete Purchase Record functionality\")\n\ndef view_purchase_record(request, record_id):\n    return HttpResponse(\"View Purchase Record functionality\")\n\n# Preferred Products Management Views\n\ndef add_preferred_product(request, customer_id, product_id):\n    return HttpResponse(\"Add Preferred Product functionality\")\n\ndef edit_preferred_product(request, customer_id, product_id):\n    return HttpResponse(\"Edit Preferred Product functionality\")\n\ndef delete_preferred_product(request, customer_id, product_id):\n    return HttpResponse(\"Delete Preferred Product functionality\")\n\ndef view_preferred_products(request, customer_id):\n    return HttpResponse(\"View Preferred Products functionality\")\n\n# Sales Analysis Views\n\ndef generate_sales_report(request):\n    return HttpResponse(\"Generate Sales Report functionality\")\n\ndef analyze_sales_trends(request):\n    return HttpResponse(\"Analyze Sales Trends functionality\")\n\ndef product_performance_analysis(request):\n    return HttpResponse(\"Product Performance Analysis functionality\")"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home_page'),\n\n    # Customer Management\n    path('customers/add/', views.add_customer, name='add_customer'),\n    path('customers/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customers/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customers/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n\n    # Product Management\n    path('products/add/', views.add_product, name='add_product'),\n    path('products/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('products/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('products/view/<int:product_id>/', views.view_product, name='view_product'),\n\n    # Purchase Records\n    path('purchases/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchases/edit/<int:record_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchases/delete/<int:record_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchases/view/<int:record_id>/', views.view_purchase_record, name='view_purchase_record'),\n\n    # Preferred Products\n    path('preferred_products/add/<int:customer_id>/<int:product_id>/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred_products/edit/<int:customer_id>/<int:product_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred_products/delete/<int:customer_id>/<int:product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred_products/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n\n    # Sales Analysis\n    path('sales/report/', views.generate_sales_report, name='generate_sales_report'),\n    path('sales/trends/', views.analyze_sales_trends, name='analyze_sales_trends'),\n    path('sales/performance/', views.product_performance_analysis, name='product_performance_analysis'),\n]"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}], "14": [{"file": "views.py", "path": "helloworld/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    return render(request, 'helloworld/hello_world.html')"}, {"file": "urls.py", "path": "helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworld.urls')),\n]"}, {"file": "hello_world.html", "path": "helloworld/templates/helloworld/hello_world.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            font-family: sans-serif;\n        }\n    </style>\n</head>\n<body>\n    <h1>Hello World</h1>\n</body>\n</html>"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome!</h1>\n    <a href=\"{% url 'helloworld' %}\"><button>Go to HelloWorld</button></a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "templates/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1>HelloWorld</h1>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# Add 'myproject' to INSTALLED_APPS\n# Ensure 'templates' is in DIRS of TEMPLATES setting.\n# Make sure 'django.template.context_processors.request' is in OPTIONS['context_processors'] of TEMPLATES settings.\n#Make sure you set 'ROOT_URLCONF' to 'myproject.urls'\n"}], "16": [{"file": "input_validation.py", "path": "modules/input_validation.py", "code": "def CheckFileExistence(filename):\n    # Implement file existence check logic here\n    pass\n\ndef ValidateHeaders(filename, expected_headers):\n    # Implement header validation logic here\n    pass\n\ndef ValidateTimeColumn(filename):\n    # Implement 'Time' column validation logic here\n    pass\n\ndef ValidateDataIntegrity(filename):\n    # Implement data integrity validation logic here\n    pass\n\ndef ValidateNullValue(filename):\n    # Implement missing value validation logic here\n    pass"}, {"file": "data_transformation.py", "path": "modules/data_transformation.py", "code": "def TransformToTwoDimensionTable(data):\n    # Implement data transformation to 2D table logic here\n    pass\n\ndef DataMapping(data):\n    # Implement data mapping logic here\n    pass"}, {"file": "output_creation.py", "path": "modules/output_creation.py", "code": "def CreateOutputExcelFile(filename):\n    # Implement Excel file creation logic here\n    pass\n\ndef SaveTableToExcel(data, filename):\n    # Implement saving 2D table data to Excel logic here\n    pass"}, {"file": "main.py", "path": "main.py", "code": "from modules import input_validation\nfrom modules import data_transformation\nfrom modules import output_creation\n\n\ndef main():\n    filename = 'Spring Semester Subjects.xlsx'\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n\n    # Input File Validation\n    input_validation.CheckFileExistence(filename)\n    input_validation.ValidateHeaders(filename, expected_headers)\n    input_validation.ValidateTimeColumn(filename)\n    input_validation.ValidateDataIntegrity(filename)\n    input_validation.ValidateNullValue(filename)\n\n    # Data Transformation (Placeholder - needs actual data loading)\n    data = [] # Load data from the excel file here instead of hardcoding it\n    transformed_data = data_transformation.TransformToTwoDimensionTable(data)\n    mapped_data = data_transformation.DataMapping(transformed_data)\n\n    # Output File Creation\n    output_filename = 'Transformed_Subjects.xlsx'\n    output_creation.CreateOutputExcelFile(output_filename)\n    output_creation.SaveTableToExcel(mapped_data, output_filename)\n\nif __name__ == \"__main__\":\n    main()"}], "17": [{"file": "data_preparation.py", "path": "src/data_preparation.py", "code": "import pandas as pd\n\n\ndef read_dataset(filename):\n    \"\"\"Loads the dataset from the specified file.\n\n    Args:\n        filename (str): The name of the Excel file to load.\n\n    Returns:\n        pandas.DataFrame: The loaded dataset.\n\n    Raises:\n        FileNotFoundError: If the file does not exist.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {filename}\")\n\n\ndef lag_dependent_variable(df, column_name='result', lag=1):\n    \"\"\"Applies a one-period lag to the specified column.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        column_name (str): The name of the column to lag.\n        lag (int): The number of periods to lag.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with the lagged column.\n    \"\"\"\n    df['result_lagged'] = df[column_name].shift(lag)\n    return df\n\n\ndef prepare_independent_variables(df, dependent_variable='result_lagged'):\n    \"\"\"Prepares the independent variables and checks for null values.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        dependent_variable (str): The name of the dependent variable column.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with independent variables.\n\n    Raises:\n        ValueError: If null values are found in the DataFrame.\n    \"\"\"\n    if df.isnull().any().any():\n        raise ValueError(\"Null values found in the DataFrame. Please handle them before proceeding.\")\n    \n    if df.empty:\n        raise ValueError(\"Empty DataFrame. Please check your dataset.\")\n\n    independent_variables = df.drop(columns=[dependent_variable], errors='ignore')\n    return independent_variables\n\n"}, {"file": "model_creation.py", "path": "src/model_creation.py", "code": "import statsmodels.api as sm\nimport statsmodels.formula.api as smf\n\n\ndef create_logistic_model(X, y):\n    \"\"\"Creates a logistic regression model.\n\n    Args:\n        X (pandas.DataFrame): The independent variables.\n        y (pandas.Series): The dependent variable.\n\n    Returns:\n        statsmodels.discrete.discrete_model.BinaryResultsWrapper: The fitted logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)\n    model = sm.Logit(y, X)\n    results = model.fit()\n    return results\n\n\ndef generate_model_summary(model):\n    \"\"\"Generates a summary of the logistic model.\n\n    Args:\n        model (statsmodels.discrete.discrete_model.BinaryResultsWrapper): The fitted logistic regression model.\n\n    Returns:\n        str: The model summary.\n    \"\"\"\n    return model.summary()\n"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\n\ndef write_summary(summary, filename='Logistic.xlsx'):\n    \"\"\"Writes the model summary to an Excel file.\n\n    Args:\n        summary (str): The model summary.\n        filename (str): The name of the Excel file to write to.\n    \"\"\"\n    df = pd.DataFrame([summary])  # Convert string to DataFrame\n    df.to_excel(filename, index=False, header=False) # Write without index or header\n"}, {"file": "main.py", "path": "main.py", "code": "from src import data_preparation\nfrom src import model_creation\nfrom src import output\n\ndef main():\n    try:\n        # Data Preparation\n        df = data_preparation.read_dataset('Gamedata.xlsx')\n        df = data_preparation.lag_dependent_variable(df)\n        X = data_preparation.prepare_independent_variables(df, dependent_variable='result_lagged')\n        y = df['result_lagged'].dropna() # Drop NaN resulted from lagging\n\n        # Model Creation\n        model = model_creation.create_logistic_model(X, y)\n        summary = model_creation.generate_model_summary(model)\n\n        # Output\n        output.write_summary(summary, 'Logistic.xlsx')\n\n        print(\"Model summary written to Logistic.xlsx\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "def start_game():\n    pass\n\ndef instructions():\n    pass\n\ndef exit_game():\n    pass\n\ndef main_menu():\n    # Display main menu options\n    pass"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "def move_player(room):\n    pass\n\ndef look_around(room):\n    pass\n\ndef pick_item(room):\n    pass\n\ndef check_inventory(inventory):\n    pass"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "def parse_command(command):\n    pass\n\ndef update_game_state(command, game_state):\n    pass"}, {"file": "help_support.py", "path": "src/help_support.py", "code": "def display_help():\n    pass"}, {"file": "game.py", "path": "src/game.py", "code": "import main_menu\nimport game_environment\nimport game_logic\nimport help_support\n\ndef main():\n    # Main game loop\n    pass\n\nif __name__ == \"__main__\":\n    main()"}], "19": [{"file": "batch_program.py", "path": "src/batch_program.py", "code": "# src/batch_program.py\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef ReadDeathlistData(file_path):\n    \"\"\"Load and read data from the 'Deathlist.csv' file.\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File not found at {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return None\n\n\ndef ProcessData(df):\n    \"\"\"Process the dataset to structure data appropriately for weekly analysis.\"\"\"\n    # Assuming the DataFrame has a date column named 'DateOfDeath'\n    try:\n        df['DateOfDeath'] = pd.to_datetime(df['DateOfDeath'])\n        df['WeekNumber'] = df['DateOfDeath'].dt.isocalendar().week\n        return df\n    except KeyError:\n        print(\"Error: 'DateOfDeath' column not found. Please ensure the CSV file has this column.\")\n        return None\n    except Exception as e:\n        print(f\"Error processing data: {e}\")\n        return None\n\n\ndef CalculateWeeklyDeaths(df):\n    \"\"\"Aggregate the data to calculate the number of deaths per week.\"\"\"\n    try:\n        weekly_deaths = df.groupby('WeekNumber').size().reset_index(name='DeathCount')\n        return weekly_deaths\n    except Exception as e:\n        print(f\"Error calculating weekly deaths: {e}\")\n        return None\n\n\ndef GenerateHistogram(weekly_deaths):\n    \"\"\"Create a histogram depicting the weekly deaths calculated from the dataset.\"\"\"\n    try:\n        plt.figure(figsize=(12, 6))  # Adjust figure size for better readability\n        plt.bar(weekly_deaths['WeekNumber'], weekly_deaths['DeathCount'], color='skyblue')\n        plt.xlabel('Week Number')\n        plt.ylabel('Number of Deaths')\n        plt.title('Weekly Deaths Histogram')\n        plt.grid(axis='y', alpha=0.75)\n        plt.tight_layout()\n        return plt  # Return the matplotlib object\n    except Exception as e:\n        print(f\"Error generating histogram: {e}\")\n        return None\n\n\ndef OutputHistogram(plt_object, output_path=None):\n    \"\"\"Print or display the generated histogram to the user.\"\"\"\n    if plt_object is not None:\n        if output_path:\n            try:\n                plt_object.savefig(output_path)\n                print(f\"Histogram saved to {output_path}\")\n            except Exception as e:\n                print(f\"Error saving histogram: {e}\")\n                plt_object.show()\n        else:\n            plt_object.show()\n    else:\n        print(\"No histogram to output.\")\n\n\ndef ValidateDataset(df):\n    \"\"\"Validate the dataset to ensure it contains the required data and format before processing.\"\"\"\n    if df is None:\n        print(\"Error: DataFrame is None. Unable to validate.\")\n        return False\n\n    required_columns = ['DateOfDeath'] # Add other required columns as needed.\n    for col in required_columns:\n        if col not in df.columns:\n            print(f\"Error: Required column '{col}' is missing from the dataset.\")\n            return False\n\n    # Add more validation checks as needed, e.g., data types, missing values, etc.\n    print(\"Dataset validation successful.\")\n    return True\n\n\n\n\ndef main():\n    deathlist_file = 'Deathlist.csv'  # Replace with actual path if needed\n    output_file = 'weekly_deaths_histogram.png'  # Replace if you want another name\n    \n    df = ReadDeathlistData(deathlist_file)\n\n    if df is None:\n        print(\"Failed to read data. Exiting.\")\n        return\n\n    if not ValidateDataset(df):\n        print(\"Dataset validation failed. Exiting.\")\n        return\n\n    processed_df = ProcessData(df)\n\n    if processed_df is None:\n        print(\"Failed to process data. Exiting.\")\n        return\n\n    weekly_deaths = CalculateWeeklyDeaths(processed_df)\n\n    if weekly_deaths is None:\n        print(\"Failed to calculate weekly deaths. Exiting.\")\n        return\n\n    histogram = GenerateHistogram(weekly_deaths)\n\n    if histogram is None:\n        print(\"Failed to generate histogram. Exiting.\")\n        return\n\n    OutputHistogram(histogram, output_file)\n\n\nif __name__ == \"__main__\":\n    main()\n"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n    slug = models.SlugField(max_length=200, unique=True, blank=True) # For URL friendly category name\n\n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.ForeignKey(User, on_delete=models.CASCADE)\n    pub_date = models.DateTimeField(auto_now_add=True)\n    categories = models.ManyToManyField(Category, related_name='posts')\n    # slug field for unique blog url\n    slug = models.SlugField(max_length=200, unique=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE)\n    author = models.CharField(max_length=100)\n    content = models.TextField()\n    pub_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.post.title}'"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import Post, Category, Comment\nfrom django.core.paginator import Paginator\nfrom django.contrib.auth.decorators import login_required\nfrom django.utils.text import slugify\n#from .forms import PostForm, CommentForm, CategoryForm\n\n\ndef home(request):\n    posts = Post.objects.order_by('-pub_date')[:5] # Latest 5 posts\n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_list(request):\n    posts = Post.objects.order_by('-pub_date')\n    paginator = Paginator(posts, 5) # Show 5 posts per page\n    page_number = request.GET.get('page')\n    page_obj = paginator.get_page(page_number)\n\n    return render(request, 'blog/post_list.html', {'page_obj': page_obj})\n\n\ndef post_detail(request, slug):\n    post = get_object_or_404(Post, slug=slug)\n    #comments = Comment.objects.filter(post=post)\n    return render(request, 'blog/post_detail.html', {'post': post})\n\ndef category_list(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/category_list.html', {'categories': categories})\n\n\ndef category_detail(request, slug):\n    category = get_object_or_404(Category, slug=slug)\n    posts = category.posts.all()\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n\ndef search(request):\n    query = request.GET.get('q')\n    posts = Post.objects.filter(title__icontains=query) | Post.objects.filter(content__icontains=query)\n    return render(request, 'blog/search_results.html', {'posts': posts, 'query': query})\n\n\n@login_required\ndef add_post(request):\n    return HttpResponse(\"Add post\")\n\n@login_required\ndef manage_post(request, slug):\n    return HttpResponse(\"Manage post\")\n\n@login_required\ndef manage_comments(request, comment_id):\n    return HttpResponse(\"Manage Comments\")\n\n@login_required\ndef manage_categories(request):\n    return HttpResponse(\"Manage Categories\")\n"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'), # Home page with latest posts\n    path('posts/', views.post_list, name='post_list'), # List of all posts with pagination\n    path('posts/<slug:slug>/', views.post_detail, name='post_detail'), # Detail view of a single post\n    path('categories/', views.category_list, name='category_list'), # List of categories\n    path('categories/<slug:slug>/', views.category_detail, name='category_detail'), # Posts in a specific category\n    path('search/', views.search, name='search'), # Search functionality\n\n    path('add_post/', views.add_post, name='add_post'),\n    path('manage_post/<slug:slug>/', views.manage_post, name='manage_post'),\n    path('manage_comments/<int:comment_id>/', views.manage_comments, name='manage_comments'),\n    path('manage_categories/', views.manage_categories, name='manage_categories'),\n]"}, {"file": "settings.py", "path": "config/settings.py", "code": "# ... other settings ...\n\nINSTALLED_APPS = [\n    # ... other apps ...\n    'blog',\n]\n\n# ... other settings ...\n\nROOT_URLCONF = 'config.urls'  # Assuming 'config' is the project name\n\n# ... other settings ...\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    #os.path.join(BASE_DIR, 'static'),\n]\n\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n\n"}, {"file": "urls.py", "path": "config/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "home.html", "path": "blog/templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n  <h1>Latest Blog Posts</h1>\n  <ul>\n    {% for post in posts %}\n      <li><a href=\"{% url 'post_detail' slug=post.slug %}\">{{ post.title }}</a> - {{ post.pub_date }}</li>\n    {% endfor %}\n  </ul>\n\n  <form action=\"{% url 'search' %}\" method=\"get\">\n    <input type=\"text\" name=\"q\" placeholder=\"Search...\">\n    <button type=\"submit\">Search</button>\n  </form>\n\n{% endblock %}"}, {"file": "post_list.html", "path": "blog/templates/blog/post_list.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n  <h1>All Blog Posts</h1>\n  <ul>\n    {% for post in page_obj %}\n      <li><a href=\"{% url 'post_detail' slug=post.slug %}\">{{ post.title }}</a> - {{ post.pub_date }}</li>\n    {% endfor %}\n  </ul>\n\n  <div class=\"pagination\">\n    <span class=\"step-links\">\n      {% if page_obj.has_previous %}\n        <a href=\"?page=1\">&laquo; first</a>\n        <a href=\"?page={{ page_obj.previous_page_number }}\">previous</a>\n      {% endif %}\n\n      <span class=\"current\">\n        Page {{ page_obj.number }} of {{ page_obj.paginator.num_pages }}.\n      </span>\n\n      {% if page_obj.has_next %}\n        <a href=\"?page={{ page_obj.next_page_number }}\">next</a>\n        <a href=\"?page={{ page_obj.paginator.num_pages }}\">last &raquo;</a>\n      {% endif %}\n    </span>\n  </div>\n{% endblock %}"}, {"file": "post_detail.html", "path": "blog/templates/blog/post_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n  <h1>{{ post.title }}</h1>\n  <p>Published on: {{ post.pub_date }} by {{ post.author }}</p>\n  <p>{{ post.content }}</p>\n\n  <h2>Comments</h2>\n  {# Implement comments here #}\n\n{% endblock %}"}, {"file": "base.html", "path": "blog/templates/blog/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n  <title>My Blog</title>\n</head>\n<body>\n  <nav>\n    <a href=\"{% url 'home' %}\">Home</a>\n    <a href=\"{% url 'post_list' %}\">Posts</a>\n    <a href=\"{% url 'category_list' %}\">Categories</a>\n  </nav>\n\n  <div class=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n</body>\n</html>"}, {"file": "search_results.html", "path": "blog/templates/blog/search_results.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n  <h1>Search Results for \"{{ query }}\"</h1>\n  <ul>\n    {% for post in posts %}\n      <li><a href=\"{% url 'post_detail' slug=post.slug %}\">{{ post.title }}</a></li>\n    {% empty %}\n      <li>No posts found for \"{{ query }}\".</li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}, {"file": "category_list.html", "path": "blog/templates/blog/category_list.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n  <h1>Blog Categories</h1>\n  <ul>\n    {% for category in categories %}\n      <li><a href=\"{% url 'category_detail' slug=category.slug %}\">{{ category.name }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}, {"file": "category_detail.html", "path": "blog/templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n  <h1>Posts in Category: {{ category.name }}</h1>\n  <ul>\n    {% for post in posts %}\n      <li><a href=\"{% url 'post_detail' slug=post.slug %}\">{{ post.title }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}]}