{"1": [{"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calculator/', views.bmi_calculator, name='bmi_calculator'),\n]"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\ndef home(request):\n    return render(request, 'bmi_calculator/home.html')\n\ndef bmi_calculator(request):\n    if request.method == 'POST':\n        try:\n            height = float(request.POST.get('height'))\n            weight = float(request.POST.get('weight'))\n            height_unit = request.POST.get('height_unit')\n            weight_unit = request.POST.get('weight_unit')\n\n            # Convert to meters and kg if necessary\n            if height_unit == 'inches':\n                height = height * 0.0254\n            elif height_unit == 'cm':\n                height = height / 100\n\n            if weight_unit == 'lbs':\n                weight = weight * 0.453592\n\n            # Calculate BMI\n            bmi = weight / (height ** 2)\n            bmi = round(bmi, 2)  # Round to 2 decimal places\n\n            # Determine BMI category\n            if bmi < 18.5:\n                category = 'Underweight'\n            elif 18.5 <= bmi < 25:\n                category = 'Normal'\n            elif 25 <= bmi < 30:\n                category = 'Overweight'\n            else:\n                category = 'Obese'\n\n            return JsonResponse({'bmi': bmi, 'category': category})\n\n        except (ValueError, TypeError):\n            return JsonResponse({'error': 'Invalid input.'}, status=400)\n\n    return render(request, 'bmi_calculator/calculator.html')\n"}, {"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# You can add models here if you need to store BMI data in the database.\n"}, {"file": "home.html", "path": "bmi_calculator/templates/bmi_calculator/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n    <link rel=\"stylesheet\" href=\"{% static 'bmi_calculator/style.css' %}\">\n</head>\n<body>\n    <h1>Welcome to the BMI Calculator</h1>\n    <p>This calculator helps you determine your Body Mass Index (BMI).</p>\n    <p>Understanding your BMI can provide insights into your weight category.</p>\n    <a href=\"{% url 'bmi_calculator' %}\"><button>Go to BMI Calculator</button></a>\n</body>\n</html>"}, {"file": "calculator.html", "path": "bmi_calculator/templates/bmi_calculator/calculator.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n    <link rel=\"stylesheet\" href=\"{% static 'bmi_calculator/style.css' %}\">\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\n</head>\n<body>\n    <h1>BMI Calculator</h1>\n\n    <form id=\"bmi-form\">\n        <label for=\"height\">Height:</label>\n        <input type=\"number\" id=\"height\" name=\"height\" required>\n        <select id=\"height_unit\" name=\"height_unit\">\n            <option value=\"cm\">cm</option>\n            <option value=\"inches\">inches</option>\n        </select><br><br>\n\n        <label for=\"weight\">Weight:</label>\n        <input type=\"number\" id=\"weight\" name=\"weight\" required>\n        <select id=\"weight_unit\" name=\"weight_unit\">\n            <option value=\"kg\">kg</option>\n            <option value=\"lbs\">lbs</option>\n        </select><br><br>\n\n        <button type=\"submit\">Calculate BMI</button>\n        <button type=\"button\" id=\"reset-button\">Reset</button>\n    </form>\n\n    <div id=\"result\" style=\"margin-top: 20px;\">\n        <p><strong>BMI:</strong> <span id=\"bmi-value\"></span></p>\n        <p><strong>Category:</strong> <span id=\"bmi-category\"></span></p>\n        <p><strong>Interpretation:</strong> <span id=\"bmi-interpretation\"></span></p>\n        <p><a href=\"#\">Learn more about maintaining a healthy BMI</a></p>\n    </div>\n\n    <script>\n        $(document).ready(function() {\n            $(\"#bmi-form\").submit(function(event) {\n                event.preventDefault();\n                $.ajax({\n                    type: \"POST\",\n                    url: \"{% url 'bmi_calculator' %}\",\n                    data: $(\"#bmi-form\").serialize(),\n                    dataType: \"json\",\n                    success: function(data) {\n                        $(\"#bmi-value\").text(data.bmi);\n                        $(\"#bmi-category\").text(data.category);\n\n                        // Add basic interpretation based on category\n                        let interpretation = \"\";\n                        if (data.category === 'Underweight') {\n                            interpretation = \"You may need to gain weight.\";\n                        } else if (data.category === 'Overweight') {\n                            interpretation = \"You may need to lose weight.\";\n                        } else if (data.category === 'Obese'){\n                            interpretation = \"Consider speaking with a healthcare professional.\"\n                        } else {\n                            interpretation = \"Your BMI is within a healthy range.\";\n                        }\n\n                        $(\"#bmi-interpretation\").text(interpretation);\n\n                        $(\"#result\").show(); // Show the result div\n                    },\n                    error: function(xhr, status, error) {\n                        alert(\"Error: \" + xhr.responseText);\n                    }\n                });\n            });\n\n            $(\"#reset-button\").click(function() {\n                $(\"#bmi-form\")[0].reset();\n                $(\"#result\").hide();\n            });\n            $(\"#result\").hide();\n        });\n    </script>\n</body>\n</html>"}, {"file": "style.css", "path": "bmi_calculator/static/bmi_calculator/style.css", "code": "body {\n    font-family: sans-serif;\n}\n\ninput[type=number] {\n    width: 100px;\n    padding: 5px;\n    margin: 5px;\n}\n\nbutton {\n    padding: 10px 20px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    cursor: pointer;\n}\n\n#result {\n    display: none; /* Hidden by default */\n}\n"}, {"file": "apps.py", "path": "bmi_calculator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BmiCalculatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'bmi_calculator'"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator',  # Add your app here\n]"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\n# You might want to store currency information here if needed.\n# For example:\n# class Currency(models.Model):\n#     code = models.CharField(max_length=3, unique=True)\n#     name = models.CharField(max_length=50)\n#     symbol = models.CharField(max_length=5)\n#     \n#     def __str__(self):\n#         return self.code"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\n# from django.http import HttpResponse\n# from .utils import get_exchange_rate\n\ndef home(request):\n    context = {}\n    # Implement logic for:\n    # - Select Base Currency\n    # - Select Target Currency\n    # - Enter Amount\n    # - Convert Button\n    # - Display Conversion Result\n    # - Exchange Rate Info\n\n    # Example (replace with actual logic):\n    # if request.method == 'POST':\n    #     base_currency = request.POST.get('base_currency')\n    #     target_currency = request.POST.get('target_currency')\n    #     amount = request.POST.get('amount')\n    #     # exchange_rate = get_exchange_rate(base_currency, target_currency)\n    #     # converted_amount = float(amount) * exchange_rate\n    #     context['base_currency'] = base_currency\n    #     context['target_currency'] = target_currency\n    #     context['amount'] = amount\n    #     # context['converted_amount'] = converted_amount\n    #     # context['exchange_rate'] = exchange_rate\n\n    return render(request, 'currency_converter/home.html', context)\n\n#def currency_details(request):\n    # Implement logic for Currency Details Page if needed\n#    return render(request, 'currency_converter/currency_details.html')\n\n#def settings(request):\n    # Implement logic for Settings Page if needed\n#    return render(request, 'currency_converter/settings.html')\n"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    #path('currency_details/', views.currency_details, name='currency_details'),\n    #path('settings/', views.settings, name='settings'),\n]"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"base_currency\">Base Currency:</label>\n        <select id=\"base_currency\" name=\"base_currency\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n            <!-- Add more currency options -->\n        </select><br><br>\n\n        <label for=\"target_currency\">Target Currency:</label>\n        <select id=\"target_currency\" name=\"target_currency\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n            <!-- Add more currency options -->\n        </select><br><br>\n\n        <label for=\"amount\">Amount:</label>\n        <input type=\"number\" id=\"amount\" name=\"amount\" step=\"0.01\"><br><br>\n\n        <button type=\"submit\">Convert</button>\n    </form>\n\n    {% if base_currency %}\n    <p>You are converting {{ amount }} {{ base_currency }} to {{ target_currency }}.</p>\n    {% endif %}\n\n    {% if converted_amount %}\n    <p>Converted Amount: {{ converted_amount }} {{ target_currency }}</p>\n    <p>Exchange Rate: {{ exchange_rate }}</p>\n    {% endif %}\n</body>\n</html>"}, {"file": "utils.py", "path": "currency_converter/utils.py", "code": "# Add any helper functions here, such as fetching exchange rates from an API\n# import requests\n# def get_exchange_rate(base_currency, target_currency):\n    # Replace with an actual API call to get the exchange rate\n    # api_url = f'https://api.example.com/convert?from={base_currency}&to={target_currency}'\n    # response = requests.get(api_url)\n    # data = response.json()\n    # return data['rate']\n#    return 1.0 # Placeholder, replace with actual implementation"}, {"file": "apps.py", "path": "currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n# If you create models, register them here like this:\n# from .models import YourModel\n# admin.site.register(YourModel)"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": "default_app_config = 'currency_converter.apps.CurrencyConverterConfig'"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'currency_converter' to INSTALLED_APPS\n# Example:\n# INSTALLED_APPS = [\n#     ...\n#     'currency_converter',\n# ]\n\n# Add template directory\n# TEMPLATES = [\n#   {\n#      'BACKEND': 'django.template.backends.django.DjangoTemplates',\n#      'DIRS': [BASE_DIR / 'currency_converter/templates'],\n#      ...\n#   },\n# ]"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generated_password/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generated_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters + string.digits  # Default to letters and numbers\n\n    generated_password = ''.join(random.choice(characters) for i in range(length))\n\n    return render(request, 'generated_password.html', {'password': generated_password})\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "password_generator/templates/home.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Welcome to the Password Generator</h1>\n    <p>A simple tool to generate strong passwords.</p>\n    <a href=\"{% url 'password_options' %}\">Generate Password</a>\n{% endblock %}"}, {"file": "password_options.html", "path": "password_generator/templates/password_options.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Password Options</h1>\n    <form action=\"{% url 'generated_password' %}\" method=\"get\">\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" value=\"12\">\n        <br>\n        <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\">\n        <label for=\"uppercase\">Include Uppercase</label>\n        <br>\n        <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\">\n        <label for=\"lowercase\">Include Lowercase</label>\n        <br>\n        <input type=\"checkbox\" id=\"numbers\" name=\"numbers\">\n        <label for=\"numbers\">Include Numbers</label>\n        <br>\n        <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n        <label for=\"symbols\">Include Symbols</label>\n        <br>\n        <button type=\"submit\">Generate Password</button>\n    </form>\n{% endblock %}"}, {"file": "generated_password.html", "path": "password_generator/templates/generated_password.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>Generated Password</h1>\n    <p id=\"password\">{{ password }}</p>\n    <button onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n    <script>\n        function copyToClipboard() {\n            var passwordText = document.getElementById(\"password\").innerText;\n            navigator.clipboard.writeText(passwordText)\n                .then(function() {\n                    alert('Password copied to clipboard!');\n                })\n                .catch(function(err) {\n                    console.error('Could not copy password: ', err);\n                });\n        }\n    </script>\n{% endblock %}"}, {"file": "about.html", "path": "password_generator/templates/about.html", "code": "{% extends 'base.html' %}\n{% block content %}\n    <h1>About</h1>\n    <p>This website is a simple password generator.</p>\n{% endblock %}"}, {"file": "base.html", "path": "password_generator/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "4": [{"file": "urls.py", "path": "qrcode_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr, name='generate_qr'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qrcode_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport qrcode\nfrom io import BytesIO\nimport base64\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_qr(request):\n    if request.method == 'POST':\n        text = request.POST.get('text')\n        box_size = int(request.POST.get('box_size', 10))\n        border_size = int(request.POST.get('border_size', 4))\n        error_correction = request.POST.get('error_correction', 'medium')\n        fill_color = request.POST.get('fill_color', 'black')\n        back_color = request.POST.get('back_color', 'white')\n\n        error_correction_levels = {\n            'small': qrcode.ERROR_CORRECT_L,\n            'medium': qrcode.ERROR_CORRECT_M,\n            'large': qrcode.ERROR_CORRECT_H,\n        }\n        error_correction_level = error_correction_levels.get(error_correction, qrcode.ERROR_CORRECT_M)\n\n        try:\n            qr = qrcode.QRCode(\n                version=1,  # Auto-detect version for optimal fit\n                error_correction=error_correction_level,\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n            buffer = BytesIO()\n            img.save(buffer, format='PNG')\n            img_str = base64.b64encode(buffer.getvalue()).decode()\n\n            return JsonResponse({'image': img_str})\n\n        except Exception as e:\n            return JsonResponse({'error': str(e)}))\n    else:\n        return JsonResponse({'error': 'Invalid request method'}) \n\ndef about(request):\n    return render(request, 'about.html') "}, {"file": "models.py", "path": "qrcode_generator/models.py", "code": "from django.db import models\n\n# No models required for this project based on the checklist"}, {"file": "admin.py", "path": "qrcode_generator/admin.py", "code": "from django.contrib import admin\n\n# No models to register based on the checklist"}, {"file": "home.html", "path": "qrcode_generator/templates/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1>Welcome to the QR Code Generator!</h1>\n    <p>This website allows you to generate QR codes for any text or URL.</p>\n    <a href=\"{% url 'generate_qr' %}\">Generate QR Code</a>\n</body>\n</html>"}, {"file": "generate_qr.html", "path": "qrcode_generator/templates/generate_qr.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n</head>\n<body>\n    <h1>QR Code Generator</h1>\n    <input type=\"text\" id=\"text\" placeholder=\"Enter text or URL\">\n    <br>\n    <label for=\"box_size\">Box Size (1-128):</label>\n    <input type=\"number\" id=\"box_size\" name=\"box_size\" value=\"10\" min=\"1\" max=\"128\">\n    <br>\n    <label for=\"border_size\">Border Size (1-10):</label>\n    <input type=\"number\" id=\"border_size\" name=\"border_size\" value=\"4\" min=\"1\" max=\"10\">\n    <br>\n    <label for=\"error_correction\">Error Correction:</label>\n    <select id=\"error_correction\" name=\"error_correction\">\n        <option value=\"small\">Small</option>\n        <option value=\"medium\" selected>Medium</option>\n        <option value=\"large\">Large</option>\n    </select>\n    <br>\n    <label for=\"fill_color\">Fill Color:</label>\n    <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\">\n    <br>\n    <label for=\"back_color\">Background Color:</label>\n    <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#FFFFFF\">\n    <br>\n    <button id=\"generate\">Generate</button>\n    <div id=\"qr_code_display\">\n        <img id=\"qr_code_image\" src=\"\" alt=\"QR Code\">\n    </div>\n    <button id=\"download\" disabled>Download QR Code</button>\n    <div id=\"error_message\" style=\"color: red;\"></div>\n    <script>\n        $(document).ready(function() {\n            $(\"#generate\").click(function() {\n                var text = $(\"#text\").val();\n                var box_size = $(\"#box_size\").val();\n                var border_size = $(\"#border_size\").val();\n                var error_correction = $(\"#error_correction\").val();\n                var fill_color = $(\"#fill_color\").val();\n                var back_color = $(\"#back_color\").val();\n\n                $.ajax({\n                    url: \"{% url 'generate_qr' %}\",\n                    type: \"POST\",\n                    data: {\n                        text: text,\n                        box_size: box_size,\n                        border_size: border_size,\n                        error_correction: error_correction,\n                        fill_color: fill_color,\n                        back_color: back_color,\n                        csrfmiddlewaretoken: '{{ csrf_token }}'\n                    },\n                    success: function(data) {\n                        if (data.error) {\n                            $(\"#error_message\").text(data.error);\n                            $(\"#qr_code_image\").attr(\"src\", \"\");\n                            $(\"#download\").prop(\"disabled\", true);\n                        } else {\n                            $(\"#error_message\").text(\"\");\n                            $(\"#qr_code_image\").attr(\"src\", \"data:image/png;base64,\" + data.image);\n                            $(\"#download\").prop(\"disabled\", false);\n                        }\n                    },\n                    error: function(xhr, status, error) {\n                        $(\"#error_message\").text(\"An error occurred: \" + error);\n                        $(\"#qr_code_image\").attr(\"src\", \"\");\n                        $(\"#download\").prop(\"disabled\", true);\n                    }\n                });\n            });\n\n            $(\"#download\").click(function() {\n                var imgData = $(\"#qr_code_image\").attr(\"src\");\n                if (imgData) {\n                    var link = document.createElement('a');\n                    link.href = imgData;\n                    link.download = 'qrcode.png';\n                    document.body.appendChild(link);\n                    link.click();\n                    document.body.removeChild(link);\n                }\n            });\n        });\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "qrcode_generator/templates/about.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Website</h1>\n    <p>This website is a simple QR code generator.</p>\n\n    <h2>Privacy Policy</h2>\n    <p>Your data is not stored.</p>\n\n    <h2>Terms of Service</h2>\n    <p>Use this website at your own risk.</p>\n</body>\n</html>"}, {"file": "settings.py", "path": "qrcode_generator/settings.py", "code": "# Minimal settings.py - adjust as needed for a full Django project\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']  # Change in production\n\nINSTALLED_APPS = [\n    'django.contrib.staticfiles',\n    'qrcode_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n]\n\nROOT_URLCONF = 'qrcode_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'qrcode_generator', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.request',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcode_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'qrcode_generator', 'static'),\n]\n"}, {"file": "wsgi.py", "path": "qrcode_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator.settings')\n\napplication = get_wsgi_application()"}], "5": [{"file": "urls.py", "path": "converter_project/converter_project/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "converter_project/converter_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport markdown\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_output': html_output})\n    else:\n        return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "converter_project/converter_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Markdown to HTML Converter!</h1>\n    <p>This tool allows you to convert Markdown text to HTML.</p>\n    <a href=\"{% url 'convert' %}\">Convert</a>\n    <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "convert.html", "path": "converter_project/converter_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <h1>Markdown to HTML Converter</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"markdown_text\">Markdown Input:</label><br>\n        <textarea id=\"markdown_text\" name=\"markdown_text\" rows=\"10\" cols=\"50\"></textarea><br><br>\n        <button type=\"submit\">Convert</button>\n    </form>\n\n    {% if html_output %}\n    <h2>HTML Output:</h2>\n    <pre>{{ html_output }}</pre>\n    {% endif %}\n</body>\n</html>"}, {"file": "about.html", "path": "converter_project/converter_app/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About Us</h1>\n    <p>This converter was developed by ...</p>\n    <p>FAQ: ...</p>\n</body>\n</html>"}, {"file": "settings.py", "path": "converter_project/converter_project/settings.py", "code": "# settings.py (add the following to the TEMPLATES section)\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': ['converter_app/templates'], #Add this line\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nINSTALLED_APPS = [\n    'converter_app',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n"}, {"file": "urls.py", "path": "converter_project/converter_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    # Leaving this empty as the root URL conf handles it.\n]"}], "6": [{"file": "models.py", "path": "todoapp/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todoapp/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom django.http import HttpResponse\nfrom django.urls import reverse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'home.html', {'todo_lists': todo_lists})\n\n\ndef todo_list_detail(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    return render(request, 'todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        name = request.POST['name']\n        TodoList.objects.create(name=name)\n        return redirect('home') # Assuming 'home' is the name of your home URL\n    return render(request, 'create_todo_list.html')\n\n\ndef add_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        title = request.POST['title']\n        description = request.POST.get('description', '') # Optional description\n        Task.objects.create(todo_list=todo_list, title=title, description=description)\n        return redirect('todo_list_detail', list_id=list_id)\n    return render(request, 'add_task.html', {'todo_list': todo_list})\n\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        task.title = request.POST['title']\n        task.description = request.POST.get('description', '')\n        task.completed = 'completed' in request.POST  # Check if 'completed' checkbox is checked\n        task.save()\n        return redirect('todo_list_detail', list_id=task.todo_list.id)\n    return render(request, 'edit_task.html', {'task': task})\n\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    todo_list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list_detail', list_id=todo_list_id)\n\ndef mark_complete(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', list_id=task.todo_list.id)"}, {"file": "urls.py", "path": "todoapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('list/<int:list_id>/', views.todo_list_detail, name='todo_list_detail'),\n    path('list/create/', views.create_todo_list, name='create_todo_list'),\n    path('list/<int:list_id>/add_task/', views.add_task, name='add_task'),\n    path('task/<int:task_id>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:task_id>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:task_id>/complete/', views.mark_complete, name='mark_complete'),\n]"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Todo Lists</h1>\n  <a href=\"{% url 'create_todo_list' %}\">Create New List</a>\n  <ul>\n    {% for todo_list in todo_lists %}\n      <li><a href=\"{% url 'todo_list_detail' todo_list.id %}\">{{ todo_list.name }}</a></li>\n    {% endfor %}\n  </ul>\n{% endblock %}"}, {"file": "todo_list_detail.html", "path": "templates/todo_list_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>{{ todo_list.name }}</h1>\n  <a href=\"{% url 'add_task' todo_list.id %}\">Add Task</a>\n  <ul>\n    {% for task in tasks %}\n      <li>\n        {{ task.title }}\n        {% if task.completed %} (Completed) {% endif %}\n        <a href=\"{% url 'edit_task' task.id %}\">Edit</a>\n        <a href=\"{% url 'delete_task' task.id %}\">Delete</a>\n        {% if not task.completed %}\n          <a href=\"{% url 'mark_complete' task.id %}\">Mark Complete</a>\n        {% endif %}\n      </li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "create_todo_list.html", "path": "templates/create_todo_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Create Todo List</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"name\">Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <input type=\"submit\" value=\"Create\">\n  </form>\n  <a href=\"{% url 'home' %}\">Cancel</a>\n{% endblock %}"}, {"file": "add_task.html", "path": "templates/add_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Add Task to {{ todo_list.name }}</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"title\">Title:</label><br>\n    <input type=\"text\" id=\"title\" name=\"title\"><br><br>\n    <label for=\"description\">Description (optional):</label><br>\n    <textarea id=\"description\" name=\"description\"></textarea><br><br>\n    <input type=\"submit\" value=\"Add\">\n  </form>\n  <a href=\"{% url 'todo_list_detail' todo_list.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "edit_task.html", "path": "templates/edit_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Edit Task</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"title\">Title:</label><br>\n    <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ task.title }}\"><br><br>\n    <label for=\"description\">Description (optional):</label><br>\n    <textarea id=\"description\" name=\"description\">{{ task.description }}</textarea><br><br>\n    <label for=\"completed\">Completed:</label>\n    <input type=\"checkbox\" id=\"completed\" name=\"completed\" {% if task.completed %}checked{% endif %}><br><br>\n    <input type=\"submit\" value=\"Save\">\n  </form>\n  <a href=\"{% url 'todo_list_detail' task.todo_list.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "7": [{"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('reports/', views.reports, name='reports'),\n    path('settings2/', views.settings2, name='settings2'),\n    path('settings1/', views.settings1, name='settings1'),\n    path('login/', views.user_login, name='login'),\n    path('signup/', views.sign_up, name='signup'),\n    # path('help/', views.help_page, name='help'), # Help page is optional\n]"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth import authenticate, login\nfrom django.contrib.auth.forms import AuthenticationForm, UserCreationForm\n\ndef home(request):\n    # View Dashboard, User Login, Sign Up, View Home\n    return render(request, 'home.html')\n\ndef balance_tracker(request):\n    # View Balance Chart, Add Transaction, Filter Transactions, View Balance Structure Chart, Edit Transaction, Delete Transaction\n    return render(request, 'balance_tracker.html')\n\ndef reports(request):\n    # Generate Monthly Report, Export Data\n    return render(request, 'reports.html')\n\ndef settings2(request):\n    # Update Profile\n    return render(request, 'settings2.html')\n\ndef settings1(request):\n    # Add Category, Edit Category, Delete Category, List Category\n    return render(request, 'settings1.html')\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('home')\n            else:\n                return render(request, 'login.html', {'form': form, 'error': 'Invalid username or password.'})\n        else:\n            return render(request, 'login.html', {'form': form, 'error': 'Please correct the errors below.'})\n    else:\n        form = AuthenticationForm()\n        return render(request, 'login.html', {'form': form})\n\ndef sign_up(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')\n        else:\n            return render(request, 'signup.html', {'form': form})\n    else:\n        form = UserCreationForm()\n        return render(request, 'signup.html', {'form': form})\n\n# def help_page(request):\n#     # View FAQs, Contact Support\n#     return render(request, 'help.html')\n"}, {"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return self.description"}, {"file": "forms.py", "path": "budget_control/forms.py", "code": "from django import forms\nfrom .models import Category, Transaction\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['date', 'description', 'amount', 'category']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'})\n        }"}, {"file": "settings.py", "path": "budget_control_project/settings.py", "code": "# Include 'budget_control' in INSTALLED_APPS\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget_control', # Add this line\n]\n\n# Add template directory\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'], # Add this line\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# Add login redirect URL\nLOGIN_REDIRECT_URL = 'home'\n"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom datetime import datetime\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    today = datetime.now()\n    events = Event.objects.filter(start_time__month=today.month, start_time__year=today.year).order_by('start_time')\n    return render(request, 'calendar_app/home.html', {'current_date': today, 'events': events})\n\ndef calendar_view(request, year=None, month=None):\n    today = datetime.now()\n\n    if year is None or month is None:\n        year = today.year\n        month = today.month\n    else:\n        year = int(year)\n        month = int(month)\n\n    events = Event.objects.filter(start_time__month=month, start_time__year=year).order_by('start_time')\n    return render(request, 'calendar_app/calendar.html', {'year': year, 'month': month, 'events': events, 'current_date': today})\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/add_event.html', {'form': form})\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendar_app/event_details.html', {'event': event})\n\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event.id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/edit_event.html', {'form': form, 'event': event})\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'calendar_app/delete_event.html', {'event': event})\n\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query)\n    return render(request, 'calendar_app/search_events.html', {'events': events, 'query': query})\n\n\ndef list_all_events(request):\n    events = Event.objects.all().order_by('start_time')\n    return render(request, 'calendar_app/list_all_events.html', {'events': events})\n\ndef help_page(request):\n    return render(request, 'calendar_app/help.html')\n"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }\n"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_with_date'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('events/', views.list_all_events, name='list_all_events'),\n    path('help/', views.help_page, name='help'),\n]"}, {"file": "home.html", "path": "calendar_app/templates/calendar_app/home.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>Home</h1>\n    <p>Current Date: {{ current_date }}</p>\n    <a href=\"{% url 'calendar' %}\">View Full Calendar</a>\n    <a href=\"{% url 'add_event' %}\">Add New Event</a>\n\n    <h2>Upcoming Events</h2>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}</li>\n        {% empty %}\n            <li>No events scheduled for this month.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar_app/calendar.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>Calendar</h1>\n    <p>Year: {{ year }}, Month: {{ month }}</p>\n\n    <form method=\"get\" action=\"{% url 'calendar' %}\">\n        <label for=\"year\">Year:</label>\n        <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\">\n        <label for=\"month\">Month:</label>\n        <select id=\"month\" name=\"month\">\n            {% for i in '123456789AB'|make_list %}\n                {% with month_num=forloop.counter %}\n                    <option value=\"{{ month_num }}\" {% if month_num == month %}selected{% endif %}>{{ month_num }}</option>\n                {% endwith %}\n            {% endfor %}\n        </select>\n\n        <button type=\"submit\">Go</button>\n    </form>\n    <a href=\"{% url 'add_event' %}\">Add New Event</a>\n\n    <h2>Events for {{ month }}/{{ year }}</h2>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}</li>\n        {% empty %}\n            <li>No events scheduled for this month.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "add_event.html", "path": "calendar_app/templates/calendar_app/add_event.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>Add Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n    </form>\n    <a href=\"{% url 'home' %}\">Cancel</a>\n{% endblock %}"}, {"file": "event_details.html", "path": "calendar_app/templates/calendar_app/event_details.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>Event Details</h1>\n    <h2>{{ event.title }}</h2>\n    <p>Description: {{ event.description }}</p>\n    <p>Start Time: {{ event.start_time }}</p>\n    <p>End Time: {{ event.end_time }}</p>\n    <a href=\"{% url 'edit_event' event.id %}\">Edit Event</a>\n    <a href=\"{% url 'delete_event' event.id %}\">Delete Event</a>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "edit_event.html", "path": "calendar_app/templates/calendar_app/edit_event.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>Edit Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save</button>\n    </form>\n    <a href=\"{% url 'event_details' event.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "delete_event.html", "path": "calendar_app/templates/calendar_app/delete_event.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>Delete Event</h1>\n    <p>Are you sure you want to delete \"{{ event.title }}\"?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Delete</button>\n    </form>\n    <a href=\"{% url 'event_details' event.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "search_events.html", "path": "calendar_app/templates/calendar_app/search_events.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>Search Results</h1>\n    <h2>Search results for: {{ query }}</h2>\n\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}</li>\n        {% empty %}\n            <li>No events found matching your search.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "list_all_events.html", "path": "calendar_app/templates/calendar_app/list_all_events.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>All Events</h1>\n\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}</li>\n        {% empty %}\n            <li>No events found.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "help.html", "path": "calendar_app/templates/calendar_app/help.html", "code": "{% extends 'calendar_app/base.html' %}\n\n{% block content %}\n    <h1>Help</h1>\n    <h2>FAQ</h2>\n    <p>Content for Frequently Asked Questions here</p>\n\n    <h2>User Guide</h2>\n    <p>Comprehensive instructions on how to use this calendar application.</p>\n{% endblock %}"}, {"file": "base.html", "path": "calendar_app/templates/calendar_app/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar App</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'calendar' %}\">Calendar</a> |\n        <a href=\"{% url 'list_all_events' %}\">All Events</a> |\n        <a href=\"{% url 'search_events' %}?q=\">Search</a> |\n        <a href=\"{% url 'help' %}\">Help</a>\n    </nav>\n    <hr>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "settings.py", "path": "calendar_project/settings.py", "code": "...\n\nINSTALLED_APPS = [\n    ...\n    'calendar_app',\n]\n\n...\n\nTEMPLATES = [\n    {\n        ...\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        ...\n    },\n]\n...\n"}, {"file": "urls.py", "path": "calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}], "9": [{"file": "urls.py", "path": "chatbot_project/chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('support/', views.support, name='support'),\n    #path('about/', views.about, name='about'), # optional\n]"}, {"file": "views.py", "path": "chatbot_project/chatbot_app/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'chatbot_app/home.html')\n\ndef features(request):\n    return render(request, 'chatbot_app/features.html')\n\ndef pricing(request):\n    if request.method == 'POST':\n        # Process contact sales form\n        pass\n    return render(request, 'chatbot_app/pricing.html')\n\n#def about(request):\n#    return render(request, 'chatbot_app/about.html') # optional\n\ndef support(request):\n    if request.method == 'POST':\n        # Process support form\n        pass\n    return render(request, 'chatbot_app/support.html')\n"}, {"file": "home.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/home.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n    <h1>Product Overview</h1>\n    <p>Display a brief overview of the AI Chatbot's capabilities and benefits.</p>\n{% endblock %}"}, {"file": "features.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/features.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n    <h1>Key Features</h1>\n    <p>Showcase the main features of the AI Chatbot.</p>\n{% endblock %}"}, {"file": "pricing.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/pricing.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n    <h1>Pricing Plans</h1>\n    <p>Display different pricing plans and subscription options.</p>\n\n    <h2>Contact Sales</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <!-- Contact form fields here -->\n        <button type=\"submit\">Contact Sales</button>\n    </form>\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/support.html", "code": "{% extends 'chatbot_app/base.html' %}\n\n{% block content %}\n    <h1>FAQ</h1>\n    <p>Provide answers to frequently asked questions about the AI Chatbot.</p>\n\n    <h2>Support</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <!-- Support form fields here -->\n        <button type=\"submit\">Submit</button>\n    </form>\n{% endblock %}"}, {"file": "base.html", "path": "chatbot_project/chatbot_app/templates/chatbot_app/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'features' %}\">Features</a> |\n        <a href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a href=\"{% url 'support' %}\">Support</a>\n        {# optional: | <a href=\"{% url 'about' %}\">About Us</a> #}\n    </nav>\n    <hr>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}], "10": [{"file": "models.py", "path": "calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    calories = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    calories_burned = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "calorie_tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Activity\nfrom django.http import HttpResponse\n\ndef home(request):\n    if request.user.is_authenticated:\n        return redirect('dashboard')\n    return render(request, 'home.html')\n\ndef signup_view(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n\n\n@login_required\ndef dashboard(request):\n    meals = Meal.objects.filter(user=request.user).order_by('-date')[:5]\n    activities = Activity.objects.filter(user=request.user).order_by('-date')[:5]\n\n    total_calories = sum(meal.calories for meal in Meal.objects.filter(user=request.user)) if Meal.objects.filter(user=request.user).exists() else 0\n\n    return render(request, 'dashboard.html', {'meals': meals, 'activities': activities, 'total_calories':total_calories})\n\n@login_required\ndef meal_log(request):\n   meals = Meal.objects.filter(user=request.user).order_by('-date')\n   return render(request, 'meal_log.html', {'meals':meals})\n\n@login_required\ndef activity_log(request):\n    activities = Activity.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'activity_log.html', {'activities': activities})\n\n\n@login_required\ndef analysis(request):\n    # Placeholder for analysis functionality\n    return render(request, 'analysis.html')\n\n@login_required\ndef settings(request):\n    # Placeholder for settings functionality\n    return render(request, 'settings.html')\n\ndef help_view(request):\n    return render(request, 'help.html')\n\n\n#Meal CRUD operation\nfrom django.shortcuts import get_object_or_404\nfrom django.http import HttpResponseRedirect\nfrom django.urls import reverse\nfrom django.contrib import messages\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        name = request.POST['name']\n        calories = request.POST['calories']\n        if name and calories:\n            try:\n                calories = int(calories)\n                meal = Meal(user=request.user, name=name, calories=calories)\n                meal.save()\n                messages.success(request, 'Meal added successfully!')\n                return HttpResponseRedirect(reverse('dashboard'))\n            except ValueError:\n                messages.error(request, 'Invalid calorie value. Please enter a number.')\n        else:\n            messages.error(request, 'Please fill in all fields.')\n    return render(request, 'add_meal.html')\n\n@login_required\ndef edit_meal(request, meal_id):\n    meal = get_object_or_404(Meal, pk=meal_id, user=request.user)\n    if request.method == 'POST':\n        meal.name = request.POST['name']\n        meal.calories = request.POST['calories']\n        if meal.name and meal.calories:\n            try:\n                meal.calories = int(meal.calories)\n                meal.save()\n                messages.success(request, 'Meal updated successfully!')\n                return HttpResponseRedirect(reverse('meal_log'))\n            except ValueError:\n                messages.error(request, 'Invalid calorie value. Please enter a number.')\n        else:\n            messages.error(request, 'Please fill in all fields.')\n\n    return render(request, 'edit_meal.html', {'meal': meal})\n\n@login_required\ndef delete_meal(request, meal_id):\n    meal = get_object_or_404(Meal, pk=meal_id, user=request.user)\n    meal.delete()\n    messages.success(request, 'Meal deleted successfully!')\n    return HttpResponseRedirect(reverse('meal_log'))\n\n\n# Activity CRUD operation\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        name = request.POST['name']\n        calories_burned = request.POST['calories_burned']\n        if name and calories_burned:\n            try:\n                calories_burned = int(calories_burned)\n                activity = Activity(user=request.user, name=name, calories_burned=calories_burned)\n                activity.save()\n                messages.success(request, 'Activity added successfully!')\n                return HttpResponseRedirect(reverse('dashboard'))\n            except ValueError:\n                messages.error(request, 'Invalid calorie value. Please enter a number.')\n        else:\n            messages.error(request, 'Please fill in all fields.')\n    return render(request, 'add_activity.html')\n\n\n@login_required\ndef edit_activity(request, activity_id):\n    activity = get_object_or_404(Activity, pk=activity_id, user=request.user)\n    if request.method == 'POST':\n        activity.name = request.POST['name']\n        activity.calories_burned = request.POST['calories_burned']\n        if activity.name and activity.calories_burned:\n            try:\n                activity.calories_burned = int(activity.calories_burned)\n                activity.save()\n                messages.success(request, 'Activity updated successfully!')\n                return HttpResponseRedirect(reverse('activity_log'))\n            except ValueError:\n                messages.error(request, 'Invalid calorie value. Please enter a number.')\n        else:\n            messages.error(request, 'Please fill in all fields.')\n\n    return render(request, 'edit_activity.html', {'activity': activity})\n\n\n@login_required\ndef delete_activity(request, activity_id):\n    activity = get_object_or_404(Activity, pk=activity_id, user=request.user)\n    activity.delete()\n    messages.success(request, 'Activity deleted successfully!')\n    return HttpResponseRedirect(reverse('activity_log'))"}, {"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup_view, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal_log/', views.meal_log, name='meal_log'),\n    path('activity_log/', views.activity_log, name='activity_log'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help_view, name='help'),\n    path('add_meal/', views.add_meal, name='add_meal'),\n    path('edit_meal/<int:meal_id>/', views.edit_meal, name='edit_meal'),\n    path('delete_meal/<int:meal_id>/', views.delete_meal, name='delete_meal'),\n    path('add_activity/', views.add_activity, name='add_activity'),\n    path('edit_activity/<int:activity_id>/', views.edit_activity, name='edit_activity'),\n    path('delete_activity/<int:activity_id>/', views.delete_activity, name='delete_activity'),\n]"}, {"file": "admin.py", "path": "calorie_tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Meal, Activity\n\nadmin.site.register(Meal)\nadmin.site.register(Activity)"}, {"file": "settings.py", "path": "calorie_tracker_project/settings.py", "code": "# Add 'calorie_tracker' to INSTALLED_APPS\n# Configure templates directory\n# Configure database settings (e.g., SQLite or PostgreSQL)\n# Configure static files directory\n# Add these to INSTALLED_APPS\n# INSTALLED_APPS = [\n#     'django.contrib.admin',\n#     'django.contrib.auth',\n#     'django.contrib.contenttypes',\n#     'django.contrib.sessions',\n#     'django.contrib.messages',\n#     'django.contrib.staticfiles',\n#     'calorie_tracker',\n# ]\n\n#Add this to the end of file\n# STATIC_URL = '/static/'\n# STATICFILES_DIRS = [\n#     BASE_DIR / 'static'\n# ]\n\n# LOGIN_REDIRECT_URL = 'dashboard'\n# LOGOUT_REDIRECT_URL = 'home'\n"}, {"file": "urls.py", "path": "calorie_tracker_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calorie_tracker.urls')),\n]"}, {"file": "home.html", "path": "calorie_tracker/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome to Calorie Tracker</h1>\n    <p>Track your daily calorie intake and expenditure.</p>\n    {% if user.is_authenticated %}\n        <p>Welcome, {{ user.username }}!</p>\n        <a href=\"{% url 'dashboard' %}\">Go to Dashboard</a>\n    {% else %}\n        <a href=\"{% url 'signup' %}\">Sign Up</a>\n        <a href=\"{% url 'login' %}\">Log In</a>\n    {% endif %}\n{% endblock %}"}, {"file": "signup.html", "path": "calorie_tracker/templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Sign Up</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Sign Up</button>\n    </form>\n{% endblock %}"}, {"file": "login.html", "path": "calorie_tracker/templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Log In</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Log In</button>\n    </form>\n{% endblock %}"}, {"file": "dashboard.html", "path": "calorie_tracker/templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Dashboard</h2>\n    <p>Welcome, {{ user.username }}!</p>\n\n    <h3>Daily Calorie Intake: {{ total_calories }}</h3>\n\n    <h3>Recent Meals</h3>\n    <ul>\n        {% for meal in meals %}\n            <li>{{ meal.name }} - {{ meal.calories }} calories ({{ meal.date }})</li>\n        {% empty %}\n            <li>No meals logged yet.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'meal_log' %}\">View All Meals</a> | <a href=\"{% url 'add_meal' %}\">Add Meal</a>\n\n    <h3>Recent Activities</h3>\n    <ul>\n        {% for activity in activities %}\n            <li>{{ activity.name }} - {{ activity.calories_burned }} calories burned ({{ activity.date }})</li>\n        {% empty %}\n            <li>No activities logged yet.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'activity_log' %}\">View All Activities</a> | <a href=\"{% url 'add_activity' %}\">Add Activity</a>\n\n{% endblock %}"}, {"file": "meal_log.html", "path": "calorie_tracker/templates/meal_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Meal Log</h2>\n\n    <ul>\n        {% for meal in meals %}\n            <li>{{ meal.name }} - {{ meal.calories }} calories ({{ meal.date }})  <a href=\"{% url 'edit_meal' meal.id %}\">Edit</a> | <a href=\"{% url 'delete_meal' meal.id %}\">Delete</a></li>\n        {% empty %}\n            <li>No meals logged yet.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_meal' %}\">Add Meal</a>\n{% endblock %}"}, {"file": "activity_log.html", "path": "calorie_tracker/templates/activity_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Activity Log</h2>\n\n    <ul>\n        {% for activity in activities %}\n            <li>{{ activity.name }} - {{ activity.calories_burned }} calories burned ({{ activity.date }}) <a href=\"{% url 'edit_activity' activity.id %}\">Edit</a> | <a href=\"{% url 'delete_activity' activity.id %}\">Delete</a></li>\n        {% empty %}\n            <li>No activities logged yet.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_activity' %}\">Add Activity</a>\n{% endblock %}"}, {"file": "analysis.html", "path": "calorie_tracker/templates/analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Analysis</h2>\n    <p>Weekly Calorie Chart will be displayed here.</p>\n{% endblock %}"}, {"file": "settings.html", "path": "calorie_tracker/templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Settings</h2>\n    <p>Profile, Preferences, Notifications, Privacy Settings will be managed here.</p>\n{% endblock %}"}, {"file": "help.html", "path": "calorie_tracker/templates/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Help</h2>\n    <p>FAQ, Contact Support, Tutorials will be available here.</p>\n{% endblock %}"}, {"file": "base.html", "path": "calorie_tracker/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calorie Tracker</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a>\n        {% if user.is_authenticated %}\n            <a href=\"{% url 'dashboard' %}\">Dashboard</a>\n            <a href=\"{% url 'meal_log' %}\">Meal Log</a>\n            <a href=\"{% url 'activity_log' %}\">Activity Log</a>\n            <a href=\"{% url 'analysis' %}\">Analysis</a>\n            <a href=\"{% url 'settings' %}\">Settings</a>\n            <a href=\"{% url 'help' %}\">Help</a>\n            <a href=\"{% url 'logout' %}\">Logout</a>\n        {% else %}\n            <a href=\"{% url 'login' %}\">Login</a>\n            <a href=\"{% url 'signup' %}\">Signup</a>\n        {% endif %}\n    </nav>\n    {% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n    {% endif %}\n    <div class=\"content\">\n        {% block content %}\n        {% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "add_meal.html", "path": "calorie_tracker/templates/add_meal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Add Meal</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Meal Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n\n        <label for=\"calories\">Calories:</label><br>\n        <input type=\"number\" id=\"calories\" name=\"calories\"><br><br>\n\n        <button type=\"submit\">Add Meal</button>\n    </form>\n{% endblock %}"}, {"file": "edit_meal.html", "path": "calorie_tracker/templates/edit_meal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Edit Meal</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Meal Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\" value=\"{{ meal.name }}\"><br><br>\n\n        <label for=\"calories\">Calories:</label><br>\n        <input type=\"number\" id=\"calories\" name=\"calories\" value=\"{{ meal.calories }}\"><br><br>\n\n        <button type=\"submit\">Update Meal</button>\n    </form>\n{% endblock %}"}, {"file": "add_activity.html", "path": "calorie_tracker/templates/add_activity.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Add Activity</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Activity Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n\n        <label for=\"calories_burned\">Calories Burned:</label><br>\n        <input type=\"number\" id=\"calories_burned\" name=\"calories_burned\"><br><br>\n\n        <button type=\"submit\">Add Activity</button>\n    </form>\n{% endblock %}"}, {"file": "edit_activity.html", "path": "calorie_tracker/templates/edit_activity.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Edit Activity</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Activity Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\" value=\"{{ activity.name }}\"><br><br>\n\n        <label for=\"calories_burned\">Calories Burned:</label><br>\n        <input type=\"number\" id=\"calories_burned\" name=\"calories_burned\" value=\"{{ activity.calories_burned }}\"><br><br>\n\n        <button type=\"submit\">Update Activity</button>\n    </form>\n{% endblock %}"}], "11": {"django_framework": {"project_name": "review_tool", "apps": [{"app_name": "review_app", "models": [{"model_name": "TestCode", "fields": [{"field_name": "page", "field_type": "CharField", "max_length": 255}, {"field_name": "function_name", "field_type": "CharField", "max_length": 255}, {"field_name": "description", "field_type": "TextField"}, {"field_name": "required", "field_type": "BooleanField"}, {"field_name": "file_name", "field_type": "CharField", "max_length": 255, "blank": true, "null": true}, {"field_name": "file_path", "field_type": "CharField", "max_length": 255, "blank": true, "null": true}, {"field_name": "code", "field_type": "TextField", "blank": true, "null": true}, {"field_name": "status", "field_type": "CharField", "max_length": 20, "choices": ["Pass", "Fail", "Select"], "default": "Select"}, {"field_name": "review_notes", "field_type": "TextField", "blank": true, "null": true}]}], "views": [{"view_name": "home_view", "template": "home.html", "context_data": ["test_codes", "welcome_message"]}, {"view_name": "about_view", "template": "about.html", "context_data": []}, {"view_name": "import_json_view", "template": "import_json.html", "context_data": []}], "forms": [{"form_name": "TestCodeReviewForm", "fields": ["status", "review_notes"]}, {"form_name": "ImportJSONForm", "fields": ["json_file"]}], "templates": ["home.html", "about.html", "import_json.html"], "urls": [{"path": "/", "view": "home_view", "name": "home"}, {"path": "/about/", "view": "about_view", "name": "about"}, {"path": "/import/", "view": "import_json_view", "name": "import_json"}]}], "settings": {"DEBUG": "True", "ALLOWED_HOSTS": "['*']", "INSTALLED_APPS": "['review_app']", "MIDDLEWARE": "[]", "ROOT_URLCONF": "'review_tool.urls'", "TEMPLATES": "[{'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [], 'APP_DIRS': True, 'OPTIONS': {'context_processors': ['django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages']}}]", "DATABASES": "{'default': {'ENGINE': 'django.db.backends.sqlite3', 'NAME': 'BASE_DIR / 'db.sqlite3''}}"}}}, "12": [{"file": "models.py", "path": "expense_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=255, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    description = models.TextField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    submission_date = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=255, default='Pending', choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')])\n    rejection_reason = models.TextField(blank=True, null=True)\n    # Add other relevant fields like receipt, etc.\n\n    def __str__(self):\n        return f'Claim {self.id} - {self.claim_type} - {self.status}'\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=255, unique=True)\n    budget_limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.category} Budget: {self.budget_limit}'\n\n# Consider adding a model for Expense Category to link claims and budgets\n"}, {"file": "views.py", "path": "expense_tracker/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Claim, Budget\nfrom django.contrib import messages\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef signup_view(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('employee_portal') # Redirect to employee portal after signup\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('employee_portal')  # Redirect to employee portal after login\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n\n@login_required\ndef employee_portal(request):\n    return render(request, 'employee_portal.html')\n\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        claim_type = request.POST.get('claim_type')\n        description = request.POST.get('description')\n        amount = request.POST.get('amount')\n\n        claim = Claim(employee=request.user, claim_type=claim_type, description=description, amount=amount)\n        claim.save()\n        messages.success(request, 'Claim submitted successfully!')\n        return redirect('employee_portal')\n    return render(request, 'submit_claim.html')\n\n\n@login_required\ndef view_claim_status(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'view_claim_status.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user, status='Pending')\n\n    if request.method == 'POST':\n        claim.claim_type = request.POST.get('claim_type')\n        claim.description = request.POST.get('description')\n        claim.amount = request.POST.get('amount')\n        claim.save()\n        messages.success(request, 'Claim updated successfully!')\n        return redirect('view_claim_status')\n\n    return render(request, 'edit_claim.html', {'claim': claim})\n\n\n@login_required\ndef admin_portal(request):\n    claims = Claim.objects.all()\n    return render(request, 'admin_portal.html', {'claims': claims})\n\n@login_required\ndef approve_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('admin_portal')\n\n@login_required\ndef reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    if request.method == 'POST':\n        rejection_reason = request.POST.get('rejection_reason')\n        claim.status = 'Rejected'\n        claim.rejection_reason = rejection_reason\n        claim.save()\n        return redirect('admin_portal')\n    return render(request, 'reject_claim.html', {'claim': claim})\n\n@login_required\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    return render(request, 'view_claim_details.html', {'claim': claim})\n\n@login_required\ndef search_claims(request):\n    if request.method == 'GET':\n        query = request.GET.get('q')\n        claims = Claim.objects.filter(description__icontains=query)\n        return render(request, 'admin_portal.html', {'claims': claims})\n    return redirect('admin_portal')\n\n@login_required\ndef budget_control(request):\n  budgets = Budget.objects.all()\n  return render(request, 'budget_control.html', {'budgets': budgets})\n\n@login_required\ndef analyze_expense_balances(request):\n    # Implement logic to analyze balances across categories\n    return HttpResponse(\"Analyze Expense Balances - Under Construction\")\n\n@login_required\ndef generate_reports(request):\n    # Implement report generation logic\n    return HttpResponse(\"Generate Reports - Under Construction\")\n\n@login_required\ndef set_budget_limits(request):\n    if request.method == 'POST':\n        category = request.POST.get('category')\n        budget_limit = request.POST.get('budget_limit')\n        try:\n            budget = Budget.objects.get(category=category)\n            budget.budget_limit = budget_limit\n        except Budget.DoesNotExist:\n            budget = Budget(category=category, budget_limit=budget_limit)\n\n        budget.save()\n        return redirect('budget_control')\n\n    return redirect('budget_control')\n\n@login_required\ndef send_budget_alerts(request):\n    # Implement budget alert logic\n    return HttpResponse(\"Send Budget Alerts - Under Construction\")"}, {"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup_view, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('employee_portal/', views.employee_portal, name='employee_portal'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('view_claim_status/', views.view_claim_status, name='view_claim_status'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('admin_portal/', views.admin_portal, name='admin_portal'),\n    path('approve_claim/<int:claim_id>/', views.approve_claim, name='approve_claim'),\n    path('reject_claim/<int:claim_id>/', views.reject_claim, name='reject_claim'),\n    path('view_claim_details/<int:claim_id>/', views.view_claim_details, name='view_claim_details'),\n    path('search_claims/', views.search_claims, name='search_claims'),\n    path('budget_control/', views.budget_control, name='budget_control'),\n    path('analyze_expense_balances/', views.analyze_expense_balances, name='analyze_expense_balances'),\n    path('generate_reports/', views.generate_reports, name='generate_reports'),\n    path('set_budget_limits/', views.set_budget_limits, name='set_budget_limits'),\n    path('send_budget_alerts/', views.send_budget_alerts, name='send_budget_alerts'),\n]"}, {"file": "settings.py", "path": "expense_tracker_project/settings.py", "code": "import os\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'expense_tracker', # Add your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_tracker_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')], #Add templates directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'expense_tracker_project.wsgi.application'\n\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Add static directory\n\n\n# Default primary key field type\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'employee_portal'\nLOGOUT_REDIRECT_URL = 'home'\n"}, {"file": "admin.py", "path": "expense_tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim, Budget\n\nadmin.site.register(Claim)\nadmin.site.register(Budget)\n"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Expense Tracker</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            padding-top: 56px; /* Adjusted for fixed navbar */\n        }\n        .navbar {\n            background-color: #343a40 !important;\n        }\n        .navbar-brand,\n        .nav-link {\n            color: white !important;\n        }\n    </style>\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-dark fixed-top\">\n        <a class=\"navbar-brand\" href=\"{% url 'home' %}\">Expense Tracker</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav ml-auto\">\n                {% if user.is_authenticated %}\n                    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a></li>\n                {% else %}\n                    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'login' %}\">Login</a></li>\n                    <li class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'signup' %}\">Signup</a></li>\n                {% endif %}\n            </ul>\n        </div>\n    </nav>\n\n    <div class=\"container mt-4\">\n        {% if messages %}\n            {% for message in messages %}\n                <div class=\"alert alert-{{ message.tags }} alert-dismissible fade show\" role=\"alert\">\n                    {{ message }}\n                    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n            {% endfor %}\n        {% endif %}\n\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome to the Expense Tracker!</h1>\n    <p>Please log in or sign up to access the employee portal.</p>\n{% endblock %}"}, {"file": "login.html", "path": "templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Login</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Login</button>\n    </form>\n{% endblock %}"}, {"file": "signup.html", "path": "templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Signup</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Signup</button>\n    </form>\n{% endblock %}"}, {"file": "employee_portal.html", "path": "templates/employee_portal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Employee Portal</h2>\n    <p>Welcome, {{ user.username }}!</p>\n    <a href=\"{% url 'submit_claim' %}\">Submit Claim</a><br>\n    <a href=\"{% url 'view_claim_status' %}\">View Claim Status</a>\n{% endblock %}"}, {"file": "submit_claim.html", "path": "templates/submit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Submit Claim</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"claim_type\">Claim Type:</label>\n        <select name=\"claim_type\" id=\"claim_type\">\n            <option value=\"Travel\">Travel</option>\n            <option value=\"Labor\">Labor</option>\n            <option value=\"Management\">Management</option>\n            <option value=\"Equipment\">Equipment</option>\n        </select><br><br>\n\n        <label for=\"description\">Description:</label><br>\n        <textarea name=\"description\" id=\"description\" rows=\"4\" cols=\"50\"></textarea><br><br>\n\n        <label for=\"amount\">Amount:</label>\n        <input type=\"number\" name=\"amount\" id=\"amount\" step=\"0.01\"><br><br>\n\n        <button type=\"submit\">Submit</button>\n    </form>\n{% endblock %}"}, {"file": "view_claim_status.html", "path": "templates/view_claim_status.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Claim Status</h2>\n    <ul>\n        {% for claim in claims %}\n            <li>Claim ID: {{ claim.id }}, Type: {{ claim.claim_type }}, Status: {{ claim.status }} <a href=\"{% url 'edit_claim' claim.id %}\">Edit</a></li>\n        {% empty %}\n            <li>No claims submitted yet.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "edit_claim.html", "path": "templates/edit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Edit Claim</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"claim_type\">Claim Type:</label>\n        <select name=\"claim_type\" id=\"claim_type\">\n            <option value=\"Travel\" {% if claim.claim_type == 'Travel' %}selected{% endif %}>Travel</option>\n            <option value=\"Labor\" {% if claim.claim_type == 'Labor' %}selected{% endif %}>Labor</option>\n            <option value=\"Management\" {% if claim.claim_type == 'Management' %}selected{% endif %}>Management</option>\n            <option value=\"Equipment\" {% if claim.claim_type == 'Equipment' %}selected{% endif %}>Equipment</option>\n        </select><br><br>\n\n        <label for=\"description\">Description:</label><br>\n        <textarea name=\"description\" id=\"description\" rows=\"4\" cols=\"50\">{{ claim.description }}</textarea><br><br>\n\n        <label for=\"amount\">Amount:</label>\n        <input type=\"number\" name=\"amount\" id=\"amount\" step=\"0.01\" value=\"{{ claim.amount }}\"><br><br>\n\n        <button type=\"submit\">Update</button>\n    </form>\n{% endblock %}"}, {"file": "admin_portal.html", "path": "templates/admin_portal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Admin Portal</h2>\n    <form action=\"{% url 'search_claims' %}\" method=\"get\">\n        <input type=\"text\" name=\"q\" placeholder=\"Search Claims\">\n        <button type=\"submit\">Search</button>\n    </form>\n    <ul>\n        {% for claim in claims %}\n            <li>Claim ID: {{ claim.id }}, Employee: {{ claim.employee.username }}, Type: {{ claim.claim_type }}, Status: {{ claim.status }}\n                <a href=\"{% url 'approve_claim' claim.id %}\">Approve</a>\n                <a href=\"{% url 'reject_claim' claim.id %}\">Reject</a>\n                <a href=\"{% url 'view_claim_details' claim.id %}\">View Details</a>\n            </li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "reject_claim.html", "path": "templates/reject_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Reject Claim</h2>\n    <p>Claim ID: {{ claim.id }}, Type: {{ claim.claim_type }}</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"rejection_reason\">Rejection Reason:</label><br>\n        <textarea name=\"rejection_reason\" id=\"rejection_reason\" rows=\"4\" cols=\"50\"></textarea><br><br>\n        <button type=\"submit\">Reject Claim</button>\n    </form>\n{% endblock %}"}, {"file": "view_claim_details.html", "path": "templates/view_claim_details.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Claim Details</h2>\n    <p>Claim ID: {{ claim.id }}</p>\n    <p>Employee: {{ claim.employee.username }}</p>\n    <p>Type: {{ claim.claim_type }}</p>\n    <p>Description: {{ claim.description }}</p>\n    <p>Amount: {{ claim.amount }}</p>\n    <p>Submission Date: {{ claim.submission_date }}</p>\n    <p>Status: {{ claim.status }}</p>\n    {% if claim.rejection_reason %}\n        <p>Rejection Reason: {{ claim.rejection_reason }}</p>\n    {% endif %}\n{% endblock %}"}, {"file": "budget_control.html", "path": "templates/budget_control.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2>Budget Control</h2>\n    <a href=\"{% url 'analyze_expense_balances' %}\">Analyze Expense Balances</a><br>\n    <a href=\"{% url 'generate_reports' %}\">Generate Reports</a><br>\n    <a href=\"{% url 'send_budget_alerts' %}\">Send Budget Alerts</a>\n\n    <h3>Set Budget Limits</h3>\n    <form method=\"post\" action=\"{% url 'set_budget_limits' %}\">\n        {% csrf_token %}\n        <label for=\"category\">Category:</label>\n        <input type=\"text\" name=\"category\" id=\"category\"><br><br>\n\n        <label for=\"budget_limit\">Budget Limit:</label>\n        <input type=\"number\" name=\"budget_limit\" id=\"budget_limit\" step=\"0.01\"><br><br>\n\n        <button type=\"submit\">Set Limit</button>\n    </form>\n\n    <h3>Current Budgets</h3>\n    <ul>\n        {% for budget in budgets %}\n            <li>{{ budget.category }}: {{ budget.budget_limit }}</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "wsgi.py", "path": "expense_tracker_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'expense_tracker_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "expense_tracker_project/urls.py", "path": "expense_tracker_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('expense_tracker.urls'))\n]"}], "13": [{"file": "models.py", "path": "app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255, null=True, blank=True)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer} - {self.product} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer} - {self.product}'"}, {"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\n# Home Page\ndef home(request):\n    return render(request, 'home.html')\n\n# Customer Management\ndef customer_list(request):\n    customers = Customer.objects.all()\n    return render(request, 'customer_list.html', {'customers': customers})\n\ndef customer_detail(request, pk):\n    customer = get_object_or_404(Customer, pk=pk)\n    return render(request, 'customer_detail.html', {'customer': customer})\n\ndef customer_create(request):\n    return HttpResponse(\"Implement Customer Creation View\")\n\ndef customer_update(request, pk):\n    return HttpResponse(\"Implement Customer Update View\")\n\ndef customer_delete(request, pk):\n    return HttpResponse(\"Implement Customer Delete View\")\n\n# Product Management\ndef product_list(request):\n    products = Product.objects.all()\n    return render(request, 'product_list.html', {'products': products})\n\ndef product_detail(request, pk):\n    product = get_object_or_404(Product, pk=pk)\n    return render(request, 'product_detail.html', {'product': product})\n\ndef product_create(request):\n    return HttpResponse(\"Implement Product Creation View\")\n\ndef product_update(request, pk):\n    return HttpResponse(\"Implement Product Update View\")\n\ndef product_delete(request, pk):\n    return HttpResponse(\"Implement Product Delete View\")\n\n# Purchase Records\ndef purchase_list(request):\n    purchases = PurchaseRecord.objects.all()\n    return render(request, 'purchase_list.html', {'purchases': purchases})\n\ndef purchase_detail(request, pk):\n    purchase = get_object_or_404(PurchaseRecord, pk=pk)\n    return render(request, 'purchase_detail.html', {'purchase': purchase})\n\ndef purchase_create(request):\n    return HttpResponse(\"Implement Purchase Creation View\")\n\ndef purchase_update(request, pk):\n    return HttpResponse(\"Implement Purchase Update View\")\n\ndef purchase_delete(request, pk):\n    return HttpResponse(\"Implement Purchase Delete View\")\n\n# Preferred Products Management\ndef preferred_product_list(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    preferred_products = PreferredProduct.objects.filter(customer=customer)\n    return render(request, 'preferred_product_list.html', {'preferred_products': preferred_products, 'customer': customer})\n\n\ndef preferred_product_create(request, customer_id):\n    return HttpResponse(\"Implement Preferred Product Creation View\")\n\ndef preferred_product_update(request, pk):\n    return HttpResponse(\"Implement Preferred Product Update View\")\n\ndef preferred_product_delete(request, pk):\n    return HttpResponse(\"Implement Preferred Product Delete View\")\n\n# Sales Analysis\ndef sales_report(request):\n    return HttpResponse(\"Implement Sales Report View\")\n\ndef sales_trends(request):\n    return HttpResponse(\"Implement Sales Trends Analysis View\")\n\ndef product_performance(request):\n    return HttpResponse(\"Implement Product Performance Analysis View\")"}, {"file": "urls.py", "path": "app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n\n    # Customer Management\n    path('customers/', views.customer_list, name='customer_list'),\n    path('customers/<int:pk>/', views.customer_detail, name='customer_detail'),\n    path('customers/create/', views.customer_create, name='customer_create'),\n    path('customers/<int:pk>/update/', views.customer_update, name='customer_update'),\n    path('customers/<int:pk>/delete/', views.customer_delete, name='customer_delete'),\n\n    # Product Management\n    path('products/', views.product_list, name='product_list'),\n    path('products/<int:pk>/', views.product_detail, name='product_detail'),\n    path('products/create/', views.product_create, name='product_create'),\n    path('products/<int:pk>/update/', views.product_update, name='product_update'),\n    path('products/<int:pk>/delete/', views.product_delete, name='product_delete'),\n\n    # Purchase Records\n    path('purchases/', views.purchase_list, name='purchase_list'),\n    path('purchases/<int:pk>/', views.purchase_detail, name='purchase_detail'),\n    path('purchases/create/', views.purchase_create, name='purchase_create'),\n    path('purchases/<int:pk>/update/', views.purchase_update, name='purchase_update'),\n    path('purchases/<int:pk>/delete/', views.purchase_delete, name='purchase_delete'),\n\n    # Preferred Products Management\n    path('customers/<int:customer_id>/preferred_products/', views.preferred_product_list, name='preferred_product_list'),\n    path('customers/<int:customer_id>/preferred_products/create/', views.preferred_product_create, name='preferred_product_create'),\n    path('preferred_products/<int:pk>/update/', views.preferred_product_update, name='preferred_product_update'),\n    path('preferred_products/<int:pk>/delete/', views.preferred_product_delete, name='preferred_product_delete'),\n\n    # Sales Analysis\n    path('sales_report/', views.sales_report, name='sales_report'),\n    path('sales_trends/', views.sales_trends, name='sales_trends'),\n    path('product_performance/', views.product_performance, name='product_performance'),\n]"}, {"file": "admin.py", "path": "app/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the System!</h1>\n    <p>Overview of system features...</p>\n</body>\n</html>"}, {"file": "customer_list.html", "path": "templates/customer_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Customers</title>\n</head>\n<body>\n    <h1>Customers</h1>\n    <ul>\n        {% for customer in customers %}\n            <li><a href=\"{% url 'customer_detail' customer.id %}\">{{ customer.name }}</a></li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "customer_detail.html", "path": "templates/customer_detail.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ customer.name }}</title>\n</head>\n<body>\n    <h1>{{ customer.name }}</h1>\n    <p>Birthday: {{ customer.birthday }}</p>\n    <p>Age: {{ customer.age }}</p>\n    <p>Sex: {{ customer.sex }}</p>\n    <p>Company: {{ customer.company }}</p>\n    <p>Phone Number: {{ customer.phone_number }}</p>\n</body>\n</html>"}, {"file": "product_list.html", "path": "templates/product_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Products</title>\n</head>\n<body>\n    <h1>Products</h1>\n    <ul>\n        {% for product in products %}\n            <li><a href=\"{% url 'product_detail' product.id %}\">{{ product.name }}</a></li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "product_detail.html", "path": "templates/product_detail.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ product.name }}</title>\n</head>\n<body>\n    <h1>{{ product.name }}</h1>\n    <p>Category: {{ product.category }}</p>\n    <p>Recommended Price: {{ product.recommended_price }}</p>\n</body>\n</html>"}, {"file": "purchase_list.html", "path": "templates/purchase_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Records</title>\n</head>\n<body>\n    <h1>Purchase Records</h1>\n    <ul>\n        {% for purchase in purchases %}\n            <li><a href=\"{% url 'purchase_detail' purchase.id %}\">{{ purchase.customer }} - {{ purchase.product }} - {{ purchase.datetime }}</a></li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "purchase_detail.html", "path": "templates/purchase_detail.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Purchase Record Detail</title>\n</head>\n<body>\n    <h1>Purchase Record Detail</h1>\n    <p>Customer: {{ purchase.customer }}</p>\n    <p>Product: {{ purchase.product }}</p>\n    <p>Datetime: {{ purchase.datetime }}</p>\n    <p>Quantity: {{ purchase.quantity }}</p>\n    <p>Amount: {{ purchase.amount }}</p>\n</body>\n</html>"}, {"file": "preferred_product_list.html", "path": "templates/preferred_product_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Preferred Products</title>\n</head>\n<body>\n    <h1>Preferred Products for {{ customer.name }}</h1>\n    <ul>\n        {% for product in preferred_products %}\n            <li>{{ product.product.name }}</li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}], "14": [{"file": "urls.py", "path": "helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world, name='hello_world'),\n]"}, {"file": "views.py", "path": "helloworld/views.py", "code": "from django.shortcuts import render\n\ndef hello_world(request):\n    return render(request, 'helloworld/hello_world.html', {})\n"}, {"file": "models.py", "path": "helloworld/models.py", "code": "from django.db import models\n\n# No models required for this simple example\n"}, {"file": "templates/hello_world.html", "path": "helloworld/templates/helloworld/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            font-family: sans-serif;\n        }\n    </style>\n</head>\n<body>\n    <h1>Hello World</h1>\n</body>\n</html>"}, {"file": "apps.py", "path": "helloworld/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloworldConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'helloworld'\n"}, {"file": "__init__.py", "path": "helloworld/__init__.py", "code": "default_app_config = 'helloworld.apps.HelloworldConfig'"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome!</h1>\n    <a href=\"{% url 'helloworld' %}\"><button>Go to HelloWorld</button></a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1>HelloWorld</h1>\n</body>\n</html>"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# Add 'myapp' to INSTALLED_APPS\nINSTALLED_APPS = [\n    ...\n    'myapp',\n]\n\n# Configure TEMPLATES to include 'myapp/templates'\nTEMPLATES = [\n    {\n        ...\n        'DIRS': [BASE_DIR / 'myapp' / 'templates'],\n        ...\n    },\n]\n"}], "16": [{"file": "input_file_validation.py", "path": "modules/input_file_validation.py", "code": "def check_file_existence(filepath):\n    pass\n\ndef validate_headers(filepath, expected_headers):\n    pass\n\ndef validate_time_column(filepath, allowed_times):\n    pass\n\ndef validate_data_integrity(filepath):\n    pass\n\ndef validate_null_value(filepath):\n    pass\n\ndef validate_input_file(filepath):\n    check_file_existence(filepath)\n    validate_headers(filepath, ['#', 'Name', 'Weekday', 'Time'])\n    validate_time_column(filepath, ['First period', 'Second period', 'Third period', 'Fourth period'])\n    validate_data_integrity(filepath)\n    validate_null_value(filepath)\n"}, {"file": "data_transformation.py", "path": "modules/data_transformation.py", "code": "def transform_to_two_dimension_table(data):\n    pass\n\ndef data_mapping(data, table):\n    pass\n\ndef transform_data(data):\n    table = transform_to_two_dimension_table(data)\n    data_mapping(data, table)\n    return table\n"}, {"file": "output_file_creation.py", "path": "modules/output_file_creation.py", "code": "def create_output_excel_file(filename):\n    pass\n\ndef save_table_to_excel(table, filename):\n    pass\n\ndef create_output_file(table, filename):\n    create_output_excel_file(filename)\n    save_table_to_excel(table, filename)\n"}, {"file": "main.py", "path": "main.py", "code": "import modules.input_file_validation as input_validation\nimport modules.data_transformation as data_transformation\nimport modules.output_file_creation as output_file_creation\n\ndef main():\n    input_file = 'Spring Semester Subjects.xlsx'\n    output_file = 'Transformed_Subjects.xlsx'\n\n    try:\n        input_validation.validate_input_file(input_file)\n        # Load data from input file (implementation needed)\n        data = [] # Placeholder - should be loaded from input_file\n        transformed_table = data_transformation.transform_data(data)\n        output_file_creation.create_output_file(transformed_table, output_file)\n        print(f\"Successfully transformed data and saved to {output_file}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n"}], "17": [{"file": "data_preparation.py", "path": "DataPreparation/data_preparation.py", "code": "import pandas as pd\n\ndef read_dataset(filename):\n    # Load the dataset\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found.\")\n        return None\n\ndef lag_dependent_variable(df, column_name):\n    # Lag the dependent variable\n    df['lagged_result'] = df[column_name].shift(1)\n    df = df.dropna()\n    return df\n\ndef prepare_independent_variables(df, dependent_variable):\n    # Prepare independent variables and check for null values\n    X = df.drop(dependent_variable, axis=1)\n    if X.isnull().any().any():\n        print(\"Error: Null values found in independent variables. Please handle them.\")\n        return None\n    if X.empty:\n        print(\"Error: Independent variable dataframe is empty.\")\n        return None\n    return X, df[dependent_variable]\n\nif __name__ == '__main__':\n    # Example usage\n    filename = 'Gamedata.xlsx'\n    df = read_dataset(filename)\n    if df is not None:\n        df = lag_dependent_variable(df, 'result')\n        if df is not None:\n            X, y = prepare_independent_variables(df.drop(columns=['lagged_result']), 'result')\n            if X is not None:\n                print(\"Data preparation complete.\")\n"}, {"file": "model_creation.py", "path": "ModelCreation/model_creation.py", "code": "import pandas as pd\nimport statsmodels.api as sm\n\ndef create_logistic_model(X, y):\n    # Create a logistic regression model\n    try:\n        X = sm.add_constant(X) # Add a constant for the intercept\n        model = sm.Logit(y, X)\n        results = model.fit()\n        return results\n    except Exception as e:\n        print(f\"Error creating the logistic model: {e}\")\n        return None\n\ndef generate_model_summary(model_results):\n    # Generate a model summary\n    if model_results:\n        return model_results.summary()\n    else:\n        return None\n\nif __name__ == '__main__':\n    # Example usage (replace with actual data)\n    data = {'feature1': [1, 2, 3, 4, 5], 'feature2': [6, 7, 8, 9, 10], 'result': [0, 1, 0, 1, 0]}\n    df = pd.DataFrame(data)\n    X = df[['feature1', 'feature2']]\n    y = df['result']\n\n    model_results = create_logistic_model(X, y)\n    if model_results:\n        summary = generate_model_summary(model_results)\n        print(summary)\n"}, {"file": "output.py", "path": "Output/output.py", "code": "import pandas as pd\n\ndef write_summary(summary, filename):\n    # Output the model summary to an Excel file\n    if summary:\n        try:\n            with pd.ExcelWriter(filename) as writer:\n                summary_df = pd.read_html(summary.tables[1].as_html(), header=0, index_col=0)[0] # Extract results table\n                summary_df.to_excel(writer, sheet_name='Model Summary')\n            print(f\"Model summary written to '{filename}'.\")\n        except Exception as e:\n            print(f\"Error writing to Excel file: {e}\")\n    else:\n        print(\"No summary to write.\")\n\nif __name__ == '__main__':\n    # Example usage (replace with actual summary)\n    example_summary = '''\n    <caption>Logit Regression Results</caption>\n    <tr>\n    <th>Dep. Variable:</th> <td>result</td> <th>  No. Observations:  </th>  <td>     5</td>\n    </tr>\n    <tr>\n    <th>Model:</th>         <td>Logit</td>  <th>  Df Residuals:      </th>  <td>     2</td>\n    </tr>\n    <tr>\n    <th>Method:</th>        <td>MLE</td>    <th>  Df Model:          </th>  <td>     2</td>\n    </tr>\n    <tr>\n    <th>Date:</th>          <td>Mon, 27 Nov 2023</td> <th>  Pseudo R-squ.:     </th> <td>0.000</td>\n    </tr>\n    <tr>\n    <th>Time:</th>          <td>18:42:28</td> <th>  Log-Likelihood:    </th> <td> -3.4660</td>\n    </tr>\n    <tr>\n    <th>converged:</th>     <td>True</td>   <th>  LL-Null:           </th> <td> -3.4660</td>\n    </tr>\n    <tr>\n    <th>Covariance Type:</th> <td>nonrobust</td><th>  LLR p-value:        </th> <td> 1.000</td>\n    </tr>\n    </table>\n    <table>\n    <tr>\n    <td></td>          <th>coef</th>     <th>std err</th>   <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  </tr>\n    <tr>\n    <th>const</th>    <td>   -0.0002</td> <td>  248.799</td> <td>-1.007e-06</td> <td> 1.000</td> <td> -487.791</td> <td>  487.791</td>\n    </tr>\n    <tr>\n    <th>feature1</th> <td>   -0.0001</td> <td>  106.593</td> <td>-9.079e-07</td> <td> 1.000</td> <td> -208.916</td> <td>  208.916</td>\n    </tr>\n    <tr>\n    <th>feature2</th> <td>    0.0001</td> <td>   44.733</td> <td> 2.907e-06</td> <td> 1.000</td> <td>  -87.676</td> <td>   87.676</td>\n    </tr>\n    </table>\n    '''\n    filename = 'Logistic.xlsx'\n    write_summary(example_summary, filename)\n"}, {"file": "main.py", "path": "main.py", "code": "from DataPreparation import data_preparation\nfrom ModelCreation import model_creation\nfrom Output import output\n\n# Main script to orchestrate the process\n\ndef main():\n    # 1. Data Preparation\n    filename = 'Gamedata.xlsx'\n    df = data_preparation.read_dataset(filename)\n\n    if df is not None:\n        df = data_preparation.lag_dependent_variable(df, 'result')\n        if df is not None:\n            X, y = data_preparation.prepare_independent_variables(df.drop(columns=['lagged_result']), 'result')\n\n            if X is not None:\n\n                # 2. Model Creation\n                model_results = model_creation.create_logistic_model(X, y)\n\n                if model_results:\n                    summary = model_creation.generate_model_summary(model_results)\n\n                    # 3. Output\n                    output_filename = 'Logistic.xlsx'\n                    output.write_summary(summary.as_html(), output_filename)\n\nif __name__ == \"__main__\":\n    main()\n"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "# Main Menu functions: Start Game, Instructions, Exit Game\n\ndef start_game():\n    # Code to start a new game session\n    pass\n\n\ndef instructions():\n    # Code to display game instructions\n    pass\n\n\ndef exit_game():\n    # Code to exit the game\n    pass\n\n# Main Menu Logic\n\ndef main_menu():\n    #Display menu options\n    #Get player input\n    #Call appropriate function based on input\n    pass"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "# Game Environment functions: Move Player, Look Around, Pick Item, Check Inventory\n\ndef move_player(room):\n    # Code to move the player to a new room\n    pass\n\n\ndef look_around(room):\n    # Code to inspect the current room\n    pass\n\n\ndef pick_item(room):\n    # Code to pick up an item in the room\n    pass\n\n\ndef check_inventory():\n    # Code to display the player's inventory\n    pass\n\n#Room class definition (if needed)\n#class Room:\n#   def __init__(self):\n#      pass"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "# Game Logic functions: Parse Command, Update Game State\n\ndef parse_command(command):\n    # Code to interpret player commands\n    pass\n\n\ndef update_game_state(command_result):\n    # Code to update the game state based on player actions\n    pass"}, {"file": "help_support.py", "path": "src/help_support.py", "code": "# Help and Support function: Display Help\n\ndef display_help():\n    # Code to display in-game help information\n    pass"}, {"file": "none.py", "path": "src/none.py", "code": "#This file serves as a placeholder for functionality which\n#may not be present.\n#This may include items, characters, or world information"}], "19": [{"file": "batch_program.py", "path": "src/batch_program.py", "code": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\ndef ReadDeathlistData(file_path):\n    \"\"\"Load and read data from the 'Deathlist.csv' file.\"\"\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File not found at {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"Error reading data: {e}\")\n        return None\n\n\ndef ProcessData(df):\n    \"\"\"Process the dataset to structure data appropriately for weekly analysis.\"\"\"\n    # Example: Convert date column to datetime objects\n    try:\n        df['date'] = pd.to_datetime(df['date'])\n        return df\n    except KeyError:\n        print(\"Error: 'date' column not found.\")\n        return None\n    except Exception as e:\n        print(f\"Error processing data: {e}\")\n        return None\n\n\ndef CalculateWeeklyDeaths(df):\n    \"\"\"Aggregate the data to calculate the number of deaths per week.\"\"\"\n    try:\n        weekly_deaths = df.groupby(pd.Grouper(key='date', freq='W')).size()\n        return weekly_deaths\n    except Exception as e:\n        print(f\"Error calculating weekly deaths: {e}\")\n        return None\n\n\ndef GenerateHistogram(weekly_deaths):\n    \"\"\"Create a histogram depicting the weekly deaths calculated from the dataset.\"\"\"\n    if weekly_deaths is None or weekly_deaths.empty:\n        print(\"No weekly deaths data available to generate histogram.\")\n        return None\n    try:\n        plt.figure(figsize=(12, 6))\n        plt.hist(weekly_deaths, bins=20, edgecolor='black')\n        plt.xlabel('Weekly Deaths')\n        plt.ylabel('Frequency')\n        plt.title('Distribution of Weekly Deaths')\n        return plt\n    except Exception as e:\n        print(f\"Error generating histogram: {e}\")\n        return None\n\n\ndef OutputHistogram(histogram):\n    \"\"\"Print or display the generated histogram to the user.\"\"\"\n    if histogram:\n        plt.show()\n    else:\n        print(\"No histogram to display.\")\n\n\ndef ValidateDataset(df):\n    \"\"\"Validate the dataset to ensure it contains the required data and format before processing.\"\"\"\n    # Example: Check if 'date' and 'cause_of_death' columns exist\n    if df is None:\n        print(\"Dataset is empty.\")\n        return False\n    required_columns = ['date', 'cause_of_death'] #Adjust this with the correct column names\n    if not all(col in df.columns for col in required_columns):\n        print(f\"Missing required columns. Ensure the following columns exist: {required_columns}\")\n        return False\n    return True\n\n\n\ndef main():\n    file_path = 'Deathlist.csv'\n    df = ReadDeathlistData(file_path)\n\n    if df is not None:\n        if ValidateDataset(df):\n            processed_df = ProcessData(df)\n            if processed_df is not None:\n                weekly_deaths = CalculateWeeklyDeaths(processed_df)\n                if weekly_deaths is not None:\n                    histogram = GenerateHistogram(weekly_deaths)\n                    OutputHistogram(histogram)\n        else:\n            print(\"Dataset validation failed.\")\n    else:\n        print(\"Failed to read the deathlist data.\")\n\nif __name__ == \"__main__\":\n    main()"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n    \n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE)\n    author = models.CharField(max_length=100)\n    text = models.TextField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.blog_post.title}'\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import BlogPost, Comment, Category\nfrom .forms import CommentForm, BlogPostForm, CategoryForm\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5]\n    return render(request, 'blog/home.html', {'latest_posts': latest_posts})\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = Comment.objects.filter(blog_post=post).order_by('-date')\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.blog_post = post\n            comment.save()\n            return redirect('blog_post_detail', pk=post.pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/blog_post_detail.html', {'post': post, 'comments': comments, 'form': form})\n\ndef add_blog_post(request):\n    if request.method == 'POST':\n        form = BlogPostForm(request.POST)\n        if form.is_valid():\n            post = form.save()\n            return redirect('blog_post_detail', pk=post.pk)\n    else:\n        form = BlogPostForm()\n    return render(request, 'blog/add_blog_post.html', {'form': form})\n\ndef manage_blog_post(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    if request.method == 'POST':\n        form = BlogPostForm(request.POST, instance=post)\n        if form.is_valid():\n            post = form.save()\n            return redirect('blog_post_detail', pk=post.pk)\n    else:\n        form = BlogPostForm(instance=post)\n    return render(request, 'blog/manage_blog_post.html', {'form': form, 'post':post})\n\ndef delete_blog_post(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    post.delete()\n    return redirect('home')\n\ndef manage_comment(request, pk):\n   comment = get_object_or_404(Comment, pk=pk)\n   if request.method == 'POST':\n        comment.delete()\n        return redirect('blog_post_detail', pk=comment.blog_post.pk) \n   return render(request, 'blog/manage_comment.html', {'comment': comment})\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\ndef categories(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/categories.html', {'categories': categories})\n\ndef category_detail(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\ndef add_category(request):\n    if request.method == 'POST':\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            category = form.save()\n            return redirect('categories')\n    else:\n        form = CategoryForm()\n    return render(request, 'blog/add_category.html', {'form': form})\n\ndef manage_category(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    if request.method == 'POST':\n        form = CategoryForm(request.POST, instance=category)\n        if form.is_valid():\n            category = form.save()\n            return redirect('categories')\n    else:\n        form = CategoryForm(instance=category)\n    return render(request, 'blog/manage_category.html', {'form': form, 'category':category})\n\ndef delete_category(request, pk):\n    category = get_object_or_404(Category, pk=pk)\n    category.delete()\n    return redirect('categories')\n\ndef archive(request):\n    return render(request, 'blog/archive.html')"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost, Category\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'text']\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('post/add/', views.add_blog_post, name='add_blog_post'),\n    path('post/manage/<int:pk>/', views.manage_blog_post, name='manage_blog_post'),\n    path('post/delete/<int:pk>/', views.delete_blog_post, name='delete_blog_post'),\n    path('comment/manage/<int:pk>/', views.manage_comment, name='manage_comment'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('categories/<int:pk>/', views.category_detail, name='category_detail'),\n    path('category/add/', views.add_category, name='add_category'),\n    path('category/manage/<int:pk>/', views.manage_category, name='manage_category'),\n    path('category/delete/<int:pk>/', views.delete_category, name='delete_category'),\n    path('archive/', views.archive, name='archive'),\n]"}, {"file": "home.html", "path": "blog/templates/blog/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Latest Blog Posts</h1>\n  {% for post in latest_posts %}\n    <h2><a href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></h2>\n    <p>{{ post.publication_date }}</p>\n    <p>{{ post.content|truncatewords:50 }}</p>\n  {% endfor %}\n  <form action=\"\" method=\"get\">\n    <input type=\"text\" placeholder=\"Search\" name=\"q\">\n    <button type=\"submit\">Search</button>\n  </form>\n{% endblock %}"}, {"file": "blog_post_detail.html", "path": "blog/templates/blog/blog_post_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>{{ post.title }}</h1>\n  <p>{{ post.publication_date }}</p>\n  <p>{{ post.content }}</p>\n\n  <h2>Comments</h2>\n  {% for comment in comments %}\n    <p>{{ comment.author }} - {{ comment.date }}</p>\n    <p>{{ comment.text }}</p>\n    <a href=\"{% url 'manage_comment' comment.pk %}\">Delete comment</a>\n  {% endfor %}\n\n  <h2>Add a Comment</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit</button>\n  </form>\n  <a href=\"{% url 'manage_blog_post' post.pk %}\">Manage post</a>\n  <a href=\"{% url 'delete_blog_post' post.pk %}\">Delete post</a>\n\n{% endblock %}"}, {"file": "add_blog_post.html", "path": "blog/templates/blog/add_blog_post.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Add Blog Post</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "manage_blog_post.html", "path": "blog/templates/blog/manage_blog_post.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Manage Blog Post</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "manage_comment.html", "path": "blog/templates/blog/manage_comment.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Delete comment</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    <button type=\"submit\">Delete</button>\n  </form>\n{% endblock %}"}, {"file": "about.html", "path": "blog/templates/blog/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>About Us</h1>\n  <p>Information about the author or team.</p>\n  <p>Contact information.</p>\n{% endblock %}"}, {"file": "categories.html", "path": "blog/templates/blog/categories.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Categories</h1>\n  <ul>\n    {% for category in categories %}\n      <li><a href=\"{% url 'category_detail' category.pk %}\">{{ category.name }}</a></li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'add_category' %}\">Add Category</a>\n{% endblock %}"}, {"file": "category_detail.html", "path": "blog/templates/blog/category_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>{{ category.name }}</h1>\n  <ul>\n    {% for post in posts %}\n      <li><a href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'manage_category' category.pk %}\">Manage category</a>\n  <a href=\"{% url 'delete_category' category.pk %}\">Delete category</a>\n{% endblock %}"}, {"file": "add_category.html", "path": "blog/templates/blog/add_category.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Add Category</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "manage_category.html", "path": "blog/templates/blog/manage_category.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Manage Category</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save</button>\n  </form>\n{% endblock %}"}, {"file": "archive.html", "path": "blog/templates/blog/archive.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Archive</h1>\n  <p>Archive content will go here.</p>\n{% endblock %}"}, {"file": "base.html", "path": "blog/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Blog</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'about' %}\">About</a> |\n        <a href=\"{% url 'categories' %}\">Categories</a> |\n        <a href=\"{% url 'archive' %}\">Archive</a>\n    </nav>\n    <hr>\n    {% block content %}{% endblock %}\n</body>\n</html>"}]}