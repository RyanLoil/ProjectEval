{"1": [{"file": "urls.py", "path": "bmi_project/bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calculate/', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "views.py", "path": "bmi_project/bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\ndef home(request):\n    return render(request, 'bmi_calculator/home.html')\n\ndef calculate_bmi(request):\n    if request.method == 'POST':\n        height = float(request.POST.get('height'))\n        weight = float(request.POST.get('weight'))\n        height_unit = request.POST.get('height_unit')\n        weight_unit = request.POST.get('weight_unit')\n\n        # Conversion to meters and kilograms\n        if height_unit == 'inches':\n            height = height * 0.0254\n        elif height_unit == 'cm':\n            height = height / 100\n\n        if weight_unit == 'lbs':\n            weight = weight * 0.453592\n\n        try:\n            bmi = weight / (height ** 2)\n        except ZeroDivisionError:\n            return JsonResponse({'error': 'Height cannot be zero.'})\n\n        bmi = round(bmi, 2)\n\n        if bmi < 18.5:\n            category = 'Underweight'\n        elif 18.5 <= bmi < 25:\n            category = 'Normal'\n        elif 25 <= bmi < 30:\n            category = 'Overweight'\n        else:\n            category = 'Obese'\n\n        return JsonResponse({'bmi': bmi, 'category': category})\n\n    return render(request, 'bmi_calculator/bmi_calculator.html')"}, {"file": "models.py", "path": "bmi_project/bmi_calculator/models.py", "code": "# No models are strictly necessary for this basic BMI calculator\n# but this is a good place to put database interactions if you were\n# going to save the results to the database.\nfrom django.db import models"}, {"file": "home.html", "path": "bmi_project/bmi_calculator/templates/bmi_calculator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator Home</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        h1 {\n            text-align: center;\n        }\n        p {\n            margin-bottom: 10px;\n        }\n        .link-button {\n            display: inline-block;\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the BMI Calculator</h1>\n        <p id=\"home-description-1\" class=\"description\">This calculator helps you determine your Body Mass Index (BMI).</p>\n        <p id=\"home-description-2\" class=\"description\">BMI is a measure of body fat based on height and weight.</p>\n        <a id=\"calculate-bmi-link\" class=\"link-button\" href=\"{% url 'calculate_bmi' %}\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "bmi_project/bmi_calculator/templates/bmi_calculator/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        h1 {\n            text-align: center;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"], select {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        .button-group {\n            text-align: center;\n            margin-top: 20px;\n        }\n        button {\n            padding: 10px 20px;\n            margin: 0 10px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        button:hover {\n            background-color: #3e8e41;\n        }\n        #result {\n            margin-top: 20px;\n            padding: 15px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n            background-color: #f9f9f9;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"calculator-title\" class=\"title\">BMI Calculator</h1>\n        <form id=\"bmiForm\" class=\"bmi-form\">\n            <div class=\"form-group\">\n                <label for=\"height\" id=\"height-label\">Height:</label>\n                <input type=\"number\" id=\"height\" name=\"height\" class=\"form-control\" required>\n                <select id=\"height_unit\" name=\"height_unit\" class=\"form-control\">\n                    <option value=\"cm\">cm</option>\n                    <option value=\"inches\">inches</option>\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"weight\" id=\"weight-label\">Weight:</label>\n                <input type=\"number\" id=\"weight\" name=\"weight\" class=\"form-control\" required>\n                <select id=\"weight_unit\" name=\"weight_unit\" class=\"form-control\">\n                    <option value=\"kg\">kg</option>\n                    <option value=\"lbs\">lbs</option>\n                </select>\n            </div>\n            <div class=\"button-group\">\n                <button type=\"button\" id=\"calculate-button\" class=\"btn btn-primary\" onclick=\"calculateBMI()\">Calculate</button>\n                <button type=\"button\" id=\"reset-button\" class=\"btn btn-secondary\" onclick=\"resetForm()\">Reset</button>\n            </div>\n        </form>\n\n        <div id=\"result\" class=\"result-container\" style=\"display:none;\">\n            <h2 id=\"result-heading\">Your BMI:</h2>\n            <p id=\"bmi-paragraph\">BMI: <span id=\"bmiValue\" class=\"bmi-value\"></span></p>\n            <p id=\"category-paragraph\">Category: <span id=\"bmiCategory\" class=\"bmi-category\"></span></p>\n        </div>\n    </div>\n\n    <script>\n        function calculateBMI() {\n            const height = document.getElementById('height').value;\n            const weight = document.getElementById('weight').value;\n            const height_unit = document.getElementById('height_unit').value;\n            const weight_unit = document.getElementById('weight_unit').value;\n\n            fetch('/calculate/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: `height=${height}&weight=${weight}&height_unit=${height_unit}&weight_unit=${weight_unit}`\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                    alert(data.error);\n                    return;\n                }\n                document.getElementById('bmiValue').textContent = data.bmi;\n                document.getElementById('bmiCategory').textContent = data.category;\n                document.getElementById('result').style.display = 'block';\n            });\n        }\n\n        function resetForm() {\n            document.getElementById('bmiForm').reset();\n            document.getElementById('result').style.display = 'none';\n        }\n    </script>\n</body>\n</html>"}, {"file": "settings.py", "path": "bmi_project/bmi_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'bmi_calculator/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_project.wsgi.application'\n\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'bmi_calculator/static')]\n\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "bmi_project/bmi_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi_calculator.urls')),\n]"}, {"file": "wsgi.py", "path": "bmi_project/bmi_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "bmi_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\n# Example Model (Adjust to your specific needs)\n# class Currency(models.Model):\n#     code = models.CharField(max_length=3, unique=True)\n#     name = models.CharField(max_length=50)\n#\n#     def __str__(self):\n#         return self.code"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\n# Home Page View\ndef home(request):\n    # Implement: Select Base Currency, Select Target Currency, Enter Amount, Convert Button, Display Conversion Result, Exchange Rate Info\n    context = {}\n    return render(request, 'home.html', context)\n\n# Currency Details Page View (Optional)\ndef currency_details(request):\n    # Implement: Currency Information, Historical Exchange Rates\n    context = {}\n    return render(request, 'currency_details.html', context)\n\n# Settings Page View (Optional)\ndef settings(request):\n    # Implement: Set Default Currencies, Set Update Frequency\n    context = {}\n    return render(request, 'settings.html', context)\n\n# API endpoint for currency conversion (Example)\ndef convert_currency(request):\n    # Implement the conversion logic here based on the request data\n    # Example:\n    # base_currency = request.GET.get('base_currency')\n    # target_currency = request.GET.get('target_currency')\n    # amount = float(request.GET.get('amount'))\n    # conversion_rate = get_exchange_rate(base_currency, target_currency)\n    # converted_amount = amount * conversion_rate\n    # return JsonResponse({'converted_amount': converted_amount, 'exchange_rate': conversion_rate})\n\n    return JsonResponse({'error': 'Conversion logic not implemented'})"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    # Optional URL patterns for other pages\n    # path('currency_details/', views.currency_details, name='currency_details'),\n    # path('settings/', views.settings, name='settings'),\n    path('convert/', views.convert_currency, name='convert_currency'), # API endpoint\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# Example Form for conversion (customize as needed)\n# class CurrencyConverterForm(forms.Form):\n#     base_currency = forms.CharField(max_length=3)\n#     target_currency = forms.CharField(max_length=3)\n#     amount = forms.DecimalField()"}, {"file": "home.html", "path": "currency_converter/templates/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"title\">Currency Converter</h1>\n    <!-- Implement: Select Base Currency, Select Target Currency, Enter Amount, Convert Button, Display Conversion Result, Exchange Rate Info -->\n\n    <form id=\"currencyForm\" class=\"currency-form\">\n        <div class=\"form-group\">\n            <label for=\"baseCurrency\" class=\"form-label\">Base Currency:</label>\n            <select id=\"baseCurrency\" name=\"baseCurrency\" class=\"form-select\">\n                <!-- Populate with currency options -->\n            </select>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"targetCurrency\" class=\"form-label\">Target Currency:</label>\n            <select id=\"targetCurrency\" name=\"targetCurrency\" class=\"form-select\">\n                <!-- Populate with currency options -->\n            </select>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"amount\" class=\"form-label\">Amount:</label>\n            <input type=\"number\" id=\"amount\" name=\"amount\" value=\"1\" class=\"form-input\">\n        </div>\n\n        <button type=\"button\" onclick=\"convertCurrency()\" class=\"convert-button\">Convert</button>\n\n        <div class=\"result-group\">\n            <label class=\"result-label\">Conversion Result:</label>\n            <span id=\"conversionResult\" class=\"result-text\"></span>\n        </div>\n\n        <div class=\"result-group\">\n            <label class=\"result-label\">Exchange Rate:</label>\n            <span id=\"exchangeRate\" class=\"result-text\"></span>\n        </div>\n    </form>\n\n    <script>\n        function convertCurrency() {\n            const baseCurrency = document.getElementById(\"baseCurrency\").value;\n            const targetCurrency = document.getElementById(\"targetCurrency\").value;\n            const amount = document.getElementById(\"amount\").value;\n\n            fetch(`/convert/?base_currency=${baseCurrency}&target_currency=${targetCurrency}&amount=${amount}`)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.error) {\n                        document.getElementById(\"conversionResult\").innerText = data.error;\n                        document.getElementById(\"exchangeRate\").innerText = \"\";\n                    } else {\n                        document.getElementById(\"conversionResult\").innerText = data.converted_amount;\n                        document.getElementById(\"exchangeRate\").innerText = data.exchange_rate;\n                    }\n                });\n        }\n    </script>\n\n</body>\n</html>"}, {"file": "settings.html", "path": "currency_converter/templates/settings.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n</head>\n<body>\n    <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n    <!-- Implement: Set Default Currencies, Set Update Frequency -->\n\n    <form id=\"settingsForm\" class=\"settings-form\">\n        <div class=\"form-group\">\n            <label for=\"defaultBaseCurrency\" class=\"form-label\">Default Base Currency:</label>\n            <select id=\"defaultBaseCurrency\" name=\"defaultBaseCurrency\" class=\"form-select\">\n                <!-- Populate with currency options -->\n            </select>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"defaultTargetCurrency\" class=\"form-label\">Default Target Currency:</label>\n            <select id=\"defaultTargetCurrency\" name=\"defaultTargetCurrency\" class=\"form-select\">\n                <!-- Populate with currency options -->\n            </select>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"updateFrequency\" class=\"form-label\">Update Frequency (minutes):</label>\n            <input type=\"number\" id=\"updateFrequency\" name=\"updateFrequency\" value=\"60\" class=\"form-input\">\n        </div>\n\n        <button type=\"submit\" class=\"save-button\">Save Settings</button>\n    </form>\n</body>\n</html>"}, {"file": "currency_details.html", "path": "currency_converter/templates/currency_details.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Details</title>\n</head>\n<body>\n    <h1 id=\"currency-details-title\" class=\"title\">Currency Details</h1>\n    <!-- Implement: Currency Information, Historical Exchange Rates -->\n</body>\n</html>"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\nif __name__ == \"__main__\":\n    os.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"currency_project.settings\")\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail because Django is not installed.\n        # However, this may be the case because you have not installed it along with the\n        # other requirements.\n        try:\n            import django  # noqa\n        except ImportError:\n            raise ImportError(\n                \"Couldn't import Django. Are you sure it's installed and available on your\" \n                \"PYTHONPATH environment variable? Did you forget to activate a virtual\" \n                \"environment?\"\n            )\n        raise\n    execute_from_command_line(sys.argv)"}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "currency_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CurrencyConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'currency_converter'"}, {"file": "tests.py", "path": "currency_converter/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here."}, {"file": "__init__.py", "path": "currency_project/__init__.py", "code": ""}, {"file": "settings.py", "path": "currency_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-y@u07a%4(d_o3$j06$1p!+t1k69_x56+5-c7*k9)9z-6t0(z56'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'currency_converter/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'currency_converter/static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "currency_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}, {"file": "wsgi.py", "path": "currency_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_project.settings')\n\napplication = get_wsgi_application()"}], "6": [{"file": "models.py", "path": "todo/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE, related_name='tasks')\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    due_date = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todo/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom .forms import TodoListForm, TaskForm\nfrom django.urls import reverse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'todo/home.html', {'todo_lists': todo_lists})\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TodoListForm()\n    return render(request, 'todo/create_todo_list.html', {'form': form})\n\ndef todo_list_detail(request, pk):\n    todo_list = get_object_or_404(TodoList, pk=pk)\n    tasks = todo_list.tasks.all()\n    form = TaskForm()\n    return render(request, 'todo/todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks, 'form': form})\n\ndef create_task(request, todo_list_pk):\n    todo_list = get_object_or_404(TodoList, pk=todo_list_pk)\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.todo_list = todo_list\n            task.save()\n            return redirect('todo_list_detail', pk=todo_list.pk)\n    else:\n        form = TaskForm()\n    return render(request, 'todo/create_task.html', {'form': form, 'todo_list': todo_list})\n\ndef edit_task(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list_detail', pk=task.todo_list.pk)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'todo/edit_task.html', {'form': form, 'task': task})\n\ndef delete_task(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    todo_list_pk = task.todo_list.pk\n    task.delete()\n    return redirect('todo_list_detail', pk=todo_list_pk)\n\ndef mark_task_completed(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', pk=task.todo_list.pk)\n"}, {"file": "forms.py", "path": "todo/forms.py", "code": "from django import forms\nfrom .models import TodoList, Task\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['name']\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'due_date']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date'})\n        }"}, {"file": "urls.py", "path": "todo/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('create_todo_list/', views.create_todo_list, name='create_todo_list'),\n    path('todo_list/<int:pk>/', views.todo_list_detail, name='todo_list_detail'),\n    path('todo_list/<int:todo_list_pk>/create_task/', views.create_task, name='create_task'),\n    path('task/<int:pk>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:pk>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:pk>/complete/', views.mark_task_completed, name='mark_task_completed'),\n]"}, {"file": "settings.py", "path": "your_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'your_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'your_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},\n    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "your_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo.urls')), \n]"}, {"file": "wsgi.py", "path": "your_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "home.html", "path": "todo/templates/todo/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"home-container\" class=\"container\">\n    <h1 id=\"home-title\" class=\"title\">Todo Lists</h1>\n    <a id=\"create-todo-list-link\" class=\"button\" href=\"{% url 'create_todo_list' %}\">Create New Todo List</a>\n    <ul id=\"todo-list\" class=\"list\">\n      {% for todo_list in todo_lists %}\n        <li class=\"list-item\"><a id=\"todo-list-link-{{ todo_list.pk }}\" href=\"{% url 'todo_list_detail' todo_list.pk %}\">{{ todo_list.name }}</a></li>\n      {% endfor %}\n    </ul>\n  </div>\n{% endblock %}"}, {"file": "todo_list_detail.html", "path": "todo/templates/todo/todo_list_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"todo-list-detail-container\" class=\"container\">\n    <h1 id=\"todo-list-detail-title\" class=\"title\">{{ todo_list.name }}</h1>\n    <a id=\"add-new-task-link\" class=\"button\" href=\"{% url 'create_task' todo_list.pk %}\">Add New Task</a>\n    <ul id=\"task-list\" class=\"list\">\n      {% for task in tasks %}\n        <li class=\"list-item\">\n          <span id=\"task-title-{{ task.pk }}\" class=\"task-title\">{{ task.title }}</span>\n          {% if task.completed %}\n            <span id=\"task-completed-{{ task.pk }}\" class=\"task-completed\">(Completed)</span>\n          {% else %}\n            <a id=\"mark-complete-link-{{ task.pk }}\" class=\"button\" href=\"{% url 'mark_task_completed' task.pk %}\">Mark Complete</a>\n          {% endif %}\n          <a id=\"edit-task-link-{{ task.pk }}\" class=\"button\" href=\"{% url 'edit_task' task.pk %}\">Edit</a>\n          <a id=\"delete-task-link-{{ task.pk }}\" class=\"button\" href=\"{% url 'delete_task' task.pk %}\">Delete</a>\n        </li>\n      {% endfor %}\n    </ul>\n  </div>\n{% endblock %}"}, {"file": "create_todo_list.html", "path": "todo/templates/todo/create_todo_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"create-todo-list-container\" class=\"container\">\n    <h1 id=\"create-todo-list-title\" class=\"title\">Create Todo List</h1>\n    <form id=\"create-todo-list-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"save-todo-list-button\" class=\"button\" type=\"submit\">Save</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "create_task.html", "path": "todo/templates/todo/create_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"create-task-container\" class=\"container\">\n    <h1 id=\"create-task-title\" class=\"title\">Create Task</h1>\n    <form id=\"create-task-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"save-task-button\" class=\"button\" type=\"submit\">Save</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "edit_task.html", "path": "todo/templates/todo/edit_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"edit-task-container\" class=\"container\">\n    <h1 id=\"edit-task-title\" class=\"title\">Edit Task</h1>\n    <form id=\"edit-task-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"save-edit-task-button\" class=\"button\" type=\"submit\">Save</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "base.html", "path": "todo/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo App</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n        }\n        .title {\n            text-align: center;\n            padding: 20px 0;\n        }\n        .button {\n            display: inline-block;\n            padding: 10px 15px;\n            background-color: #3498db;\n            color: #fff;\n            text-decoration: none;\n            border-radius: 5px;\n            margin-top: 10px;\n        }\n        .button:hover {\n            background-color: #2980b9;\n        }\n        .list {\n            list-style: none;\n            padding: 0;\n        }\n        .list-item {\n            padding: 10px 0;\n            border-bottom: 1px solid #ddd;\n        }\n        .task-title {\n            font-weight: bold;\n        }\n        .task-completed {\n            color: green;\n            margin-left: 5px;\n        }\n    </style>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}], "7": [{"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('reports/', views.reports, name='reports'),\n    path('settings1/', views.settings1, name='settings1'),\n    path('settings2/', views.settings2, name='settings2'),\n    path('add_transaction/', views.add_transaction, name='add_transaction'),\n    path('edit_transaction/<int:transaction_id>/', views.edit_transaction, name='edit_transaction'),\n    path('delete_transaction/<int:transaction_id>/', views.delete_transaction, name='delete_transaction'),\n    path('add_category/', views.add_category, name='add_category'),\n    path('edit_category/<int:category_id>/', views.edit_category, name='edit_category'),\n    path('delete_category/<int:category_id>/', views.delete_category, name='delete_category'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.user_login, name='login'),\n]"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .forms import TransactionForm, CategoryForm\nfrom .models import Transaction, Category\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout, authenticate\nfrom django.contrib.auth.decorators import login_required\n\n\n@login_required\ndef home(request):\n    return render(request, 'home.html')\n\n@login_required\ndef balance_tracker(request):\n    transactions = Transaction.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'balance_tracker.html', {'transactions': transactions})\n\n@login_required\ndef reports(request):\n    return render(request, 'reports.html')\n\n@login_required\ndef settings1(request):\n    return render(request, 'settings1.html')\n\n@login_required\ndef settings2(request):\n    return render(request, 'settings2.html')\n\n@login_required\ndef add_transaction(request):\n    if request.method == 'POST':\n        form = TransactionForm(request.POST)\n        if form.is_valid():\n            transaction = form.save(commit=False)\n            transaction.user = request.user\n            transaction.save()\n            return redirect('balance_tracker')\n    else:\n        form = TransactionForm()\n    return render(request, 'add_transaction.html', {'form': form})\n\n@login_required\ndef edit_transaction(request, transaction_id):\n    transaction = Transaction.objects.get(pk=transaction_id, user=request.user)\n    if request.method == 'POST':\n        form = TransactionForm(request.POST, instance=transaction)\n        if form.is_valid():\n            form.save()\n            return redirect('balance_tracker')\n    else:\n        form = TransactionForm(instance=transaction)\n    return render(request, 'edit_transaction.html', {'form': form, 'transaction_id': transaction_id})\n\n@login_required\ndef delete_transaction(request, transaction_id):\n    transaction = Transaction.objects.get(pk=transaction_id, user=request.user)\n    transaction.delete()\n    return redirect('balance_tracker')\n\n@login_required\ndef add_category(request):\n    if request.method == 'POST':\n        form = CategoryForm(request.POST)\n        if form.is_valid():\n            category = form.save(commit=False)\n            category.user = request.user\n            category.save()\n            return redirect('settings1')\n    else:\n        form = CategoryForm()\n    return render(request, 'add_category.html', {'form': form})\n\n@login_required\ndef edit_category(request, category_id):\n    category = Category.objects.get(pk=category_id, user=request.user)\n    if request.method == 'POST':\n        form = CategoryForm(request.POST, instance=category)\n        if form.is_valid():\n            form.save()\n            return redirect('settings1')\n    else:\n        form = CategoryForm(instance=category)\n    return render(request, 'edit_category.html', {'form': form, 'category_id': category_id})\n\n@login_required\ndef delete_category(request, category_id):\n    category = Category.objects.get(pk=category_id, user=request.user)\n    category.delete()\n    return redirect('settings1')\n\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('home')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('home')\n            else:\n                return render(request, 'login.html', {'form': form, 'error': 'Invalid login credentials'})  # Pass error message\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\n@login_required\ndef user_logout(request):\n    logout(request)\n    return redirect('home')"}, {"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Category(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.SET_NULL, null=True, blank=True)\n    description = models.CharField(max_length=200, blank=True)\n\n    def __str__(self):\n        return f'{self.date} - {self.amount} - {self.category}'"}, {"file": "forms.py", "path": "budget_control/forms.py", "code": "from django import forms\nfrom .models import Transaction, Category\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['date', 'amount', 'category', 'description']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'})\n        }\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']"}, {"file": "home.html", "path": "templates/home.html", "code": "<h1 id=\"home-title\" class=\"home-title\">Home Page</h1>\n\n<div id=\"home-links\" class=\"home-links\">\n    <a id=\"login-link\" class=\"home-link\" href=\"{% url 'login' %}\">Login</a>\n    <a id=\"signup-link\" class=\"home-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n    <a id=\"logout-link\" class=\"home-link\" href=\"{% url 'logout' %}\">Logout</a>\n    <a id=\"balance-tracker-link\" class=\"home-link\" href=\"{% url 'balance_tracker' %}\">Balance Tracker</a>\n    <a id=\"reports-link\" class=\"home-link\" href=\"{% url 'reports' %}\">Reports</a>\n    <a id=\"settings1-link\" class=\"home-link\" href=\"{% url 'settings1' %}\">Settings 1</a>\n    <a id=\"settings2-link\" class=\"home-link\" href=\"{% url 'settings2' %}\">Settings 2</a>\n</div>"}, {"file": "balance_tracker.html", "path": "templates/balance_tracker.html", "code": "<h1 id=\"balance-tracker-title\" class=\"balance-tracker-title\">Balance Tracker</h1>\n\n<div id=\"balance-tracker-links\" class=\"balance-tracker-links\">\n    <a id=\"add-transaction-link\" class=\"balance-tracker-link\" href=\"{% url 'add_transaction' %}\">Add Transaction</a>\n</div>\n\n<table id=\"transaction-table\" class=\"transaction-table\">\n    <thead>\n        <tr>\n            <th>Date</th>\n            <th>Amount</th>\n            <th>Category</th>\n            <th>Description</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        {% for transaction in transactions %}\n            <tr>\n                <td>{{ transaction.date }}</td>\n                <td>{{ transaction.amount }}</td>\n                <td>{{ transaction.category }}</td>\n                <td>{{ transaction.description }}</td>\n                <td>\n                    <a href=\"{% url 'edit_transaction' transaction.id %}\">Edit</a>\n                    <a href=\"{% url 'delete_transaction' transaction.id %}\">Delete</a>\n                </td>\n            </tr>\n        {% endfor %}\n    </tbody>\n</table>"}, {"file": "reports.html", "path": "templates/reports.html", "code": "<h1 id=\"reports-title\" class=\"reports-title\">Reports</h1>"}, {"file": "settings1.html", "path": "templates/settings1.html", "code": "<h1 id=\"settings1-title\" class=\"settings1-title\">Settings 1</h1>\n<a id=\"add-category-link\" class=\"settings1-link\" href=\"{% url 'add_category' %}\">Add Category</a>\n\n<table id=\"category-table\" class=\"category-table\">\n    <thead>\n        <tr>\n            <th>Category Name</th>\n            <th>Actions</th>\n        </tr>\n    </thead>\n    <tbody>\n        {% for category in categories %}\n            <tr>\n                <td>{{ category.name }}</td>\n                <td>\n                    <a href=\"{% url 'edit_category' category.id %}\">Edit</a>\n                    <a href=\"{% url 'delete_category' category.id %}\">Delete</a>\n                </td>\n            </tr>\n        {% endfor %}\n    </tbody>\n</table>"}, {"file": "settings2.html", "path": "templates/settings2.html", "code": "<h1 id=\"settings2-title\" class=\"settings2-title\">Settings 2</h1>"}, {"file": "add_transaction.html", "path": "templates/add_transaction.html", "code": "<h1 id=\"add-transaction-title\" class=\"add-transaction-title\">Add Transaction</h1>\n\n<form id=\"add-transaction-form\" class=\"add-transaction-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"add-transaction-button\" class=\"add-transaction-button\">Add Transaction</button>\n</form>\n\n<a href=\"{% url 'balance_tracker' %}\">Back to Balance Tracker</a>"}, {"file": "edit_transaction.html", "path": "templates/edit_transaction.html", "code": "<h1 id=\"edit-transaction-title\" class=\"edit-transaction-title\">Edit Transaction</h1>\n\n<form id=\"edit-transaction-form\" class=\"edit-transaction-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"edit-transaction-button\" class=\"edit-transaction-button\">Update Transaction</button>\n</form>\n\n<a href=\"{% url 'balance_tracker' %}\">Back to Balance Tracker</a>"}, {"file": "add_category.html", "path": "templates/add_category.html", "code": "<h1 id=\"add-category-title\" class=\"add-category-title\">Add Category</h1>\n\n<form id=\"add-category-form\" class=\"add-category-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"add-category-button\" class=\"add-category-button\">Add Category</button>\n</form>\n\n<a href=\"{% url 'settings1' %}\">Back to Settings</a>"}, {"file": "edit_category.html", "path": "templates/edit_category.html", "code": "<h1 id=\"edit-category-title\" class=\"edit-category-title\">Edit Category</h1>\n\n<form id=\"edit-category-form\" class=\"edit-category-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"edit-category-button\" class=\"edit-category-button\">Update Category</button>\n</form>\n\n<a href=\"{% url 'settings1' %}\">Back to Settings</a>"}, {"file": "signup.html", "path": "templates/signup.html", "code": "<h1 id=\"signup-title\" class=\"signup-title\">Sign Up</h1>\n\n<form id=\"signup-form\" class=\"signup-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"signup-button\" class=\"signup-button\">Sign Up</button>\n</form>\n\n<a href=\"{% url 'login' %}\">Already have an account? Login</a>"}, {"file": "login.html", "path": "templates/login.html", "code": "<h1 id=\"login-title\" class=\"login-title\">Login</h1>\n\n{% if error %}\n    <p class=\"error\">{{ error }}</p>\n{% endif %}\n\n<form id=\"login-form\" class=\"login-form\" method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\" id=\"login-button\" class=\"login-button\">Login</button>\n</form>\n\n<a href=\"{% url 'signup' %}\">Don't have an account? Sign up</a>"}, {"file": "settings.py", "path": "budget_control/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget_control',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] \n\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'"}, {"file": "wsgi.py", "path": "budget_control/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "budget_control/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction, Category\n\nadmin.site.register(Transaction)\nadmin.site.register(Category)"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "Django\n"}, {"file": "logout.html", "path": "templates/logout.html", "code": "<h1>Logout</h1>\n<p>Are you sure you want to logout?</p>\n<form method=\"post\" action=\"{% url 'user_logout' %}\">\n    {% csrf_token %}\n    <button type=\"submit\">Logout</button>\n</form>\n"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    current_date = timezone.now().date()\n    events = Event.objects.filter(start_time__date=current_date)\n    return render(request, 'calendar_app/home.html', {'current_date': current_date, 'events': events})\n\ndef calendar_view(request, year=None, month=None):\n    if year is None or month is None:\n        now = timezone.now()\n        year = now.year\n        month = now.month\n    return render(request, 'calendar_app/calendar.html', {'year': year, 'month': month})\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/add_event.html', {'form': form})\n\ndef event_detail(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendar_app/event_detail.html', {'event': event})\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_detail', event_id=event.id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/edit_event.html', {'form': form, 'event': event})\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'calendar_app/delete_event.html', {'event': event})\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query) if query else Event.objects.all()\n    return render(request, 'calendar_app/search_events.html', {'events': events, 'query': query})\n\ndef list_all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/list_events.html', {'events': events})"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_month'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_detail, name='event_detail'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('events/all/', views.list_all_events, name='list_all_events'),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'calendar_app' to INSTALLED_APPS\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nimport os\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'django-insecure-your-secret-key'\nDEBUG = True\nALLOWED_HOSTS = ['*']"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "home.html", "path": "templates/calendar_app/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"home-title\" class=\"home-title\">Welcome</h1>\n    <p id=\"current-date\" class=\"current-date\">Today's Date: {{ current_date }}</p>\n\n    <h2 id=\"events-today-title\" class=\"events-today-title\">Events for Today</h2>\n    <ul id=\"events-list\" class=\"events-list\">\n        {% for event in events %}\n            <li class=\"event-item\"><a id=\"event-link-{{ event.id }}\" class=\"event-link\" href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li id=\"no-events\" class=\"no-events\">No events for today.</li>\n        {% endfor %}\n    </ul>\n\n    <a id=\"view-calendar-link\" class=\"view-calendar-link\" href=\"{% url 'calendar' %}\">View Calendar</a>\n    <a id=\"add-event-link\" class=\"add-event-link\" href=\"{% url 'add_event' %}\">Add New Event</a>\n{% endblock %}"}, {"file": "calendar.html", "path": "templates/calendar_app/calendar.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"calendar-title\" class=\"calendar-title\">Calendar</h1>\n\n    <form id=\"calendar-form\" class=\"calendar-form\" method=\"get\" action=\"{% url 'calendar_month' year=year month=month %}\">\n      <label id=\"month-label\" class=\"month-label\" for=\"month\">Select Month:</label>\n      <select id=\"month-select\" class=\"month-select\" name=\"month\" id=\"month\">\n          {% for i in '123456789ABC'|make_list %}\n            {% with month_num=forloop.counter %}\n              <option id=\"month-option-{{month_num}}\" class=\"month-option\" value=\"{{month_num}}\" {% if month == month_num %}selected{% endif %}>{{ month_num }}</option>\n            {% endwith %}\n          {% endfor %}\n\n      </select>\n\n      <label id=\"year-label\" class=\"year-label\" for=\"year\">Select Year:</label>\n      <input type=\"number\" id=\"year-input\" class=\"year-input\" name=\"year\" id=\"year\" value=\"{{year}}\">\n\n      <button id=\"go-button\" class=\"go-button\" type=\"submit\">Go</button>\n    </form>\n\n    <p id=\"year-month-display\" class=\"year-month-display\">Year: {{ year }}, Month: {{ month }}</p>\n\n    <a id=\"add-event-link\" class=\"add-event-link\" href=\"{% url 'add_event' %}\">Add Event</a>\n{% endblock %}"}, {"file": "add_event.html", "path": "templates/calendar_app/add_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"add-event-title\" class=\"add-event-title\">Add Event</h1>\n    <form id=\"add-event-form\" class=\"add-event-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"save-button\" class=\"save-button\" type=\"submit\">Save</button>\n    </form>\n    <a id=\"cancel-button\" class=\"cancel-button\" href=\"{% url 'home' %}\">Cancel</a>\n{% endblock %}"}, {"file": "event_detail.html", "path": "templates/calendar_app/event_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"event-details-title\" class=\"event-details-title\">Event Details</h1>\n    <h2 id=\"event-title\" class=\"event-title\">{{ event.title }}</h2>\n    <p id=\"event-description\" class=\"event-description\">Description: {{ event.description }}</p>\n    <p id=\"event-start-time\" class=\"event-start-time\">Start Time: {{ event.start_time }}</p>\n    <p id=\"event-end-time\" class=\"event-end-time\">End Time: {{ event.end_time }}</p>\n\n    <a id=\"edit-event-link\" class=\"edit-event-link\" href=\"{% url 'edit_event' event.id %}\">Edit</a>\n    <a id=\"delete-event-link\" class=\"delete-event-link\" href=\"{% url 'delete_event' event.id %}\">Delete</a>\n    <a id=\"back-to-home-link\" class=\"back-to-home-link\" href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "edit_event.html", "path": "templates/calendar_app/edit_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"edit-event-title\" class=\"edit-event-title\">Edit Event</h1>\n    <form id=\"edit-event-form\" class=\"edit-event-form\" method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button id=\"update-button\" class=\"update-button\" type=\"submit\">Update</button>\n    </form>\n    <a id=\"cancel-button\" class=\"cancel-button\" href=\"{% url 'event_detail' event.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "delete_event.html", "path": "templates/calendar_app/delete_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"delete-event-title\" class=\"delete-event-title\">Delete Event</h1>\n    <p id=\"delete-confirmation\" class=\"delete-confirmation\">Are you sure you want to delete \"{{ event.title }}\"?</p>\n    <form id=\"delete-event-form\" class=\"delete-event-form\" method=\"post\">\n        {% csrf_token %}\n        <button id=\"delete-button\" class=\"delete-button\" type=\"submit\">Delete</button>\n    </form>\n    <a id=\"cancel-button\" class=\"cancel-button\" href=\"{% url 'event_detail' event.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "search_events.html", "path": "templates/calendar_app/search_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"search-results-title\" class=\"search-results-title\">Search Results</h1>\n    <form id=\"search-form\" class=\"search-form\" method=\"get\" action=\"{% url 'search_events' %}\">\n        <input type=\"text\" id=\"search-input\" class=\"search-input\" name=\"q\" placeholder=\"Search events\" value=\"{{ query }}\">\n        <button id=\"search-button\" class=\"search-button\" type=\"submit\">Search</button>\n    </form>\n\n    <ul id=\"search-results-list\" class=\"search-results-list\">\n        {% for event in events %}\n            <li class=\"event-item\"><a id=\"event-link-{{ event.id }}\" class=\"event-link\" href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li id=\"no-events-found\" class=\"no-events-found\">No events found.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "list_events.html", "path": "templates/calendar_app/list_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"all-events-title\" class=\"all-events-title\">All Events</h1>\n    <ul id=\"all-events-list\" class=\"all-events-list\">\n        {% for event in events %}\n            <li class=\"event-item\"><a id=\"event-link-{{ event.id }}\" class=\"event-link\" href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a> - {{ event.start_time }}</li>\n        {% empty %}\n            <li id=\"no-events-found\" class=\"no-events-found\">No events found.</li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar App</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        nav {\n            margin-bottom: 20px;\n        }\n        nav a {\n            margin-right: 10px;\n            text-decoration: none;\n        }\n        .home-title, .calendar-title, .add-event-title, .event-details-title, .edit-event-title, .delete-event-title, .search-results-title, .all-events-title {\n            color: #333;\n        }\n        .current-date {\n            font-style: italic;\n            color: #666;\n        }\n        .events-today-title {\n            margin-top: 20px;\n        }\n        .events-list {\n            list-style: none;\n            padding: 0;\n        }\n        .event-item {\n            margin-bottom: 5px;\n        }\n        .event-link {\n            color: #007bff;\n            text-decoration: none;\n        }\n        .event-link:hover {\n            text-decoration: underline;\n        }\n        .no-events, .no-events-found {\n            color: #999;\n        }\n        .calendar-form label, .calendar-form input, .calendar-form select, .add-event-form label, .add-event-form input, .add-event-form textarea {\n            display: block;\n            margin-bottom: 10px;\n        }\n        .search-form input {\n            width: 200px;\n            padding: 5px;\n        }\n        .search-form button {\n            padding: 5px 10px;\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a> |\n        <a id=\"calendar-link\" class=\"nav-link\" href=\"{% url 'calendar' %}\">Calendar</a> |\n        <a id=\"add-event-link\" class=\"nav-link\" href=\"{% url 'add_event' %}\">Add Event</a> |\n        <a id=\"search-events-link\" class=\"nav-link\" href=\"{% url 'search_events' %}\">Search Events</a> |\n        <a id=\"list-all-events-link\" class=\"nav-link\" href=\"{% url 'list_all_events' %}\">List All Events</a>\n    </nav>\n    <hr>\n    <main id=\"content\" class=\"content\">\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "static/style.css", "path": "static/style.css", "code": "/* Optional: You can add more styles here */\nbody {\n  font-family: sans-serif;\n  margin: 20px;\n}\n\nnav {\n  margin-bottom: 20px;\n}\n\nnav a {\n  margin-right: 10px;\n  text-decoration: none;\n}\n\n/* Add more styles as needed */"}], "11": [{"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport json\n\n\ndef home(request):\n    if request.method == 'POST':\n        status = request.POST.get('status')\n        review_note = request.POST.get('review_note')\n        # Handle file upload (optional)\n        if 'json_file' in request.FILES:\n            json_file = request.FILES['json_file']\n            try:\n                data = json.load(json_file)\n                # Process the JSON data\n                pass\n            except json.JSONDecodeError:\n                # Handle invalid JSON\n                pass\n\n        context = {\n            'welcome_message': 'Welcome to the Review App!',  # Replace with actual welcome message\n        }\n\n        return render(request, 'home.html', context)\n    else:\n\n        context = {\n            'welcome_message': 'Welcome to the Review App!', # Replace with actual welcome message\n        }\n        return render(request, 'home.html', context)\n\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "urls.py", "path": "app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">{{ welcome_message }}</h1>\n\n    <form id=\"review-form\" class=\"review-form\" method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n\n        <div class=\"form-group\">\n            <label for=\"status\" id=\"status-label\" class=\"form-label\">Status:</label>\n            <select name=\"status\" id=\"status\" class=\"form-select\">\n                <option value=\"Select\">Select</option>\n                <option value=\"Pass\">Pass</option>\n                <option value=\"Fail\">Fail</option>\n            </select><br><br>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"review_note\" id=\"review-note-label\" class=\"form-label\">Review Note:</label><br>\n            <textarea name=\"review_note\" id=\"review_note\" class=\"form-textarea\" rows=\"4\" cols=\"50\"></textarea><br><br>\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"json_file\" id=\"json-file-label\" class=\"form-label\">Import JSON File:</label>\n            <input type=\"file\" name=\"json_file\" id=\"json_file\" class=\"form-file\"><br><br>\n        </div>\n\n        <button type=\"submit\" id=\"submit-button\" class=\"form-button\">Submit</button>\n    </form>\n\n    <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"about-link\">About</a>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"about-title\">About</h1>\n    <p id=\"about-description\" class=\"about-description\">This web application is designed for reviewing test codes...</p>\n    <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"home-link\">Home</a>\n</body>\n</html>"}, {"file": "models.py", "path": "app/models.py", "code": "from django.db import models\n\n# Define your models here (if needed)"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}], "13": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, blank=True)\n    company = models.CharField(max_length=255, blank=True)\n    phone_number = models.CharField(max_length=20, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name}'"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\ndef home(request):\n    return render(request, 'home.html')\n\n# Customer Management\ndef add_customer(request):\n    return HttpResponse('Add Customer')\n\ndef edit_customer(request, customer_id):\n    return HttpResponse('Edit Customer')\n\ndef delete_customer(request, customer_id):\n    return HttpResponse('Delete Customer')\n\ndef view_customer(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    return render(request, 'view_customer.html', {'customer': customer})\n\n\n# Product Management\ndef add_product(request):\n    return HttpResponse('Add Product')\n\ndef edit_product(request, product_id):\n    return HttpResponse('Edit Product')\n\ndef delete_product(request, product_id):\n    return HttpResponse('Delete Product')\n\ndef view_product(request, product_id):\n    return HttpResponse('View Product')\n\n# Purchase Records\ndef add_purchase_record(request):\n    return HttpResponse('Add Purchase Record')\n\ndef edit_purchase_record(request, purchase_id):\n    return HttpResponse('Edit Purchase Record')\n\ndef delete_purchase_record(request, purchase_id):\n    return HttpResponse('Delete Purchase Record')\n\ndef view_purchase_record(request, purchase_id):\n    return HttpResponse('View Purchase Record')\n\n# Preferred Products Management\ndef add_preferred_product(request, customer_id):\n    return HttpResponse('Add Preferred Product')\n\ndef edit_preferred_product(request, customer_id):\n    return HttpResponse('Edit Preferred Product')\n\ndef delete_preferred_product(request, customer_id, product_id):\n    return HttpResponse('Delete Preferred Product')\n\ndef view_preferred_products(request, customer_id):\n    return HttpResponse('View Preferred Products')\n\n# Sales Analysis\ndef generate_sales_report(request):\n    return HttpResponse('Generate Sales Report')\n\ndef analyze_sales_trends(request):\n    return HttpResponse('Analyze Sales Trends')\n\ndef product_performance_analysis(request):\n    return HttpResponse('Product Performance Analysis')"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n\n    # Customer Management\n    path('customer/add/', views.add_customer, name='add_customer'),\n    path('customer/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customer/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customer/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n\n    # Product Management\n    path('product/add/', views.add_product, name='add_product'),\n    path('product/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('product/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('product/view/<int:product_id>/', views.view_product, name='view_product'),\n\n    # Purchase Records\n    path('purchase/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchase/edit/<int:purchase_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchase/delete/<int:purchase_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchase/view/<int:purchase_id>/', views.view_purchase_record, name='view_purchase_record'),\n\n    # Preferred Products Management\n    path('preferred/add/<int:customer_id>/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred/edit/<int:customer_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred/delete/<int:customer_id>/<int:product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n\n    # Sales Analysis\n    path('sales/report/', views.generate_sales_report, name='generate_sales_report'),\n    path('sales/trends/', views.analyze_sales_trends, name='analyze_sales_trends'),\n    path('sales/performance/', views.product_performance_analysis, name='product_performance_analysis'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# settings.py\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the System!</h1>\n        <p id=\"home-description\" class=\"description\">This is an overview of the system features.</p>\n    </div>\n</body>\n</html>"}, {"file": "view_customer.html", "path": "templates/view_customer.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>View Customer</title>\n</head>\n<body>\n    <div id=\"customer-details-container\" class=\"container\">\n        <h1 id=\"customer-details-title\" class=\"title\">Customer Details</h1>\n        <p id=\"customer-name\" class=\"customer-info\">Name: {{ customer.name }}</p>\n        <p id=\"customer-birthday\" class=\"customer-info\">Birthday: {{ customer.birthday }}</p>\n        <p id=\"customer-age\" class=\"customer-info\">Age: {{ customer.age }}</p>\n        <p id=\"customer-sex\" class=\"customer-info\">Sex: {{ customer.sex }}</p>\n        <p id=\"customer-company\" class=\"customer-info\">Company: {{ customer.company }}</p>\n        <p id=\"customer-phone\" class=\"customer-info\">Phone Number: {{ customer.phone_number }}</p>\n    </div>\n</body>\n</html>"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "tests.py", "path": "myapp/tests.py", "code": ""}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "Django\n"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "14": [{"file": "views.py", "path": "hello_world/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    return render(request, 'hello_world/hello_world.html', {})\n"}, {"file": "urls.py", "path": "hello_world/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('hello/', include('hello_world.urls')),\n]"}, {"file": "hello_world.html", "path": "hello_world/templates/hello_world/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            font-family: sans-serif;\n            background-color: #f0f0f0;\n        }\n        .hello-text {\n            font-size: 2em;\n            color: #333;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"hello-container\" class=\"hello-text-container\">\n        <span id=\"hello-text\" class=\"hello-text\">Hello World</span>\n    </div>\n</body>\n</html>"}, {"file": "apps.py", "path": "hello_world/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloWorldConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hello_world'\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'hello_world' to INSTALLED_APPS\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello_world',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'hello_world/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "manage.py", "path": "project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"title\">Welcome!</h1>\n    <a id=\"helloworld-link\" href=\"{% url 'helloworld' %}\"><button id=\"helloworld-button\" class=\"button\">Go to HelloWorld</button></a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1 id=\"helloworld-title\" class=\"title\">HelloWorld</h1>\n</body>\n</html>"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": ""}, {"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "def start_game():\n    # Logic to start a new game\n    print(\"Starting a new game...\")\n\ndef instructions():\n    # Logic to display game instructions\n    print(\"Game instructions:\")\n    print(\"  - Use commands like 'go north', 'take sword', 'look around'.\")\n\ndef exit_game():\n    # Logic to exit the game\n    print(\"Exiting the game. Goodbye!\")\n    exit()\n\ndef main_menu():\n    # Display the main menu and handle user input\n    while True:\n        print(\"\\nMain Menu:\\n1. Start Game\\n2. Instructions\\n3. Exit\")\n        choice = input(\"Enter your choice: \")\n\n        if choice == '1':\n            start_game()\n            break # Exit the main menu after starting the game\n        elif choice == '2':\n            instructions()\n        elif choice == '3':\n            exit_game()\n        else:\n            print(\"Invalid choice. Please try again.\")"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "def move_player(room, direction):\n    # Logic to move the player to a new room\n    if direction in room.exits:\n        new_room = room.exits[direction]\n        print(f\"You move {direction} to {new_room.name}.\\n{new_room.description}\")\n        return new_room\n    else:\n        print(\"You can't go that way.\")\n        return room\n\ndef look_around(room):\n    # Logic to describe the current room to the player\n    print(room.description)\n    if room.items:\n        print(\"You see the following items:\")\n        for item in room.items:\n            print(f\"- {item}\")\n\ndef pick_item(room, item_name, player):\n    # Logic to allow the player to pick up an item\n    if item_name in room.items:\n        room.items.remove(item_name)\n        player.inventory.append(item_name)\n        print(f\"You picked up the {item_name}.\\n\")\n    else:\n        print(\"That item is not here.\")\n\ndef check_inventory(player):\n    # Logic to display the player's inventory\n    if player.inventory:\n        print(\"Your inventory contains:\")\n        for item in player.inventory:\n            print(f\"- {item}\")\n    else:\n        print(\"Your inventory is empty.\")"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "def parse_command(command, game_state):\n    # Logic to parse the player's command and return an action\n    words = command.lower().split()\n    if not words:\n        return None  # No command entered\n\n    action = {\"verb\": words[0], \"noun\": None, \"direction\": None}\n\n    if len(words) > 1:\n        if action['verb'] == 'go':\n            action['direction'] = words[1]\n        else:\n            action['noun'] = ' '.join(words[1:]) #handles multi-word nouns\n\n    return action\n\ndef update_game_state(game_state, action):\n    # Logic to update the game state based on the player's action\n    player = game_state['player']\n    current_room = game_state['current_room']\n\n    if action is None:\n        print(\"I don't understand.\")\n        return\n\n    if action['verb'] == 'go':\n        game_state['current_room'] = game_environment.move_player(current_room, action['direction'])\n    elif action['verb'] == 'look':\n        game_environment.look_around(current_room)\n    elif action['verb'] == 'take':\n        game_environment.pick_item(current_room, action['noun'], player)\n    elif action['verb'] == 'inventory':\n        game_environment.check_inventory(player)\n    elif action['verb'] == 'help':\n        help_and_support.display_help()\n    else:\n        print(\"I don't understand that command.\")"}, {"file": "help_and_support.py", "path": "src/help_and_support.py", "code": "def display_help():\n    # Display a list of available commands to the player\n    print(\"\\nAvailable commands:\\n\")\n    print(\"  - go [north/south/east/west] - Move in a direction\")\n    print(\"  - look - Describe the current room\")\n    print(\"  - take [item] - Pick up an item\")\n    print(\"  - inventory - Check your inventory\")\n    print(\"  - help - Display this help message\")\n    print(\"  - exit - Quit the game\")"}, {"file": "game.py", "path": "src/game.py", "code": "from src import main_menu\nfrom src import game_environment\nfrom src import game_logic\nfrom src import help_and_support\nfrom src import player\nfrom src import room\n\ndef main():\n    # Initialize game state\n    player_instance = player.Player()\n    # Example rooms\n    room1 = room.Room(\"The Starting Room\", \"You are in a dimly lit room. There is a door to the north and a dusty table.\")\n    room1.items = [\"rusty key\"]\n    room2 = room.Room(\"The North Room\", \"You are in a larger room. There is a chest in the corner.\")\n    room2.items = [\"sword\"]\n\n    # Set up room exits\n    room1.exits = {\"north\": room2}\n    room2.exits = {\"south\": room1}\n\n    game_state = {\"player\": player_instance, \"current_room\": room1}\n\n    print(game_state['current_room'].description)\n\n    # Game loop\n    while True:\n        command = input(\"> \")\n        if command.lower() == \"exit\":\n            print(\"Exiting game.\")\n            break\n        \n        action = game_logic.parse_command(command, game_state)\n        game_logic.update_game_state(game_state, action)\n\nif __name__ == '__main__':\n    main_menu.main_menu()\n    main() # Start the game after exiting the main menu"}, {"file": "player.py", "path": "src/player.py", "code": "class Player:\n    def __init__(self):\n        self.inventory = []  # Initialize an empty inventory"}, {"file": "room.py", "path": "src/room.py", "code": "class Room:\n    def __init__(self, name, description):\n        self.name = name\n        self.description = description\n        self.exits = {}\n        self.items = []"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    author = models.CharField(max_length=100, default=\"Author\")\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=100)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.blog_post.title}'"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import BlogPost, Category, Comment\nfrom django.core.paginator import Paginator, EmptyPage, PageNotAnInteger\nfrom django.db.models import Q\nfrom django.contrib import messages\nfrom django.contrib.auth.decorators import login_required\nfrom .forms import CommentForm, BlogPostForm\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5]\n    context = {'latest_posts': latest_posts}\n    return render(request, 'blog/home.html', context)\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    comments = post.comments.all().order_by('-publication_date')\n    form = CommentForm()\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.blog_post = post\n            comment.save()\n            return redirect('blog_post_detail', pk=pk)\n\n    context = {'post': post, 'comments': comments, 'form': form}\n    return render(request, 'blog/blog_post_detail.html', context)\n\n@login_required\ndef add_post(request):\n    if request.method == 'POST':\n        form = BlogPostForm(request.POST)\n        if form.is_valid():\n            post = form.save()\n            return redirect('blog_post_detail', pk=post.pk)\n    else:\n        form = BlogPostForm()\n    return render(request, 'blog/add_post.html', {'form': form})\n\n@login_required\ndef manage_post(request):\n    posts = BlogPost.objects.all().order_by('-publication_date')\n    context = {'posts': posts}\n    return render(request, 'blog/manage_post.html', context)\n\n@login_required\ndef manage_comments(request):\n    comments = Comment.objects.all().order_by('-publication_date')\n    context = {'comments': comments}\n    return render(request, 'blog/manage_comments.html', context)\n\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\n\ndef categories(request):\n    categories = Category.objects.all()\n    context = {'categories': categories}\n    return render(request, 'blog/categories.html', context)\n\n\ndef archive(request):\n    posts = BlogPost.objects.all().order_by('-publication_date')\n    context = {'posts': posts}\n    return render(request, 'blog/archive.html', context)\n\n\ndef search(request):\n    query = request.GET.get('q')\n    if query:\n        posts = BlogPost.objects.filter(Q(title__icontains=query) | Q(content__icontains=query))\n    else:\n        posts = BlogPost.objects.all()\n    context = {'posts': posts, 'query': query}\n    return render(request, 'blog/search.html', context)\n\n\ndef category_detail(request, category_name):\n    category = get_object_or_404(Category, name=category_name)\n    posts = BlogPost.objects.filter(category=category)\n    context = {'category': category, 'posts': posts}\n    return render(request, 'blog/category_detail.html', context)"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('category/<str:category_name>/', views.category_detail, name='category_detail'),\n    path('archive/', views.archive, name='archive'),\n    path('search/', views.search, name='search'),\n    path('add_post/', views.add_post, name='add_post'),\n    path('manage_post/', views.manage_post, name='manage_post'),\n    path('manage_comments/', views.manage_comments, name='manage_comments'),\n]"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\nfrom .models import Comment, BlogPost\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n        widgets = {\n            'author': forms.TextInput(attrs={'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'class': 'form-control', 'rows': 3})\n        }\n\nclass BlogPostForm(forms.ModelForm):\n    class Meta:\n        model = BlogPost\n        fields = ['title', 'content', 'category']\n        widgets = {\n            'title': forms.TextInput(attrs={'class': 'form-control'}),\n            'content': forms.Textarea(attrs={'class': 'form-control', 'rows': 5}),\n            'category': forms.Select(attrs={'class': 'form-control'})\n        }"}, {"file": "admin.py", "path": "blog/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Category, Comment\n\nadmin.site.register(BlogPost)\nadmin.site.register(Category)\nadmin.site.register(Comment)"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] \n\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n    path('accounts/', include('django.contrib.auth.urls')), #login, logout, password change\n]"}, {"file": "base.html", "path": "templates/blog/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            padding-top: 60px;\n        }\n        .navbar {\n            position: fixed;\n            top: 0;\n            width: 100%;\n            z-index: 1000;\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"mainNav\" class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a id=\"homeLink\" class=\"navbar-brand\" href=\"{% url 'home' %}\">My Blog</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a id=\"aboutLink\" class=\"nav-link\" href=\"{% url 'about' %}\">About</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a id=\"categoriesLink\" class=\"nav-link\" href=\"{% url 'categories' %}\">Categories</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a id=\"archiveLink\" class=\"nav-link\" href=\"{% url 'archive' %}\">Archive</a>\n                </li>\n\n                {% if user.is_authenticated %}\n                    <li class=\"nav-item\">\n                        <a id=\"addPostLink\" class=\"nav-link\" href=\"{% url 'add_post' %}\">Add Post</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"managePostsLink\" class=\"nav-link\" href=\"{% url 'manage_post' %}\">Manage Posts</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"manageCommentsLink\" class=\"nav-link\" href=\"{% url 'manage_comments' %}\">Manage Comments</a>\n                    </li>\n                    <li class=\"nav-item\">\n                         <a class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n                    </li>\n                {% else %}\n                     <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'register' %}\">Register</a>\n                    </li>\n                {% endif %}\n\n            </ul>\n            <form id=\"searchForm\" class=\"form-inline my-2 my-lg-0\" action=\"{% url 'search' %}\" method=\"get\">\n                <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" name=\"q\">\n                <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n            </form>\n        </div>\n    </nav>\n    <main id=\"mainContent\" class=\"container\">\n        {% block content %}{% endblock %}\n    </main>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "home.html", "path": "templates/blog/home.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"homeContent\" class=\"jumbotron\">\n        <h1 id=\"homeTitle\" class=\"display-4\">Latest Blog Posts</h1>\n        <ul id=\"postList\" class=\"list-unstyled\">\n            {% for post in latest_posts %}\n                <li class=\"media\">\n                    <div class=\"media-body\">\n                        <h5 class=\"mt-0 mb-1\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></h5>\n                        <p class=\"text-muted\">Published on: {{ post.publication_date }} by {{post.author}}</p>\n                    </div>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "blog_post_detail.html", "path": "templates/blog/blog_post_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"postDetail\" class=\"container mt-4\">\n        <h1 id=\"postTitle\" class=\"display-4\">{{ post.title }}</h1>\n        <p id=\"postAuthorDate\" class=\"lead\">By <span class=\"font-italic\">{{ post.author }}</span> on {{ post.publication_date }}</p>\n        <p id=\"postContent\" class=\"mt-3\">{{ post.content|linebreaksbr }}</p>\n\n        <hr>\n\n        <div id=\"commentsSection\" class=\"mt-4\">\n            <h2 id=\"commentsHeading\">Comments</h2>\n            {% for comment in comments %}\n                <div class=\"card mb-3\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">{{ comment.author }}</h5>\n                        <p class=\"card-text\">{{ comment.content }}</p>\n                        <p class=\"card-text\"><small class=\"text-muted\">{{ comment.publication_date }}</small></p>\n                    </div>\n                </div>\n            {% endfor %}\n\n            <h3 id=\"addCommentHeading\">Add a Comment</h3>\n            <form id=\"commentForm\" method=\"post\">\n                {% csrf_token %}\n                <div class=\"form-group\">\n                    <label for=\"id_author\">Your Name:</label>\n                    {{ form.author }}\n                </div>\n                <div class=\"form-group\">\n                    <label for=\"id_content\">Comment:</label>\n                    {{ form.content }}\n                </div>\n                <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n            </form>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "about.html", "path": "templates/blog/about.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"aboutPage\" class=\"container mt-4\">\n        <h1 id=\"aboutTitle\" class=\"display-4\">About Us</h1>\n        <p id=\"aboutDescription\">This is a blog about our experiences, thoughts, and ideas. We aim to share valuable content with our readers and create a community of like-minded individuals.</p>\n        <h2 id=\"authorHeading\">Our Team</h2>\n        <div class=\"row\">\n            <div class=\"col-md-4\">\n                <div class=\"card\">\n                    <img src=\"https://via.placeholder.com/150\" class=\"card-img-top\" alt=\"Author 1\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Author 1</h5>\n                        <p class=\"card-text\">Brief bio of Author 1.</p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"col-md-4\">\n                <div class=\"card\">\n                    <img src=\"https://via.placeholder.com/150\" class=\"card-img-top\" alt=\"Author 2\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Author 2</h5>\n                        <p class=\"card-text\">Brief bio of Author 2.</p>\n                    </div>\n                </div>\n            </div>\n             <div class=\"col-md-4\">\n                <div class=\"card\">\n                    <img src=\"https://via.placeholder.com/150\" class=\"card-img-top\" alt=\"Author 3\">\n                    <div class=\"card-body\">\n                        <h5 class=\"card-title\">Author 3</h5>\n                        <p class=\"card-text\">Brief bio of Author 3.</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <h2 id=\"contactHeading\">Contact Us</h2>\n        <p id=\"contactInfo\">Feel free to reach out to us via email at contact@example.com or through our social media channels.</p>\n    </div>\n{% endblock %}"}, {"file": "categories.html", "path": "templates/blog/categories.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"categoriesPage\" class=\"container mt-4\">\n        <h1 id=\"categoriesTitle\" class=\"display-4\">Categories</h1>\n        <ul id=\"categoriesList\" class=\"list-group\">\n            {% for category in categories %}\n                <li class=\"list-group-item\"><a href=\"{% url 'category_detail' category_name=category.name %}\">{{ category.name }}</a></li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "archive.html", "path": "templates/blog/archive.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"archivePage\" class=\"container mt-4\">\n        <h1 id=\"archiveTitle\" class=\"display-4\">Archive</h1>\n        <ul id=\"archiveList\" class=\"list-group\">\n            {% for post in posts %}\n                <li class=\"list-group-item\">{{post.title}} - {{post.publication_date}}</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "search.html", "path": "templates/blog/search.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"searchPage\" class=\"container mt-4\">\n        <h1 id=\"searchResultsTitle\" class=\"display-4\">Search Results for \"{{ query }}\"</h1>\n\n        {% if posts %}\n            <ul id=\"searchResultsList\" class=\"list-group\">\n                {% for post in posts %}\n                    <li class=\"list-group-item\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></li>\n                {% endfor %}\n            </ul>\n        {% else %}\n            <p id=\"noResultsMessage\">No results found.</p>\n        {% endif %}\n    </div>\n{% endblock %}"}, {"file": "add_post.html", "path": "templates/blog/add_post.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"addPostPage\" class=\"container mt-4\">\n        <h1 id=\"addPostTitle\" class=\"display-4\">Add New Post</h1>\n\n        <form id=\"addPostForm\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"id_title\">Title:</label>\n                {{ form.title }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_content\">Content:</label>\n                {{ form.content }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_category\">Category:</label>\n                {{ form.category }}\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "manage_post.html", "path": "templates/blog/manage_post.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"managePostsPage\" class=\"container mt-4\">\n        <h1 id=\"managePostsTitle\" class=\"display-4\">Manage Posts</h1>\n\n        <ul id=\"postsList\" class=\"list-group\">\n            {% for post in posts %}\n                <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    {{post.title}} - {{post.publication_date}}\n                    <div>\n                        <a href=\"#\" class=\"btn btn-sm btn-outline-secondary\">Edit</a>\n                        <a href=\"#\" class=\"btn btn-sm btn-danger\">Delete</a>\n                    </div>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "manage_comments.html", "path": "templates/blog/manage_comments.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"manageCommentsPage\" class=\"container mt-4\">\n        <h1 id=\"manageCommentsTitle\" class=\"display-4\">Manage Comments</h1>\n\n    </div>\n{% endblock %}"}, {"file": "category_detail.html", "path": "templates/blog/category_detail.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n    <div id=\"categoryDetailPage\" class=\"container mt-4\">\n        <h1 id=\"categoryTitle\" class=\"display-4\">Category: {{ category.name }}</h1>\n        <ul id=\"categoryPostsList\" class=\"list-group\">\n            {% for post in posts %}\n                <li class=\"list-group-item\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "register.html", "path": "templates/registration/register.html", "code": "{% extends 'blog/base.html' %}\n\n{% block content %}\n  <h2>Register</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Register</button>\n  </form>\n{% endblock %}"}, {"file": "__init__.py", "path": "blog/__init__.py", "code": ""}, {"file": "apps.py", "path": "blog/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'"}, {"file": "static.py", "path": "blog/static.py", "code": "STATIC_URL = '/static/'"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "static/style.css", "path": "blog/static/style.css", "code": "/* Add your custom styles here */"}]}