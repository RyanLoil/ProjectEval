{"2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass ConversionHistory(models.Model):\n    from_currency = models.CharField(max_length=3)\n    to_currency = models.CharField(max_length=3)\n    amount = models.DecimalField(max_digits=20, decimal_places=2)\n    converted_amount = models.DecimalField(max_digits=20, decimal_places=2)\n    exchange_rate = models.DecimalField(max_digits=10, decimal_places=6)\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.amount} {self.from_currency} to {self.converted_amount} {self.to_currency} on {self.timestamp}'\n\nclass UserSettings(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    update_frequency = models.IntegerField(default=60) # in minutes\n    decimal_places = models.IntegerField(default=2)\n    theme = models.CharField(max_length=20, default='light')\n"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import JsonResponse\nfrom .models import ConversionHistory, UserSettings\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.models import User\n# Placeholder for actual currency conversion logic (API call or library)\ndef convert_currency(from_currency, to_currency, amount):\n    # Replace with real API call or library usage.\n    exchange_rate = 1.1 #example\n    converted_amount = float(amount) * exchange_rate\n    return converted_amount, exchange_rate\n\ndef homepage(request):\n    if request.method == 'POST':\n        from_currency = request.POST.get('from_currency')\n        to_currency = request.POST.get('to_currency')\n        amount = request.POST.get('amount')\n\n        try:\n            amount = float(amount)\n            converted_amount, exchange_rate = convert_currency(from_currency, to_currency, amount)\n            ConversionHistory.objects.create(\n                from_currency=from_currency,\n                to_currency=to_currency,\n                amount=amount,\n                converted_amount=converted_amount,\n                exchange_rate=exchange_rate\n            )\n\n            return render(request, 'currency_converter/homepage.html',\n                          {'converted_amount': converted_amount, 'from_currency': from_currency,\n                           'to_currency': to_currency, 'amount': amount, 'exchange_rate': exchange_rate})\n\n        except ValueError:\n            return render(request, 'currency_converter/homepage.html', {'error': 'Invalid amount'}) #Handle errors\n    return render(request, 'currency_converter/homepage.html')\n\n\n@login_required\ndef settings(request):\n    try:\n        user_settings = UserSettings.objects.get(user=request.user)\n    except UserSettings.DoesNotExist:\n        user_settings = UserSettings(user=request.user)\n\n    if request.method == 'POST':\n        user_settings.update_frequency = request.POST.get('update_frequency')\n        user_settings.decimal_places = request.POST.get('decimal_places')\n        user_settings.theme = request.POST.get('theme')\n        user_settings.save()\n        return redirect('settings') #Redirect to settings page after saving.\n\n    return render(request, 'currency_converter/settings.html', {'user_settings': user_settings})\n\n@login_required\ndef history(request):\n    history_items = ConversionHistory.objects.filter(user=request.user).order_by('-timestamp')\n    return render(request, 'currency_converter/history.html', {'history_items': history_items})\n\n@login_required\ndef clear_history(request):\n    ConversionHistory.objects.filter(user=request.user).delete()\n    return redirect('history')\n"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('settings/', views.settings, name='settings'),\n    path('history/', views.history, name='history'),\n    path('history/clear/', views.clear_history, name='clear_history'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\nclass SettingsForm(forms.Form):\n    update_frequency = forms.IntegerField(label='Update Frequency (minutes)', min_value=1)\n    decimal_places = forms.IntegerField(label='Decimal Places', min_value=0, max_value=8)\n    theme = forms.ChoiceField(label='Theme', choices=[('light', 'Light'), ('dark', 'Dark')])"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import ConversionHistory, UserSettings\n\nadmin.site.register(ConversionHistory)\nadmin.site.register(UserSettings)"}, {"file": "templates/currency_converter/homepage.html", "path": "currency_converter/templates/currency_converter/homepage.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"homepage-title\" class=\"page-title\">Currency Converter</h1>\n    <form id=\"conversion-form\" method=\"post\" class=\"converter-form\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"from_currency\" class=\"form-label\">From Currency:</label>\n            <input type=\"text\" id=\"from_currency\" name=\"from_currency\" value=\"USD\" class=\"form-control\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"to_currency\" class=\"form-label\">To Currency:</label>\n            <input type=\"text\" id=\"to_currency\" name=\"to_currency\" value=\"EUR\" class=\"form-control\">\n        </div>\n        <div class=\"form-group\">\n            <label for=\"amount\" class=\"form-label\">Amount:</label>\n            <input type=\"number\" step=\"0.01\" id=\"amount\" name=\"amount\" value=\"100\" class=\"form-control\">\n        </div>\n\n        <button type=\"submit\" id=\"convert-button\" class=\"btn btn-primary\">Convert</button>\n    </form>\n\n    {% if converted_amount %}\n        <p id=\"conversion-result\" class=\"result-text\">{{ amount }} {{ from_currency }} = {{ converted_amount }} {{ to_currency }}</p>\n        <p id=\"exchange-rate\" class=\"rate-text\">Exchange Rate: {{ exchange_rate }}</p>\n    {% endif %}\n\n    {% if error %}\n        <p id=\"error-message\" class=\"error-text\" style=\"color: red;\">{{ error }}</p>\n    {% endif %}\n{% endblock %}"}, {"file": "templates/currency_converter/settings.html", "path": "currency_converter/templates/currency_converter/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"settings-title\" class=\"page-title\">Settings</h1>\n    <form id=\"settings-form\" method=\"post\" class=\"settings-form\">\n        {% csrf_token %}\n        <div class=\"form-group\">\n            <label for=\"update_frequency\" class=\"form-label\">Update Frequency (minutes):</label>\n            <input type=\"number\" id=\"update_frequency\" name=\"update_frequency\" value=\"{{ user_settings.update_frequency }}\" class=\"form-control\">\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"decimal_places\" class=\"form-label\">Decimal Places:</label>\n            <input type=\"number\" id=\"decimal_places\" name=\"decimal_places\" value=\"{{ user_settings.decimal_places }}\" class=\"form-control\">\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"theme\" class=\"form-label\">Theme:</label>\n            <select id=\"theme\" name=\"theme\" class=\"form-control\">\n                <option value=\"light\" {% if user_settings.theme == 'light' %}selected{% endif %}>Light</option>\n                <option value=\"dark\" {% if user_settings.theme == 'dark' %}selected{% endif %}>Dark</option>\n            </select>\n        </div>\n\n        <button type=\"submit\" id=\"save-settings-button\" class=\"btn btn-primary\">Save</button>\n    </form>\n{% endblock %}"}, {"file": "templates/currency_converter/history.html", "path": "currency_converter/templates/currency_converter/history.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"history-title\" class=\"page-title\">Conversion History</h1>\n    {% if history_items %}\n        <ul id=\"history-list\" class=\"history-list\">\n            {% for item in history_items %}\n                <li class=\"history-item\">{{ item.amount }} {{ item.from_currency }} to {{ item.converted_amount }} {{ item.to_currency }} on {{ item.timestamp }} (Rate: {{ item.exchange_rate }})</li>\n            {% endfor %}\n        </ul>\n        <a href=\"{% url 'clear_history' %}\" id=\"clear-history-link\" class=\"btn btn-danger\">Clear History</a>\n    {% else %}\n        <p id=\"no-history-message\" class=\"no-history\">No conversion history available.</p>\n    {% endif %}\n{% endblock %}"}, {"file": "templates/base.html", "path": "currency_converter/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: sans-serif;\n        }\n        .nav-link {\n            margin-right: 10px;\n        }\n        .page-title {\n            margin-bottom: 20px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        .form-label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        .form-control {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n        }\n        .btn-primary {\n            background-color: #007bff;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .error-text {\n            color: red;\n        }\n        .result-text {\n            margin-top: 10px;\n        }\n        .rate-text {\n            margin-top: 5px;\n        }\n        .history-list {\n            list-style: none;\n            padding: 0;\n        }\n        .history-item {\n            margin-bottom: 5px;\n        }\n        .no-history {\n            font-style: italic;\n            color: #777;\n        }\n\n    </style>\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"{% url 'homepage' %}\">Currency Converter</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'homepage' %}\">Home</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'settings' %}\">Settings</a>\n                </li>\n                <li class=\"nav-item\">\n                    <a class=\"nav-link\" href=\"{% url 'history' %}\">History</a>\n                </li>\n            </ul>\n        </div>\n    </nav>\n    <div class=\"container mt-3\">\n        {% block content %}{% endblock %}\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "currency_converter_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here' # Replace with a strong secret key\nDEBUG = True # Set to False in production\nALLOWED_HOSTS = [] # Add your domain(s) in production\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'currency_converter/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'currency_converter/static')]\nLOGIN_REDIRECT_URL = 'homepage'\nLOGOUT_REDIRECT_URL = 'homepage'"}, {"file": "urls.py", "path": "currency_converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('django.contrib.auth.urls')), # for login/logout\n    path('', include('currency_converter.urls')),\n]"}, {"file": "wsgi.py", "path": "currency_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "3": [{"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\nclass Settings(models.Model):\n    default_password_length = models.IntegerField(default=12)\n    default_uppercase = models.BooleanField(default=True)\n    default_lowercase = models.BooleanField(default=True)\n    default_numbers = models.BooleanField(default=True)\n    default_symbols = models.BooleanField(default=True)\n    custom_symbols = models.CharField(max_length=100, blank=True, null=True)\n\n    def __str__(self):\n        return \"Settings\"\n"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import JsonResponse\nfrom .models import Settings\nimport secrets\nimport string\n\ndef home(request):\n    settings = Settings.objects.first() or Settings.objects.create()\n    if request.method == 'POST':\n        length = int(request.POST.get('length', settings.default_password_length))\n        uppercase = request.POST.get('uppercase') == 'on' if request.POST.get('uppercase') else settings.default_uppercase\n        lowercase = request.POST.get('lowercase') == 'on' if request.POST.get('lowercase') else settings.default_lowercase\n        numbers = request.POST.get('numbers') == 'on' if request.POST.get('numbers') else settings.default_numbers\n        symbols = request.POST.get('symbols') == 'on' if request.POST.get('symbols') else settings.default_symbols\n        exclude_similar = request.POST.get('exclude_similar') == 'on'\n        \n        characters = ''\n        if uppercase: characters += string.ascii_uppercase\n        if lowercase: characters += string.ascii_lowercase\n        if numbers: characters += string.digits\n        if symbols: characters += string.punctuation  # Use default punctuation for now, consider custom symbols later\n\n        if exclude_similar:\n           temp_characters = list(characters)\n           exclude = ['l', '1', 'O', '0', 'i', 'I']\n           characters = ''.join(char for char in temp_characters if char not in exclude)\n\n        if not characters:\n            return render(request, 'home.html', {'error': 'Please select at least one character set.', 'settings': settings})\n\n        password = ''.join(secrets.choice(characters) for i in range(length))\n        \n        return render(request, 'home.html', {'password': password, 'settings': settings})\n    \n    return render(request, 'home.html', {'settings': settings})\n\ndef settings_view(request):\n    settings = Settings.objects.first() or Settings.objects.create()\n    if request.method == 'POST':\n        settings.default_password_length = int(request.POST.get('default_length'))\n        settings.default_uppercase = request.POST.get('default_uppercase') == 'on'\n        settings.default_lowercase = request.POST.get('default_lowercase') == 'on'\n        settings.default_numbers = request.POST.get('default_numbers') == 'on'\n        settings.default_symbols = request.POST.get('default_symbols') == 'on'\n        settings.custom_symbols = request.POST.get('custom_symbols', '')\n        settings.save()\n        return redirect('settings')  # Redirect to the settings page after saving\n    return render(request, 'settings.html', {'settings': settings})\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('settings/', views.settings_view, name='settings'),\n    path('about/', views.about, name='about'),\n]\n"}, {"file": "home.html", "path": "templates/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"main-title\">Password Generator</h1>\n        <form id=\"password-form\" class=\"password-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"length\" class=\"form-label\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" class=\"form-input\" value=\"{{ settings.default_password_length }}\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"uppercase\" class=\"form-label\">Include Uppercase:</label>\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" class=\"form-checkbox\" {% if settings.default_uppercase %}checked{% endif %}>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"lowercase\" class=\"form-label\">Include Lowercase:</label>\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" class=\"form-checkbox\" {% if settings.default_lowercase %}checked{% endif %}>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"numbers\" class=\"form-label\">Include Numbers:</label>\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" class=\"form-checkbox\" {% if settings.default_numbers %}checked{% endif %}>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"symbols\" class=\"form-label\">Include Symbols:</label>\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\" class=\"form-checkbox\" {% if settings.default_symbols %}checked{% endif %}>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"exclude_similar\" class=\"form-label\">Exclude Similar Characters:</label>\n                <input type=\"checkbox\" id=\"exclude_similar\" name=\"exclude_similar\" class=\"form-checkbox\">\n            </div>\n\n            <button type=\"submit\" class=\"generate-button\">Generate Password</button>\n        </form>\n\n        {% if password %}\n            <div class=\"password-result\">\n                <h2 class=\"result-title\">Generated Password:</h2>\n                <p id=\"password\" class=\"generated-password\">{{ password }}</p>\n                <button onclick=\"copyPassword()\" class=\"copy-button\">Copy to Clipboard</button>\n            </div>\n        {% endif %}\n\n        {% if error %}\n            <p id=\"error-message\" class=\"error-message\">{{ error }}</p>\n        {% endif %}\n\n        <div class=\"links\">\n            <a href=\"{% url 'settings' %}\" class=\"settings-link\">Settings</a> | <a href=\"{% url 'about' %}\" class=\"about-link\">About</a>\n        </div>\n    </div>\n\n    <script>\n        function copyPassword() {\n            var passwordText = document.getElementById(\"password\");\n            var textArea = document.createElement(\"textarea\");\n            textArea.value = passwordText.innerText;\n            document.body.appendChild(textArea);\n            textArea.select();\n            document.execCommand(\"Copy\");\n            textArea.remove();\n            alert(\"Password copied to clipboard!\");\n        }\n    </script>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "templates/settings.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"main-title\">Settings</h1>\n        <form id=\"settings-form\" class=\"settings-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"default_length\" class=\"form-label\">Default Password Length:</label>\n                <input type=\"number\" id=\"default_length\" name=\"default_length\" class=\"form-input\" value=\"{{ settings.default_password_length }}\">\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"default_uppercase\" class=\"form-label\">Default Include Uppercase:</label>\n                <input type=\"checkbox\" id=\"default_uppercase\" name=\"default_uppercase\" class=\"form-checkbox\" {% if settings.default_uppercase %}checked{% endif %}>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"default_lowercase\" class=\"form-label\">Default Include Lowercase:</label>\n                <input type=\"checkbox\" id=\"default_lowercase\" name=\"default_lowercase\" class=\"form-checkbox\" {% if settings.default_lowercase %}checked{% endif %}>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"default_numbers\" class=\"form-label\">Default Include Numbers:</label>\n                <input type=\"checkbox\" id=\"default_numbers\" name=\"default_numbers\" class=\"form-checkbox\" {% if settings.default_numbers %}checked{% endif %}>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"default_symbols\" class=\"form-label\">Default Include Symbols:</label>\n                <input type=\"checkbox\" id=\"default_symbols\" name=\"default_symbols\" class=\"form-checkbox\" {% if settings.default_symbols %}checked{% endif %}>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"custom_symbols\" class=\"form-label\">Custom Symbols (optional):</label>\n                <input type=\"text\" id=\"custom_symbols\" name=\"custom_symbols\" class=\"form-input\" value=\"{{ settings.custom_symbols }}\">\n            </div>\n\n            <button type=\"submit\" class=\"save-button\">Save Settings</button>\n        </form>\n\n        <div class=\"links\">\n            <a href=\"{% url 'home' %}\" class=\"home-link\">Home</a> | <a href=\"{% url 'about' %}\" class=\"about-link\">About</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "about.html", "path": "templates/about.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'style.css' %}\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"main-title\">About Password Generator</h1>\n        <p class=\"about-text\">This password generator creates strong, random passwords based on your selected criteria.</p>\n        <p class=\"about-text\"><strong>Why are strong passwords important?</strong></p>\n        <p class=\"about-text\">Strong passwords help protect your online accounts from unauthorized access. They are difficult to guess or crack.</p>\n        <p class=\"about-text\"><strong>How does the password generator work?</strong></p>\n        <p class=\"about-text\">The password generator uses a cryptographically secure random number generator (secrets module in Python) to select characters randomly from the character sets you choose. This ensures that the generated passwords are unpredictable.</p>\n\n        <div class=\"links\">\n            <a href=\"{% url 'home' %}\" class=\"home-link\">Home</a> | <a href=\"{% url 'settings' %}\" class=\"settings-link\">Settings</a>\n        </div>\n    </div>\n</body>\n</html>\n"}, {"file": "style.css", "path": "static/style.css", "code": "body {\n    font-family: sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    min-height: 100vh;\n}\n\n.container {\n    background-color: #fff;\n    padding: 20px;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n    width: 500px;\n    max-width: 90%;\n}\n\n.main-title {\n    text-align: center;\n    color: #333;\n}\n\n.password-form, .settings-form {\n    display: flex;\n    flex-direction: column;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    font-weight: bold;\n    margin-bottom: 5px;\n    display: block;\n}\n\n.form-input {\n    padding: 8px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    width: 100%;\n    box-sizing: border-box;\n}\n\n.form-checkbox {\n    margin-left: 10px;\n}\n\n.generate-button, .save-button {\n    padding: 10px 15px;\n    background-color: #007bff;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n\n.generate-button:hover, .save-button:hover {\n    background-color: #0056b3;\n}\n\n.password-result {\n    margin-top: 20px;\n    border-top: 1px solid #eee;\n    padding-top: 15px;\n}\n\n.result-title {\n    color: #555;\n}\n\n.generated-password {\n    background-color: #f9f9f9;\n    padding: 8px;\n    border: 1px solid #eee;\n    border-radius: 4px;\n    margin-bottom: 10px;\n}\n\n.copy-button {\n    padding: 8px 12px;\n    background-color: #28a745;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s;\n}\n\n.copy-button:hover {\n    background-color: #1e7e34;\n}\n\n.error-message {\n    color: red;\n    margin-top: 10px;\n}\n\n.links {\n    margin-top: 20px;\n    text-align: center;\n}\n\n.links a {\n    margin: 0 10px;\n    color: #007bff;\n    text-decoration: none;\n}\n\n.links a:hover {\n    text-decoration: underline;\n}\n\n.about-text {\n    line-height: 1.6;\n    color: #444;\n}"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "from django.contrib import admin\nfrom .models import Settings\n\nadmin.site.register(Settings)\n"}, {"file": "apps.py", "path": "password_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'\n"}, {"file": "tests.py", "path": "password_generator/tests.py", "code": "from django.test import TestCase\n\n# Create your tests here.\n"}, {"file": "wsgi.py", "path": "password_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator_project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "password_generator_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_asgi_application()\n"}, {"file": "settings.py", "path": "password_generator_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "password_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site),\n    path('', include('password_generator.urls')),\n]\n"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "4": [{"file": "urls.py", "path": "qr_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr, name='generate_qr'),\n    path('display/', views.display_qr, name='display_qr'),\n    path('customize/', views.customize, name='customize'),\n    path('account/signup/', views.signup, name='signup'),\n    path('account/login/', views.login_view, name='login'),\n    path('account/history/', views.qr_history, name='qr_history'),\n    path('account/saved/', views.saved_qrs, name='saved_qrs'),\n    path('pricing/', views.pricing, name='pricing'),\n]\n"}, {"file": "views.py", "path": "qr_generator/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nimport qrcode\nfrom io import BytesIO\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef generate_qr(request):\n    if request.method == 'POST':\n        data = request.POST.get('text_input', '') # Default to text input\n        # Add logic to handle different input types based on form data\n        if request.POST.get('url_input'):\n            data = request.POST.get('url_input')\n        elif request.POST.get('email_input'):\n            data = 'mailto:' + request.POST.get('email_input')\n        elif request.POST.get('phone_input'):\n            data = 'tel:' + request.POST.get('phone_input')\n        # Add logic for other input types (SMS, WiFi, vCard, Plain Content)\n\n        # Error correction and size selection based on request.POST\n        error_correction = request.POST.get('error_correction', 'H')\n        size = int(request.POST.get('size', '10'))\n        margin = int(request.POST.get('margin', '4'))\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.ERROR_CORRECT_L if error_correction == 'L' else qrcode.ERROR_CORRECT_M if error_correction == 'M' else qrcode.ERROR_CORRECT_Q if error_correction == 'Q' else qrcode.ERROR_CORRECT_H,\n            box_size=size,\n            border=margin,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n        img_buffer = BytesIO()\n        img.save(img_buffer, format='PNG')\n        img_buffer.seek(0)\n        request.session['qr_image'] = img_buffer.read().hex()\n\n        return redirect('display_qr')\n    else:\n        return redirect('home')\n\n\ndef display_qr(request):\n    try:\n        img_data_hex = request.session.get('qr_image')\n        img_data = bytes.fromhex(img_data_hex)\n        return render(request, 'qr_display.html', {'qr_image': img_data_hex})\n    except:\n        return redirect('home')\n\ndef customize(request):\n    return render(request, 'customize.html')\n\n\ndef signup(request):\n    return render(request, 'signup.html')\n\n\ndef login_view(request):\n    return render(request, 'login.html')\n\n\ndef qr_history(request):\n    return render(request, 'qr_history.html')\n\n\ndef saved_qrs(request):\n    return render(request, 'saved_qrs.html')\n\n\ndef pricing(request):\n    return render(request, 'pricing.html')\n\n"}, {"file": "models.py", "path": "qr_generator/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass QRCode(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True) # Allow anonymous QR codes\n    qr_data = models.TextField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    image = models.BinaryField(null=True, blank=True) # Store as binary data\n\n    def __str__(self):\n        return f'QR Code for {self.qr_data} created by {self.user}' if self.user else f'QR Code for {self.qr_data} (Anonymous)'\n"}, {"file": "forms.py", "path": "qr_generator/forms.py", "code": "from django import forms\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth.models import User\n\nclass SignUpForm(UserCreationForm):\n    class Meta:\n        model = User\n        fields = ('username', 'email',)\n\nclass LoginForm(AuthenticationForm):\n    pass\n\n# Potentially add a QR code save form here later, if needed."}, {"file": "admin.py", "path": "qr_generator/admin.py", "code": "from django.contrib import admin\nfrom .models import QRCode\n\nadmin.site.register(QRCode)"}, {"file": "settings.py", "path": "qr_generator_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'qr_generator', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_generator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'qr_generator', 'static')] # Add this line\nSESSION_ENGINE = 'django.contrib.sessions.backends.cache'\n"}, {"file": "urls.py", "path": "qr_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "home.html", "path": "qr_generator/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id='home-title' class='title'>QR Code Generator</h1>\n    <form id='qr-form' class='qr-form' method=\"post\" action=\"{% url 'generate_qr' %}\">\n        {% csrf_token %}\n        <div class='form-group'>\n            <label for=\"text_input\" class='form-label'>Text Input:</label><br>\n            <input type=\"text\" id=\"text_input\" name=\"text_input\" class='form-control'><br><br>\n        </div>\n\n        <div class='form-group'>\n            <label for=\"url_input\" class='form-label'>URL Input:</label><br>\n            <input type=\"text\" id=\"url_input\" name=\"url_input\" class='form-control'><br><br>\n        </div>\n\n        <div class='form-group'>\n            <label for=\"email_input\" class='form-label'>Email Input:</label><br>\n            <input type=\"email\" id=\"email_input\" name=\"email_input\" class='form-control'><br><br>\n        </div>\n\n        <div class='form-group'>\n            <label for=\"phone_input\" class='form-label'>Phone Number Input:</label><br>\n            <input type=\"tel\" id=\"phone_input\" name=\"phone_input\" class='form-control'><br><br>\n        </div>\n\n        <div class='form-group'>\n            <label for=\"error_correction\" class='form-label'>Error Correction Level:</label><br>\n            <select id=\"error_correction\" name=\"error_correction\" class='form-control'>\n                <option value=\"L\">Low</option>\n                <option value=\"M\">Medium</option>\n                <option value=\"Q\">High</option>\n                <option value=\"H\" selected>Highest</option>\n            </select><br><br>\n        </div>\n\n        <div class='form-group'>\n            <label for=\"size\" class='form-label'>Size:</label><br>\n            <select id=\"size\" name=\"size\" class='form-control'>\n                <option value=\"5\">5</option>\n                <option value=\"10\" selected>10</option>\n                <option value=\"15\">15</option>\n                <option value=\"20\">20</option>\n            </select><br><br>\n        </div>\n\n        <div class='form-group'>\n            <label for=\"margin\" class='form-label'>Margin:</label><br>\n            <select id=\"margin\" name=\"margin\" class='form-control'>\n                <option value=\"1\">1</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\" selected>4</option>\n            </select><br><br>\n        </div>\n\n        <button type=\"submit\" id='generate-button' class='btn btn-primary'>Generate QR Code</button>\n    </form>\n{% endblock %}"}, {"file": "qr_display.html", "path": "qr_generator/templates/qr_display.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id='qr-display-title' class='title'>Generated QR Code</h1>\n    {% if qr_image %}\n        <img id='qr-image' class='qr-image' src=\"data:image/png;base64,{{ qr_image }}\" alt=\"Generated QR Code\">\n\n        <!-- Example Download Links.  Implement views to serve the downloads -->\n        <a id='download-png' class='download-link' href=\"#\" download=\"qrcode.png\">Download PNG</a><br>\n        <a id='download-svg' class='download-link' href=\"#\" download=\"qrcode.svg\">Download SVG</a><br>\n        <a id='download-jpg' class='download-link' href=\"#\" download=\"qrcode.jpg\">Download JPEG</a><br>\n\n        <a id='share-button' class='share-button' href=\"#\">Share</a>\n\n    {% else %}\n        <p id='no-qr-message' class='message'>No QR code generated yet. Please go back to the <a href=\"{% url 'home' %}\">home page</a> to generate one.</p>\n    {% endif %}\n{% endblock %}"}, {"file": "base.html", "path": "qr_generator/templates/base.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>QR Code Generator</title>\n    <style>\n    body {\n        font-family: sans-serif;\n    }\n\n    nav {\n        margin-bottom: 20px;\n    }\n\n    nav a {\n        margin-right: 10px;\n        text-decoration: none;\n        color: blue;\n    }\n\n    .title {\n        text-align: center;\n        margin-bottom: 20px;\n    }\n\n    .form-group {\n        margin-bottom: 15px;\n    }\n\n    .form-label {\n        display: block;\n        font-weight: bold;\n    }\n\n    .form-control {\n        width: 100%;\n        padding: 8px;\n        border: 1px solid #ccc;\n        border-radius: 4px;\n        box-sizing: border-box;\n    }\n\n    .btn {\n        background-color: #4CAF50;\n        color: white;\n        padding: 10px 20px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        text-decoration: none;\n        display: inline-block;\n    }\n\n    .btn:hover {\n        background-color: #3e8e41;\n    }\n\n    .qr-image {\n        display: block;\n        margin: 0 auto;\n        max-width: 300px;\n        height: auto;\n    }\n\n    .download-link {\n        display: inline-block;\n        margin-right: 10px;\n        text-decoration: none;\n        color: blue;\n    }\n\n    .share-button {\n        background-color: #008CBA;\n        color: white;\n        padding: 10px 20px;\n        border: none;\n        border-radius: 4px;\n        cursor: pointer;\n        text-decoration: none;\n        display: inline-block;\n    }\n\n    .message {\n        text-align: center;\n        font-style: italic;\n    }\n\n    /* Add more styles as needed */\n</style>\n</head>\n<body>\n    <nav id='main-nav' class='main-nav'>\n        <a id='home-link' class='nav-link' href=\"{% url 'home' %}\">Home</a> |\n        <a id='customize-link' class='nav-link' href=\"{% url 'customize' %}\">Customize</a> |\n        {% if user.is_authenticated %}\n            <a id='history-link' class='nav-link' href=\"{% url 'qr_history' %}\">QR History</a> |\n            <a id='saved-link' class='nav-link' href=\"{% url 'saved_qrs' %}\">Saved QR Codes</a> |\n            <a id='logout-link' class='nav-link' href=\"#\">Logout</a>\n        {% else %}\n            <a id='signup-link' class='nav-link' href=\"{% url 'signup' %}\">Sign Up</a> |\n            <a id='login-link' class='nav-link' href=\"{% url 'login' %}\">Log In</a>\n        {% endif %}\n        <a id='pricing-link' class='nav-link' href=\"{% url 'pricing' %}\">Pricing</a>\n    </nav>\n    <hr>\n    <main id='main-content' class='main-content'>\n        {% block content %}{% endblock %}\n    </main>\n</body>\n</html>"}, {"file": "customize.html", "path": "qr_generator/templates/customize.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id='customize-title' class='title'>Customize QR Code (Optional)</h1>\n    <p id='customize-message' class='message'>This feature is under development.</p>\n{% endblock %}"}, {"file": "signup.html", "path": "qr_generator/templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2 id='signup-title' class='title'>Sign Up</h2>\n    <form id='signup-form' class='signup-form' method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id='signup-button' class='btn btn-primary'>Sign Up</button>\n    </form>\n{% endblock %}"}, {"file": "login.html", "path": "qr_generator/templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h2 id='login-title' class='title'>Log In</h2>\n    <form id='login-form' class='login-form' method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\" id='login-button' class='btn btn-primary'>Log In</button>\n    </form>\n{% endblock %}"}, {"file": "qr_history.html", "path": "qr_generator/templates/qr_history.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id='history-title' class='title'>QR Code History</h1>\n    <p id='history-message' class='message'>This feature is under development.</p>\n{% endblock %}"}, {"file": "saved_qrs.html", "path": "qr_generator/templates/saved_qrs.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id='saved-title' class='title'>Saved QR Codes</h1>\n    <p id='saved-message' class='message'>This feature is under development.</p>\n{% endblock %}"}, {"file": "pricing.html", "path": "qr_generator/templates/pricing.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id='pricing-title' class='title'>Pricing Plans</h1>\n    <p id='pricing-message' class='message'>This feature is under development.</p>\n{% endblock %}"}, {"file": "style.css", "path": "qr_generator/static/style.css", "code": "/* You can add your CSS styling here */\nbody {\n    font-family: sans-serif;\n}\n\nnav {\n    margin-bottom: 20px;\n}\n\nnav a {\n    margin-right: 10px;\n    text-decoration: none;\n    color: blue;\n}\n\n.title {\n    text-align: center;\n    margin-bottom: 20px;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n.form-label {\n    display: block;\n    font-weight: bold;\n}\n\n.form-control {\n    width: 100%;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.btn {\n    background-color: #4CAF50;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    text-decoration: none;\n    display: inline-block;\n}\n\n.btn:hover {\n    background-color: #3e8e41;\n}\n\n.qr-image {\n    display: block;\n    margin: 0 auto;\n    max-width: 300px;\n    height: auto;\n}\n\n.download-link {\n    display: inline-block;\n    margin-right: 10px;\n    text-decoration: none;\n    color: blue;\n}\n\n.share-button {\n    background-color: #008CBA;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    text-decoration: none;\n    display: inline-block;\n}\n\n.message {\n    text-align: center;\n    font-style: italic;\n}"}, {"file": "qr_generator_project/asgi.py", "path": "qr_generator_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_generator_project.settings')\n\napplication = get_asgi_application()"}], "5": [{"file": "urls.py", "path": "converter_project/converter_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('convert/', views.convert, name='convert'),\n    path('settings/', views.settings_view, name='settings'),\n    path('help/', views.help_view, name='help'),\n]\n"}, {"file": "views.py", "path": "converter_project/converter_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport markdown\nimport os\nimport bleach\n\ndef homepage(request):\n    return render(request, 'homepage.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        input_type = request.POST.get('input_type', 'markdown')\n        input_text = request.POST.get('input_text', '')\n        flavor = request.POST.get('flavor', 'commonmark')\n\n        if input_type == 'markdown':\n            # Markdown to HTML\n            try:\n                html = markdown.markdown(input_text, extensions=['fenced_code', 'codehilite'])\n                return JsonResponse({'output': html})\n            except Exception as e:\n                return JsonResponse({'error': str(e)}),\n        elif input_type == 'html':\n            # HTML to Markdown\n            try:\n                import html2text\n                h = html2text.HTML2Text()\n                h.ignore_links = True #remove links in converted text.\n                md_text = h.handle(input_text)\n                return JsonResponse({'output': md_text})\n            except Exception as e:\n                return JsonResponse({'error': str(e)})\n\n    return JsonResponse({'error': 'Invalid request method'})\n\ndef settings_view(request):\n   if request.method == 'GET':\n    return render(request, 'settings.html')\n\ndef help_view(request):\n    return render(request, 'help.html')\n\n"}, {"file": "models.py", "path": "converter_project/converter_app/models.py", "code": "from django.db import models\n\n# Define your models here (if needed)\n"}, {"file": "forms.py", "path": "converter_project/converter_app/forms.py", "code": "from django import forms\n\n# Define your forms here (if needed)\n"}, {"file": "homepage.html", "path": "converter_project/converter_app/templates/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown/HTML Converter</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n    <style>\n        body { font-family: sans-serif; }\n        .container { width: 80%; margin: 0 auto; }\n        .form-group { margin-bottom: 15px; }\n        label { display: block; margin-bottom: 5px; }\n        textarea, select { width: 100%; padding: 8px; box-sizing: border-box; }\n        button { padding: 10px 15px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n        #output { border: 1px solid #ccc; padding: 10px; min-height: 100px; }\n        .error { color: red; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"converter-title\" class=\"title\">Markdown/HTML Converter</h1>\n\n        <div id=\"input-type-group\" class=\"form-group\">\n            <label for=\"input_type\" id=\"input-type-label\">Input Type:</label>\n            <select id=\"input_type\" name=\"input_type\" class=\"form-control\">\n                <option value=\"markdown\">Markdown</option>\n                <option value=\"html\">HTML</option>\n            </select>\n        </div>\n\n        <div id=\"input-text-group\" class=\"form-group\">\n            <label for=\"input_text\" id=\"input-text-label\">Input:</label>\n            <textarea id=\"input_text\" name=\"input_text\" rows=\"10\" cols=\"50\" class=\"form-control\"></textarea>\n        </div>\n\n        <div id=\"button-group\" class=\"form-group\">\n            <button id=\"convert_button\" class=\"btn btn-primary\">Convert</button>\n            <button id=\"clear_button\" class=\"btn btn-secondary\">Clear</button>\n        </div>\n\n        <div id=\"output-group\" class=\"form-group\">\n            <label for=\"output\" id=\"output-label\">Output:</label>\n            <div id=\"output\" class=\"output-area\"></div>\n        </div>\n\n        <div id=\"links-group\" class=\"form-group\">\n            <a href=\"{% url 'settings' %}\" id=\"settings-link\">Settings</a> | <a href=\"{% url 'help' %}\" id=\"help-link\">Help</a>\n        </div>\n    </div>\n\n    <script>\n        $(document).ready(function() {\n            $('#convert_button').click(function() {\n                var input_type = $('#input_type').val();\n                var input_text = $('#input_text').val();\n\n                $.ajax({\n                    url: '{% url \"convert\" %}',\n                    type: 'POST',\n                    data: { input_type: input_type, input_text: input_text, csrfmiddlewaretoken: '{{ csrf_token }}' },\n                    success: function(response) {\n                        if (response.output) {\n                            $('#output').html(response.output);\n                        } else {\n                            $('#output').html('<div class=\"error\">Error: ' + response.error + '</div>');\n                        }\n                    },\n                    error: function(xhr, status, error) {\n                        $('#output').html('<div class=\"error\">AJAX Error: ' + error + '</div>');\n                    }\n                });\n            });\n\n            $('#clear_button').click(function() {\n                $('#input_text').val('');\n                $('#output').html('');\n            });\n        });\n    </script>\n</body>\n</html>\n"}, {"file": "settings.html", "path": "converter_project/converter_app/templates/settings.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Settings</title>\n    <style>\n        body { font-family: sans-serif; }\n        .container { width: 80%; margin: 0 auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"settings-title\" class=\"title\">Settings</h1>\n        <p id=\"settings-content\">Settings page content here.</p>\n        <a href=\"{% url 'homepage' %}\" id=\"homepage-link\">Back to Homepage</a>\n    </div>\n</body>\n</html>\n"}, {"file": "help.html", "path": "converter_project/converter_app/templates/help.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Help</title>\n    <style>\n        body { font-family: sans-serif; }\n        .container { width: 80%; margin: 0 auto; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"help-title\" class=\"title\">Help</h1>\n        <p id=\"help-content\">Helpful information here.</p>\n        <a href=\"{% url 'homepage' %}\" id=\"homepage-link\">Back to Homepage</a>\n    </div>\n</body>\n</html>\n"}, {"file": "style.css", "path": "converter_project/converter_app/static/converter_app/style.css", "code": "/* Styles for the converter app */"}, {"file": "wsgi.py", "path": "converter_project/converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "settings.py", "path": "converter_project/converter_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter_app', # Our app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'converter_app/templates')], # Template Directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'converter_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'converter_app/static')]"}, {"file": "urls.py", "path": "converter_project/converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter_app.urls')),\n]"}], "7": [{"file": "models.py", "path": "finance_app/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Transaction(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    date = models.DateField()\n    description = models.CharField(max_length=255)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.CharField(max_length=100)\n    transaction_type = models.CharField(max_length=10, choices=[('income', 'Income'), ('expense', 'Expense')])\n\n    def __str__(self):\n        return self.description\n\nclass Budget(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    category = models.CharField(max_length=100)\n    budgeted_amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.category"}, {"file": "views.py", "path": "finance_app/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Transaction, Budget\nfrom django.db.models import Sum\nfrom django.http import HttpResponse\nimport json\n\ndef landing_page(request):\n    #Implement logic for landing page, sign up, login, etc.\n    return render(request, 'landing_page.html')\n\ndef signup_view(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\n@login_required\ndef dashboard(request):\n    transactions = Transaction.objects.filter(user=request.user).order_by('-date')\n    total_income = Transaction.objects.filter(user=request.user, transaction_type='income').aggregate(Sum('amount'))['amount__sum'] or 0\n    total_expense = Transaction.objects.filter(user=request.user, transaction_type='expense').aggregate(Sum('amount'))['amount__sum'] or 0\n    balance = total_income - total_expense\n\n    #Balance over time would require a more complex query, can return recent transactions for now.  See if the user wants to implement this\n\n    return render(request, 'dashboard.html', {'transactions': transactions, 'balance': balance, 'total_income': total_income, 'total_expense': total_expense})\n\n@login_required\ndef transaction_list(request):\n    # Implement transaction list, filtering, adding, editing, deleting\n    if request.method == 'POST':\n        date = request.POST.get('date')\n        description = request.POST.get('description')\n        amount = request.POST.get('amount')\n        category = request.POST.get('category')\n        transaction_type = request.POST.get('transaction_type')\n\n        Transaction.objects.create(user=request.user, date=date, description=description, amount=amount, category=category, transaction_type=transaction_type)\n\n    transactions = Transaction.objects.filter(user=request.user).order_by('-date')\n    return render(request, 'transaction_list.html', {'transactions': transactions})\n\n@login_required\ndef edit_transaction(request, transaction_id):\n    # Logic to handle editing of a transaction\n    transaction = Transaction.objects.get(pk=transaction_id, user=request.user)\n\n    if request.method == 'POST':\n        transaction.date = request.POST.get('date')\n        transaction.description = request.POST.get('description')\n        transaction.amount = request.POST.get('amount')\n        transaction.category = request.POST.get('category')\n        transaction.transaction_type = request.POST.get('transaction_type')\n        transaction.save()\n        return redirect('transaction_list')\n\n    return render(request, 'edit_transaction.html', {'transaction': transaction})\n\n@login_required\ndef delete_transaction(request, transaction_id):\n    # Logic to handle deleting of a transaction\n    transaction = Transaction.objects.get(pk=transaction_id, user=request.user)\n    if request.method == 'POST':\n        transaction.delete()\n        return redirect('transaction_list')\n\n    return render(request, 'delete_transaction.html', {'transaction': transaction})\n\n@login_required\ndef budgeting_page(request):\n    # Implement budget creation, editing, and tracking\n    if request.method == 'POST':\n        category = request.POST.get('category')\n        budgeted_amount = request.POST.get('budgeted_amount')\n\n        Budget.objects.create(user=request.user, category=category, budgeted_amount=budgeted_amount)\n\n    budgets = Budget.objects.filter(user=request.user)\n    return render(request, 'budgeting_page.html', {'budgets': budgets})\n\n@login_required\ndef settings_page(request):\n    # Implement account information, currency settings, etc.\n    return render(request, 'settings_page.html')\n\ndef logout_view(request):\n    logout(request)\n    return redirect('landing_page')\n\ndef export_transactions(request):\n    # Example export to JSON\n    transactions = list(Transaction.objects.filter(user=request.user).values())\n    return HttpResponse(json.dumps(transactions), content_type='application/json')"}, {"file": "urls.py", "path": "finance_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.landing_page, name='landing_page'),\n    path('signup/', views.signup_view, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('transactions/', views.transaction_list, name='transaction_list'),\n    path('transactions/edit/<int:transaction_id>/', views.edit_transaction, name='edit_transaction'),\n    path('transactions/delete/<int:transaction_id>/', views.delete_transaction, name='delete_transaction'),\n    path('budgeting/', views.budgeting_page, name='budgeting_page'),\n    path('settings/', views.settings_page, name='settings_page'),\n    path('export/', views.export_transactions, name='export_transactions')\n]"}, {"file": "forms.py", "path": "finance_app/forms.py", "code": "from django import forms\n\n# You can add custom forms here if needed, e.g., for transaction creation/editing\nclass TransactionForm(forms.Form):\n    date = forms.DateField(label='Date')\n    description = forms.CharField(label='Description', max_length=255)\n    amount = forms.DecimalField(label='Amount')\n    category = forms.CharField(label='Category', max_length=100)\n    transaction_type = forms.ChoiceField(label='Type', choices=[('income', 'Income'), ('expense', 'Expense')])"}, {"file": "settings.py", "path": "finance_project/settings.py", "code": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'finance_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'finance_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'finance_project.wsgi.application'\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = []\n\nLOGIN_REDIRECT_URL = 'dashboard'\nLOGOUT_REDIRECT_URL = 'landing_page'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Finance App{% endblock %}</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n\n        nav {\n            background-color: #333;\n            color: white;\n            padding: 10px 0;\n            text-align: center;\n        }\n\n        nav a {\n            color: white;\n            text-decoration: none;\n            padding: 10px 20px;\n            display: inline-block;\n        }\n\n        nav a:hover {\n            background-color: #555;\n        }\n\n        .container {\n            width: 80%;\n            margin: auto;\n            padding: 20px;\n            background-color: white;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        }\n\n        footer {\n            text-align: center;\n            padding: 20px;\n            background-color: #333;\n            color: white;\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"dashboard-link\" class=\"nav-link\" href=\"{% url 'dashboard' %}\">Dashboard</a>\n        <a id=\"transactions-link\" class=\"nav-link\" href=\"{% url 'transaction_list' %}\">Transactions</a>\n        <a id=\"budgeting-link\" class=\"nav-link\" href=\"{% url 'budgeting_page' %}\">Budgeting</a>\n        <a id=\"settings-link\" class=\"nav-link\" href=\"{% url 'settings_page' %}\">Settings</a>\n        <a id=\"logout-link\" class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n    </nav>\n\n    <div id=\"content\" class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <footer id=\"main-footer\" class=\"main-footer\">\n        <p>&copy; 2024 Finance App. All rights reserved.</p>\n    </footer>\n</body>\n</html>"}, {"file": "landing_page.html", "path": "templates/landing_page.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"landing-page\" class=\"landing-page\">\n        <h1 id=\"welcome-heading\" class=\"welcome-heading\">Welcome to the Finance App</h1>\n        <p id=\"tagline\" class=\"tagline\">Track your income and expenses easily!</p>\n        <div id=\"auth-links\" class=\"auth-links\">\n            <a id=\"signup-link\" class=\"auth-link signup-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n            <a id=\"login-link\" class=\"auth-link login-link\" href=\"{% url 'login' %}\">Login</a>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "dashboard.html", "path": "templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"dashboard\" class=\"dashboard\">\n        <h1 id=\"dashboard-heading\" class=\"dashboard-heading\">Dashboard</h1>\n        <p id=\"balance\" class=\"balance\">Current Balance: {{ balance }}</p>\n        <p id=\"income\" class=\"income\">Total Income: {{ total_income }}</p>\n        <p id=\"expenses\" class=\"expenses\">Total Expenses: {{ total_expense }}</p>\n\n        <h2 id=\"recent-transactions-heading\" class=\"recent-transactions-heading\">Recent Transactions</h2>\n        <ul id=\"transactions-list\" class=\"transactions-list\">\n            {% for transaction in transactions %}\n                <li class=\"transaction-item\">{{ transaction.date }} - {{ transaction.description }} - {{ transaction.amount }}</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "transaction_list.html", "path": "templates/transaction_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"transaction-list\" class=\"transaction-list\">\n        <h1 id=\"transactions-heading\" class=\"transactions-heading\">Transactions</h1>\n\n        <form id=\"add-transaction-form\" class=\"add-transaction-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"date\" class=\"form-label\">Date:</label><br>\n                <input type=\"date\" id=\"date\" name=\"date\" class=\"form-control\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"form-label\">Description:</label><br>\n                <input type=\"text\" id=\"description\" name=\"description\" class=\"form-control\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"amount\" class=\"form-label\">Amount:</label><br>\n                <input type=\"number\" step=\"0.01\" id=\"amount\" name=\"amount\" class=\"form-control\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"category\" class=\"form-label\">Category:</label><br>\n                <input type=\"text\" id=\"category\" name=\"category\" class=\"form-control\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"transaction_type\" class=\"form-label\">Type:</label><br>\n                <select id=\"transaction_type\" name=\"transaction_type\" class=\"form-control\">\n                    <option value=\"income\">Income</option>\n                    <option value=\"expense\">Expense</option>\n                </select><br><br>\n            </div>\n\n            <button type=\"submit\" id=\"add-transaction-button\" class=\"btn btn-primary\">Add Transaction</button>\n        </form>\n\n        <ul id=\"transactions-list\" class=\"transactions-list\">\n            {% for transaction in transactions %}\n                <li class=\"transaction-item\">\n                    {{ transaction.date }} - {{ transaction.description }} - {{ transaction.amount }} -\n                    <a href=\"{% url 'edit_transaction' transaction.id %}\" class=\"edit-link\">Edit</a> -\n                    <a href=\"{% url 'delete_transaction' transaction.id %}\" class=\"delete-link\">Delete</a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "edit_transaction.html", "path": "templates/edit_transaction.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"edit-transaction\" class=\"edit-transaction\">\n        <h1 id=\"edit-transaction-heading\" class=\"edit-transaction-heading\">Edit Transaction</h1>\n        <form id=\"edit-transaction-form\" class=\"edit-transaction-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"date\" class=\"form-label\">Date:</label><br>\n                <input type=\"date\" id=\"date\" name=\"date\" class=\"form-control\" value=\"{{ transaction.date|date:'Y-m-d' }}\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"description\" class=\"form-label\">Description:</label><br>\n                <input type=\"text\" id=\"description\" name=\"description\" class=\"form-control\" value=\"{{ transaction.description }}\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"amount\" class=\"form-label\">Amount:</label><br>\n                <input type=\"number\" step=\"0.01\" id=\"amount\" name=\"amount\" class=\"form-control\" value=\"{{ transaction.amount }}\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"category\" class=\"form-label\">Category:</label><br>\n                <input type=\"text\" id=\"category\" name=\"category\" class=\"form-control\" value=\"{{ transaction.category }}\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"transaction_type\" class=\"form-label\">Type:</label><br>\n                <select id=\"transaction_type\" name=\"transaction_type\" class=\"form-control\">\n                    <option value=\"income\" {% if transaction.transaction_type == 'income' %}selected{% endif %}>Income</option>\n                    <option value=\"expense\" {% if transaction.transaction_type == 'expense' %}selected{% endif %}>Expense</option>\n                </select><br><br>\n            </div>\n\n            <button type=\"submit\" id=\"save-changes-button\" class=\"btn btn-primary\">Save Changes</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "delete_transaction.html", "path": "templates/delete_transaction.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"delete-transaction\" class=\"delete-transaction\">\n        <h1 id=\"delete-transaction-heading\" class=\"delete-transaction-heading\">Delete Transaction</h1>\n        <p id=\"confirmation-message\" class=\"confirmation-message\">Are you sure you want to delete transaction: {{ transaction.description }}?</p>\n        <form id=\"delete-transaction-form\" class=\"delete-transaction-form\" method=\"post\">\n            {% csrf_token %}\n            <button type=\"submit\" id=\"confirm-delete-button\" class=\"btn btn-danger\">Confirm Delete</button>\n        </form>\n        <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'transaction_list' %}\">Cancel</a>\n    </div>\n{% endblock %}"}, {"file": "budgeting_page.html", "path": "templates/budgeting_page.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"budgeting-page\" class=\"budgeting-page\">\n        <h1 id=\"budgeting-heading\" class=\"budgeting-heading\">Budgeting</h1>\n\n        <form id=\"add-budget-form\" class=\"add-budget-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"category\" class=\"form-label\">Category:</label><br>\n                <input type=\"text\" id=\"category\" name=\"category\" class=\"form-control\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"budgeted_amount\" class=\"form-label\">Budgeted Amount:</label><br>\n                <input type=\"number\" step=\"0.01\" id=\"budgeted_amount\" name=\"budgeted_amount\" class=\"form-control\"><br><br>\n            </div>\n\n            <button type=\"submit\" id=\"add-budget-button\" class=\"btn btn-primary\">Add Budget</button>\n        </form>\n\n        <ul id=\"budgets-list\" class=\"budgets-list\">\n            {% for budget in budgets %}\n                <li class=\"budget-item\">{{ budget.category }} - {{ budget.budgeted_amount }}</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "settings_page.html", "path": "templates/settings_page.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"settings-page\" class=\"settings-page\">\n        <h1 id=\"settings-heading\" class=\"settings-heading\">Settings</h1>\n        <p id=\"settings-description\" class=\"settings-description\">Implement settings options here.</p>\n        <a id=\"export-transactions-link\" class=\"export-transactions-link\" href=\"{% url 'export_transactions' %}\">Export Transactions</a>\n    </div>\n{% endblock %}"}, {"file": "signup.html", "path": "templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"signup-page\" class=\"signup-page\">\n        <h2 id=\"signup-heading\" class=\"signup-heading\">Sign up</h2>\n        <form id=\"signup-form\" class=\"signup-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"signup-button\" class=\"btn btn-primary\">Sign up</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "login.html", "path": "templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"login-page\" class=\"login-page\">\n        <h2 id=\"login-heading\" class=\"login-heading\">Log in</h2>\n        <form id=\"login-form\" class=\"login-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" id=\"login-button\" class=\"btn btn-primary\">Log in</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "wsgi.py", "path": "finance_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'finance_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "urls.py", "path": "finance_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('finance_app.urls'))\n]"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'finance_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    location = models.CharField(max_length=200, blank=True, null=True)\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    completed = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.title\n\nclass RecurringEvent(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n    recurrence_rule = models.CharField(max_length=200)\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import JsonResponse\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Event, RecurringEvent\nfrom django.utils import timezone\nfrom django.contrib.auth.models import User\nimport json\n\n@login_required\ndef home(request):\n    today = timezone.now().date()\n    events = Event.objects.filter(user=request.user, start_time__date=today).order_by('start_time')\n    return render(request, 'calendar_app/home.html', {'events': events, 'today': today})\n\n@login_required\ndef day_view(request, year, month, day):\n    date = timezone.datetime(year, month, day).date()\n    events = Event.objects.filter(user=request.user, start_time__date=date).order_by('start_time')\n    return render(request, 'calendar_app/day_view.html', {'events': events, 'date': date})\n\n\n@login_required\ndef add_event(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        title = data.get('title')\n        description = data.get('description')\n        start_time = data.get('start_time')\n        end_time = data.get('end_time')\n        location = data.get('location')\n        user = request.user  # Use the logged-in user\n\n        Event.objects.create(title=title, description=description, start_time=start_time, end_time=end_time, location=location, user=user)\n        return JsonResponse({'status': 'success'})\n    else:\n        return JsonResponse({'status': 'error', 'message': 'Invalid request method'}) #render(request, 'calendar_app/add_event.html')\n\n@login_required\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        event.title = data.get('title')\n        event.description = data.get('description')\n        event.start_time = data.get('start_time')\n        event.end_time = data.get('end_time')\n        event.location = data.get('location')\n        event.save()\n        return JsonResponse({'status': 'success'})\n    else:\n      return JsonResponse({'status': 'error', 'message': 'Invalid request method'}) #render(request, 'calendar_app/edit_event.html', {'event': event})\n\n@login_required\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    event.delete()\n    return redirect('home')\n\n@login_required\ndef mark_complete(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    event.completed = True\n    event.save()\n    return redirect('home')\n\n@login_required\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id, user=request.user)\n    return render(request, 'calendar_app/event_details.html', {'event': event})\n\n@login_required\ndef settings(request):\n    return render(request, 'calendar_app/settings.html')\n\n@login_required\ndef recurring_events(request):\n    return render(request, 'calendar_app/recurring_events.html')"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('day/<int:year>/<int:month>/<int:day>/', views.day_view, name='day_view'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('edit_event/<int:event_id>/', views.edit_event, name='edit_event'),\n    path('delete_event/<int:event_id>/', views.delete_event, name='delete_event'),\n    path('mark_complete/<int:event_id>/', views.mark_complete, name='mark_complete'),\n    path('event_details/<int:event_id>/', views.event_details, name='event_details'),\n    path('settings/', views.settings, name='settings'),\n    path('recurring_events/', views.recurring_events, name='recurring_events'),\n]"}, {"file": "admin.py", "path": "calendar_app/admin.py", "code": "from django.contrib import admin\nfrom .models import Event, RecurringEvent\n\nadmin.site.register(Event)\nadmin.site.register(RecurringEvent)"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time', 'location']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local' }),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local' }),\n        }"}, {"file": "home.html", "path": "calendar_app/templates/calendar_app/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mt-4\">\n    <h1 id=\"home-title\" class=\"mb-4\">Today's Events ({{ today }})</h1>\n    <a id=\"add-event-link\" class=\"btn btn-primary mb-3\" href=\"{% url 'add_event' %}\">Add Event</a>\n\n    <ul id=\"event-list\" class=\"list-group\">\n        {% for event in events %}\n        <li id=\"event-{{ event.id }}\" class=\"list-group-item d-flex justify-content-between align-items-center\">\n            <div>\n                <h5 class=\"mb-1\">{{ event.title }}</h5>\n                <p class=\"mb-1\">{{ event.start_time|date:\"H:i\" }} - {{ event.end_time|date:\"H:i\" }}</p>\n                {% if event.completed %}\n                    <span class=\"badge bg-success\">Completed</span>\n                {% endif %}\n            </div>\n            <div>\n                <a id=\"event-details-{{ event.id }}\" href=\"{% url 'event_details' event.id %}\" class=\"btn btn-sm btn-info\">Details</a>\n                <a id=\"edit-event-{{ event.id }}\" href=\"{% url 'edit_event' event.id %}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                <a id=\"delete-event-{{ event.id }}\" href=\"{% url 'delete_event' event.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                {% if not event.completed %}\n                    <a id=\"mark-complete-{{ event.id }}\" href=\"{% url 'mark_complete' event.id %}\" class=\"btn btn-sm btn-success\">Mark Complete</a>\n                {% endif %}\n            </div>\n        </li>\n        {% empty %}\n        <li class=\"list-group-item\">No events for today.</li>\n        {% endfor %}\n    </ul>\n</div>\n{% endblock %}"}, {"file": "day_view.html", "path": "calendar_app/templates/calendar_app/day_view.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mt-4\">\n    <h1 id=\"day-view-title\" class=\"mb-4\">Events for {{ date }}</h1>\n    <a id=\"add-event-link\" class=\"btn btn-primary mb-3\" href=\"{% url 'add_event' %}\">Add Event</a>\n\n    <ul id=\"event-list\" class=\"list-group\">\n        {% for event in events %}\n        <li id=\"event-{{ event.id }}\" class=\"list-group-item d-flex justify-content-between align-items-center\">\n            <div>\n                <h5 class=\"mb-1\">{{ event.title }}</h5>\n                <p class=\"mb-1\">{{ event.start_time|date:\"H:i\" }} - {{ event.end_time|date:\"H:i\" }}</p>\n                {% if event.completed %}\n                    <span class=\"badge bg-success\">Completed</span>\n                {% endif %}\n            </div>\n            <div>\n                <a id=\"event-details-{{ event.id }}\" href=\"{% url 'event_details' event.id %}\" class=\"btn btn-sm btn-info\">Details</a>\n                <a id=\"edit-event-{{ event.id }}\" href=\"{% url 'edit_event' event.id %}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n                <a id=\"delete-event-{{ event.id }}\" href=\"{% url 'delete_event' event.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n                {% if not event.completed %}\n                    <a id=\"mark-complete-{{ event.id }}\" href=\"{% url 'mark_complete' event.id %}\" class=\"btn btn-sm btn-success\">Mark Complete</a>\n                {% endif %}\n            </div>\n        </li>\n        {% empty %}\n        <li class=\"list-group-item\">No events for this day.</li>\n        {% endfor %}\n    </ul>\n\n    <a id=\"back-home-link\" href=\"{% url 'home' %}\" class=\"btn btn-secondary mt-3\">Back to Home</a>\n</div>\n{% endblock %}"}, {"file": "event_details.html", "path": "calendar_app/templates/calendar_app/event_details.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mt-4\">\n    <h1 id=\"event-details-title\" class=\"mb-4\">Event Details</h1>\n\n    <div id=\"event-details-card\" class=\"card\">\n        <div class=\"card-body\">\n            <h5 id=\"event-title\" class=\"card-title\">{{ event.title }}</h5>\n            <h6 id=\"event-time\" class=\"card-subtitle mb-2 text-muted\">{{ event.start_time|date:\"F d, Y H:i\" }} - {{ event.end_time|date:\"F d, Y H:i\" }}</h6>\n            <p id=\"event-description\" class=\"card-text\">{{ event.description }}</p>\n            {% if event.location %}\n                <p id=\"event-location\" class=\"card-text\">Location: {{ event.location }}</p>\n            {% endif %}\n            {% if event.completed %}\n                <p id=\"event-status\" class=\"card-text\"><span class=\"badge bg-success\">Completed</span></p>\n            {% else %}\n                <p id=\"event-status\" class=\"card-text\"><span class=\"badge bg-warning\">Incomplete</span></p>\n            {% endif %}\n            <a id=\"edit-event-link\" href=\"{% url 'edit_event' event.id %}\" class=\"btn btn-sm btn-secondary\">Edit</a>\n            <a id=\"delete-event-link\" href=\"{% url 'delete_event' event.id %}\" class=\"btn btn-sm btn-danger\">Delete</a>\n            <a id=\"back-home-link\" href=\"{% url 'home' %}\" class=\"btn btn-secondary\">Back to Home</a>\n        </div>\n    </div>\n</div>\n{% endblock %}"}, {"file": "settings.html", "path": "calendar_app/templates/calendar_app/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mt-4\">\n    <h1 id=\"settings-title\" class=\"mb-4\">Settings</h1>\n    <p id=\"settings-description\">This is the settings page.</p>\n</div>\n{% endblock %}"}, {"file": "recurring_events.html", "path": "calendar_app/templates/calendar_app/recurring_events.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mt-4\">\n    <h1 id=\"recurring-events-title\" class=\"mb-4\">Recurring Events</h1>\n    <p id=\"recurring-events-description\">This page will display recurring events.</p>\n</div>\n{% endblock %}"}, {"file": "base.html", "path": "calendar_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Calendar App{% endblock %}</title>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <div class=\"container-fluid\">\n            <a id=\"nav-brand\" class=\"navbar-brand\" href=\"{% url 'home' %}\">Calendar</a>\n            <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span class=\"navbar-toggler-icon\"></span>\n            </button>\n            <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n                <ul class=\"navbar-nav\">\n                    <li class=\"nav-item\">\n                        <a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"nav-recurring-events\" class=\"nav-link\" href=\"{% url 'recurring_events' %}\">Recurring Events</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"nav-settings\" class=\"nav-link\" href=\"{% url 'settings' %}\">Settings</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a id=\"nav-logout\" class=\"nav-link\" href=\"/logout\">Logout</a>\n                    </li>\n                </ul>\n            </div>\n        </div>\n    </nav>\n\n    <div id=\"content\" class=\"container mt-3\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js\"></script>\n</body>\n</html>"}, {"file": "add_event.html", "path": "calendar_app/templates/calendar_app/add_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mt-4\">\n    <h1 id=\"add-event-title\" class=\"mb-4\">Add Event</h1>\n    <form id=\"add-event-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"mb-3\">\n            <label for=\"title\" class=\"form-label\">Title:</label>\n            <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" required>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"description\" class=\"form-label\">Description:</label>\n            <textarea class=\"form-control\" id=\"description\" name=\"description\"></textarea>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"start_time\" class=\"form-label\">Start Time:</label>\n            <input type=\"datetime-local\" class=\"form-control\" id=\"start_time\" name=\"start_time\" required>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"end_time\" class=\"form-label\">End Time:</label>\n            <input type=\"datetime-local\" class=\"form-control\" id=\"end_time\" name=\"end_time\" required>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"location\" class=\"form-label\">Location:</label>\n            <input type=\"text\" class=\"form-control\" id=\"location\" name=\"location\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Add Event</button>\n        <a href=\"{% url 'home' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "edit_event.html", "path": "calendar_app/templates/calendar_app/edit_event.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<div class=\"container mt-4\">\n    <h1 id=\"edit-event-title\" class=\"mb-4\">Edit Event</h1>\n    <form id=\"edit-event-form\" method=\"post\">\n        {% csrf_token %}\n        <div class=\"mb-3\">\n            <label for=\"title\" class=\"form-label\">Title:</label>\n            <input type=\"text\" class=\"form-control\" id=\"title\" name=\"title\" value=\"{{ event.title }}\" required>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"description\" class=\"form-label\">Description:</label>\n            <textarea class=\"form-control\" id=\"description\" name=\"description\">{{ event.description }}</textarea>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"start_time\" class=\"form-label\">Start Time:</label>\n            <input type=\"datetime-local\" class=\"form-control\" id=\"start_time\" name=\"start_time\" value=\"{{ event.start_time|date:'Y-m-d\\TH:i' }}\" required>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"end_time\" class=\"form-label\">End Time:</label>\n            <input type=\"datetime-local\" class=\"form-control\" id=\"end_time\" name=\"end_time\" value=\"{{ event.end_time|date:'Y-m-d\\TH:i' }}\" required>\n        </div>\n        <div class=\"mb-3\">\n            <label for=\"location\" class=\"form-label\">Location:</label>\n            <input type=\"text\" class=\"form-control\" id=\"location\" name=\"location\" value=\"{{ event.location }}\">\n        </div>\n        <button type=\"submit\" class=\"btn btn-primary\">Save Changes</button>\n        <a href=\"{% url 'home' %}\" class=\"btn btn-secondary\">Cancel</a>\n    </form>\n</div>\n{% endblock %}"}, {"file": "settings.py", "path": "calendar_project/settings.py", "code": "from pathlib import Path\nimport os\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-4q%*6$t2(5+w&s#y3^wr%a=)m34b9p-aqc6r9k2#0t)27a5%8'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'calendar_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'"}, {"file": "urls.py", "path": "calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n    path('login/', auth_views.LoginView.as_view(), name='login'),\n    path('logout/', auth_views.LogoutView.as_view(next_page='home'), name='logout'),\n]"}, {"file": "wsgi.py", "path": "calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "Django\npython-dateutil\n"}], "9": [{"file": "models.py", "path": "chatbot_app/models.py", "code": "from django.db import models\n\n# Define your models here.  You might not need any, depending on functionality.\n\nclass ExampleModel(models.Model):\n    # Example model, remove if not needed.\n    name = models.CharField(max_length=255)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "chatbot_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\n# Create your views here.\n\n\ndef home(request):\n    # Implement the 'Home' page functionality (Chat with AI, etc.) based on your checklist\n    context = {}\n    return render(request, 'chatbot_app/home.html', context)\n\n\ndef features(request):\n    # Implement the 'Features' page functionality based on your checklist\n    context = {}\n    return render(request, 'chatbot_app/features.html', context)\n\n\ndef use_cases(request):\n    # Implement the 'Use Cases' page functionality based on your checklist\n    context = {}\n    return render(request, 'chatbot_app/use_cases.html', context)\n\n\ndef pricing(request):\n    # Implement the 'Pricing' page functionality based on your checklist\n    context = {}\n    return render(request, 'chatbot_app/pricing.html', context)\n\n\ndef contact(request):\n    # Implement the 'Contact' page functionality based on your checklist\n    context = {}\n    return render(request, 'chatbot_app/contact.html', context)\n\n\n\ndef api_endpoint(request):\n    # Example API endpoint to interact with the chatbot\n    if request.method == 'POST':\n        data = request.POST  # Or request.body if you are sending JSON\n        # Process the data, interact with your AI, and return a response\n        response_data = {\n            'message': 'Response from the AI.',  # Replace with actual AI response\n        }\n        return JsonResponse(response_data)\n    else:\n        return JsonResponse({'error': 'Invalid request method'}, status=400)"}, {"file": "urls.py", "path": "chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('use-cases/', views.use_cases, name='use_cases'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('contact/', views.contact, name='contact'),\n    path('api/', views.api_endpoint, name='api_endpoint'),  # API endpoint for chatbot interaction\n]"}, {"file": "settings.py", "path": "chatbot_project/settings.py", "code": "# settings.py (excerpt) - adjust as needed\n\nimport os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key' # Replace with a strong secret key\n\nDEBUG = True # Set to False in production\n\nALLOWED_HOSTS = ['*']  # Restrict this in production\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'chatbot_app', # Your app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  #  Important: Add the templates directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Ensure static files are properly served\n"}, {"file": "urls.py", "path": "chatbot_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('chatbot_app.urls')),\n]"}, {"file": "home.html", "path": "templates/chatbot_app/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"home-title\" class=\"home-title\">Welcome to the Chatbot!</h1>\n  <p id=\"home-intro\" class=\"home-intro\">Chat with the AI:</p>\n  <form id=\"chat-form\" class=\"chat-form\">\n    <input type=\"text\" id=\"user-input\" class=\"user-input\" placeholder=\"Type your message here...\">\n    <button type=\"submit\" id=\"send-button\" class=\"send-button\">Send</button>\n  </form>\n  <div id=\"response\" class=\"response\"></div>\n\n  <script>\n    document.getElementById('chat-form').addEventListener('submit', function(event) {\n      event.preventDefault();\n      const userInput = document.getElementById('user-input').value;\n      \n      fetch('/api/', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded', // Or 'application/json' if you're sending JSON\n          'X-CSRFToken': '{{ csrf_token }}'  // Django's CSRF protection\n        },\n        body: 'user_input=' + encodeURIComponent(userInput) // Or JSON.stringify({user_input: userInput})\n      })\n      .then(response => response.json())\n      .then(data => {\n        document.getElementById('response').innerText = data.message;\n      })\n      .catch(error => {\n        console.error('Error:', error);\n        document.getElementById('response').innerText = 'An error occurred.';\n      });\n    });\n  </script>\n  <p><a id=\"features-link\" class=\"features-link\" href=\"{% url 'features' %}\">Explore Features</a></p>\n  <p><a id=\"use-cases-link\" class=\"use-cases-link\" href=\"{% url 'use_cases' %}\">See Use Cases</a></p>\n  <p><a id=\"pricing-link\" class=\"pricing-link\" href=\"{% url 'pricing' %}\">View Pricing</a></p>\n  <p><a id=\"contact-link\" class=\"contact-link\" href=\"{% url 'contact' %}\">Contact Us</a></p>\n{% endblock %}"}, {"file": "features.html", "path": "templates/chatbot_app/features.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"features-title\" class=\"features-title\">Features</h1>\n    <ul id=\"features-list\" class=\"features-list\">\n        <li id=\"feature-nlu\" class=\"feature-item\">Natural Language Understanding (NLU): The AI understands what I mean, even with typos and different wording.</li>\n        <li id=\"feature-context\" class=\"feature-item\">Contextual Awareness: The AI remembers previous parts of our conversation and uses that to give better answers.</li>\n        <li id=\"feature-personalized\" class=\"feature-item\">Personalized Responses: The AI learns from my interactions and tailors its responses to me.</li>\n        <li id=\"feature-multi-language\" class=\"feature-item\">Multi-Language Support: The AI can understand and respond in my native language.</li>\n        <li id=\"feature-integration\" class=\"feature-item\">Integration Capabilities: The AI can connect to other apps and services I use.</li>\n        <li id=\"feature-customizable\" class=\"feature-item\">Customizable Personality: The AI can adopt a certain tone and style of communication.</li>\n    </ul>\n    <a id=\"back-home-features\" class=\"back-home\" href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "use_cases.html", "path": "templates/chatbot_app/use_cases.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"use-cases-title\" class=\"use-cases-title\">Use Cases</h1>\n    <ul id=\"use-cases-list\" class=\"use-cases-list\">\n        <li id=\"use-case-customer-support\" class=\"use-case-item\">Customer Support Automation: Answer customer questions 24/7 and resolve common issues quickly.</li>\n        <li id=\"use-case-lead-generation\" class=\"use-case-item\">Lead Generation: Qualify leads and gather information from potential customers.</li>\n        <li id=\"use-case-internal-kb\" class=\"use-case-item\">Internal Knowledge Base: Provide employees with instant access to company information.</li>\n        <li id=\"use-case-personal-assistant\" class=\"use-case-item\">Personal Assistant: Schedule meetings, set reminders, and manage tasks.</li>\n        <li id=\"use-case-content-creation\" class=\"use-case-item\">Content Creation: Help me write emails, blog posts, and other types of content.</li>\n    </ul>\n    <a id=\"back-home-use-cases\" class=\"back-home\" href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "pricing.html", "path": "templates/chatbot_app/pricing.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"pricing-title\" class=\"pricing-title\">Pricing</h1>\n    <p id=\"pricing-compare\" class=\"pricing-detail\">Compare Plans: See a side-by-side comparison of the features and pricing of each plan.</p>\n    <p id=\"pricing-usage\" class=\"pricing-detail\">Understand Usage Limits: Know how many conversations or requests are included in each plan.</p>\n    <p id=\"pricing-addons\" class=\"pricing-detail\">Learn About Add-ons: Discover optional features that can be added to enhance the chatbot's functionality.</p>\n    <p id=\"pricing-billing\" class=\"pricing-detail\">View Billing Options: See accepted payment methods and billing cycles.</p>\n    <a id=\"back-home-pricing\" class=\"back-home\" href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "contact.html", "path": "templates/chatbot_app/contact.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"contact-title\" class=\"contact-title\">Contact Us</h1>\n    <p id=\"contact-sales\" class=\"contact-detail\">Get in Touch with Sales: Speak to a sales representative about enterprise solutions.</p>\n    <p id=\"contact-support\" class=\"contact-detail\">Contact Support: Get help with technical issues or questions about the chatbot.</p>\n    <p id=\"contact-feedback\" class=\"contact-detail\">Provide Feedback: Share your thoughts and suggestions to help improve the product.</p>\n    <a id=\"back-home-contact\" class=\"back-home\" href=\"{% url 'home' %}\">Back to Home</a>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Chatbot App</title>\n    {% load static %}\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body>\n    <nav id=\"main-nav\" class=\"main-nav\">\n        <a id=\"nav-home\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a> |\n        <a id=\"nav-features\" class=\"nav-link\" href=\"{% url 'features' %}\">Features</a> |\n        <a id=\"nav-use-cases\" class=\"nav-link\" href=\"{% url 'use_cases' %}\">Use Cases</a> |\n        <a id=\"nav-pricing\" class=\"nav-link\" href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a id=\"nav-contact\" class=\"nav-link\" href=\"{% url 'contact' %}\">Contact</a>\n    </nav>\n    <div id=\"content-container\" class=\"container\">\n        {% block content %}\n        {% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "style.css", "path": "static/css/style.css", "code": "/* Basic CSS styling */\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    border: 1px solid #ddd;\n}\n\nnav {\n    background-color: #f0f0f0;\n    padding: 10px;\n    text-align: center;\n}\n\nnav a {\n    margin: 0 10px;\n    text-decoration: none;\n    color: #333;\n}\n\nnav a:hover {\n    color: #007bff;\n}\n\n/* More specific classes can be added here to target the new IDs and Classes */\n.home-title {\n    font-size: 2em;\n    margin-bottom: 20px;\n}\n\n.home-intro {\n    font-style: italic;\n}\n\n.chat-form {\n    margin-bottom: 15px;\n}\n\n.user-input {\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    width: 70%;\n}\n\n.send-button {\n    padding: 8px 12px;\n    background-color: #4CAF50;\n    color: white;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n}\n\n.response {\n    margin-top: 10px;\n    padding: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n}\n\n.features-title, .use-cases-title, .pricing-title, .contact-title {\n  font-size: 1.5em;\n  margin-bottom: 10px;\n}\n\n.features-list, .use-cases-list {\n  list-style-type: disc;\n  padding-left: 20px;\n}\n\n.feature-item, .use-case-item, .pricing-detail, .contact-detail {\n  margin-bottom: 5px;\n}\n\n.back-home {\n  display: block;\n  margin-top: 20px;\n  text-decoration: none;\n  color: #007bff;\n}\n\n.main-nav {\n  background-color: #333;\n  color: white;\n  padding: 10px;\n  text-align: center;\n}\n\n.nav-link {\n  color: white;\n  text-decoration: none;\n  margin: 0 15px;\n}\n\n.nav-link:hover {\n  color: #f0f0f0;\n}\n"}, {"file": "wsgi.py", "path": "chatbot_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "chatbot_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n\napplication = get_asgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "11": [{"file": "urls.py", "path": "password_generator_project/password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('generate/', views.generate_password, name='generate_password')\n]"}, {"file": "views.py", "path": "password_generator_project/password_generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef about(request):\n    return render(request, 'about.html')\n\ndef generate_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters  # Default to letters if nothing is selected\n\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return render(request, 'password.html', {'password': password})\n"}, {"file": "home.html", "path": "password_generator_project/password_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"home-title\">Welcome to the Password Generator</h1>\n    <p id=\"home-description\" class=\"home-description\">Generate strong and secure passwords for your online accounts.</p>\n    <a id=\"generate-link\" class=\"generate-link\" href=\"{% url 'generate_password' %}\">Generate Password</a>\n    <a id=\"about-link\" class=\"about-link\" href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator_project/password_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <h1 id=\"about-title\" class=\"about-title\">About</h1>\n    <p id=\"about-description\" class=\"about-description\">This website provides a simple password generator.  You can customize the length and the types of characters included in the password.</p>\n</body>\n</html>"}, {"file": "password.html", "path": "password_generator_project/password_generator/templates/password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1 id=\"password-generator-title\" class=\"password-generator-title\">Password Generator</h1>\n    <form id=\"password-form\" action=\"{% url 'generate_password' %}\" method=\"get\">\n        <label for=\"length\" id=\"length-label\" class=\"length-label\">Password Length:</label>\n        <input type=\"number\" id=\"length\" class=\"length-input\" name=\"length\" value=\"12\"><br><br>\n\n        <input type=\"checkbox\" id=\"uppercase\" class=\"uppercase-checkbox\" name=\"uppercase\">\n        <label for=\"uppercase\" id=\"uppercase-label\" class=\"uppercase-label\">Include Uppercase</label><br>\n\n        <input type=\"checkbox\" id=\"lowercase\" class=\"lowercase-checkbox\" name=\"lowercase\">\n        <label for=\"lowercase\" id=\"lowercase-label\" class=\"lowercase-label\">Include Lowercase</label><br>\n\n        <input type=\"checkbox\" id=\"numbers\" class=\"numbers-checkbox\" name=\"numbers\">\n        <label for=\"numbers\" id=\"numbers-label\" class=\"numbers-label\">Include Numbers</label><br>\n\n        <input type=\"checkbox\" id=\"symbols\" class=\"symbols-checkbox\" name=\"symbols\">\n        <label for=\"symbols\" id=\"symbols-label\" class=\"symbols-label\">Include Symbols</label><br><br>\n\n        <button type=\"submit\" id=\"generate-button\" class=\"generate-button\">Generate</button>\n    </form>\n\n    {% if password %}\n        <p id=\"generated-password\" class=\"generated-password\">Generated Password: {{ password }}</p>\n    {% endif %}\n</body>\n</html>"}, {"file": "settings.py", "path": "password_generator_project/password_generator_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'password_generator', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'password_generator', 'static')]\n"}, {"file": "urls.py", "path": "password_generator_project/password_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls'))\n]"}, {"file": "wsgi.py", "path": "password_generator_project/password_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "password_generator_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef homepage(request):\n    return render(request, 'myapp/homepage.html')\n\ndef helloworld(request):\n    return render(request, 'myapp/helloworld.html')\n"}, {"file": "homepage.html", "path": "myapp/templates/myapp/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Homepage</title>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"container\">\n        <h1 id=\"homepage-title\" class=\"title\">Welcome to the Homepage!</h1>\n        <a href=\"{% url 'helloworld' %}\" id=\"helloworld-link\">\n            <button id=\"helloworld-button\" class=\"button\">Go to Helloworld Page</button>\n        </a>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myapp/templates/myapp/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Helloworld Page</title>\n</head>\n<body>\n    <div id=\"helloworld-container\" class=\"container\">\n        <h1 id=\"helloworld-title\" class=\"title\">Helloworld</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# Add 'myapp' to INSTALLED_APPS\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp', # Make sure your app name is correct\n]\n\n# Configure TEMPLATES to find your templates\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n\nSTATIC_URL = '/static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "__init__.py", "path": "myapp/__init__.py", "code": ""}, {"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}], "16": [{"file": "data_input.py", "path": "src/data_input.py", "code": "import pandas as pd\n\n\ndef read_excel_file(filename):\n    \"\"\"Reads data from an Excel file.\n\n    Args:\n        filename (str): The name of the Excel file to read.\n\n    Returns:\n        pandas.DataFrame: The data from the Excel file.\n        None: if file not found.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found.\")\n        return None\n\n\ndef verify_file_format(df, expected_headers):\n    \"\"\"Verifies the Excel file format.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame to verify.\n        expected_headers (list): A list of expected header names.\n\n    Returns:\n        bool: True if the file format is correct, False otherwise.\n    \"\"\"\n    if df is None:\n        return False # File not found, considered incorrect format\n\n    if list(df.columns) != expected_headers:\n        print(\"Error: Incorrect header row. Expected: {}\".format(expected_headers))\n        return False\n    return True\n\n\ndef extract_data(df, columns_to_extract):\n    \"\"\"Extracts specific columns from a DataFrame.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame to extract from.\n        columns_to_extract (list): A list of column names to extract.\n\n    Returns:\n        pandas.DataFrame: A new DataFrame containing only the extracted columns.\n    \"\"\"\n    try:\n      return df[columns_to_extract]\n    except KeyError as e:\n      print(f\"Error: Column {e} not found in DataFrame.\")\n      return None\n\ndef validate_time_values(df, allowed_times):\n    \"\"\"Validates the 'Time' column against a list of allowed values.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame to validate.\n        allowed_times (list): A list of allowed time values.\n\n    Returns:\n        bool: True if all time values are valid, False otherwise.\n    \"\"\"\n    if df is None:\n        return False # DataFrame is invalid\n\n    invalid_times = df[~df['Time'].isin(allowed_times)]\n    if not invalid_times.empty:\n        print(\"Error: Invalid time values found:\")\n        print(invalid_times)\n        return False\n    return True\n\nif __name__ == '__main__':\n    # Example Usage\n    filename = 'Spring Semester Subjects.xlsx'\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n    allowed_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n    columns_to_extract = ['Name', 'Weekday', 'Time']\n\n    df = read_excel_file(filename)\n\n    if verify_file_format(df, expected_headers):\n        extracted_data = extract_data(df, columns_to_extract)\n        if extracted_data is not None:\n          if validate_time_values(extracted_data, allowed_times):\n            print(\"Data Input Validation Successful!\")\n          else:\n            print(\"Data Input Validation Failed due to time values.\")\n        else:\n          print(\"Data Extraction failed.\")\n    else:\n        print(\"File format verification failed.\")"}, {"file": "data_transformation.py", "path": "src/data_transformation.py", "code": "import pandas as pd\n\n\ndef create_two_dimensional_table(weekdays, periods):\n    \"\"\"Creates a two-dimensional table (DataFrame) with weekdays as rows and periods as columns.\n\n    Args:\n        weekdays (list): A list of weekdays.\n        periods (list): A list of periods.\n\n    Returns:\n        pandas.DataFrame: An empty DataFrame with the specified rows and columns.\n    \"\"\"\n    df = pd.DataFrame(index=weekdays, columns=periods)\n    return df\n\n\ndef populate_table_with_subjects(df, subject_data, overlapping_strategy='error'):\n    \"\"\"Populates the two-dimensional table with subject names based on weekday and time.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame to populate.\n        subject_data (pandas.DataFrame): DataFrame containing subject data (Name, Weekday, Time).\n        overlapping_strategy (str): Strategy for handling overlapping subjects ('error', 'prioritize', etc.).\n\n    Returns:\n        pandas.DataFrame: The populated DataFrame.\n    \"\"\"\n    for _, row in subject_data.iterrows():\n        weekday = row['Weekday']\n        time = row['Time']\n        subject_name = row['Name']\n\n        if pd.isna(df.loc[weekday, time]): #Check if cell is empty\n          df.loc[weekday, time] = subject_name\n        else:\n          # Handle Overlapping Subjects\n          if overlapping_strategy == 'error':\n              raise ValueError(f\"Overlapping subjects detected for {weekday} {time}: {subject_name} and {df.loc[weekday, time]}\")\n          elif overlapping_strategy == 'prioritize':\n              # Implement prioritization logic here (e.g., based on subject name)\n              print(f\"Overlapping subjects detected for {weekday} {time}. Prioritization logic not fully implemented.\")\n              pass #Replace with prioritization logic\n\n    return df\n\nif __name__ == '__main__':\n    # Example Usage\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n    subject_data = pd.DataFrame({\n        'Name': ['Math', 'Science', 'English', 'History', 'Art', 'Music'],\n        'Weekday': ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Monday'],\n        'Time': ['First period', 'Second period', 'Third period', 'Fourth period', 'First period', 'First period']\n    })\n\n    table = create_two_dimensional_table(weekdays, periods)\n    try:\n      populated_table = populate_table_with_subjects(table, subject_data)\n      print(populated_table)\n    except ValueError as e:\n        print(f\"Error during table population: {e}\")"}, {"file": "data_output.py", "path": "src/data_output.py", "code": "import pandas as pd\n\n\ndef create_new_excel_file(filename):\n    \"\"\"Creates a new Excel file.\n\n    Args:\n        filename (str): The name of the Excel file to create.\n\n    Returns:\n        bool: True if the file was created, false if the file already exists.\n    \"\"\"\n    try:\n        # Create an empty DataFrame and write it to Excel to create the file.\n        pd.DataFrame().to_excel(filename, index=False) #Prevent index from being added\n        return True\n    except FileExistsError:\n        print(f\"File '{filename}' already exists.\")\n        return False\n\n\ndef write_table_to_excel(df, filename):\n    \"\"\"Writes a DataFrame to an Excel file.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame to write.\n        filename (str): The name of the Excel file to write to.\n\n    Returns:\n        bool: True if the write operation was successful, False otherwise.\n    \"\"\"\n    try:\n        df.to_excel(filename, index=True) # Include index (Weekdays)\n        return True\n    except Exception as e:\n        print(f\"Error writing to Excel file: {e}\")\n        return False\n\n\ndef save_excel_file(filename):\n    \"\"\"Placeholder for saving the Excel file (no actual saving needed in this context).\n\n    Args:\n        filename (str): The name of the Excel file to save.\n    \"\"\"\n    print(f\"Excel file '{filename}' saved.\") #Simulate saving by printing to console\n\nif __name__ == '__main__':\n    # Example Usage\n    filename = 'Subject_Schedule.xlsx'\n    data = {\n        'First period': ['Math', None, 'English', None, None],\n        'Second period': [None, 'Science', None, 'History', None],\n        'Third period': [None, None, None, None, 'Art'],\n        'Fourth period': [None, None, None, None, None]\n    }\n    index = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    df = pd.DataFrame(data, index=index)\n\n    if create_new_excel_file(filename):\n        if write_table_to_excel(df, filename):\n            save_excel_file(filename)\n        else:\n            print(\"Failed to write table to Excel.\")\n    else:\n        print(\"Failed to create Excel file.\")"}, {"file": "error_handling.py", "path": "src/error_handling.py", "code": "import logging\n\n# Configure logging\nlogging.basicConfig(filename='error.log', level=logging.ERROR, \n                    format='%(asctime)s - %(levelname)s - %(message)s')\n\n\ndef log_error(message):\n    \"\"\"Logs an error message to a file or console.\n\n    Args:\n        message (str): The error message to log.\n    \"\"\"\n    logging.error(message)\n    print(f\"ERROR: {message}\") #Also displays to the console\n\n\ndef display_error_message(message):\n    \"\"\"Displays an error message to the user.\n\n    Args:\n        message (str): The error message to display.\n    \"\"\"\n    print(f\"Error: {message}\")\n\nif __name__ == '__main__':\n    # Example Usage\n    try:\n        result = 10 / 0  # This will cause a ZeroDivisionError\n    except ZeroDivisionError as e:\n        log_error(f\"Division by zero: {e}\")\n        display_error_message(\"An error occurred during the calculation. Check the error log for details.\")\n"}, {"file": "main.py", "path": "src/main.py", "code": "from src import data_input\nfrom src import data_transformation\nfrom src import data_output\nfrom src import error_handling\nimport pandas as pd\n\ndef main():\n    input_filename = 'Spring Semester Subjects.xlsx'\n    output_filename = 'Subject_Schedule.xlsx'\n    expected_headers = ['#', 'Name', 'Weekday', 'Time']\n    allowed_times = ['First period', 'Second period', 'Third period', 'Fourth period']\n    columns_to_extract = ['Name', 'Weekday', 'Time']\n    weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']\n    periods = ['First period', 'Second period', 'Third period', 'Fourth period']\n\n    try:\n        # Data Input\n        df = data_input.read_excel_file(input_filename)\n        if df is None:\n            error_handling.log_error(f\"Failed to read input file: {input_filename}\")\n            error_handling.display_error_message(\"Failed to read the input file. Please check the file path and try again.\")\n            return\n\n        if not data_input.verify_file_format(df, expected_headers):\n            error_handling.log_error(\"Incorrect input file format.\")\n            error_handling.display_error_message(\"Incorrect input file format. Please ensure the file has the correct headers.\")\n            return\n\n        extracted_data = data_input.extract_data(df, columns_to_extract)\n        if extracted_data is None:\n            error_handling.log_error(\"Failed to extract data from the input file.\")\n            error_handling.display_error_message(\"Failed to extract data from the input file.  Check column names.\")\n            return\n\n        if not data_input.validate_time_values(extracted_data, allowed_times):\n            error_handling.log_error(\"Invalid time values found in the input data.\")\n            error_handling.display_error_message(\"Invalid time values found. Please check the 'Time' column for allowed values.\")\n            return\n\n        # Data Transformation\n        table = data_transformation.create_two_dimensional_table(weekdays, periods)\n        populated_table = data_transformation.populate_table_with_subjects(table, extracted_data)\n\n        # Data Output\n        if data_output.create_new_excel_file(output_filename):\n            if data_output.write_table_to_excel(populated_table, output_filename):\n                data_output.save_excel_file(output_filename)\n                print(f\"Successfully created and saved {output_filename}\")\n            else:\n                error_handling.log_error(f\"Failed to write table to Excel file: {output_filename}\")\n                error_handling.display_error_message(\"Failed to write the transformed data to the output file.\")\n        else:\n            error_handling.log_error(f\"Failed to create Excel file: {output_filename}\")\n            error_handling.display_error_message(\"Failed to create the output Excel file.\")\n\n    except Exception as e:\n        error_handling.log_error(f\"An unexpected error occurred: {e}\")\n        error_handling.display_error_message(\"An unexpected error occurred. Please check the error log for details.\")\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nopenpyxl"}, {"file": ".gitignore", "path": ".gitignore", "code": "*.pyc\n__pycache__/\n.DS_Store\n*.xlsx\nerror.log"}, {"file": "README.md", "path": "README.md", "code": "# Subject Schedule Generator\n\nA Python project that reads subject data from an Excel file, transforms it into a timetable format, and saves the timetable to a new Excel file.\n\n## Prerequisites\n\n- Python 3.6 or higher\n- `pandas`\n- `openpyxl`\n\n## Installation\n\n1. Clone the repository:\n   ```bash\n   git clone <repository_url>\n   cd <repository_directory>\n   ```\n\n2. Create a virtual environment (optional but recommended):\n   ```bash\n   python3 -m venv venv\n   source venv/bin/activate  # On Linux/macOS\n   venv\\Scripts\\activate  # On Windows\n   ```\n\n3. Install the dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n## Usage\n\n1.  **Prepare Input File:** Create an Excel file (e.g., `Spring Semester Subjects.xlsx`) with the following headers: `#`, `Name`, `Weekday`, `Time`.  Populate the file with your subject data.\n2.  **Run the Script:** Execute the `main.py` script:\n   ```bash\n   python src/main.py\n   ```\n\n3.  **Output:** A new Excel file named `Subject_Schedule.xlsx` will be created in the project directory, containing the generated timetable.\n\n## File Structure\n\n```\nSubject_Schedule_Generator/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 data_input.py       # Reads and validates data from the input Excel file\n\u2502   \u251c\u2500\u2500 data_transformation.py # Transforms the data into a timetable format\n\u2502   \u251c\u2500\u2500 data_output.py       # Writes the timetable to an output Excel file\n\u2502   \u251c\u2500\u2500 error_handling.py    # Handles errors and logging\n\u2502   \u2514\u2500\u2500 main.py            # The main script to run the application\n\u251c\u2500\u2500 requirements.txt      # Lists the required Python packages\n\u251c\u2500\u2500 README.md             # Documentation\n\u251c\u2500\u2500 .gitignore            # Specifies intentionally untracked files that Git should ignore\n\u2514\u2500\u2500 Spring Semester Subjects.xlsx #Example input file (remove from repository and create your own)\n```\n\n## Error Handling\n\n-   The script includes error handling to catch common issues such as file not found, incorrect file format, and invalid data.\n-   Error messages are logged to `error.log` and displayed to the user.\n\n## Customization\n\n-   **Input/Output File Names:** Modify `input_filename` and `output_filename` variables in `main.py`.\n-   **Expected Headers:**  Change `expected_headers` in `main.py` if your input file has different headers.\n-   **Allowed Times:** Adjust `allowed_times` in `main.py` to match your timetable periods.\n-   **Weekdays/Periods:** Modify the `weekdays` and `periods` lists in `main.py` to configure the timetable structure.\n"}], "17": [{"file": "data_input.py", "path": "data_input.py", "code": "import pandas as pd\n\n\ndef read_data(file_path):\n    \"\"\"Reads data from an Excel file.\"\"\"\n    try:\n        df = pd.read_excel(file_path)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File not found at {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"An error occurred while reading the data: {e}\")\n        return None\n\n\ndef create_lagged_variable(df, variable, lag=1):\n    \"\"\"Creates a lagged variable.\"\"\"\n    df[f'{variable}_lagged'] = df[variable].shift(lag)\n    return df\n\n\ndef handle_missing_data(df):\n    \"\"\"Removes rows with missing values.\"\"\"\n    df = df.dropna()\n    return df\n\n\nif __name__ == '__main__':\n    # Example Usage (replace with your actual file path)\n    file_path = 'Gamedata.xlsx'\n    df = read_data(file_path)\n\n    if df is not None:\n        df = create_lagged_variable(df, 'result')\n        df = handle_missing_data(df)\n        print(df.head()) # Print first few rows after processing"}, {"file": "model_definition.py", "path": "model_definition.py", "code": "import pandas as pd\n\n\ndef define_independent_variables(df, dependent_variable, lagged_variable):\n    \"\"\"Selects independent variables.\"\"\"\n    independent_vars = [col for col in df.columns if col not in [dependent_variable, lagged_variable]]\n    X = df[independent_vars]\n    return X\n\n\ndef define_dependent_variable(df, dependent_variable):\n    \"\"\"Sets the dependent variable.\"\"\"\n    y = df[dependent_variable]\n    return y\n\n\ndef add_constant(X):\n    \"\"\"Adds a constant term to the independent variables.\"\"\"\n    import statsmodels.api as sm\n    X = sm.add_constant(X)\n    return X\n\n\nif __name__ == '__main__':\n    # Example usage. You'll need to replace this with actual data loading\n    # and ensure 'result' and 'result_lagged' exist in your dataframe.\n    data = {'feature1': [1, 2, 3, 4, 5],\n            'feature2': [5, 4, 3, 2, 1],\n            'result': [0, 1, 0, 1, 0],\n            'result_lagged': [0,0,1,0,1]}\n    df = pd.DataFrame(data)\n\n    dependent_variable = 'result_lagged'\n    lagged_variable = 'result'\n\n    X = define_independent_variables(df, 'result', 'result_lagged')\n    y = define_dependent_variable(df, dependent_variable)\n    X = add_constant(X)\n\n    print(\"Independent Variables (X):\\n\", X.head())\n    print(\"Dependent Variable (y):\\n\", y.head())"}, {"file": "model_training.py", "path": "model_training.py", "code": "import statsmodels.api as sm\n\n\ndef fit_logistic_regression_model(X, y):\n    \"\"\"Fits a logistic regression model.\"\"\"\n    try:\n        model = sm.Logit(y, X)\n        results = model.fit()\n        return results\n    except Exception as e:\n        print(f\"An error occurred during model training: {e}\")\n        return None\n\nif __name__ == '__main__':\n    # Example Usage (replace with your actual X and y)\n    # Example X and y (replace with your actual data)\n    import pandas as pd\n    import numpy as np\n    data = {'feature1': [1, 2, 3, 4, 5],\n            'feature2': [5, 4, 3, 2, 1],\n            'result': [0, 1, 0, 1, 0],\n            'result_lagged': [0,0,1,0,1]}\n    df = pd.DataFrame(data)\n    X = df[['feature1', 'feature2']]\n    y = df['result_lagged']\n\n    # Add a constant to the independent variables\n    X = sm.add_constant(X)\n\n    model_results = fit_logistic_regression_model(X, y)\n\n    if model_results:\n        print(model_results.summary())"}, {"file": "output_generation.py", "path": "output_generation.py", "code": "import pandas as pd\nimport os\n\n\ndef create_excel_file(file_name):\n    \"\"\"Creates a new Excel file.\"\"\"\n    # Create an empty DataFrame to be written to Excel\n    df = pd.DataFrame()\n    try:\n        df.to_excel(file_name, index=False)\n        print(f\"Excel file '{file_name}' created successfully.\")\n        return True\n    except Exception as e:\n        print(f\"Error creating Excel file: {e}\")\n        return False\n\n\ndef write_summary_statistics(results, file_name):\n    \"\"\"Writes summary statistics to an Excel file.\"\"\"\n    if results:\n        try:\n            # Extract summary table\n            summary_df = pd.read_html(results.summary().tables[1].as_html(), header=0, index_col=0)[0]\n\n            # Write to Excel\n            with pd.ExcelWriter(file_name, engine='openpyxl', mode='w') as writer:\n                summary_df.to_excel(writer, sheet_name='Summary Statistics')\n\n            print(f\"Summary statistics written to '{file_name}' successfully.\")\n            return True\n        except Exception as e:\n            print(f\"Error writing summary statistics to Excel: {e}\")\n            return False\n    else:\n        print(\"No model results to write.\")\n        return False\n\n\ndef save_excel_file(file_name):\n    \"\"\"Saves the Excel file.\"\"\"\n    # This function is redundant if using pd.ExcelWriter directly.  Kept for clarity based on checklist.\n    print(f\"Excel file '{file_name}' has been saved (implicitly via ExcelWriter).\")\n    return True\n\n\nif __name__ == '__main__':\n    # Example Usage (replace with actual model results)\n    # Create a dummy model results object for demonstration purposes.\n    # In a real scenario, this would be the output from model_training.py\n    class DummyResults:\n        def summary(self):\n            # Create a dummy summary table for demonstration\n            data = [['const', 1.0, 0.1, 0.05, 0.001, 0.9, 1.1],\n                    ['feature1', 0.5, 0.05, 0.025, 0.0005, 0.4, 0.6]]\n            columns = ['coef', 'std err', 'z', 'P>|z|', '[0.025', '0.975]']\n            index = ['const', 'feature1']\n            df = pd.DataFrame(data, columns=columns, index=index)\n            return Summary(df)\n\n    class Summary:\n        def __init__(self, df):\n            self.tables = [DummyTable(df)]\n\n    class DummyTable:\n        def __init__(self, df):\n            self.df = df\n\n        def as_html(self):\n            return self.df.to_html()\n\n\n    dummy_results = DummyResults()\n\n    file_name = 'Logistic.xlsx'\n\n    if create_excel_file(file_name):\n        if write_summary_statistics(dummy_results, file_name):\n            save_excel_file(file_name) #This save is actually covered by ExcelWriter.  Keeping for completeness"}, {"file": "error_handling.py", "path": "error_handling.py", "code": "import pandas as pd\n\n\ndef handle_file_not_found_error(file_path):\n    \"\"\"Handles the case where the input file is not found.\"\"\"\n    try:\n        pd.read_excel(file_path)\n    except FileNotFoundError:\n        print(f\"Error: The file '{file_path}' was not found.\")\n        return True\n    except Exception:\n        return False\n\n\ndef handle_general_error(func, *args, **kwargs):\n    \"\"\"Catches and displays general exceptions.\"\"\"\n    try:\n        return func(*args, **kwargs)\n    except Exception as e:\n        print(f\"An unexpected error occurred: {type(e).__name__} - {e}\")\n        return None\n\n\nif __name__ == '__main__':\n    # Example Usage\n    file_path = 'nonexistent_file.xlsx'\n\n    # Example usage of handle_file_not_found_error\n    handle_file_not_found_error(file_path)\n\n    #Example Usage of handle_general_error\n    def risky_function(a, b):\n        return a / b\n\n    result = handle_general_error(risky_function, 10, 0)\n    if result is None:\n        print(\"Risky function call failed.\")"}, {"file": "main.py", "path": "main.py", "code": "from data_input import read_data, create_lagged_variable, handle_missing_data\nfrom model_definition import define_independent_variables, define_dependent_variable, add_constant\nfrom model_training import fit_logistic_regression_model\nfrom output_generation import create_excel_file, write_summary_statistics, save_excel_file\nfrom error_handling import handle_file_not_found_error, handle_general_error\n\n\ndef main():\n    file_path = 'Gamedata.xlsx'\n    output_file = 'Logistic.xlsx'\n\n    # --- Data Input --- #\n    df = handle_general_error(read_data, file_path)\n    if df is None:\n        return\n\n    df = handle_general_error(create_lagged_variable, df, 'result')\n    df = handle_general_error(handle_missing_data, df)\n\n    # --- Model Definition --- #\n    X = handle_general_error(define_independent_variables, df, 'result', 'result_lagged')\n    y = handle_general_error(define_dependent_variable, df, 'result_lagged')\n    X = handle_general_error(add_constant, X)\n\n    # --- Model Training --- #\n    model_results = handle_general_error(fit_logistic_regression_model, X, y)\n    if model_results is None:\n        return\n\n    # --- Output Generation --- #\n    if handle_general_error(create_excel_file, output_file):\n        if handle_general_error(write_summary_statistics, model_results, output_file):\n            handle_general_error(save_excel_file, output_file)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "pandas\nstatsmodels\nopenpyxl"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.CharField(max_length=100)\n    pub_date = models.DateTimeField(auto_now_add=True)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n    tags = models.ManyToManyField('Tag', blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass Comment(models.Model):\n    post = models.ForeignKey(Post, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=100)\n    text = models.TextField()\n    created_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.post.title}'"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom django.core.paginator import Paginator, EmptyPage, PageNotAnInteger\nfrom .models import Post, Category, Tag\nfrom django.db.models import Q\n\ndef home(request):\n    posts = Post.objects.all().order_by('-pub_date')\n    paginator = Paginator(posts, 5) # Show 5 posts per page.\n    page = request.GET.get('page')\n    try:\n        posts = paginator.page(page)\n    except PageNotAnInteger:\n        posts = paginator.page(1)\n    except EmptyPage:\n        posts = paginator.page(paginator.num_pages)\n    return render(request, 'blog/home.html', {'posts': posts})\n\ndef post_detail(request, pk):\n    post = get_object_or_404(Post, pk=pk)\n    return render(request, 'blog/post_detail.html', {'post': post})\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\ndef contact(request):\n    return render(request, 'blog/contact.html')\n\ndef category_list(request, category_name):\n    category = get_object_or_404(Category, name=category_name)\n    posts = Post.objects.filter(category=category).order_by('-pub_date')\n    paginator = Paginator(posts, 5)\n    page = request.GET.get('page')\n    posts = paginator.get_page(page)\n\n    return render(request, 'blog/category_list.html', {'category': category, 'posts': posts})\n\ndef tag_list(request, tag_name):\n    tag = get_object_or_404(Tag, name=tag_name)\n    posts = Post.objects.filter(tags=tag).order_by('-pub_date')\n    paginator = Paginator(posts, 5)\n    page = request.GET.get('page')\n    posts = paginator.get_page(page)\n\n    return render(request, 'blog/tag_list.html', {'tag': tag, 'posts': posts})\n\n\ndef search_results(request):\n    query = request.GET.get('q')\n    results = Post.objects.filter(Q(title__icontains=query) | Q(content__icontains=query))\n\n    paginator = Paginator(results, 5)\n    page = request.GET.get('page')\n    results = paginator.get_page(page)\n\n    return render(request, 'blog/search_results.html', {'results': results, 'query': query})"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.post_detail, name='post_detail'),\n    path('about/', views.about, name='about'),\n    path('contact/', views.contact, name='contact'),\n    path('category/<str:category_name>/', views.category_list, name='category_list'),\n    path('tag/<str:tag_name>/', views.tag_list, name='tag_list'),\n    path('search/', views.search_results, name='search_results'),\n]"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    message = forms.CharField(widget=forms.Textarea)"}, {"file": "admin.py", "path": "blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post, Category, Tag, Comment\n\nadmin.site.register(Post)\nadmin.site.register(Category)\nadmin.site.register(Tag)\nadmin.site.register(Comment)"}, {"file": "home.html", "path": "blog/templates/blog/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1 id=\"home-title\" class=\"page-title\">Blog Posts</h1>\n  <div id=\"post-list\" class=\"post-list\">\n    {% for post in posts %}\n      <div id=\"post-{{ post.id }}\" class=\"post-item\">\n        <h2 id=\"post-title-{{ post.id }}\" class=\"post-title\">\n          <a href=\"{% url 'post_detail' pk=post.pk %}\" class=\"post-link\">{{ post.title }}</a>\n        </h2>\n        <p id=\"post-meta-{{ post.id }}\" class=\"post-meta\">\n          Published on {{ post.pub_date }} by {{ post.author }}\n          {% if post.category %}\n            in <a href=\"{% url 'category_list' category_name=post.category.name %}\" class=\"category-link\">{{ post.category.name }}</a>\n          {% endif %}\n        </p>\n        <p id=\"post-content-preview-{{ post.id }}\" class=\"post-content-preview\">{{ post.content|truncatewords:50 }}</p>\n        <a href=\"{% url 'post_detail' pk=post.pk %}\" id=\"read-more-{{ post.id }}\" class=\"read-more\">Read More</a>\n        <div id=\"post-tags-{{post.id}}\" class=\"post-tags\">\n            {% for tag in post.tags.all %}\n                <a href=\"{% url 'tag_list' tag_name=tag.name %}\" class=\"tag-link\">{{ tag.name }}</a>\n            {% endfor %}\n        </div>\n      </div>\n    {% endfor %}\n  </div>\n  \n  <div id=\"pagination\" class=\"pagination\">\n    {% if posts.has_previous %}\n      <a href=\"?page=1\" id=\"first-page\" class=\"page-link\">&laquo; first</a>\n      <a href=\"?page={{ posts.previous_page_number }}\" id=\"previous-page\" class=\"page-link\">previous</a>\n    {% endif %}\n\n    <span id=\"current-page\" class=\"page-number\">\n      Page {{ posts.number }} of {{ posts.paginator.num_pages }}.\n    </span>\n\n    {% if posts.has_next %}\n      <a href=\"?page={{ posts.next_page_number }}\" id=\"next-page\" class=\"page-link\">next</a>\n      <a href=\"?page={{ posts.paginator.num_pages }}\" id=\"last-page\" class=\"page-link\">last &raquo;</a>\n    {% endif %}\n  </div>\n{% endblock %}"}, {"file": "post_detail.html", "path": "blog/templates/blog/post_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"post-detail\" class=\"post-detail\">\n    <h1 id=\"post-title\" class=\"post-title\">{{ post.title }}</h1>\n    <p id=\"post-meta\" class=\"post-meta\">\n      Published on {{ post.pub_date }} by {{ post.author }}\n      {% if post.category %}\n            in <a href=\"{% url 'category_list' category_name=post.category.name %}\" class=\"category-link\">{{ post.category.name }}</a>\n          {% endif %}\n    </p>\n    <div id=\"post-content\" class=\"post-content\">{{ post.content }}</div>\n        <div id=\"post-tags\" class=\"post-tags\">\n            {% for tag in post.tags.all %}\n                <a href=\"{% url 'tag_list' tag_name=tag.name %}\" class=\"tag-link\">{{ tag.name }}</a>\n            {% endfor %}\n        </div>\n\n    <div id=\"comments\" class=\"comments\">\n      <h2>Comments</h2>\n      {% for comment in post.comments.all %}\n        <div id=\"comment-{{ comment.id }}\" class=\"comment\">\n          <p id=\"comment-author-{{ comment.id }}\" class=\"comment-author\">{{ comment.author }}</p>\n          <p id=\"comment-date-{{ comment.id }}\" class=\"comment-date\">{{ comment.created_date }}</p>\n          <p id=\"comment-text-{{ comment.id }}\" class=\"comment-text\">{{ comment.text }}</p>\n        </div>\n      {% empty %}\n        <p id=\"no-comments\" class=\"no-comments\">No comments yet.</p>\n      {% endfor %}\n    </div>\n  </div>\n{% endblock %}"}, {"file": "about.html", "path": "blog/templates/blog/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"about-page\" class=\"about-page\">\n    <h1 id=\"about-title\" class=\"page-title\">About Us</h1>\n    <p id=\"about-content\" class=\"about-content\">\n      This is a simple blog created using Django.\n    </p>\n  </div>\n{% endblock %}"}, {"file": "contact.html", "path": "blog/templates/blog/contact.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"contact-page\" class=\"contact-page\">\n    <h1 id=\"contact-title\" class=\"page-title\">Contact Us</h1>\n    <form id=\"contact-form\" class=\"contact-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button type=\"submit\" id=\"contact-submit\" class=\"contact-submit\">Submit</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "category_list.html", "path": "blog/templates/blog/category_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"category-title\" class=\"page-title\">Category: {{ category.name }}</h1>\n\n    <div id=\"post-list\" class=\"post-list\">\n        {% for post in posts %}\n            <div id=\"post-{{ post.id }}\" class=\"post-item\">\n                <h2 id=\"post-title-{{ post.id }}\" class=\"post-title\">\n                    <a href=\"{% url 'post_detail' pk=post.pk %}\" class=\"post-link\">{{ post.title }}</a>\n                </h2>\n                <p id=\"post-meta-{{ post.id }}\" class=\"post-meta\">\n                    Published on {{ post.pub_date }} by {{ post.author }}\n                </p>\n                <p id=\"post-content-preview-{{ post.id }}\" class=\"post-content-preview\">{{ post.content|truncatewords:50 }}</p>\n                <a href=\"{% url 'post_detail' pk=post.pk %}\" id=\"read-more-{{ post.id }}\" class=\"read-more\">Read More</a>\n                            <div id=\"post-tags-{{post.id}}\" class=\"post-tags\">\n            {% for tag in post.tags.all %}\n                <a href=\"{% url 'tag_list' tag_name=tag.name %}\" class=\"tag-link\">{{ tag.name }}</a>\n            {% endfor %}\n        </div>\n            </div>\n        {% endfor %}\n    </div>\n\n  <div id=\"pagination\" class=\"pagination\">\n    {% if posts.has_previous %}\n      <a href=\"?page=1\" id=\"first-page\" class=\"page-link\">&laquo; first</a>\n      <a href=\"?page={{ posts.previous_page_number }}\" id=\"previous-page\" class=\"page-link\">previous</a>\n    {% endif %}\n\n    <span id=\"current-page\" class=\"page-number\">\n      Page {{ posts.number }} of {{ posts.paginator.num_pages }}.\n    </span>\n\n    {% if posts.has_next %}\n      <a href=\"?page={{ posts.next_page_number }}\" id=\"next-page\" class=\"page-link\">next</a>\n      <a href=\"?page={{ posts.paginator.num_pages }}\" id=\"last-page\" class=\"page-link\">last &raquo;</a>\n    {% endif %}\n  </div>\n\n{% endblock %}"}, {"file": "tag_list.html", "path": "blog/templates/blog/tag_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"tag-title\" class=\"page-title\">Tag: {{ tag.name }}</h1>\n\n    <div id=\"post-list\" class=\"post-list\">\n        {% for post in posts %}\n            <div id=\"post-{{ post.id }}\" class=\"post-item\">\n                <h2 id=\"post-title-{{ post.id }}\" class=\"post-title\">\n                    <a href=\"{% url 'post_detail' pk=post.pk %}\" class=\"post-link\">{{ post.title }}</a>\n                </h2>\n                <p id=\"post-meta-{{ post.id }}\" class=\"post-meta\">\n                    Published on {{ post.pub_date }} by {{ post.author }}\n                </p>\n                <p id=\"post-content-preview-{{ post.id }}\" class=\"post-content-preview\">{{ post.content|truncatewords:50 }}</p>\n                <a href=\"{% url 'post_detail' pk=post.pk %}\" id=\"read-more-{{ post.id }}\" class=\"read-more\">Read More</a>\n                            <div id=\"post-tags-{{post.id}}\" class=\"post-tags\">\n            {% for tag in post.tags.all %}\n                <a href=\"{% url 'tag_list' tag_name=tag.name %}\" class=\"tag-link\">{{ tag.name }}</a>\n            {% endfor %}\n        </div>\n            </div>\n        {% endfor %}\n    </div>\n\n  <div id=\"pagination\" class=\"pagination\">\n    {% if posts.has_previous %}\n      <a href=\"?page=1\" id=\"first-page\" class=\"page-link\">&laquo; first</a>\n      <a href=\"?page={{ posts.previous_page_number }}\" id=\"previous-page\" class=\"page-link\">previous</a>\n    {% endif %}\n\n    <span id=\"current-page\" class=\"page-number\">\n      Page {{ posts.number }} of {{ posts.paginator.num_pages }}.\n    </span>\n\n    {% if posts.has_next %}\n      <a href=\"?page={{ posts.next_page_number }}\" id=\"next-page\" class=\"page-link\">next</a>\n      <a href=\"?page={{ posts.paginator.num_pages }}\" id=\"last-page\" class=\"page-link\">last &raquo;</a>\n    {% endif %}\n  </div>\n\n{% endblock %}"}, {"file": "search_results.html", "path": "blog/templates/blog/search_results.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"search-results-title\" class=\"page-title\">Search Results for: {{ query }}</h1>\n\n    <div id=\"post-list\" class=\"post-list\">\n        {% if results %}\n            {% for post in results %}\n                <div id=\"post-{{ post.id }}\" class=\"post-item\">\n                    <h2 id=\"post-title-{{ post.id }}\" class=\"post-title\">\n                        <a href=\"{% url 'post_detail' pk=post.pk %}\" class=\"post-link\">{{ post.title }}</a>\n                    </h2>\n                    <p id=\"post-meta-{{ post.id }}\" class=\"post-meta\">\n                        Published on {{ post.pub_date }} by {{ post.author }}\n                    </p>\n                    <p id=\"post-content-preview-{{ post.id }}\" class=\"post-content-preview\">{{ post.content|truncatewords:50 }}</p>\n                    <a href=\"{% url 'post_detail' pk=post.pk %}\" id=\"read-more-{{ post.id }}\" class=\"read-more\">Read More</a>\n                </div>\n            {% endfor %}\n        {% else %}\n            <p id=\"no-results\" class=\"no-results\">No results found.</p>\n        {% endif %}\n    </div>\n\n  <div id=\"pagination\" class=\"pagination\">\n    {% if results.has_previous %}\n      <a href=\"?q={{ query }}&page=1\" id=\"first-page\" class=\"page-link\">&laquo; first</a>\n      <a href=\"?q={{ query }}&page={{ results.previous_page_number }}\" id=\"previous-page\" class=\"page-link\">previous</a>\n    {% endif %}\n\n    <span id=\"current-page\" class=\"page-number\">\n      Page {{ results.number }} of {{ results.paginator.num_pages }}.\n    </span>\n\n    {% if results.has_next %}\n      <a href=\"?q={{ query }}&page={{ results.next_page_number }}\" id=\"next-page\" class=\"page-link\">next</a>\n      <a href=\"?q={{ query }}&page={{ results.paginator.num_pages }}\" id=\"last-page\" class=\"page-link\">last &raquo;</a>\n    {% endif %}\n  </div>\n\n{% endblock %}"}, {"file": "base.html", "path": "blog/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n            color: #333;\n        }\n\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n            padding: 10px;\n        }\n\n        header {\n            background: #505050;\n            color: #fff;\n            padding-top: 10px;\n            min-height: 70px;\n            border-bottom: #bbb 1px solid;\n        }\n\n        header a {\n            color: #fff;\n            text-decoration: none;\n            text-transform: uppercase;\n            font-size: 16px;\n        }\n\n        header ul {\n            margin: 0;\n            padding: 0;\n        }\n\n        header li {\n            float: left;\n            display: inline;\n            padding: 0 20px 0 20px;\n        }\n\n        header #branding {\n            float: left;\n        }\n\n        header #branding h1 {\n            margin: 0;\n        }\n\n        header nav {\n            float: right;\n            margin-top: 10px;\n        }\n\n        .page-title {\n            text-align: center;\n            margin-bottom: 20px;\n            color: #505050;\n        }\n\n        .post-list {\n            margin-bottom: 20px;\n        }\n\n        .post-item {\n            background: #fff;\n            padding: 10px;\n            margin-bottom: 10px;\n            border: #ccc 1px solid;\n        }\n\n        .post-title {\n            margin-bottom: 5px;\n        }\n\n        .post-title a {\n            color: #333;\n            text-decoration: none;\n        }\n\n        .post-meta {\n            font-size: 14px;\n            color: #777;\n            margin-bottom: 10px;\n        }\n\n        .post-content-preview {\n            line-height: 1.6em;\n        }\n\n        .read-more {\n            display: block;\n            margin-top: 10px;\n            color: #007bff;\n            text-decoration: none;\n        }\n\n        .pagination {\n            text-align: center;\n            margin-top: 20px;\n        }\n\n        .pagination a {\n            display: inline-block;\n            padding: 5px 10px;\n            margin: 0 5px;\n            border: 1px solid #ccc;\n            color: #333;\n            text-decoration: none;\n        }\n\n        .pagination span {\n            display: inline-block;\n            padding: 5px 10px;\n            margin: 0 5px;\n        }\n\n        /* Search Bar Styles */\n        .search-bar {\n            float: right;\n            margin-top: 10px;\n        }\n\n        .search-bar form {\n            display: inline-block;\n        }\n\n        .search-bar input[type=\"text\"] {\n            padding: 8px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n        }\n\n        .search-bar button {\n            padding: 8px 12px;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n\n        .search-bar button:hover {\n            background-color: #0056b3;\n        }\n\n        footer {\n            background: #505050;\n            color: #fff;\n            text-align: center;\n            padding: 20px;\n            margin-top: 20px;\n        }\n\n                .post-tags {\n            margin-top: 10px;\n        }\n\n        .tag-link {\n            display: inline-block;\n            padding: 3px 8px;\n            margin-right: 5px;\n            background-color: #f0f0f0;\n            color: #333;\n            text-decoration: none;\n            border-radius: 5px;\n            font-size: 0.8em;\n        }\n\n        .tag-link:hover {\n            background-color: #ddd;\n        }\n\n\n    </style>\n</head>\n<body>\n    <header>\n        <div class=\"container\">\n            <div id=\"branding\">\n                <h1><a href=\"{% url 'home' %}\">My Blog</a></h1>\n            </div>\n            <nav>\n                <ul>\n                    <li><a href=\"{% url 'home' %}\">Home</a></li>\n                    <li><a href=\"{% url 'about' %}\">About</a></li>\n                    <li><a href=\"{% url 'contact' %}\">Contact</a></li>\n                </ul>\n            </nav>\n             <div class=\"search-bar\">\n                <form action=\"{% url 'search_results' %}\" method=\"get\">\n                    <input type=\"text\" name=\"q\" placeholder=\"Search...\" value=\"{{ query }}\">\n                    <button type=\"submit\">Search</button>\n                </form>\n            </div>\n        </div>\n    </header>\n\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n\n    <footer>\n        <p>My Blog, Copyright &copy; 2024</p>\n    </footer>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog', # Your blog app\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')], # Important to add this line\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')), # Include blog app's urls\n]"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}]}