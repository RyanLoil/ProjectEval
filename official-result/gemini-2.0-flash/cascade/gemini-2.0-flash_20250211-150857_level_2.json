{"2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\n# Example model (can be extended based on requirements)\nclass ExchangeRate(models.Model):\n    base_currency = models.CharField(max_length=3)\n    target_currency = models.CharField(max_length=3)\n    rate = models.FloatField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.base_currency} to {self.target_currency} at {self.rate}'"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\n\ndef home(request):\n    # Placeholder for currency selection and conversion logic\n    context = {}\n    return render(request, 'currency_converter/home.html', context)\n\n\ndef convert_currency(request):\n    if request.method == 'POST':\n        # Placeholder for handling conversion logic\n        base_currency = request.POST.get('base_currency')\n        target_currency = request.POST.get('target_currency')\n        amount = float(request.POST.get('amount'))\n\n        # Dummy conversion result\n        conversion_result = amount * 1.15  # Replace with actual calculation\n        exchange_rate = 1.15 # Replace with actual value\n\n        return JsonResponse({\n            'converted_amount': conversion_result,\n            'exchange_rate': exchange_rate\n        })\n    else:\n        return JsonResponse({'error': 'Invalid request method'})"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert_currency, name='convert_currency'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# Placeholder for forms if needed, e.g., for settings\nclass SettingsForm(forms.Form):\n    default_base_currency = forms.CharField(max_length=3, label='Default Base Currency')\n    default_target_currency = forms.CharField(max_length=3, label='Default Target Currency')"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1 id=\"main-title\" class=\"main-title\">Currency Converter</h1>\n\n    <div id=\"currency-selection\" class=\"currency-selection\">\n        <label for=\"base_currency\" class=\"currency-label\">Base Currency:</label>\n        <select id=\"base_currency\" name=\"base_currency\" class=\"currency-select\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n            <!-- Add more currencies -->\n        </select><br><br>\n\n        <label for=\"target_currency\" class=\"currency-label\">Target Currency:</label>\n        <select id=\"target_currency\" name=\"target_currency\" class=\"currency-select\">\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"GBP\">GBP</option>\n            <!-- Add more currencies -->\n        </select><br><br>\n\n        <label for=\"amount\" class=\"amount-label\">Amount:</label>\n        <input type=\"number\" id=\"amount\" name=\"amount\" value=\"1.00\" class=\"amount-input\"><br><br>\n\n        <button id=\"convert_button\" class=\"convert-button\">Convert</button>\n\n        <div id=\"conversion_result\" class=\"conversion-result\"></div>\n    </div>\n\n    <script>\n        document.getElementById('convert_button').addEventListener('click', function() {\n            var baseCurrency = document.getElementById('base_currency').value;\n            var targetCurrency = document.getElementById('target_currency').value;\n            var amount = document.getElementById('amount').value;\n\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'  // Ensure CSRF token is included\n                },\n                body: 'base_currency=' + baseCurrency + '&target_currency=' + targetCurrency + '&amount=' + amount\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                    document.getElementById('conversion_result').innerText = 'Error: ' + data.error;\n                } else {\n                    document.getElementById('conversion_result').innerText = 'Converted Amount: ' + data.converted_amount + ' ' + targetCurrency + ' (Exchange Rate: ' + data.exchange_rate + ')';\n                }\n            });\n        });\n    </script>\n</body>\n</html>"}, {"file": "settings.py", "path": "currency_converter/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'currency_converter', 'templates')],  # Corrected path\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'currency_converter', 'static')]\n"}, {"file": "urls.py", "path": "currency_converter/currency_converter/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}, {"file": "wsgi.py", "path": "currency_converter/currency_converter/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "currency_converter/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generated_password/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generated_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters  # Default to letters if no options are selected\n\n    generated_password = ''.join(random.choice(characters) for i in range(length))\n\n    return render(request, 'generated_password.html', {'password': generated_password})\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .welcome-heading {\n            color: #333;\n        }\n        .welcome-paragraph {\n            color: #666;\n            margin-bottom: 20px;\n        }\n        .generate-button {\n            padding: 10px 20px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n            text-decoration: none;\n        }\n        .generate-button:hover {\n            background-color: #3e8e41;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-heading\" class=\"welcome-heading\">Welcome to the Password Generator!</h1>\n        <p id=\"home-paragraph\" class=\"welcome-paragraph\">Use this tool to generate strong and secure passwords.</p>\n        <a href=\"{% url 'password_options' %}\" class=\"generate-button\" id=\"generate-button\">Generate Password</a>\n    </div>\n</body>\n</html>"}, {"file": "password_options.html", "path": "templates/password_options.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Options</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .options-container {\n            max-width: 500px;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .options-heading {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        .form-label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        .form-input {\n            width: 100%;\n            padding: 8px;\n            border: 1px solid #ddd;\n            border-radius: 4px;\n            box-sizing: border-box;\n        }\n        .submit-button {\n            background-color: #4CAF50;\n            color: white;\n            padding: 10px 15px;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .submit-button:hover {\n            background-color: #3e8e41;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"options-container\">\n        <h1 id=\"options-heading\" class=\"options-heading\">Password Options</h1>\n        <form id=\"password-form\" action=\"{% url 'generated_password' %}\" method=\"get\">\n            <div class=\"form-group\">\n                <label for=\"length\" class=\"form-label\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" value=\"12\" class=\"form-input\">\n            </div>\n\n            <div class=\"form-group\">\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\">\n                <label for=\"uppercase\">Include Uppercase Letters</label>\n            </div>\n\n            <div class=\"form-group\">\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\">\n                <label for=\"lowercase\">Include Lowercase Letters</label>\n            </div>\n\n            <div class=\"form-group\">\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\">\n                <label for=\"numbers\">Include Numbers</label>\n            </div>\n\n            <div class=\"form-group\">\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n                <label for=\"symbols\">Include Symbols</label>\n            </div>\n\n            <button type=\"submit\" class=\"submit-button\" id=\"generate-button\">Generate Password</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "generated_password.html", "path": "templates/generated_password.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Generated Password</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            text-align: center;\n            margin-top: 50px;\n        }\n        .container {\n            max-width: 600px;\n            margin: 0 auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .generated-heading {\n            color: #333;\n        }\n        .password-text {\n            font-size: 1.2em;\n            margin-bottom: 20px;\n        }\n        .copy-button {\n            padding: 10px 20px;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 5px;\n            cursor: pointer;\n        }\n        .copy-button:hover {\n            background-color: #0056b3;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"generated-heading\" class=\"generated-heading\">Generated Password</h1>\n        <p id=\"password-text\" class=\"password-text\">Your generated password is: <strong id=\"generated-password\">{{ password }}</strong></p>\n        <button onclick=\"copyToClipboard()\" class=\"copy-button\" id=\"copy-button\">Copy to Clipboard</button>\n\n    </div>\n    <script>\n        function copyToClipboard() {\n            navigator.clipboard.writeText('{{ password }}');\n            alert('Password copied to clipboard!');\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n        .about-container {\n            max-width: 600px;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ccc;\n            border-radius: 5px;\n        }\n        .about-heading {\n            text-align: center;\n            margin-bottom: 20px;\n        }\n        .about-paragraph {\n            line-height: 1.6;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"about-container\">\n        <h1 id=\"about-heading\" class=\"about-heading\">About This Password Generator</h1>\n        <p id=\"about-paragraph\" class=\"about-paragraph\">This website is a simple password generator that allows you to create strong and secure passwords based on your specified criteria.</p>\n        <p id=\"about-paragraph-2\" class=\"about-paragraph\">It provides options to include uppercase letters, lowercase letters, numbers, and symbols. You can also specify the desired length of the password.</p>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "password_generator_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "password_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),\n]"}, {"file": "wsgi.py", "path": "password_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail because Django is not installed.\n        # However, it's really Django is missing to handle this error.\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        )\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "4": [{"file": "urls.py", "path": "qrcode_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr, name='generate_qr'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qrcode_generator/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nimport qrcode\nfrom io import BytesIO\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_qr(request):\n    if request.method == 'POST':\n        text = request.POST.get('text')\n        box_size = int(request.POST.get('box_size') or 10) #Default value\n        error_correction = request.POST.get('error_correction') or 'medium' # Default value\n        border_size = int(request.POST.get('border_size') or 4) # Default value\n        fill_color = request.POST.get('fill_color') or 'black' # Default value\n        back_color = request.POST.get('back_color') or 'white' # Default value\n\n        if not text:\n            return render(request, 'qr_code_generator.html', {'error': 'Please enter some text or URL.'})\n        if box_size > 128:\n            return render(request, 'qr_code_generator.html', {'error': 'Box size cannot exceed 128.'})\n        if border_size > 10:\n            return render(request, 'qr_code_generator.html', {'error': 'Border size cannot exceed 10.'})\n        \n        error_correction_levels = {\n            'small': qrcode.ERROR_CORRECT_L,\n            'medium': qrcode.ERROR_CORRECT_M,\n            'large': qrcode.ERROR_CORRECT_H\n        }\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=error_correction_levels.get(error_correction, qrcode.ERROR_CORRECT_M),\n            box_size=box_size,\n            border=border_size,\n        )\n        qr.add_data(text)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        \n        buffer = BytesIO()\n        img.save(buffer, 'PNG')\n        img_data = buffer.getvalue()\n\n        return render(request, 'qr_code_generator.html', {'qr_code': img_data.hex()})\n    else:\n        return render(request, 'qr_code_generator.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "models.py", "path": "qrcode_generator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "qrcode_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to QR Code Generator</h1>\n        <p id=\"home-description\" class=\"description\">Generate QR codes easily.</p>\n        <a href=\"{% url 'generate_qr' %}\" id=\"generate-link\" class=\"button\">\n            <button id=\"generate-button\" class=\"btn\">Generate QR Code</button>\n        </a>\n        <a href=\"{% url 'about' %}\" id=\"about-link\" class=\"link\">About</a>\n    </div>\n</body>\n</html>"}, {"file": "qr_code_generator.html", "path": "templates/qr_code_generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"qr-generator-container\" class=\"container\">\n        <h1 id=\"qr-generator-title\" class=\"title\">QR Code Generator</h1>\n\n        {% if error %}\n            <p id=\"qr-error\" class=\"error\" style=\"color: red;\">{{ error }}</p>\n        {% endif %}\n\n        <form id=\"qr-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"text\" id=\"text-label\" class=\"form-label\">Text/URL:</label>\n                <input type=\"text\" id=\"text\" name=\"text\" class=\"form-input\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"box_size\" id=\"box-size-label\" class=\"form-label\">Box Size (1-128):</label>\n                <input type=\"number\" id=\"box_size\" name=\"box_size\" min=\"1\" max=\"128\" value=\"10\" class=\"form-input\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"error_correction\" id=\"error-correction-label\" class=\"form-label\">Error Correction:</label>\n                <select id=\"error_correction\" name=\"error_correction\" class=\"form-select\">\n                    <option value=\"small\">Small</option>\n                    <option value=\"medium\" selected>Medium</option>\n                    <option value=\"large\">Large</option>\n                </select><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"border_size\" id=\"border-size-label\" class=\"form-label\">Border Size (1-10):</label>\n                <input type=\"number\" id=\"border_size\" name=\"border_size\" min=\"1\" max=\"10\" value=\"4\" class=\"form-input\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"fill_color\" id=\"fill-color-label\" class=\"form-label\">Fill Color:</label>\n                <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\" class=\"form-input\"><br><br>\n            </div>\n\n            <div class=\"form-group\">\n                <label for=\"back_color\" id=\"back-color-label\" class=\"form-label\">Background Color:</label>\n                <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#FFFFFF\" class=\"form-input\"><br><br>\n            </div>\n\n            <button type=\"submit\" id=\"generate-qr-button\" class=\"btn\">Generate QR Code</button>\n        </form>\n\n        {% if qr_code %}\n            <div id=\"qr-code-result\" class=\"result\">\n                <h2 id=\"qr-code-heading\" class=\"result-heading\">Generated QR Code:</h2>\n                <img id=\"qr-code-image\" src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\" class=\"qr-image\">\n                <a id=\"download-qr-code\" href=\"data:image/png;base64,{{ qr_code }}\" download=\"qrcode.png\" class=\"link\">Download QR Code</a>\n            </div>\n        {% endif %}\n\n        <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"link\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About This Website</h1>\n        <p id=\"about-description\" class=\"description\">This website is a simple QR code generator.</p>\n        <p id=\"about-feature\" class=\"feature\">It allows you to generate QR codes from text or URLs.</p>\n\n        <h2 id=\"privacy-policy-heading\" class=\"sub-title\">Privacy Policy</h2>\n        <p id=\"privacy-policy-content\" class=\"content\">We do not store any of your data.</p>\n\n        <h2 id=\"terms-of-service-heading\" class=\"sub-title\">Terms of Service</h2>\n        <p id=\"terms-of-service-content\" class=\"content\">Use this website at your own risk.</p>\n\n        <a href=\"{% url 'home' %}\" id=\"home-link\" class=\"link\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qrcode_generator_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qrcode_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qrcode_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qrcode_generator_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases/\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators/\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "qrcode_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qrcode_generator.urls')),\n]"}, {"file": "wsgi.py", "path": "qrcode_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qrcode_generator_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "5": [{"file": "urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport markdown\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_output': html_output, 'markdown_text':markdown_text})\n    else:\n        return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the Markdown to HTML Converter</h1>\n        <p id=\"home-description\" class=\"description\">This tool allows you to convert Markdown text into HTML.</p>\n        <div id=\"home-links\" class=\"links\">\n            <a id=\"convert-link\" class=\"link\" href=\"{% url 'convert' %}\">Convert</a> |\n            <a id=\"about-link\" class=\"link\" href=\"{% url 'about' %}\">About</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Convert</title>\n</head>\n<body>\n    <div id=\"convert-container\" class=\"container\">\n        <h1 id=\"convert-title\" class=\"title\">Markdown to HTML Converter</h1>\n        <form id=\"convert-form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" name=\"markdown_text\" rows=\"10\" cols=\"50\">{% if markdown_text %}{{ markdown_text }}{% endif %}</textarea><br><br>\n            <button id=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if html_output %}\n            <h2 id=\"html-output-title\" class=\"output-title\">HTML Output:</h2>\n            <div id=\"html-output\" class=\"output\" style=\"border: 1px solid black; padding: 10px;\">\n                {{ html_output|safe }}\n            </div>\n        {% endif %}\n\n        <div id=\"convert-links\" class=\"links\">\n            <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Home</a> |\n            <a id=\"about-link\" class=\"link\" href=\"{% url 'about' %}\">About</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About</h1>\n        <p id=\"about-description\" class=\"description\">This Markdown to HTML converter was developed by...</p>\n        <div id=\"about-links\" class=\"links\">\n            <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Home</a> |\n            <a id=\"convert-link\" class=\"link\" href=\"{% url 'convert' %}\">Convert</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "models.py", "path": "markdown_converter/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "markdown_converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "markdown_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MarkdownConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'markdown_converter'"}, {"file": "settings.py", "path": "your_project_name/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'markdown_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'your_project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'your_project_name.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "your_project_name/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('markdown_converter.urls')),\n]"}, {"file": "wsgi.py", "path": "your_project_name/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "6": [{"file": "urls.py", "path": "todo_project/todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('todo_list/<int:list_id>/', views.todo_list, name='todo_list'),\n    path('task/<int:task_id>/', views.task_detail, name='task_detail'),\n    path('create_list/', views.create_list, name='create_list'),\n    path('add_task/<int:list_id>/', views.add_task, name='add_task'),\n    path('edit_task/<int:task_id>/', views.edit_task, name='edit_task'),\n    path('delete_task/<int:task_id>/', views.delete_task, name='delete_task'),\n    path('complete_task/<int:task_id>/', views.complete_task, name='complete_task'),\n    # Optional Analysis URLs\n    # path('analysis/', views.analysis, name='analysis'),\n]"}, {"file": "views.py", "path": "todo_project/todo_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom .forms import TodoListForm, TaskForm\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    # Placeholder for dashboard data, can be optimized\n    total_tasks = Task.objects.count()\n    completed_tasks = Task.objects.filter(completed=True).count()\n\n    context = {\n        'todo_lists': todo_lists,\n        'total_tasks': total_tasks,\n        'completed_tasks': completed_tasks,\n    }\n    return render(request, 'home.html', context)\n\n\ndef todo_list(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    context = {\n        'todo_list': todo_list,\n        'tasks': tasks,\n    }\n    return render(request, 'todo_list.html', context)\n\n\ndef task_detail(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    context = {\n        'task': task\n    }\n    return render(request, 'task_detail.html', context)\n\n\ndef create_list(request):\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TodoListForm()\n    return render(request, 'create_list.html', {'form': form})\n\n\ndef add_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.todo_list = todo_list\n            task.save()\n            return redirect('todo_list', list_id=list_id)\n    else:\n        form = TaskForm()\n    return render(request, 'add_task.html', {'form': form, 'todo_list': todo_list})\n\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list', list_id=task.todo_list.id)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'edit_task.html', {'form': form, 'task': task})\n\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list', list_id=list_id)\n\n\ndef complete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list', list_id=task.todo_list.id)\n\n# Optional Analysis view\n# def analysis(request):\n#     # Implement chart logic here\n#     return render(request, 'analysis.html')\n"}, {"file": "models.py", "path": "todo_project/todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    due_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "forms.py", "path": "todo_project/todo_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, Task\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['name']\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'due_date']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date'})\n        }"}, {"file": "home.html", "path": "todo_project/todo_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"home-container\" class=\"container\">\n    <h1 id=\"home-title\" class=\"home-title\">Todo App Dashboard</h1>\n\n    <p id=\"total-tasks\" class=\"total-tasks\">Total Tasks: {{ total_tasks }}</p>\n    <p id=\"completed-tasks\" class=\"completed-tasks\">Completed Tasks: {{ completed_tasks }}</p>\n\n    <h2 id=\"todo-lists-heading\" class=\"todo-lists-heading\">Todo Lists</h2>\n    <ul id=\"todo-lists\" class=\"todo-lists\">\n      {% for todo_list in todo_lists %}\n        <li id=\"todo-list-{{ todo_list.id }}\" class=\"todo-list-item\">\n          <a id=\"todo-list-link-{{ todo_list.id }}\" class=\"todo-list-link\" href=\"{% url 'todo_list' todo_list.id %}\">{{ todo_list.name }}</a>\n        </li>\n      {% endfor %}\n    </ul>\n\n    <a id=\"create-list-link\" class=\"create-list-link\" href=\"{% url 'create_list' %}\">Create New List</a>\n  </div>\n{% endblock %}"}, {"file": "todo_list.html", "path": "todo_project/todo_app/templates/todo_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"todo-list-container\" class=\"container\">\n    <h1 id=\"todo-list-title\" class=\"todo-list-title\">{{ todo_list.name }}</h1>\n\n    <h2 id=\"tasks-heading\" class=\"tasks-heading\">Tasks</h2>\n    <ul id=\"tasks-list\" class=\"tasks-list\">\n      {% for task in tasks %}\n        <li id=\"task-item-{{ task.id }}\" class=\"task-item\">\n          <a id=\"task-detail-link-{{ task.id }}\" class=\"task-detail-link\" href=\"{% url 'task_detail' task.id %}\">{{ task.title }}</a>\n          {% if task.completed %}\n            <span id=\"task-completed-{{ task.id }}\" class=\"task-completed\">(Completed)</span>\n          {% endif %}\n          <a id=\"edit-task-link-{{ task.id }}\" class=\"edit-task-link\" href=\"{% url 'edit_task' task.id %}\">Edit</a>\n          <a id=\"delete-task-link-{{ task.id }}\" class=\"delete-task-link\" href=\"{% url 'delete_task' task.id %}\">Delete</a>\n          {% if not task.completed %}\n            <a id=\"complete-task-link-{{ task.id }}\" class=\"complete-task-link\" href=\"{% url 'complete_task' task.id %}\">Mark Complete</a>\n          {% endif %}\n        </li>\n      {% endfor %}\n    </ul>\n\n    <a id=\"add-task-link\" class=\"add-task-link\" href=\"{% url 'add_task' todo_list.id %}\">Add New Task</a>\n    <a id=\"back-to-dashboard-link\" class=\"back-to-dashboard-link\" href=\"{% url 'home' %}\">Back to Dashboard</a>\n  </div>\n{% endblock %}"}, {"file": "task_detail.html", "path": "todo_project/todo_app/templates/task_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"task-detail-container\" class=\"container\">\n    <h1 id=\"task-title\" class=\"task-title\">{{ task.title }}</h1>\n    <p id=\"task-description\" class=\"task-description\">{{ task.description }}</p>\n    <p id=\"task-due-date\" class=\"task-due-date\">Due Date: {{ task.due_date }}</p>\n    <a id=\"back-to-list-link\" class=\"back-to-list-link\" href=\"{% url 'todo_list' task.todo_list.id %}\">Back to List</a>\n  </div>\n{% endblock %}"}, {"file": "create_list.html", "path": "todo_project/todo_app/templates/create_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"create-list-container\" class=\"container\">\n    <h1 id=\"create-list-title\" class=\"create-list-title\">Create New Todo List</h1>\n    <form id=\"create-list-form\" class=\"create-list-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"create-button\" class=\"create-button\" type=\"submit\">Create</button>\n    </form>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'home' %}\">Cancel</a>\n  </div>\n{% endblock %}"}, {"file": "add_task.html", "path": "todo_project/todo_app/templates/add_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"add-task-container\" class=\"container\">\n    <h1 id=\"add-task-title\" class=\"add-task-title\">Add New Task to {{ todo_list.name }}</h1>\n    <form id=\"add-task-form\" class=\"add-task-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"add-task-button\" class=\"add-task-button\" type=\"submit\">Add Task</button>\n    </form>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'todo_list' todo_list.id %}\">Cancel</a>\n  </div>\n{% endblock %}"}, {"file": "edit_task.html", "path": "todo_project/todo_app/templates/edit_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"edit-task-container\" class=\"container\">\n    <h1 id=\"edit-task-title\" class=\"edit-task-title\">Edit Task</h1>\n    <form id=\"edit-task-form\" class=\"edit-task-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"save-changes-button\" class=\"save-changes-button\" type=\"submit\">Save Changes</button>\n    </form>\n    <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'todo_list' task.todo_list.id %}\">Cancel</a>\n  </div>\n{% endblock %}"}, {"file": "base.html", "path": "todo_project/todo_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo App</title>\n    <style>\n      .container {\n          width: 80%;\n          margin: 0 auto;\n          padding: 20px;\n      }\n      /* Add more styling as needed */\n    </style>\n</head>\n<body>\n    <div id=\"app-container\" class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "todo_project/todo_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong secret key\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'todo_app', 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'todo_app', 'static')]"}, {"file": "urls.py", "path": "todo_project/todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo_app.urls')),\n]"}, {"file": "wsgi.py", "path": "todo_project/todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "todo_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your \"\n            \"PYTHONPATH environment variable? Did you forget to activate a virtual \"\n            \"environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "8": [{"file": "models.py", "path": "calendarapp/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendarapp/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom datetime import datetime, date\nfrom .models import Event\nfrom django.urls import reverse\n\ndef home(request):\n    today = date.today()\n    events = Event.objects.filter(start_time__date=today)\n    return render(request, 'calendarapp/home.html', {'current_date': today, 'events': events})\n\ndef calendar_view(request, year=None, month=None):\n    today = date.today()\n    if year is None or month is None:\n        year = today.year\n        month = today.month\n\n    try:\n        year = int(year)\n        month = int(month)\n    except ValueError:\n        year = today.year\n        month = today.month\n\n    events = Event.objects.filter(start_time__year=year, start_time__month=month)\n    return render(request, 'calendarapp/calendar.html', {'year': year, 'month': month, 'events': events})\n\ndef add_event(request):\n    if request.method == 'POST':\n        title = request.POST['title']\n        description = request.POST['description']\n        start_time = datetime.strptime(request.POST['start_time'], '%Y-%m-%dT%H:%M')\n        end_time = datetime.strptime(request.POST['end_time'], '%Y-%m-%dT%H:%M')\n\n        Event.objects.create(title=title, description=description, start_time=start_time, end_time=end_time)\n        return redirect('home')\n    return render(request, 'calendarapp/add_event.html')\n\ndef event_detail(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendarapp/event_detail.html', {'event': event})\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.title = request.POST['title']\n        event.description = request.POST['description']\n        event.start_time = datetime.strptime(request.POST['start_time'], '%Y-%m-%dT%H:%M')\n        event.end_time = datetime.strptime(request.POST['end_time'], '%Y-%m-%dT%H:%M')\n        event.save()\n        return redirect('event_detail', event_id=event.id)\n    return render(request, 'calendarapp/edit_event.html', {'event': event})\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')  # Or to a list events view\n    return render(request, 'calendarapp/delete_event.html', {'event': event})\n\ndef search_events(request):\n    if request.method == 'GET':\n        query = request.GET.get('q')\n        if query:\n            events = Event.objects.filter(title__icontains=query)  # Example: search by title\n        else:\n            events = Event.objects.all()\n        return render(request, 'calendarapp/search_events.html', {'events': events, 'query': query})\n    return render(request, 'calendarapp/search_events.html')\n\ndef list_all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendarapp/list_all_events.html', {'events': events})"}, {"file": "urls.py", "path": "calendarapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_month'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_detail, name='event_detail'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('events/all/', views.list_all_events, name='list_all_events'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# ...\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendarapp', # Add your app here\n]\n\n# ...\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# ...\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\nSTATIC_URL = '/static/'\nDEFAULT_AUTO_FIELD = 'django.db.BigAutoField'\n\n"}, {"file": "home.html", "path": "calendarapp/templates/calendarapp/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <h1 id=\"home-title\" class=\"main-title\">Welcome to the Calendar App</h1>\n    <p id=\"today-date\" class=\"date-display\">Today's Date: {{ current_date }}</p>\n    <a id=\"calendar-link\" class=\"nav-link\" href=\"{% url 'calendar' %}\">View Full Calendar</a>\n    <a id=\"add-event-link\" class=\"nav-link\" href=\"{% url 'add_event' %}\">Add Event</a>\n\n    <h2 id=\"today-events-heading\" class=\"section-heading\">Today's Events:</h2>\n    <ul id=\"event-list\" class=\"event-list\">\n        {% for event in events %}\n            <li class=\"event-item\"><a class=\"event-link\" href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li id=\"no-events\" class=\"empty-message\">No events today.</li>\n        {% endfor %}\n    </ul>\n\n    <a id=\"search-link\" class=\"nav-link\" href=\"{% url 'search_events' %}\">Search Events</a>\n    <a id=\"list-all-link\" class=\"nav-link\" href=\"{% url 'list_all_events' %}\">List All Events</a>\n</body>\n</html>"}, {"file": "calendar.html", "path": "calendarapp/templates/calendarapp/calendar.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar</title>\n</head>\n<body>\n    <h1 id=\"calendar-title\" class=\"main-title\">Calendar</h1>\n\n    <form id=\"calendar-form\" class=\"calendar-form\" method=\"get\" action=\"{% url 'calendar_month' year=1900 month=1 %}\">\n      <label id=\"year-label\" class=\"form-label\" for=\"year\">Year:</label>\n      <input id=\"year\" class=\"form-input\" type=\"number\" name=\"year\" value=\"{{ year }}\">\n      <label id=\"month-label\" class=\"form-label\" for=\"month\">Month:</label>\n      <select id=\"month\" class=\"form-select\" name=\"month\">\n        <option value=\"1\" {% if month == 1 %}selected{% endif %}>January</option>\n        <option value=\"2\" {% if month == 2 %}selected{% endif %}>February</option>\n        <option value=\"3\" {% if month == 3 %}selected{% endif %}>March</option>\n        <option value=\"4\" {% if month == 4 %}selected{% endif %}>April</option>\n        <option value=\"5\" {% if month == 5 %}selected{% endif %}>May</option>\n        <option value=\"6\" {% if month == 6 %}selected{% endif %}>June</option>\n        <option value=\"7\" {% if month == 7 %}selected{% endif %}>July</option>\n        <option value=\"8\" {% if month == 8 %}selected{% endif %}>August</option>\n        <option value=\"9\" {% if month == 9 %}selected{% endif %}>September</option>\n        <option value=\"10\" {% if month == 10 %}selected{% endif %}>October</option>\n        <option value=\"11\" {% if month == 11 %}selected{% endif %}>November</option>\n        <option value=\"12\" {% if month == 12 %}selected{% endif %}>December</option>\n      </select>\n      <button id=\"go-button\" class=\"form-button\" type=\"submit\">Go</button>\n    </form>\n\n    <h2 id=\"events-month-year\" class=\"section-heading\">Events for {{ month }}/{{ year }}:</h2>\n    <ul id=\"month-event-list\" class=\"event-list\">\n        {% for event in events %}\n            <li class=\"event-item\"><a class=\"event-link\" href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a> ({{ event.start_time }})</li>\n        {% empty %}\n            <li id=\"no-events-month\" class=\"empty-message\">No events for this month.</li>\n        {% endfor %}\n    </ul>\n    <a id=\"back-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "add_event.html", "path": "calendarapp/templates/calendarapp/add_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Event</title>\n</head>\n<body>\n    <h1 id=\"add-event-title\" class=\"main-title\">Add New Event</h1>\n    <form id=\"add-event-form\" class=\"event-form\" method=\"post\">\n        {% csrf_token %}\n        <label id=\"title-label\" class=\"form-label\" for=\"title\">Title:</label><br>\n        <input id=\"title\" class=\"form-input\" type=\"text\" name=\"title\"><br><br>\n        <label id=\"description-label\" class=\"form-label\" for=\"description\">Description:</label><br>\n        <textarea id=\"description\" class=\"form-textarea\" name=\"description\"></textarea><br><br>\n        <label id=\"start-time-label\" class=\"form-label\" for=\"start_time\">Start Time:</label><br>\n        <input id=\"start_time\" class=\"form-input\" type=\"datetime-local\" name=\"start_time\"><br><br>\n        <label id=\"end-time-label\" class=\"form-label\" for=\"end_time\">End Time:</label><br>\n        <input id=\"end_time\" class=\"form-input\" type=\"datetime-local\" name=\"end_time\"><br><br>\n        <button id=\"add-event-button\" class=\"form-button\" type=\"submit\">Add Event</button>\n    </form>\n    <a id=\"back-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "event_detail.html", "path": "calendarapp/templates/calendarapp/event_detail.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Event Details</title>\n</head>\n<body>\n    <h1 id=\"event-details-title\" class=\"main-title\">Event Details</h1>\n    <h2 id=\"event-title\" class=\"event-heading\">{{ event.title }}</h2>\n    <p id=\"event-description\" class=\"event-description\">Description: {{ event.description }}</p>\n    <p id=\"event-start-time\" class=\"event-time\">Start Time: {{ event.start_time }}</p>\n    <p id=\"event-end-time\" class=\"event-time\">End Time: {{ event.end_time }}</p>\n    <a id=\"edit-event-link\" class=\"nav-link\" href=\"{% url 'edit_event' event.id %}\">Edit Event</a>\n    <a id=\"delete-event-link\" class=\"nav-link\" href=\"{% url 'delete_event' event.id %}\">Delete Event</a>\n    <a id=\"back-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "calendarapp/templates/calendarapp/edit_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Event</title>\n</head>\n<body>\n    <h1 id=\"edit-event-title\" class=\"main-title\">Edit Event</h1>\n    <form id=\"edit-event-form\" class=\"event-form\" method=\"post\">\n        {% csrf_token %}\n        <label id=\"title-label\" class=\"form-label\" for=\"title\">Title:</label><br>\n        <input id=\"title\" class=\"form-input\" type=\"text\" name=\"title\" value=\"{{ event.title }}\"><br><br>\n        <label id=\"description-label\" class=\"form-label\" for=\"description\">Description:</label><br>\n        <textarea id=\"description\" class=\"form-textarea\" name=\"description\">{{ event.description }}</textarea><br><br>\n        <label id=\"start-time-label\" class=\"form-label\" for=\"start_time\">Start Time:</label><br>\n        <input id=\"start_time\" class=\"form-input\" type=\"datetime-local\" name=\"start_time\" value=\"{{ event.start_time|date:'Y-m-d\\TH:i' }}\"><br><br>\n        <label id=\"end-time-label\" class=\"form-label\" for=\"end_time\">End Time:</label><br>\n        <input id=\"end_time\" class=\"form-input\" type=\"datetime-local\" name=\"end_time\" value=\"{{ event.end_time|date:'Y-m-d\\TH:i' }}\"><br><br>\n        <button id=\"save-changes-button\" class=\"form-button\" type=\"submit\">Save Changes</button>\n    </form>\n    <a id=\"back-event-details-link\" class=\"nav-link\" href=\"{% url 'event_detail' event.id %}\">Back to Event Details</a>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "calendarapp/templates/calendarapp/delete_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Event</title>\n</head>\n<body>\n    <h1 id=\"delete-event-title\" class=\"main-title\">Delete Event</h1>\n    <p id=\"delete-confirmation\" class=\"confirmation-message\">Are you sure you want to delete \"{{ event.title }}\"?</p>\n    <form id=\"delete-event-form\" method=\"post\">\n        {% csrf_token %}\n        <button id=\"delete-button\" class=\"form-button\" type=\"submit\">Delete</button>\n    </form>\n    <a id=\"cancel-link\" class=\"nav-link\" href=\"{% url 'event_detail' event.id %}\">Cancel</a>\n</body>\n</html>"}, {"file": "search_events.html", "path": "calendarapp/templates/calendarapp/search_events.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Search Events</title>\n</head>\n<body>\n    <h1 id=\"search-events-title\" class=\"main-title\">Search Events</h1>\n    <form id=\"search-form\" class=\"search-form\" method=\"get\" action=\"{% url 'search_events' %}\">\n        <input id=\"search-input\" class=\"form-input\" type=\"text\" name=\"q\" placeholder=\"Search...\" value=\"{{ query }}\">\n        <button id=\"search-button\" class=\"form-button\" type=\"submit\">Search</button>\n    </form>\n\n    {% if query %}\n        <h2 id=\"search-results-heading\" class=\"section-heading\">Search Results for \"{{ query }}\":</h2>\n        <ul id=\"search-results-list\" class=\"event-list\">\n            {% for event in events %}\n                <li class=\"event-item\"><a class=\"event-link\" href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a></li>\n            {% empty %}\n                <li id=\"no-results\" class=\"empty-message\">No events found.</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n    <a id=\"back-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "list_all_events.html", "path": "calendarapp/templates/calendarapp/list_all_events.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>List All Events</title>\n</head>\n<body>\n    <h1 id=\"all-events-title\" class=\"main-title\">All Events</h1>\n    <ul id=\"all-events-list\" class=\"event-list\">\n        {% for event in events %}\n            <li class=\"event-item\"><a class=\"event-link\" href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a> ({{ event.start_time }})</li>\n        {% empty %}\n            <li id=\"no-events-all\" class=\"empty-message\">No events found.</li>\n        {% endfor %}\n    </ul>\n    <a id=\"back-home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "admin.py", "path": "calendarapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Event\n\nadmin.site.register(Event)"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "myproject/myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "calendarapp/__init__.py", "code": "default_app_config = 'calendarapp.apps.CalendarappConfig'"}, {"file": "apps.py", "path": "calendarapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass CalendarappConfig(AppConfig):\n    default_auto_field = 'django.db.BigAutoField'\n    name = 'calendarapp'"}, {"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail because Django is not installed.\n        # Although, it should normally have been installed as a dependency of this project.\n        # We also try to import the SQLite version, so no database is needed\n        try:\n            import sqlite3\n        except ImportError:\n            import os\n            if os.name == 'nt': # windows\n                sqlite_file = 'sqlite3.dll'\n            elif os.name == 'posix': # linux\n                sqlite_file = 'libsqlite3.so'\n            else:\n                sqlite_file = None\n\n            if sqlite_file:\n                print(f\"Couldn't import sqlite3. Make sure the path to {sqlite_file} is available.\")\n            else:\n                print('Could not import sqlite3.')\n        raise\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}, {"file": "__init__.py", "path": "myproject/myproject/__init__.py", "code": "os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendarapp.urls'))\n]"}], "10": [{"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal_log/', views.meal_log, name='meal_log'),\n    path('activity_log/', views.activity_log, name='activity_log'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help_page, name='help'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    # Add more URLs as needed\n]"}, {"file": "views.py", "path": "calorie_tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout, authenticate\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef dashboard(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'dashboard.html')\n\ndef meal_log(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'meal_log.html')\n\ndef activity_log(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'activity_log.html')\n\ndef analysis(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'analysis.html')\n\ndef settings(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'settings.html')\n\ndef help_page(request):\n    return render(request, 'help.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n"}, {"file": "models.py", "path": "calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    calories = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    calories_burned = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n"}, {"file": "forms.py", "path": "calorie_tracker/forms.py", "code": "from django import forms\nfrom .models import Meal, Activity\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = ['name', 'calories']\n\nclass ActivityForm(forms.ModelForm):\n    class Meta:\n        model = Activity\n        fields = ['name', 'calories_burned']\n"}, {"file": "admin.py", "path": "calorie_tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Meal, Activity\n\nadmin.site.register(Meal)\nadmin.site.register(Activity)\n"}, {"file": "settings.py", "path": "calorie_tracker_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-q@e&945+3!*4t7=uqx4i)s54s&0o+2b8z6d8p8(9m&b!_o6d@x'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calorie_tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Add this line\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'dashboard'\nLOGOUT_REDIRECT_URL = 'home'\n"}, {"file": "urls.py", "path": "calorie_tracker_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calorie_tracker.urls')),\n]"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id='home-page' class='home-container'>\n        <h1 id='home-title' class='home-title'>Welcome to the Calorie Tracker App!</h1>\n        <p id='home-description' class='home-description'>Track your daily calorie intake and expenditure.</p>\n        <div class='home-buttons'>\n            <a id='signup-link' class='home-button signup-button' href=\"{% url 'signup' %}\">Sign Up</a>\n            <a id='login-link' class='home-button login-button' href=\"{% url 'login' %}\">Log In</a>\n        </div>\n    </div>\n{% endblock %}"}, {"file": "dashboard.html", "path": "templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id='dashboard-page' class='dashboard-container'>\n        <h1 id='dashboard-title' class='dashboard-title'>Dashboard</h1>\n        <p id='dashboard-greeting' class='dashboard-greeting'>Welcome, {{ user.username }}!</p>\n        <div class='dashboard-links'>\n            <a id='logout-link' class='dashboard-link logout-button' href=\"{% url 'logout' %}\">Log Out</a>\n            <a id='meal-log-link' class='dashboard-link meal-log-button' href=\"{% url 'meal_log' %}\">Meal Log</a>\n            <a id='activity-log-link' class='dashboard-link activity-log-button' href=\"{% url 'activity_log' %}\">Activity Log</a>\n            <a id='analysis-link' class='dashboard-link analysis-button' href=\"{% url 'analysis' %}\">Analysis</a>\n            <a id='settings-link' class='dashboard-link settings-button' href=\"{% url 'settings' %}\">Settings</a>\n        </div>\n        {% comment %}\n        Add your dashboard content here, displaying daily calorie intake, recent meals, recent activities, etc.\n        You'll need to fetch and display data from your models.\n        {% endcomment %}\n    </div>\n{% endblock %}"}, {"file": "meal_log.html", "path": "templates/meal_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id='meal-log-page' class='meal-log-container'>\n        <h1 id='meal-log-title' class='meal-log-title'>Meal Log</h1>\n        <a id='back-to-dashboard-link' class='back-to-dashboard-button' href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n        {% comment %}\n        Implement the meal logging functionality here.\n        - Meal search\n        - Edit meal\n        - Delete meal\n        Display a list of logged meals.\n        {% endcomment %}\n    </div>\n{% endblock %}"}, {"file": "activity_log.html", "path": "templates/activity_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id='activity-log-page' class='activity-log-container'>\n        <h1 id='activity-log-title' class='activity-log-title'>Activity Log</h1>\n        <a id='back-to-dashboard-link' class='back-to-dashboard-button' href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n        {% comment %}\n        Implement the activity logging functionality here.\n        - Activity search\n        - Edit activity\n        - Delete activity\n        Display a list of logged activities.\n        {% endcomment %}\n    </div>\n{% endblock %}"}, {"file": "analysis.html", "path": "templates/analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id='analysis-page' class='analysis-container'>\n        <h1 id='analysis-title' class='analysis-title'>Analysis</h1>\n        <a id='back-to-dashboard-link' class='back-to-dashboard-button' href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n        {% comment %}\n        Display charts and data analysis here. For example, weekly calorie chart.\n        You'll need to use a charting library like Chart.js or matplotlib.\n        {% endcomment %}\n    </div>\n{% endblock %}"}, {"file": "settings.html", "path": "templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id='settings-page' class='settings-container'>\n        <h1 id='settings-title' class='settings-title'>Settings</h1>\n        <a id='back-to-dashboard-link' class='back-to-dashboard-button' href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n        {% comment %}\n        Implement the settings functionality here:\n        - Profile update\n        - Preferences\n        - Notifications\n        - Privacy settings\n        {% endcomment %}\n    </div>\n{% endblock %}"}, {"file": "help.html", "path": "templates/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id='help-page' class='help-container'>\n        <h1 id='help-title' class='help-title'>Help</h1>\n        <a id='back-to-dashboard-link' class='back-to-dashboard-button' href=\"{% url 'dashboard' %}\">Back to Dashboard (if logged in)</a>\n        <h2 id='faq-title' class='faq-title'>FAQ</h2>\n        <p id='faq-content' class='faq-content'>This is the FAQ section.</p>\n        <h2 id='contact-support-title' class='contact-support-title'>Contact Support</h2>\n        <p id='contact-support-content' class='contact-support-content'>Contact us at support@example.com</p>\n        <h2 id='tutorials-title' class='tutorials-title'>Tutorials</h2>\n        <p id='tutorials-content' class='tutorials-content'>Check out our tutorials here.</p>\n    </div>\n{% endblock %}"}, {"file": "signup.html", "path": "templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id='signup-page' class='signup-container'>\n    <h2 id='signup-title' class='signup-title'>Sign Up</h2>\n    <form id='signup-form' class='signup-form' method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id='signup-button' class='signup-button' type=\"submit\">Sign Up</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "login.html", "path": "templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id='login-page' class='login-container'>\n    <h2 id='login-title' class='login-title'>Login</h2>\n    <form id='login-form' class='login-form' method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id='login-button' class='login-button' type=\"submit\">Login</button>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang='en'>\n<head>\n    <meta charset='UTF-8'>\n    <meta name='viewport' content='width=device-width, initial-scale=1.0'>\n    <title>Calorie Tracker</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 0;\n            padding: 0;\n            background-color: #f4f4f4;\n        }\n\n        .container {\n            width: 80%;\n            margin: auto;\n            overflow: hidden;\n            padding: 20px;\n        }\n\n        .home-container {\n          text-align: center;\n          padding: 50px;\n        }\n\n        .home-title {\n            font-size: 2em;\n            margin-bottom: 20px;\n        }\n\n        .home-description {\n            font-size: 1.2em;\n            color: #666;\n            margin-bottom: 30px;\n        }\n\n        .home-buttons a {\n            display: inline-block;\n            padding: 10px 20px;\n            margin: 0 10px;\n            background-color: #007bff;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n        }\n\n        .dashboard-container {\n            padding: 20px;\n        }\n\n        .dashboard-title {\n            font-size: 2em;\n            margin-bottom: 10px;\n        }\n\n        .dashboard-greeting {\n            margin-bottom: 20px;\n            font-style: italic;\n        }\n\n        .dashboard-links a {\n            display: inline-block;\n            margin: 5px;\n            padding: 10px 15px;\n            background-color: #28a745;\n            color: white;\n            text-decoration: none;\n            border-radius: 5px;\n        }\n\n        /* Add more styling as needed */\n    </style>\n</head>\n<body>\n    <div id='main-content' class='container'>\n        {% block content %}\n        {% endblock %}\n    </div>\n</body>\n</html>"}], "11": [{"file": "review_project/urls.py", "path": "review_project/", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('review_app.urls'))\n]"}, {"file": "review_project/settings.py", "path": "review_project/", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'review_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'review_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'review_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "review_project/wsgi.py", "path": "review_project/", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'review_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "review_app/models.py", "path": "review_app/", "code": "from django.db import models\n\nclass TestCode(models.Model):\n    file_name = models.CharField(max_length=255)\n    file_path = models.CharField(max_length=512)\n    code = models.TextField()\n    STATUS_CHOICES = [\n        ('Pass', 'Pass'),\n        ('Fail', 'Fail'),\n        ('Select', 'Select'),\n    ]\n    status = models.CharField(\n        max_length=20,\n        choices=STATUS_CHOICES,\n        default='Select'\n    )\n    review_notes = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return self.file_name"}, {"file": "review_app/views.py", "path": "review_app/", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom .models import TestCode\nfrom .forms import ImportForm, TestCodeReviewForm\nimport json\n\ndef home_view(request):\n    if request.method == 'POST':\n        form = ImportForm(request.POST, request.FILES)\n        if form.is_valid():\n            json_file = request.FILES['json_file']\n            try:\n                data = json.load(json_file)\n                for item in data:\n                    TestCode.objects.create(\n                        file_name=item['file'],\n                        file_path=item['path'],\n                        code=item['code']\n                    )\n                return redirect('home') # Redirect to the home page after import\n            except json.JSONDecodeError:\n                return HttpResponse(\"Invalid JSON file.\", status=400)\n    else:\n        form = ImportForm()\n\n    test_codes = TestCode.objects.all()\n    return render(request, 'review_app/home.html', {\n        'welcome_message': 'Welcome to the Code Review Tool',\n        'test_codes': test_codes,\n        'form': form\n    })\n\ndef about_view(request):\n    return render(request, 'review_app/about.html', {'description': 'This tool is for reviewing test code.'})\n"}, {"file": "review_app/forms.py", "path": "review_app/", "code": "from django import forms\nfrom .models import TestCode\n\nclass ImportForm(forms.Form):\n    json_file = forms.FileField(label='JSON File')\n\nclass TestCodeReviewForm(forms.ModelForm):\n    class Meta:\n        model = TestCode\n        fields = ['status', 'review_notes']"}, {"file": "review_app/urls.py", "path": "review_app/", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('about/', views.about_view, name='about'),\n]"}, {"file": "templates/review_app/home.html", "path": "templates/review_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Code Review Tool</title>\n</head>\n<body>\n    <h1 id=\"welcome-heading\" class=\"welcome-message\">{{ welcome_message }}</h1>\n\n    <div id=\"testcode-list\" class=\"testcode-list\">\n        <h2>Test Codes</h2>\n        {% if test_codes %}\n            <ul>\n            {% for test_code in test_codes %}\n                <li class=\"testcode-item\">\n                    <strong>File:</strong> {{ test_code.file_name }}<br>\n                    <strong>Path:</strong> {{ test_code.file_path }}<br>\n                    <strong>Code:</strong><pre>{{ test_code.code }}</pre><br>\n                    <strong>Status:</strong> {{ test_code.status }}<br>\n                    <strong>Notes:</strong> {{ test_code.review_notes }}<br>\n                    <form method=\"post\" action=\"{% url 'home' %}\" class=\"review-form\">\n                        {% csrf_token %}\n                        <label for=\"status\">Status:</label>\n                        <select id=\"status\" name=\"status\">\n                            <option value=\"Pass\" {% if test_code.status == 'Pass' %}selected{% endif %}>Pass</option>\n                            <option value=\"Fail\" {% if test_code.status == 'Fail' %}selected{% endif %}>Fail</option>\n                            <option value=\"Select\" {% if test_code.status == 'Select' %}selected{% endif %}>Select</option>\n                        </select><br>\n\n                        <label for=\"review_notes\">Review Notes:</label><br>\n                        <textarea id=\"review_notes\" name=\"review_notes\">{{ test_code.review_notes }}</textarea><br>\n\n                        <input type=\"hidden\" name=\"test_code_id\" value=\"{{ test_code.id }}\">\n                        <button type=\"submit\" class=\"submit-button\">Update</button>\n                    </form>\n                </li>\n            {% endfor %}\n            </ul>\n        {% else %}\n            <p>No test codes available.</p>\n        {% endif %}\n    </div>\n\n    <div id=\"import-form\" class=\"import-form\">\n        <h2>Import JSON</h2>\n        <form method=\"post\" enctype=\"multipart/form-data\" id=\"upload-form\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\" class=\"upload-button\">Upload</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "templates/review_app/about.html", "path": "templates/review_app/", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-content\" class=\"about-content\">\n        <h1>About Code Review Tool</h1>\n        <p>{{ description }}</p>\n    </div>\n</body>\n</html>"}, {"file": "static/style.css", "path": "static/", "code": "/* styles.css */\nbody {\n    font-family: sans-serif;\n}\n\n.welcome-message {\n    color: navy;\n}\n\n.testcode-list {\n    margin-top: 20px;\n}\n\n.testcode-item {\n    border: 1px solid #ccc;\n    padding: 10px;\n    margin-bottom: 10px;\n}\n\n.import-form {\n    margin-top: 20px;\n}\n"}], "12": [{"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('home.urls')),  # Home page URLs\n    path('employee/', include('employee.urls')),  # Employee portal URLs\n    path('admin/', include('admin_portal.urls')),  # Admin portal URLs\n    path('budget/', include('budget_control.urls')),  # Budget control URLs\n]"}, {"file": "settings.py", "path": "expense_tracker/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'home',\n    'employee',\n    'admin_portal',\n    'budget_control',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'expense_tracker.wsgi.application'\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'employee:submit_claim'\nLOGOUT_REDIRECT_URL = 'home'\n"}, {"file": "models.py", "path": "expense_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=50, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date_submitted = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=20, default='Pending', choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')])\n    reason_for_rejection = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'Claim by {self.employee.username} - {self.claim_type} - {self.status}'\n\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=50, unique=True, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n    current_spending = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n\n    def __str__(self):\n        return f'{self.category} Budget: {self.limit}'\n\n\n"}, {"file": "home/urls.py", "path": "home/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]"}, {"file": "home/views.py", "path": "home/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\n\ndef home(request):\n    return render(request, 'home/home.html') # Template should have login, signup, welcome message\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('employee:submit_claim') # Redirect to employee portal after signup\n    else:\n        form = UserCreationForm()\n    return render(request, 'home/signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('employee:submit_claim') # Redirect to employee portal after login\n    else:\n        form = AuthenticationForm()\n    return render(request, 'home/login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n"}, {"file": "home/templates/home/home.html", "path": "home/templates/home/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Expense Tracker</title>\n</head>\n<body>\n  <div id=\"home-container\" class=\"container\">\n    {% if user.is_authenticated %}\n      <h1 id=\"welcome-message\" class=\"welcome-message\">Welcome, {{ user.username }}!</h1>\n      <a id=\"employee-portal-link\" class=\"portal-link\" href=\"{% url 'employee:submit_claim' %}\">Go to Employee Portal</a>\n      <a id=\"logout-link\" class=\"logout-link\" href=\"{% url 'logout' %}\">Logout</a>\n    {% else %}\n      <h1 id=\"main-title\" class=\"main-title\">Welcome to Expense Tracker</h1>\n      <a id=\"signup-link\" class=\"auth-link\" href=\"{% url 'signup' %}\">Sign Up</a>\n      <a id=\"login-link\" class=\"auth-link\" href=\"{% url 'login' %}\">Log In</a>\n    {% endif %}\n  </div>\n</body>\n</html>"}, {"file": "home/templates/home/signup.html", "path": "home/templates/home/signup.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sign Up</title>\n</head>\n<body>\n    <div id=\"signup-container\" class=\"container\">\n        <h1 id=\"signup-title\" class=\"form-title\">Sign Up</h1>\n        <form id=\"signup-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"signup-button\" class=\"form-button\" type=\"submit\">Sign Up</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "home/templates/home/login.html", "path": "home/templates/home/login.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Log In</title>\n</head>\n<body>\n    <div id=\"login-container\" class=\"container\">\n        <h1 id=\"login-title\" class=\"form-title\">Log In</h1>\n        <form id=\"login-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"login-button\" class=\"form-button\" type=\"submit\">Log In</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "employee/urls.py", "path": "employee/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'employee'\n\nurlpatterns = [\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('view_claims/', views.view_claims, name='view_claims'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n]"}, {"file": "employee/views.py", "path": "employee/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .forms import ClaimForm\nfrom expense_tracker.models import Claim\nfrom django.contrib.auth.decorators import login_required\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            return redirect('employee:view_claims')\n    else:\n        form = ClaimForm()\n    return render(request, 'employee/submit_claim.html', {'form': form})\n\n@login_required\ndef view_claims(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'employee/view_claims.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            form.save()\n            return redirect('employee:view_claims')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'employee/edit_claim.html', {'form': form, 'claim_id': claim_id})\n"}, {"file": "employee/forms.py", "path": "employee/forms.py", "code": "from django import forms\nfrom expense_tracker.models import Claim\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['claim_type', 'amount']\n"}, {"file": "employee/templates/employee/submit_claim.html", "path": "employee/templates/employee/submit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"submit-claim-container\" class=\"container\">\n    <h1 id=\"submit-claim-title\" class=\"form-title\">Submit Claim</h1>\n    <form id=\"submit-claim-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"submit-claim-button\" class=\"form-button\" type=\"submit\">Submit</button>\n    </form>\n    <a id=\"view-claims-link\" class=\"page-link\" href=\"{% url 'employee:view_claims' %}\">View Claims</a>\n  </div>\n{% endblock %}"}, {"file": "employee/templates/employee/view_claims.html", "path": "employee/templates/employee/view_claims.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"view-claims-container\" class=\"container\">\n    <h1 id=\"view-claims-title\" class=\"page-title\">Your Claims</h1>\n    <ul id=\"claims-list\" class=\"claims-list\">\n      {% for claim in claims %}\n        <li id=\"claim-{{ claim.id }}\" class=\"claim-item\">\n          <span class=\"claim-info\">{{ claim.claim_type }} - {{ claim.amount }} - {{ claim.status }}</span>\n          {% if claim.status == 'Pending' %}\n            <a id=\"edit-claim-link-{{ claim.id }}\" class=\"edit-claim-link\" href=\"{% url 'employee:edit_claim' claim.id %}\">Edit</a>\n          {% endif %}\n        </li>\n      {% endfor %}\n    </ul>\n    <a id=\"submit-new-claim-link\" class=\"page-link\" href=\"{% url 'employee:submit_claim' %}\">Submit New Claim</a>\n  </div>\n{% endblock %}"}, {"file": "employee/templates/employee/edit_claim.html", "path": "employee/templates/employee/edit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"edit-claim-container\" class=\"container\">\n    <h1 id=\"edit-claim-title\" class=\"form-title\">Edit Claim</h1>\n    <form id=\"edit-claim-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"update-claim-button\" class=\"form-button\" type=\"submit\">Update</button>\n    </form>\n    <a id=\"back-to-claims-link\" class=\"page-link\" href=\"{% url 'employee:view_claims' %}\">Back to Claims</a>\n  </div>\n{% endblock %}"}, {"file": "admin_portal/urls.py", "path": "admin_portal/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'admin_portal'\n\nurlpatterns = [\n    path('approve_claim/<int:claim_id>/', views.approve_claim, name='approve_claim'),\n    path('reject_claim/<int:claim_id>/', views.reject_claim, name='reject_claim'),\n    path('view_claim_details/<int:claim_id>/', views.view_claim_details, name='view_claim_details'),\n    path('search_claims/', views.search_claims, name='search_claims'),\n    path('all_claims/', views.all_claims, name='all_claims'),\n]"}, {"file": "admin_portal/views.py", "path": "admin_portal/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom expense_tracker.models import Claim\nfrom django.contrib.auth.decorators import user_passes_test\nfrom django.db.models import Q\n\ndef is_accounting_admin(user):\n    return user.is_staff  # Or implement a more specific check if needed\n\n@user_passes_test(is_accounting_admin)\ndef approve_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('admin_portal:all_claims')\n\n@user_passes_test(is_accounting_admin)\ndef reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    if request.method == 'POST':\n        reason = request.POST.get('reason')\n        claim.status = 'Rejected'\n        claim.reason_for_rejection = reason\n        claim.save()\n        return redirect('admin_portal:all_claims')\n    return render(request, 'admin_portal/reject_claim.html', {'claim': claim})\n\n@user_passes_test(is_accounting_admin)\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    return render(request, 'admin_portal/claim_details.html', {'claim': claim})\n\n@user_passes_test(is_accounting_admin)\ndef search_claims(request):\n    query = request.GET.get('q')\n    claims = Claim.objects.all()\n    if query:\n        claims = claims.filter(Q(employee__username__icontains=query) | Q(claim_type__icontains=query) | Q(status__icontains=query))\n    return render(request, 'admin_portal/search_claims.html', {'claims': claims})\n\n@user_passes_test(is_accounting_admin)\ndef all_claims(request):\n    claims = Claim.objects.all()\n    return render(request, 'admin_portal/all_claims.html', {'claims': claims})\n"}, {"file": "admin_portal/templates/admin_portal/reject_claim.html", "path": "admin_portal/templates/admin_portal/reject_claim.html", "code": "<div id=\"reject-claim-container\" class=\"container\">\n    <h1 id=\"reject-claim-title\" class=\"form-title\">Reject Claim</h1>\n    <form id=\"reject-claim-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"reason\" id=\"reason-label\" class=\"form-label\">Reason for rejection:</label>\n        <textarea id=\"reason\" name=\"reason\" class=\"form-textarea\"></textarea>\n        <button id=\"reject-button\" class=\"form-button\" type=\"submit\">Reject</button>\n    </form>\n</div>"}, {"file": "admin_portal/templates/admin_portal/claim_details.html", "path": "admin_portal/templates/admin_portal/claim_details.html", "code": "<div id=\"claim-details-container\" class=\"container\">\n    <h1 id=\"claim-details-title\" class=\"page-title\">Claim Details</h1>\n    <p id=\"employee-username\" class=\"claim-detail\">Employee: {{ claim.employee.username }}</p>\n    <p id=\"claim-type\" class=\"claim-detail\">Type: {{ claim.claim_type }}</p>\n    <p id=\"claim-amount\" class=\"claim-detail\">Amount: {{ claim.amount }}</p>\n    <p id=\"claim-status\" class=\"claim-detail\">Status: {{ claim.status }}</p>\n    <p id=\"rejection-reason\" class=\"claim-detail\">Reason for Rejection: {{ claim.reason_for_rejection }}</p>\n</div>"}, {"file": "admin_portal/templates/admin_portal/search_claims.html", "path": "admin_portal/templates/admin_portal/search_claims.html", "code": "<div id=\"search-claims-container\" class=\"container\">\n    <h1 id=\"search-claims-title\" class=\"page-title\">Search Claims</h1>\n    <form id=\"search-form\" method=\"get\" action=\"{% url 'admin_portal:search_claims' %}\">\n        <input type=\"text\" id=\"search-input\" name=\"q\" class=\"form-input\">\n        <button type=\"submit\" id=\"search-button\" class=\"form-button\">Search</button>\n    </form>\n\n    <ul id=\"search-results\" class=\"results-list\">\n        {% for claim in claims %}\n            <li id=\"search-result-{{ claim.id }}\" class=\"result-item\">{{ claim.employee.username }} - {{ claim.claim_type }} - {{ claim.status }}</li>\n        {% endfor %}\n    </ul>\n</div>"}, {"file": "admin_portal/templates/admin_portal/all_claims.html", "path": "admin_portal/templates/admin_portal/all_claims.html", "code": "<div id=\"all-claims-container\" class=\"container\">\n    <h1 id=\"all-claims-title\" class=\"page-title\">All Claims</h1>\n    <ul id=\"claims-list\" class=\"claims-list\">\n        {% for claim in claims %}\n            <li id=\"claim-{{ claim.id }}\" class=\"claim-item\">\n                <span class=\"claim-info\">{{ claim.employee.username }} - {{ claim.claim_type }} - {{ claim.status }}</span>\n                <a href=\"{% url 'admin_portal:view_claim_details' claim.id %}\" id=\"claim-details-link-{{ claim.id }}\" class=\"details-link\">Details</a>\n                {% if claim.status == 'Pending' %}\n                    <a href=\"{% url 'admin_portal:approve_claim' claim.id %}\" id=\"approve-claim-link-{{ claim.id }}\" class=\"approve-link\">Approve</a>\n                    <a href=\"{% url 'admin_portal:reject_claim' claim.id %}\" id=\"reject-claim-link-{{ claim.id }}\" class=\"reject-link\">Reject</a>\n                {% endif %}\n            </li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'admin_portal:search_claims' %}\" id=\"search-claims-link\" class=\"page-link\">Search Claims</a>\n</div>"}, {"file": "budget_control/urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'budget_control'\n\nurlpatterns = [\n    path('analyze_balances/', views.analyze_balances, name='analyze_balances'),\n    path('generate_reports/', views.generate_reports, name='generate_reports'),\n    path('set_limits/', views.set_limits, name='set_limits'),\n    path('send_alerts/', views.send_alerts, name='send_alerts'),\n]"}, {"file": "budget_control/views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect\nfrom expense_tracker.models import Budget, Claim\nfrom django.contrib.auth.decorators import user_passes_test\n\ndef is_accounting_admin(user):\n    return user.is_staff\n\n@user_passes_test(is_accounting_admin)\ndef analyze_balances(request):\n    budgets = Budget.objects.all()\n    return render(request, 'budget_control/analyze_balances.html', {'budgets': budgets})\n\n@user_passes_test(is_accounting_admin)\ndef generate_reports(request):\n    claims = Claim.objects.all()\n    return render(request, 'budget_control/generate_reports.html', {'claims': claims})\n\n@user_passes_test(is_accounting_admin)\ndef set_limits(request):\n    if request.method == 'POST':\n        category = request.POST.get('category')\n        limit = request.POST.get('limit')\n        budget, created = Budget.objects.get_or_create(category=category)\n        budget.limit = limit\n        budget.save()\n        return redirect('budget_control:analyze_balances')\n    else:\n        return render(request, 'budget_control/set_limits.html')\n\n@user_passes_test(is_accounting_admin)\ndef send_alerts(request):\n    # Implement logic to check budget limits and send alerts (e.g., via email)\n    return render(request, 'budget_control/send_alerts.html') # Template for displaying status/config for alerts\n"}, {"file": "budget_control/templates/budget_control/analyze_balances.html", "path": "budget_control/templates/budget_control/analyze_balances.html", "code": "<div id=\"analyze-balances-container\" class=\"container\">\n    <h1 id=\"analyze-balances-title\" class=\"page-title\">Analyze Expense Balances</h1>\n    <ul id=\"budgets-list\" class=\"budgets-list\">\n        {% for budget in budgets %}\n            <li id=\"budget-{{ budget.category }}\" class=\"budget-item\">\n                <span class=\"budget-info\">{{ budget.category }}: Limit = {{ budget.limit }}, Current Spending = {{ budget.current_spending }}</span>\n            </li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'budget_control:set_limits' %}\" id=\"set-limits-link\" class=\"page-link\">Set Budget Limits</a>\n</div>"}, {"file": "budget_control/templates/budget_control/generate_reports.html", "path": "budget_control/templates/budget_control/generate_reports.html", "code": "<div id=\"generate-reports-container\" class=\"container\">\n    <h1 id=\"generate-reports-title\" class=\"page-title\">Generate Reports</h1>\n\n    <!-- Display claims data or use a reporting library to generate more detailed reports -->\n    <ul id=\"claims-list\" class=\"claims-list\">\n      {% for claim in claims %}\n        <li id=\"claim-{{claim.id}}\" class=\"claim-item\">{{claim.employee}} - {{claim.claim_type}} - {{claim.amount}}</li>\n      {% endfor %}\n    </ul>\n</div>"}, {"file": "budget_control/templates/budget_control/set_limits.html", "path": "budget_control/templates/budget_control/set_limits.html", "code": "<div id=\"set-limits-container\" class=\"container\">\n    <h1 id=\"set-limits-title\" class=\"form-title\">Set Budget Limits</h1>\n    <form id=\"set-limits-form\" method=\"post\">\n        {% csrf_token %}\n        <label for=\"category\" id=\"category-label\" class=\"form-label\">Category:</label>\n        <select name=\"category\" id=\"category-select\" class=\"form-select\">\n            <option value=\"Travel\" id=\"travel-option\">Travel</option>\n            <option value=\"Labor\" id=\"labor-option\">Labor</option>\n            <option value=\"Management\" id=\"management-option\">Management</option>\n            <option value=\"Equipment\" id=\"equipment-option\">Equipment</option>\n        </select><br><br>\n        <label for=\"limit\" id=\"limit-label\" class=\"form-label\">Limit:</label>\n        <input type=\"number\" name=\"limit\" id=\"limit-input\" class=\"form-input\"><br><br>\n        <button type=\"submit\" id=\"set-limit-button\" class=\"form-button\">Set Limit</button>\n    </form>\n</div>"}, {"file": "budget_control/templates/budget_control/send_alerts.html", "path": "budget_control/templates/budget_control/send_alerts.html", "code": "<div id=\"send-alerts-container\" class=\"container\">\n    <h1 id=\"send-alerts-title\" class=\"page-title\">Send Budget Alerts</h1>\n    <p id=\"alerts-status\" class=\"status-message\">Alert configuration and status would be displayed here.</p>\n</div>"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Expense Tracker</title>\n    <style>\n        /* Basic CSS for demonstration - can be moved to a separate CSS file */\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .container { max-width: 800px; margin: 0 auto; }\n        .form-title, .page-title { text-align: center; }\n        .form-label { display: block; margin-bottom: 5px; }\n        .form-input, .form-select, .form-textarea { width: 100%; padding: 8px; margin-bottom: 10px; box-sizing: border-box; }\n        .form-button { background-color: #4CAF50; color: white; padding: 10px 20px; border: none; cursor: pointer; }\n        .page-link { display: inline-block; margin-top: 10px; }\n        .claims-list { list-style: none; padding: 0; }\n        .claim-item { border: 1px solid #ddd; margin-bottom: 5px; padding: 10px; }\n        .claim-info { display: block; }\n        .edit-claim-link, .details-link, .approve-link, .reject-link { margin-left: 10px; }\n        .results-list { list-style: none; padding: 0; }\n        .result-item { border-bottom: 1px solid #eee; padding: 5px 0; }\n    </style>\n</head>\n<body>\n    <div id=\"base-content\" class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}], "13": [{"file": "models.py", "path": "app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    id = models.AutoField(primary_key=True) #Explicit ID\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    id = models.AutoField(primary_key=True) #Explicit ID\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    id = models.AutoField(primary_key=True) #Explicit ID\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'Purchase Record: {self.customer} - {self.product}'\n\nclass PreferredProduct(models.Model):\n    id = models.AutoField(primary_key=True) #Explicit ID\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer} - {self.product}'"}, {"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom django.http import HttpResponse\n\ndef home(request):\n    return HttpResponse(\"<h1 id='home-title' class='home-title'>Welcome to the system!</h1>\")\n\n# Customer Management\ndef add_customer(request):\n    return HttpResponse(\"<h1 id='add-customer-title' class='customer-title'>Add Customer</h1>\")\n\ndef edit_customer(request, customer_id):\n    return HttpResponse(f\"<h1 id='edit-customer-title' class='customer-title'>Edit Customer {customer_id}</h1>\")\n\ndef delete_customer(request, customer_id):\n    return HttpResponse(f\"<h1 id='delete-customer-title' class='customer-title'>Delete Customer {customer_id}</h1>\")\n\ndef view_customer(request, customer_id):\n    return HttpResponse(f\"<h1 id='view-customer-title' class='customer-title'>View Customer {customer_id}</h1>\")\n\n# Product Management\ndef add_product(request):\n    return HttpResponse(\"<h1 id='add-product-title' class='product-title'>Add Product</h1>\")\n\ndef edit_product(request, product_id):\n    return HttpResponse(f\"<h1 id='edit-product-title' class='product-title'>Edit Product {product_id}</h1>\")\n\ndef delete_product(request, product_id):\n    return HttpResponse(f\"<h1 id='delete-product-title' class='product-title'>Delete Product {product_id}</h1>\")\n\ndef view_product(request, product_id):\n    return HttpResponse(f\"<h1 id='view-product-title' class='product-title'>View Product {product_id}</h1>\")\n\n# Purchase Records\ndef add_purchase_record(request):\n    return HttpResponse(\"<h1 id='add-purchase-title' class='purchase-title'>Add Purchase Record</h1>\")\n\ndef edit_purchase_record(request, record_id):\n    return HttpResponse(f\"<h1 id='edit-purchase-title' class='purchase-title'>Edit Purchase Record {record_id}</h1>\")\n\ndef delete_purchase_record(request, record_id):\n    return HttpResponse(f\"<h1 id='delete-purchase-title' class='purchase-title'>Delete Purchase Record {record_id}</h1>\")\n\ndef view_purchase_record(request, record_id):\n    return HttpResponse(f\"<h1 id='view-purchase-title' class='purchase-title'>View Purchase Record {record_id}</h1>\")\n\n# Preferred Products Management\ndef add_preferred_product(request, customer_id):\n    return HttpResponse(f\"<h1 id='add-preferred-title' class='preferred-title'>Add Preferred Product for Customer {customer_id}</h1>\")\n\ndef edit_preferred_product(request, customer_id):\n    return HttpResponse(f\"<h1 id='edit-preferred-title' class='preferred-title'>Edit Preferred Product for Customer {customer_id}</h1>\")\n\ndef delete_preferred_product(request, customer_id, product_id):\n    return HttpResponse(f\"<h1 id='delete-preferred-title' class='preferred-title'>Delete Preferred Product {product_id} for Customer {customer_id}</h1>\")\n\ndef view_preferred_products(request, customer_id):\n    return HttpResponse(f\"<h1 id='view-preferred-title' class='preferred-title'>View Preferred Products for Customer {customer_id}</h1>\")\n\n# Sales Analysis\ndef generate_sales_report(request):\n    return HttpResponse(\"<h1 id='sales-report-title' class='sales-title'>Generate Sales Report</h1>\")\n\ndef analyze_sales_trends(request):\n    return HttpResponse(\"<h1 id='sales-trends-title' class='sales-title'>Analyze Sales Trends</h1>\")\n\ndef product_performance_analysis(request):\n    return HttpResponse(\"<h1 id='product-performance-title' class='sales-title'>Product Performance Analysis</h1>\")"}, {"file": "urls.py", "path": "app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n\n    path('customers/add/', views.add_customer, name='add_customer'),\n    path('customers/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customers/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customers/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n\n    path('products/add/', views.add_product, name='add_product'),\n    path('products/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('products/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('products/view/<int:product_id>/', views.view_product, name='view_product'),\n\n    path('purchases/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchases/edit/<int:record_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchases/delete/<int:record_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchases/view/<int:record_id>/', views.view_purchase_record, name='view_purchase_record'),\n\n    path('preferred_products/add/<int:customer_id>/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred_products/edit/<int:customer_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred_products/delete/<int:customer_id>/<int:product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred_products/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n\n    path('sales/report/', views.generate_sales_report, name='generate_sales_report'),\n    path('sales/trends/', views.analyze_sales_trends, name='analyze_sales_trends'),\n    path('sales/performance/', views.product_performance_analysis, name='product_performance_analysis'),\n]"}, {"file": "admin.py", "path": "app/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "serializers.py", "path": "app/serializers.py", "code": "from rest_framework import serializers\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nclass CustomerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Customer\n        fields = '__all__'\n\nclass ProductSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Product\n        fields = '__all__'\n\nclass PurchaseRecordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PurchaseRecord\n        fields = '__all__'\n\nclass PreferredProductSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PreferredProduct\n        fields = '__all__'"}, {"file": "settings.py", "path": "config/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-2e_6z7@71_&1_d*b)@9y5^#3q7x*6^$5q-!f5$1n*@m_0b&y'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'config.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'config.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Add this line\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nREST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n    'PAGE_SIZE': 10\n}\n"}, {"file": "urls.py", "path": "config/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('app.urls')),\n]"}, {"file": "wsgi.py", "path": "config/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "config/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napplication = get_asgi_application()"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "Django\ndjangorestframework"}], "14": [{"file": "views.py", "path": "hello_world/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    context = {\n        'message': 'Hello World'\n    }\n    return render(request, 'hello_world/hello_world.html', context)"}, {"file": "urls.py", "path": "hello_world/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello_world.urls')),\n]"}, {"file": "hello_world.html", "path": "hello_world/templates/hello_world/hello_world.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            font-family: sans-serif;\n            background-color: #f0f0f0;\n        }\n        .message-container {\n            text-align: center;\n        }\n        .message {\n            font-size: 2em;\n            color: #333;\n        }\n\n        /* Responsive Design (Example) */\n        @media (max-width: 768px) {\n            .message {\n                font-size: 1.5em;\n            }\n        }\n\n    </style>\n</head>\n<body>\n    <div id=\"message-container\" class=\"message-container\">\n        <div id=\"message\" class=\"message\">{{ message }}</div>\n    </div>\n</body>\n</html>"}, {"file": "apps.py", "path": "hello_world/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloWorldConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hello_world'"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'  # Replace with a strong secret key\nDEBUG = True  # Set to False in production\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello_world',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add this line\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Add this line\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <style>\n        .container {\n            text-align: center;\n            padding-top: 50px;\n        }\n        .welcome-heading {\n            font-size: 2em;\n            margin-bottom: 20px;\n        }\n        .button-link {\n            text-decoration: none;\n        }\n        .helloworld-button {\n            background-color: #4CAF50;\n            border: none;\n            color: white;\n            padding: 15px 32px;\n            text-align: center;\n            text-decoration: none;\n            display: inline-block;\n            font-size: 16px;\n            cursor: pointer;\n            border-radius: 5px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 class=\"welcome-heading\" id=\"welcome-message\">Welcome!</h1>\n        <a class=\"button-link\" id=\"helloworld-link\" href=\"{% url 'helloworld' %}\">\n            <button class=\"helloworld-button\" id=\"helloworld-button\">Go to HelloWorld</button>\n        </a>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>HelloWorld</title>\n    <style>\n        .container {\n            text-align: center;\n            padding-top: 50px;\n        }\n        .helloworld-heading {\n            font-size: 2em;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\" id=\"helloworld-container\">\n        <h1 class=\"helloworld-heading\" id=\"helloworld-message\">HelloWorld</h1>\n    </div>\n</body>\n</html>"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'myapp/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'myapp/static')]\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "apps.py", "path": "myapp/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"}, {"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "16": [{"file": "input_validation.py", "path": "modules/input_validation.py", "code": "def check_file_existence(filename):\n    pass\n\ndef validate_headers(filename, expected_headers):\n    pass\n\ndef validate_time_column(filename):\n    pass\n\ndef validate_data_integrity(filename):\n    pass\n\ndef validate_null_value(filename):\n    pass\n"}, {"file": "data_transformation.py", "path": "modules/data_transformation.py", "code": "def transform_to_two_dimension_table(data):\n    pass\n\ndef data_mapping(data, table):\n    pass\n"}, {"file": "output_creation.py", "path": "modules/output_creation.py", "code": "def create_output_excel_file(filename):\n    pass\n\ndef save_table_to_excel(data, filename):\n    pass\n"}, {"file": "main.py", "path": "main.py", "code": "from modules import input_validation\nfrom modules import data_transformation\nfrom modules import output_creation\n\n\ndef main():\n    # Input File Validation\n    filename = 'Spring Semester Subjects.xlsx'\n    if input_validation.check_file_existence(filename):\n        headers = ['#', 'Name', 'Weekday', 'Time']\n        if input_validation.validate_headers(filename, headers):\n            if input_validation.validate_time_column(filename):\n                if input_validation.validate_data_integrity(filename):\n                    if not input_validation.validate_null_value(filename):\n                        # Data Transformation\n                        data = [] # Load data from excel file\n                        two_dim_table = data_transformation.transform_to_two_dimension_table(data)\n                        transformed_table = data_transformation.data_mapping(data, two_dim_table)\n\n                        # Output File Creation\n                        output_filename = 'Transformed_Subjects.xlsx'\n                        output_creation.create_output_excel_file(output_filename)\n                        output_creation.save_table_to_excel(transformed_table, output_filename)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "openpyxl\n"}], "17": [{"file": "data_preparation.py", "path": "src/data_preparation.py", "code": "import pandas as pd\n\n\ndef read_dataset(filename):\n    \"\"\"Load the dataset.\n\n    Args:\n        filename (str): The name of the Excel file to load.\n\n    Returns:\n        pandas.DataFrame: The loaded dataset.\n\n    Raises:\n        FileNotFoundError: If the file is not found.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {filename}\")\n\n\ndef lag_dependent_variable(df, column_name='result', lag=1):\n    \"\"\"Apply a one-period lag to the specified column.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        column_name (str): The name of the column to lag.\n        lag (int): The number of periods to lag.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with the lagged column.\n    \"\"\"\n    df['lagged_result'] = df[column_name].shift(lag)\n    df = df.dropna()\n    return df\n\n\ndef prepare_independent_variables(df, dependent_variable='lagged_result'):\n    \"\"\"Prepare the independent variables and handle missing values.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        dependent_variable (str): The name of the dependent variable column.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with independent and dependent variables.\n\n    Raises:\n        ValueError: If null values are found in the DataFrame.\n    \"\"\"\n    if df.isnull().any().any():\n        raise ValueError(\"Null values found in the DataFrame.  Stopping execution.\")\n\n    independent_variables = [col for col in df.columns if col != dependent_variable]\n    X = df[independent_variables]\n    y = df[dependent_variable]\n    return X, y"}, {"file": "model_creation.py", "path": "src/model_creation.py", "code": "import statsmodels.api as sm\n\ndef create_logistic_model(X, y):\n    \"\"\"Develop a logistic regression model.\n\n    Args:\n        X (pandas.DataFrame): Independent variables.\n        y (pandas.Series): Dependent variable.\n\n    Returns:\n        statsmodels.discrete.discrete_model.BinaryResultsWrapper: The fitted logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)\n    logistic_model = sm.Logit(y, X)\n    model = logistic_model.fit()\n    return model\n\n\ndef generate_model_summary(model):\n    \"\"\"Generate a summary of the logistic model.\n\n    Args:\n        model (statsmodels.discrete.discrete_model.BinaryResultsWrapper): The fitted logistic regression model.\n\n    Returns:\n        str: The model summary as a string.\n    \"\"\"\n    return model.summary()"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\ndef write_summary(summary, filename):\n    \"\"\"Output the model summary to an Excel file.\n\n    Args:\n        summary (str): The model summary.\n        filename (str): The name of the Excel file to write to.\n    \"\"\"\n    df = pd.DataFrame([summary])\n    df.to_excel(filename, index=False)"}, {"file": "main.py", "path": "src/main.py", "code": "from src import data_preparation\nfrom src import model_creation\nfrom src import output\n\n\ndef main():\n    # Data Preparation\n    try:\n        df = data_preparation.read_dataset('Gamedata.xlsx')\n        df = data_preparation.lag_dependent_variable(df)\n        X, y = data_preparation.prepare_independent_variables(df)\n\n        # Model Creation\n        model = model_creation.create_logistic_model(X, y)\n        summary = model_creation.generate_model_summary(model)\n\n        # Output\n        output.write_summary(summary, 'Logistic.xlsx')\n        print(\"Model summary written to Logistic.xlsx\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "Gamedata.xlsx", "path": "Gamedata.xlsx", "code": ""}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "# Main Menu functionality\n\ndef start_game():\n    # Logic to start a new game\n    pass\n\ndef instructions():\n    # Logic to display game instructions\n    pass\n\ndef exit_game():\n    # Logic to exit the game\n    pass\n\ndef main_menu():\n    # Main menu loop and input handling\n    pass"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "# Game Environment functionality\n\ndef move_player(direction):\n    # Logic to move the player\n    pass\n\ndef look_around():\n    # Logic to inspect the current area\n    pass\n\ndef pick_item():\n    # Logic to pick up an item\n    pass\n\ndef check_inventory():\n    # Logic to check the player's inventory\n    pass"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "# Game Logic functionality\n\ndef parse_command(command):\n    # Logic to parse player commands\n    pass\n\ndef update_game_state(action):\n    # Logic to update the game state\n    pass"}, {"file": "help_support.py", "path": "src/help_support.py", "code": "# Help and Support functionality\n\ndef display_help():\n    # Logic to display in-game help\n    pass"}, {"file": "game.py", "path": "src/game.py", "code": "# Main game loop and initialization\n\nfrom src import main_menu, game_environment, game_logic, help_support\n\ndef main():\n    # Initialize game\n    # Game loop\n    pass\n\nif __name__ == \"__main__\":\n    main()"}], "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE)\n    author = models.CharField(max_length=100)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.blog_post.title}'\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import BlogPost, Category, Comment\nfrom django.db.models import Q\nfrom django.contrib.auth.decorators import login_required\nfrom .forms import CommentForm\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5]\n    query = request.GET.get('q')\n    if query:\n        latest_posts = BlogPost.objects.filter(Q(title__icontains=query) | Q(content__icontains=query))\n    return render(request, 'blog/home.html', {'latest_posts': latest_posts})\n\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    if request.method == 'POST':\n        form = CommentForm(request.POST)\n        if form.is_valid():\n            comment = form.save(commit=False)\n            comment.blog_post = post\n            comment.save()\n            return redirect('blog_post_detail', pk=pk)\n    else:\n        form = CommentForm()\n    return render(request, 'blog/blog_post_detail.html', {'post': post, 'form': form})\n\n@login_required\ndef add_post(request):\n    # Add Post\n    pass\n\n@login_required\ndef manage_post(request, pk):\n    #Edit and delete post\n    pass\n\n@login_required\ndef manage_comments(request, comment_id):\n    #Delete comment\n    pass\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\n\ndef categories(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/categories.html', {'categories': categories})\n\n\ndef category_detail(request, category_id):\n    category = get_object_or_404(Category, pk=category_id)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n@login_required\ndef manage_categories(request):\n    #Add, edit and delete category\n    pass\n\ndef archive(request):\n    #Display Archived Posts and Date Filter\n    pass"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('category/<int:category_id>/', views.category_detail, name='category_detail'),\n    path('archive/', views.archive, name='archive'),\n    path('add_post/', views.add_post, name='add_post'),\n    path('manage_post/<int:pk>/', views.manage_post, name='manage_post'),\n    path('manage_comments/<int:comment_id>/', views.manage_comments, name='manage_comments'),\n    path('manage_categories/', views.manage_categories, name='manage_categories'),\n]"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\nfrom .models import Comment\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    message = forms.CharField(widget=forms.Textarea"}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'home'\nLOGOUT_REDIRECT_URL = 'home'"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n    path('accounts/', include('django.contrib.auth.urls')), # new\n]"}, {"file": "home.html", "path": "templates/blog/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"home-title\" class=\"home-title\">Latest Posts</h1>\n    <form id=\"search-form\" class=\"search-form\" method=\"get\">\n        <input id=\"search-input\" class=\"search-input\" type=\"text\" name=\"q\" placeholder=\"Search...\">\n        <button id=\"search-button\" class=\"search-button\" type=\"submit\">Search</button>\n    </form>\n\n    <div id=\"post-list\" class=\"post-list\">\n        {% for post in latest_posts %}\n            <div id=\"post-{{ post.pk }}\" class=\"post\">\n                <h2 id=\"post-title-{{ post.pk }}\" class=\"post-title\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></h2>\n                <p id=\"post-date-{{ post.pk }}\" class=\"post-date\">{{ post.publication_date }}</p>\n                <p id=\"post-content-{{ post.pk }}\" class=\"post-content\">{{ post.content|truncatewords:50 }}</p>\n            </div>\n        {% endfor %}\n    </div>\n{% endblock %}"}, {"file": "blog_post_detail.html", "path": "templates/blog/blog_post_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div id=\"post-detail\" class=\"post-detail\">\n        <h1 id=\"post-title\" class=\"post-title\">{{ post.title }}</h1>\n        <p id=\"post-date\" class=\"post-date\">{{ post.publication_date }}</p>\n        <p id=\"post-content\" class=\"post-content\">{{ post.content }}</p>\n    </div>\n\n    <div id=\"comment-section\" class=\"comment-section\">\n        <h2 id=\"comment-section-title\" class=\"comment-section-title\">Comments</h2>\n        <form id=\"comment-form\" class=\"comment-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"comment-submit\" class=\"comment-submit\" type=\"submit\">Add Comment</button>\n        </form>\n\n        <div id=\"comment-list\" class=\"comment-list\">\n            {% for comment in post.comment_set.all %}\n                <div id=\"comment-{{ comment.pk }}\" class=\"comment\">\n                    <p id=\"comment-author-{{ comment.pk }}\" class=\"comment-author\">{{ comment.author }}</p>\n                    <p id=\"comment-date-{{ comment.pk }}\" class=\"comment-date\">{{ comment.publication_date }}</p>\n                    <p id=\"comment-content-{{ comment.pk }}\" class=\"comment-content\">{{ comment.content }}</p>\n                </div>\n            {% endfor %}\n        </div>\n    </div>\n{% endblock %}"}, {"file": "about.html", "path": "templates/blog/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"about-title\" class=\"about-title\">About Us</h1>\n    <p id=\"about-content\" class=\"about-content\">This is a simple blog application created with Django.</p>\n{% endblock %}"}, {"file": "categories.html", "path": "templates/blog/categories.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"categories-title\" class=\"categories-title\">Categories</h1>\n    <ul id=\"category-list\" class=\"category-list\">\n        {% for category in categories %}\n            <li id=\"category-{{ category.pk }}\" class=\"category-item\"><a href=\"{% url 'category_detail' category_id=category.pk %}\">{{ category.name }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "category_detail.html", "path": "templates/blog/category_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1 id=\"category-title\" class=\"category-title\">{{ category.name }}</h1>\n\n    <div id=\"post-list\" class=\"post-list\">\n        {% for post in posts %}\n            <div id=\"post-{{ post.pk }}\" class=\"post\">\n                <h2 id=\"post-title-{{ post.pk }}\" class=\"post-title\"><a href=\"{% url 'blog_post_detail' pk=post.pk %}\">{{ post.title }}</a></h2>\n                <p id=\"post-date-{{ post.pk }}\" class=\"post-date\">{{ post.publication_date }}</p>\n                <p id=\"post-content-{{ post.pk }}\" class=\"post-content\">{{ post.content|truncatewords:50 }}</p>\n            </div>\n        {% endfor %}\n    </div>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>My Blog</title>\n    <style>\n       .navbar {\n            background-color: #f0f0f0;\n            padding: 10px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n\n        .nav-list {\n            list-style: none;\n            padding: 0;\n            margin: 0;\n            display: flex;\n        }\n\n        .nav-item {\n            margin-right: 20px;\n        }\n\n        .nav-link {\n            text-decoration: none;\n            color: #333;\n        }\n\n        .login-logout {\n            display: flex;\n            align-items: center;\n        }\n\n        .login-logout a {\n            margin-left: 10px;\n            text-decoration: none;\n            color: #333;\n        }\n\n    </style>\n</head>\n<body>\n    <nav id=\"navbar\" class=\"navbar\">\n        <a id=\"home-link\" class=\"nav-link\" href=\"{% url 'home' %}\">Home</a>\n        <ul id=\"nav-list\" class=\"nav-list\">\n            <li id=\"about-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'about' %}\">About</a></li>\n            <li id=\"categories-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'categories' %}\">Categories</a></li>\n            <li id=\"archive-item\" class=\"nav-item\"><a class=\"nav-link\" href=\"{% url 'archive' %}\">Archive</a></li>\n        </ul>\n\n        <div id=\"login-logout\" class=\"login-logout\">\n            {% if user.is_authenticated %}\n                <span>Hello, {{ user.username }}!</span>\n                <a href=\"{% url 'logout' %}\">Logout</a>\n            {% else %}\n                <a href=\"{% url 'login' %}\">Login</a>\n                <a href=\"{% url 'register' %}\">Register</a>\n            {% endif %}\n        </div>\n\n    </nav>\n\n    <div id=\"content\" class=\"content\">\n        {% block content %}{% endblock %}\n    </div>\n\n</body>\n</html>"}, {"file": "admin.py", "path": "blog/admin.py", "code": "from django.contrib import admin\nfrom .models import BlogPost, Category, Comment\n\nadmin.site.register(BlogPost)\nadmin.site.register(Category)\nadmin.site.register(Comment)"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "register.html", "path": "templates/registration/register.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Sign up</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Sign up</button>\n  </form>\n{% endblock %}"}, {"file": "__init__.py", "path": "blog/__init__.py", "code": ""}, {"file": "apps.py", "path": "blog/apps.py", "code": "from django.apps import AppConfig\n\n\nclass BlogConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'blog'"}, {"file": "static/.keep", "path": "static/.keep", "code": ""}]}