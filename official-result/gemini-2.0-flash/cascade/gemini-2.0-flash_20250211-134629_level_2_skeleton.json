{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# You might not need a model for this project as BMI is calculated on the fly.\n# However, if you want to store user data, create models here.\n\n# Example:\n# class UserProfile(models.Model):\n#     height = models.FloatField()\n#     weight = models.FloatField()\n#     bmi = models.FloatField(null=True, blank=True)\n#     category = models.CharField(max_length=50, null=True, blank=True)\n"}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMIForm(forms.Form):\n    height = forms.FloatField(label='Height')\n    height_unit = forms.ChoiceField(choices=[('cm', 'cm'), ('inches', 'inches')], label='Height Unit')\n    weight = forms.FloatField(label='Weight')\n    weight_unit = forms.ChoiceField(choices=[('kg', 'kg'), ('lbs', 'lbs')], label='Weight Unit')\n"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom .forms import BMIForm\n\ndef calculate_bmi(height, height_unit, weight, weight_unit):\n    # Implement BMI calculation logic here\n    # Convert units if necessary\n    # Return BMI value and category\n    if height_unit == 'inches':\n      height_cm = height * 2.54\n    else:\n      height_cm = height\n\n    if weight_unit == 'lbs':\n      weight_kg = weight * 0.453592\n    else:\n      weight_kg = weight\n\n    height_m = height_cm / 100.0\n    bmi = weight_kg / (height_m * height_m)\n\n    if bmi < 18.5:\n      category = 'Underweight'\n    elif 18.5 <= bmi < 25:\n      category = 'Normal weight'\n    elif 25 <= bmi < 30:\n      category = 'Overweight'\n    else:\n      category = 'Obese'\n\n    return bmi, category\n\n\ndef home_page(request):\n    return render(request, 'home.html')\n\n\ndef bmi_calculator_page(request):\n    if request.method == 'POST':\n        form = BMIForm(request.POST)\n        if form.is_valid():\n            height = form.cleaned_data['height']\n            height_unit = form.cleaned_data['height_unit']\n            weight = form.cleaned_data['weight']\n            weight_unit = form.cleaned_data['weight_unit']\n\n            bmi, category = calculate_bmi(height, height_unit, weight, weight_unit)\n\n            return render(request, 'bmi_calculator.html', {'form': form, 'bmi': bmi, 'category': category})\n    else:\n        form = BMIForm()\n    return render(request, 'bmi_calculator.html', {'form': form})\n"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_page, name='home'),\n    path('bmi_calculator/', views.bmi_calculator_page, name='bmi_calculator'),\n]\n"}, {"file": "home.html", "path": "bmi_calculator/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>BMI Calculator</h1>\n  <p>Welcome to the BMI Calculator! This tool helps you calculate your Body Mass Index (BMI) and understand your weight category.</p>\n  <p>BMI is a measure of body fat based on height and weight that applies to adult men and women.</p>\n  <a href=\"{% url 'bmi_calculator' %}\">Go to BMI Calculator</a>\n{% endblock %}\n"}, {"file": "bmi_calculator.html", "path": "bmi_calculator/templates/bmi_calculator.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>BMI Calculator</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Calculate BMI</button>\n  </form>\n\n  {% if bmi %}\n    <h2>Your BMI: {{ bmi|floatformat:2 }}</h2>\n    <p>Category: {{ category }}</p>\n\n    <p>Interpretation: (Add a brief interpretation of the BMI value here)</p>\n    <p>Health Advice: (Add links to health advice resources here)</p>\n  {% endif %}\n\n  <button onclick=\"window.location.reload()\">Reset</button>\n{% endblock %}\n"}, {"file": "base.html", "path": "bmi_calculator/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Ensure 'bmi_calculator' is in INSTALLED_APPS\n# TEMPLATES should point to the templates directory.\n# STATIC_URL should be defined (e.g., '/static/')\n# ROOT_URLCONF should point to the project's urls.py\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('bmi_calculator.urls')),\n]\n"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\n# class Currency(models.Model):\n#     code = models.CharField(max_length=3, unique=True)\n#     name = models.CharField(max_length=50)\n#     symbol = models.CharField(max_length=5)\n\n#     def __str__(self):\n#         return self.code"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\n# from .models import Currency\n\ndef home(request):\n    # currencies = Currency.objects.all()\n    # context = {'currencies': currencies}\n    context = {}\n    return render(request, 'currency_converter/home.html', context)\n\n# def currency_details(request):\n#     context = {}\n#     return render(request, 'currency_converter/currency_details.html', context)\n\n# def settings(request):\n#     context = {}\n#     return render(request, 'currency_converter/settings.html', context)"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    # path('currency_details/', views.currency_details, name='currency_details'),\n    # path('settings/', views.settings, name='settings'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\nclass ConversionForm(forms.Form):\n    # base_currency = forms.ModelChoiceField(queryset=Currency.objects.all(), label='Base Currency')\n    # target_currency = forms.ModelChoiceField(queryset=Currency.objects.all(), label='Target Currency')\n    amount = forms.DecimalField(label='Amount')\n"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n    <!-- Implement form elements for: -->\n    <!-- - Select Base Currency -->\n    <!-- - Select Target Currency -->\n    <!-- - Enter Amount -->\n    <!-- - Convert Button -->\n    <!-- - Display Conversion Result -->\n    <!-- - Exchange Rate Info (Optional) -->\n</body>\n</html>"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\n# from .models import Currency\n\n# admin.site.register(Currency)"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generated_password/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    if request.method == 'POST':\n        length = int(request.POST.get('length'))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        characters = ''\n        if include_uppercase:\n            characters += string.ascii_uppercase\n        if include_lowercase:\n            characters += string.ascii_lowercase\n        if include_numbers:\n            characters += string.digits\n        if include_symbols:\n            characters += string.punctuation\n\n        if not characters:\n            characters = string.ascii_letters  # Default to letters if nothing is selected\n\n        generated_password = ''.join(random.choice(characters) for i in range(length))\n\n        return render(request, 'generated_password.html', {'password': generated_password})\n\n    return render(request, 'password_options.html')\n\ndef generated_password(request):\n    # Password generation logic should happen in password_options\n    # This view should ideally just display the password from a session or POST request.\n    return render(request, 'generated_password.html', {'password': 'Error: Password not generated correctly.'})\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "home.html", "path": "password_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Password Generator!</h1>\n    <p>This is a simple password generator website.</p>\n    <a href=\"{% url 'password_options' %}\">Generate Password</a>\n    {% if show_welcome_message %}<p>Welcome message example!</p>{% endif %}\n</body>\n</html>"}, {"file": "password_options.html", "path": "password_generator/templates/password_options.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Options</title>\n</head>\n<body>\n    <h1>Password Options</h1>\n    <form method=\"post\" action=\"{% url 'password_options' %}\">\n        {% csrf_token %}\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" min=\"1\" max=\"128\" value=\"12\"><br><br>\n\n        <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\">\n        <label for=\"uppercase\">Include Uppercase Letters</label><br><br>\n\n        <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\">\n        <label for=\"lowercase\">Include Lowercase Letters</label><br><br>\n\n        <input type=\"checkbox\" id=\"numbers\" name=\"numbers\">\n        <label for=\"numbers\">Include Numbers</label><br><br>\n\n        <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n        <label for=\"symbols\">Include Symbols</label><br><br>\n\n        <button type=\"submit\">Generate Password</button>\n    </form>\n</body>\n</html>"}, {"file": "generated_password.html", "path": "password_generator/templates/generated_password.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Generated Password</title>\n</head>\n<body>\n    <h1>Generated Password</h1>\n    <p>Your generated password is: <strong>{{ password }}</strong></p>\n    <button onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n    <script>\n        function copyToClipboard() {\n            navigator.clipboard.writeText('{{ password }}');\n            alert(\"Password copied to clipboard!\");\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Password Generator</h1>\n    <p>This website is designed to generate strong and random passwords based on your specifications. You can customize the password length and character types (uppercase, lowercase, numbers, symbols) to meet your security needs.</p>\n</body>\n</html>"}, {"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# No models needed for this simple application"}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "from django.contrib import admin\n\n# No admin configuration needed for this simple application"}], "4": [{"file": "urls.py", "path": "qrcode_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr, name='generate_qr'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qrcode_generator/views.py", "code": "from django.shortcuts import render, redirect\nimport qrcode\nfrom io import BytesIO\nimport base64\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_qr(request):\n    if request.method == 'POST':\n        text = request.POST.get('text', '')\n        box_size = int(request.POST.get('box_size', '10')) # Default box_size value\n        border_size = int(request.POST.get('border_size', '4')) # Default border_size value\n        ecc = request.POST.get('ecc', 'medium') # Default border_size value\n        fill_color = request.POST.get('fill_color', 'black') # Default fill_color value\n        back_color = request.POST.get('back_color', 'white') # Default back_color value\n\n        error_correction_levels = {\n            'small': qrcode.constants.ERROR_CORRECT_L,\n            'medium': qrcode.constants.ERROR_CORRECT_M,\n            'large': qrcode.constants.ERROR_CORRECT_H,\n        }\n        error_correction = error_correction_levels.get(ecc, qrcode.constants.ERROR_CORRECT_M)\n\n        try:\n            qr = qrcode.QRCode(\n                version=None,\n                error_correction=error_correction,\n                box_size=box_size,\n                border=border_size,\n            )\n            qr.add_data(text)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=fill_color, back_color=back_color)\n\n            buffer = BytesIO()\n            img.save(buffer, 'PNG')\n            img_data = base64.b64encode(buffer.getvalue()).decode('utf-8')\n\n            return render(request, 'qr_code_generator.html', {'qr_code': img_data})\n\n        except Exception as e:\n            return render(request, 'qr_code_generator.html', {'error': str(e)})\n\n    return render(request, 'qr_code_generator.html')\n\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "qrcode_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to QR Code Generator!</h1>\n    <p>Simple, welcoming text explaining what the website does.</p>\n    <a href=\"{% url 'generate_qr' %}\"><button>Generate QR Code</button></a>\n</body>\n</html>"}, {"file": "qr_code_generator.html", "path": "qrcode_generator/templates/qr_code_generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1>QR Code Generator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"text\">Text/URL:</label>\n        <input type=\"text\" id=\"text\" name=\"text\"><br><br>\n        <label for=\"box_size\">Box Size (Max 128):</label>\n        <input type=\"number\" id=\"box_size\" name=\"box_size\" min=\"1\" max=\"128\" value=\"10\"><br><br>\n        <label for=\"border_size\">Border Size (Max 10):</label>\n        <input type=\"number\" id=\"border_size\" name=\"border_size\" min=\"0\" max=\"10\" value=\"4\"><br><br>\n        <label for=\"ecc\">Error Correction Rate:</label>\n        <select id=\"ecc\" name=\"ecc\">\n            <option value=\"small\">Small</option>\n            <option value=\"medium\" selected>Medium</option>\n            <option value=\"large\">Large</option>\n        </select><br><br>\n        <label for=\"fill_color\">Fill Color:</label>\n        <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\"><br><br>\n        <label for=\"back_color\">Back Color:</label>\n        <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#ffffff\"><br><br>\n        <button type=\"submit\">Generate</button>\n    </form>\n\n    {% if qr_code %}\n        <h2>Generated QR Code:</h2>\n        <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n        <a href=\"data:image/png;base64,{{ qr_code }}\" download=\"qrcode.png\"><button>Download QR Code</button></a>\n    {% endif %}\n\n    {% if error %}\n        <p style=\"color:red;\">{{ error }}</p>\n    {% endif %}\n</body>\n</html>"}, {"file": "about.html", "path": "qrcode_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Website</h1>\n    <p>Details about the website, its purpose, and how it works.</p>\n\n    <h2>Privacy Policy</h2>\n    <p>The privacy policy of the website.</p>\n\n    <h2>Terms of Service</h2>\n    <p>The terms of service of the website.</p>\n</body>\n</html>"}, {"file": "models.py", "path": "qrcode_generator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "qrcode_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}], "5": [{"file": "urls.py", "path": "converter_project/converter_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "converter_project/converter_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport markdown\n\ndef home(request):\n    context = {}\n    return render(request, 'home.html', context)\n\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        context = {'html_output': html_output}\n        return render(request, 'convert.html', context)\n    else:\n        return render(request, 'convert.html')\n\ndef about(request):\n    context = {}\n    return render(request, 'about.html', context)"}, {"file": "home.html", "path": "converter_project/converter_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome!</h1>\n    <p>This is a Markdown to HTML converter.</p>\n    <a href=\"{% url 'convert' %}\">Convert</a> | <a href=\"{% url 'about' %}\">About</a>\n{% endblock %}"}, {"file": "convert.html", "path": "converter_project/converter_app/templates/convert.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Convert Markdown to HTML</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <textarea name=\"markdown_text\" rows=\"10\" cols=\"50\"></textarea><br>\n        <button type=\"submit\">Convert</button>\n    </form>\n\n    {% if html_output %}\n        <h2>HTML Output:</h2>\n        <div id=\"html-output\">{{ html_output|safe }}</div>\n    {% endif %}\n{% endblock %}"}, {"file": "about.html", "path": "converter_project/converter_app/templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>About</h1>\n    <p>This converter was created by...</p>\n{% endblock %}"}, {"file": "base.html", "path": "converter_project/converter_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Markdown to HTML Converter</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "models.py", "path": "converter_project/converter_app/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "converter_project/converter_app/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "converter_project/converter_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass ConverterAppConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter_app'"}, {"file": "settings.py", "path": "converter_project/converter_project/settings.py", "code": "# settings.py (Relevant parts)\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter_app', # Add your app here\n]\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nSTATIC_URL = 'static/'"}], "6": [{"file": "models.py", "path": "todoapp/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE, related_name='tasks')\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    due_date = models.DateField(null=True, blank=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todoapp/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.urls import reverse\nfrom .models import TodoList, Task\nfrom django.http import JsonResponse\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    return render(request, 'todoapp/home.html', {'todo_lists': todo_lists})\n\ndef todo_list_detail(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = todo_list.tasks.all()\n    return render(request, 'todoapp/todo_list_detail.html', {'todo_list': todo_list, 'tasks': tasks})\n\ndef create_todo_list(request):\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        TodoList.objects.create(name=name)\n        return redirect('home')\n    return render(request, 'todoapp/create_todo_list.html')\n\ndef create_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        title = request.POST.get('title')\n        description = request.POST.get('description')\n        due_date = request.POST.get('due_date') or None  # Handle empty due_date\n        Task.objects.create(todo_list=todo_list, title=title, description=description, due_date=due_date)\n        return redirect('todo_list_detail', list_id=list_id)\n    return render(request, 'todoapp/create_task.html', {'todo_list': todo_list})\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        task.title = request.POST.get('title')\n        task.description = request.POST.get('description')\n        task.due_date = request.POST.get('due_date') or None  # Handle empty due_date\n        task.save()\n        return redirect('todo_list_detail', list_id=task.todo_list.id)\n    return render(request, 'todoapp/edit_task.html', {'task': task})\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list_detail', list_id=list_id)\n\ndef mark_task_completed(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list_detail', list_id=task.todo_list.id)\n\n\n# Example Analysis Views (Optional)\n\ndef task_completion_chart(request):\n    # Dummy data for demonstration\n    data = {\n        'labels': ['Completed', 'Incomplete'],\n        'datasets': [{\n            'label': 'Tasks',\n            'data': [60, 40],\n            'backgroundColor': ['green', 'red']\n        }]\n    }\n    return JsonResponse(data)\n\ndef task_distribution_chart(request):\n    # Dummy data for demonstration\n    data = {\n        'labels': ['List 1', 'List 2', 'List 3'],\n        'datasets': [{\n            'label': 'Tasks',\n            'data': [30, 20, 50],\n            'backgroundColor': ['blue', 'orange', 'purple']\n        }]\n    }\n    return JsonResponse(data)"}, {"file": "urls.py", "path": "todoapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('list/<int:list_id>/', views.todo_list_detail, name='todo_list_detail'),\n    path('list/create/', views.create_todo_list, name='create_todo_list'),\n    path('list/<int:list_id>/task/create/', views.create_task, name='create_task'),\n    path('task/<int:task_id>/edit/', views.edit_task, name='edit_task'),\n    path('task/<int:task_id>/delete/', views.delete_task, name='delete_task'),\n    path('task/<int:task_id>/complete/', views.mark_task_completed, name='mark_task_completed'),\n\n    # Analysis URLs (Optional)\n    path('analysis/completion_chart/', views.task_completion_chart, name='task_completion_chart'),\n    path('analysis/distribution_chart/', views.task_distribution_chart, name='task_distribution_chart'),\n]"}, {"file": "home.html", "path": "todoapp/templates/todoapp/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App - Home</title>\n</head>\n<body>\n    <h1>Todo Lists</h1>\n    <ul>\n        {% for todo_list in todo_lists %}\n            <li><a href=\"{% url 'todo_list_detail' todo_list.id %}\">{{ todo_list.name }}</a></li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'create_todo_list' %}\">Create New Todo List</a>\n</body>\n</html>"}, {"file": "todo_list_detail.html", "path": "todoapp/templates/todoapp/todo_list_detail.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List - {{ todo_list.name }}</title>\n</head>\n<body>\n    <h1>{{ todo_list.name }}</h1>\n    <ul>\n        {% for task in tasks %}\n            <li>\n                {{ task.title }} - {{ task.description }}\n                {% if task.completed %} (Completed) {% endif %}\n                <a href=\"{% url 'edit_task' task.id %}\">Edit</a>\n                <a href=\"{% url 'delete_task' task.id %}\">Delete</a>\n                {% if not task.completed %}\n                    <a href=\"{% url 'mark_task_completed' task.id %}\">Mark as Completed</a>\n                {% endif %}\n            </li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'create_task' todo_list.id %}\">Add New Task</a>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "create_todo_list.html", "path": "todoapp/templates/todoapp/create_todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Create Todo List</title>\n</head>\n<body>\n    <h1>Create New Todo List</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"name\">Name:</label><br>\n        <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n        <input type=\"submit\" value=\"Create\">\n    </form>\n    <a href=\"{% url 'home' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "create_task.html", "path": "todoapp/templates/todoapp/create_task.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Create Task</title>\n</head>\n<body>\n    <h1>Create New Task for {{ todo_list.name }}</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\"><br><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\"></textarea><br><br>\n        <label for=\"due_date\">Due Date:</label><br>\n        <input type=\"date\" id=\"due_date\" name=\"due_date\"><br><br>\n        <input type=\"submit\" value=\"Create\">\n    </form>\n    <a href=\"{% url 'todo_list_detail' todo_list.id %}\">Cancel</a>\n</body>\n</html>"}, {"file": "edit_task.html", "path": "todoapp/templates/todoapp/edit_task.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Task</title>\n</head>\n<body>\n    <h1>Edit Task</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ task.title }}\"><br><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\">{{ task.description }}</textarea><br><br>\n         <label for=\"due_date\">Due Date:</label><br>\n        <input type=\"date\" id=\"due_date\" name=\"due_date\" value=\"{{ task.due_date|date:'Y-m-d' }}\"><br><br>\n        <input type=\"submit\" value=\"Save\">\n    </form>\n    <a href=\"{% url 'todo_list_detail' task.todo_list.id %}\">Cancel</a>\n</body>\n</html>"}], "7": [{"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True)\n    description = models.CharField(max_length=200, blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.date} - {self.amount} - {self.category}'\n\nclass Category(models.Model):\n    name = models.CharField(max_length=50, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField('auth.User', on_delete=models.CASCADE)\n    # Add any additional user profile fields here\n\n    def __str__(self):\n        return self.user.username"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Transaction, Category\nfrom django.http import JsonResponse\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.forms import AuthenticationForm, UserCreationForm\nfrom django.shortcuts import render, redirect\nfrom django.contrib import messages\n\n\n# Home page views\ndef home(request):\n    if request.user.is_authenticated:\n        return redirect('dashboard')\n    else:\n        return render(request, 'home.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            messages.success(request, 'Account created successfully!')\n            return redirect('dashboard')  # Redirect to dashboard after signup\n        else:\n            messages.error(request, 'Signup failed. Please check the form.')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef user_login(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                messages.info(request, f\"You are now logged in as {username}.\")\n                return redirect('dashboard')\n            else:\n                messages.error(request, 'Invalid username or password.')\n        else:\n            messages.error(request, 'Invalid username or password.')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\ndef user_logout(request):\n    logout(request)\n    messages.info(request, \"You have successfully logged out.\")\n    return redirect('home')\n\n@login_required\ndef dashboard(request):\n    transactions = Transaction.objects.filter(category__name='Travel', amount__gt=100)\n    return render(request, 'dashboard.html', {'transactions': transactions})\n\n\n# Balance Tracker views\n@login_required\ndef balance_tracker(request):\n    transactions = Transaction.objects.all()\n    categories = Category.objects.all()\n\n    if request.method == 'POST':\n        date = request.POST.get('date')\n        amount = request.POST.get('amount')\n        category_id = request.POST.get('category')\n        description = request.POST.get('description')\n        transaction_id = request.POST.get('transaction_id')  # For editing\n\n        if transaction_id:\n            # Editing existing transaction\n            transaction = Transaction.objects.get(pk=transaction_id)\n            transaction.date = date\n            transaction.amount = amount\n            transaction.category_id = category_id\n            transaction.description = description\n            transaction.save()\n        else:\n            # Adding new transaction\n            transaction = Transaction(date=date, amount=amount, category_id=category_id, description=description)\n            transaction.save()\n\n        return redirect('balance_tracker')\n\n    return render(request, 'balance_tracker.html', {'transactions': transactions, 'categories': categories})\n\n@login_required\ndef delete_transaction(request, transaction_id):\n    transaction = Transaction.objects.get(pk=transaction_id)\n    transaction.delete()\n    return redirect('balance_tracker')\n\n\n# Category views\n@login_required\ndef category_list(request):\n    categories = Category.objects.all()\n    if request.method == 'POST':\n        name = request.POST.get('name')\n        category_id = request.POST.get('category_id')\n\n        if category_id:\n            # Editing existing category\n            category = Category.objects.get(pk=category_id)\n            category.name = name\n            category.save()\n        else:\n            # Adding new category\n            category = Category(name=name)\n            category.save()\n\n        return redirect('category_list')\n    return render(request, 'category_list.html', {'categories': categories})\n\n@login_required\ndef delete_category(request, category_id):\n    category = Category.objects.get(pk=category_id)\n    category.delete()\n    return redirect('category_list')\n\n\n# Reports views\n@login_required\ndef reports(request):\n    # Implement report generation logic here\n    return render(request, 'reports.html')\n\n\n# Settings views\n@login_required\ndef settings(request):\n    # Implement settings update logic here\n    return render(request, 'settings.html')\n\n\n# Help views\ndef help_view(request):\n    # Implement help / FAQ logic here\n    return render(request, 'help.html')"}, {"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.user_login, name='login'),\n    path('logout/', views.user_logout, name='logout'),\n\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('delete_transaction/<int:transaction_id>/', views.delete_transaction, name='delete_transaction'),\n    path('categories/', views.category_list, name='category_list'),\n    path('delete_category/<int:category_id>/', views.delete_category, name='delete_category'),\n    path('reports/', views.reports, name='reports'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help_view, name='help'),\n]"}, {"file": "templates/base.html", "path": "budget_control/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Budget Control</title>\n    <!-- Add your CSS and JavaScript links here -->\n</head>\n<body>\n    <nav>\n        <!-- Navigation bar content -->\n        <a href=\"{% url 'home' %}\">Home</a>\n        {% if user.is_authenticated %}\n            <a href=\"{% url 'dashboard' %}\">Dashboard</a>\n            <a href=\"{% url 'balance_tracker' %}\">Balance Tracker</a>\n            <a href=\"{% url 'categories' %}\">Categories</a>\n            <a href=\"{% url 'reports' %}\">Reports</a>\n            <a href=\"{% url 'settings' %}\">Settings</a>\n            <a href=\"{% url 'logout' %}\">Logout</a>\n\n        {% else %}\n            <a href=\"{% url 'login' %}\">Login</a>\n            <a href=\"{% url 'signup' %}\">Signup</a>\n        {% endif %}\n         <a href=\"{% url 'help' %}\">Help</a>\n    </nav>\n\n    <main>\n        {% block content %}\n        {% endblock %}\n    </main>\n\n    <footer>\n        <!-- Footer content -->\n    </footer>\n</body>\n</html>"}, {"file": "templates/home.html", "path": "budget_control/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome to Budget Control</h1>\n    <p>Manage your finances effectively.</p>\n    <p> <a href=\"{% url 'login' %}\">Login</a> or <a href=\"{% url 'signup' %}\">Sign Up</a>.</p>\n    <p>Need help? <a href=\"{% url 'help' %}\">Contact Support</a>.</p>\n{% endblock %}"}, {"file": "templates/dashboard.html", "path": "budget_control/templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Dashboard</h1>\n    <p>Welcome, {{ user.username }}!</p>\n\n\n    <h2>Recent Transactions (Example):</h2>\n    <ul>\n    {% for transaction in transactions %}\n        <li>{{ transaction.date }} - {{ transaction.amount }} - {{ transaction.category }} - {{ transaction.description }}</li>\n    {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "templates/balance_tracker.html", "path": "budget_control/templates/balance_tracker.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Balance Tracker</h1>\n\n    <h2>Add/Edit Transaction</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <input type=\"hidden\" name=\"transaction_id\" id=\"transaction_id\">\n\n        <label for=\"date\">Date:</label>\n        <input type=\"date\" name=\"date\" id=\"date\" required><br><br>\n\n        <label for=\"amount\">Amount:</label>\n        <input type=\"number\" name=\"amount\" id=\"amount\" step=\"0.01\" required><br><br>\n\n        <label for=\"category\">Category:</label>\n        <select name=\"category\" id=\"category\" required>\n            {% for category in categories %}\n                <option value=\"{{ category.id }}\">{{ category.name }}</option>\n            {% endfor %}\n        </select><br><br>\n\n        <label for=\"description\">Description:</label>\n        <input type=\"text\" name=\"description\" id=\"description\"><br><br>\n\n        <button type=\"submit\">Save Transaction</button>\n    </form>\n\n    <h2>Transactions</h2>\n    <table>\n        <thead>\n            <tr>\n                <th>Date</th>\n                <th>Amount</th>\n                <th>Category</th>\n                <th>Description</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for transaction in transactions %}\n                <tr>\n                    <td>{{ transaction.date }}</td>\n                    <td>{{ transaction.amount }}</td>\n                    <td>{{ transaction.category }}</td>\n                    <td>{{ transaction.description }}</td>\n                    <td>\n                        <button onclick=\"editTransaction('{{ transaction.id }}', '{{ transaction.date }}', '{{ transaction.amount }}', '{{ transaction.category.id }}', '{{ transaction.description }}')\">Edit</button>\n                        <a href=\"{% url 'delete_transaction' transaction.id %}\">Delete</a>\n                    </td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\n    <script>\n        function editTransaction(id, date, amount, category, description) {\n            document.getElementById('transaction_id').value = id;\n            document.getElementById('date').value = date;\n            document.getElementById('amount').value = amount;\n            document.getElementById('category').value = category;\n            document.getElementById('description').value = description;\n        }\n    </script>\n{% endblock %}"}, {"file": "templates/category_list.html", "path": "budget_control/templates/category_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Categories</h1>\n\n    <h2>Add/Edit Category</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        <input type=\"hidden\" name=\"category_id\" id=\"category_id\">\n\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" name=\"name\" id=\"name\" required><br><br>\n\n        <button type=\"submit\">Save Category</button>\n    </form>\n\n    <h2>Existing Categories</h2>\n    <table>\n        <thead>\n            <tr>\n                <th>Name</th>\n                <th>Actions</th>\n            </tr>\n        </thead>\n        <tbody>\n            {% for category in categories %}\n                <tr>\n                    <td>{{ category.name }}</td>\n                    <td>\n                        <button onclick=\"editCategory('{{ category.id }}', '{{ category.name }}')\">Edit</button>\n                        <a href=\"{% url 'delete_category' category.id %}\">Delete</a>\n                    </td>\n                </tr>\n            {% endfor %}\n        </tbody>\n    </table>\n\n    <script>\n        function editCategory(id, name) {\n            document.getElementById('category_id').value = id;\n            document.getElementById('name').value = name;\n        }\n    </script>\n{% endblock %}"}, {"file": "templates/reports.html", "path": "budget_control/templates/reports.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Reports</h1>\n    <p>Generate financial reports here.</p>\n    <!-- Implement report generation form/logic here -->\n{% endblock %}"}, {"file": "templates/settings.html", "path": "budget_control/templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Settings</h1>\n    <p>Update your profile and preferences here.</p>\n    <!-- Implement settings update form/logic here -->\n{% endblock %}"}, {"file": "templates/help.html", "path": "budget_control/templates/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Help</h1>\n    <p>Find FAQs and support information here.</p>\n    <!-- Display FAQs and contact support information here -->\n{% endblock %}"}, {"file": "templates/login.html", "path": "budget_control/templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Login</h2>\n\n{% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Login</button>\n</form>\n\n<p>Don't have an account? <a href=\"{% url 'signup' %}\">Sign up</a></p>\n{% endblock %}"}, {"file": "templates/signup.html", "path": "budget_control/templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n<h2>Sign Up</h2>\n\n{% if messages %}\n    <ul class=\"messages\">\n        {% for message in messages %}\n            <li{% if message.tags %} class=\"{{ message.tags }}\"{% endif %}>{{ message }}</li>\n        {% endfor %}\n    </ul>\n{% endif %}\n\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Sign Up</button>\n</form>\n\n<p>Already have an account? <a href=\"{% url 'login' %}\">Log in</a></p>\n{% endblock %}"}, {"file": "admin.py", "path": "budget_control/admin.py", "code": "from django.contrib import admin\nfrom .models import Transaction, Category, UserProfile\n\nadmin.site.register(Transaction)\nadmin.site.register(Category)\nadmin.site.register(UserProfile)"}, {"file": "serializers.py", "path": "budget_control/serializers.py", "code": "from rest_framework import serializers\nfrom .models import Transaction, Category\n\nclass CategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Category\n        fields = '__all__'\n\nclass TransactionSerializer(serializers.ModelSerializer):\n    category = CategorySerializer(read_only=True)\n    category_id = serializers.PrimaryKeyRelatedField(\n        queryset=Category.objects.all(), source='category', write_only=True, allow_null=True\n    )\n\n    class Meta:\n        model = Transaction\n        fields = '__all__' "}, {"file": "api_views.py", "path": "budget_control/api_views.py", "code": "from rest_framework import generics, permissions\nfrom .models import Transaction, Category\nfrom .serializers import TransactionSerializer, CategorySerializer\n\n\nclass TransactionListCreate(generics.ListCreateAPIView):\n    queryset = Transaction.objects.all()\n    serializer_class = TransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\n    def perform_create(self, serializer):\n        serializer.save()\n\nclass TransactionRetrieveUpdateDestroy(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Transaction.objects.all()\n    serializer_class = TransactionSerializer\n    permission_classes = [permissions.IsAuthenticated]\n\nclass CategoryListCreate(generics.ListCreateAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    permission_classes = [permissions.IsAuthenticated]\n\nclass CategoryRetrieveUpdateDestroy(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Category.objects.all()\n    serializer_class = CategorySerializer\n    permission_classes = [permissions.IsAuthenticated]"}, {"file": "api_urls.py", "path": "budget_control/api_urls.py", "code": "from django.urls import path\nfrom . import api_views\n\nurlpatterns = [\n    path('transactions/', api_views.TransactionListCreate.as_view(), name='transaction-list-create'),\n    path('transactions/<int:pk>/', api_views.TransactionRetrieveUpdateDestroy.as_view(), name='transaction-retrieve-update-destroy'),\n    path('categories/', api_views.CategoryListCreate.as_view(), name='category-list-create'),\n    path('categories/<int:pk>/', api_views.CategoryRetrieveUpdateDestroy.as_view(), name='category-retrieve-update-destroy'),\n]"}, {"file": "templates/base_api.html", "path": "budget_control/templates/base_api.html", "code": "<!-- templates/base_api.html -->\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Budget Control API</title>\n    <!-- Add Bootstrap CSS for basic styling -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n\n    <div class=\"container\">\n        <h1>Budget Control API</h1>\n        <p>Welcome to the API documentation for Budget Control.</p>\n        <hr>\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <!-- Add Bootstrap JS and jQuery if needed -->\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "settings.py", "path": "budget_control/settings.py", "code": "# Include REST framework in INSTALLED_APPS\nINSTALLED_APPS = [\n    ...\n    'rest_framework',\n    'budget_control',\n    ...\n]\n\nREST_FRAMEWORK = {\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n    'DEFAULT_AUTHENTICATION_CLASSES': [\n        'rest_framework.authentication.SessionAuthentication',\n        'rest_framework.authentication.BasicAuthentication'\n    ]\n}\n"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.urls import reverse\nfrom datetime import datetime\nfrom .models import Event\nfrom .forms import EventForm\n\ndef home(request):\n    today = datetime.now()\n    events = Event.objects.filter(start_time__year=today.year, start_time__month=today.month)\n    return render(request, 'calendar_app/home.html', {'today': today, 'events':events})\n\n\ndef calendar_view(request, year=None, month=None):\n    today = datetime.now()\n    if year is None or month is None:\n      year = today.year\n      month = today.month\n\n    try:\n        year = int(year)\n        month = int(month)\n    except ValueError:\n        year = today.year\n        month = today.month\n\n    events = Event.objects.filter(start_time__year=year, start_time__month=month)\n    return render(request, 'calendar_app/calendar.html', {'year': year, 'month': month, 'events':events})\n\n\ndef add_event(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/add_event.html', {'form': form})\n\n\ndef event_details(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendar_app/event_details.html', {'event': event})\n\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_details', event_id=event_id)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/edit_event.html', {'form': form, 'event': event})\n\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')\n    return render(request, 'calendar_app/delete_event.html', {'event': event})\n\n\ndef search_events(request):\n    query = request.GET.get('q')\n    events = Event.objects.filter(title__icontains=query)\n    return render(request, 'calendar_app/search_results.html', {'events': events, 'query': query})\n\n\ndef list_all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendar_app/list_all_events.html', {'events': events})"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'start_time', 'end_time']\n        widgets = {\n            'start_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n            'end_time': forms.DateTimeInput(attrs={'type': 'datetime-local'}),\n        }"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_month'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_details, name='event_details'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('events/all/', views.list_all_events, name='list_all_events'),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "# settings.py\n\nINSTALLED_APPS = [\n    # ... other apps\n    'calendar_app',\n]\n\nTEMPLATES = [\n    {\n        # ... other settings\n        'DIRS': [], # Add template directory if necessary, e.g., [BASE_DIR / 'templates']\n        # ... other settings\n    },\n]\n\nROOT_URLCONF = 'project.urls' # Make sure your project's urls.py is correctly referenced\n\n# Optionally, configure DATETIME_INPUT_FORMATS\nDATETIME_INPUT_FORMATS = [\n    '%Y-%m-%dT%H:%M:%S',  # '2006-10-25T14:30:59'\n    '%Y-%m-%dT%H:%M:%S.%f',  # '2006-10-25T14:30:59.000215'\n    '%Y-%m-%dT%H:%M',     # '2006-10-25T14:30'\n    '%Y-%m-%d %H:%M:%S',\n    '%Y-%m-%d %H:%M:%S.%f',\n    '%Y-%m-%d %H:%M',\n    '%Y-%m-%d',            # '2006-10-25'\n    '%m/%d/%Y %H:%M:%S',\n    '%m/%d/%Y %H:%M:%S.%f',\n    '%m/%d/%Y %H:%M',\n    '%m/%d/%Y',\n    '%m/%d/%y %H:%M:%S',\n    '%m/%d/%y %H:%M:%S.%f',\n    '%m/%d/%y %H:%M',\n    '%m/%d/%y',\n]\n\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "home.html", "path": "calendar_app/templates/calendar_app/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Calendar App</h1>\n    <p>Today is: {{ today }}</p>\n    <a href=\"{% url 'calendar' %}\">View Calendar</a> | <a href=\"{% url 'add_event' %}\">Add Event</a> | <a href=\"{% url 'list_all_events' %}\">All Events</a>\n\n    <h2>Upcoming Events</h2>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event_id=event.id %}\">{{ event.title }}</a> ({{ event.start_time }})</li>\n        {% empty %}\n            <li>No events scheduled for this month.</li>\n        {% endfor %}\n    </ul>\n</body>\n</html>"}, {"file": "calendar.html", "path": "calendar_app/templates/calendar_app/calendar.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar</title>\n</head>\n<body>\n    <h1>Calendar for {{ month }}/{{ year }}</h1>\n\n    <form method=\"get\" action=\"{% url 'calendar' %}\">\n        <label for=\"year\">Year:</label>\n        <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\">\n        <label for=\"month\">Month:</label>\n        <select id=\"month\" name=\"month\">\n            {% for i in '123456789abc'|make_list %}\n                {% with month_num=forloop.counter %}\n                  <option value=\"{{ month_num }}\" {% if month_num == month %}selected{% endif %}>{{ month_num }}</option>\n                {% endwith %}\n            {% endfor %}\n        </select>\n        <button type=\"submit\">Go</button>\n    </form>\n\n    <a href=\"{% url 'home' %}\">Back to Home</a> | <a href=\"{% url 'add_event' %}\">Add Event</a>\n\n    <h2>Events this Month</h2>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event_id=event.id %}\">{{ event.title }}</a> ({{ event.start_time }})</li>\n        {% empty %}\n            <li>No events scheduled for this month.</li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n"}, {"file": "add_event.html", "path": "calendar_app/templates/calendar_app/add_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Add Event</title>\n</head>\n<body>\n    <h1>Add a New Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Save Event</button>\n    </form>\n    <a href=\"{% url 'home' %}\">Cancel</a>\n</body>\n</html>"}, {"file": "event_details.html", "path": "calendar_app/templates/calendar_app/event_details.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Event Details</title>\n</head>\n<body>\n    <h1>{{ event.title }}</h1>\n    <p><strong>Description:</strong> {{ event.description }}</p>\n    <p><strong>Start Time:</strong> {{ event.start_time }}</p>\n    <p><strong>End Time:</strong> {{ event.end_time }}</p>\n\n    <a href=\"{% url 'edit_event' event_id=event.id %}\">Edit Event</a> | <a href=\"{% url 'delete_event' event_id=event.id %}\">Delete Event</a> | <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "calendar_app/templates/calendar_app/edit_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Event</title>\n</head>\n<body>\n    <h1>Edit Event: {{ event.title }}</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Update Event</button>\n    </form>\n    <a href=\"{% url 'event_details' event_id=event.id %}\">Cancel</a>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "calendar_app/templates/calendar_app/delete_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Delete Event</title>\n</head>\n<body>\n    <h1>Delete Event: {{ event.title }}</h1>\n    <p>Are you sure you want to delete this event?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Delete</button>\n    </form>\n    <a href=\"{% url 'event_details' event_id=event.id %}\">Cancel</a>\n</body>\n</html>"}, {"file": "search_results.html", "path": "calendar_app/templates/calendar_app/search_results.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Search Results</title>\n</head>\n<body>\n    <h1>Search Results for \"{{ query }}\"</h1>\n\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event_id=event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events found matching your search.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "list_all_events.html", "path": "calendar_app/templates/calendar_app/list_all_events.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>All Events</title>\n</head>\n<body>\n    <h1>All Events</h1>\n\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_details' event_id=event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events found.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}], "9": [{"file": "urls.py", "path": "chatbot_project/chatbot_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('support/', views.support, name='support'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "chatbot_project/chatbot_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    context = {}\n    return render(request, 'home.html', context)\n\n\ndef features(request):\n    context = {}\n    return render(request, 'features.html', context)\n\n\ndef pricing(request):\n    context = {}\n    return render(request, 'pricing.html', context)\n\n\ndef support(request):\n    context = {}\n    return render(request, 'support.html', context)\n\n\ndef about(request):\n    context = {}\n    return render(request, 'about.html', context)"}, {"file": "home.html", "path": "chatbot_project/chatbot_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Home</h1>\n    <p>AI Chatbot Product Overview</p>\n{% endblock %}"}, {"file": "features.html", "path": "chatbot_project/chatbot_app/templates/features.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Features</h1>\n    <p>Key Features</p>\n{% endblock %}"}, {"file": "pricing.html", "path": "chatbot_project/chatbot_app/templates/pricing.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Pricing</h1>\n    <p>Pricing Plans</p>\n    <p>Contact Sales Form (Optional)</p>\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_project/chatbot_app/templates/support.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Support</h1>\n    <p>FAQ</p>\n    <p>Support Message Form (Optional)</p>\n{% endblock %}"}, {"file": "about.html", "path": "chatbot_project/chatbot_app/templates/about.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>About Us</h1>\n    <p>Company Background</p>\n{% endblock %}"}, {"file": "base.html", "path": "chatbot_project/chatbot_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'features' %}\">Features</a> |\n        <a href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a href=\"{% url 'support' %}\">Support</a> |\n        <a href=\"{% url 'about' %}\">About Us</a>\n    </nav>\n    <hr>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}, {"file": "forms.py", "path": "chatbot_project/chatbot_app/forms.py", "code": "from django import forms\n\nclass ContactSalesForm(forms.Form):\n    name = forms.CharField(label='Your Name', max_length=100)\n    email = forms.EmailField(label='Your Email')\n    message = forms.CharField(label='Message', widget=forms.Textarea)\n\nclass SupportMessageForm(forms.Form):\n    name = forms.CharField(label='Your Name', max_length=100)\n    email = forms.EmailField(label='Your Email')\n    message = forms.CharField(label='Message', widget=forms.Textarea)"}, {"file": "views.py", "path": "chatbot_project/chatbot_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import ContactSalesForm, SupportMessageForm\n\ndef home(request):\n    context = {}\n    return render(request, 'home.html', context)\n\n\ndef features(request):\n    context = {}\n    return render(request, 'features.html', context)\n\n\ndef pricing(request):\n    if request.method == 'POST':\n        form = ContactSalesForm(request.POST)\n        if form.is_valid():\n            # Process the form data (e.g., send an email)\n            pass\n    else:\n        form = ContactSalesForm()\n    context = {'form': form}\n    return render(request, 'pricing.html', context)\n\n\ndef support(request):\n    if request.method == 'POST':\n        form = SupportMessageForm(request.POST)\n        if form.is_valid():\n            # Process the form data (e.g., send an email)\n            pass\n    else:\n        form = SupportMessageForm()\n    context = {'form': form}\n    return render(request, 'support.html', context)\n\n\ndef about(request):\n    context = {}\n    return render(request, 'about.html', context)"}, {"file": "pricing.html", "path": "chatbot_project/chatbot_app/templates/pricing.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Pricing</h1>\n    <p>Pricing Plans</p>\n\n    <h2>Contact Sales</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Submit</button>\n    </form>\n{% endblock %}"}, {"file": "support.html", "path": "chatbot_project/chatbot_app/templates/support.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Support</h1>\n    <p>FAQ</p>\n\n    <h2>Need Further Assistance?</h2>\n    <form method=\"post\">\n        {% csrf_token %}\n        {{ form.as_p }}\n        <button type=\"submit\">Submit</button>\n    </form>\n{% endblock %}"}], "10": [{"file": "models.py", "path": "calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    calories = models.IntegerField()\n    date = models.DateField(auto_now_add=True)\n    time = models.TimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    calories_burned = models.IntegerField()\n    date = models.DateField(auto_now_add=True)\n    time = models.TimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "calorie_tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Meal, Activity\nfrom django.http import JsonResponse\nfrom django.db.models import Sum\nimport json\n\ndef home(request):\n    if request.user.is_authenticated:\n        return redirect('dashboard')\n    return render(request, 'home.html')\n\ndef signup_view(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\n@login_required\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n\n@login_required\ndef dashboard(request):\n    today = timezone.now().date()\n    meals = Meal.objects.filter(user=request.user, date=today).order_by('-time')\n    activities = Activity.objects.filter(user=request.user, date=today).order_by('-time')\n    total_calories = Meal.objects.filter(user=request.user, date=today).aggregate(Sum('calories'))['calories__sum'] or 0\n    total_calories_burned = Activity.objects.filter(user=request.user, date=today).aggregate(Sum('calories_burned'))['calories_burned__sum'] or 0\n    context = {\n        'meals': meals,\n        'activities': activities,\n        'total_calories': total_calories,\n        'total_calories_burned': total_calories_burned\n    }\n    return render(request, 'dashboard.html', context)\n\n@login_required\ndef add_meal(request):\n    if request.method == 'POST':\n        name = request.POST['name']\n        calories = int(request.POST['calories'])\n        Meal.objects.create(user=request.user, name=name, calories=calories)\n        return redirect('dashboard')\n    return render(request, 'add_meal.html')\n\n\n@login_required\ndef add_activity(request):\n    if request.method == 'POST':\n        name = request.POST['name']\n        calories_burned = int(request.POST['calories_burned'])\n        Activity.objects.create(user=request.user, name=name, calories_burned=calories_burned)\n        return redirect('dashboard')\n    return render(request, 'add_activity.html')\n\n@login_required\ndef meal_log(request):\n    meals = Meal.objects.filter(user=request.user).order_by('-date', '-time')\n    return render(request, 'meal_log.html', {'meals': meals})\n\n\n@login_required\ndef activity_log(request):\n    activities = Activity.objects.filter(user=request.user).order_by('-date', '-time')\n    return render(request, 'activity_log.html', {'activities': activities})\n\n@login_required\ndef edit_meal(request, meal_id):\n    meal = Meal.objects.get(pk=meal_id, user=request.user)\n    if request.method == 'POST':\n        meal.name = request.POST['name']\n        meal.calories = int(request.POST['calories'])\n        meal.save()\n        return redirect('meal_log')\n    return render(request, 'edit_meal.html', {'meal': meal})\n\n@login_required\ndef delete_meal(request, meal_id):\n    meal = Meal.objects.get(pk=meal_id, user=request.user)\n    meal.delete()\n    return redirect('meal_log')\n\n@login_required\ndef edit_activity(request, activity_id):\n    activity = Activity.objects.get(pk=activity_id, user=request.user)\n    if request.method == 'POST':\n        activity.name = request.POST['name']\n        activity.calories_burned = int(request.POST['calories_burned'])\n        activity.save()\n        return redirect('activity_log')\n    return render(request, 'edit_activity.html', {'activity': activity})\n\n@login_required\ndef delete_activity(request, activity_id):\n    activity = Activity.objects.get(pk=activity_id, user=request.user)\n    activity.delete()\n    return redirect('activity_log')\n\n@login_required\ndef analysis(request):\n  return render(request, 'analysis.html')\n\n@login_required\ndef get_weekly_calorie_data(request):\n    # Calculate start and end of the week (Monday to Sunday)\n    today = timezone.now().date()\n    start_of_week = today - timedelta(days=today.weekday())\n    end_of_week = start_of_week + timedelta(days=6)\n\n    # Fetch meal and activity data for the week\n    meals = Meal.objects.filter(user=request.user, date__range=[start_of_week, end_of_week])\n    activities = Activity.objects.filter(user=request.user, date__range=[start_of_week, end_of_week])\n\n    # Aggregate calories consumed and burned per day\n    daily_calories_in = {}\n    daily_calories_out = {}\n\n    for meal in meals:\n        date_str = meal.date.strftime('%Y-%m-%d')\n        if date_str not in daily_calories_in:\n            daily_calories_in[date_str] = 0\n        daily_calories_in[date_str] += meal.calories\n\n    for activity in activities:\n        date_str = activity.date.strftime('%Y-%m-%d')\n        if date_str not in daily_calories_out:\n            daily_calories_out[date_str] = 0\n        daily_calories_out[date_str] += activity.calories_burned\n\n    # Prepare data for chart\n    labels = [(start_of_week + timedelta(days=i)).strftime('%Y-%m-%d') for i in range(7)]\n    calorie_in_data = [daily_calories_in.get(date, 0) for date in labels]\n    calorie_out_data = [daily_calories_out.get(date, 0) for date in labels]\n\n    data = {\n        'labels': labels,\n        'calorie_in_data': calorie_in_data,\n        'calorie_out_data': calorie_out_data,\n    }\n\n    return JsonResponse(data)\n\n@login_required\ndef settings(request):\n  return render(request, 'settings.html')\n\n@login_required\ndef profile(request):\n    return render(request, 'profile.html')\n\n@login_required\ndef preferences(request):\n    return render(request, 'preferences.html')\n\n@login_required\ndef notifications(request):\n  return render(request, 'notifications.html')\n\n@login_required\ndef privacy(request):\n    return render(request, 'privacy.html')\n\n\ndef help_page(request):\n    return render(request, 'help.html')\n\n@login_required\ndef faq(request):\n    return render(request, 'faq.html')\n\n@login_required\ndef contact(request):\n  return render(request, 'contact.html')\n\n@login_required\ndef tutorials(request):\n    return render(request, 'tutorials.html'\n\nfrom django.utils import timezone\nfrom datetime import timedelta"}, {"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup_view, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('add_meal/', views.add_meal, name='add_meal'),\n    path('add_activity/', views.add_activity, name='add_activity'),\n    path('meal_log/', views.meal_log, name='meal_log'),\n    path('activity_log/', views.activity_log, name='activity_log'),\n    path('edit_meal/<int:meal_id>/', views.edit_meal, name='edit_meal'),\n    path('delete_meal/<int:meal_id>/', views.delete_meal, name='delete_meal'),\n    path('edit_activity/<int:activity_id>/', views.edit_activity, name='edit_activity'),\n    path('delete_activity/<int:activity_id>/', views.delete_activity, name='delete_activity'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('api/weekly_calorie_data/', views.get_weekly_calorie_data, name='weekly_calorie_data'),\n    path('settings/', views.settings, name='settings'),\n    path('profile/', views.profile, name='profile'),\n    path('preferences/', views.preferences, name='preferences'),\n    path('notifications/', views.notifications, name='notifications'),\n    path('privacy/', views.privacy, name='privacy'),\n    path('help/', views.help_page, name='help'),\n    path('faq/', views.faq, name='faq'),\n    path('contact/', views.contact, name='contact'),\n    path('tutorials/', views.tutorials, name='tutorials'),\n]"}, {"file": "settings.py", "path": "calorie_tracker_project/settings.py", "code": "# Django settings for calorie_tracker_project project.\n\nimport os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calorie_tracker',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calorie_tracker_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calorie_tracker_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n\nLOGIN_REDIRECT_URL = 'dashboard'\nLOGOUT_REDIRECT_URL = 'home'"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Welcome to Calorie Tracker</h1>\n  <p>Track your calorie intake and expenditure to achieve your fitness goals!</p>\n\n  {% if user.is_authenticated %}\n    <p>You are logged in as {{ user.username }}.</p>\n    <a href=\"{% url 'dashboard' %}\">Go to Dashboard</a>\n  {% else %}\n    <a href=\"{% url 'signup' %}\">Sign Up</a>\n    <a href=\"{% url 'login' %}\">Log In</a>\n  {% endif %}\n{% endblock %}"}, {"file": "signup.html", "path": "templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Sign Up</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Sign Up</button>\n  </form>\n{% endblock %}"}, {"file": "login.html", "path": "templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Log In</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Log In</button>\n  </form>\n{% endblock %}"}, {"file": "dashboard.html", "path": "templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Dashboard</h2>\n  <p>Welcome, {{ user.username }}!</p>\n  <a href=\"{% url 'logout' %}\">Logout</a>\n\n  <h3>Daily Calorie Intake: {{ total_calories }}</h3>\n  <h3>Total Calories Burned: {{ total_calories_burned }}</h3>\n\n  <h3>Recent Meals</h3>\n  <ul>\n    {% for meal in meals %}\n      <li>{{ meal.name }} - {{ meal.calories }} calories - {{ meal.time }}<a href=\"{% url 'edit_meal' meal.id %}\">Edit</a> | <a href=\"{% url 'delete_meal' meal.id %}\">Delete</a></li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'add_meal' %}\">Add Meal</a> | <a href=\"{% url 'meal_log' %}\">View All Meals</a>\n\n  <h3>Recent Activities</h3>\n  <ul>\n    {% for activity in activities %}\n      <li>{{ activity.name }} - {{ activity.calories_burned }} calories burned - {{ activity.time }} <a href=\"{% url 'edit_activity' activity.id %}\">Edit</a> | <a href=\"{% url 'delete_activity' activity.id %}\">Delete</a></li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'add_activity' %}\">Add Activity</a> | <a href=\"{% url 'activity_log' %}\">View All Activities</a>\n{% endblock %}"}, {"file": "add_meal.html", "path": "templates/add_meal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Add Meal</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"name\">Meal Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <label for=\"calories\">Calories:</label><br>\n    <input type=\"number\" id=\"calories\" name=\"calories\"><br><br>\n    <button type=\"submit\">Add Meal</button>\n  </form>\n{% endblock %}"}, {"file": "add_activity.html", "path": "templates/add_activity.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Add Activity</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"name\">Activity Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\"><br><br>\n    <label for=\"calories_burned\">Calories Burned:</label><br>\n    <input type=\"number\" id=\"calories_burned\" name=\"calories_burned\"><br><br>\n    <button type=\"submit\">Add Activity</button>\n  </form>\n{% endblock %}"}, {"file": "meal_log.html", "path": "templates/meal_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Meal Log</h2>\n  <ul>\n    {% for meal in meals %}\n      <li>{{ meal.name }} - {{ meal.calories }} calories - {{ meal.date }} {{ meal.time }} <a href=\"{% url 'edit_meal' meal.id %}\">Edit</a> | <a href=\"{% url 'delete_meal' meal.id %}\">Delete</a></li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'add_meal' %}\">Add Meal</a> | <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n{% endblock %}"}, {"file": "activity_log.html", "path": "templates/activity_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Activity Log</h2>\n  <ul>\n    {% for activity in activities %}\n      <li>{{ activity.name }} - {{ activity.calories_burned }} calories burned - {{ activity.date }} {{ activity.time }} <a href=\"{% url 'edit_activity' activity.id %}\">Edit</a> | <a href=\"{% url 'delete_activity' activity.id %}\">Delete</a></li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'add_activity' %}\">Add Activity</a> | <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n{% endblock %}"}, {"file": "edit_meal.html", "path": "templates/edit_meal.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Edit Meal</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"name\">Meal Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\" value=\"{{ meal.name }}\"><br><br>\n    <label for=\"calories\">Calories:</label><br>\n    <input type=\"number\" id=\"calories\" name=\"calories\" value=\"{{ meal.calories }}\"><br><br>\n    <button type=\"submit\">Save Changes</button>\n  </form>\n  <a href=\"{% url 'meal_log' %}\">Cancel</a>\n{% endblock %}"}, {"file": "edit_activity.html", "path": "templates/edit_activity.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Edit Activity</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    <label for=\"name\">Activity Name:</label><br>\n    <input type=\"text\" id=\"name\" name=\"name\" value=\"{{ activity.name }}\"><br><br>\n    <label for=\"calories_burned\">Calories Burned:</label><br>\n    <input type=\"number\" id=\"calories_burned\" name=\"calories_burned\" value=\"{{ activity.calories_burned }}\"><br><br>\n    <button type=\"submit\">Save Changes</button>\n  </form>\n  <a href=\"{% url 'activity_log' %}\">Cancel</a>\n{% endblock %}"}, {"file": "analysis.html", "path": "templates/analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Analysis</h2>\n  <canvas id=\"calorieChart\" width=\"400\" height=\"200\"></canvas>\n\n  <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n  <script>\n    fetch('/api/weekly_calorie_data/')\n      .then(response => response.json())\n      .then(data => {\n        const ctx = document.getElementById('calorieChart').getContext('2d');\n        const myChart = new Chart(ctx, {\n          type: 'bar',\n          data: {\n            labels: data.labels,\n            datasets: [{\n              label: 'Calories In',\n              data: data.calorie_in_data,\n              backgroundColor: 'rgba(75, 192, 192, 0.2)',\n              borderColor: 'rgba(75, 192, 192, 1)',\n              borderWidth: 1\n            }, {\n              label: 'Calories Out',\n              data: data.calorie_out_data,\n              backgroundColor: 'rgba(255, 99, 132, 0.2)',\n              borderColor: 'rgba(255, 99, 132, 1)',\n              borderWidth: 1\n            }]\n          },\n          options: {\n            scales: {\n              y: {\n                beginAtZero: true\n              }\n            }\n          }\n        });\n      });\n  </script>\n{% endblock %}"}, {"file": "settings.html", "path": "templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Settings</h2>\n    <a href=\"{% url 'profile' %}\">Profile</a><br>\n    <a href=\"{% url 'preferences' %}\">Preferences</a><br>\n    <a href=\"{% url 'notifications' %}\">Notifications</a><br>\n    <a href=\"{% url 'privacy' %}\">Privacy Settings</a>\n{% endblock %}"}, {"file": "profile.html", "path": "templates/profile.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Profile</h2>\n  <p>Update your user profile information here.</p>\n{% endblock %}"}, {"file": "preferences.html", "path": "templates/preferences.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Preferences</h2>\n  <p>Set your dietary preferences and fitness goals.</p>\n{% endblock %}"}, {"file": "notifications.html", "path": "templates/notifications.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Notifications</h2>\n  <p>Manage notification settings for reminders and updates.</p>\n{% endblock %}"}, {"file": "privacy.html", "path": "templates/privacy.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Privacy Settings</h2>\n  <p>Adjust privacy settings for data sharing and visibility.</p>\n{% endblock %}"}, {"file": "help.html", "path": "templates/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Help</h2>\n    <a href=\"{% url 'faq' %}\">FAQ</a><br>\n    <a href=\"{% url 'contact' %}\">Contact Support</a><br>\n    <a href=\"{% url 'tutorials' %}\">Tutorials</a>\n{% endblock %}"}, {"file": "faq.html", "path": "templates/faq.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>FAQ</h2>\n  <p>Frequently asked questions and answers.</p>\n{% endblock %}"}, {"file": "contact.html", "path": "templates/contact.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Contact Support</h2>\n  <p>Contact information for technical support.</p>\n{% endblock %}"}, {"file": "tutorials.html", "path": "templates/tutorials.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Tutorials</h2>\n  <p>Tutorials to help users understand the app's features.</p>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calorie Tracker</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a>\n        {% if user.is_authenticated %}\n            <a href=\"{% url 'dashboard' %}\">Dashboard</a>\n            <a href=\"{% url 'meal_log' %}\">Meal Log</a>\n            <a href=\"{% url 'activity_log' %}\">Activity Log</a>\n            <a href=\"{% url 'analysis' %}\">Analysis</a>\n            <a href=\"{% url 'settings' %}\">Settings</a>\n            <a href=\"{% url 'help' %}\">Help</a>\n        {% endif %}\n    </nav>\n    <hr>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "11": [{"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport json\n\ndef home(request):\n    if request.method == 'POST':\n        # Handle form submission (status selection, notes, file import)\n        selected_status = request.POST.get('status')\n        review_notes = request.POST.get('notes')\n        imported_file = request.FILES.get('json_file')\n\n        if imported_file:\n            try:\n                data = json.load(imported_file)\n                # Process the imported JSON data\n                # ...\n                context = {\n                    'welcome_message': 'Welcome to the Reviewer',\n                    'json_data': data\n                }\n            except json.JSONDecodeError:\n                context = {\n                    'welcome_message': 'Welcome to the Reviewer',\n                    'error_message': 'Invalid JSON file.'\n                }\n\n\n        else:\n            context = {\n                'welcome_message': 'Welcome to the Reviewer',\n                'selected_status': selected_status,\n                'review_notes': review_notes\n\n            }\n\n\n\n        return render(request, 'home.html', context)\n\n\n    else:\n        # Initial page load\n        context = {\n            'welcome_message': 'Welcome to the Reviewer'\n        }\n        return render(request, 'home.html', context)\n\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "home.html", "path": "myproject/myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>{{ welcome_message }}</h1>\n\n    {% if error_message %}\n        <p style=\"color: red;\">{{ error_message }}</p>\n    {% endif %}\n\n    <form method=\"post\" enctype=\"multipart/form-data\">\n        {% csrf_token %}\n\n        <label for=\"status\">Status:</label>\n        <select id=\"status\" name=\"status\">\n            <option value=\"Select\">Select</option>\n            <option value=\"Pass\">Pass</option>\n            <option value=\"Fail\">Fail</option>\n        </select><br><br>\n\n        <label for=\"notes\">Review Notes:</label><br>\n        <textarea id=\"notes\" name=\"notes\" rows=\"4\" cols=\"50\"></textarea><br><br>\n\n        <label for=\"json_file\">Import JSON File:</label>\n        <input type=\"file\" id=\"json_file\" name=\"json_file\"><br><br>\n\n        <button type=\"submit\">Submit</button>\n    </form>\n\n    {% if json_data %}\n      <h2>Imported JSON Data:</h2>\n      <pre>{{ json_data|safe }}</pre>\n    {% endif %}\n\n</body>\n</html>\n"}, {"file": "about.html", "path": "myproject/myapp/templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Website</h1>\n    <p>This website is designed for reviewing test code.</p>\n    <p>It allows users to import JSON files containing test code snippets, select a status (Pass/Fail), and add review notes.</p>\n</body>\n</html>\n"}], "12": [{"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('home.urls')),  # Home page URLs\n    path('employee/', include('employee.urls')),  # Employee portal URLs\n    path('admin/', include('admin_portal.urls')),  # Admin portal URLs\n    path('budget/', include('budget_control.urls')), # Budget control URLs\n]"}, {"file": "settings.py", "path": "expense_tracker/settings.py", "code": "# settings.py\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'home',\n    'employee',\n    'admin_portal',\n    'budget_control',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'expense_tracker.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': 'db.sqlite3',\n    }\n}\n\nSTATIC_URL = 'static/'\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "models.py", "path": "home/models.py", "code": "# home/models.py\nfrom django.db import models\n\n# You might not need a specific model for the home page\n# as it's primarily static content or uses Django's User model.\n"}, {"file": "views.py", "path": "home/views.py", "code": "# home/views.py\nfrom django.shortcuts import render\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\nfrom django.shortcuts import redirect\n\ndef home_view(request):\n    return render(request, 'home/home.html')\n\ndef signup_view(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('employee_portal')  # Redirect to employee portal\n    else:\n        form = UserCreationForm()\n    return render(request, 'home/signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('employee_portal')  # Redirect to employee portal\n    else:\n        form = AuthenticationForm()\n    return render(request, 'home/login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n"}, {"file": "urls.py", "path": "home/urls.py", "code": "# home/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home_view, name='home'),\n    path('signup/', views.signup_view, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]"}, {"file": "models.py", "path": "employee/models.py", "code": "# employee/models.py\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    CLAIM_TYPES = [\n        ('Travel', 'Travel'),\n        ('Labor', 'Labor'),\n        ('Management', 'Management'),\n        ('Equipment', 'Equipment'),\n    ]\n    STATUS_CHOICES = [\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected'),\n    ]\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=50, choices=CLAIM_TYPES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    submission_date = models.DateField(auto_now_add=True)\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')\n    rejection_reason = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'Claim by {self.employee.username} - {self.claim_type} - {self.status}'\n"}, {"file": "views.py", "path": "employee/views.py", "code": "# employee/views.py\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required\nfrom .models import Claim\nfrom .forms import ClaimForm\n\n@login_required\ndef employee_portal(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'employee/employee_portal.html', {'claims': claims})\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            return redirect('employee_portal')\n    else:\n        form = ClaimForm()\n    return render(request, 'employee/submit_claim.html', {'form': form})\n\n@login_required\ndef view_claim_status(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n    return render(request, 'employee/view_claim_status.html', {'claim': claim})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n    if claim.status == 'Pending': # Only allow editing if claim is pending\n        if request.method == 'POST':\n            form = ClaimForm(request.POST, instance=claim)\n            if form.is_valid():\n                form.save()\n                return redirect('employee_portal')\n        else:\n            form = ClaimForm(instance=claim)\n        return render(request, 'employee/edit_claim.html', {'form': form, 'claim':claim})\n    else:\n        return render(request, 'employee/claim_not_editable.html', {'claim': claim})\n"}, {"file": "urls.py", "path": "employee/urls.py", "code": "# employee/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.employee_portal, name='employee_portal'),\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('claim/<int:claim_id>/', views.view_claim_status, name='view_claim_status'),\n    path('claim/<int:claim_id>/edit/', views.edit_claim, name='edit_claim'),\n]"}, {"file": "forms.py", "path": "employee/forms.py", "code": "# employee/forms.py\nfrom django import forms\nfrom .models import Claim\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['claim_type', 'amount', 'description']\n"}, {"file": "models.py", "path": "admin_portal/models.py", "code": "# admin_portal/models.py\nfrom django.db import models\n# No specific models needed here, as it operates on the Claim model\n# in the employee app.\n"}, {"file": "views.py", "path": "admin_portal/views.py", "code": "# admin_portal/views.py\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import user_passes_test\nfrom employee.models import Claim\nfrom django.db.models import Q\n\ndef is_accounting_admin(user):\n    return user.is_staff  # Example: Assuming staff status implies admin\n\n@user_passes_test(is_accounting_admin)\ndef admin_portal(request):\n    claims = Claim.objects.all()\n    return render(request, 'admin_portal/admin_portal.html', {'claims': claims})\n\n@user_passes_test(is_accounting_admin)\ndef approve_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('admin_portal')\n\n@user_passes_test(is_accounting_admin)\ndef reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    if request.method == 'POST':\n        rejection_reason = request.POST.get('rejection_reason')\n        claim.status = 'Rejected'\n        claim.rejection_reason = rejection_reason\n        claim.save()\n        return redirect('admin_portal')\n    return render(request, 'admin_portal/reject_claim.html', {'claim': claim})\n\n@user_passes_test(is_accounting_admin)\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    return render(request, 'admin_portal/view_claim_details.html', {'claim': claim})\n\n@user_passes_test(is_accounting_admin)\ndef search_claims(request):\n    query = request.GET.get('q')\n    status = request.GET.get('status')\n\n    claims = Claim.objects.all()\n    if query:\n        claims = claims.filter(\n            Q(employee__username__icontains=query) |\n            Q(description__icontains=query) |\n            Q(claim_type__icontains=query)\n        )\n    if status:\n        claims = claims.filter(status=status)\n    \n    return render(request, 'admin_portal/admin_portal.html', {'claims': claims})\n"}, {"file": "urls.py", "path": "admin_portal/urls.py", "code": "# admin_portal/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.admin_portal, name='admin_portal'),\n    path('claim/<int:claim_id>/approve/', views.approve_claim, name='approve_claim'),\n    path('claim/<int:claim_id>/reject/', views.reject_claim, name='reject_claim'),\n    path('claim/<int:claim_id>/details/', views.view_claim_details, name='view_claim_details'),\n    path('search/', views.search_claims, name='search_claims'),\n]"}, {"file": "models.py", "path": "budget_control/models.py", "code": "# budget_control/models.py\nfrom django.db import models\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=100, unique=True)\n    limit = models.DecimalField(max_digits=12, decimal_places=2)\n    \n    def __str__(self):\n        return self.category\n"}, {"file": "views.py", "path": "budget_control/views.py", "code": "# budget_control/views.py\nfrom django.shortcuts import render, redirect\nfrom django.contrib.auth.decorators import user_passes_test\nfrom employee.models import Claim\nfrom .models import Budget\nfrom django.db.models import Sum\nfrom django.contrib import messages\n\ndef is_accounting_admin(user):\n    return user.is_staff # Example: Assuming staff status implies admin\n\n@user_passes_test(is_accounting_admin)\ndef budget_control(request):\n    budgets = Budget.objects.all()\n    expenses = {}\n    for budget in budgets:\n        total_expenses = Claim.objects.filter(claim_type=budget.category, status='Approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        expenses[budget.category] = total_expenses\n    return render(request, 'budget_control/budget_control.html', {'budgets': budgets, 'expenses': expenses})\n\n@user_passes_test(is_accounting_admin)\ndef generate_reports(request):\n    claims = Claim.objects.filter(status='Approved')\n    total_expenses = claims.aggregate(Sum('amount'))['amount__sum'] or 0\n    \n    # Group expenses by category\n    expenses_by_category = claims.values('claim_type').annotate(total=Sum('amount'))\n    \n    return render(request, 'budget_control/generate_reports.html', {'total_expenses': total_expenses, 'expenses_by_category':expenses_by_category})\n\n@user_passes_test(is_accounting_admin)\ndef set_budget_limits(request):\n    if request.method == 'POST':\n        category = request.POST['category']\n        limit = request.POST['limit']\n        \n        try:\n            budget = Budget.objects.get(category=category)\n            budget.limit = limit\n            budget.save()\n        except Budget.DoesNotExist:\n            Budget.objects.create(category=category, limit=limit)\n        messages.success(request, f'Budget limit for {category} updated successfully.')\n        return redirect('budget_control')\n\n    return redirect('budget_control')\n\n@user_passes_test(is_accounting_admin)\ndef send_budget_alerts(request):\n   # Dummy function. Alerts should ideally be implemented with Celery or similar.\n    return render(request, 'budget_control/budget_control.html') # Placeholder\n"}, {"file": "urls.py", "path": "budget_control/urls.py", "code": "# budget_control/urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.budget_control, name='budget_control'),\n    path('reports/', views.generate_reports, name='generate_reports'),\n    path('set_limits/', views.set_budget_limits, name='set_budget_limits'),\n    path('alerts/', views.send_budget_alerts, name='send_budget_alerts'),\n]"}], "13": [{"file": "models.py", "path": "myapp/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255, null=True, blank=True)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name} - {self.datetime}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer.name} - {self.product.name}'"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\n# Customer Management Views\n\ndef add_customer(request):\n    return HttpResponse('Add Customer - Implement Form and Logic')\n\ndef edit_customer(request, customer_id):\n    return HttpResponse('Edit Customer - Implement Form and Logic')\n\ndef delete_customer(request, customer_id):\n    return HttpResponse('Delete Customer - Implement Logic')\n\ndef view_customer(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    return render(request, 'view_customer.html', {'customer': customer})\n\n# Product Management Views\n\ndef add_product(request):\n    return HttpResponse('Add Product - Implement Form and Logic')\n\ndef edit_product(request, product_id):\n    return HttpResponse('Edit Product - Implement Form and Logic')\n\ndef delete_product(request, product_id):\n    return HttpResponse('Delete Product - Implement Logic')\n\ndef view_product(request, product_id):\n    product = get_object_or_404(Product, pk=product_id)\n    return render(request, 'view_product.html', {'product': product})\n\n# Purchase Record Views\n\ndef add_purchase_record(request):\n    return HttpResponse('Add Purchase Record - Implement Form and Logic')\n\ndef edit_purchase_record(request, record_id):\n    return HttpResponse('Edit Purchase Record - Implement Form and Logic')\n\ndef delete_purchase_record(request, record_id):\n    return HttpResponse('Delete Purchase Record - Implement Logic')\n\ndef view_purchase_record(request, record_id):\n    record = get_object_or_404(PurchaseRecord, pk=record_id)\n    return render(request, 'view_purchase_record.html', {'record': record})\n\n\n# Preferred Products Management Views\n\ndef add_preferred_product(request):\n    return HttpResponse('Add Preferred Product - Implement Form and Logic')\n\ndef edit_preferred_product(request, customer_id, product_id):\n    return HttpResponse('Edit Preferred Product - Implement Form and Logic')\n\ndef delete_preferred_product(request, customer_id, product_id):\n    return HttpResponse('Delete Preferred Product - Implement Logic')\n\ndef view_preferred_products(request, customer_id):\n    customer = get_object_or_404(Customer, pk=customer_id)\n    preferred_products = PreferredProduct.objects.filter(customer=customer)\n    return render(request, 'view_preferred_products.html', {'customer': customer, 'preferred_products': preferred_products})\n\n\n# Sales Analysis Views\n\ndef generate_sales_report(request):\n    return HttpResponse('Generate Sales Report - Implement Logic')\n\ndef analyze_sales_trends(request):\n    return HttpResponse('Analyze Sales Trends - Implement Logic')\n\ndef product_performance_analysis(request):\n    return HttpResponse('Product Performance Analysis - Implement Logic')"}, {"file": "urls.py", "path": "myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n\n    path('customer/add/', views.add_customer, name='add_customer'),\n    path('customer/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customer/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customer/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n\n    path('product/add/', views.add_product, name='add_product'),\n    path('product/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('product/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('product/view/<int:product_id>/', views.view_product, name='view_product'),\n\n    path('purchase/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchase/edit/<int:record_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchase/delete/<int:record_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchase/view/<int:record_id>/', views.view_purchase_record, name='view_purchase_record'),\n\n    path('preferred/add/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred/edit/<int:customer_id>/<int:product_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred/delete/<int:customer_id>/<int:product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n\n    path('sales/report/', views.generate_sales_report, name='generate_sales_report'),\n    path('sales/trends/', views.analyze_sales_trends, name='analyze_sales_trends'),\n    path('sales/performance/', views.product_performance_analysis, name='product_performance_analysis'),\n]"}, {"file": "admin.py", "path": "myapp/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "home.html", "path": "myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the System!</h1>\n    <p>Overview of system features goes here.</p>\n\n    <h2>Navigation</h2>\n    <ul>\n        <li><a href=\"{% url 'add_customer' %}\">Add Customer</a></li>\n        <li><a href=\"#\">Customer List (Implement Later)</a></li>\n        <li><a href=\"{% url 'add_product' %}\">Add Product</a></li>\n        <li><a href=\"#\">Product List (Implement Later)</a></li>\n        <li><a href=\"{% url 'add_purchase_record' %}\">Add Purchase Record</a></li>\n\n    </ul>\n</body>\n</html>"}, {"file": "view_customer.html", "path": "myapp/templates/view_customer.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>View Customer</title>\n</head>\n<body>\n    <h1>Customer Details</h1>\n    <p>Name: {{ customer.name }}</p>\n    <p>Birthday: {{ customer.birthday }}</p>\n    <p>Age: {{ customer.age }}</p>\n    <p>Sex: {{ customer.sex }}</p>\n    <p>Company: {{ customer.company }}</p>\n    <p>Phone Number: {{ customer.phone_number }}</p>\n\n    <a href=\"{% url 'edit_customer' customer.id %}\">Edit</a>\n    <a href=\"{% url 'delete_customer' customer.id %}\">Delete</a>\n\n</body>\n</html>"}, {"file": "view_product.html", "path": "myapp/templates/view_product.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>View Product</title>\n</head>\n<body>\n    <h1>Product Details</h1>\n    <p>Name: {{ product.name }}</p>\n    <p>Category: {{ product.category }}</p>\n    <p>Recommended Price: {{ product.recommended_price }}</p>\n\n    <a href=\"{% url 'edit_product' product.id %}\">Edit</a>\n    <a href=\"{% url 'delete_product' product.id %}\">Delete</a>\n</body>\n</html>"}, {"file": "view_purchase_record.html", "path": "myapp/templates/view_purchase_record.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>View Purchase Record</title>\n</head>\n<body>\n    <h1>Purchase Record Details</h1>\n    <p>Datetime: {{ record.datetime }}</p>\n    <p>Product: {{ record.product.name }}</p>\n    <p>Customer: {{ record.customer.name }}</p>\n    <p>Quantity: {{ record.quantity }}</p>\n    <p>Amount: {{ record.amount }}</p>\n\n    <a href=\"{% url 'edit_purchase_record' record.id %}\">Edit</a>\n    <a href=\"{% url 'delete_purchase_record' record.id %}\">Delete</a>\n</body>\n</html>"}, {"file": "view_preferred_products.html", "path": "myapp/templates/view_preferred_products.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>View Preferred Products</title>\n</head>\n<body>\n    <h1>Preferred Products for {{ customer.name }}</h1>\n    <ul>\n        {% for product in preferred_products %}\n            <li>{{ product.product.name }} - <a href=\"{% url 'delete_preferred_product' customer.id product.product.id %}\">Remove</a></li>\n        {% empty %}\n            <li>No preferred products found.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'add_preferred_product' %}\">Add Preferred Product</a>\n</body>\n</html>"}], "14": [{"file": "views.py", "path": "helloworld/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    context = {'message': 'Hello World'}\n    return render(request, 'helloworld/hello_world.html', context)"}, {"file": "urls.py", "path": "helloworld/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('helloworld.urls')),\n]"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'helloworld' to INSTALLED_APPS\n# Ensure TEMPLATES dir points to the templates directory.\n# STATIC_URL and STATICFILES_DIRS also should be set to serve static file such as css. \n# Example:\n# INSTALLED_APPS = [\n#    ...,\n#    'helloworld',\n#]\n#TEMPLATES = [\n#    {\n#        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n#        'DIRS': [BASE_DIR / 'templates'],\n#        'APP_DIRS': True,\n#        'OPTIONS': {\n#            'context_processors': [\n#                'django.template.context_processors.debug',\n#                'django.template.context_processors.request',\n#                'django.contrib.auth.context_processors.auth',\n#                'django.contrib.messages.context_processors.messages',\n#            ],\n#        },\n#    },\n#]\n\n#STATIC_URL = '/static/'\n#STATICFILES_DIRS = [BASE_DIR / 'static']"}, {"file": "hello_world.html", "path": "templates/helloworld/hello_world.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            background-color: #f0f0f0;\n        }\n        .hello-text {\n            font-family: Arial, sans-serif;\n            font-size: 2em;\n            color: #333;\n        }\n    </style>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n</head>\n<body>\n    <div class=\"hello-text\">{{ message }}</div>\n</body>\n</html>"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome!</h1>\n    <a href=\"{% url 'helloworld' %}\"><button>Go to HelloWorld</button></a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "templates/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1>HelloWorld!</h1>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# Add 'myapp' to INSTALLED_APPS\n# Ensure TEMPLATES includes 'DIRS': [BASE_DIR / 'templates']\n# Ensure you've configured your database settings"}], "16": [{"file": "input_validation.py", "path": "validation/input_validation.py", "code": "def check_file_existence(filename):\n    pass\n\ndef validate_headers(filename, expected_headers):\n    pass\n\ndef validate_time_column(filename):\n    pass\n\ndef validate_data_integrity(filename):\n    pass\n\ndef validate_null_value(filename):\n    pass"}, {"file": "data_transformation.py", "path": "transformation/data_transformation.py", "code": "def transform_to_two_dimension_table(data):\n    pass\n\ndef data_mapping(data, table):\n    pass"}, {"file": "output_creation.py", "path": "output/output_creation.py", "code": "def create_output_excel_file(filename):\n    pass\n\ndef save_table_to_excel(table, filename):\n    pass"}, {"file": "main.py", "path": "main.py", "code": "import input_validation\nimport data_transformation\nimport output_creation\n\ndef main():\n    # Input File Validation\n    filename = 'Spring Semester Subjects.xlsx'\n    input_validation.check_file_existence(filename)\n    input_validation.validate_headers(filename, ['#', 'Name', 'Weekday', 'Time'])\n    input_validation.validate_time_column(filename)\n    input_validation.validate_data_integrity(filename)\n    input_validation.validate_null_value(filename)\n\n    # Data Transformation (Assuming you load data from file to a variable 'data')\n    # data = load_data_from_excel(filename) # Replace with actual data loading\n    data = [] # place holder for data\n    transformed_table = data_transformation.transform_to_two_dimension_table(data)\n    data_transformation.data_mapping(data, transformed_table)\n\n    # Output File Creation\n    output_filename = 'Transformed_Subjects.xlsx'\n    output_creation.create_output_excel_file(output_filename)\n    output_creation.save_table_to_excel(transformed_table, output_filename)\n\nif __name__ == '__main__':\n    main()"}], "17": [{"file": "DataPreparation.py", "path": "DataPreparation.py", "code": "def ReadDataset(filename):\n    \"\"\"Load the dataset.\n    Args: filename (str): The name of the Excel file.\n    Returns: pandas.DataFrame: The loaded dataset.\n    \"\"\"\n    pass\n\n\ndef LagDependentVariable(df, column_name):\n    \"\"\"Apply a one-period lag to the dependent variable.\n    Args: df (pandas.DataFrame): The input DataFrame.\n          column_name (str): The name of the column to lag.\n    Returns: pandas.DataFrame: The DataFrame with the lagged variable.\n    \"\"\"\n    pass\n\n\ndef PrepareIndependentVariables(df):\n    \"\"\"Prepare the independent variables.\n    Args: df (pandas.DataFrame): The input DataFrame.\n    Returns: pandas.DataFrame: The prepared independent variables.\n    \"\"\"\n    pass\n\n\ndef main():\n    # Read Dataset\n    df = ReadDataset('Gamedata.xlsx')\n    \n    # Lag Dependent Variable\n    df = LagDependentVariable(df, 'result')\n    \n    # Prepare Independent Variables\n    X = PrepareIndependentVariables(df)\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "ModelCreation.py", "path": "ModelCreation.py", "code": "def CreateLogisticModel(X, y):\n    \"\"\"Develop a logistic regression model.\n    Args: X (pandas.DataFrame): The independent variables.\n          y (pandas.Series): The dependent variable.\n    Returns: LogisticRegression: The trained logistic regression model.\n    \"\"\"\n    pass\n\n\ndef GenerateModelSummary(model):\n    \"\"\"Generate a summary of the logistic model.\n    Args: model (LogisticRegression): The trained logistic regression model.\n    Returns: str: The model summary.\n    \"\"\"\n    pass\n\n\ndef main():\n    # Load prepared data (replace with actual loading)\n    # X = ...\n    # y = ...\n\n    # Create Logistic Model\n    model = CreateLogisticModel(None, None) # Replace None, None with actual data\n\n    # Generate Model Summary\n    summary = GenerateModelSummary(model)\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "Output.py", "path": "Output.py", "code": "def WriteSummary(summary, filename):\n    \"\"\"Output the model summary to an Excel file.\n    Args: summary (str): The model summary.\n          filename (str): The name of the Excel file.\n    \"\"\"\n    pass\n\n\ndef main():\n    # Load Model Summary (replace with actual loading)\n    summary = \"Model Summary Placeholder\"\n    \n    # Write Summary to Excel\n    WriteSummary(summary, 'Logistic.xlsx')\n\nif __name__ == \"__main__\":\n    main()"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "# Main Menu functions\n\ndef start_game():\n    \"\"\"Begins a new game session.\"\"\"\n    pass\n\ndef instructions():\n    \"\"\"Displays game instructions.\"\"\"\n    pass\n\ndef exit_game():\n    \"\"\"Exits the game.\"\"\"\n    pass\n\n\ndef main_menu():\n    \"\"\"Displays the main menu and handles user input.\"\"\"\n    while True:\n        # Display menu options (Start, Instructions, Exit)\n        pass # Replace with your menu display code\n        \n        # Get user input\n        pass # Replace with your input collection code\n        \n        # Process user input\n        pass # Replace with your input processing code\n        \n        # Example:\n        # if user_input == 'start':\n        #     start_game()\n        #     break\n        # elif user_input == 'instructions':\n        #     instructions()\n        # elif user_input == 'exit':\n        #     exit_game()\n        #     break\n\nif __name__ == \"__main__\":\n    main_menu()"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "# Game Environment functions\n\ndef move_player(direction):\n    \"\"\"Moves the player in the specified direction.\"\"\"\n    pass\n\ndef look_around():\n    \"\"\"Inspects the current area and returns a description.\"\"\"\n    pass\n\ndef pick_item():\n    \"\"\"Picks up an item in the current room (automatic in this case).\"\"\"\n    pass\n\ndef check_inventory():\n    \"\"\"Checks and displays the items in the player's inventory.\"\"\"\n    pass\n"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "# Game Logic functions\n\ndef parse_command(command):\n    \"\"\"Parses the player's command and returns an action.\"\"\"\n    pass\n\ndef update_game_state(action):\n    \"\"\"Updates the game state based on the player's action.\"\"\"\n    pass\n"}, {"file": "help_support.py", "path": "src/help_support.py", "code": "# Help and Support functions\n\ndef display_help():\n    \"\"\"Provides in-game help and support information.\"\"\"\n    pass"}, {"file": "game.py", "path": "src/game.py", "code": "# Main game loop and initialization\n\nimport main_menu\nimport game_environment\nimport game_logic\nimport help_support\n\n\ndef initialize_game():\n    \"\"\"Initializes the game state.\"\"\"\n    pass\n\n\ndef game_loop():\n    \"\"\"The main game loop.\"\"\"\n    pass\n\n\nif __name__ == \"__main__\":\n    main_menu.main_menu()"}], "19": "```json\n[\n  {\n    \"file\": \"batch_program.py\",\n    \"path\": \"src/batch_program.py\",\n    \"code\": \"\"\"\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ndef ReadDeathlistData(file_path):\n    \\\\\"\\\\\"\\\\\"\n    Load and read data from the 'Deathlist.csv' file.\n    \\\\\"\\\\\"\\\\\"\n    try:\n        df = pd.read_csv(file_path)\n        return df\n    except FileNotFoundError:\n        print(f\"Error: File not found at {file_path}\")\n        return None\n    except Exception as e:\n        print(f\"Error reading file: {e}\")\n        return None\n\ndef ProcessData(df):\n    \\\\\"\\\\\"\\\\\"\n    Process the dataset to structure data appropriately for weekly analysis.\n    \\\\\"\\\\\"\\\\\"\n    # Example: Assuming a 'death_date' column\n    try:\n        df['death_date'] = pd.to_datetime(df['death_date'])\n        df['week'] = df['death_date'].dt.isocalendar().week\n        return df\n    except KeyError:\n        print(\"Error: 'death_date' column not found.  Ensure your CSV has a 'death_date' column.\")\n        return None\n    except Exception as e:\n        print(f\"Error processing data: {e}\")\n        return None\n\n\ndef CalculateWeeklyDeaths(df):\n    \\\\\"\\\\\"\\\\\"\n    Aggregate the data to calculate the number of deaths per week.\n    \\\\\"\\\\\"\\\\\"\n    try:\n        weekly_deaths = df.groupby('week').size().reset_index(name='death_count')\n        return weekly_deaths\n    except KeyError:\n        print(\"Error: 'week' column not found. Ensure you have processed the data to include week numbers.\")\n        return None\n    except Exception as e:\n        print(f\"Error calculating weekly deaths: {e}\")\n        return None\n\n\ndef GenerateHistogram(weekly_deaths):\n    \\\\\"\\\\\"\\\\\"\n    Create a histogram depicting the weekly deaths calculated from the dataset.\n    \\\\\"\\\\\"\\\\\"\n    if weekly_deaths is None:\n        print(\"Error: Weekly deaths data is not available.  Cannot generate histogram.\")\n        return None\n    try:\n        plt.figure(figsize=(12, 6))\n        plt.bar(weekly_deaths['week'], weekly_deaths['death_count'])\n        plt.xlabel('Week Number')\n        plt.ylabel('Number of Deaths')\n        plt.title('Weekly Death Count Histogram')\n        plt.grid(axis='y', alpha=0.75)\n        return plt\n    except Exception as e:\n        print(f\"Error generating histogram: {e}\")\n        return None\n\n\ndef OutputHistogram(histogram, output_file=\"weekly_deaths_histogram.png\"):\n    \\\\\"\\\\\"\\\\\"\n    Print or display the generated histogram to the user.\n    \\\\\"\\\\\"\\\\\"\n    if histogram is None:\n        print(\"Error: Histogram is not available.\")\n        return\n\n    try:\n        histogram.savefig(output_file)\n        print(f\"Histogram saved to {output_file}\")\n        # Optionally display the histogram (requires a display environment)\n        # plt.show()\n    except Exception as e:\n        print(f\"Error outputting histogram: {e}\")\n\n\ndef ValidateDataset(df):\n    \\\\\"\\\\\"\\\\\"\n    Validate the dataset to ensure it contains the required data and format before processing.\n    \\\\\"\\\\\"\\\\\"\n    if df is None:\n        print(\"Error: Dataframe is empty.  Please check the input file.\")\n        return False\n\n    if 'death_date' not in df.columns:\n        print(\"Error: 'death_date' column is missing. The column is required for correct execution.\")\n        return False\n    \n    return True\n\ndef main():\n    file_path = 'Deathlist.csv'\n\n    df = ReadDeathlistData(file_path)\n    if not ValidateDataset(df):\n        return\n\n    processed_df = ProcessData(df)\n    if processed_df is None:\n        return\n\n    weekly_deaths = CalculateWeeklyDeaths(processed_df)\n    if weekly_deaths is None:\n        return\n\n    histogram = GenerateHistogram(weekly_deaths)\n    if histogram is None:\n        return\n\n    OutputHistogram(histogram)\n\n\nif __name__ == \"__main__\":\n    main()\n\"\"\"\n  }\n]\n```", "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE, related_name='comments')\n    author = models.CharField(max_length=100)\n    text = models.TextField()\n    created_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.author + ': ' + self.text[:20]\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.http import HttpResponse\nfrom .models import BlogPost, Comment, Category\nfrom django.core.paginator import Paginator\nfrom django.db.models import Q\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5]\n    context = {'latest_posts': latest_posts}\n    return render(request, 'blog/home.html', context)\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    return render(request, 'blog/blog_post_detail.html', {'post': post})\n\ndef search(request):\n    query = request.GET.get('q')\n    results = BlogPost.objects.filter(Q(title__icontains=query) | Q(content__icontains=query))\n    return render(request, 'blog/search_results.html', {'results': results, 'query': query})\n\n# Placeholder views - to be implemented\n\ndef add_post(request):\n    return HttpResponse(\"Add Post - Implementation Pending\")\n\ndef manage_post(request, pk):\n    return HttpResponse(\"Manage Post - Implementation Pending\")\n\ndef manage_comments(request, pk):\n    return HttpResponse(\"Manage Comments - Implementation Pending\")\n\ndef about(request):\n    return HttpResponse(\"About Page - Implementation Pending\")\n\ndef categories(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/categories.html', {'categories': categories})\n\ndef category_detail(request, category_name):\n    category = get_object_or_404(Category, name=category_name)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\ndef manage_categories(request):\n    return HttpResponse(\"Manage Categories - Implementation Pending\")\n\ndef archive(request):\n    return HttpResponse(\"Archive - Implementation Pending\")"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('search/', views.search, name='search'),\n\tpath('add_post/', views.add_post, name='add_post'),\n\tpath('manage_post/<int:pk>/', views.manage_post, name='manage_post'),\n\tpath('manage_comments/<int:pk>/', views.manage_comments, name='manage_comments'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('categories/<str:category_name>/', views.category_detail, name='category_detail'),\n    path('manage_categories/', views.manage_categories, name='manage_categories'),\n    path('archive/', views.archive, name='archive'),\n]"}, {"file": "home.html", "path": "blog/templates/blog/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome to the Blog</h1>\n\n    <form action=\"{% url 'search' %}\" method=\"get\">\n        <input type=\"text\" name=\"q\" placeholder=\"Search posts...\">\n        <button type=\"submit\">Search</button>\n    </form>\n\n    <h2>Latest Posts</h2>\n    <ul>\n        {% for post in latest_posts %}\n            <li><a href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "blog_post_detail.html", "path": "blog/templates/blog/blog_post_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>{{ post.title }}</h1>\n    <p>{{ post.content }}</p>\n    <p>Published: {{ post.publication_date }}</p>\n\n    <h2>Comments</h2>\n    <p>Comments Section - Implementation Pending</p>\n{% endblock %}"}, {"file": "search_results.html", "path": "blog/templates/blog/search_results.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Search Results for \"{{ query }}\"</h1>\n\n    {% if results %}\n        <ul>\n            {% for post in results %}\n                <li><a href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></li>\n            {% endfor %}\n        </ul>\n    {% else %}\n        <p>No results found.</p>\n    {% endif %}\n{% endblock %}"}, {"file": "categories.html", "path": "blog/templates/blog/categories.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Blog Categories</h1>\n\n    <ul>\n        {% for category in categories %}\n            <li><a href=\"{% url 'category_detail' category.name %}\">{{ category.name }}</a></li>\n        {% endfor %}\n    </ul>\n\n    <a href=\"{% url 'manage_categories' %}\">Manage Categories</a>\n{% endblock %}"}, {"file": "category_detail.html", "path": "blog/templates/blog/category_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Category: {{ category.name }}</h1>\n\n    <ul>\n        {% for post in posts %}\n            <li><a href=\"{% url 'blog_post_detail' post.pk %}\">{{ post.title }}</a></li>\n        {% endfor %}\n    </ul>\n{% endblock %}"}, {"file": "base.html", "path": "blog/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>My Blog</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'categories' %}\">Categories</a> |\n        <a href=\"{% url 'about' %}\">About</a> |\n\t\t<a href=\"{% url 'archive' %}\">Archive</a>\n    </nav>\n    <hr>\n    {% block content %}{% endblock %}\n</body>\n</html>"}]}