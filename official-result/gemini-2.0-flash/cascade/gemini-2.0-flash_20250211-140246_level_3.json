{"1": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Form definitions\nclass BMICalculatorForm(forms.Form):\n    \"\"\"\n    A form to calculate BMI using weight and height.\n    \"\"\"\n    weight = forms.FloatField(label='Weight (kg)')\n    height = forms.FloatField(label='Height (m)')"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('bmi-calculator/', views.bmi_calculator, name='bmi_calculator'),\n    path('advice/', views.advice, name='advice'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nfrom .forms import BMICalculatorForm\n\n# Category thresholds\nbmi_category = {\n    \"Underweight\": 18.5,\n    \"Normal weight\": 25,\n    \"Overweight\": 30,\n    \"Obese\": 999,\n}\n\n# BMI interpretation descriptions\nbmi_interpretation = {\n    \"Underweight\": \"A BMI below 18.5 is considered underweight...\",\n    \"Normal weight\": \"A BMI within this range is considered normal...\",\n    \"Overweight\": \"A BMI between 25 and 29.9 is classified as overweight...\",\n    \"Obese\": \"A BMI of 30 or above is considered obese...\",\n    \"Invalid height\": \"The height can't be less than 0.\"\n}\n\ndef homepage(request):\n    \"\"\"\n    Render the homepage.\n    \"\"\"\n    return render(request, 'homepage.html')\n\n\ndef bmi_calculator(request):\n    \"\"\"\n    Calculate BMI based on user input.\n    \"\"\"\n    if request.method == 'POST':\n        form = BMICalculatorForm(request.POST)\n        if form.is_valid():\n            weight = form.cleaned_data['weight']\n            height = form.cleaned_data['height']\n\n            if height <= 0:\n                bmi = None\n                category = \"Invalid height\"\n            else:\n                bmi = round(weight / (height * height), 2)\n                category = None\n                for cat, threshold in bmi_category.items():\n                    if bmi < threshold:\n                        category = cat\n                        break\n\n            return render(request, 'bmi_calculator.html', {\n                'form': form,\n                'bmi': bmi,\n                'category': category,\n                'interpretation': bmi_interpretation.get(category, \"\")\n            })\n    else:\n        form = BMICalculatorForm()\n    return render(request, 'bmi_calculator.html', {'form': form})\n\n\ndef advice(request):\n    \"\"\"\n    Provide health advice based on BMI.\n    \"\"\"\n    return render(request, 'advice.html')"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "advice.html", "path": "example_app/templates/advice.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Advice</title>\n</head>\n<body>\n    <div id=\"advice-container\" class=\"container\">\n        <h1 id=\"advice-title\" class=\"title\">Health Advice Based on BMI</h1>\n        <p id=\"advice-content\" class=\"content\">\n            The advice page provides health recommendations based on BMI categories.\n        </p>\n    </div>\n</body>\n</html>"}, {"file": "bmi_calculator.html", "path": "example_app/templates/bmi_calculator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <div id=\"bmi-calculator-container\" class=\"container\">\n        <h1 id=\"bmi-calculator-title\" class=\"title\">BMI Calculator</h1>\n        <form id=\"bmi-form\" method=\"post\">\n            {% csrf_token %}\n            <div id=\"form-fields\" class=\"form-group\">\n                {{ form.as_p }}\n            </div>\n            <button id=\"calculate-button\" class=\"btn btn-primary\" type=\"submit\">Calculate</button>\n            <button id=\"reset-button\" class=\"btn btn-secondary\" type=\"reset\">Reset</button>\n        </form>\n\n        {% if bmi %}\n            <div id=\"results\" class=\"results\">\n                <h2 id=\"bmi-result-title\" class=\"result-title\">Your BMI:</h2>\n                <p id=\"bmi-value\" class=\"bmi-value\">{{ bmi }}</p>\n                <h2 id=\"bmi-category-title\" class=\"category-title\">Category:</h2>\n                <p id=\"bmi-category\" class=\"bmi-category\">{{ category }}</p>\n                <h2 id=\"bmi-interpretation-title\" class=\"interpretation-title\">Interpretation:</h2>\n                <p id=\"bmi-interpretation\" class=\"bmi-interpretation\">{{ interpretation }}</p>\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "homepage.html", "path": "example_app/templates/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Homepage</title>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"container\">\n        <h1 id=\"homepage-title\" class=\"title\">Welcome to the BMI Calculator!</h1>\n        <p id=\"homepage-description\" class=\"description\">\n            The homepage provides an introduction to BMI calculation and a link to navigate to the BMI calculator.\n        </p>\n        <a id=\"bmi-calculator-link\" class=\"link\" href=\"/bmi-calculator/\">Go to BMI Calculator</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n# Project URL configurations\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "2": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\") from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\n\n# Global variables\nCURRENCY_CHOICES = [\n    ('USD', 'US Dollar'),\n    ('EUR', 'Euro'),\n    ('JPY', 'Japanese Yen'),\n    ('GBP', 'British Pound'),\n    ('CNY', 'Renminbi'),\n    ('AUD', 'Australian Dollar'),\n    ('CAD', 'Canadian Dollar'),\n    ('CHF', 'Swiss Franc')\n]\n\nclass CurrencyConverterForm(forms.Form):\n    '''\n    The form for user to use the converter\n    '''\n    source_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, label='Source Currency')\n    target_currency = forms.ChoiceField(choices=CURRENCY_CHOICES, label='Target Currency')\n    amount = forms.DecimalField(label='Amount', initial=1.00)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass CurrencyConvertRateModel(models.Model):\n    \"\"\"\n    Model for currency rate record\n    \"\"\"\n\n    source_currency = models.CharField(max_length=3, verbose_name='Source Currency')\n    target_currency = models.CharField(max_length=3, verbose_name='Target Currency')\n    rate = models.DecimalField(max_digits=20, decimal_places=10, verbose_name='Rate')\n    timestamp = models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')\n\n    class Meta:\n        verbose_name = 'Currency Conversion Rate'\n        verbose_name_plural = 'Currency Conversion Rates'\n\n    def __str__(self):\n        return f'{self.source_currency} to {self.target_currency} at {self.rate}'\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\n\nfrom django.shortcuts import render\nfrom django.views.generic import TemplateView\n\nfrom .forms import CurrencyConverterForm\nfrom .models import CurrencyConvertRateModel\n\n\ndef get_updated(source_currency, target_currency):\n    \"\"\"\n    Warning:\n    This function is a simulation of currency rate.\n    In the production environment, this function should be replaced with an api from professional currency exchanging market website.\n    \"\"\"\n    # random rate\n    USD_BASE = {\n        'USD': 1.00,\n        'EUR': 0.85,\n        'GBP': 0.75,\n        'JPY': 110.00,\n        'AUD': 1.35,\n        'CNY': 7.00,\n        'CAD': 1.25,\n        'CHF': 0.92,\n    }\n    return (random.random() * 0.5 + 0.75) * (1 / USD_BASE[source_currency] * USD_BASE[target_currency])\n\n\ndef get_conversion_rate(source_currency, target_currency):\n    \"\"\"\n    A function that used for getting conversion rate.\n    \"\"\"\n    try:\n        rate = CurrencyConvertRateModel.objects.filter(source_currency=source_currency, target_currency=target_currency).latest('timestamp').rate\n    except CurrencyConvertRateModel.DoesNotExist:\n        rate = get_updated(source_currency, target_currency)\n        CurrencyConvertRateModel.objects.create(source_currency=source_currency, target_currency=target_currency, rate=rate)\n\n    return rate\n\n\nclass ConvertCurrencyView(TemplateView):\n    template_name = 'home.html'\n\n    def get(self, request):\n        \"\"\"\n        A function for processing user's get method.\n        \"\"\"\n        form = CurrencyConverterForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        \"\"\"\n        A function for processing user's post method.\n        \"\"\"\n        form = CurrencyConverterForm(request.POST)\n        if form.is_valid():\n            source_currency = form.cleaned_data['source_currency']\n            target_currency = form.cleaned_data['target_currency']\n            amount = form.cleaned_data['amount']\n            conversion_rate = get_conversion_rate(source_currency, target_currency)\n            converted_amount = amount * conversion_rate\n            return render(request, self.template_name, {'form': form, 'converted_amount': converted_amount, 'source_currency':source_currency, 'target_currency':target_currency, 'amount':amount, 'conversion_rate':conversion_rate})\n        return render(request, self.template_name, {'form': form})\n\n\nclass ExchangeRateTrendsView(TemplateView):\n    template_name = 'exchange_rate_trends.html'\n\n    def get(self, request):\n        \"\"\"\n        A function for processing user's get method.\n        \"\"\"\n        return render(request, self.template_name)\n\n\ndef InfoView(request):\n    return render(request, 'info.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2 on 2024-09-04 03:09\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='CurrencyConvertRateModel',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('source_currency', models.CharField(max_length=128, verbose_name='Source Currency')),\n                ('target_currency', models.CharField(max_length=128, verbose_name='Target Currency')),\n                ('rate', models.DecimalField(decimal_places=16, max_digits=32, verbose_name='Rate')),\n                ('datetime', models.DateTimeField(auto_now_add=True, verbose_name='Datetime')),\n            ],\n            options={\n                'verbose_name': 'Currency Convert Rate',\n                'verbose_name_plural': 'Currency Convert Rates',\n            },\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "exchange_rate_trends.html", "path": "example_app/templates/exchange_rate_trends.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Exchange Rate Trends</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"exchange-rate-trends-container\">\n        <h1 class=\"mt-4 mb-4\" id=\"exchange-rate-trends-title\">Exchange Rate Trends</h1>\n        <p id=\"exchange-rate-trends-description\">This section is a placeholder for Exchange Rate Trends' content.</p>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\" id=\"home-container\">\n        <h1 class=\"mt-4 mb-4\" id=\"home-title\">Currency Converter</h1>\n\n        <form method=\"post\" id=\"currency-converter-form\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"source-currency-group\">\n                <label for=\"{{ form.source_currency.id_for_label }}\" id=\"source-currency-label\">Source Currency:</label>\n                {{ form.source_currency }}  <!-- Added form rendering -->\n            </div>\n            <div class=\"form-group\" id=\"target-currency-group\">\n                <label for=\"{{ form.target_currency.id_for_label }}\" id=\"target-currency-label\">Target Currency:</label>\n                {{ form.target_currency }} <!-- Added form rendering -->\n            </div>\n            <div class=\"form-group\" id=\"amount-group\">\n                <label for=\"{{ form.amount.id_for_label }}\" id=\"amount-label\">Amount:</label>\n                {{ form.amount }} <!-- Added form rendering -->\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"convert-button\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n            <div class=\"mt-3\" id=\"conversion-result\">\n                <p id=\"conversion-text\">{{ amount }} {{source_currency}} = {{ converted_amount }} {{target_currency}}</p>\n                <p id=\"conversion-rate-text\">Conversion Rate: {{ conversion_rate }}</p>\n            </div>\n        {% endif %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import ConvertCurrencyView, ExchangeRateTrendsView, InfoView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', ConvertCurrencyView.as_view(), name='home'),\n    path('trends/', ExchangeRateTrendsView.as_view(), name='exchange_rate_trends'),\n    path('info/', InfoView, name='info')\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "3": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AboutUsPageView, password_generator_view\n\nurlpatterns = [\n    path('', HomePageView().get, name='home'),\n    path('generator/', password_generator_view, name='generator'),\n    path('about-us/', AboutUsPageView().get, name='about_us'),\n]\n"}, {"file": "views.py", "path": "example_app/views.py", "code": "import random\nimport string\n\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef generate_password(length=12, include_uppercase=True, include_lowercase=True, include_numbers=True, include_symbols=True):\n    \"\"\"\n    Generates a random password based on the specified criteria.\n    \"\"\"\n    characters = ''\n    if include_uppercase: characters += string.ascii_uppercase\n    if include_lowercase: characters += string.ascii_lowercase\n    if include_numbers: characters += string.digits\n    if include_symbols: characters += string.punctuation\n\n    if not characters:\n        return ''  # Return empty string if no character set is selected\n\n    password = ''.join(random.choice(characters) for i in range(length))\n    return password\n\n\ndef password_generator_view(request):\n    \"\"\"\n    Handles the password generation form and renders the result.\n    \"\"\"\n    if request.method == 'POST':\n        length = int(request.POST.get('length', 12))\n        include_uppercase = request.POST.get('uppercase') == 'on'\n        include_lowercase = request.POST.get('lowercase') == 'on'\n        include_numbers = request.POST.get('numbers') == 'on'\n        include_symbols = request.POST.get('symbols') == 'on'\n\n        password = generate_password(length, include_uppercase, include_lowercase, include_numbers, include_symbols)\n        return render(request, 'generator.html', {'password': password})\n    else:\n        return render(request, 'generator.html')\n\n\nclass HomePageView:\n    \"\"\"\n    Renders the Home page of the password generator.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handles GET requests to the home page.\n        \"\"\"\n        return render(request, 'home.html')\n\n\nclass AboutUsPageView:\n    \"\"\"\n    Renders the About Us page of the password generator.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handles GET requests to the about us page.\n        \"\"\"\n        return render(request, 'about_us.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body { font-family: Arial, sans-serif; }\nh1 { color: #333; }\n.container { width: 80%; margin: 0 auto; padding: 20px; }\n.password-display { margin-top: 20px; border: 1px solid #ccc; padding: 10px; }\n.copy-message { display: none; color: green; }\n.form-group { margin-bottom: 10px; }\nlabel { display: block; margin-bottom: 5px; }\ninput[type='number'] { width: 50px; }\nbutton { padding: 8px 12px; background-color: #4CAF50; color: white; border: none; cursor: pointer; }\n"}, {"file": "scripts.js", "path": "example_app/static/js/scripts.js", "code": "function copyToClipboard() {\n    var password = document.getElementById('password').innerText;\n    navigator.clipboard.writeText(password).then(function () {\n        var message = document.getElementById('copy-message');\n        message.innerText = 'Password copied to clipboard!';\n        message.style.display = 'block';\n        setTimeout(function () {\n            message.style.display = 'none';\n        }, 3000);\n    }, function (err) {\n        console.error('Could not copy text: ', err);\n    });\n}\n"}, {"file": "about_us.html", "path": "example_app/templates/about_us.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"about-us-title\" class=\"title\">About Password Generator</h1>\n        <p id=\"about-us-text\" class=\"text\">This is a simple password generator application built with Django.</p>\n    </div>\n</body>\n</html>\n"}, {"file": "generator.html", "path": "example_app/templates/generator.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"generator-title\" class=\"title\">Password Generator</h1>\n        <form id=\"generator-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"length\">Password Length:</label>\n                <input type=\"number\" id=\"length\" name=\"length\" value=\"12\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"uppercase\">Include Uppercase:</label>\n                <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" checked>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"lowercase\">Include Lowercase:</label>\n                <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" checked>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"numbers\">Include Numbers:</label>\n                <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" checked>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"symbols\">Include Symbols:</label>\n                <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n            </div>\n            <button type=\"submit\" class=\"generate-button\">Generate Password</button>\n        </form>\n        {% if password %}\n            <div id=\"password-display\" class=\"password-display\">\n                <p id=\"password\">{{ password }}</p>\n                <button id=\"copy-button\" onclick=\"copyToClipboard()\">Copy Password</button>\n                <p id=\"copy-message\" class=\"copy-message\">Password copied!</p>\n            </div>\n        {% endif %}\n    </div>\n    <script src=\"/static/js/scripts.js\"></script>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to Password Generator</h1>\n        <p id=\"home-text\" class=\"text\">Generate strong and secure passwords easily!</p>\n        <a id=\"generator-link\" href=\"/generator/\">Generate Password</a>\n        <a id=\"about-us-link\" href=\"/about-us/\">About Us</a>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "password_generator/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "password_generator/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}], "4": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "apps.py", "path": "qr_app/apps.py", "code": "from django.apps import AppConfig\n\n\nclass QrAppConfig(AppConfig):\n    \"\"\"\n    Configuration class for the QR app.\n    \"\"\"\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_app'"}, {"file": "urls.py", "path": "qr_app/urls.py", "code": "from .views import *\nfrom django.urls import path\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('generate/', generate_qr_code, name='generate_qr_code'),\n    path('download/', download_qr_code, name='download_qr_code'),\n    path('about/', about, name='about'),\n]"}, {"file": "views.py", "path": "qr_app/views.py", "code": "from django.http import HttpResponse, FileResponse\nfrom django.shortcuts import render\nfrom django.core.files.base import ContentFile\nfrom qrcode.console_scripts import error_correction\nimport qrcode\nimport io\nimport base64\n\n\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'qr_app/home.html')\n\n\ndef hex_to_rgb(value):\n    \"\"\"\n    Convert hex color to RGB tuple.\n    \"\"\"\n    value = value.lstrip('#')\n    return tuple(int(value[i:i+2], 16) for i in (0, 2, 4))\n\n\ndef generate_qr_code(request):\n    \"\"\"\n    Generate a QR code from provided data.\n    \"\"\"\n    if request.method == 'POST':\n        data = request.POST.get('data', 'Default Text')\n        fg_color = request.POST.get('fg_color', '#000000') # Default black\n        bg_color = request.POST.get('bg_color', '#FFFFFF') # Default white\n        error_correction_level = request.POST.get('error_correction', 'H') # Default High\n\n        error_correction_map = {\n            'L': qrcode.constants.ERROR_CORRECT_L,\n            'M': qrcode.constants.ERROR_CORRECT_M,\n            'Q': qrcode.constants.ERROR_CORRECT_Q,\n            'H': qrcode.constants.ERROR_CORRECT_H,\n        }\n\n        error_correction = error_correction_map.get(error_correction_level, qrcode.constants.ERROR_CORRECT_H)\n\n        rgb_fg_color = hex_to_rgb(fg_color)\n        rgb_bg_color = hex_to_rgb(bg_color)\n\n        qr = qrcode.QRCode(\n            version=1,  # You can make this dynamic based on the data length\n            error_correction=error_correction,\n            box_size=10,\n            border=4,\n        )\n        qr.add_data(data)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=rgb_fg_color, back_color=rgb_bg_color)\n\n        # Convert the image to base64\n        buffer = io.BytesIO()\n        img.save(buffer, format=\"PNG\")\n        img_str = base64.b64encode(buffer.getvalue()).decode()\n\n        context = {\n            'qr_code': f'data:image/png;base64,{img_str}',\n            'data': data,  # Pass the data to the template for re-rendering\n            'fg_color': fg_color,\n            'bg_color': bg_color,\n            'error_correction': error_correction_level\n        }\n        return render(request, 'qr_app/generate.html', context)\n    else:\n        return render(request, 'qr_app/generate.html')\n\n\ndef download_qr_code(request):\n    \"\"\"\n    Allow users to download the generated QR code.\n    \"\"\"\n    if request.method == 'POST':\n        img_data = request.POST.get('img_data')\n        data = request.POST.get('data', 'QR_Code')  # Use provided data or default\n        if img_data:\n            img_data = img_data.split(',')[1]  # Remove data URL prefix\n            img_bytes = base64.b64decode(img_data)\n            img_io = io.BytesIO(img_bytes)\n\n            response = HttpResponse(img_io.read(), content_type=\"image/png\")\n            response['Content-Disposition'] = f'attachment; filename=\"{data}.png\"'\n            return response\n        else:\n            return HttpResponse(\"No image data provided.\")\n    else:\n        return HttpResponse(\"Invalid request method.\")\n\n\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'qr_app/about.html')"}, {"file": "__init__.py", "path": "qr_app/__init__.py", "code": ""}, {"file": "about.html", "path": "qr_app/templates/qr_app/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Our QR Code Generator</h1>\n        <p id=\"about-description\" class=\"description\">\n            We are dedicated to providing a simple and effective tool for generating QR codes.\n        </p>\n        <section id=\"faq-section\" class=\"faq\">\n            <h2 id=\"faq-title\" class=\"faq-title\">Frequently Asked Questions</h2>\n            <article id=\"faq-item-1\" class=\"faq-item\">\n                <h3 id=\"faq-question-1\" class=\"faq-question\">What is a QR Code?</h3>\n                <p id=\"faq-answer-1\" class=\"faq-answer\">A QR code (Quick Response code) is a type of matrix barcode first designed in 1994 for the automotive industry in Japan. It is a machine-readable optical label that contains information about the item to which it is attached.</p>\n            </article>\n            <article id=\"faq-item-2\" class=\"faq-item\">\n                <h3 id=\"faq-question-2\" class=\"faq-question\">How do I use this generator?</h3>\n                <p id=\"faq-answer-2\" class=\"faq-answer\">Simply enter the text or URL you want to encode, customize the colors and error correction level, and click 'Generate QR Code'. You can then download the generated image.</p>\n            </article>\n        </section>\n        <section id=\"policies-section\" class=\"policies\">\n            <h2 id=\"policies-title\" class=\"policies-title\">Our Policies</h2>\n            <p id=\"policies-content\" class=\"policies-content\">We are committed to protecting your privacy and ensuring the security of your data.  We do not store any of the data you use to generate QR codes.</p>\n        </section>\n    </div>\n</body>\n</html>"}, {"file": "generate.html", "path": "qr_app/templates/qr_app/generate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            margin: 20px;\n        }\n\n        label {\n            display: block;\n            margin: 10px 0 5px;\n        }\n\n        input, select {\n            width: 100%;\n            padding: 8px;\n            margin-bottom: 15px;\n        }\n\n        button {\n            padding: 10px;\n            background-color: #28a745;\n            color: white;\n            border: none;\n            cursor: pointer;\n        }\n\n        button:hover {\n            background-color: #218838;\n        }\n\n        .qr-code-container {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"qr-generator-container\" class=\"container\">\n        <h1 id=\"qr-generator-title\" class=\"title\">QR Code Generator</h1>\n        <form id=\"qr-form\" method=\"post\" action=\"{% url 'generate_qr_code' %}\">\n            {% csrf_token %}\n            <label for=\"data\" id=\"data-label\">Data:</label>\n            <input type=\"text\" id=\"data\" name=\"data\" value=\"{{ data }}\" required>\n\n            <label for=\"fg_color\" id=\"fg-color-label\">Foreground Color:</label>\n            <input type=\"color\" id=\"fg_color\" name=\"fg_color\" value=\"{{ fg_color|default:'#000000' }}\">\n\n            <label for=\"bg_color\" id=\"bg-color-label\">Background Color:</label>\n            <input type=\"color\" id=\"bg_color\" name=\"bg_color\" value=\"{{ bg_color|default:'#FFFFFF' }}\">\n\n            <label for=\"error_correction\" id=\"error-correction-label\">Error Correction Level:</label>\n            <select id=\"error_correction\" name=\"error_correction\">\n                <option value=\"L\" {% if error_correction == 'L' %}selected{% endif %}>L - Low</option>\n                <option value=\"M\" {% if error_correction == 'M' %}selected{% endif %}>M - Medium</option>\n                <option value=\"Q\" {% if error_correction == 'Q' %}selected{% endif %}>Q - Quartile</option>\n                <option value=\"H\" {% if error_correction == 'H' %}selected{% endif %}>H - High</option>\n            </select>\n\n            <button type=\"submit\" id=\"generate-button\" class=\"generate-button\">Generate QR Code</button>\n        </form>\n\n        {% if qr_code %}\n        <div id=\"qr-code-display\" class=\"qr-code-container\">\n            <h2 id=\"qr-code-title\" class=\"qr-code-title\">Generated QR Code</h2>\n            <img id=\"qr-code-image\" src=\"{{ qr_code }}\" alt=\"QR Code\">\n\n            <form id=\"download-form\" method=\"post\" action=\"{% url 'download_qr_code' %}\">\n                {% csrf_token %}\n                <input type=\"hidden\" name=\"img_data\" value=\"{{ qr_code }}\">\n                <input type=\"hidden\" name=\"data\" value=\"{{ data }}\">\n                <button type=\"submit\" id=\"download-button\" class=\"download-button\">Download QR Code</button>\n            </form>\n        </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "qr_app/templates/qr_app/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to the QR Code Generator</h1>\n        <p id=\"home-description\" class=\"description\">Create your own custom QR codes with ease.</p>\n        <nav id=\"home-nav\" class=\"navigation\">\n            <ul id=\"home-nav-list\" class=\"nav-list\">\n                <li id=\"home-nav-item-1\" class=\"nav-item\">\n                    <a id=\"generate-link\" class=\"nav-link\" href=\"{% url 'generate_qr_code' %}\">Generate QR Code</a>\n                </li>\n                <li id=\"home-nav-item-2\" class=\"nav-item\">\n                    <a id=\"about-link\" class=\"nav-link\" href=\"{% url 'about' %}\">About Us</a>\n                </li>\n            </ul>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "qr_code_generator/settings.py", "code": "import os\n\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\n\nALLOWED_HOSTS = []\n\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_app',\n]\n\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'qr_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.0/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.0/topics/i18n/\nLANGUAGE_CODE = 'en-us'\n\n\nTIME_ZONE = 'UTC'\n\n\nUSE_I18N = True\n\n\nUSE_L10N = True\n\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.0/howto/static-files/\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'qr_app/static')]  # Add this line\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "qr_code_generator/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_app.urls')),\n]"}, {"file": "wsgi.py", "path": "qr_code_generator/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "qr_code_generator/__init__.py", "code": ""}], "5": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n# Main entry point\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "apps.py", "path": "example_app/apps.py", "code": "from django.apps import AppConfig\n\nclass ExampleAppConfig(AppConfig):\n    \"\"\"\n    Configuration for the Example App.\n    \"\"\"\n    name = 'example_app'\n"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\n# URL patterns\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import markdown\nimport os\n\nfrom django.conf import settings\nfrom django.shortcuts import render\nfrom django.http import HttpResponse\nfrom django.core.files.storage import FileSystemStorage\n\n# Home view\ndef home(request):\n    \"\"\"\n    Render the home page.\n    \"\"\"\n    return render(request, 'example_app/home.html')\n\n# Convert view\ndef convert(request):\n    \"\"\"\n    Handle Markdown to HTML conversion.\n    \"\"\"\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_content = markdown.markdown(markdown_text)\n        return render(request, 'example_app/convert.html', {'html_content': html_content})\n    return render(request, 'example_app/convert.html')\n\n# About view\ndef about(request):\n    \"\"\"\n    Render the about page.\n    \"\"\"\n    return render(request, 'example_app/about.html')\n"}, {"file": "about.html", "path": "example_app/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n    <style>\n        body { font-family: sans-serif; }\n        .about-container { max-width: 800px; margin: 20px auto; padding: 20px; border: 1px solid #ddd; }\n        .about-heading { font-size: 2em; margin-bottom: 20px; }\n        .about-content { line-height: 1.6; }\n    </style>\n</head>\n<body>\n    <div id=\"about-page\" class=\"about-container\">\n        <h1 id=\"about-title\" class=\"about-heading\">About the Markdown to HTML Converter</h1>\n        <div id=\"about-description\" class=\"about-content\">\n            <p>This application allows you to convert Markdown text into HTML.  It's a simple tool for quickly formatting your text.</p>\n            <p>Feel free to use it and provide feedback!</p>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "convert.html", "path": "example_app/templates/convert.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Convert</title>\n    <style>\n        body { font-family: sans-serif; }\n        .convert-container { max-width: 800px; margin: 20px auto; padding: 20px; border: 1px solid #ddd; }\n        .convert-heading { font-size: 2em; margin-bottom: 20px; }\n        .markdown-input { width: 100%; height: 200px; margin-bottom: 10px; }\n        .html-output { border: 1px solid #eee; padding: 10px; margin-top: 10px; }\n    </style>\n</head>\n<body>\n    <div id=\"convert-page\" class=\"convert-container\">\n        <h1 id=\"convert-title\" class=\"convert-heading\">Markdown to HTML Converter</h1>\n        <form id=\"markdown-form\" method=\"post\">\n            {% csrf_token %}\n            <textarea id=\"markdown-text\" class=\"markdown-input\" name=\"markdown_text\" placeholder=\"Enter Markdown text here\"></textarea>\n            <button id=\"convert-button\" type=\"submit\">Convert</button>\n        </form>\n        {% if html_content %}\n            <div id=\"html-output\" class=\"html-output\">\n                <h2>HTML Output:</h2>\n                {{ html_content|safe }}\n            </div>\n        {% endif %}\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n    <style>\n        body { font-family: sans-serif; }\n        .home-container { max-width: 800px; margin: 20px auto; padding: 20px; border: 1px solid #ddd; }\n        .home-heading { font-size: 2em; margin-bottom: 20px; }\n        .home-navigation { margin-top: 20px; }\n        .home-navigation a { display: inline-block; margin-right: 10px; padding: 8px 12px; background-color: #f0f0f0; border: 1px solid #ccc; text-decoration: none; color: #333; }\n    </style>\n</head>\n<body>\n    <div id=\"home-page\" class=\"home-container\">\n        <h1 id=\"home-title\" class=\"home-heading\">Welcome to the Markdown Converter!</h1>\n        <p id=\"home-intro\">This is a simple web application that allows you to convert Markdown text to HTML.</p>\n        <nav id=\"home-nav\" class=\"home-navigation\">\n            <a id=\"convert-link\" href=\"{% url 'convert' %}\">Convert Markdown</a>\n            <a id=\"about-link\" href=\"{% url 'about' %}\">About</a>\n        </nav>\n    </div>\n</body>\n</html>"}, {"file": null, "path": "media", "code": ""}, {"file": "settings.py", "path": "project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.0/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.0/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Media files (Uploaded files)\nMEDIA_URL = '/media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()\n"}], "6": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n\nclass TodoList(models.Model):\n    \"\"\"\n    Todo List model\n    \"\"\"\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoList.\n        \"\"\"\n        return self.title\n\n\nclass TodoItem(models.Model):\n    \"\"\"\n    Todo Item model\n    \"\"\"\n    todolist = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n    def __str__(self):\n        \"\"\"\n        Returns the title of the TodoItem.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import (\n    HomeView, TodoListView, AnalysisView, delete_todo_item,\n    edit_todo_item, TodoItemView, delete_todo, edit_todo, complete_todo_item, create_todo_item, create_todo\n)\n\nurlpatterns = [\n    path('', HomeView.as_view(), name='home'),\n    path('todos/', TodoListView.as_view(), name='todo_list'),\n    path('todos/create/', create_todo, name='create_todo'),\n    path('todos/view_task/<int:pk>/', TodoItemView.as_view(), name='view_todo_item'),\n    path('todos/delete/<int:pk>/', delete_todo, name='delete_todo'),\n    path('todos/edit/<int:pk>/', edit_todo, name='edit_todo'),\n    path('items/delete/<int:pk>/', delete_todo_item, name='delete_todo_item'),\n    path('items/edit/<int:pk>/', edit_todo_item, name='edit_todo_item'),\n    path('items/completed/<int:pk>/', complete_todo_item, name='complete_todo_item'),\n    path('items/create/<int:todo_id>/', create_todo_item, name='create_todo_item'),\n    path('analysis/', AnalysisView.as_view(), name='analysis'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.views.generic import TemplateView, ListView\nfrom .models import TodoList, TodoItem\nfrom .forms import TodoListForm, TodoItemForm\n\n\nclass HomeView(TemplateView):\n    template_name = 'home.html'\n\n\nclass TodoListView(ListView):\n    template_name = 'todo_list.html'\n    model = TodoList\n    context_object_name = 'todo_lists'\n\n\ndef create_todo(request):\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list')\n    else:\n        form = TodoListForm()\n    return render(request, 'create_todo.html', {'form': form})\n\n\ndef delete_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    todo.delete()\n    return redirect('todo_list')\n\n\n\ndef edit_todo(request, pk):\n    todo = get_object_or_404(TodoList, pk=pk)\n    if request.method == 'POST':\n        form = TodoListForm(request.POST, instance=todo)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list')\n    else:\n        form = TodoListForm(instance=todo)\n    return render(request, 'edit_todo.html', {'form': form, 'todo': todo})\n\n\nclass TodoItemView(ListView):\n    template_name = 'tasks.html'\n    model = TodoItem\n    context_object_name = 'todo_items'\n\n    def get_queryset(self):\n        self.todolist = get_object_or_404(TodoList, pk=self.kwargs['pk'])\n        return TodoItem.objects.filter(todolist=self.todolist)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['todolist'] = self.todolist\n        return context\n\n\ndef create_todo_item(request, todo_id):\n    todolist = get_object_or_404(TodoList, pk=todo_id)\n    if request.method == 'POST':\n        form = TodoItemForm(request.POST)\n        if form.is_valid():\n            todo_item = form.save(commit=False)\n            todo_item.todolist = todolist\n            todo_item.save()\n            return redirect('view_todo_item', pk=todo_id)\n    else:\n        form = TodoItemForm()\n    return render(request, 'create_todo_item.html', {'form': form, 'todolist': todolist})\n\n\ndef delete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_list_id = todo_item.todolist.id\n    todo_item.delete()\n    return redirect('view_todo_item', pk=todo_list_id)\n\n\n\ndef edit_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    if request.method == 'POST':\n        form = TodoItemForm(request.POST, instance=todo_item)\n        if form.is_valid():\n            form.save()\n            return redirect('view_todo_item', pk=todo_item.todolist.id)\n    else:\n        form = TodoItemForm(instance=todo_item)\n    return render(request, 'edit_todo_item.html', {'form': form, 'todo_item': todo_item})\n\n\n\ndef complete_todo_item(request, pk):\n    todo_item = get_object_or_404(TodoItem, pk=pk)\n    todo_item.completed = not todo_item.completed\n    todo_item.save()\n    return redirect('view_todo_item', pk=todo_item.todolist.id)\n\n\nclass AnalysisView(TemplateView):\n    template_name = 'analysis.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        todo_items = TodoItem.objects.all()\n        total_tasks = todo_items.count()\n        completed_tasks = todo_items.filter(completed=True).count()\n\n        if total_tasks > 0:\n            completion_rate = (completed_tasks / total_tasks) * 100\n        else:\n            completion_rate = 0\n\n        context['completion_rate'] = completion_rate\n        return context"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-16 11:03\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='TodoList',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='TodoItem',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField(blank=True, null=True)),\n                ('completed', models.BooleanField(default=False)),\n                ('created_at', models.DateTimeField(auto_now_add=True)),\n                ('updated_at', models.DateTimeField(auto_now=True)),\n                ('todolist', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.todolist')),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "analysis.html", "path": "example_app/templates/analysis.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Task Analysis</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"analysis-container\" class=\"container\">\n        <h1>Task Completion Analysis</h1>\n        <p>Completion Rate: {{ completion_rate|floatformat:2 }}%</p>\n    </div>\n    <a id=\"home-link\" class=\"btn btn-primary\" href=\"{% url 'home' %}\">Return Home</a>\n</body>\n</html>"}, {"file": "edit_todo.html", "path": "example_app/templates/edit_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo List</title>\n</head>\n<body>\n    <div id=\"edit-todo-container\" class=\"container\">\n        <h1>Edit Todo List</h1>\n        <form id=\"edit-todo-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"save-button\" class=\"btn btn-primary\" type=\"submit\">Save</button>\n            <a id=\"cancel-link\" class=\"btn btn-secondary\" href=\"{% url 'todo_list' %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_todo_item.html", "path": "example_app/templates/edit_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Todo Item</title>\n</head>\n<body>\n    <div id=\"edit-todo-item-container\" class=\"container\">\n        <h1>Edit Todo Item</h1>\n        <form id=\"edit-todo-item-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"save-button\" class=\"btn btn-primary\" type=\"submit\">Save</button>\n            <a id=\"cancel-link\" class=\"btn btn-secondary\" href=\"{% url 'view_todo_item' pk=todo_item.todolist.id %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1>Welcome to the Todo App</h1>\n        <p>Manage your todo lists and tasks efficiently.</p>\n        <a id=\"todo-list-link\" class=\"btn btn-primary\" href=\"{% url 'todo_list' %}\">View Todo Lists</a>\n        <a id=\"analysis-link\" class=\"btn btn-info\" href=\"{% url 'analysis' %}\">View Analysis</a>\n    </div>\n</body>\n</html>"}, {"file": "tasks.html", "path": "example_app/templates/tasks.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List {{ todolist.title }}</title>\n</head>\n<body>\n    <div id=\"tasks-container\" class=\"container\">\n        <h1>Todo List: {{ todolist.title }}</h1>\n        <a id=\"back-link\" class=\"btn btn-secondary\" href=\"{% url 'todo_list' %}\">Back to Todo Lists</a>\n        <a id=\"create-item-link\" class=\"btn btn-success\" href=\"{% url 'create_todo_item' todo_id=todolist.id %}\">Create New Item</a>\n\n        <ul id=\"todo-item-list\" class=\"list-group\">\n            {% for item in todo_items %}\n                <li class=\"list-group-item\">\n                    <span {% if item.completed %}style=\"text-decoration: line-through;\"{% endif %}>{{ item.title }}</span>\n                    <a class=\"btn btn-sm btn-info\" href=\"{% url 'edit_todo_item' pk=item.pk %}\">Edit</a>\n                    <a class=\"btn btn-sm btn-danger\" href=\"{% url 'delete_todo_item' pk=item.pk %}\">Delete</a>\n                    <a class=\"btn btn-sm btn-warning\" href=\"{% url 'complete_todo_item' pk=item.pk %}\">{% if item.completed %}Incomplete{% else %}Complete{% endif %}</a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n</body>\n</html>"}, {"file": "todo_list.html", "path": "example_app/templates/todo_list.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo List</title>\n</head>\n<body>\n    <div id=\"todo-list-container\" class=\"container\">\n        <h1>Todo Lists</h1>\n        <a id=\"create-list-link\" class=\"btn btn-success\" href=\"{% url 'create_todo' %}\">Create New List</a>\n\n        <ul id=\"todo-list\" class=\"list-group\">\n            {% for todo in todo_lists %}\n                <li class=\"list-group-item\">\n                    <a href=\"{% url 'view_todo_item' pk=todo.pk %}\">{{ todo.title }}</a>\n                    <a class=\"btn btn-sm btn-info\" href=\"{% url 'edit_todo' pk=todo.pk %}\">Edit</a>\n                    <a class=\"btn btn-sm btn-danger\" href=\"{% url 'delete_todo' pk=todo.pk %}\">Delete</a>\n                </li>\n            {% endfor %}\n        </ul>\n\n        <a id=\"home-link\" class=\"btn btn-primary\" href=\"{% url 'home' %}\">Return Home</a>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'example_app' / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project.wsgi.application'\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.contrib import admin\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project.settings')\n\napplication = get_wsgi_application()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, TodoItem\n\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['title', 'description']\n\n\nclass TodoItemForm(forms.ModelForm):\n    class Meta:\n        model = TodoItem\n        fields = ['title', 'description', 'completed']"}, {"file": "create_todo.html", "path": "example_app/templates/create_todo.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Create Todo List</title>\n</head>\n<body>\n    <div id=\"create-todo-container\" class=\"container\">\n        <h1>Create New Todo List</h1>\n        <form id=\"create-todo-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"create-button\" class=\"btn btn-primary\" type=\"submit\">Create</button>\n            <a id=\"cancel-link\" class=\"btn btn-secondary\" href=\"{% url 'todo_list' %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "create_todo_item.html", "path": "example_app/templates/create_todo_item.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Create Todo Item</title>\n</head>\n<body>\n    <div id=\"create-todo-item-container\" class=\"container\">\n        <h1>Create New Todo Item for {{ todolist.title }}</h1>\n        <form id=\"create-todo-item-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"create-button\" class=\"btn btn-primary\" type=\"submit\">Create</button>\n            <a id=\"cancel-link\" class=\"btn btn-secondary\" href=\"{% url 'view_todo_item' pk=todolist.id %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}], "8": [{"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"\n    Main function to execute Django command line utilities.\n    \"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Ensure it's installed and available on PYTHONPATH.\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "forms.py", "path": "example_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\n\nclass EventForm(forms.ModelForm):\n    \"\"\"\n    Form for the Event model with custom DateTime field.\n    \"\"\"\n\n    class Meta:\n        model = Event\n        fields = ['title', 'description', 'datetime']\n        widgets = {\n            'datetime': forms.DateTimeInput(attrs={'type': 'datetime-local'})\n        }"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\nfrom django.utils import timezone\n\n\nclass Event(models.Model):\n    \"\"\"\n    Model representing an event with title, description, and dates.\n    \"\"\"\n\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    datetime = models.DateTimeField(default=timezone.now)\n    updated = models.DateTimeField(auto_now=True)\n    created = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        \"\"\"\n        String representation of the event.\n        \"\"\"\n        return self.title"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import HomePageView, AddEventView, EditEventView, DeleteEventView, ListEventsView, EventDetailsView, HelpView\n\n\nurlpatterns = [\n    \"\"\"\n    URL patterns for the application.\n    \"\"\"\n    path('', HomePageView.as_view(), name='home'),\n    path('calendar/add-event/', AddEventView.as_view(), name='add_event'),\n    path('calendar/edit-event/<int:event_id>/', EditEventView.as_view(), name='edit_event'),\n    path('calendar/delete-event/<int:event_id>/', DeleteEventView.as_view(), name='delete_event'),\n    path('calendar/view-events/', ListEventsView.as_view(), name='view_events'),\n    path('calendar/view-event-details/<int:event_id>/', EventDetailsView.as_view(), name='view_event_details'),\n    path('help/faq/', HelpView.faq, name='faq'),\n    path('help/user-guide/', HelpView.user_guide, name='user_guide'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "import calendar\nfrom datetime import datetime\n\nfrom django.db.models import Q\nfrom django.shortcuts import render, redirect, get_object_or_404\nfrom django.views import View\nfrom django.http import HttpResponse\nfrom django.contrib import messages\n\nfrom .forms import EventForm\nfrom .models import Event\n\n\nclass HomePageView(View):\n    \"\"\"\n    Handles rendering of the home page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Displays the calendar with events for the selected month and year.\n        \"\"\"\n        today = datetime.now()\n        month = today.month\n        year = today.year\n        cal = calendar.monthcalendar(year, month)\n\n        events = Event.objects.filter(\n            datetime__year=year,\n            datetime__month=month\n        )\n        return render(request, 'home.html', {'calendar': cal, 'month': month, 'year': year, 'events': events})\n\n\nclass AddEventView(View):\n    \"\"\"\n    Handles adding new events to the calendar.\n    \"\"\"\n\n    def get(self, request):\n        form = EventForm()\n        return render(request, 'add_event.html', {'form': form})\n\n    def post(self, request):\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Event added successfully!')\n            return redirect('view_events')\n        return render(request, 'add_event.html', {'form': form})\n\n\nclass EditEventView(View):\n    \"\"\"\n    Handles modifying existing events in the calendar.\n    \"\"\"\n\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventForm(instance=event)\n        return render(request, 'edit_event.html', {'form': form, 'event_id': event_id})\n\n    def post(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Event updated successfully!')\n            return redirect('view_event_details', event_id=event_id)\n        return render(request, 'edit_event.html', {'form': form, 'event_id': event_id})\n\n\nclass DeleteEventView(View):\n    \"\"\"\n    Handles deleting events from the calendar.\n    \"\"\"\n\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        return render(request, 'delete_event.html', {'event': event})\n\n    def post(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        event.delete()\n        messages.success(request, 'Event deleted successfully!')\n        return redirect('view_events')\n\n\nclass ListEventsView(View):\n    \"\"\"\n    Handles displaying and searching the list of events.\n    \"\"\"\n\n    def get(self, request):\n        query = request.GET.get('q')\n        if query:\n            events = Event.objects.filter(Q(title__icontains=query) | Q(description__icontains=query))\n        else:\n            events = Event.objects.all()\n        return render(request, 'view_events.html', {'events': events})\n\n\nclass EventDetailsView(View):\n    \"\"\"\n    Handles displaying detailed information about a selected event.\n    \"\"\"\n\n    def get(self, request, event_id):\n        event = get_object_or_404(Event, pk=event_id)\n        return render(request, 'view_event_details.html', {'event': event})\n\n\nclass HelpView:\n    \"\"\"\n    Handles the help and support sections.\n    \"\"\"\n\n    @staticmethod\n    def faq(request):\n        \"\"\"\n        Displays frequently asked questions.\n        \"\"\"\n        return render(request, 'faq.html')\n\n    @staticmethod\n    def user_guide(request):\n        \"\"\"\n        Offers a detailed guide on how to use the application.\n        \"\"\"\n        return render(request, 'user_guide.html')"}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 5.1.1 on 2024-10-30 08:50\n\nimport django.utils.timezone\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = []\n\n    operations = [\n        migrations.CreateModel(\n            name='Event',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('title', models.CharField(max_length=200)),\n                ('description', models.TextField()),\n                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),\n                ('updated', models.DateTimeField(auto_now=True)),\n                ('created', models.DateTimeField(auto_now_add=True)),\n            ],\n        ),\n    ]"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "add_event.html", "path": "example_app/templates/add_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Add Event</title>\n</head>\n<body>\n    <div id=\"add-event-container\" class=\"container\">\n        <h1 id=\"add-event-title\" class=\"title\">Add New Event</h1>\n        <form id=\"add-event-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"id_title\" class=\"form-label\">Title:</label>\n                {{ form.title }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_description\" class=\"form-label\">Description:</label>\n                {{ form.description }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_datetime\" class=\"form-label\">Date and Time:</label>\n                {{ form.datetime }}\n            </div>\n            <button type=\"submit\" id=\"add-event-submit\" class=\"btn btn-primary\">Add Event</button>\n        </form>\n        <a href=\"{% url 'view_events' %}\" id=\"back-to-list\" class=\"back-link\">Back to Event List</a>\n    </div>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "example_app/templates/edit_event.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Edit Event</title>\n</head>\n<body>\n    <div id=\"edit-event-container\" class=\"container\">\n        <h1 id=\"edit-event-title\" class=\"title\">Edit Event</h1>\n        <form id=\"edit-event-form\" method=\"post\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"id_title\" class=\"form-label\">Title:</label>\n                {{ form.title }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_description\" class=\"form-label\">Description:</label>\n                {{ form.description }}\n            </div>\n            <div class=\"form-group\">\n                <label for=\"id_datetime\" class=\"form-label\">Date and Time:</label>\n                {{ form.datetime }}\n            </div>\n            <button type=\"submit\" id=\"edit-event-submit\" class=\"btn btn-primary\">Update Event</button>\n        </form>\n        <a href=\"{% url 'view_event_details' event_id=event_id %}\" id=\"back-to-details\" class=\"back-link\">Back to Event Details</a>\n    </div>\n</body>\n</html>"}, {"file": "faq.html", "path": "example_app/templates/faq.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>FAQ</title>\n</head>\n<body>\n    <div id=\"faq-container\" class=\"container\">\n        <h1 id=\"faq-title\" class=\"title\">Frequently Asked Questions</h1>\n        <div id=\"faq-content\" class=\"content\">\n            <p class=\"question\" id=\"q1\"><strong>Question 1:</strong> How do I add a new event?</p>\n            <p class=\"answer\" id=\"a1\"><strong>Answer:</strong> Go to the 'Add Event' page and fill in the details.</p>\n            <p class=\"question\" id=\"q2\"><strong>Question 2:</strong> How do I edit an existing event?</p>\n            <p class=\"answer\" id=\"a2\"><strong>Answer:</strong> Click on the event in the list and then select 'Edit'.</p>\n        </div>\n        <a href=\"{% url 'home' %}\" id=\"back-to-home\" class=\"back-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home Page</title>\n    <style>\n        table {\n            width: 100%;\n            border-collapse: collapse;\n        }\n        th, td {\n            border: 1px solid #ddd;\n            padding: 8px;\n            text-align: center;\n        }\n        th {\n            background-color: #f2f2f2;\n        }\n        .calendar {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Event Calendar</h1>\n        <div id=\"calendar\" class=\"calendar\">\n            <table>\n                <thead>\n                    <tr>\n                        <th>Sun</th>\n                        <th>Mon</th>\n                        <th>Tue</th>\n                        <th>Wed</th>\n                        <th>Thu</th>\n                        <th>Fri</th>\n                        <th>Sat</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {% for week in calendar %}\n                    <tr>\n                        {% for day in week %}\n                        <td>\n                            {% if day != 0 %}\n                                {{ day }}\n                                {% for event in events %}\n                                    {% if event.datetime.day == day %}\n                                        <br><a href=\"{% url 'view_event_details' event_id=event.id %}\">{{ event.title }}</a>\n                                    {% endif %}\n                                {% endfor %}\n                            {% endif %}\n                        </td>\n                        {% endfor %}\n                    </tr>\n                    {% endfor %}\n                </tbody>\n            </table>\n        </div>\n        <a href=\"{% url 'add_event' %}\" id=\"add-event-link\" class=\"add-event-link\">Add New Event</a>\n        <a href=\"{% url 'view_events' %}\" id=\"view-events-link\" class=\"view-events-link\">View All Events</a>\n        <a href=\"{% url 'faq' %}\" id=\"faq-link\" class=\"help-link\">FAQ</a>\n        <a href=\"{% url 'user_guide' %}\" id=\"user-guide-link\" class=\"help-link\">User Guide</a>\n    </div>\n</body>\n</html>"}, {"file": "user_guide.html", "path": "example_app/templates/user_guide.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>User Guide</title>\n</head>\n<body>\n    <div id=\"user-guide-container\" class=\"container\">\n        <h1 id=\"user-guide-title\" class=\"title\">User Guide</h1>\n        <div id=\"user-guide-content\" class=\"content\">\n            <p id=\"guide-intro\" class=\"introduction\">Welcome to the Event Calendar application! This guide will help you navigate and use the application effectively.</p>\n            <h2 id=\"guide-add-event-header\" class=\"section-header\">Adding an Event</h2>\n            <p id=\"guide-add-event-steps\" class=\"steps\">To add a new event, click on the 'Add Event' link. Fill out the form with the event title, description, and date/time.  Then, click 'Add Event'.</p>\n            <h2 id=\"guide-view-event-header\" class=\"section-header\">Viewing Events</h2>\n            <p id=\"guide-view-event-steps\" class=\"steps\">To view all events, click the 'View All Events' link.  You can search for events by title or description using the search bar.</p>\n        </div>\n        <a href=\"{% url 'home' %}\" id=\"back-to-home\" class=\"back-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "view_events.html", "path": "example_app/templates/view_events.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Event List</title>\n</head>\n<body>\n    <div id=\"event-list-container\" class=\"container\">\n        <h1 id=\"event-list-title\" class=\"title\">Event List</h1>\n        <form id=\"search-form\" method=\"get\">\n            <input type=\"text\" id=\"search-input\" name=\"q\" placeholder=\"Search events\">\n            <button type=\"submit\" id=\"search-button\" class=\"btn btn-primary\">Search</button>\n        </form>\n        <ul id=\"event-list\" class=\"event-list\">\n            {% for event in events %}\n            <li class=\"event-item\">\n                <a href=\"{% url 'view_event_details' event_id=event.id %}\" class=\"event-link\">{{ event.title }}</a>\n            </li>\n            {% endfor %}\n        </ul>\n        <a href=\"{% url 'add_event' %}\" id=\"add-event-link\" class=\"add-event-link\">Add New Event</a>\n        <a href=\"{% url 'home' %}\" id=\"back-to-home\" class=\"back-link\">Back to Home</a>\n    </div>\n</body>\n</html>"}, {"file": "view_event_details.html", "path": "example_app/templates/view_event_details.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Event Details</title>\n</head>\n<body>\n    <div id=\"event-details-container\" class=\"container\">\n        <h1 id=\"event-details-title\" class=\"title\">Event Details</h1>\n        <h2 id=\"event-title\" class=\"event-title\">{{ event.title }}</h2>\n        <p id=\"event-description\" class=\"event-description\">{{ event.description }}</p>\n        <p id=\"event-datetime\" class=\"event-datetime\">Date/Time: {{ event.datetime }}</p>\n        <a href=\"{% url 'edit_event' event_id=event.id %}\" id=\"edit-event-link\" class=\"edit-event-link\">Edit Event</a>\n        <a href=\"{% url 'delete_event' event_id=event.id %}\" id=\"delete-event-link\" class=\"delete-event-link\">Delete Event</a>\n        <a href=\"{% url 'view_events' %}\" id=\"back-to-list\" class=\"back-link\">Back to Event List</a>\n    </div>\n</body>\n</html>"}, {"file": "asgi.py", "path": "project_name/asgi.py", "code": "import os\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "project_name/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'project_name.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'project_name.wsgi.application'\nASGI_APPLICATION = 'project_name.asgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'"}, {"file": "urls.py", "path": "project_name/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\n\nurlpatterns = [\n    \"\"\"\n    URL patterns for the project.\n    \"\"\"\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "project_name/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'project_name.settings')\n\napplication = get_asgi_application()"}, {"file": "__init__.py", "path": "project_name/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "14": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "__init__.py", "path": "__init__.py", "code": ""}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \"\"\"\n    Class-based view to render the Hello World page.\n    \"\"\"\n\n    def get(self, request):\n        \"\"\"\n        Handle GET request to display Hello World.\n        \"\"\"\n        return render(request, 'hello_world.html')\n"}, {"file": "style.css", "path": "example_app/static/css/style.css", "code": "body {\n    font-family: Arial, sans-serif;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n    background-color: #f0f0f0;\n}\n\n.container {\n    text-align: center;\n}\n\n.hello-heading {\n    color: #333;\n}\n"}, {"file": "hello_world.html", "path": "example_app/templates/hello_world.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'css/style.css' %}\">\n</head>\n<body id=\"body\" class=\"body\">\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"hello-heading\" class=\"hello-heading\">Hello, World!</h1>\n    </div>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your-secret-key'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\n\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path\nfrom example_app.views import HelloWorldView\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', HelloWorldView.as_view(), name='hello_world'),\n]\n"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "myproject/__init__.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}], "15": [{"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\nif __name__ == '__main__':\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\n# Models for the application\n# All models should inherit from models.Model\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    user = models.ForeignKey('auth.User', related_name='transactions_user', on_delete=models.CASCADE)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date = models.DateTimeField()\n    description = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'{self.date} - {self.category} - {self.amount}'\n\n\nclass SupportRequest(models.Model):\n    user = models.ForeignKey('auth.User', related_name='support_request_user', on_delete=models.CASCADE)\n    name = models.CharField(max_length=100)\n    email = models.EmailField()\n    message = models.TextField()\n    submitted_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path\nfrom .views import home, helloworld\n\nurlpatterns = [\n    path('', home, name='home'),\n    path('helloworld/', helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "example_app/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    \"\"\"\n    Renders the home page.\n    \"\"\"\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    \"\"\"\n    Renders the hello world page.\n    \"\"\"\n    return render(request, 'helloworld.html')\n"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "0001_initial.py", "path": "example_app/migrations/0001_initial.py", "code": "# Generated by Django 4.2.16 on 2024-11-12 15:46\n\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100, unique=True)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Transaction',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('date', models.DateTimeField()),\n                ('description', models.TextField(blank=True, null=True)),\n                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='example_app.category')),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='SupportRequest',\n            fields=[\n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=100)),\n                ('email', models.EmailField(max_length=254)),\n                ('message', models.TextField()),\n                ('submitted_at', models.DateTimeField(auto_now_add=True)),\n                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_request_user', to=settings.AUTH_USER_MODEL)),\n            ],\n        ),\n    ]\n"}, {"file": "__init__.py", "path": "example_app/migrations/__init__.py", "code": ""}, {"file": "styles.css", "path": "example_app/static/css/styles.css", "code": "body {\n    font-family: Arial, sans-serif;\n    margin: 0;\n    padding: 0;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f8ff;\n}\n\nh1 {\n    font-size: 3rem;\n    color: #333;\n}\n\n.home-button {\n    background-color: #4CAF50;\n    border: none;\n    color: white;\n    padding: 15px 32px;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 16px;\n    margin-top: 20px;\n    cursor: pointer;\n    border-radius: 5px;\n}\n"}, {"file": "helloworld.html", "path": "example_app/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"HelloWorld page.\">\n    <title>Hello World</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body class=\"hello-world-body\" id=\"hello-world-body\">\n    <h1 class=\"hello-world-title\" id=\"hello-world-title\">Hello, World!</h1>\n</body>\n</html>\n"}, {"file": "home.html", "path": "example_app/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Home</title>\n    {% load static %}\n    <link rel=\"stylesheet\" href=\"{% static 'css/styles.css' %}\">\n</head>\n<body class=\"home-body\" id=\"home-body\">\n    <h1 class=\"home-title\" id=\"home-title\">Welcome Home!</h1>\n    <a href=\"/helloworld/\" class=\"home-button\" id=\"home-button\">Go to Hello World</a>\n</body>\n</html>\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'example_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n"}, {"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}], "16": [{"file": "main.py", "path": "main.py", "code": "import os\nimport pandas as pd\n\n# File paths\nINPUT_FILE = \"subjects.xlsx\"\nOUTPUT_FILE = \"processed_subjects.xlsx\"\n\n\ndef check_file_exists(file_path):\n    \"\"\"\n    Check if the specified file path exists.\n    \"\"\"\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"Error: File '{file_path}' not found.\")\n\n\ndef check_file_format(file_path):\n    \"\"\"\n    Check if the file is in Excel format.\n    \"\"\"\n    if not file_path.endswith(\".xlsx\") and not file_path.endswith(\".xls\"):\n        raise ValueError(\"Error: Input file must be in Excel format (.xlsx or .xls).\")\n\n\ndef validate_data(df):\n    \"\"\"\n    Validate the DataFrame for required columns and values.\n    \"\"\"\n    required_columns = [\"Subject Code\", \"Subject Name\", \"Credits\"]\n    for col in required_columns:\n        if col not in df.columns:\n            raise ValueError(f\"Error: Required column '{col}' is missing.\")\n    \n    # Add more validation as needed, e.g., checking data types, null values etc.\n\n\ndef process_subjects(input_file, output_file):\n    \"\"\"\n    Process the subjects from input Excel file and save the output to another Excel file.\n    \"\"\"\n    check_file_exists(input_file)\n    check_file_format(input_file)\n\n    try:\n        df = pd.read_excel(input_file)\n    except Exception as e:\n        raise Exception(f\"Error reading Excel file: {e}\")\n\n    validate_data(df)\n\n    # Example processing: Add a new column 'Tuition Fee' (replace with actual processing)\n    df[\"Tuition Fee\"] = df[\"Credits\"] * 100  # Example calculation\n\n    try:\n        df.to_excel(output_file, index=False)\n        print(f\"Successfully processed and saved data to '{output_file}'.\")\n    except Exception as e:\n        raise Exception(f\"Error writing to Excel file: {e}\")\n\n\ndef main():\n    \"\"\"\n    Main execution function.\n    \"\"\"\n    try:\n        process_subjects(INPUT_FILE, OUTPUT_FILE)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"}, {"file": "subjects.xlsx", "path": "subjects.xlsx", "code": "Subject Code,Subject Name,Credits\nCS101,Introduction to Programming,3\nMA101,Calculus I,4\nPH101,Physics I,4\nEN101,English Composition,3"}], "17": [{"file": "17-stdanswer.py", "path": "17-stdanswer.py", "code": "import os\nimport pandas as pd\nimport statsmodels.api as sm\n\n# File paths\ninput_file = \"Gamedata.xlsx\"\noutput_file = \"Logistic.xlsx\"\n\ndef read_and_validate_data(input_file):\n    \"\"\"\n    Read the dataset and ensure all columns are numeric.\n    Raise an error if any missing values (NaN) are found.\n    \"\"\"\n    data = pd.read_excel(input_file)\n    if data.isnull().any().any():\n        raise ValueError(\"Missing values (NaN) found in the dataset.\")\n    for col in data.columns:\n        if data[col].dtype not in ['int64', 'float64']:\n            try:\n                data[col] = pd.to_numeric(data[col])\n            except ValueError:\n                raise ValueError(f\"Column '{col}' is not numeric and cannot be converted.\")\n    return data\n\n\ndef add_lagged_dependent_variable(data, target_column):\n    \"\"\"\n    Add a one-period lag for the dependent variable and drop missing rows.\n    \"\"\"\n    data['Lagged_' + target_column] = data[target_column].shift(1)\n    data = data.dropna()\n    return data\n\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    \"\"\"\n    Prepare the feature matrix (X) and target vector (y).\n    \"\"\"\n    y = data[target_column]\n    X = data.drop(columns=[target_column])\n    return X, y\n\n\ndef build_logistic_model(X, y):\n    \"\"\"\n    Build and fit a logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)\n    model = sm.Logit(y, X)\n    result = model.fit()\n    return result\n\n\ndef save_summary_to_excel(result, output_file):\n    \"\"\"\n    Save the logistic regression summary to an Excel file.\n    \"\"\"\n    summary = result.summary()\n    df = pd.DataFrame(summary.data, columns=summary.columns)\n    df.to_excel(output_file, index=False)\n\n\ndef main(input_file, output_file):\n    \"\"\"\n    Execute all steps to run the logistic regression analysis.\n    \"\"\"\n    try:\n        data = read_and_validate_data(input_file)\n        target_column = 'Win'\n        data = add_lagged_dependent_variable(data, target_column)\n        X, y = prepare_features_and_target(data, target_column, 'Lagged_' + target_column)\n        result = build_logistic_model(X, y)\n        save_summary_to_excel(result, output_file)\n        print(f\"Logistic regression analysis completed. Results saved to {output_file}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    main(input_file, output_file)"}, {"file": "Gamedata.xlsx", "path": "data/Gamedata.xlsx", "code": "Dummy data for the excel file."}, {"file": "dummy_data_generation.py", "path": "dummy_data_generation.py", "code": "import pandas as pd\nimport numpy as np\n\n# Number of rows\nnum_rows = 100\n\n# Generate data\ndata = {\n    'Team_A_Score': np.random.randint(50, 120, num_rows),\n    'Team_B_Score': np.random.randint(50, 120, num_rows),\n    'Possession_A': np.random.uniform(0.4, 0.6, num_rows),\n    'Shots_A': np.random.randint(10, 30, num_rows),\n    'Shots_B': np.random.randint(10, 30, num_rows),\n    'Fouls_A': np.random.randint(5, 20, num_rows),\n    'Fouls_B': np.random.randint(5, 20, num_rows),\n    'Win': np.random.randint(0, 2, num_rows)  # 0 for Team B wins, 1 for Team A wins\n}\n\n# Convert to DataFrame\ndf = pd.DataFrame(data)\n\n# Ensure Win is 0 or 1 based on scores (Team A Win/Loss)\ndf['Win'] = np.where(df['Team_A_Score'] > df['Team_B_Score'], 1, 0)\n\n# Save to Excel\ndf.to_excel('Gamedata.xlsx', index=False)\n\nprint(\"Dummy Gamedata.xlsx file created.\")"}], "18": [{"file": "main.py", "path": "main.py", "code": "import os\nimport textwrap\n\n# Directory structure and game items\nROOT_DIR = os.path.sep\nDIRECTORY_STRUCTURE = {\n    ROOT_DIR: [\"home\", \"forest\", \"cave\"],\n    os.path.join(ROOT_DIR, \"home\"): [\"kitchen\", \"bedroom\"],\n    os.path.join(ROOT_DIR, \"forest\"): [\"clearing\", \"deep_forest\"],\n    os.path.join(ROOT_DIR, \"cave\"): [\"treasure_room\"],\n    os.path.join(ROOT_DIR, \"home\", \"kitchen\"): [],\n    os.path.join(ROOT_DIR, \"home\", \"bedroom\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"clearing\"): [],\n    os.path.join(ROOT_DIR, \"forest\", \"deep_forest\"): [],\n    os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): [],\n}\nITEMS = {os.path.join(ROOT_DIR, \"cave\", \"treasure_room\"): \"golden_key\"}\n\nclass BashCrawl:\n    def __init__(self):\n        \"\"\"\n        Initializes the BashCrawl game with the root directory and available commands.\n        \"\"\"\n        self.current_dir = ROOT_DIR\n        self.directory_structure = DIRECTORY_STRUCTURE\n        self.items = ITEMS.copy()  # Copy to allow multiple game instances\n        self.inventory = []\n        self.commands = [\"ls\", \"cd\", \"inventory\", \"help\", \"quit\"]\n\n    def print_main_menu(self):\n        \"\"\"\n        Displays the main menu options to the player.\n        \"\"\"\n        print(\"\\nWelcome to BashCrawl!\\n\")\n        print(\"1. Play Game\")\n        print(\"2. Help\")\n        print(\"3. Quit\")\n\n    def main_menu_help(self):\n        \"\"\"\n        Provide help information for the main menu.\n        \"\"\"\n        print(\"\\nBashCrawl Main Menu Help:\\n\")\n        print(\"1 - Play Game: Starts the BashCrawl adventure.\\n\")\n        print(\"2 - Help: Displays this help message.\\n\")\n        print(\"3 - Quit: Exits the game.\\n\")\n\n    def print_game_help(self):\n        \"\"\"\n        Display in-game command help to the player.\n        \"\"\"\n        print(\"\\nIn-Game Commands:\\n\")\n        print(\"ls: Lists the contents of the current directory.\\n\")\n        print(\"cd <directory>: Changes the current directory to the specified directory.\\n\")\n        print(\"inventory: Checks and displays the player's inventory.\\n\")\n        print(\"help: Displays this help message.\\n\")\n        print(\"quit: Exits the game.\\n\")\n\n    def list_contents(self):\n        \"\"\"\n        List the contents of the current directory.\n        \"\"\"\n        contents = self.directory_structure.get(self.current_dir, [])\n        if contents:\n            print(\"\\nContents of {}:\\n\".format(self.current_dir))\n            for item in contents:\n                print(item)\n        else:\n            print(\"\\n{} is empty.\\n\".format(self.current_dir))\n\n    def change_directory(self, target_dir):\n        \"\"\"\n        Change the current directory to the specified target directory.\n        \"\"\"\n        new_dir = os.path.join(self.current_dir, target_dir)\n        if new_dir in self.directory_structure:\n            self.current_dir = new_dir\n            print(\"\\nMoved to {}.\\n\".format(self.current_dir))\n\n            # Check for item upon entering new directory\n            if self.current_dir in self.items:\n                item = self.items[self.current_dir]\n                print(f\"You found a {item}! It has been added to your inventory.\\n\")\n                self.inventory.append(item)\n                del self.items[self.current_dir]\n\n        elif target_dir == '..':\n            if self.current_dir != ROOT_DIR:\n                parts = self.current_dir.split(os.path.sep)\n                self.current_dir = os.path.sep.join(parts[:-1]) or ROOT_DIR\n                print(f\"Moved to {self.current_dir}.\\n\")\n            else:\n                print(\"\\nYou are already at the root directory.\\n\")\n        else:\n            print(\"\\nInvalid directory.\\n\")\n\n    def check_inventory(self):\n        \"\"\"\n        Check and display the player's inventory.\n        \"\"\"\n        if self.inventory:\n            print(\"\\nInventory:\\n\")\n            for item in self.inventory:\n                print(item)\n        else:\n            print(\"\\nInventory is empty.\\n\")\n\n    def play(self):\n        \"\"\"\n        Start the game loop and process player commands.\n        \"\"\"\n        print(\"\\nYou are starting in the {}.\\n\".format(self.current_dir))\n\n        while True:\n            command = input(\"> \").lower().split()\n            if not command:\n                continue\n\n            action = command[0]\n\n            if action == \"ls\":\n                self.list_contents()\n            elif action == \"cd\":\n                if len(command) > 1:\n                    target_dir = command[1]\n                    self.change_directory(target_dir)\n                else:\n                    print(\"\\ncd requires a directory name.\\n\")\n            elif action == \"inventory\":\n                self.check_inventory()\n            elif action == \"help\":\n                self.print_game_help()\n            elif action == \"quit\":\n                print(\"\\nThanks for playing!\\n\")\n                break\n            else:\n                print(\"\\nInvalid command. Type 'help' for a list of commands.\\n\")\n\n    def main_menu(self):\n        \"\"\"\n        Display and manage interactions with the main menu.\n        \"\"\"\n        while True:\n            self.print_main_menu()\n            choice = input(\"Enter your choice: \")\n\n            if choice == \"1\":\n                self.play()\n            elif choice == \"2\":\n                self.main_menu_help()\n            elif choice == \"3\":\n                print(\"\\nExiting BashCrawl.\\n\")\n                break\n            else:\n                print(\"\\nInvalid choice. Please try again.\\n\")\n\n\ndef main():\n    \"\"\"\n    Main function to initiate BashCrawl game.\n    \"\"\"\n    game = BashCrawl()\n    game.main_menu()\n\n\nif __name__ == \"__main__\":\n    main()\n"}]}