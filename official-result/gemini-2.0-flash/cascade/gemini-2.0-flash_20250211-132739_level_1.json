{"1": [{"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\nclass BMI(models.Model):\n    height = models.FloatField()\n    weight = models.FloatField()\n    height_unit = models.CharField(max_length=20)\n    weight_unit = models.CharField(max_length=20)\n    bmi_value = models.FloatField(null=True, blank=True)\n    bmi_category = models.CharField(max_length=50, null=True, blank=True)\n    calculation_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'BMI Calculation on {self.calculation_date}'"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nfrom .models import BMI\n\ndef calculate_bmi(request):\n    if request.method == 'POST':\n        height = float(request.POST.get('height'))\n        weight = float(request.POST.get('weight'))\n        height_unit = request.POST.get('height_unit')\n        weight_unit = request.POST.get('weight_unit')\n\n        # Conversion and BMI Calculation logic (Implementation required here)\n        # Example (Needs proper unit conversion):\n        if height_unit == 'cm':\n            height_meters = height / 100\n        else:\n            height_meters = (float(request.POST.get('feet')) * 0.3048) + (float(request.POST.get('inches')) * 0.0254) # Example conversion.\n\n        if weight_unit == 'kg':\n            weight_kg = weight\n        else:\n            weight_kg = weight * 0.453592 # Example conversion\n\n        bmi_value = weight_kg / (height_meters ** 2)\n\n        # BMI Interpretation logic (Implementation required here)\n        if bmi_value < 18.5:\n            bmi_category = 'Underweight'\n        elif 18.5 <= bmi_value < 25:\n            bmi_category = 'Normal weight'\n        elif 25 <= bmi_value < 30:\n            bmi_category = 'Overweight'\n        else:\n            bmi_category = 'Obese'\n\n        bmi_record = BMI(height=height, weight=weight, height_unit=height_unit, weight_unit=weight_unit, bmi_value=bmi_value, bmi_category=bmi_category)\n        bmi_record.save()\n\n        return JsonResponse({'bmi': bmi_value, 'category': bmi_category})\n    else:\n        return render(request, 'bmi_calculator/bmi_form.html')"}, {"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('calculate/', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\nclass BMIForm(forms.Form):\n    height = forms.FloatField(label='Height')\n    weight = forms.FloatField(label='Weight')\n    height_unit = forms.ChoiceField(label='Height Units', choices=[('cm', 'Centimeters'), ('ft_in', 'Feet and Inches')])\n    weight_unit = forms.ChoiceField(label='Weight Units', choices=[('kg', 'Kilograms'), ('lbs', 'Pounds')])\n    feet = forms.IntegerField(label='Feet', required=False)\n    inches = forms.FloatField(label='Inches', required=False)\n\n    def clean(self):\n        cleaned_data = super().clean()\n        height_unit = cleaned_data.get('height_unit')\n        if height_unit == 'ft_in':\n            feet = cleaned_data.get('feet')\n            inches = cleaned_data.get('inches')\n            if feet is None or inches is None:\n                raise forms.ValidationError(\"Please enter both feet and inches.\")\n\n        return cleaned_data"}, {"file": "bmi_form.html", "path": "bmi_calculator/templates/bmi_calculator/bmi_form.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n\n    <style>\n       .form-group {\n           margin-bottom: 15px;\n       }\n       .form-label {\n           display: block;\n           margin-bottom: 5px;\n       }\n    </style>\n\n    <script>\n        $(document).ready(function() {\n            $(\"#bmiForm\").submit(function(event) {\n                event.preventDefault();\n                $.ajax({\n                    type: \"POST\",\n                    url: \"{% url 'calculate_bmi' %}\",\n                    data: $(this).serialize(),\n                    success: function(data) {\n                        $(\"#bmiResult\").html(\"BMI: \" + data.bmi.toFixed(2) + \"<br>Category: \" + data.category);\n                    }\n                });\n            });\n\n            $(\"#height_unit\").change(function(){\n                if($(this).val() == \"ft_in\"){\n                    $(\"#feet_inches\").show();\n                    $(\"#height\").hide();\n                } else {\n                    $(\"#feet_inches\").hide();\n                    $(\"#height\").show();\n                }\n            });\n\n            $(\"#resetButton\").click(function(){\n                $(\"#bmiForm\")[0].reset();\n                $(\"#bmiResult\").empty();\n                $(\"#feet_inches\").hide();\n                $(\"#height\").show();\n            });\n\n            // Initialize display based on initial selection\n            if ($(\"#height_unit\").val() == \"ft_in\") {\n                $(\"#feet_inches\").show();\n                $(\"#height\").hide();\n            } else {\n                $(\"#feet_inches\").hide();\n                $(\"#height\").show();\n            }\n        });\n    </script>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"main-title\">BMI Calculator</h1>\n        <form id=\"bmiForm\" class=\"bmi-form\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"height\" class=\"form-label\">Height:</label>\n                <input type=\"number\" id=\"height\" name=\"height\" class=\"form-control\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"height_unit\" class=\"form-label\">Height Units:</label>\n                <select id=\"height_unit\" name=\"height_unit\" class=\"form-control\">\n                    <option value=\"cm\">Centimeters</option>\n                    <option value=\"ft_in\">Feet and Inches</option>\n                </select>\n            </div>\n            <div id=\"feet_inches\" class=\"form-group\" style=\"display:none;\">\n                <label class=\"form-label\">Feet: <input type=\"number\" id=\"feet\" name=\"feet\" class=\"form-control\"> Inches: <input type=\"number\" id=\"inches\" name=\"inches\" class=\"form-control\"></label>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"weight\" class=\"form-label\">Weight:</label>\n                <input type=\"number\" id=\"weight\" name=\"weight\" class=\"form-control\">\n            </div>\n            <div class=\"form-group\">\n                <label for=\"weight_unit\" class=\"form-label\">Weight Units:</label>\n                <select id=\"weight_unit\" name=\"weight_unit\" class=\"form-control\">\n                    <option value=\"kg\">Kilograms</option>\n                    <option value=\"lbs\">Pounds</option>\n                </select>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Calculate BMI</button>\n            <button type=\"button\" id=\"resetButton\" class=\"btn btn-secondary\">Reset</button>\n        </form>\n        <div id=\"bmiResult\" class=\"bmi-result\"></div>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "bmi_calculator_project/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'bmi_calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n"}, {"file": "urls.py", "path": "bmi_calculator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('bmi/', include('bmi_calculator.urls')),\n]"}, {"file": "wsgi.py", "path": "bmi_calculator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "bmi_calculator/admin.py", "code": "from django.contrib import admin\nfrom .models import BMI\n\nadmin.site.register(BMI)"}, {"file": "__init__.py", "path": "bmi_calculator/__init__.py", "code": ""}, {"file": "__init__.py", "path": "bmi_calculator_project/__init__.py", "code": ""}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\nclass Currency(models.Model):\n    code = models.CharField(max_length=3, unique=True)\n    name = models.CharField(max_length=50)\n    symbol = models.CharField(max_length=5, blank=True, null=True)\n\n    def __str__(self):\n        return self.code\n\nclass ExchangeRate(models.Model):\n    from_currency = models.ForeignKey(Currency, related_name='from_currency', on_delete=models.CASCADE)\n    to_currency = models.ForeignKey(Currency, related_name='to_currency', on_delete=models.CASCADE)\n    rate = models.DecimalField(max_digits=10, decimal_places=6)\n\n    class Meta:\n        unique_together = ('from_currency', 'to_currency')\n\n    def __str__(self):\n        return f'{self.from_currency} to {self.to_currency}: {self.rate}'"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\nfrom .models import ExchangeRate\n\nclass ConversionForm(forms.Form):\n    from_currency = forms.CharField(max_length=3)\n    to_currency = forms.CharField(max_length=3)\n    amount = forms.DecimalField(max_digits=10, decimal_places=2)\n\nclass AdminRateUpdateForm(forms.ModelForm):\n    class Meta:\n        model = ExchangeRate\n        fields = ['rate']\n\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self.fields['rate'].label = f\"Rate for {kwargs['instance'].from_currency} to {kwargs['instance'].to_currency}\""}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom .forms import ConversionForm, AdminRateUpdateForm\nfrom .models import Currency, ExchangeRate\n\ndef homepage(request):\n    if request.method == 'POST':\n        form = ConversionForm(request.POST)\n        if form.is_valid():\n            from_currency_code = form.cleaned_data['from_currency']\n            to_currency_code = form.cleaned_data['to_currency']\n            amount = form.cleaned_data['amount']\n\n            try:\n                from_currency = Currency.objects.get(code=from_currency_code)\n                to_currency = Currency.objects.get(code=to_currency_code)\n                exchange_rate = ExchangeRate.objects.get(from_currency=from_currency, to_currency=to_currency)\n                converted_amount = amount * exchange_rate.rate\n                rate = exchange_rate.rate\n                context = {\n                    'form': form,\n                    'converted_amount': converted_amount,\n                    'exchange_rate': rate,\n                    'from_currency': from_currency_code,\n                    'to_currency': to_currency_code,\n                    'amount': amount,\n                }\n\n                return render(request, 'currency_converter/homepage.html', context)\n\n            except (Currency.DoesNotExist, ExchangeRate.DoesNotExist):\n                return HttpResponse(\"Currency or Exchange Rate not found\") #Better Error Handling\n\n    else:\n        form = ConversionForm()\n    return render(request, 'currency_converter/homepage.html', {'form': form})\n\ndef about(request):\n    return render(request, 'currency_converter/about.html')\n\ndef admin_view(request):\n    exchange_rates = ExchangeRate.objects.all()\n    return render(request, 'currency_converter/admin.html', {'exchange_rates': exchange_rates})\n\ndef update_rate(request, pk):\n    exchange_rate = get_object_or_404(ExchangeRate, pk=pk)\n    if request.method == 'POST':\n        form = AdminRateUpdateForm(request.POST, instance=exchange_rate)\n        if form.is_valid():\n            form.save()\n            return redirect('admin_view')  # Redirect to admin view\n    else:\n        form = AdminRateUpdateForm(instance=exchange_rate)\n    return render(request, 'currency_converter/update_rate.html', {'form': form, 'exchange_rate': exchange_rate})"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('about/', views.about, name='about'),\n    path('admin/', views.admin_view, name='admin_view'),\n    path('admin/update/<int:pk>/', views.update_rate, name='update_rate'),\n]"}, {"file": "settings.py", "path": "currency_converter_project/settings.py", "code": "# Existing settings file content\n\nimport os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'currency_converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'currency_converter_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [BASE_DIR / 'templates'],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'currency_converter_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [BASE_DIR / 'static']\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "urls.py", "path": "currency_converter_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('currency_converter.urls')),\n]"}, {"file": "admin.py", "path": "currency_converter/admin.py", "code": "from django.contrib import admin\nfrom .models import Currency, ExchangeRate\n\nadmin.site.register(Currency)\nadmin.site.register(ExchangeRate)"}, {"file": "homepage.html", "path": "currency_converter/templates/currency_converter/homepage.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Currency Converter</title>\n</head>\n<body>\n    <div id=\"homepage-container\" class=\"container\">\n        <h1 id=\"homepage-title\" class=\"title\">Currency Converter</h1>\n        <form id=\"conversion-form\" class=\"form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"convert-button\" class=\"button\" type=\"submit\">Convert</button>\n        </form>\n\n        {% if converted_amount %}\n            <div id=\"result-container\" class=\"result\">\n                <p id=\"converted-amount\" class=\"converted-amount\">{{ amount }} {{ from_currency }} = {{ converted_amount }} {{ to_currency }}</p>\n                <p id=\"exchange-rate\" class=\"exchange-rate\">Exchange Rate: {{ exchange_rate }}</p>\n            </div>\n        {% endif %}\n        <div id=\"links-container\" class=\"links\">\n            <a id=\"about-link\" class=\"link\" href=\"{% url 'about' %}\">About</a>\n            <a id=\"admin-link\" class=\"link\" href=\"{% url 'admin_view' %}\">Admin</a>\n        </div>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "currency_converter/templates/currency_converter/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Currency Converter</h1>\n        <p id=\"about-description\" class=\"description\">This is a simple currency converter application.</p>\n        <a id=\"home-link\" class=\"link\" href=\"{% url 'homepage' %}\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "admin.html", "path": "currency_converter/templates/currency_converter/admin.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Admin</title>\n</head>\n<body>\n    <div id=\"admin-container\" class=\"container\">\n        <h1 id=\"admin-title\" class=\"title\">Admin Panel</h1>\n        <h2 id=\"exchange-rates-title\" class=\"subtitle\">Exchange Rates</h2>\n        <ul id=\"exchange-rates-list\" class=\"list\">\n            {% for rate in exchange_rates %}\n                <li class=\"list-item\">\n                    <span class=\"rate-info\">{{ rate.from_currency }} to {{ rate.to_currency }}: {{ rate.rate }}</span>\n                    <a class=\"update-link\" href=\"{% url 'update_rate' pk=rate.pk %}\">Update Rate</a>\n                </li>\n            {% endfor %}\n        </ul>\n        <a id=\"home-link\" class=\"link\" href=\"{% url 'homepage' %}\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "update_rate.html", "path": "currency_converter/templates/currency_converter/update_rate.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Update Rate</title>\n</head>\n<body>\n    <div id=\"update-rate-container\" class=\"container\">\n        <h1 id=\"update-rate-title\" class=\"title\">Update Exchange Rate</h1>\n        <p id=\"updating-rate-info\" class=\"info\">Updating rate for {{ exchange_rate.from_currency }} to {{ exchange_rate.to_currency }}</p>\n        <form id=\"update-rate-form\" class=\"form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"save-changes-button\" class=\"button\" type=\"submit\">Save Changes</button>\n        </form>\n        <a id=\"admin-link\" class=\"link\" href=\"{% url 'admin_view' %}\">Back to Admin</a>\n    </div>\n</body>\n</html>"}, {"file": "wsgi.py", "path": "currency_converter_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "__init__.py", "path": "currency_converter/migrations/__init__.py", "code": ""}, {"file": "__init__.py", "path": "currency_converter/__init__.py", "code": ""}, {"file": "__init__.py", "path": "currency_converter_project/__init__.py", "code": ""}, {"file": "requirements.txt", "path": "requirements.txt", "code": "Django>=4.0"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'currency_converter_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "style.css", "path": "static/style.css", "code": "/* Basic styling - Feel free to customize */\n\nbody {\n    font-family: sans-serif;\n    margin: 0;\n    padding: 0;\n    background-color: #f4f4f4;\n}\n\n.container {\n    width: 80%;\n    margin: 20px auto;\n    padding: 20px;\n    background-color: #fff;\n    border-radius: 8px;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\n.title {\n    text-align: center;\n    color: #333;\n}\n\n.subtitle {\n    color: #555;\n    margin-bottom: 10px;\n}\n\n.form p {\n    margin: 10px 0;\n}\n\n.form label {\n    display: block;\n    margin-bottom: 5px;\n    font-weight: bold;\n}\n\n.form input[type=\"text\"], .form input[type=\"number\"] {\n    width: 100%;\n    padding: 8px;\n    margin-bottom: 10px;\n    border: 1px solid #ccc;\n    border-radius: 4px;\n    box-sizing: border-box;\n}\n\n.button {\n    background-color: #007bff;\n    color: white;\n    padding: 10px 20px;\n    border: none;\n    border-radius: 4px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n}\n\n.button:hover {\n    background-color: #0056b3;\n}\n\n.result {\n    margin-top: 20px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background-color: #f9f9f9;\n}\n\n.links a {\n    display: inline-block;\n    margin-top: 10px;\n    margin-right: 15px;\n    color: #007bff;\n    text-decoration: none;\n}\n\n.links a:hover {\n    text-decoration: underline;\n}\n\n.list {\n    list-style: none;\n    padding: 0;\n}\n\n.list-item {\n    margin-bottom: 10px;\n    padding: 10px;\n    border: 1px solid #ddd;\n    border-radius: 4px;\n    background-color: #f9f9f9;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n}\n\n.rate-info {\n    flex-grow: 1;\n}\n\n.update-link {\n    color: #007bff;\n    text-decoration: none;\n}\n\n.update-link:hover {\n    text-decoration: underline;\n}\n"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate_password/', views.generate_password, name='generate_password'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\nimport secrets\nimport string\nimport json\n\ndef home(request):\n    return render(request, 'password_generator/home.html')\n\ndef generate_password(request):\n    if request.method == 'POST':\n        data = json.loads(request.body)\n        length = int(data.get('length', 12))\n        include_uppercase = data.get('uppercase', True)\n        include_lowercase = data.get('lowercase', True)\n        include_numbers = data.get('numbers', True)\n        include_symbols = data.get('symbols', True)\n        exclude_similar = data.get('exclude_similar', False)\n        custom_symbols = data.get('custom_symbols', '')\n        exclude_characters = data.get('exclude_characters', '')\n\n        characters = ''\n        if include_uppercase:\n            characters += string.ascii_uppercase\n        if include_lowercase:\n            characters += string.ascii_lowercase\n        if include_numbers:\n            characters += string.digits\n        if include_symbols:\n            characters += string.punctuation\n        if custom_symbols:\n            characters += custom_symbols\n\n        if exclude_similar:\n            similar_chars = 'l1O0'\n            characters = ''.join([char for char in characters if char not in similar_chars])\n\n        if exclude_characters:\n            characters = ''.join([char for char in characters if char not in exclude_characters])\n\n        if not characters:\n            return JsonResponse({'error': 'Please select at least one character type.'}, status=400)\n\n        password = ''.join(secrets.choice(characters) for _ in range(length))\n        strength = 'Medium'\n        return JsonResponse({'password': password, 'strength': strength})\n    else:\n        return JsonResponse({'error': 'Invalid request method.'}, status=400)\n"}, {"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models"}, {"file": "forms.py", "path": "password_generator/forms.py", "code": "from django import forms"}, {"file": "home.html", "path": "password_generator/templates/password_generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .container {\n            max-width: 600px;\n            margin: auto;\n            padding: 20px;\n            border: 1px solid #ddd;\n            border-radius: 5px;\n        }\n        .form-group {\n            margin-bottom: 15px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n        }\n        input[type=\"number\"] {\n            width: 50px;\n        }\n        button {\n            padding: 10px 15px;\n            background-color: #4CAF50;\n            color: white;\n            border: none;\n            cursor: pointer;\n            border-radius: 3px;\n        }\n        button:hover {\n            background-color: #3e8e41;\n        }\n        .password-display {\n            margin-top: 20px;\n            padding: 10px;\n            border: 1px solid #eee;\n            border-radius: 3px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 id=\"pageTitle\" class=\"main-title\">Password Generator</h1>\n\n        <div class=\"form-group\">\n            <label for=\"passwordLengthInput\" id=\"lengthLabel\">Password Length:</label>\n            <input type=\"number\" id=\"passwordLengthInput\" class=\"length-input\" value=\"12\">\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"checkbox\" id=\"includeUppercaseCheckbox\" class=\"option-checkbox\" checked>\n            <label for=\"includeUppercaseCheckbox\" id=\"uppercaseLabel\">Include Uppercase</label>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"checkbox\" id=\"includeLowercaseCheckbox\" class=\"option-checkbox\" checked>\n            <label for=\"includeLowercaseCheckbox\" id=\"lowercaseLabel\">Include Lowercase</label>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"checkbox\" id=\"includeNumbersCheckbox\" class=\"option-checkbox\" checked>\n            <label for=\"includeNumbersCheckbox\" id=\"numbersLabel\">Include Numbers</label>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"checkbox\" id=\"includeSymbolsCheckbox\" class=\"option-checkbox\" checked>\n            <label for=\"includeSymbolsCheckbox\" id=\"symbolsLabel\">Include Symbols</label>\n        </div>\n\n        <div class=\"form-group\">\n            <input type=\"checkbox\" id=\"excludeSimilarCheckbox\" class=\"option-checkbox\">\n            <label for=\"excludeSimilarCheckbox\" id=\"excludeSimilarLabel\">Exclude Similar Characters (l, 1, O, 0)</label>\n        </div>\n\n        <button id=\"generateButton\" class=\"generate-button\">Generate Password</button>\n\n        <div class=\"password-display\">\n            <h2 id=\"passwordHeader\">Generated Password:</h2>\n            <p id=\"generatedPassword\" class=\"generated-password\"></p>\n            <p id=\"passwordStrength\" class=\"password-strength\"></p>\n            <button id=\"copyButton\" class=\"copy-button\">Copy to Clipboard</button>\n        </div>\n    </div>\n\n    <script>\n        document.getElementById('generateButton').addEventListener('click', function() {\n            const length = document.getElementById('passwordLengthInput').value;\n            const uppercase = document.getElementById('includeUppercaseCheckbox').checked;\n            const lowercase = document.getElementById('includeLowercaseCheckbox').checked;\n            const numbers = document.getElementById('includeNumbersCheckbox').checked;\n            const symbols = document.getElementById('includeSymbolsCheckbox').checked;\n            const excludeSimilar = document.getElementById('excludeSimilarCheckbox').checked;\n\n            fetch('/generate_password/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: JSON.stringify({\n                    length: length,\n                    uppercase: uppercase,\n                    lowercase: lowercase,\n                    numbers: numbers,\n                    symbols: symbols,\n                    exclude_similar: excludeSimilar\n                })\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                    alert(data.error);\n                } else {\n                    document.getElementById('generatedPassword').textContent = data.password;\n                    document.getElementById('passwordStrength').textContent = 'Strength: ' + data.strength;\n                }\n            })\n            .catch(error => {\n                console.error('Error:', error);\n            });\n        });\n\n        document.getElementById('copyButton').addEventListener('click', function() {\n            const password = document.getElementById('generatedPassword').textContent;\n            navigator.clipboard.writeText(password);\n            alert('Password copied to clipboard!');\n        });\n    </script>\n</body>\n</html>"}, {"file": "settings.py", "path": "password_generator_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'password_generator/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'password_generator/static')]\n"}, {"file": "urls.py", "path": "password_generator_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls')),\n]"}, {"file": "wsgi.py", "path": "password_generator_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault(\n        'DJANGO_SETTINGS_MODULE',\n        'password_generator_project.settings',\n    )\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "4": [{"file": "models.py", "path": "qr_generator/models.py", "code": "from django.db import models\n\nclass QRCodeData(models.Model):\n    data_type = models.CharField(max_length=255, verbose_name=\"Data Type\")  # e.g., 'Text', 'URL', 'Email'\n    data = models.TextField(verbose_name=\"Data\")\n    error_correction = models.CharField(max_length=1, default='M', verbose_name=\"Error Correction\", choices=[('L', 'L'), ('M', 'M'), ('Q', 'Q'), ('H', 'H')]) # L, M, Q, H\n    size = models.IntegerField(default=200, verbose_name=\"Size (pixels)\") # Size in pixels\n    style_options = models.JSONField(null=True, blank=True, verbose_name=\"Style Options (JSON)\") # JSON for colors, shapes, logo etc.\n    short_url = models.URLField(blank=True, null=True, verbose_name=\"Short URL\") # Store the Short URL if applicable\n    created_at = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.data_type} - {self.data[:50]}'\n\nclass AboutPageContent(models.Model):\n    title = models.CharField(max_length=255, default='About', verbose_name=\"Title\")\n    qr_code_explanation = models.TextField(default='QR Codes explained', verbose_name=\"QR Code Explanation\")\n    generator_purpose = models.TextField(default='Purpose of the Generator', verbose_name=\"Generator Purpose\")\n    contact_info = models.TextField(default='Contact Information', verbose_name=\"Contact Information\")\n\n    def __str__(self):\n        return self.title\n\nclass FAQ(models.Model):\n    question = models.CharField(max_length=255, verbose_name=\"Question\")\n    answer = models.TextField(verbose_name=\"Answer\")\n\n    def __str__(self):\n        return self.question\n\nclass PricingPlan(models.Model):\n    name = models.CharField(max_length=255, verbose_name=\"Plan Name\")\n    price = models.DecimalField(max_digits=10, decimal_places=2, verbose_name=\"Price\")\n    features = models.TextField(verbose_name=\"Features\")\n    subscription_options = models.CharField(max_length=255, blank=True, null=True, verbose_name=\"Subscription Options\")\n    payment_information = models.TextField(blank=True, null=True, verbose_name=\"Payment Information\")\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "qr_generator/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import JsonResponse\nfrom .models import QRCodeData, AboutPageContent, FAQ, PricingPlan\nfrom .forms import QRCodeForm\nimport qrcode\nfrom io import BytesIO\nimport base64\n\ndef home(request):\n    if request.method == 'POST':\n        form = QRCodeForm(request.POST)\n        if form.is_valid():\n            qr_data = form.save()\n            # Generate QR Code (Example, adjust based on data_type)\n            qr = qrcode.QRCode(\n                version=1,\n                error_correction=qrcode.ERROR_CORRECT_L if qr_data.error_correction == 'L' else\n                                 qrcode.ERROR_CORRECT_M if qr_data.error_correction == 'M' else\n                                 qrcode.ERROR_CORRECT_Q if qr_data.error_correction == 'Q' else\n                                 qrcode.ERROR_CORRECT_H,\n                box_size=10,\n                border=4,\n            )\n            qr.add_data(qr_data.data)\n            qr.make(fit=True)\n\n            img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n\n            buffer = BytesIO()\n            img.save(buffer, format='PNG')\n            qr_code_image = base64.b64encode(buffer.getvalue()).decode()\n            #qr_data.qr_code_image = qr_code_image #Don't save image to the model\n\n            context = {'form': QRCodeForm(), 'qr_code_image': qr_code_image}\n            return render(request, 'qr_generator/home.html', context)\n\n    else:\n        form = QRCodeForm()\n    return render(request, 'qr_generator/home.html', {'form': form})\n\ndef about(request):\n    about_content = AboutPageContent.objects.first() or AboutPageContent.objects.create()\n    return render(request, 'qr_generator/about.html', {'about_content': about_content})\n\ndef faq(request):\n    faqs = FAQ.objects.all()\n    return render(request, 'qr_generator/faq.html', {'faqs': faqs})\n\ndef pricing(request):\n    pricing_plans = PricingPlan.objects.all()\n    return render(request, 'qr_generator/pricing.html', {'pricing_plans': pricing_plans})\n\n\n# Dummy API endpoint to return generated QR Code as JSON \ndef generate_qr_code(request):\n    if request.method == 'POST':\n       # Extract data from request.POST based on 'function' from checklist.  Example:\n       data_type = request.POST.get('data_type', 'Text') # default text\n       data = request.POST.get('data', '')\n       error_correction = request.POST.get('error_correction', 'M')\n\n       # Generate QR code\n       qr = qrcode.QRCode(\n            version=1,\n            error_correction=qrcode.ERROR_CORRECT_L if error_correction == 'L' else\n                             qrcode.ERROR_CORRECT_M if error_correction == 'M' else\n                             qrcode.ERROR_CORRECT_Q if error_correction == 'Q' else\n                             qrcode.ERROR_CORRECT_H,\n            box_size=10,\n            border=4,\n        )\n       qr.add_data(data)\n       qr.make(fit=True)\n\n       img = qr.make_image(fill_color=\"black\", back_color=\"white\")\n       buffer = BytesIO()\n       img.save(buffer, format='PNG')\n       img_str = base64.b64encode(buffer.getvalue()).decode()\n\n       return JsonResponse({'image': img_str})\n    else:\n        return JsonResponse({'error': 'Invalid request method'}, status=400)"}, {"file": "forms.py", "path": "qr_generator/forms.py", "code": "from django import forms\nfrom .models import QRCodeData\n\nclass QRCodeForm(forms.ModelForm):\n    class Meta:\n        model = QRCodeData\n        fields = ['data_type', 'data', 'error_correction', 'size', 'style_options'] # Include all necessary fields\n        # You can customize widgets here.  For example, to use a TextArea for data:\n        widgets = {\n            'data': forms.Textarea(attrs={'rows': 4, 'cols': 50, 'class': 'form-control', 'id': 'data-input'}),\n            'style_options': forms.Textarea(attrs={'rows': 4, 'cols': 50, 'class': 'form-control', 'id': 'style-options-input'}), # JSON Field as Textarea\n            'data_type': forms.Select(attrs={'class': 'form-control', 'id': 'data-type-select'}),\n            'error_correction': forms.Select(attrs={'class': 'form-control', 'id': 'error-correction-select'}),\n            'size': forms.NumberInput(attrs={'class': 'form-control', 'id': 'size-input'})\n        }\n\n    # Add validation if necessary, e.g., check if style_options is valid JSON."}, {"file": "urls.py", "path": "qr_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n    path('faq/', views.faq, name='faq'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('generate_qr_code/', views.generate_qr_code, name='generate_qr_code'), # API endpoint\n]"}, {"file": "settings.py", "path": "your_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your-secret-key'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_generator', # Add this\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'your_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add your templates directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'your_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] #Added staticfiles_dirs\n\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "admin.py", "path": "qr_generator/admin.py", "code": "from django.contrib import admin\nfrom .models import QRCodeData, AboutPageContent, FAQ, PricingPlan\n\nadmin.site.register(QRCodeData)\nadmin.site.register(AboutPageContent)\nadmin.site.register(FAQ)\nadmin.site.register(PricingPlan)"}, {"file": "urls.py", "path": "your_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator.urls')), # Include the qr_generator app's URLs\n]"}, {"file": "wsgi.py", "path": "your_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "your_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project.settings')\n\nfrom django.core.asgi import get_asgi_application\n\napplication = get_asgi_application()"}, {"file": "home.html", "path": "templates/qr_generator/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\" integrity=\"sha384-JcKb8q3iqJ61gNV9KGb8thSsNjpSL0n8PARn9HuZOnIxN0hoP+VmmDGMN5t9UJ0Z\" crossorigin=\"anonymous\">\n    <style>\n        .qr-code-container {\n            margin-top: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"mt-4 mb-4\" id=\"main-title\">QR Code Generator</h1>\n        <form method=\"post\" id=\"qr-code-form\">\n            {% csrf_token %}\n            <div class=\"form-group\" id=\"data-type-group\">\n                <label for=\"{{ form.data_type.id_for_label }}\">Data Type:</label>\n                {{ form.data_type }}\n            </div>\n            <div class=\"form-group\" id=\"data-group\">\n                <label for=\"{{ form.data.id_for_label }}\">Data:</label>\n                {{ form.data }}\n            </div>\n            <div class=\"form-group\" id=\"error-correction-group\">\n                <label for=\"{{ form.error_correction.id_for_label }}\">Error Correction:</label>\n                {{ form.error_correction }}\n            </div>\n            <div class=\"form-group\" id=\"size-group\">\n                <label for=\"{{ form.size.id_for_label }}\">Size:</label>\n                {{ form.size }}\n            </div>\n            <div class=\"form-group\" id=\"style-options-group\">\n                <label for=\"{{ form.style_options.id_for_label }}\">Style Options (JSON):</label>\n                {{ form.style_options }}\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\" id=\"generate-button\">Generate QR Code</button>\n        </form>\n\n        {% if qr_code_image %}\n        <div class=\"qr-code-container\" id=\"qr-code-display\">\n            <img src=\"data:image/png;base64,{{ qr_code_image }}\" alt=\"QR Code\" class=\"img-fluid\" id=\"qr-code-image\">\n        </div>\n        {% endif %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\" integrity=\"sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js\" integrity=\"sha384-q2kxQ16AaE6UbzuKqyBE9/u/KzioAlnx2MAun/ZYwnQAp5GtmoNDf66VYBFGW6I\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\" integrity=\"sha384-B4gt1jrGC7Jh4AgTPSdUtOBvfO8shuf57BaghqFfPlYxofvL8/KUEfYiJOMMV+rV\" crossorigin=\"anonymous\"></script>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/qr_generator/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About Us</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"mt-4 mb-4\" id=\"about-title\">About Us</h1>\n        <div id=\"about-content\">\n            {% if about_content %}\n                <h2 id=\"qr-code-explanation-title\">QR Code Explanation</h2>\n                <p id=\"qr-code-explanation\">{{ about_content.qr_code_explanation }}</p>\n\n                <h2 id=\"generator-purpose-title\">Generator Purpose</h2>\n                <p id=\"generator-purpose\">{{ about_content.generator_purpose }}</p>\n\n                <h2 id=\"contact-info-title\">Contact Information</h2>\n                <p id=\"contact-info\">{{ about_content.contact_info }}</p>\n            {% else %}\n                <p id=\"no-about-content\">No about content available.</p>\n            {% endif %}\n        </div>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "faq.html", "path": "templates/qr_generator/faq.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>FAQ</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"mt-4 mb-4\" id=\"faq-title\">Frequently Asked Questions</h1>\n        <div id=\"faq-content\">\n            {% if faqs %}\n                {% for faq in faqs %}\n                    <div class=\"mb-3\" id=\"faq-item-{{ forloop.counter }}\">\n                        <h5 id=\"faq-question-{{ forloop.counter }}\">{{ faq.question }}</h5>\n                        <p id=\"faq-answer-{{ forloop.counter }}\">{{ faq.answer }}</p>\n                    </div>\n                {% endfor %}\n            {% else %}\n                <p id=\"no-faq\">No FAQs available.</p>\n            {% endif %}\n        </div>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "pricing.html", "path": "templates/qr_generator/pricing.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Pricing Plans</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1 class=\"mt-4 mb-4\" id=\"pricing-title\">Pricing Plans</h1>\n        <div class=\"row\" id=\"pricing-content\">\n            {% if pricing_plans %}\n                {% for plan in pricing_plans %}\n                    <div class=\"col-md-4 mb-4\" id=\"pricing-plan-{{ forloop.counter }}\">\n                        <div class=\"card\">\n                            <div class=\"card-body\">\n                                <h5 class=\"card-title\" id=\"plan-name-{{ forloop.counter }}\">{{ plan.name }}</h5>\n                                <h6 class=\"card-subtitle mb-2 text-muted\" id=\"plan-price-{{ forloop.counter }}\">${{ plan.price }}</h6>\n                                <p class=\"card-text\" id=\"plan-features-{{ forloop.counter }}\">{{ plan.features }}</p>\n                                <p class=\"card-text\" id=\"plan-subscription-{{ forloop.counter }}\">Subscription Options: {{ plan.subscription_options }}</p>\n                                <p class=\"card-text\" id=\"plan-payment-{{ forloop.counter }}\">Payment Information: {{ plan.payment_information }}</p>\n                            </div>\n                        </div>\n                    </div>\n                {% endfor %}\n            {% else %}\n                <p id=\"no-plans\">No pricing plans available.</p>\n            {% endif %}\n        </div>\n    </div>\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "style.css", "path": "static/qr_generator/style.css", "code": "/* Add your custom styles here */\nbody {\n    font-family: sans-serif;\n}\n\n.qr-code-container {\n    margin-top: 20px;\n    text-align: center;\n}\n\n.form-group {\n    margin-bottom: 15px;\n}\n\n/* Example styling for form elements */\n.form-control {\n    width: 100%;\n    padding: 0.375rem 0.75rem;\n    font-size: 1rem;\n    line-height: 1.5;\n    color: #495057;\n    background-color: #fff;\n    background-clip: padding-box;\n    border: 1px solid #ced4da;\n    border-radius: 0.25rem;\n    transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;\n}\n\n.form-control:focus {\n    color: #495057;\n    background-color: #fff;\n    border-color: #80bdff;\n    outline: 0;\n    box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\n}\n\n.btn-primary {\n    color: #fff;\n    background-color: #007bff;\n    border-color: #007bff;\n}\n\n.btn-primary:hover {\n    color: #fff;\n    background-color: #0069d9;\n    border-color: #0062cc;\n}\n"}], "6": [{"file": "models.py", "path": "todo/models.py", "code": "from django.db import models\n\nclass Task(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    due_date = models.DateField(blank=True, null=True)\n    PRIORITY_CHOICES = [\n        ('High', 'High'),\n        ('Medium', 'Medium'),\n        ('Low', 'Low'),\n    ]\n    priority = models.CharField(max_length=10, choices=PRIORITY_CHOICES, default='Medium')\n    STATUS_CHOICES = [\n        ('To Do', 'To Do'),\n        ('In Progress', 'In Progress'),\n        ('Done', 'Done'),\n    ]\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='To Do')\n    assigned_user = models.CharField(max_length=100, blank=True, null=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "todo/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom .models import Task\nfrom .forms import TaskForm\nimport json\nfrom django.db.models import Q\n\ndef home(request):\n    tasks = Task.objects.all()\n    # Task Summary Chart Data\n    status_counts = {\n        'To Do': Task.objects.filter(status='To Do').count(),\n        'In Progress': Task.objects.filter(status='In Progress').count(),\n        'Done': Task.objects.filter(status='Done').count(),\n    }\n    # Priority Distribution Chart Data\n    priority_counts = {\n        'High': Task.objects.filter(priority='High').count(),\n        'Medium': Task.objects.filter(priority='Medium').count(),\n        'Low': Task.objects.filter(priority='Low').count(),\n    }\n\n    return render(request, 'todo/home.html', {'tasks': tasks,\n                                               'status_counts': json.dumps(status_counts),\n                                               'priority_counts': json.dumps(priority_counts)})\n\ndef add_task(request):\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TaskForm()\n    return render(request, 'todo/add_task.html', {'form': form})\n\ndef edit_task(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'todo/edit_task.html', {'form': form, 'task': task})\n\ndef delete_task(request, pk):\n    task = get_object_or_404(Task, pk=pk)\n    if request.method == 'POST':\n        task.delete()\n        return redirect('home')\n    return render(request, 'todo/delete_task.html', {'task': task})\n\n\ndef search_tasks(request):\n    query = request.GET.get('q')\n    tasks = Task.objects.filter(Q(title__icontains=query) | Q(description__icontains=query))\n    return render(request, 'todo/home.html', {'tasks': tasks})\n\ndef filter_tasks(request):\n    status = request.GET.get('status')\n    priority = request.GET.get('priority')\n    due_date = request.GET.get('due_date')\n    tasks = Task.objects.all()\n    if status:\n        tasks = tasks.filter(status=status)\n    if priority:\n        tasks = tasks.filter(priority=priority)\n    if due_date:\n       tasks = tasks.filter(due_date=due_date)\n\n    return render(request, 'todo/home.html', {'tasks': tasks})"}, {"file": "forms.py", "path": "todo/forms.py", "code": "from django import forms\nfrom .models import Task\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'due_date', 'priority', 'status', 'assigned_user']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date'}),\n        }"}, {"file": "urls.py", "path": "todo/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('add/', views.add_task, name='add_task'),\n    path('edit/<int:pk>/', views.edit_task, name='edit_task'),\n    path('delete/<int:pk>/', views.delete_task, name='delete_task'),\n    path('search/', views.search_tasks, name='search_tasks'),\n    path('filter/', views.filter_tasks, name='filter_tasks'),\n]"}, {"file": "home.html", "path": "todo/templates/todo/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo App</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <div id=\"container\" class=\"container\">\n        <h1 id=\"main-title\" class=\"main-title\">Todo Tasks</h1>\n        <a id=\"add-task-link\" class=\"add-task-link\" href=\"{% url 'add_task' %}\">Add New Task</a>\n\n        <form id=\"search-form\" class=\"search-form\" action=\"{% url 'search_tasks' %}\" method=\"get\">\n            <input id=\"search-input\" class=\"search-input\" type=\"text\" name=\"q\" placeholder=\"Search tasks\">\n            <button id=\"search-button\" class=\"search-button\" type=\"submit\">Search</button>\n        </form>\n\n        <form id=\"filter-form\" class=\"filter-form\" action=\"{% url 'filter_tasks' %}\" method=\"get\">\n            <select id=\"status-filter\" class=\"status-filter\" name=\"status\">\n                <option value=\"\">All Statuses</option>\n                <option value=\"To Do\">To Do</option>\n                <option value=\"In Progress\">In Progress</option>\n                <option value=\"Done\">Done</option>\n            </select>\n            <select id=\"priority-filter\" class=\"priority-filter\" name=\"priority\">\n                <option value=\"\">All Priorities</option>\n                <option value=\"High\">High</option>\n                <option value=\"Medium\">Medium</option>\n                <option value=\"Low\">Low</option>\n            </select>\n            <input type=\"date\" id=\"due-date-filter\" class=\"due-date-filter\" name=\"due_date\">\n            <button id=\"filter-button\" class=\"filter-button\" type=\"submit\">Filter</button>\n        </form>\n\n        <ul id=\"task-list\" class=\"task-list\">\n            {% for task in tasks %}\n                <li class=\"task-item\" id=\"task-{{ task.pk }}\">\n                    {{ task.title }} - {{ task.status }} - {{ task.priority }} - Due: {{ task.due_date }}\n                    <a class=\"edit-link\" href=\"{% url 'edit_task' task.pk %}\">Edit</a>\n                    <a class=\"delete-link\" href=\"{% url 'delete_task' task.pk %}\">Delete</a>\n                </li>\n            {% endfor %}\n        </ul>\n\n        <div id=\"charts-container\" class=\"charts-container\">\n            <div id=\"task-summary-chart-container\" class=\"chart-container\">\n                <h2 class=\"chart-title\">Task Summary Chart</h2>\n                <canvas id=\"taskStatusChart\" width=\"400\" height=\"200\"></canvas>\n            </div>\n            <div id=\"priority-distribution-chart-container\" class=\"chart-container\">\n                <h2 class=\"chart-title\">Priority Distribution Chart</h2>\n                <canvas id=\"priorityDistributionChart\" width=\"400\" height=\"200\"></canvas>\n            </div>\n        </div>\n\n        <script>\n            var statusCounts = JSON.parse('{{ status_counts|escapejs }}');\n            var priorityCounts = JSON.parse('{{ priority_counts|escapejs }}');\n\n            // Task Status Chart\n            var statusChartCanvas = document.getElementById('taskStatusChart').getContext('2d');\n            var statusChart = new Chart(statusChartCanvas, {\n                type: 'pie',\n                data: {\n                    labels: Object.keys(statusCounts),\n                    datasets: [{\n                        label: 'Task Status',\n                        data: Object.values(statusCounts),\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.6)',\n                            'rgba(54, 162, 235, 0.6)',\n                            'rgba(255, 206, 86, 0.6)',\n                        ],\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    title: {\n                        display: true,\n                        text: 'Task Status Summary'\n                    }\n                }\n            });\n\n            // Priority Distribution Chart\n            var priorityChartCanvas = document.getElementById('priorityDistributionChart').getContext('2d');\n            var priorityChart = new Chart(priorityChartCanvas, {\n                type: 'bar',\n                data: {\n                    labels: Object.keys(priorityCounts),\n                    datasets: [{\n                        label: 'Task Priority',\n                        data: Object.values(priorityCounts),\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.6)',\n                            'rgba(54, 162, 235, 0.6)',\n                            'rgba(255, 206, 86, 0.6)',\n                        ],\n                        borderWidth: 1\n                    }]\n                },\n                options: {\n                    scales: {\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true,\n                                stepSize: 1\n                            }\n                        }]\n                    },\n                    title: {\n                        display: true,\n                        text: 'Priority Distribution'\n                    }\n                }\n            });\n        </script>\n    </div>\n</body>\n</html>"}, {"file": "add_task.html", "path": "todo/templates/todo/add_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Add Task</title>\n</head>\n<body>\n    <div id=\"add-task-container\" class=\"container\">\n        <h1 id=\"add-task-title\" class=\"main-title\">Add New Task</h1>\n        <form id=\"add-task-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"save-task-button\" class=\"save-button\" type=\"submit\">Save</button>\n            <a id=\"cancel-add-task-link\" class=\"cancel-link\" href=\"{% url 'home' %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "edit_task.html", "path": "todo/templates/todo/edit_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Edit Task</title>\n</head>\n<body>\n    <div id=\"edit-task-container\" class=\"container\">\n        <h1 id=\"edit-task-title\" class=\"main-title\">Edit Task</h1>\n        <form id=\"edit-task-form\" method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"save-changes-button\" class=\"save-button\" type=\"submit\">Save Changes</button>\n            <a id=\"cancel-edit-link\" class=\"cancel-link\" href=\"{% url 'home' %}\">Cancel</a>\n        </form>\n        <form id=\"delete-task-form\" method=\"post\" action=\"{% url 'delete_task' task.pk %}\">\n            {% csrf_token %}\n            <button id=\"delete-task-button\" class=\"delete-button\" type=\"submit\">Delete</button>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "delete_task.html", "path": "todo/templates/todo/delete_task.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Delete Task</title>\n</head>\n<body>\n    <div id=\"delete-task-container\" class=\"container\">\n        <h1 id=\"delete-task-title\" class=\"main-title\">Delete Task</h1>\n        <p id=\"confirmation-message\" class=\"confirmation-message\">Are you sure you want to delete task: {{ task.title }}?</p>\n        <form id=\"delete-confirmation-form\" method=\"post\">\n            {% csrf_token %}\n            <button id=\"confirm-delete-button\" class=\"confirm-button\" type=\"submit\">Confirm Delete</button>\n            <a id=\"cancel-delete-link\" class=\"cancel-link\" href=\"{% url 'home' %}\">Cancel</a>\n        </form>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "todo_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key'\nDEBUG = True\nALLOWED_HOSTS = ['*']\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'todo',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]\n"}, {"file": "urls.py", "path": "todo_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('todo.urls')),\n]"}, {"file": "wsgi.py", "path": "todo_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "todo_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "8": [{"file": "models.py", "path": "calendar_app/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    date = models.DateField()\n    time = models.TimeField(blank=True, null=True)\n    description = models.TextField(blank=True)\n    reminder_time = models.IntegerField(default=0) # in minutes before the event\n    category = models.CharField(max_length=100, blank=True)\n    color = models.CharField(max_length=7, default='#FFFFFF')\n    recurrence = models.CharField(max_length=20, blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')])\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendar_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.utils import timezone\nfrom .models import Event\nfrom .forms import EventForm\n\ndef homepage(request):\n    today = timezone.now().date()\n    events = Event.objects.filter(date__month=today.month, date__year=today.year).order_by('date', 'time')\n    return render(request, 'calendar_app/homepage.html', {'events': events, 'today': today})\n\ndef event_create(request):\n    if request.method == 'POST':\n        form = EventForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('homepage')\n    else:\n        form = EventForm()\n    return render(request, 'calendar_app/event_form.html', {'form': form})\n\ndef event_detail(request, pk):\n    event = get_object_or_404(Event, pk=pk)\n    return render(request, 'calendar_app/event_detail.html', {'event': event})\n\ndef event_edit(request, pk):\n    event = get_object_or_404(Event, pk=pk)\n    if request.method == 'POST':\n        form = EventForm(request.POST, instance=event)\n        if form.is_valid():\n            form.save()\n            return redirect('event_detail', pk=event.pk)\n    else:\n        form = EventForm(instance=event)\n    return render(request, 'calendar_app/event_form.html', {'form': form})\n\ndef event_delete(request, pk):\n    event = get_object_or_404(Event, pk=pk)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('homepage')\n    return render(request, 'calendar_app/event_delete_confirmation.html', {'event': event})\n\ndef settings_page(request):\n    # Implement settings logic here\n    return render(request, 'calendar_app/settings.html')"}, {"file": "forms.py", "path": "calendar_app/forms.py", "code": "from django import forms\nfrom .models import Event\n\nclass EventForm(forms.ModelForm):\n    class Meta:\n        model = Event\n        fields = ['title', 'date', 'time', 'description', 'reminder_time', 'category', 'color', 'recurrence']\n        widgets = {\n            'date': forms.DateInput(attrs={'type': 'date'}),\n            'time': forms.TimeInput(attrs={'type': 'time'})\n        }"}, {"file": "urls.py", "path": "calendar_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('event/create/', views.event_create, name='event_create'),\n    path('event/<int:pk>/', views.event_detail, name='event_detail'),\n    path('event/<int:pk>/edit/', views.event_edit, name='event_edit'),\n    path('event/<int:pk>/delete/', views.event_delete, name='event_delete'),\n    path('settings/', views.settings_page, name='settings')\n]"}, {"file": "homepage.html", "path": "calendar_app/templates/calendar_app/homepage.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"homepage\" class=\"homepage-container\">\n    <h1 id=\"calendar-title\" class=\"calendar-title\">Calendar</h1>\n    <p id=\"today-date\" class=\"today-date\">Today is: {{ today }}</p>\n\n    <a id=\"add-event-link\" class=\"add-event-link\" href=\"{% url 'event_create' %}\">Add New Event</a>\n\n    <ul id=\"event-list\" class=\"event-list\">\n      {% for event in events %}\n        <li class=\"event-item\" id=\"event-item-{{ event.pk }}\">\n          <a class=\"event-link\" id=\"event-link-{{ event.pk }}\" href=\"{% url 'event_detail' event.pk %}\">{{ event.title }}</a> - {{ event.date }} {{ event.time }}\n        </li>\n      {% empty %}\n        <li id=\"no-events\" class=\"no-events\">No events scheduled for this month.</li>\n      {% endfor %}\n    </ul>\n  </div>\n{% endblock %}"}, {"file": "event_form.html", "path": "calendar_app/templates/calendar_app/event_form.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"event-form-page\" class=\"event-form-page\">\n    <h1 id=\"event-form-title\" class=\"event-form-title\">Event Form</h1>\n    <form id=\"event-form\" class=\"event-form\" method=\"post\">\n      {% csrf_token %}\n      {{ form.as_p }}\n      <button id=\"save-button\" class=\"save-button\" type=\"submit\">Save</button>\n      <a id=\"cancel-link\" class=\"cancel-link\" href=\"{% url 'homepage' %}\">Cancel</a>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "event_detail.html", "path": "calendar_app/templates/calendar_app/event_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"event-detail-page\" class=\"event-detail-page\">\n    <h1 id=\"event-title\" class=\"event-title\">{{ event.title }}</h1>\n    <p id=\"event-date\" class=\"event-date\">Date: {{ event.date }}</p>\n    <p id=\"event-time\" class=\"event-time\">Time: {{ event.time }}</p>\n    <p id=\"event-description\" class=\"event-description\">Description: {{ event.description }}</p>\n\n    <a id=\"edit-link\" class=\"edit-link\" href=\"{% url 'event_edit' event.pk %}\">Edit</a>\n    <a id=\"delete-link\" class=\"delete-link\" href=\"{% url 'event_delete' event.pk %}\">Delete</a>\n    <a id=\"back-link\" class=\"back-link\" href=\"{% url 'homepage' %}\">Back to Calendar</a>\n  </div>\n{% endblock %}"}, {"file": "event_delete_confirmation.html", "path": "calendar_app/templates/calendar_app/event_delete_confirmation.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"delete-confirmation-page\" class=\"delete-confirmation-page\">\n    <h1 id=\"delete-title\" class=\"delete-title\">Delete Event</h1>\n    <p id=\"delete-message\" class=\"delete-message\">Are you sure you want to delete \"{{ event.title }}\"?</p>\n    <form id=\"delete-form\" class=\"delete-form\" method=\"post\">\n      {% csrf_token %}\n      <button id=\"confirm-delete-button\" class=\"confirm-delete-button\" type=\"submit\">Confirm Delete</button>\n      <a id=\"cancel-delete-link\" class=\"cancel-delete-link\" href=\"{% url 'event_detail' event.pk %}\">Cancel</a>\n    </form>\n  </div>\n{% endblock %}"}, {"file": "settings.html", "path": "calendar_app/templates/calendar_app/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <div id=\"settings-page\" class=\"settings-page\">\n    <h1 id=\"settings-title\" class=\"settings-title\">Settings</h1>\n    <p id=\"settings-placeholder\" class=\"settings-placeholder\">Placeholder for settings options.</p>\n    <a id=\"back-to-calendar-link\" class=\"back-to-calendar-link\" href=\"{% url 'homepage' %}\">Back to Calendar</a>\n  </div>\n{% endblock %}"}, {"file": "base.html", "path": "calendar_app/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Calendar App</title>\n    <style>\n        body {\n            font-family: sans-serif;\n            margin: 20px;\n        }\n        .calendar-title { font-size: 2em; }\n        .today-date { font-style: italic; }\n        .add-event-link { display: inline-block; margin-bottom: 10px; }\n        .event-list { list-style: none; padding: 0; }\n        .event-item { margin-bottom: 5px; }\n        .no-events { font-style: italic; }\n        .event-link { text-decoration: none; }\n        .save-button { background-color: #4CAF50; color: white; padding: 10px 15px; border: none; cursor: pointer; }\n        .cancel-link { text-decoration: none; margin-left: 10px; }\n    </style>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}, {"file": "wsgi.py", "path": "calendar_project/calendar_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "calendar_project/calendar_project/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n\napplication = get_asgi_application()"}, {"file": "settings.py", "path": "calendar_project/calendar_project/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-CHANGE_ME'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendar_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'calendar_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'calendar_app/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'calendar_project.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "calendar_project/calendar_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calendar_app.urls')),\n]"}, {"file": "manage.py", "path": "calendar_project/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'calendar_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError:\n        # The above import may fail because Django is not installed.\n        # If that's the case, manually configure the environment and re-import.\n        try:\n            import django  # noqa: F401\n        except ImportError:\n            raise ImportError(\n                \"Couldn't import Django. Are you sure it's installed and \"\n                \"available on your PYTHONPATH environment variable? Did you \"\n                \"forget to activate a virtual environment?\"\n            )\n        raise\n\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}], "11": [{"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "home.html", "path": "password_generator/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"home-title\" class=\"title\">Welcome to Password Generator</h1>\n        <p id=\"home-description\" class=\"description\">Generate strong and secure passwords.</p>\n        <a id=\"about-link\" class=\"link\" href=\"{% url 'about' %}\">About</a>\n    </div>\n</body>\n</html>"}, {"file": "about.html", "path": "password_generator/templates/about.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>About</title>\n</head>\n<body>\n    <div id=\"about-container\" class=\"container\">\n        <h1 id=\"about-title\" class=\"title\">About Password Generator</h1>\n        <p id=\"about-description\" class=\"description\">This website is designed to help you generate strong and secure passwords. We provide a simple and easy-to-use interface to customize your passwords according to your specific needs.</p>\n        <a id=\"home-link\" class=\"link\" href=\"{% url 'home' %}\">Home</a>\n    </div>\n</body>\n</html>"}, {"file": "apps.py", "path": "password_generator/apps.py", "code": "from django.apps import AppConfig\n\n\nclass PasswordGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'password_generator'"}, {"file": "models.py", "path": "password_generator/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "password_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "urls.py", "path": "config/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('password_generator.urls'))\n]"}, {"file": "__init__.py", "path": "password_generator/__init__.py", "code": ""}, {"file": "settings.py", "path": "config/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-YOUR_SECRET_KEY_HERE'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'password_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'config.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'password_generator/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'config.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "wsgi.py", "path": "config/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "__init__.py", "path": "config/__init__.py", "code": ""}], "12": [{"file": "claims/models.py", "path": "claims/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    STATUS_CHOICES = (\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected'),\n    )\n    SUBJECT_CHOICES = (\n        ('Travel', 'Travel'),\n        ('Labor', 'Labor'),\n        ('Management', 'Management'),\n        ('Equipment', 'Equipment'),\n    )\n\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    submission_date = models.DateTimeField(auto_now_add=True)\n    subject = models.CharField(max_length=20, choices=SUBJECT_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    description = models.TextField()\n    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='Pending')\n    feedback = models.TextField(blank=True, null=True)\n    supporting_documents = models.FileField(upload_to='claims/documents/', blank=True, null=True)\n\n    def __str__(self):\n        return f'Claim by {self.employee.username} - {self.subject} - {self.status}'\n\nclass Budget(models.Model):\n    subject = models.CharField(max_length=20, choices=Claim.SUBJECT_CHOICES, unique=True)\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'Budget for {self.subject}: {self.limit}'"}, {"file": "claims/forms.py", "path": "claims/forms.py", "code": "from django import forms\nfrom .models import Claim\n\nclass ClaimSubmissionForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['subject', 'amount', 'description', 'supporting_documents']\n        widgets = {\n            'description': forms.Textarea(attrs={'rows': 4}),\n        }"}, {"file": "claims/views.py", "path": "claims/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.contrib.auth.decorators import login_required, user_passes_test\nfrom .models import Claim, Budget\nfrom .forms import ClaimSubmissionForm\nfrom django.contrib import messages\nfrom django.db.models import Sum\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimSubmissionForm(request.POST, request.FILES)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            messages.success(request, 'Claim submitted successfully.')\n            return redirect('claim_history')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = ClaimSubmissionForm()\n    return render(request, 'claims/submit_claim.html', {'form': form})\n\n@login_required\ndef claim_history(request):\n    claims = Claim.objects.filter(employee=request.user).order_by('-submission_date')\n    return render(request, 'claims/claim_history.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user, status='Pending')\n    if request.method == 'POST':\n        form = ClaimSubmissionForm(request.POST, request.FILES, instance=claim)\n        if form.is_valid():\n            form.save()\n            messages.success(request, 'Claim updated successfully.')\n            return redirect('claim_history')\n        else:\n            messages.error(request, 'Please correct the errors below.')\n    else:\n        form = ClaimSubmissionForm(instance=claim)\n    return render(request, 'claims/edit_claim.html', {'form': form, 'claim': claim})\n\n@login_required\ndef withdraw_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user, status='Pending')\n    if request.method == 'POST':\n        claim.delete()\n        messages.success(request, 'Claim withdrawn successfully.')\n        return redirect('claim_history')\n    return render(request, 'claims/withdraw_claim.html', {'claim': claim})\n\ndef is_admin(user):\n    return user.is_staff  # Or a more sophisticated check based on groups/permissions\n\n@login_required\n@user_passes_test(is_admin)\ndef admin_dashboard(request):\n    pending_claims = Claim.objects.filter(status='Pending')\n    return render(request, 'claims/admin_dashboard.html', {'pending_claims': pending_claims})\n\n@login_required\n@user_passes_test(is_admin)\ndef approve_reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    if request.method == 'POST':\n        action = request.POST.get('action')\n        feedback = request.POST.get('feedback', '')\n        if action == 'approve':\n            claim.status = 'Approved'\n            claim.feedback = feedback\n            claim.save()\n            messages.success(request, f'Claim {claim_id} approved.')\n        elif action == 'reject':\n            claim.status = 'Rejected'\n            claim.feedback = feedback\n            claim.save()\n            messages.success(request, f'Claim {claim_id} rejected.')\n        return redirect('admin_dashboard')\n    return render(request, 'claims/approve_reject_claim.html', {'claim': claim})\n\n@login_required\n@user_passes_test(is_admin)\ndef all_claim_history(request):\n    claims = Claim.objects.all().order_by('-submission_date')\n    return render(request, 'claims/all_claim_history.html', {'claims': claims})\n\n@login_required\n@user_passes_test(is_admin)\ndef filter_claims(request):\n    claims = Claim.objects.all()\n    status = request.GET.get('status')\n    subject = request.GET.get('subject')\n    employee_id = request.GET.get('employee')\n\n    if status:\n        claims = claims.filter(status=status)\n    if subject:\n        claims = claims.filter(subject=subject)\n    if employee_id:\n        claims = claims.filter(employee_id=employee_id)\n\n    return render(request, 'claims/filtered_claims.html', {'claims': claims})\n\n@login_required\n@user_passes_test(is_admin)\ndef expense_reports(request):\n    # Implement expense report generation logic here.\n    # For example, generate a PDF or CSV report.\n    return render(request, 'claims/expense_reports.html')\n\n@login_required\n@user_passes_test(is_admin)\ndef budget_management(request):\n    if request.method == 'POST':\n        subject = request.POST.get('subject')\n        limit = request.POST.get('limit')\n        try:\n            limit = float(limit)\n            budget, created = Budget.objects.update_or_create(\n                subject=subject,\n                defaults={'limit': limit}\n            )\n            messages.success(request, f'Budget for {subject} updated successfully.')\n        except ValueError:\n            messages.error(request, 'Invalid budget limit.')\n\n        return redirect('budget_management')\n\n    budgets = Budget.objects.all()\n    return render(request, 'claims/budget_management.html', {'budgets': budgets})\n\n\n@login_required\n@user_passes_test(is_admin)\ndef budget_utilization(request):\n    budgets = Budget.objects.all()\n    utilization = {}\n    for budget in budgets:\n        spent = Claim.objects.filter(subject=budget.subject, status='Approved').aggregate(Sum('amount'))['amount__sum'] or 0\n        remaining = budget.limit - spent\n        utilization[budget.subject] = {\n            'spent': spent,\n            'remaining': remaining,\n            'limit': budget.limit\n        }\n    return render(request, 'claims/budget_utilization.html', {'utilization': utilization})\n\n@login_required\n@user_passes_test(is_admin)\ndef budget_analysis(request):\n     #Implement budget analysis Logic Here\n    # You could fetch budget data and claim data, then perform analysis\n    # and display insights.\n    return render(request, 'claims/budget_analysis.html')"}, {"file": "claims/urls.py", "path": "claims/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('submit/', views.submit_claim, name='submit_claim'),\n    path('history/', views.claim_history, name='claim_history'),\n    path('edit/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n    path('withdraw/<int:claim_id>/', views.withdraw_claim, name='withdraw_claim'),\n    path('admin/dashboard/', views.admin_dashboard, name='admin_dashboard'),\n    path('admin/approve_reject/<int:claim_id>/', views.approve_reject_claim, name='approve_reject_claim'),\n    path('admin/all_history/', views.all_claim_history, name='all_claim_history'),\n    path('admin/filter/', views.filter_claims, name='filter_claims'),\n    path('admin/reports/', views.expense_reports, name='expense_reports'),\n    path('admin/budget/', views.budget_management, name='budget_management'),\n    path('admin/utilization/', views.budget_utilization, name='budget_utilization'),\n    path('admin/analysis/', views.budget_analysis, name='budget_analysis'),\n]"}, {"file": "config/settings.py", "path": "config/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'claims',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'config.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'config.wsgi.application'\n\n# Database\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n# Password validation\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n# Internationalization\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]  # Optional, if you have static files outside your apps\n\n# Media files (Uploaded files)\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\nMEDIA_URL = '/media/'\n\n# Default primary key field type\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n\nLOGIN_REDIRECT_URL = 'claim_history'\nLOGOUT_REDIRECT_URL = 'login'  # Or your login page name"}, {"file": "config/urls.py", "path": "config/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('accounts/', include('django.contrib.auth.urls')), # for login/logout\n    path('claims/', include('claims.urls')),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"}, {"file": "config/wsgi.py", "path": "config/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n\napplication = get_wsgi_application()"}, {"file": "manage.py", "path": "manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "claims/admin.py", "path": "claims/admin.py", "code": "from django.contrib import admin\nfrom .models import Claim, Budget\n\nadmin.site.register(Claim)\nadmin.site.register(Budget)"}, {"file": "templates/claims/submit_claim.html", "path": "claims/templates/claims/submit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"submitClaimTitle\" class=\"mt-3\">Submit Claim</h2>\n        <form id=\"claimForm\" method=\"post\" enctype=\"multipart/form-data\" class=\"mt-3\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"submitButton\" type=\"submit\" class=\"btn btn-primary\">Submit</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/claim_history.html", "path": "claims/templates/claims/claim_history.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"claimHistoryTitle\" class=\"mt-3\">Claim History</h2>\n        <ul id=\"claimList\" class=\"list-group\">\n            {% for claim in claims %}\n                <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <span id=\"claimDetails-{{ claim.id }}\">{{ claim.subject }} - {{ claim.amount }} - {{ claim.status }}</span>\n                    <div>\n                        {% if claim.status == 'Pending' %}\n                            <a id=\"editLink-{{ claim.id }}\" href=\"{% url 'edit_claim' claim.id %}\" class=\"btn btn-sm btn-warning mr-1\">Edit</a>\n                            <a id=\"withdrawLink-{{ claim.id }}\" href=\"{% url 'withdraw_claim' claim.id %}\" class=\"btn btn-sm btn-danger\">Withdraw</a>\n                        {% endif %}\n                    </div>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/edit_claim.html", "path": "claims/templates/claims/edit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"editClaimTitle\" class=\"mt-3\">Edit Claim</h2>\n        <form id=\"editClaimForm\" method=\"post\" enctype=\"multipart/form-data\" class=\"mt-3\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button id=\"updateButton\" type=\"submit\" class=\"btn btn-primary\">Update</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/withdraw_claim.html", "path": "claims/templates/claims/withdraw_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"withdrawClaimTitle\" class=\"mt-3\">Withdraw Claim</h2>\n        <p id=\"confirmationText\">Are you sure you want to withdraw this claim?</p>\n        <form id=\"withdrawForm\" method=\"post\" class=\"mt-3\">\n            {% csrf_token %}\n            <button id=\"withdrawButton\" type=\"submit\" class=\"btn btn-danger\">Withdraw</button>\n            <a id=\"cancelLink\" href=\"{% url 'claim_history' %}\" class=\"btn btn-secondary\">Cancel</a>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/admin_dashboard.html", "path": "claims/templates/claims/admin_dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"adminDashboardTitle\" class=\"mt-3\">Admin Dashboard</h2>\n        <h3 id=\"pendingClaimsSubtitle\" class=\"mt-3\">Pending Claims</h3>\n        <ul id=\"pendingClaimList\" class=\"list-group\">\n            {% for claim in pending_claims %}\n                <li class=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <span id=\"claimDetails-{{ claim.id }}\">{{ claim.employee.username }} - {{ claim.subject }} - {{ claim.amount }}</span>\n                    <a id=\"reviewLink-{{ claim.id }}\" href=\"{% url 'approve_reject_claim' claim.id %}\" class=\"btn btn-sm btn-primary\">Review</a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/approve_reject_claim.html", "path": "claims/templates/claims/approve_reject_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"approveRejectTitle\" class=\"mt-3\">Approve/Reject Claim</h2>\n        <p id=\"employeeInfo\">Employee: {{ claim.employee.username }}</p>\n        <p id=\"subjectInfo\">Subject: {{ claim.subject }}</p>\n        <p id=\"amountInfo\">Amount: {{ claim.amount }}</p>\n        <p id=\"descriptionInfo\">Description: {{ claim.description }}</p>\n\n        <form id=\"approvalForm\" method=\"post\" class=\"mt-3\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"feedbackTextarea\">Feedback:</label>\n                <textarea id=\"feedbackTextarea\" name=\"feedback\" placeholder=\"Feedback\" class=\"form-control\"></textarea>\n            </div>\n            <button id=\"approveButton\" type=\"submit\" name=\"action\" value=\"approve\" class=\"btn btn-success\">Approve</button>\n            <button id=\"rejectButton\" type=\"submit\" name=\"action\" value=\"reject\" class=\"btn btn-danger\">Reject</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/all_claim_history.html", "path": "claims/templates/claims/all_claim_history.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"allClaimHistoryTitle\" class=\"mt-3\">All Claim History</h2>\n        <ul id=\"allClaimList\" class=\"list-group\">\n            {% for claim in claims %}\n                <li class=\"list-group-item\" id=\"claimItem-{{ claim.id }}\">\n                    {{ claim.employee.username }} - {{ claim.subject }} - {{ claim.amount }} - {{ claim.status }}\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/filtered_claims.html", "path": "claims/templates/claims/filtered_claims.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"filteredClaimsTitle\" class=\"mt-3\">Filtered Claims</h2>\n        <ul id=\"filteredClaimList\" class=\"list-group\">\n            {% for claim in claims %}\n                <li class=\"list-group-item\" id=\"claimItem-{{ claim.id }}\">\n                    {{ claim.employee.username }} - {{ claim.subject }} - {{ claim.amount }} - {{ claim.status }}\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/expense_reports.html", "path": "claims/templates/claims/expense_reports.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"expenseReportsTitle\" class=\"mt-3\">Expense Reports</h2>\n        <p id=\"reportInstructions\">Generate Expense Reports Here</p>\n        <!-- Add report generation form/links here -->\n    </div>\n{% endblock %}"}, {"file": "templates/claims/budget_management.html", "path": "claims/templates/claims/budget_management.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"budgetManagementTitle\" class=\"mt-3\">Budget Management</h2>\n        <form id=\"budgetForm\" method=\"post\" class=\"mt-3\">\n            {% csrf_token %}\n            <div class=\"form-group\">\n                <label for=\"subjectSelect\">Subject:</label>\n                <select name=\"subject\" id=\"subjectSelect\" class=\"form-control\">\n                    <option value=\"Travel\">Travel</option>\n                    <option value=\"Labor\">Labor</option>\n                    <option value=\"Management\">Management</option>\n                    <option value=\"Equipment\">Equipment</option>\n                </select>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"limitInput\">Limit:</label>\n                <input type=\"number\" name=\"limit\" id=\"limitInput\" class=\"form-control\">\n            </div>\n            <button id=\"setBudgetButton\" type=\"submit\" class=\"btn btn-primary\">Set Budget</button>\n        </form>\n\n        <h3 id=\"currentBudgetsTitle\" class=\"mt-3\">Current Budgets</h3>\n        <ul id=\"budgetList\" class=\"list-group\">\n            {% for budget in budgets %}\n                <li class=\"list-group-item\" id=\"budgetItem-{{ budget.id }}\">{{ budget.subject }}: {{ budget.limit }}</li>\n            {% endfor %}\n        </ul>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/budget_utilization.html", "path": "claims/templates/claims/budget_utilization.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"budgetUtilizationTitle\" class=\"mt-3\">Budget Utilization</h2>\n        <table id=\"utilizationTable\" class=\"table\">\n            <thead>\n                <tr>\n                    <th>Subject</th>\n                    <th>Limit</th>\n                    <th>Spent</th>\n                    <th>Remaining</th>\n                </tr>\n            </thead>\n            <tbody>\n                {% for subject, data in utilization.items() %}\n                    <tr id=\"utilizationRow-{{ subject }}\">\n                        <td>{{ subject }}</td>\n                        <td>{{ data.limit }}</td>\n                        <td>{{ data.spent }}</td>\n                        <td>{{ data.remaining }}</td>\n                    </tr>\n                {% endfor %}\n            </tbody>\n        </table>\n    </div>\n{% endblock %}"}, {"file": "templates/claims/budget_analysis.html", "path": "claims/templates/claims/budget_analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2 id=\"budgetAnalysisTitle\" class=\"mt-3\">Budget Analysis</h2>\n        <p id=\"analysisInstructions\">Analyze Budgets Here</p>\n          <!-- Add budget analysis results/charts here -->\n    </div>\n{% endblock %}"}, {"file": "static/css/styles.css", "path": "static/css/styles.css", "code": "/* Custom CSS styles */\nbody {\n    font-family: sans-serif;\n}\n\n.container {\n    margin-top: 20px;\n}"}, {"file": "templates/base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Claim Management System</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <link rel=\"stylesheet\" href=\"/static/css/styles.css\">\n</head>\n<body>\n    <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\n        <a class=\"navbar-brand\" href=\"#\">Claims</a>\n        <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span class=\"navbar-toggler-icon\"></span>\n        </button>\n        <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\n            <ul class=\"navbar-nav\">\n                {% if user.is_authenticated %}\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'claim_history' %}\">Claim History</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'submit_claim' %}\">Submit Claim</a>\n                    </li>\n                    {% if user.is_staff %}\n                        <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{% url 'admin_dashboard' %}\">Admin Dashboard</a>\n                        </li>\n                         <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{% url 'all_claim_history' %}\">All Claims</a>\n                        </li>\n                         <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{% url 'budget_management' %}\">Budget Management</a>\n                        </li>\n                         <li class=\"nav-item\">\n                            <a class=\"nav-link\" href=\"{% url 'budget_utilization' %}\">Budget Utilization</a>\n                        </li>\n                    {% endif %}\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'logout' %}\">Logout</a>\n                    </li>\n                {% else %}\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'login' %}\">Login</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" href=\"{% url 'register' %}\">Register</a>\n                    </li>\n                {% endif %}\n            </ul>\n        </div>\n    </nav>\n\n    <div class=\"container\">\n        {% if messages %}\n            {% for message in messages %}\n                <div class=\"alert alert-{{ message.tags }}\">{{ message }}</div>\n            {% endfor %}\n        {% endif %}\n\n        {% block content %}\n        {% endblock %}\n    </div>\n\n    <script src=\"https://code.jquery.com/jquery-3.5.1.slim.min.js\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.3/dist/umd/popper.min.js\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js\"></script>\n</body>\n</html>"}, {"file": "claims/templates/registration/login.html", "path": "claims/templates/registration/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2>Login</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Login</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "claims/templates/registration/register.html", "path": "claims/templates/registration/register.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <div class=\"container\">\n        <h2>Register</h2>\n        <form method=\"post\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Register</button>\n        </form>\n    </div>\n{% endblock %}"}, {"file": "config/__init__.py", "path": "config/__init__.py", "code": "from .celery import app as celery_app\n\n__all__ = ('celery_app',)"}, {"file": "requirements.txt", "path": "requirements.txt", "code": "Django\npython-dotenv\npsycopg2-binary"}], "14": [{"file": "views.py", "path": "myproject/myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef homepage(request):\n    return HttpResponse('<h1>Hello, world!</h1>', content_type='text/html')\n"}, {"file": "urls.py", "path": "myproject/myapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n]"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}, {"file": "settings.py", "path": "myproject/myproject/settings.py", "code": "import os\n\n# Build paths inside the project like this: os.path.join(BASE_DIR, ...)\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/3.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.1/howto/static-files/\n\nSTATIC_URL = '/static/'\n"}, {"file": "wsgi.py", "path": "myproject/myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myproject/views.py", "code": "from django.shortcuts import render, redirect\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "myproject/templates/home.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Homepage</title>\n</head>\n<body>\n    <div id=\"home-container\" class=\"container\">\n        <h1 id=\"welcome-heading\" class=\"main-heading\">Welcome!</h1>\n        <a id=\"helloworld-link\" href=\"{% url 'helloworld' %}\"><button id=\"helloworld-button\" class=\"btn btn-primary\">Go to Hello World</button></a>\n    </div>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myproject/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Hello World</title>\n</head>\n<body>\n    <div id=\"helloworld-container\" class=\"container\">\n        <h1 id=\"helloworld-heading\" class=\"main-heading\">Hello, World!</h1>\n    </div>\n</body>\n</html>"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "import os\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-your_secret_key_here'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myproject', # Add your app name here\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'myproject.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Add your templates directory\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'myproject.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\n\nSTATIC_URL = 'static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')] # Added this line\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"}, {"file": "models.py", "path": "myproject/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "apps.py", "path": "myproject/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MyprojectConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myproject'"}, {"file": "wsgi.py", "path": "myproject/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\napplication = get_wsgi_application()"}, {"file": "asgi.py", "path": "myproject/asgi.py", "code": "import os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n\nfrom channels.routing import ProtocolTypeRouter\n\napplication = ProtocolTypeRouter({\n    \"http\": get_asgi_application(),\n    # Just HTTP for now. (We can add other protocols later.)\n})"}, {"file": "manage.py", "path": "myproject/manage.py", "code": "#!/usr/bin/env python\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it is installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}, {"file": "admin.py", "path": "myproject/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "import json\n\ndef start_game():\n    pass\n\ndef quit_game():\n    pass\n\ndef main_menu():\n    pass\n"}, {"file": "exploration.py", "path": "src/exploration.py", "code": "import random\n\ndef explore_area(player, level):\n    pass\n\ndef find_items(player):\n    pass\n\ndef encounter_monsters(player, level):\n    pass\n\ndef level_progression(level):\n    pass\n"}, {"file": "combat.py", "path": "src/combat.py", "code": "import random\n\ndef attack(player, monster):\n    pass\n\ndef run(player):\n    pass\n\ndef monster_attack(player, monster):\n    pass\n\ndef victory(player):\n    pass\n\ndef defeat(player):\n    pass\n"}, {"file": "inventory.py", "path": "src/inventory.py", "code": "import json\n\ndef view_inventory(player):\n    pass\n\ndef use_items(player, item):\n    pass\n\ndef equip_items(player, item):\n    pass\n\ndef manage_inventory(player):\n    pass\n"}, {"file": "status_display.py", "path": "src/status_display.py", "code": "import json\n\ndef display_health(player):\n    pass\n\ndef display_attack(player):\n    pass\n\ndef display_defense(player):\n    pass\n\ndef display_inventory(player):\n    pass\n\ndef display_level(level):\n    pass\n"}, {"file": "game.py", "path": "src/game.py", "code": "import json\nfrom src import main_menu, exploration, combat, inventory, status_display\n\ndef main():\n    pass\n\nif __name__ == \"__main__\":\n    main()\n"}], "19": [{"file": "data_loading.py", "path": "src/data_loading.py", "code": "import pandas as pd\nimport os\n\n\ndef load_data(file_path):\n    \"\"\"Loads the data from the specified CSV file.\n\n    Args:\n        file_path (str): The path to the CSV file.\n\n    Returns:\n        pandas.DataFrame: The loaded data, or None if an error occurred.\n    \"\"\"\n    try:\n        if not os.path.exists(file_path):\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        df = pd.read_csv(file_path)\n        if 'Date of death' not in df.columns:\n            raise ValueError(\"Column 'Date of death' not found.\")\n\n        # Data Type validation - basic check, can be improved with regex or date parsing\n        # Example:\n        # try:\n        #     pd.to_datetime(df['Date of death'], errors='raise')\n        # except ValueError:\n        #     raise ValueError(\"'Date of death' column contains invalid date formats.\")\n\n        return df\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n        return None\n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return None\n\nif __name__ == '__main__':\n    # Example usage\n    file_path = 'Deathlist.csv'  # Replace with the actual path\n    data = load_data(file_path)\n\n    if data is not None:\n        print(\"Data loaded successfully.\")\n        print(data.head())\n"}, {"file": "date_processing.py", "path": "src/date_processing.py", "code": "import pandas as pd\n\n\ndef process_dates(df):\n    \"\"\"Processes the 'Date of death' column to extract dates and calculate week numbers.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame containing the 'Date of death' column.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with added 'Death Date' and 'Week Number' columns, or None if an error occurred.\n    \"\"\"\n    try:\n        # Ensure the column exists\n        if 'Date of death' not in df.columns:\n            raise ValueError(\"Column 'Date of death' not found.\")\n\n        # Convert to datetime objects, handling errors\n        df['Death Date'] = pd.to_datetime(df['Date of death'], errors='coerce').dt.date\n\n        # Handle Invalid Dates (NaN values after conversion)\n        df = df.dropna(subset=['Death Date'])\n\n        # Calculate Week Number\n        df['Week Number'] = pd.to_datetime(df['Death Date']).dt.isocalendar().week\n\n        return df\n\n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return None\n\n\nif __name__ == '__main__':\n    # Example usage (requires a sample DataFrame)\n    data = {'Date of death': ['2023-01-05', '2023-01-12', '2023-01-19', 'invalid date', '2023-01-26']}\n    df = pd.DataFrame(data)\n\n    processed_df = process_dates(df)\n\n    if processed_df is not None:\n        print(\"Date processing successful.\")\n        print(processed_df)\n"}, {"file": "histogram_generation.py", "path": "src/histogram_generation.py", "code": "import pandas as pd\n\n\ndef generate_histogram_data(df):\n    \"\"\"Generates histogram data from the DataFrame, counting deaths per week.\n\n    Args:\n        df (pandas.DataFrame): The DataFrame containing the 'Week Number' column.\n\n    Returns:\n        pandas.DataFrame: A DataFrame with 'Week Number' and 'Death Count' columns, or None if an error occurred.\n    \"\"\"\n    try:\n        if 'Week Number' not in df.columns:\n            raise ValueError(\"Column 'Week Number' not found.\")\n\n        # Count Weekly Deaths\n        weekly_deaths = df['Week Number'].value_counts().sort_index().reset_index()\n        weekly_deaths.columns = ['Week Number', 'Death Count']\n\n        # Sort Weekly Deaths (already sorted by value_counts().sort_index())\n\n        return weekly_deaths\n\n    except ValueError as e:\n        print(f\"Error: {e}\")\n        return None\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return None\n\n\nif __name__ == '__main__':\n    # Example Usage (requires a sample DataFrame)\n    data = {'Week Number': [1, 1, 2, 3, 3, 3, 4]}\n    df = pd.DataFrame(data)\n\n    histogram_data = generate_histogram_data(df)\n\n    if histogram_data is not None:\n        print(\"Histogram data generated successfully.\")\n        print(histogram_data)\n"}, {"file": "output_display.py", "path": "src/output_display.py", "code": "import pandas as pd\n\n\ndef display_histogram(histogram_data):\n    \"\"\"Displays the histogram data in a readable format on the console.\n\n    Args:\n        histogram_data (pandas.DataFrame): A DataFrame with 'Week Number' and 'Death Count' columns.\n    \"\"\"\n    if histogram_data is None or histogram_data.empty:\n        print(\"No death data available to display.\")\n        return\n\n    print(\"Weekly Death Count Histogram:\")\n    for index, row in histogram_data.iterrows():\n        week_number = row['Week Number']\n        death_count = row['Death Count']\n        print(f\"Week {int(week_number)}: {'*' * death_count} ({death_count} deaths)\")\n\nif __name__ == '__main__':\n    # Example Usage (requires sample histogram data)\n    data = {'Week Number': [1, 2, 3, 4],\n            'Death Count': [2, 5, 1, 3]}\n    histogram_data = pd.DataFrame(data)\n\n    display_histogram(histogram_data)\n"}, {"file": "main.py", "path": "src/main.py", "code": "from src import data_loading\nfrom src import date_processing\nfrom src import histogram_generation\nfrom src import output_display\n\n\ndef main():\n    file_path = 'Deathlist.csv'  # Replace with the actual path\n\n    # 1. Data Loading\n    df = data_loading.load_data(file_path)\n    if df is None:\n        return\n\n    # 2. Date Processing\n    df = date_processing.process_dates(df)\n    if df is None:\n        return\n\n    # 3. Histogram Generation\n    histogram_data = histogram_generation.generate_histogram_data(df)\n    if histogram_data is None:\n        return\n\n    # 4. Output Display\n    output_display.display_histogram(histogram_data)\n\nif __name__ == \"__main__\":\n    main()\n"}, {"file": "Deathlist.csv", "path": "data/Deathlist.csv", "code": "Date of death,Other Column\n2023-01-05,Some Value\n2023-01-12,Another Value\n2023-01-19,Yet Another Value\n2023-01-26,A Value\n2023-02-02,Test Value\n2023-02-09,A Value\n2023-02-16,Test Value\n2023-02-23,A Value\n2023-03-02,Test Value\n2023-03-09,A Value\n2023-03-16,Test Value\n2023-03-23,A Value\n2023-03-30,Test Value\n2023-04-06,A Value\n2023-04-13,Test Value\n2023-04-20,A Value\n2023-04-27,Test Value\n2023-05-04,A Value\n2023-05-11,Test Value\n2023-05-18,A Value\n2023-05-25,Test Value\n2023-06-01,A Value\n2023-06-08,Test Value\n2023-06-15,A Value\n2023-06-22,Test Value\n2023-06-29,A Value\n2023-07-06,Test Value\n2023-07-13,A Value\n2023-07-20,Test Value\n2023-07-27,A Value"}], "20": [{"file": "urls.py", "path": "blog_project/blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.homepage, name='homepage'),\n    path('post/<int:post_id>/', views.post_detail, name='post_detail'),\n    path('category/<int:category_id>/', views.category_page, name='category_page'),\n    path('search/', views.search_results, name='search_results'),\n    path('about/', views.about_us, name='about_us'),\n    path('contact/', views.contact_page, name='contact_page'),\n]"}, {"file": "views.py", "path": "blog_project/blog/views.py", "code": "from django.shortcuts import render, get_object_or_404\nfrom django.http import HttpResponse\n\ndef homepage(request):\n    # Implement logic for Homepage functions (Headline, Featured Posts, etc.)\n    return render(request, 'blog/homepage.html')\n\ndef post_detail(request, post_id):\n    # Implement logic for Blog Post Page functions (Title, Author, Content, etc.)\n    return render(request, 'blog/post_detail.html', {'post_id': post_id})\n\ndef category_page(request, category_id):\n    # Implement logic for Category Page functions (Category Title, Post List, etc.)\n    return render(request, 'blog/category_page.html', {'category_id': category_id})\n\ndef search_results(request):\n    # Implement logic for Search Results Page functions (Search Query, Results List, etc.)\n    return render(request, 'blog/search_results.html')\n\ndef about_us(request):\n    # Implement logic for About Us Page functions (Detailed Information, Author Bios, etc.)\n    return render(request, 'blog/about_us.html')\n\ndef contact_page(request):\n    # Implement logic for Contact Page functions (Contact Form, Email, etc.)\n    return render(request, 'blog/contact_page.html')"}, {"file": "models.py", "path": "blog_project/blog/models.py", "code": "from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Post(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    author = models.CharField(max_length=100)\n    pub_date = models.DateTimeField(auto_now_add=True)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return self.title"}, {"file": "homepage.html", "path": "blog_project/blog/templates/blog/homepage.html", "code": "<div id=\"homepage\" class=\"homepage\">\n    <h1 id=\"homepage-title\" class=\"homepage-title\">Homepage</h1>\n    <p id=\"homepage-description\" class=\"homepage-description\">Implement Headline & Tagline, Featured Posts, Category Navigation, Search Bar, About Us Snippet, Recent Posts, Call to Action, Responsive Design here</p>\n</div>"}, {"file": "post_detail.html", "path": "blog_project/blog/templates/blog/post_detail.html", "code": "<div id=\"post-detail\" class=\"post-detail\">\n    <h1 id=\"post-detail-title\" class=\"post-detail-title\">Post Detail</h1>\n    <p id=\"post-detail-description\" class=\"post-detail-description\">Implement Clear Title, Author Information, Publish Date, Well-Formatted Content, Relevant Images/Videos, Social Sharing Buttons, Comment Section, Related Posts, Table of Contents here</p>\n</div>"}, {"file": "category_page.html", "path": "blog_project/blog/templates/blog/category_page.html", "code": "<div id=\"category-page\" class=\"category-page\">\n    <h1 id=\"category-page-title\" class=\"category-page-title\">Category Page</h1>\n    <p id=\"category-page-description\" class=\"category-page-description\">Implement Category Title, List of Posts, Post Excerpts, Pagination, Filtering Options here</p>\n</div>"}, {"file": "search_results.html", "path": "blog_project/blog/templates/blog/search_results.html", "code": "<div id=\"search-results\" class=\"search-results\">\n    <h1 id=\"search-results-title\" class=\"search-results-title\">Search Results</h1>\n    <p id=\"search-results-description\" class=\"search-results-description\">Implement Search Query Display, List of Relevant Posts, Clear Search Results, No Results Message, Search Bar here</p>\n</div>"}, {"file": "about_us.html", "path": "blog_project/blog/templates/blog/about_us.html", "code": "<div id=\"about-us\" class=\"about-us\">\n    <h1 id=\"about-us-title\" class=\"about-us-title\">About Us</h1>\n    <p id=\"about-us-description\" class=\"about-us-description\">Implement Detailed Information, Author Biographies, Contact Information, Mission Statement here</p>\n</div>"}, {"file": "contact_page.html", "path": "blog_project/blog/templates/blog/contact_page.html", "code": "<div id=\"contact-page\" class=\"contact-page\">\n    <h1 id=\"contact-page-title\" class=\"contact-page-title\">Contact Page</h1>\n    <p id=\"contact-page-description\" class=\"contact-page-description\">Implement Contact Form, Email Address, Social Media Links, Success Message here</p>\n</div>"}, {"file": "settings.py", "path": "blog_project/blog_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\nSECRET_KEY = 'your_secret_key_here'\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'blog',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'blog_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'blog/templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'blog_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_L10N = True\nUSE_TZ = True\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'blog/static')]\n"}, {"file": "urls.py", "path": "blog_project/blog_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('blog.urls')),\n]"}, {"file": "wsgi.py", "path": "blog_project/blog_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n\napplication = get_wsgi_application()"}, {"file": "admin.py", "path": "blog_project/blog/admin.py", "code": "from django.contrib import admin\nfrom .models import Post, Category\n\nadmin.site.register(Post)\nadmin.site.register(Category)"}, {"file": "manage.py", "path": "blog_project/manage.py", "code": "import os\nimport sys\n\n\ndef main():\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'blog_project.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and available on your PYTHONPATH environment variable? Did you forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()"}]}