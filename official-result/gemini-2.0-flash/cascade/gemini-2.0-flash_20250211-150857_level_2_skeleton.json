{"1": [{"file": "urls.py", "path": "bmi_calculator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calculate/', views.calculate_bmi, name='calculate_bmi'),\n]"}, {"file": "views.py", "path": "bmi_calculator/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\ndef home(request):\n    return render(request, 'bmi_calculator/home.html')\n\ndef calculate_bmi(request):\n    if request.method == 'POST':\n        height = float(request.POST.get('height'))\n        weight = float(request.POST.get('weight'))\n        height_unit = request.POST.get('height_unit')\n        weight_unit = request.POST.get('weight_unit')\n\n        if height_unit == 'cm':\n            height = height / 100\n        if weight_unit == 'lbs':\n            weight = weight * 0.453592\n\n        bmi = weight / (height ** 2)\n        bmi = round(bmi, 2)\n\n        category = get_bmi_category(bmi)\n\n        return JsonResponse({\n            'bmi': bmi,\n            'category': category\n        })\n    else:\n        return JsonResponse({'error': 'Invalid request method'}) \n\ndef get_bmi_category(bmi):\n    if bmi < 18.5:\n        return 'Underweight'\n    elif 18.5 <= bmi < 25:\n        return 'Normal'\n    elif 25 <= bmi < 30:\n        return 'Overweight'\n    else:\n        return 'Obese'"}, {"file": "models.py", "path": "bmi_calculator/models.py", "code": "from django.db import models\n\n# You may add models here if needed, e.g., for storing user data\n"}, {"file": "forms.py", "path": "bmi_calculator/forms.py", "code": "from django import forms\n\n# You may add forms here if needed, e.g., for validating user input\n"}, {"file": "home.html", "path": "bmi_calculator/templates/bmi_calculator/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1>Welcome to the BMI Calculator</h1>\n    <p>This calculator helps you determine your Body Mass Index (BMI) based on your height and weight.</p>\n    <a href=\"#\" id=\"calculator-link\">Go to Calculator</a>\n\n    <div id=\"calculator\" style=\"display:none;\">\n        <h2>BMI Calculator</h2>\n        <label for=\"height\">Height:</label>\n        <input type=\"number\" id=\"height\" name=\"height\">\n        <select id=\"height_unit\" name=\"height_unit\">\n            <option value=\"cm\">cm</option>\n            <option value=\"inches\">inches</option>\n        </select><br><br>\n\n        <label for=\"weight\">Weight:</label>\n        <input type=\"number\" id=\"weight\" name=\"weight\">\n        <select id=\"weight_unit\" name=\"weight_unit\">\n            <option value=\"kg\">kg</option>\n            <option value=\"lbs\">lbs</option>\n        </select><br><br>\n\n        <button id=\"calculate\">Calculate</button>\n        <button id=\"reset\">Reset</button><br><br>\n\n        <div id=\"result\" style=\"display:none;\">\n            <p>Your BMI: <span id=\"bmi\"></span></p>\n            <p>Category: <span id=\"category\"></span></p>\n        </div>\n    </div>\n    \n    <script>\n        document.getElementById('calculator-link').addEventListener('click', function(event){\n            event.preventDefault();\n            document.getElementById('calculator').style.display = 'block';\n        });\n\n        document.getElementById('calculate').addEventListener('click', function() {\n            var height = document.getElementById('height').value;\n            var weight = document.getElementById('weight').value;\n            var height_unit = document.getElementById('height_unit').value;\n            var weight_unit = document.getElementById('weight_unit').value;\n\n            fetch('/calculate/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'\n                },\n                body: 'height=' + height + '&weight=' + weight + '&height_unit=' + height_unit + '&weight_unit=' + weight_unit\n            })\n            .then(response => response.json())\n            .then(data => {\n                document.getElementById('bmi').textContent = data.bmi;\n                document.getElementById('category').textContent = data.category;\n                document.getElementById('result').style.display = 'block';\n            });\n        });\n\n        document.getElementById('reset').addEventListener('click', function() {\n            document.getElementById('height').value = '';\n            document.getElementById('weight').value = '';\n            document.getElementById('result').style.display = 'none';\n        });\n    </script>\n</body>\n</html>"}], "2": [{"file": "models.py", "path": "currency_converter/models.py", "code": "from django.db import models\n\n# Example model (can be extended based on requirements)\nclass ExchangeRate(models.Model):\n    base_currency = models.CharField(max_length=3)\n    target_currency = models.CharField(max_length=3)\n    rate = models.FloatField()\n    timestamp = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'{self.base_currency} to {self.target_currency} at {self.rate}'"}, {"file": "views.py", "path": "currency_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import JsonResponse\n\n\ndef home(request):\n    # Placeholder for currency selection and conversion logic\n    context = {}\n    return render(request, 'currency_converter/home.html', context)\n\n\ndef convert_currency(request):\n    if request.method == 'POST':\n        # Placeholder for handling conversion logic\n        base_currency = request.POST.get('base_currency')\n        target_currency = request.POST.get('target_currency')\n        amount = float(request.POST.get('amount'))\n\n        # Dummy conversion result\n        conversion_result = amount * 1.15  # Replace with actual calculation\n        exchange_rate = 1.15 # Replace with actual value\n\n        return JsonResponse({\n            'converted_amount': conversion_result,\n            'exchange_rate': exchange_rate\n        })\n    else:\n        return JsonResponse({'error': 'Invalid request method'})"}, {"file": "urls.py", "path": "currency_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert_currency, name='convert_currency'),\n]"}, {"file": "forms.py", "path": "currency_converter/forms.py", "code": "from django import forms\n\n# Placeholder for forms if needed, e.g., for settings\nclass SettingsForm(forms.Form):\n    default_base_currency = forms.CharField(max_length=3, label='Default Base Currency')\n    default_target_currency = forms.CharField(max_length=3, label='Default Target Currency')"}, {"file": "home.html", "path": "currency_converter/templates/currency_converter/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Currency Converter</title>\n</head>\n<body>\n    <h1>Currency Converter</h1>\n\n    <label for=\"base_currency\">Base Currency:</label>\n    <select id=\"base_currency\" name=\"base_currency\">\n        <option value=\"USD\">USD</option>\n        <option value=\"EUR\">EUR</option>\n        <option value=\"GBP\">GBP</option>\n        <!-- Add more currencies -->\n    </select><br><br>\n\n    <label for=\"target_currency\">Target Currency:</label>\n    <select id=\"target_currency\" name=\"target_currency\">\n        <option value=\"USD\">USD</option>\n        <option value=\"EUR\">EUR</option>\n        <option value=\"GBP\">GBP</option>\n        <!-- Add more currencies -->\n    </select><br><br>\n\n    <label for=\"amount\">Amount:</label>\n    <input type=\"number\" id=\"amount\" name=\"amount\" value=\"1.00\"><br><br>\n\n    <button id=\"convert_button\">Convert</button>\n\n    <div id=\"conversion_result\"></div>\n\n    <script>\n        document.getElementById('convert_button').addEventListener('click', function() {\n            var baseCurrency = document.getElementById('base_currency').value;\n            var targetCurrency = document.getElementById('target_currency').value;\n            var amount = document.getElementById('amount').value;\n\n            fetch('/convert/', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded',\n                    'X-CSRFToken': '{{ csrf_token }}'  // Ensure CSRF token is included\n                },\n                body: 'base_currency=' + baseCurrency + '&target_currency=' + targetCurrency + '&amount=' + amount\n            })\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                    document.getElementById('conversion_result').innerText = 'Error: ' + data.error;\n                } else {\n                    document.getElementById('conversion_result').innerText = 'Converted Amount: ' + data.converted_amount + ' ' + targetCurrency + ' (Exchange Rate: ' + data.exchange_rate + ')';\n                }\n            });\n        });\n    </script>\n</body>\n</html>"}, {"file": "settings.py", "path": "currency_converter/settings.py", "code": "import os\n\n# ... other settings ...\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'currency_converter', 'templates')],  # Corrected path\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = [os.path.join(BASE_DIR, 'currency_converter', 'static')]\n"}], "3": [{"file": "urls.py", "path": "password_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('password_options/', views.password_options, name='password_options'),\n    path('generated_password/', views.generated_password, name='generated_password'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "password_generator/views.py", "code": "from django.shortcuts import render\nimport random\nimport string\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef password_options(request):\n    return render(request, 'password_options.html')\n\ndef generated_password(request):\n    length = int(request.GET.get('length', 12))\n    include_uppercase = request.GET.get('uppercase') == 'on'\n    include_lowercase = request.GET.get('lowercase') == 'on'\n    include_numbers = request.GET.get('numbers') == 'on'\n    include_symbols = request.GET.get('symbols') == 'on'\n\n    characters = ''\n    if include_uppercase:\n        characters += string.ascii_uppercase\n    if include_lowercase:\n        characters += string.ascii_lowercase\n    if include_numbers:\n        characters += string.digits\n    if include_symbols:\n        characters += string.punctuation\n\n    if not characters:\n        characters = string.ascii_letters  # Default to letters if no options are selected\n\n    generated_password = ''.join(random.choice(characters) for i in range(length))\n\n    return render(request, 'generated_password.html', {'password': generated_password})\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Password Generator!</h1>\n    <p>Use this tool to generate strong and secure passwords.</p>\n    <a href=\"{% url 'password_options' %}\"><button>Generate Password</button></a>\n    {% if False %}<p>Example welcome message.</p>{% endif %}\n</body>\n</html>"}, {"file": "password_options.html", "path": "templates/password_options.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Password Options</title>\n</head>\n<body>\n    <h1>Password Options</h1>\n    <form action=\"{% url 'generated_password' %}\" method=\"get\">\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" value=\"12\"><br><br>\n\n        <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\">\n        <label for=\"uppercase\">Include Uppercase Letters</label><br><br>\n\n        <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\">\n        <label for=\"lowercase\">Include Lowercase Letters</label><br><br>\n\n        <input type=\"checkbox\" id=\"numbers\" name=\"numbers\">\n        <label for=\"numbers\">Include Numbers</label><br><br>\n\n        <input type=\"checkbox\" id=\"symbols\" name=\"symbols\">\n        <label for=\"symbols\">Include Symbols</label><br><br>\n\n        <button type=\"submit\">Generate Password</button>\n    </form>\n</body>\n</html>"}, {"file": "generated_password.html", "path": "templates/generated_password.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Generated Password</title>\n</head>\n<body>\n    <h1>Generated Password</h1>\n    <p>Your generated password is: <strong>{{ password }}</strong></p>\n    <button onclick=\"copyToClipboard()\">Copy to Clipboard</button>\n\n    <script>\n        function copyToClipboard() {\n            navigator.clipboard.writeText('{{ password }}');\n            alert('Password copied to clipboard!');\n        }\n    </script>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Password Generator</h1>\n    <p>This website is a simple password generator that allows you to create strong and secure passwords based on your specified criteria.</p>\n</body>\n</html>"}], "4": [{"file": "urls.py", "path": "qrcode_generator/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('generate/', views.generate_qr, name='generate_qr'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "qrcode_generator/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nimport qrcode\nfrom io import BytesIO\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef generate_qr(request):\n    if request.method == 'POST':\n        text = request.POST.get('text')\n        box_size = int(request.POST.get('box_size') or 10) #Default value\n        error_correction = request.POST.get('error_correction') or 'medium' # Default value\n        border_size = int(request.POST.get('border_size') or 4) # Default value\n        fill_color = request.POST.get('fill_color') or 'black' # Default value\n        back_color = request.POST.get('back_color') or 'white' # Default value\n\n        if not text:\n            return render(request, 'qr_code_generator.html', {'error': 'Please enter some text or URL.'})\n        if box_size > 128:\n            return render(request, 'qr_code_generator.html', {'error': 'Box size cannot exceed 128.'})\n        if border_size > 10:\n            return render(request, 'qr_code_generator.html', {'error': 'Border size cannot exceed 10.'})\n        \n        error_correction_levels = {\n            'small': qrcode.ERROR_CORRECT_L,\n            'medium': qrcode.ERROR_CORRECT_M,\n            'large': qrcode.ERROR_CORRECT_H\n        }\n\n        qr = qrcode.QRCode(\n            version=1,\n            error_correction=error_correction_levels.get(error_correction, qrcode.ERROR_CORRECT_M),\n            box_size=box_size,\n            border=border_size,\n        )\n        qr.add_data(text)\n        qr.make(fit=True)\n\n        img = qr.make_image(fill_color=fill_color, back_color=back_color)\n        \n        buffer = BytesIO()\n        img.save(buffer, 'PNG')\n        img_data = buffer.getvalue()\n\n        return render(request, 'qr_code_generator.html', {'qr_code': img_data.hex()})\n    else:\n        return render(request, 'qr_code_generator.html')\n\ndef about(request):\n    return render(request, 'about.html')\n"}, {"file": "models.py", "path": "qrcode_generator/models.py", "code": "from django.db import models\n\n# Create your models here.\n"}, {"file": "admin.py", "path": "qrcode_generator/admin.py", "code": "from django.contrib import admin\n\n# Register your models here.\n"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1>Welcome to QR Code Generator</h1>\n    <p>Generate QR codes easily.</p>\n    <a href=\"{% url 'generate_qr' %}\"><button>Generate QR Code</button></a>\n    <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "qr_code_generator.html", "path": "templates/qr_code_generator.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1>QR Code Generator</h1>\n\n    {% if error %}\n        <p style=\"color: red;\">{{ error }}</p>\n    {% endif %}\n\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"text\">Text/URL:</label>\n        <input type=\"text\" id=\"text\" name=\"text\"><br><br>\n\n        <label for=\"box_size\">Box Size (1-128):</label>\n        <input type=\"number\" id=\"box_size\" name=\"box_size\" min=\"1\" max=\"128\" value=\"10\"><br><br>\n\n        <label for=\"error_correction\">Error Correction:</label>\n        <select id=\"error_correction\" name=\"error_correction\">\n            <option value=\"small\">Small</option>\n            <option value=\"medium\" selected>Medium</option>\n            <option value=\"large\">Large</option>\n        </select><br><br>\n\n        <label for=\"border_size\">Border Size (1-10):</label>\n        <input type=\"number\" id=\"border_size\" name=\"border_size\" min=\"1\" max=\"10\" value=\"4\"><br><br>\n\n        <label for=\"fill_color\">Fill Color:</label>\n        <input type=\"color\" id=\"fill_color\" name=\"fill_color\" value=\"#000000\"><br><br>\n\n        <label for=\"back_color\">Background Color:</label>\n        <input type=\"color\" id=\"back_color\" name=\"back_color\" value=\"#FFFFFF\"><br><br>\n\n        <button type=\"submit\">Generate QR Code</button>\n    </form>\n\n    {% if qr_code %}\n        <h2>Generated QR Code:</h2>\n        <img src=\"data:image/png;base64,{{ qr_code }}\" alt=\"QR Code\">\n        <a href=\"data:image/png;base64,{{ qr_code }}\" download=\"qrcode.png\">Download QR Code</a>\n    {% endif %}\n\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About This Website</h1>\n    <p>This website is a simple QR code generator.</p>\n    <p>It allows you to generate QR codes from text or URLs.</p>\n\n    <h2>Privacy Policy</h2>\n    <p>We do not store any of your data.</p>\n\n    <h2>Terms of Service</h2>\n    <p>Use this website at your own risk.</p>\n\n    <a href=\"{% url 'home' %}\">Home</a>\n</body>\n</html>"}, {"file": "settings.py", "path": "qrcode_generator_project/settings.py", "code": "#Add 'qrcode_generator' to INSTALLED_APPS\n#Add 'templates' directory to TEMPLATES -> DIRS"}], "5": [{"file": "urls.py", "path": "markdown_converter/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('convert/', views.convert, name='convert'),\n    path('about/', views.about, name='about'),\n]"}, {"file": "views.py", "path": "markdown_converter/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\nimport markdown\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html_output = markdown.markdown(markdown_text)\n        return render(request, 'convert.html', {'html_output': html_output, 'markdown_text':markdown_text})\n    else:\n        return render(request, 'convert.html')\n\ndef about(request):\n    return render(request, 'about.html')"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Markdown to HTML Converter</h1>\n    <p>This tool allows you to convert Markdown text into HTML.</p>\n    <a href=\"{% url 'convert' %}\">Convert</a> | <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "convert.html", "path": "templates/convert.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Convert</title>\n</head>\n<body>\n    <h1>Markdown to HTML Converter</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <textarea name=\"markdown_text\" rows=\"10\" cols=\"50\">{% if markdown_text %}{{ markdown_text }}{% endif %}</textarea><br><br>\n        <button type=\"submit\">Convert</button>\n    </form>\n\n    {% if html_output %}\n        <h2>HTML Output:</h2>\n        <div style=\"border: 1px solid black; padding: 10px;\">\n            {{ html_output|safe }}\n        </div>\n    {% endif %}\n\n    <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'about' %}\">About</a>\n</body>\n</html>"}, {"file": "about.html", "path": "templates/about.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>About</title>\n</head>\n<body>\n    <h1>About</h1>\n    <p>This Markdown to HTML converter was developed by...</p>\n    <a href=\"{% url 'home' %}\">Home</a> | <a href=\"{% url 'convert' %}\">Convert</a>\n</body>\n</html>"}, {"file": "models.py", "path": "markdown_converter/models.py", "code": "from django.db import models\n\n# Create your models here."}, {"file": "admin.py", "path": "markdown_converter/admin.py", "code": "from django.contrib import admin\n\n# Register your models here."}, {"file": "apps.py", "path": "markdown_converter/apps.py", "code": "from django.apps import AppConfig\n\n\nclass MarkdownConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'markdown_converter'"}, {"file": "settings.py", "path": "your_project_name/settings.py", "code": "# Make sure markdown_converter is in INSTALLED_APPS\n#INSTALLED_APPS = [\n#    'markdown_converter',\n#]"}], "6": [{"file": "urls.py", "path": "todo_app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('todo_list/<int:list_id>/', views.todo_list, name='todo_list'),\n    path('task/<int:task_id>/', views.task_detail, name='task_detail'),\n    path('create_list/', views.create_list, name='create_list'),\n    path('add_task/<int:list_id>/', views.add_task, name='add_task'),\n    path('edit_task/<int:task_id>/', views.edit_task, name='edit_task'),\n    path('delete_task/<int:task_id>/', views.delete_task, name='delete_task'),\n    path('complete_task/<int:task_id>/', views.complete_task, name='complete_task'),\n    # Optional Analysis URLs\n    # path('analysis/', views.analysis, name='analysis'),\n]"}, {"file": "views.py", "path": "todo_app/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .models import TodoList, Task\nfrom .forms import TodoListForm, TaskForm\n\ndef home(request):\n    todo_lists = TodoList.objects.all()\n    # Placeholder for dashboard data, can be optimized\n    total_tasks = Task.objects.count()\n    completed_tasks = Task.objects.filter(completed=True).count()\n\n    context = {\n        'todo_lists': todo_lists,\n        'total_tasks': total_tasks,\n        'completed_tasks': completed_tasks,\n    }\n    return render(request, 'home.html', context)\n\n\ndef todo_list(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    tasks = Task.objects.filter(todo_list=todo_list)\n    context = {\n        'todo_list': todo_list,\n        'tasks': tasks,\n    }\n    return render(request, 'todo_list.html', context)\n\n\ndef task_detail(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    context = {\n        'task': task\n    }\n    return render(request, 'task_detail.html', context)\n\n\ndef create_list(request):\n    if request.method == 'POST':\n        form = TodoListForm(request.POST)\n        if form.is_valid():\n            form.save()\n            return redirect('home')\n    else:\n        form = TodoListForm()\n    return render(request, 'create_list.html', {'form': form})\n\n\ndef add_task(request, list_id):\n    todo_list = get_object_or_404(TodoList, pk=list_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST)\n        if form.is_valid():\n            task = form.save(commit=False)\n            task.todo_list = todo_list\n            task.save()\n            return redirect('todo_list', list_id=list_id)\n    else:\n        form = TaskForm()\n    return render(request, 'add_task.html', {'form': form, 'todo_list': todo_list})\n\n\ndef edit_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    if request.method == 'POST':\n        form = TaskForm(request.POST, instance=task)\n        if form.is_valid():\n            form.save()\n            return redirect('todo_list', list_id=task.todo_list.id)\n    else:\n        form = TaskForm(instance=task)\n    return render(request, 'edit_task.html', {'form': form, 'task': task})\n\n\ndef delete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    list_id = task.todo_list.id\n    task.delete()\n    return redirect('todo_list', list_id=list_id)\n\n\ndef complete_task(request, task_id):\n    task = get_object_or_404(Task, pk=task_id)\n    task.completed = True\n    task.save()\n    return redirect('todo_list', list_id=task.todo_list.id)\n\n# Optional Analysis view\n# def analysis(request):\n#     # Implement chart logic here\n#     return render(request, 'analysis.html')\n"}, {"file": "models.py", "path": "todo_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.name\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True, null=True)\n    completed = models.BooleanField(default=False)\n    due_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return self.title"}, {"file": "forms.py", "path": "todo_app/forms.py", "code": "from django import forms\nfrom .models import TodoList, Task\n\nclass TodoListForm(forms.ModelForm):\n    class Meta:\n        model = TodoList\n        fields = ['name']\n\nclass TaskForm(forms.ModelForm):\n    class Meta:\n        model = Task\n        fields = ['title', 'description', 'due_date']\n        widgets = {\n            'due_date': forms.DateInput(attrs={'type': 'date'})\n        }"}, {"file": "home.html", "path": "todo_app/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Todo App Dashboard</h1>\n\n  <p>Total Tasks: {{ total_tasks }}</p>\n  <p>Completed Tasks: {{ completed_tasks }}</p>\n\n  <h2>Todo Lists</h2>\n  <ul>\n    {% for todo_list in todo_lists %}\n      <li><a href=\"{% url 'todo_list' todo_list.id %}\">{{ todo_list.name }}</a></li>\n    {% endfor %}\n  </ul>\n\n  <a href=\"{% url 'create_list' %}\">Create New List</a>\n{% endblock %}"}, {"file": "todo_list.html", "path": "todo_app/templates/todo_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>{{ todo_list.name }}</h1>\n\n  <h2>Tasks</h2>\n  <ul>\n    {% for task in tasks %}\n      <li>\n        <a href=\"{% url 'task_detail' task.id %}\">{{ task.title }}</a>\n        {% if task.completed %}\n          (Completed)\n        {% endif %}\n        <a href=\"{% url 'edit_task' task.id %}\">Edit</a>\n        <a href=\"{% url 'delete_task' task.id %}\">Delete</a>\n        {% if not task.completed %}\n          <a href=\"{% url 'complete_task' task.id %}\">Mark Complete</a>\n        {% endif %}\n      </li>\n    {% endfor %}\n  </ul>\n\n  <a href=\"{% url 'add_task' todo_list.id %}\">Add New Task</a>\n  <a href=\"{% url 'home' %}\">Back to Dashboard</a>\n{% endblock %}"}, {"file": "task_detail.html", "path": "todo_app/templates/task_detail.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>{{ task.title }}</h1>\n  <p>{{ task.description }}</p>\n  <p>Due Date: {{ task.due_date }}</p>\n  <a href=\"{% url 'todo_list' task.todo_list.id %}\">Back to List</a>\n{% endblock %}"}, {"file": "create_list.html", "path": "todo_app/templates/create_list.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Create New Todo List</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Create</button>\n  </form>\n  <a href=\"{% url 'home' %}\">Cancel</a>\n{% endblock %}"}, {"file": "add_task.html", "path": "todo_app/templates/add_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Add New Task to {{ todo_list.name }}</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Add Task</button>\n  </form>\n  <a href=\"{% url 'todo_list' todo_list.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "edit_task.html", "path": "todo_app/templates/edit_task.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Edit Task</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Save Changes</button>\n  </form>\n  <a href=\"{% url 'todo_list' task.todo_list.id %}\">Cancel</a>\n{% endblock %}"}, {"file": "base.html", "path": "todo_app/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Todo App</title>\n</head>\n<body>\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}], "7": [{"file": "urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('login/', views.user_login, name='login'),\n    path('signup/', views.signup, name='signup'),\n    path('balance_tracker/', views.balance_tracker, name='balance_tracker'),\n    path('reports/', views.reports, name='reports'),\n    path('settings1/', views.settings1, name='settings1'),\n    path('settings2/', views.settings2, name='settings2'),\n    path('help/', views.help_view, name='help'),\n    path('add_transaction/', views.add_transaction, name='add_transaction'),\n    path('edit_transaction/<int:transaction_id>/', views.edit_transaction, name='edit_transaction'),\n    path('delete_transaction/<int:transaction_id>/', views.delete_transaction, name='delete_transaction'),\n    path('add_category/', views.add_category, name='add_category'),\n    path('edit_category/<int:category_id>/', views.edit_category, name='edit_category'),\n    path('delete_category/<int:category_id>/', views.delete_category, name='delete_category'),\n]"}, {"file": "views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef dashboard(request):\n    return render(request, 'dashboard.html')\n\ndef user_login(request):\n    return render(request, 'login.html')\n\ndef signup(request):\n    return render(request, 'signup.html')\n\ndef balance_tracker(request):\n    return render(request, 'balance_tracker.html')\n\ndef reports(request):\n    return render(request, 'reports.html')\n\ndef settings1(request):\n    return render(request, 'settings1.html')\n\ndef settings2(request):\n    return render(request, 'settings2.html')\n\ndef help_view(request):\n    return render(request, 'help.html')\n\ndef add_transaction(request):\n     return HttpResponse(\"Add Transaction\")\n\ndef edit_transaction(request, transaction_id):\n    return HttpResponse(f\"Edit Transaction {transaction_id}\")\n\ndef delete_transaction(request, transaction_id):\n    return HttpResponse(f\"Delete Transaction {transaction_id}\")\n\ndef add_category(request):\n    return HttpResponse(\"Add Category\")\n\ndef edit_category(request, category_id):\n    return HttpResponse(f\"Edit Category {category_id}\")\n\ndef delete_category(request, category_id):\n    return HttpResponse(f\"Delete Category {category_id}\")"}, {"file": "models.py", "path": "budget_control/models.py", "code": "from django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n\n    def __str__(self):\n        return self.name\n\nclass Transaction(models.Model):\n    date = models.DateField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    description = models.TextField(blank=True)\n\n    def __str__(self):\n        return f'{self.date} - {self.amount} - {self.category.name}'"}, {"file": "forms.py", "path": "budget_control/forms.py", "code": "from django import forms\nfrom .models import Category, Transaction\n\nclass CategoryForm(forms.ModelForm):\n    class Meta:\n        model = Category\n        fields = ['name']\n\nclass TransactionForm(forms.ModelForm):\n    class Meta:\n        model = Transaction\n        fields = ['date', 'amount', 'category', 'description']"}, {"file": "home.html", "path": "templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to Budget Control</h1>\n    <a href=\"{% url 'login' %}\">Login</a>\n    <a href=\"{% url 'signup' %}\">Sign Up</a>\n    <a href=\"{% url 'help' %}\">Support</a>\n</body>\n</html>"}, {"file": "dashboard.html", "path": "templates/dashboard.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Dashboard</title>\n</head>\n<body>\n    <h1>Dashboard</h1>\n    <p>Balance: </p>\n    <p>Recent Transactions: </p>\n    <p>Alerts: </p>\n</body>\n</html>"}, {"file": "login.html", "path": "templates/login.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Login</title>\n</head>\n<body>\n    <h1>Login</h1>\n    <form>\n        <label>Username:</label><br>\n        <input type=\"text\" name=\"username\"><br><br>\n        <label>Password:</label><br>\n        <input type=\"password\" name=\"password\"><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n</body>\n</html>"}, {"file": "signup.html", "path": "templates/signup.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Sign Up</title>\n</head>\n<body>\n    <h1>Sign Up</h1>\n    <form>\n        <label>Username:</label><br>\n        <input type=\"text\" name=\"username\"><br><br>\n        <label>Password:</label><br>\n        <input type=\"password\" name=\"password\"><br><br>\n        <label>Confirm Password:</label><br>\n        <input type=\"password\" name=\"confirm_password\"><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n</body>\n</html>"}, {"file": "balance_tracker.html", "path": "templates/balance_tracker.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Balance Tracker</title>\n</head>\n<body>\n    <h1>Balance Tracker</h1>\n    <p>View Balance Chart</p>\n    <p>View Balance Structure Chart</p>\n    <a href=\"{% url 'add_transaction' %}\">Add Transaction</a>\n    <p>Edit Transaction</p>\n    <p>Delete Transaction</p>\n</body>\n</html>"}, {"file": "reports.html", "path": "templates/reports.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Reports</title>\n</head>\n<body>\n    <h1>Reports</h1>\n    <p>Generate Monthly Report</p>\n    <p>Export Data</p>\n</body>\n</html>"}, {"file": "settings1.html", "path": "templates/settings1.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings 1</title>\n</head>\n<body>\n    <h1>Settings 1</h1>\n    <p>Add Category</p>\n    <p>Edit Category</p>\n    <p>Delete Category</p>\n    <p>List Category</p>\n</body>\n</html>"}, {"file": "settings2.html", "path": "templates/settings2.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Settings 2</title>\n</head>\n<body>\n    <h1>Settings 2</h1>\n    <p>Update Profile</p>\n</body>\n</html>"}, {"file": "help.html", "path": "templates/help.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Help</title>\n</head>\n<body>\n    <h1>Help</h1>\n    <p>View FAQs</p>\n    <p>Contact Support</p>\n</body>\n</html>"}], "8": [{"file": "models.py", "path": "calendarapp/models.py", "code": "from django.db import models\n\nclass Event(models.Model):\n    title = models.CharField(max_length=200)\n    description = models.TextField()\n    start_time = models.DateTimeField()\n    end_time = models.DateTimeField()\n\n    def __str__(self):\n        return self.title"}, {"file": "views.py", "path": "calendarapp/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom django.http import HttpResponse\nfrom datetime import datetime, date\nfrom .models import Event\nfrom django.urls import reverse\n\ndef home(request):\n    today = date.today()\n    events = Event.objects.filter(start_time__date=today)\n    return render(request, 'calendarapp/home.html', {'current_date': today, 'events': events})\n\ndef calendar_view(request, year=None, month=None):\n    today = date.today()\n    if year is None or month is None:\n        year = today.year\n        month = today.month\n\n    try:\n        year = int(year)\n        month = int(month)\n    except ValueError:\n        year = today.year\n        month = today.month\n\n    events = Event.objects.filter(start_time__year=year, start_time__month=month)\n    return render(request, 'calendarapp/calendar.html', {'year': year, 'month': month, 'events': events})\n\ndef add_event(request):\n    if request.method == 'POST':\n        title = request.POST['title']\n        description = request.POST['description']\n        start_time = datetime.strptime(request.POST['start_time'], '%Y-%m-%dT%H:%M')\n        end_time = datetime.strptime(request.POST['end_time'], '%Y-%m-%dT%H:%M')\n\n        Event.objects.create(title=title, description=description, start_time=start_time, end_time=end_time)\n        return redirect('home')\n    return render(request, 'calendarapp/add_event.html')\n\ndef event_detail(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    return render(request, 'calendarapp/event_detail.html', {'event': event})\n\ndef edit_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.title = request.POST['title']\n        event.description = request.POST['description']\n        event.start_time = datetime.strptime(request.POST['start_time'], '%Y-%m-%dT%H:%M')\n        event.end_time = datetime.strptime(request.POST['end_time'], '%Y-%m-%dT%H:%M')\n        event.save()\n        return redirect('event_detail', event_id=event.id)\n    return render(request, 'calendarapp/edit_event.html', {'event': event})\n\ndef delete_event(request, event_id):\n    event = get_object_or_404(Event, pk=event_id)\n    if request.method == 'POST':\n        event.delete()\n        return redirect('home')  # Or to a list events view\n    return render(request, 'calendarapp/delete_event.html', {'event': event})\n\ndef search_events(request):\n    if request.method == 'GET':\n        query = request.GET.get('q')\n        if query:\n            events = Event.objects.filter(title__icontains=query)  # Example: search by title\n        else:\n            events = Event.objects.all()\n        return render(request, 'calendarapp/search_events.html', {'events': events, 'query': query})\n    return render(request, 'calendarapp/search_events.html')\n\ndef list_all_events(request):\n    events = Event.objects.all()\n    return render(request, 'calendarapp/list_all_events.html', {'events': events})"}, {"file": "urls.py", "path": "calendarapp/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('calendar/', views.calendar_view, name='calendar'),\n    path('calendar/<int:year>/<int:month>/', views.calendar_view, name='calendar_month'),\n    path('add_event/', views.add_event, name='add_event'),\n    path('event/<int:event_id>/', views.event_detail, name='event_detail'),\n    path('event/<int:event_id>/edit/', views.edit_event, name='edit_event'),\n    path('event/<int:event_id>/delete/', views.delete_event, name='delete_event'),\n    path('search/', views.search_events, name='search_events'),\n    path('events/all/', views.list_all_events, name='list_all_events'),\n]"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "# ...\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calendarapp', # Add your app here\n]\n\n# ...\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\n# ...\n"}, {"file": "home.html", "path": "calendarapp/templates/calendarapp/home.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the Calendar App</h1>\n    <p>Today's Date: {{ current_date }}</p>\n    <a href=\"{% url 'calendar' %}\">View Full Calendar</a>\n    <a href=\"{% url 'add_event' %}\">Add Event</a>\n\n    <h2>Today's Events:</h2>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a></li>\n        {% empty %}\n            <li>No events today.</li>\n        {% endfor %}\n    </ul>\n\n    <a href=\"{% url 'search_events' %}\">Search Events</a>\n    <a href=\"{% url 'list_all_events' %}\">List All Events</a>\n</body>\n</html>"}, {"file": "calendar.html", "path": "calendarapp/templates/calendarapp/calendar.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Calendar</title>\n</head>\n<body>\n    <h1>Calendar</h1>\n\n    <form method=\"get\" action=\"{% url 'calendar_month' year=1900 month=1 %}\">\n      <label for=\"year\">Year:</label>\n      <input type=\"number\" id=\"year\" name=\"year\" value=\"{{ year }}\">\n      <label for=\"month\">Month:</label>\n      <select id=\"month\" name=\"month\">\n        <option value=\"1\" {% if month == 1 %}selected{% endif %}>January</option>\n        <option value=\"2\" {% if month == 2 %}selected{% endif %}>February</option>\n        <option value=\"3\" {% if month == 3 %}selected{% endif %}>March</option>\n        <option value=\"4\" {% if month == 4 %}selected{% endif %}>April</option>\n        <option value=\"5\" {% if month == 5 %}selected{% endif %}>May</option>\n        <option value=\"6\" {% if month == 6 %}selected{% endif %}>June</option>\n        <option value=\"7\" {% if month == 7 %}selected{% endif %}>July</option>\n        <option value=\"8\" {% if month == 8 %}selected{% endif %}>August</option>\n        <option value=\"9\" {% if month == 9 %}selected{% endif %}>September</option>\n        <option value=\"10\" {% if month == 10 %}selected{% endif %}>October</option>\n        <option value=\"11\" {% if month == 11 %}selected{% endif %}>November</option>\n        <option value=\"12\" {% if month == 12 %}selected{% endif %}>December</option>\n      </select>\n      <button type=\"submit\">Go</button>\n    </form>\n\n    <h2>Events for {{ month }}/{{ year }}:</h2>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a> ({{ event.start_time }})</li>\n        {% empty %}\n            <li>No events for this month.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "add_event.html", "path": "calendarapp/templates/calendarapp/add_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Add Event</title>\n</head>\n<body>\n    <h1>Add New Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\"><br><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\"></textarea><br><br>\n        <label for=\"start_time\">Start Time:</label><br>\n        <input type=\"datetime-local\" id=\"start_time\" name=\"start_time\"><br><br>\n        <label for=\"end_time\">End Time:</label><br>\n        <input type=\"datetime-local\" id=\"end_time\" name=\"end_time\"><br><br>\n        <button type=\"submit\">Add Event</button>\n    </form>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "event_detail.html", "path": "calendarapp/templates/calendarapp/event_detail.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Event Details</title>\n</head>\n<body>\n    <h1>Event Details</h1>\n    <h2>{{ event.title }}</h2>\n    <p>Description: {{ event.description }}</p>\n    <p>Start Time: {{ event.start_time }}</p>\n    <p>End Time: {{ event.end_time }}</p>\n    <a href=\"{% url 'edit_event' event.id %}\">Edit Event</a>\n    <a href=\"{% url 'delete_event' event.id %}\">Delete Event</a>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "edit_event.html", "path": "calendarapp/templates/calendarapp/edit_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Edit Event</title>\n</head>\n<body>\n    <h1>Edit Event</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"title\">Title:</label><br>\n        <input type=\"text\" id=\"title\" name=\"title\" value=\"{{ event.title }}\"><br><br>\n        <label for=\"description\">Description:</label><br>\n        <textarea id=\"description\" name=\"description\">{{ event.description }}</textarea><br><br>\n        <label for=\"start_time\">Start Time:</label><br>\n        <input type=\"datetime-local\" id=\"start_time\" name=\"start_time\" value=\"{{ event.start_time|date:'Y-m-d\\TH:i' }}\"><br><br>\n        <label for=\"end_time\">End Time:</label><br>\n        <input type=\"datetime-local\" id=\"end_time\" name=\"end_time\" value=\"{{ event.end_time|date:'Y-m-d\\TH:i' }}\"><br><br>\n        <button type=\"submit\">Save Changes</button>\n    </form>\n    <a href=\"{% url 'event_detail' event.id %}\">Back to Event Details</a>\n</body>\n</html>"}, {"file": "delete_event.html", "path": "calendarapp/templates/calendarapp/delete_event.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Delete Event</title>\n</head>\n<body>\n    <h1>Delete Event</h1>\n    <p>Are you sure you want to delete \"{{ event.title }}\"?</p>\n    <form method=\"post\">\n        {% csrf_token %}\n        <button type=\"submit\">Delete</button>\n    </form>\n    <a href=\"{% url 'event_detail' event.id %}\">Cancel</a>\n</body>\n</html>"}, {"file": "search_events.html", "path": "calendarapp/templates/calendarapp/search_events.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Search Events</title>\n</head>\n<body>\n    <h1>Search Events</h1>\n    <form method=\"get\" action=\"{% url 'search_events' %}\">\n        <input type=\"text\" name=\"q\" placeholder=\"Search...\" value=\"{{ query }}\">\n        <button type=\"submit\">Search</button>\n    </form>\n\n    {% if query %}\n        <h2>Search Results for \"{{ query }}\":</h2>\n        <ul>\n            {% for event in events %}\n                <li><a href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a></li>\n            {% empty %}\n                <li>No events found.</li>\n            {% endfor %}\n        </ul>\n    {% endif %}\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}, {"file": "list_all_events.html", "path": "calendarapp/templates/calendarapp/list_all_events.html", "code": "{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n    <title>List All Events</title>\n</head>\n<body>\n    <h1>All Events</h1>\n    <ul>\n        {% for event in events %}\n            <li><a href=\"{% url 'event_detail' event.id %}\">{{ event.title }}</a> ({{ event.start_time }})</li>\n        {% empty %}\n            <li>No events found.</li>\n        {% endfor %}\n    </ul>\n    <a href=\"{% url 'home' %}\">Back to Home</a>\n</body>\n</html>"}], "9": [{"file": "urls.py", "path": "ai_chatbot/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('features/', views.features, name='features'),\n    path('pricing/', views.pricing, name='pricing'),\n    path('support/', views.support, name='support'),\n    #path('about/', views.about, name='about'), # about is optional\n]"}, {"file": "views.py", "path": "ai_chatbot/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\ndef home(request):\n    # Read Product Overview - Display a brief overview of the AI Chatbot's capabilities and benefits.\n    return render(request, 'home.html')\n\ndef features(request):\n    # List Key Features - Showcase the main features of the AI Chatbot.\n    return render(request, 'features.html')\n\ndef pricing(request):\n    # View Pricing Plans - Display different pricing plans and subscription options.\n    # Contact Sales - Provide a form to contact the sales team for customized solutions.\n    return render(request, 'pricing.html')\n\n#def about(request):\n#    # Company Background - Show information about the company and team behind the AI Chatbot.\n#    return render(request, 'about.html') # about page is optional\n\ndef support(request):\n    # FAQ - Provide answers to frequently asked questions about the AI Chatbot.\n    # Support Message - Offer a form for users needing assistance.\n    return render(request, 'support.html')\n"}, {"file": "settings.py", "path": "ai_chatbot_project/settings.py", "code": "# Assuming ai_chatbot is the app name\nINSTALLED_APPS = [\n    'ai_chatbot',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nSTATIC_URL = '/static/'\n"}, {"file": "home.html", "path": "ai_chatbot/templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Home</h1>\n  <p>Product Overview here...</p>\n{% endblock %}"}, {"file": "features.html", "path": "ai_chatbot/templates/features.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Features</h1>\n  <p>List of Key Features here...</p>\n{% endblock %}"}, {"file": "pricing.html", "path": "ai_chatbot/templates/pricing.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Pricing</h1>\n  <p>Pricing Plans here...</p>\n  <p>Contact Sales Form here...</p>\n{% endblock %}"}, {"file": "support.html", "path": "ai_chatbot/templates/support.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Support</h1>\n  <p>FAQ here...</p>\n  <p>Support Message Form here...</p>\n{% endblock %}"}, {"file": "base.html", "path": "ai_chatbot/templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>AI Chatbot</title>\n</head>\n<body>\n    <nav>\n        <a href=\"{% url 'home' %}\">Home</a> |\n        <a href=\"{% url 'features' %}\">Features</a> |\n        <a href=\"{% url 'pricing' %}\">Pricing</a> |\n        <a href=\"{% url 'support' %}\">Support</a>\n        <!-- Optional About page link\n        <a href=\"{% url 'about' %}\">About Us</a> |\n        -->\n    </nav>\n\n    {% block content %}{% endblock %}\n\n</body>\n</html>"}], "10": [{"file": "urls.py", "path": "calorie_tracker/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('dashboard/', views.dashboard, name='dashboard'),\n    path('meal_log/', views.meal_log, name='meal_log'),\n    path('activity_log/', views.activity_log, name='activity_log'),\n    path('analysis/', views.analysis, name='analysis'),\n    path('settings/', views.settings, name='settings'),\n    path('help/', views.help_page, name='help'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n    # Add more URLs as needed\n]"}, {"file": "views.py", "path": "calorie_tracker/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.http import HttpResponse\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout, authenticate\n\ndef home(request):\n    return render(request, 'home.html')\n\ndef dashboard(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'dashboard.html')\n\ndef meal_log(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'meal_log.html')\n\ndef activity_log(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'activity_log.html')\n\ndef analysis(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'analysis.html')\n\ndef settings(request):\n    if not request.user.is_authenticated:\n        return redirect('login')\n    return render(request, 'settings.html')\n\ndef help_page(request):\n    return render(request, 'help.html')\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('dashboard')\n    else:\n        form = UserCreationForm()\n    return render(request, 'signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(request, data=request.POST)\n        if form.is_valid():\n            username = form.cleaned_data.get('username')\n            password = form.cleaned_data.get('password')\n            user = authenticate(username=username, password=password)\n            if user is not None:\n                login(request, user)\n                return redirect('dashboard')\n    else:\n        form = AuthenticationForm()\n    return render(request, 'login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n"}, {"file": "models.py", "path": "calorie_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Meal(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    calories = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n\nclass Activity(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    name = models.CharField(max_length=200)\n    calories_burned = models.IntegerField()\n    date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return self.name\n"}, {"file": "forms.py", "path": "calorie_tracker/forms.py", "code": "from django import forms\nfrom .models import Meal, Activity\n\nclass MealForm(forms.ModelForm):\n    class Meta:\n        model = Meal\n        fields = ['name', 'calories']\n\nclass ActivityForm(forms.ModelForm):\n    class Meta:\n        model = Activity\n        fields = ['name', 'calories_burned']\n"}, {"file": "admin.py", "path": "calorie_tracker/admin.py", "code": "from django.contrib import admin\nfrom .models import Meal, Activity\n\nadmin.site.register(Meal)\nadmin.site.register(Activity)\n"}, {"file": "settings.py", "path": "calorie_tracker_project/settings.py", "code": "#Add the following to INSTALLED_APPS:\n\n#INSTALLED_APPS = [\n#    ...\n#    'calorie_tracker',\n#    ...\n#]\n\n#Add the following to TEMPLATES:\n#TEMPLATES = [\n#    {\n#        ...\n#        'DIRS': [BASE_DIR / 'templates'],\n#        ...\n#    },\n#]\n\n#Add the following lines for user authentication (optional):\n#LOGIN_REDIRECT_URL = 'dashboard'\n#LOGOUT_REDIRECT_URL = 'home'"}, {"file": "home.html", "path": "templates/home.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Welcome to the Calorie Tracker App!</h1>\n    <p>Track your daily calorie intake and expenditure.</p>\n    <a href=\"{% url 'signup' %}\">Sign Up</a>\n    <a href=\"{% url 'login' %}\">Log In</a>\n{% endblock %}"}, {"file": "dashboard.html", "path": "templates/dashboard.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Dashboard</h1>\n    <p>Welcome, {{ user.username }}!</p>\n    <a href=\"{% url 'logout' %}\">Log Out</a>\n    <a href=\"{% url 'meal_log' %}\">Meal Log</a>\n    <a href=\"{% url 'activity_log' %}\">Activity Log</a>\n    <a href=\"{% url 'analysis' %}\">Analysis</a>\n    <a href=\"{% url 'settings' %}\">Settings</a>\n    {% comment %}\n    Add your dashboard content here, displaying daily calorie intake, recent meals, recent activities, etc.\n    You'll need to fetch and display data from your models.\n    {% endcomment %}\n{% endblock %}"}, {"file": "meal_log.html", "path": "templates/meal_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Meal Log</h1>\n    <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    {% comment %}\n    Implement the meal logging functionality here.\n    - Meal search\n    - Edit meal\n    - Delete meal\n    Display a list of logged meals.\n    {% endcomment %}\n{% endblock %}"}, {"file": "activity_log.html", "path": "templates/activity_log.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Activity Log</h1>\n    <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    {% comment %}\n    Implement the activity logging functionality here.\n    - Activity search\n    - Edit activity\n    - Delete activity\n    Display a list of logged activities.\n    {% endcomment %}\n{% endblock %}"}, {"file": "analysis.html", "path": "templates/analysis.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Analysis</h1>\n    <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    {% comment %}\n    Display charts and data analysis here. For example, weekly calorie chart.\n    You'll need to use a charting library like Chart.js or matplotlib.\n    {% endcomment %}\n{% endblock %}"}, {"file": "settings.html", "path": "templates/settings.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Settings</h1>\n    <a href=\"{% url 'dashboard' %}\">Back to Dashboard</a>\n    {% comment %}\n    Implement the settings functionality here:\n    - Profile update\n    - Preferences\n    - Notifications\n    - Privacy settings\n    {% endcomment %}\n{% endblock %}"}, {"file": "help.html", "path": "templates/help.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n    <h1>Help</h1>\n    <a href=\"{% url 'dashboard' %}\">Back to Dashboard (if logged in)</a>\n    <h2>FAQ</h2>\n    <p>This is the FAQ section.</p>\n    <h2>Contact Support</h2>\n    <p>Contact us at support@example.com</p>\n    <h2>Tutorials</h2>\n    <p>Check out our tutorials here.</p>\n{% endblock %}"}, {"file": "signup.html", "path": "templates/signup.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Sign Up</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Sign Up</button>\n  </form>\n{% endblock %}"}, {"file": "login.html", "path": "templates/login.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h2>Login</h2>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Login</button>\n  </form>\n{% endblock %}"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Calorie Tracker</title>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}], "11": {"django_structure": {"apps": [{"name": "review_app", "models": [{"name": "TestCode", "fields": [{"name": "file_name", "type": "CharField", "max_length": 255}, {"name": "file_path", "type": "CharField", "max_length": 512}, {"name": "code", "type": "TextField"}, {"name": "status", "type": "CharField", "max_length": 20, "choices": ["Pass", "Fail", "Select"], "default": "Select"}, {"name": "review_notes", "type": "TextField", "blank": true, "null": true}]}], "views": [{"name": "home_view", "template": "review_app/home.html", "context": [{"name": "welcome_message", "value": "Welcome to the Code Review Tool"}, {"name": "test_codes", "model": "TestCode", "all": true}], "functions": [{"name": "process_import", "method": "POST"}]}, {"name": "about_view", "template": "review_app/about.html", "context": [{"name": "description", "value": "This tool is for reviewing test code."}]}], "forms": [{"name": "ImportForm", "fields": [{"name": "json_file", "type": "FileField"}]}, {"name": "TestCodeReviewForm", "model": "TestCode", "fields": ["status", "review_notes"]}], "urls": [{"path": "", "view": "home_view", "name": "home"}, {"path": "about/", "view": "about_view", "name": "about"}], "templates": {"home.html": {"blocks": [{"name": "welcome_message"}, {"name": "testcode_list"}, {"name": "import_form"}]}, "about.html": {"blocks": [{"name": "about_content"}]}}}], "settings": {"templates_dir": "templates", "static_dir": "static"}, "project_urls": [{"path": "admin/", "include": "admin.site.urls"}, {"path": "", "include": "review_app.urls"}]}, "sample_json_data": [{"file": "test_example1.py", "path": "tests/unit/", "code": "def test_example1():\n    assert 1 == 1"}, {"file": "test_example2.py", "path": "tests/integration/", "code": "def test_example2():\n    assert 2 + 2 == 4"}]}, "12": [{"file": "urls.py", "path": "expense_tracker/urls.py", "code": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('home.urls')),  # Home page URLs\n    path('employee/', include('employee.urls')),  # Employee portal URLs\n    path('admin/', include('admin_portal.urls')),  # Admin portal URLs\n    path('budget/', include('budget_control.urls')),  # Budget control URLs\n]"}, {"file": "settings.py", "path": "expense_tracker/settings.py", "code": "# Add the following apps to INSTALLED_APPS\nINSTALLED_APPS = [\n    ...\n    'home',\n    'employee',\n    'admin_portal',\n    'budget_control',\n    'django.contrib.staticfiles',\n]"}, {"file": "models.py", "path": "expense_tracker/models.py", "code": "from django.db import models\nfrom django.contrib.auth.models import User\n\nclass Claim(models.Model):\n    employee = models.ForeignKey(User, on_delete=models.CASCADE)\n    claim_type = models.CharField(max_length=50, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    date_submitted = models.DateTimeField(auto_now_add=True)\n    status = models.CharField(max_length=20, default='Pending', choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')])\n    reason_for_rejection = models.TextField(blank=True, null=True)\n\n    def __str__(self):\n        return f'Claim by {self.employee.username} - {self.claim_type} - {self.status}'\n\n\nclass Budget(models.Model):\n    category = models.CharField(max_length=50, unique=True, choices=[('Travel', 'Travel'), ('Labor', 'Labor'), ('Management', 'Management'), ('Equipment', 'Equipment')])\n    limit = models.DecimalField(max_digits=10, decimal_places=2)\n    current_spending = models.DecimalField(max_digits=10, decimal_places=2, default=0)\n\n    def __str__(self):\n        return f'{self.category} Budget: {self.limit}'\n\n\n"}, {"file": "home/urls.py", "path": "home/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('signup/', views.signup, name='signup'),\n    path('login/', views.login_view, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]"}, {"file": "home/views.py", "path": "home/views.py", "code": "from django.shortcuts import render, redirect\nfrom django.contrib.auth.forms import UserCreationForm, AuthenticationForm\nfrom django.contrib.auth import login, logout\n\ndef home(request):\n    return render(request, 'home/home.html') # Template should have login, signup, welcome message\n\ndef signup(request):\n    if request.method == 'POST':\n        form = UserCreationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            return redirect('employee:submit_claim') # Redirect to employee portal after signup\n    else:\n        form = UserCreationForm()\n    return render(request, 'home/signup.html', {'form': form})\n\ndef login_view(request):\n    if request.method == 'POST':\n        form = AuthenticationForm(data=request.POST)\n        if form.is_valid():\n            user = form.get_user()\n            login(request, user)\n            return redirect('employee:submit_claim') # Redirect to employee portal after login\n    else:\n        form = AuthenticationForm()\n    return render(request, 'home/login.html', {'form': form})\n\ndef logout_view(request):\n    logout(request)\n    return redirect('home')\n"}, {"file": "home/templates/home/home.html", "path": "home/templates/home/home.html", "code": "<!-- Home page template: display login/signup if not logged in, welcome message if logged in -->\n{% if user.is_authenticated %}\n  <h1>Welcome, {{ user.username }}!</h1>\n  <a href=\"{% url 'employee:submit_claim' %}\">Go to Employee Portal</a>\n  <a href=\"{% url 'logout' %}\">Logout</a>\n{% else %}\n  <h1>Welcome to Expense Tracker</h1>\n  <a href=\"{% url 'signup' %}\">Sign Up</a>\n  <a href=\"{% url 'login' %}\">Log In</a>\n{% endif %}"}, {"file": "home/templates/home/signup.html", "path": "home/templates/home/signup.html", "code": "<h1>Sign Up</h1>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Sign Up</button>\n</form>"}, {"file": "home/templates/home/login.html", "path": "home/templates/home/login.html", "code": "<h1>Log In</h1>\n<form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Log In</button>\n</form>"}, {"file": "employee/urls.py", "path": "employee/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'employee'\n\nurlpatterns = [\n    path('submit_claim/', views.submit_claim, name='submit_claim'),\n    path('view_claims/', views.view_claims, name='view_claims'),\n    path('edit_claim/<int:claim_id>/', views.edit_claim, name='edit_claim'),\n]"}, {"file": "employee/views.py", "path": "employee/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom .forms import ClaimForm\nfrom expense_tracker.models import Claim\nfrom django.contrib.auth.decorators import login_required\n\n@login_required\ndef submit_claim(request):\n    if request.method == 'POST':\n        form = ClaimForm(request.POST)\n        if form.is_valid():\n            claim = form.save(commit=False)\n            claim.employee = request.user\n            claim.save()\n            return redirect('employee:view_claims')\n    else:\n        form = ClaimForm()\n    return render(request, 'employee/submit_claim.html', {'form': form})\n\n@login_required\ndef view_claims(request):\n    claims = Claim.objects.filter(employee=request.user)\n    return render(request, 'employee/view_claims.html', {'claims': claims})\n\n@login_required\ndef edit_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id, employee=request.user)\n    if request.method == 'POST':\n        form = ClaimForm(request.POST, instance=claim)\n        if form.is_valid():\n            form.save()\n            return redirect('employee:view_claims')\n    else:\n        form = ClaimForm(instance=claim)\n    return render(request, 'employee/edit_claim.html', {'form': form, 'claim_id': claim_id})\n"}, {"file": "employee/forms.py", "path": "employee/forms.py", "code": "from django import forms\nfrom expense_tracker.models import Claim\n\nclass ClaimForm(forms.ModelForm):\n    class Meta:\n        model = Claim\n        fields = ['claim_type', 'amount']\n"}, {"file": "employee/templates/employee/submit_claim.html", "path": "employee/templates/employee/submit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Submit Claim</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Submit</button>\n  </form>\n  <a href=\"{% url 'employee:view_claims' %}\">View Claims</a>\n{% endblock %}"}, {"file": "employee/templates/employee/view_claims.html", "path": "employee/templates/employee/view_claims.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Your Claims</h1>\n  <ul>\n    {% for claim in claims %}\n      <li>\n        {{ claim.claim_type }} - {{ claim.amount }} - {{ claim.status }}\n        {% if claim.status == 'Pending' %}\n          <a href=\"{% url 'employee:edit_claim' claim.id %}\">Edit</a>\n        {% endif %}\n      </li>\n    {% endfor %}\n  </ul>\n  <a href=\"{% url 'employee:submit_claim' %}\">Submit New Claim</a>\n{% endblock %}"}, {"file": "employee/templates/employee/edit_claim.html", "path": "employee/templates/employee/edit_claim.html", "code": "{% extends 'base.html' %}\n\n{% block content %}\n  <h1>Edit Claim</h1>\n  <form method=\"post\">\n    {% csrf_token %}\n    {{ form.as_p }}\n    <button type=\"submit\">Update</button>\n  </form>\n  <a href=\"{% url 'employee:view_claims' %}\">Back to Claims</a>\n{% endblock %}"}, {"file": "admin_portal/urls.py", "path": "admin_portal/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'admin_portal'\n\nurlpatterns = [\n    path('approve_claim/<int:claim_id>/', views.approve_claim, name='approve_claim'),\n    path('reject_claim/<int:claim_id>/', views.reject_claim, name='reject_claim'),\n    path('view_claim_details/<int:claim_id>/', views.view_claim_details, name='view_claim_details'),\n    path('search_claims/', views.search_claims, name='search_claims'),\n    path('all_claims/', views.all_claims, name='all_claims'),\n]"}, {"file": "admin_portal/views.py", "path": "admin_portal/views.py", "code": "from django.shortcuts import render, redirect, get_object_or_404\nfrom expense_tracker.models import Claim\nfrom django.contrib.auth.decorators import user_passes_test\nfrom django.db.models import Q\n\ndef is_accounting_admin(user):\n    return user.is_staff  # Or implement a more specific check if needed\n\n@user_passes_test(is_accounting_admin)\ndef approve_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    claim.status = 'Approved'\n    claim.save()\n    return redirect('admin_portal:all_claims')\n\n@user_passes_test(is_accounting_admin)\ndef reject_claim(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    if request.method == 'POST':\n        reason = request.POST.get('reason')\n        claim.status = 'Rejected'\n        claim.reason_for_rejection = reason\n        claim.save()\n        return redirect('admin_portal:all_claims')\n    return render(request, 'admin_portal/reject_claim.html', {'claim': claim})\n\n@user_passes_test(is_accounting_admin)\ndef view_claim_details(request, claim_id):\n    claim = get_object_or_404(Claim, pk=claim_id)\n    return render(request, 'admin_portal/claim_details.html', {'claim': claim})\n\n@user_passes_test(is_accounting_admin)\ndef search_claims(request):\n    query = request.GET.get('q')\n    claims = Claim.objects.all()\n    if query:\n        claims = claims.filter(Q(employee__username__icontains=query) | Q(claim_type__icontains=query) | Q(status__icontains=query))\n    return render(request, 'admin_portal/search_claims.html', {'claims': claims})\n\n@user_passes_test(is_accounting_admin)\ndef all_claims(request):\n    claims = Claim.objects.all()\n    return render(request, 'admin_portal/all_claims.html', {'claims': claims})\n"}, {"file": "admin_portal/templates/admin_portal/reject_claim.html", "path": "admin_portal/templates/admin_portal/reject_claim.html", "code": "<form method=\"post\">\n    {% csrf_token %}\n    Reason for rejection:\n    <textarea name=\"reason\"></textarea>\n    <button type=\"submit\">Reject</button>\n</form>"}, {"file": "admin_portal/templates/admin_portal/claim_details.html", "path": "admin_portal/templates/admin_portal/claim_details.html", "code": "<h1>Claim Details</h1>\n<p>Employee: {{ claim.employee.username }}</p>\n<p>Type: {{ claim.claim_type }}</p>\n<p>Amount: {{ claim.amount }}</p>\n<p>Status: {{ claim.status }}</p>\n<p>Reason for Rejection: {{ claim.reason_for_rejection }}</p>"}, {"file": "admin_portal/templates/admin_portal/search_claims.html", "path": "admin_portal/templates/admin_portal/search_claims.html", "code": "<h1>Search Claims</h1>\n<form method=\"get\" action=\"{% url 'admin_portal:search_claims' %}\">\n    <input type=\"text\" name=\"q\">\n    <button type=\"submit\">Search</button>\n</form>\n\n<ul>\n    {% for claim in claims %}\n        <li>{{ claim.employee.username }} - {{ claim.claim_type }} - {{ claim.status }}</li>\n    {% endfor %}\n</ul>"}, {"file": "admin_portal/templates/admin_portal/all_claims.html", "path": "admin_portal/templates/admin_portal/all_claims.html", "code": "<h1>All Claims</h1>\n<ul>\n    {% for claim in claims %}\n        <li>{{ claim.employee.username }} - {{ claim.claim_type }} - {{ claim.status }} - <a href=\"{% url 'admin_portal:view_claim_details' claim.id %}\">Details</a>\n        {% if claim.status == 'Pending' %}\n          <a href=\"{% url 'admin_portal:approve_claim' claim.id %}\">Approve</a>  <a href=\"{% url 'admin_portal:reject_claim' claim.id %}\">Reject</a>\n        {% endif %}</li>\n    {% endfor %}\n</ul>\n<a href=\"{% url 'admin_portal:search_claims' %}\">Search Claims</a>"}, {"file": "budget_control/urls.py", "path": "budget_control/urls.py", "code": "from django.urls import path\nfrom . import views\n\napp_name = 'budget_control'\n\nurlpatterns = [\n    path('analyze_balances/', views.analyze_balances, name='analyze_balances'),\n    path('generate_reports/', views.generate_reports, name='generate_reports'),\n    path('set_limits/', views.set_limits, name='set_limits'),\n    path('send_alerts/', views.send_alerts, name='send_alerts'),\n]"}, {"file": "budget_control/views.py", "path": "budget_control/views.py", "code": "from django.shortcuts import render, redirect\nfrom expense_tracker.models import Budget, Claim\nfrom django.contrib.auth.decorators import user_passes_test\n\ndef is_accounting_admin(user):\n    return user.is_staff\n\n@user_passes_test(is_accounting_admin)\ndef analyze_balances(request):\n    budgets = Budget.objects.all()\n    return render(request, 'budget_control/analyze_balances.html', {'budgets': budgets})\n\n@user_passes_test(is_accounting_admin)\ndef generate_reports(request):\n    claims = Claim.objects.all()\n    return render(request, 'budget_control/generate_reports.html', {'claims': claims})\n\n@user_passes_test(is_accounting_admin)\ndef set_limits(request):\n    if request.method == 'POST':\n        category = request.POST.get('category')\n        limit = request.POST.get('limit')\n        budget, created = Budget.objects.get_or_create(category=category)\n        budget.limit = limit\n        budget.save()\n        return redirect('budget_control:analyze_balances')\n    else:\n        return render(request, 'budget_control/set_limits.html')\n\n@user_passes_test(is_accounting_admin)\ndef send_alerts(request):\n    # Implement logic to check budget limits and send alerts (e.g., via email)\n    return render(request, 'budget_control/send_alerts.html') # Template for displaying status/config for alerts\n"}, {"file": "budget_control/templates/budget_control/analyze_balances.html", "path": "budget_control/templates/budget_control/analyze_balances.html", "code": "<h1>Analyze Expense Balances</h1>\n<ul>\n    {% for budget in budgets %}\n        <li>{{ budget.category }}: Limit = {{ budget.limit }}, Current Spending = {{ budget.current_spending }}</li>\n    {% endfor %}\n</ul>\n<a href=\"{% url 'budget_control:set_limits' %}\">Set Budget Limits</a>"}, {"file": "budget_control/templates/budget_control/generate_reports.html", "path": "budget_control/templates/budget_control/generate_reports.html", "code": "<h1>Generate Reports</h1>\n\n<!-- Display claims data or use a reporting library to generate more detailed reports -->\n<ul>\n  {% for claim in claims %}\n    <li>{{claim.employee}} - {{claim.claim_type}} - {{claim.amount}}</li>\n  {% endfor %}\n</ul>"}, {"file": "budget_control/templates/budget_control/set_limits.html", "path": "budget_control/templates/budget_control/set_limits.html", "code": "<h1>Set Budget Limits</h1>\n<form method=\"post\">\n    {% csrf_token %}\n    <label for=\"category\">Category:</label>\n    <select name=\"category\">\n        <option value=\"Travel\">Travel</option>\n        <option value=\"Labor\">Labor</option>\n        <option value=\"Management\">Management</option>\n        <option value=\"Equipment\">Equipment</option>\n    </select><br><br>\n    <label for=\"limit\">Limit:</label>\n    <input type=\"number\" name=\"limit\"><br><br>\n    <button type=\"submit\">Set Limit</button>\n</form>"}, {"file": "budget_control/templates/budget_control/send_alerts.html", "path": "budget_control/templates/budget_control/send_alerts.html", "code": "<h1>Send Budget Alerts</h1>\n<p>Alert configuration and status would be displayed here.</p>"}, {"file": "base.html", "path": "templates/base.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Expense Tracker</title>\n</head>\n<body>\n    {% block content %}{% endblock %}\n</body>\n</html>"}], "13": [{"file": "models.py", "path": "app/models.py", "code": "from django.db import models\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField(null=True, blank=True)\n    age = models.IntegerField(null=True, blank=True)\n    sex = models.CharField(max_length=10, null=True, blank=True)\n    company = models.CharField(max_length=255, null=True, blank=True)\n    phone_number = models.CharField(max_length=20, null=True, blank=True)\n\n    def __str__(self):\n        return self.name\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField()\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return f'Purchase Record: {self.customer} - {self.product}'\n\nclass PreferredProduct(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f'{self.customer} - {self.product}'"}, {"file": "views.py", "path": "app/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\nfrom django.http import HttpResponse\n\ndef home(request):\n    return HttpResponse(\"Welcome to the system!\")\n\n# Customer Management\ndef add_customer(request):\n    return HttpResponse(\"Add Customer\")\n\ndef edit_customer(request, customer_id):\n    return HttpResponse(\"Edit Customer\")\n\ndef delete_customer(request, customer_id):\n    return HttpResponse(\"Delete Customer\")\n\ndef view_customer(request, customer_id):\n    return HttpResponse(\"View Customer\")\n\n# Product Management\ndef add_product(request):\n    return HttpResponse(\"Add Product\")\n\ndef edit_product(request, product_id):\n    return HttpResponse(\"Edit Product\")\n\ndef delete_product(request, product_id):\n    return HttpResponse(\"Delete Product\")\n\ndef view_product(request, product_id):\n    return HttpResponse(\"View Product\")\n\n# Purchase Records\ndef add_purchase_record(request):\n    return HttpResponse(\"Add Purchase Record\")\n\ndef edit_purchase_record(request, record_id):\n    return HttpResponse(\"Edit Purchase Record\")\n\ndef delete_purchase_record(request, record_id):\n    return HttpResponse(\"Delete Purchase Record\")\n\ndef view_purchase_record(request, record_id):\n    return HttpResponse(\"View Purchase Record\")\n\n# Preferred Products Management\ndef add_preferred_product(request, customer_id):\n    return HttpResponse(\"Add Preferred Product\")\n\ndef edit_preferred_product(request, customer_id):\n    return HttpResponse(\"Edit Preferred Product\")\n\ndef delete_preferred_product(request, customer_id, product_id):\n    return HttpResponse(\"Delete Preferred Product\")\n\ndef view_preferred_products(request, customer_id):\n    return HttpResponse(\"View Preferred Products\")\n\n# Sales Analysis\ndef generate_sales_report(request):\n    return HttpResponse(\"Generate Sales Report\")\n\ndef analyze_sales_trends(request):\n    return HttpResponse(\"Analyze Sales Trends\")\n\ndef product_performance_analysis(request):\n    return HttpResponse(\"Product Performance Analysis\")"}, {"file": "urls.py", "path": "app/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n\n    path('customers/add/', views.add_customer, name='add_customer'),\n    path('customers/edit/<int:customer_id>/', views.edit_customer, name='edit_customer'),\n    path('customers/delete/<int:customer_id>/', views.delete_customer, name='delete_customer'),\n    path('customers/view/<int:customer_id>/', views.view_customer, name='view_customer'),\n\n    path('products/add/', views.add_product, name='add_product'),\n    path('products/edit/<int:product_id>/', views.edit_product, name='edit_product'),\n    path('products/delete/<int:product_id>/', views.delete_product, name='delete_product'),\n    path('products/view/<int:product_id>/', views.view_product, name='view_product'),\n\n    path('purchases/add/', views.add_purchase_record, name='add_purchase_record'),\n    path('purchases/edit/<int:record_id>/', views.edit_purchase_record, name='edit_purchase_record'),\n    path('purchases/delete/<int:record_id>/', views.delete_purchase_record, name='delete_purchase_record'),\n    path('purchases/view/<int:record_id>/', views.view_purchase_record, name='view_purchase_record'),\n\n    path('preferred_products/add/<int:customer_id>/', views.add_preferred_product, name='add_preferred_product'),\n    path('preferred_products/edit/<int:customer_id>/', views.edit_preferred_product, name='edit_preferred_product'),\n    path('preferred_products/delete/<int:customer_id>/<int:product_id>/', views.delete_preferred_product, name='delete_preferred_product'),\n    path('preferred_products/view/<int:customer_id>/', views.view_preferred_products, name='view_preferred_products'),\n\n    path('sales/report/', views.generate_sales_report, name='generate_sales_report'),\n    path('sales/trends/', views.analyze_sales_trends, name='analyze_sales_trends'),\n    path('sales/performance/', views.product_performance_analysis, name='product_performance_analysis'),\n]"}, {"file": "admin.py", "path": "app/admin.py", "code": "from django.contrib import admin\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nadmin.site.register(Customer)\nadmin.site.register(Product)\nadmin.site.register(PurchaseRecord)\nadmin.site.register(PreferredProduct)"}, {"file": "serializers.py", "path": "app/serializers.py", "code": "from rest_framework import serializers\nfrom .models import Customer, Product, PurchaseRecord, PreferredProduct\n\nclass CustomerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Customer\n        fields = '__all__'\n\nclass ProductSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Product\n        fields = '__all__'\n\nclass PurchaseRecordSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PurchaseRecord\n        fields = '__all__'\n\nclass PreferredProductSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = PreferredProduct\n        fields = '__all__'"}], "14": [{"file": "views.py", "path": "hello_world/views.py", "code": "from django.shortcuts import render\n\ndef hello_world_view(request):\n    context = {\n        'message': 'Hello World'\n    }\n    return render(request, 'hello_world/hello_world.html', context)"}, {"file": "urls.py", "path": "hello_world/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.hello_world_view, name='hello_world'),\n]"}, {"file": "urls.py", "path": "myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('hello_world.urls')),\n]"}, {"file": "hello_world.html", "path": "hello_world/templates/hello_world/hello_world.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Hello World</title>\n    <style>\n        body {\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n            margin: 0;\n            font-family: sans-serif;\n            background-color: #f0f0f0;\n        }\n        .message {\n            font-size: 2em;\n            color: #333;\n        }\n\n        /* Responsive Design (Example) */\n        @media (max-width: 768px) {\n            .message {\n                font-size: 1.5em;\n            }\n        }\n\n    </style>\n</head>\n<body>\n    <div class=\"message\">{{ message }}</div>\n</body>\n</html>"}, {"file": "apps.py", "path": "hello_world/apps.py", "code": "from django.apps import AppConfig\n\n\nclass HelloWorldConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'hello_world'"}, {"file": "settings.py", "path": "myproject/settings.py", "code": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'hello_world',\n]\n\nTEMPLATES = [\n        {\n            'BACKEND': 'django.template.backends.django.DjangoTemplates',\n            'DIRS': [],\n            'APP_DIRS': True,\n            'OPTIONS': {\n                'context_processors': [\n                    'django.template.context_processors.debug',\n                    'django.template.context_processors.request',\n                    'django.contrib.auth.context_processors.auth',\n                    'django.contrib.messages.context_processors.messages',\n                ],\n            },\n        },\n    ]\n\nSTATIC_URL = 'static/'"}], "15": [{"file": "urls.py", "path": "myproject/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('helloworld/', views.helloworld, name='helloworld'),\n]"}, {"file": "views.py", "path": "myapp/views.py", "code": "from django.shortcuts import render\nfrom django.http import HttpResponse\n\n\ndef home(request):\n    return render(request, 'home.html')\n\n\ndef helloworld(request):\n    return render(request, 'helloworld.html')\n"}, {"file": "home.html", "path": "myapp/templates/home.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome!</h1>\n    <a href=\"{% url 'helloworld' %}\"><button>Go to HelloWorld</button></a>\n</body>\n</html>"}, {"file": "helloworld.html", "path": "myapp/templates/helloworld.html", "code": "<!DOCTYPE html>\n<html>\n<head>\n    <title>HelloWorld</title>\n</head>\n<body>\n    <h1>HelloWorld</h1>\n</body>\n</html>"}, {"file": "urls.py", "path": "myproject/myproject/urls.py", "code": "from django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]"}], "16": [{"file": "input_validation.py", "path": "modules/input_validation.py", "code": "def check_file_existence(filename):\n    pass\n\ndef validate_headers(filename, expected_headers):\n    pass\n\ndef validate_time_column(filename):\n    pass\n\ndef validate_data_integrity(filename):\n    pass\n\ndef validate_null_value(filename):\n    pass\n"}, {"file": "data_transformation.py", "path": "modules/data_transformation.py", "code": "def transform_to_two_dimension_table(data):\n    pass\n\ndef data_mapping(data, table):\n    pass\n"}, {"file": "output_creation.py", "path": "modules/output_creation.py", "code": "def create_output_excel_file(filename):\n    pass\n\ndef save_table_to_excel(data, filename):\n    pass\n"}, {"file": "main.py", "path": "main.py", "code": "from modules import input_validation\nfrom modules import data_transformation\nfrom modules import output_creation\n\n\ndef main():\n    # Input File Validation\n    filename = 'Spring Semester Subjects.xlsx'\n    if input_validation.check_file_existence(filename):\n        headers = ['#', 'Name', 'Weekday', 'Time']\n        if input_validation.validate_headers(filename, headers):\n            if input_validation.validate_time_column(filename):\n                if input_validation.validate_data_integrity(filename):\n                    if not input_validation.validate_null_value(filename):\n                        # Data Transformation\n                        data = [] # Load data from excel file\n                        two_dim_table = data_transformation.transform_to_two_dimension_table(data)\n                        transformed_table = data_transformation.data_mapping(data, two_dim_table)\n\n                        # Output File Creation\n                        output_filename = 'Transformed_Subjects.xlsx'\n                        output_creation.create_output_excel_file(output_filename)\n                        output_creation.save_table_to_excel(transformed_table, output_filename)\n\nif __name__ == \"__main__\":\n    main()\n"}], "17": [{"file": "data_preparation.py", "path": "src/data_preparation.py", "code": "import pandas as pd\n\n\ndef read_dataset(filename):\n    \"\"\"Load the dataset.\n\n    Args:\n        filename (str): The name of the Excel file to load.\n\n    Returns:\n        pandas.DataFrame: The loaded dataset.\n\n    Raises:\n        FileNotFoundError: If the file is not found.\n    \"\"\"\n    try:\n        df = pd.read_excel(filename)\n        return df\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"File not found: {filename}\")\n\n\ndef lag_dependent_variable(df, column_name='result', lag=1):\n    \"\"\"Apply a one-period lag to the specified column.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        column_name (str): The name of the column to lag.\n        lag (int): The number of periods to lag.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with the lagged column.\n    \"\"\"\n    df['lagged_result'] = df[column_name].shift(lag)\n    df = df.dropna()\n    return df\n\n\ndef prepare_independent_variables(df, dependent_variable='lagged_result'):\n    \"\"\"Prepare the independent variables and handle missing values.\n\n    Args:\n        df (pandas.DataFrame): The input DataFrame.\n        dependent_variable (str): The name of the dependent variable column.\n\n    Returns:\n        pandas.DataFrame: The DataFrame with independent and dependent variables.\n\n    Raises:\n        ValueError: If null values are found in the DataFrame.\n    \"\"\"\n    if df.isnull().any().any():\n        raise ValueError(\"Null values found in the DataFrame.  Stopping execution.\")\n\n    independent_variables = [col for col in df.columns if col != dependent_variable]\n    X = df[independent_variables]\n    y = df[dependent_variable]\n    return X, y"}, {"file": "model_creation.py", "path": "src/model_creation.py", "code": "import statsmodels.api as sm\n\ndef create_logistic_model(X, y):\n    \"\"\"Develop a logistic regression model.\n\n    Args:\n        X (pandas.DataFrame): Independent variables.\n        y (pandas.Series): Dependent variable.\n\n    Returns:\n        statsmodels.discrete.discrete_model.BinaryResultsWrapper: The fitted logistic regression model.\n    \"\"\"\n    X = sm.add_constant(X)\n    logistic_model = sm.Logit(y, X)\n    model = logistic_model.fit()\n    return model\n\n\ndef generate_model_summary(model):\n    \"\"\"Generate a summary of the logistic model.\n\n    Args:\n        model (statsmodels.discrete.discrete_model.BinaryResultsWrapper): The fitted logistic regression model.\n\n    Returns:\n        str: The model summary as a string.\n    \"\"\"\n    return model.summary()"}, {"file": "output.py", "path": "src/output.py", "code": "import pandas as pd\n\ndef write_summary(summary, filename):\n    \"\"\"Output the model summary to an Excel file.\n\n    Args:\n        summary (str): The model summary.\n        filename (str): The name of the Excel file to write to.\n    \"\"\"\n    df = pd.DataFrame([summary])\n    df.to_excel(filename, index=False)"}, {"file": "main.py", "path": "src/main.py", "code": "from src import data_preparation\nfrom src import model_creation\nfrom src import output\n\n\ndef main():\n    # Data Preparation\n    try:\n        df = data_preparation.read_dataset('Gamedata.xlsx')\n        df = data_preparation.lag_dependent_variable(df)\n        X, y = data_preparation.prepare_independent_variables(df)\n\n        # Model Creation\n        model = model_creation.create_logistic_model(X, y)\n        summary = model_creation.generate_model_summary(model)\n\n        # Output\n        output.write_summary(summary, 'Logistic.xlsx')\n        print(\"Model summary written to Logistic.xlsx\")\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n    except ValueError as e:\n        print(f\"Error: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n\nif __name__ == \"__main__\":\n    main()"}], "18": [{"file": "main_menu.py", "path": "src/main_menu.py", "code": "# Main Menu functionality\n\ndef start_game():\n    # Logic to start a new game\n    pass\n\ndef instructions():\n    # Logic to display game instructions\n    pass\n\ndef exit_game():\n    # Logic to exit the game\n    pass\n\ndef main_menu():\n    # Main menu loop and input handling\n    pass"}, {"file": "game_environment.py", "path": "src/game_environment.py", "code": "# Game Environment functionality\n\ndef move_player(direction):\n    # Logic to move the player\n    pass\n\ndef look_around():\n    # Logic to inspect the current area\n    pass\n\ndef pick_item():\n    # Logic to pick up an item\n    pass\n\ndef check_inventory():\n    # Logic to check the player's inventory\n    pass"}, {"file": "game_logic.py", "path": "src/game_logic.py", "code": "# Game Logic functionality\n\ndef parse_command(command):\n    # Logic to parse player commands\n    pass\n\ndef update_game_state(action):\n    # Logic to update the game state\n    pass"}, {"file": "help_support.py", "path": "src/help_support.py", "code": "# Help and Support functionality\n\ndef display_help():\n    # Logic to display in-game help\n    pass"}, {"file": "game.py", "path": "src/game.py", "code": "# Main game loop and initialization\n\nfrom src import main_menu, game_environment, game_logic, help_support\n\ndef main():\n    # Initialize game\n    # Game loop\n    pass\n\nif __name__ == \"__main__\":\n    main()"}], "19": "```json\n[\n  {\n    \"file\": \"batch_program.py\",\n    \"path\": \"src/batch_program.py\",\n    \"code\": \"\"\"\n# src/batch_program.py\n\n# Import necessary libraries\n\ndef ReadDeathlistData():\n    \\\\\"\\\\\"\\\\\"\n    Load and read data from the 'Deathlist.csv' file.\n    \\\\\"\\\\\"\\\\\"\n    pass\n\ndef ProcessData():\n    \\\\\"\\\\\"\\\\\"\n    Process the dataset to structure data appropriately for weekly analysis.\n    \\\\\"\\\\\"\\\\\"\n    pass\n\ndef CalculateWeeklyDeaths():\n    \\\\\"\\\\\"\\\\\"\n    Aggregate the data to calculate the number of deaths per week.\n    \\\\\"\\\\\"\\\\\"\n    pass\n\ndef GenerateHistogram():\n    \\\\\"\\\\\"\\\\\"\n    Create a histogram depicting the weekly deaths calculated from the dataset.\n    \\\\\"\\\\\"\\\\\"\n    pass\n\ndef OutputHistogram():\n    \\\\\"\\\\\"\\\\\"\n    Print or display the generated histogram to the user.\n    \\\\\"\\\\\"\\\\\"\n    pass\n\ndef ValidateDataset():\n    \\\\\"\\\\\"\\\\\"\n    Validate the dataset to ensure it contains the required data and format before processing.\n    \\\\\"\\\\\"\\\\\"\n    pass\n\ndef main():\n    # Read Deathlist Data\n    deathlist_data = ReadDeathlistData()\n\n    # Process Data\n    processed_data = ProcessData()\n\n    # Calculate Weekly Deaths\n    weekly_deaths = CalculateWeeklyDeaths()\n\n    # Generate Histogram\n    histogram = GenerateHistogram()\n\n    # Output Histogram\n    OutputHistogram()\n\n    # Validate Dataset (Optional)\n    # ValidateDataset()\n\nif __name__ == \"__main__\":\n    main()\n\"\"\"\n  }\n]\n```", "20": [{"file": "models.py", "path": "blog/models.py", "code": "from django.db import models\n\nclass BlogPost(models.Model):\n    title = models.CharField(max_length=200)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n    category = models.ForeignKey('Category', on_delete=models.SET_NULL, null=True, blank=True)\n\n    def __str__(self):\n        return self.title\n\nclass Comment(models.Model):\n    blog_post = models.ForeignKey(BlogPost, on_delete=models.CASCADE)\n    author = models.CharField(max_length=100)\n    content = models.TextField()\n    publication_date = models.DateTimeField(auto_now_add=True)\n\n    def __str__(self):\n        return f'Comment by {self.author} on {self.blog_post.title}'\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n\n    def __str__(self):\n        return self.name"}, {"file": "views.py", "path": "blog/views.py", "code": "from django.shortcuts import render, get_object_or_404, redirect\nfrom .models import BlogPost, Category, Comment\nfrom django.db.models import Q\nfrom django.contrib.auth.decorators import login_required\n\ndef home(request):\n    latest_posts = BlogPost.objects.order_by('-publication_date')[:5] # Display Latest Blogs\n    query = request.GET.get('q') # Search Bar\n    if query:\n        latest_posts = BlogPost.objects.filter(Q(title__icontains=query) | Q(content__icontains=query))\n    return render(request, 'blog/home.html', {'latest_posts': latest_posts})\n\n\ndef blog_post_detail(request, pk):\n    post = get_object_or_404(BlogPost, pk=pk)\n    return render(request, 'blog/blog_post_detail.html', {'post': post})\n\n@login_required\ndef add_post(request):\n    # Add Post\n    pass\n\n@login_required\ndef manage_post(request, pk):\n    #Edit and delete post\n    pass\n\n@login_required\ndef manage_comments(request, comment_id):\n     #Delete comment\n    pass\n\ndef about(request):\n    return render(request, 'blog/about.html')\n\n\ndef categories(request):\n    categories = Category.objects.all()\n    return render(request, 'blog/categories.html', {'categories': categories})\n\n\ndef category_detail(request, category_id):\n    category = get_object_or_404(Category, pk=category_id)\n    posts = BlogPost.objects.filter(category=category)\n    return render(request, 'blog/category_detail.html', {'category': category, 'posts': posts})\n\n@login_required\ndef manage_categories(request):\n    #Add, edit and delete category\n    pass\n\ndef archive(request):\n    #Display Archived Posts and Date Filter\n    pass"}, {"file": "urls.py", "path": "blog/urls.py", "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n    path('post/<int:pk>/', views.blog_post_detail, name='blog_post_detail'),\n    path('about/', views.about, name='about'),\n    path('categories/', views.categories, name='categories'),\n    path('category/<int:category_id>/', views.category_detail, name='category_detail'),\n    path('archive/', views.archive, name='archive'),\n    path('add_post/', views.add_post, name='add_post'),\n    path('manage_post/<int:pk>/', views.manage_post, name='manage_post'),\n    path('manage_comments/<int:comment_id>/', views.manage_comments, name='manage_comments'),\n    path('manage_categories/', views.manage_categories, name='manage_categories'),\n]"}, {"file": "forms.py", "path": "blog/forms.py", "code": "from django import forms\nfrom .models import Comment\n\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['author', 'content']\n\nclass ContactForm(forms.Form):\n    name = forms.CharField(max_length=100)\n    email = forms.EmailField()\n    message = forms.CharField(widget=forms.Textarea)"}, {"file": "settings.py", "path": "project/settings.py", "code": "# Add 'blog' to INSTALLED_APPS\nINSTALLED_APPS = [\n    ...\n    'blog',\n]\n\n# Add templates directory\nTEMPLATES = [\n    {\n        ...\n        'DIRS': [BASE_DIR / 'templates'],\n        ...\n    },\n]"}]}