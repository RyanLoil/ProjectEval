{
    "1": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "asgi.py",
            "path": "bmi_calculator/asgi.py",
            "code": "\"\"\"\nASGI config for bmi_calculator project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "bmi_calculator/settings.py",
            "code": "\"\"\"\nDjango settings for bmi_calculator project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-_$tk*c)9p=t%23(g_7#v2lezugknwwx#ch_8b4-vpjoz-e2eab'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'calculator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'bmi_calculator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'bmi_calculator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "bmi_calculator/urls.py",
            "code": "\"\"\"\nURL configuration for bmi_calculator project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('calculator.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "bmi_calculator/wsgi.py",
            "code": "\"\"\"\nWSGI config for bmi_calculator project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bmi_calculator.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "bmi_calculator/__init__.py",
            "code": ""
        },
        {
            "file": "admin.py",
            "path": "calculator/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "calculator/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass CalculatorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'calculator'\n"
        },
        {
            "file": "models.py",
            "path": "calculator/models.py",
            "code": "from django.db import models\n\n# Create your models here.\n"
        },
        {
            "file": "tests.py",
            "path": "calculator/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "urls.py",
            "path": "calculator/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"
        },
        {
            "file": "views.py",
            "path": "calculator/views.py",
            "code": "from django.shortcuts import render\n\ndef index(request):\n    bmi = None\n    if request.method == 'POST':\n        height = float(request.POST.get('height'))\n        weight = float(request.POST.get('weight'))\n        bmi = weight / (height / 100) ** 2\n    return render(request, 'calculator/index.html', {'bmi': bmi})\n"
        },
        {
            "file": "__init__.py",
            "path": "calculator/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "calculator/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "index.html",
            "path": "calculator/templates/calculator/index.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>BMI Calculator</title>\n</head>\n<body>\n    <h1>BMI Calculator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"height\">Height (cm):</label>\n        <input type=\"number\" name=\"height\" id=\"height\" required><br>\n        <label for=\"weight\">Weight (kg):</label>\n        <input type=\"number\" name=\"weight\" id=\"weight\" required><br>\n        <button type=\"submit\">Calculate BMI</button>\n    </form>\n    {% if bmi is not None %}\n        <h2>Your BMI is: {{ bmi|floatformat:2 }}</h2>\n    {% endif %}\n</body>\n</html>"
        }
    ],
    "3": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "admin.py",
            "path": "generator/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "generator/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass GeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'generator'\n"
        },
        {
            "file": "models.py",
            "path": "generator/models.py",
            "code": "from django.db import models\n\n# Create your models here.\n"
        },
        {
            "file": "tests.py",
            "path": "generator/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "views.py",
            "path": "generator/views.py",
            "code": "from django.shortcuts import render\n\n# Create your views here.\nimport random\nimport string\n\ndef generate_password(request):\n    length = int(request.GET.get('length', 12))\n    characters = string.ascii_letters + string.digits + string.punctuation\n    password = ''.join(random.choice(characters) for _ in range(length))\n    return render(request, 'generator/password.html', {'password': password})\n\n"
        },
        {
            "file": "__init__.py",
            "path": "generator/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "generator/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "password.html",
            "path": "generator/templates/generator/password.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Password Generator</title>\n</head>\n<body>\n    <h1>Your Generated Password</h1>\n    <p>{{ password }}</p>\n    <form method=\"get\">\n        <label for=\"length\">Password Length:</label>\n        <input type=\"number\" id=\"length\" name=\"length\" min=\"1\" value=\"12\">\n        <button type=\"submit\">Generate</button>\n    </form>\n</body>\n</html>"
        },
        {
            "file": "asgi.py",
            "path": "password_generator/asgi.py",
            "code": "\"\"\"\nASGI config for password_generator project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "password_generator/settings.py",
            "code": "\"\"\"\nDjango settings for password_generator project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-%e-2v%%+ghg&1w9vo58twcu1^(k=5$et+zb!ie1qf=41b&f+t7'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'password_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'password_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "password_generator/urls.py",
            "code": "\"\"\"\nURL configuration for password_generator project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\nfrom generator import views\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', views.generate_password, name='generate_password'),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "password_generator/wsgi.py",
            "code": "\"\"\"\nWSGI config for password_generator project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'password_generator.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "password_generator/__init__.py",
            "code": ""
        }
    ],
    "4": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "asgi.py",
            "path": "qr_code_generator/asgi.py",
            "code": "\"\"\"\nASGI config for qr_code_generator project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "qr_code_generator/settings.py",
            "code": "\"\"\"\nDjango settings for qr_code_generator project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-ywahd(c@x(q^$regf5(#)9dab3+=^z%2dq+=hopj%2^32qz*u^'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'qr_generator',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'qr_code_generator.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'qr_code_generator.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "qr_code_generator/urls.py",
            "code": "\"\"\"\nURL configuration for qr_code_generator project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('qr_generator.urls')),\n]\n\n"
        },
        {
            "file": "wsgi.py",
            "path": "qr_code_generator/wsgi.py",
            "code": "\"\"\"\nWSGI config for qr_code_generator project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'qr_code_generator.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "qr_code_generator/__init__.py",
            "code": ""
        },
        {
            "file": "admin.py",
            "path": "qr_generator/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "qr_generator/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass QrGeneratorConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'qr_generator'\n"
        },
        {
            "file": "models.py",
            "path": "qr_generator/models.py",
            "code": "from django.db import models\n\n# Create your models here.\n"
        },
        {
            "file": "tests.py",
            "path": "qr_generator/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "urls.py",
            "path": "qr_generator/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]\n\n"
        },
        {
            "file": "views.py",
            "path": "qr_generator/views.py",
            "code": "from django.shortcuts import render\n\nimport qrcode\nfrom django.http import HttpResponse\nfrom io import BytesIO\n\ndef index(request):\n    qr_code_url = None\n    if request.method == 'POST':\n        data = request.POST.get('data')\n        if data:\n            qr = qrcode.make(data)\n            buffer = BytesIO()\n            qr.save(buffer, format='PNG')\n            qr_code_url = 'data:image/png;base64,' + buffer.getvalue().encode('base64').replace('\\n', '')\n    return render(request, 'qr_generator/index.html', {'qr_code_url': qr_code_url})\n"
        },
        {
            "file": "__init__.py",
            "path": "qr_generator/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "qr_generator/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "index.html",
            "path": "qr_generator/templates/qr_generator/index.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>QR Code Generator</title>\n</head>\n<body>\n    <h1>QR Code Generator</h1>\n    <form method=\"post\">\n        {% csrf_token %}\n        <label for=\"data\">Enter data to encode:</label>\n        <input type=\"text\" id=\"data\" name=\"data\" required>\n        <button type=\"submit\">Generate QR Code</button>\n    </form>\n    {% if qr_code_url %}\n        <h2>Generated QR Code:</h2>\n        <img src=\"{{ qr_code_url }}\" alt=\"QR Code\">\n    {% endif %}\n</body>\n</html>\n\n"
        }
    ],
    "5": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "admin.py",
            "path": "converter/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "converter/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass ConverterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'converter'\n"
        },
        {
            "file": "models.py",
            "path": "converter/models.py",
            "code": "from django.db import models\n\n# Create your models here.\n"
        },
        {
            "file": "tests.py",
            "path": "converter/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "urls.py",
            "path": "converter/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('convert/', views.convert, name='convert'),\n]"
        },
        {
            "file": "views.py",
            "path": "converter/views.py",
            "code": "from django.shortcuts import render\n\nfrom django.http import JsonResponse\nimport markdown\nfrom django.views.decorators.csrf import csrf_exempt\n\n\ndef index(request):\n    return render(request, 'converter/index.html')\n\n\n@csrf_exempt\ndef convert(request):\n    if request.method == 'POST':\n        markdown_text = request.POST.get('markdown_text', '')\n        html = markdown.markdown(markdown_text)\n        return JsonResponse({'html': html})\n    return JsonResponse({'error': 'Invalid request'}, status=400)\n"
        },
        {
            "file": "__init__.py",
            "path": "converter/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "converter/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "index.html",
            "path": "converter/templates/converter/index.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Markdown to HTML Converter</title>\n    <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n</head>\n<body>\n    <h1>Markdown to HTML Converter</h1>\n    <textarea id=\"markdown\" rows=\"10\" cols=\"50\" placeholder=\"Enter Markdown text here...\"></textarea>\n    <button id=\"convert\">Convert</button>\n    <h2>HTML Output</h2>\n    <div id=\"html-output\"></div>\n\n    <script>\n        $(document).ready(function() {\n            $('#convert').click(function() {\n                var markdownText = $('#markdown').val();\n                $.ajax({\n                    url: '/convert/',\n                    type: 'POST',\n                    data: { 'markdown_text': markdownText },\n                    success: function(response) {\n                        $('#html-output').html(response.html);\n                    },\n                    error: function() {\n                        alert('Error converting markdown to HTML.');\n                    }\n                });\n            });\n        });\n    </script>\n</body>\n</html>"
        },
        {
            "file": "asgi.py",
            "path": "markdown_html_converter/asgi.py",
            "code": "\"\"\"\nASGI config for markdown_html_converter project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "markdown_html_converter/settings.py",
            "code": "\"\"\"\nDjango settings for markdown_html_converter project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-k_3m*rex3fhut$4c^s%=+*#!vl5(kli!8zz491hh=9#0_v@o&v'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'converter',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'markdown_html_converter.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'markdown_html_converter.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "markdown_html_converter/urls.py",
            "code": "\"\"\"\nURL configuration for markdown_html_converter project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('converter.urls')),\n\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "markdown_html_converter/wsgi.py",
            "code": "\"\"\"\nWSGI config for markdown_html_converter project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'markdown_html_converter.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "markdown_html_converter/__init__.py",
            "code": ""
        }
    ],
    "6": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_app.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "admin.py",
            "path": "tasks/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "tasks/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass TasksConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'tasks'\n"
        },
        {
            "file": "models.py",
            "path": "tasks/models.py",
            "code": "from django.db import models\n\n# Create your models here.\n"
        },
        {
            "file": "tests.py",
            "path": "tasks/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "urls.py",
            "path": "tasks/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"
        },
        {
            "file": "views.py",
            "path": "tasks/views.py",
            "code": "from django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    return render(request, 'tasks/index.html')\n\n"
        },
        {
            "file": "__init__.py",
            "path": "tasks/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "tasks/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "index.html",
            "path": "tasks/templates/tasks/index.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Todo List</title>\n</head>\n<body>\n    <h1>Todo List</h1>\n    <ul>\n        <li>Sample Task 1</li>\n        <li>Sample Task 2</li>\n    </ul>\n</body>\n</html>"
        },
        {
            "file": "asgi.py",
            "path": "todo_app/asgi.py",
            "code": "\"\"\"\nASGI config for todo_app project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_app.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "todo_app/settings.py",
            "code": "\"\"\"\nDjango settings for todo_app project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-+t!$8)s1=i$lp*v^l%0_j%nue%fwxbg&zoheo1(2j^%##cq1iq'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'tasks',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'todo_app.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'todo_app.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "todo_app/urls.py",
            "code": "\"\"\"\nURL configuration for todo_app project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.http import HttpResponseRedirect\n\n\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('', lambda request: HttpResponseRedirect('/tasks/')),\n\n    path('admin/', admin.site.urls),\n    path('tasks/', include('tasks.urls')),\n\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "todo_app/wsgi.py",
            "code": "\"\"\"\nWSGI config for todo_app project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'todo_app.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "todo_app/__init__.py",
            "code": ""
        }
    ],
    "7": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "admin.py",
            "path": "budget/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "budget/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass BudgetConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget'\n"
        },
        {
            "file": "models.py",
            "path": "budget/models.py",
            "code": "from django.db import models\n\n# Create your models here.\n"
        },
        {
            "file": "tests.py",
            "path": "budget/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "urls.py",
            "path": "budget/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n]"
        },
        {
            "file": "views.py",
            "path": "budget/views.py",
            "code": "from django.shortcuts import render\n\n# Create your views here.\ndef index(request):\n    return render(request, 'budget/index.html')\n\n"
        },
        {
            "file": "__init__.py",
            "path": "budget/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "budget/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "index.html",
            "path": "budget/templates/budget/index.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Budget Control</title>\n    <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n</head>\n<body>\n    <h1>Budget Control Application</h1>\n    <canvas id=\"balanceChart\" width=\"400\" height=\"200\"></canvas>\n    <script>\n        const ctx = document.getElementById('balanceChart').getContext('2d');\n        const balanceChart = new Chart(ctx, {\n            type: 'line',\n            data: {\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n                datasets: [{\n                    label: 'Balance Over Time',\n                    data: [1200, 1150, 1100, 1050, 1000, 950, 900],\n                    borderColor: 'rgba(75, 192, 192, 1)',\n                    borderWidth: 2\n                }]\n            },\n            options: {\n                responsive: true,\n                scales: {\n                    y: {\n                        beginAtZero: true\n                    }\n                }\n            }\n        });\n    </script>\n</body>\n</html>"
        },
        {
            "file": "asgi.py",
            "path": "budget_control/asgi.py",
            "code": "\"\"\"\nASGI config for budget_control project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "budget_control/settings.py",
            "code": "\"\"\"\nDjango settings for budget_control project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-*a*426jn6wllh)t%b_4$s5m!*9msy_zt@u@+c*u&9uw4pl99wr'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'budget',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'budget_control.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'budget_control.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "budget_control/urls.py",
            "code": "\"\"\"\nURL configuration for budget_control project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('budget.urls')),\n\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "budget_control/wsgi.py",
            "code": "\"\"\"\nWSGI config for budget_control project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'budget_control.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "budget_control/__init__.py",
            "code": ""
        }
    ],
    "9": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_website.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "asgi.py",
            "path": "chatbot_website/asgi.py",
            "code": "\"\"\"\nASGI config for chatbot_website project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_website.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "chatbot_website/settings.py",
            "code": "\"\"\"\nDjango settings for chatbot_website project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-6ez%9^u@uara6rhpg2r%ov_!tpup4$z_i&^p-h=ri0y&7&x8#8'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'introduction',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'chatbot_website.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'chatbot_website.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "chatbot_website/urls.py",
            "code": "\"\"\"\nURL configuration for chatbot_website project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('introduction.urls')),\n\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "chatbot_website/wsgi.py",
            "code": "\"\"\"\nWSGI config for chatbot_website project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot_website.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "chatbot_website/__init__.py",
            "code": ""
        },
        {
            "file": "admin.py",
            "path": "introduction/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "introduction/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass IntroductionConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'introduction'\n"
        },
        {
            "file": "models.py",
            "path": "introduction/models.py",
            "code": "from django.db import models\n\n# Create your models here.\n"
        },
        {
            "file": "tests.py",
            "path": "introduction/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "urls.py",
            "path": "introduction/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]"
        },
        {
            "file": "views.py",
            "path": "introduction/views.py",
            "code": "from django.shortcuts import render\n\ndef home(request):\n    return render(request, 'introduction/home.html')\n"
        },
        {
            "file": "__init__.py",
            "path": "introduction/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "introduction/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "home.html",
            "path": "introduction/templates/introduction/home.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI Chatbot Introduction</title>\n</head>\n<body>\n    <h1>Welcome to Our AI Chatbot</h1>\n    <p>Discover the future of communication with our AI-powered chatbot. Seamlessly interact and get instant responses.</p>\n</body>\n</html>"
        }
    ],
    "12": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'accounting_system.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "asgi.py",
            "path": "accounting_system/asgi.py",
            "code": "\"\"\"\nASGI config for accounting_system project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'accounting_system.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "accounting_system/settings.py",
            "code": "\"\"\"\nDjango settings for accounting_system project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-t$(q)wobhluljq6h6kmz96-zng6t8op^qh900a93@b%h(&7q##'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = ['*']\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'claims',\n    'budget_control',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'accounting_system.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'accounting_system.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "accounting_system/urls.py",
            "code": "\"\"\"\nURL configuration for accounting_system project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "accounting_system/wsgi.py",
            "code": "\"\"\"\nWSGI config for accounting_system project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'accounting_system.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "accounting_system/__init__.py",
            "code": ""
        },
        {
            "file": "admin.py",
            "path": "budget_control/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\nfrom .models import Budget\n\n@admin.register(Budget)\nclass BudgetAdmin(admin.ModelAdmin):\n    list_display = ('expense_type', 'total_budget', 'spent_amount')\n    search_fields = ('expense_type',)\n"
        },
        {
            "file": "apps.py",
            "path": "budget_control/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass BudgetControlConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'budget_control'\n"
        },
        {
            "file": "models.py",
            "path": "budget_control/models.py",
            "code": "from django.db import models\n\n# Create your models here.\nclass Budget(models.Model):\n    expense_type = models.CharField(max_length=20)\n    total_budget = models.DecimalField(max_digits=15, decimal_places=2)\n    spent_amount = models.DecimalField(max_digits=15, decimal_places=2, default=0.00)\n\n    def __str__(self):\n        return f\"{self.expense_type} - Budget: {self.total_budget} - Spent: {self.spent_amount}\"\n"
        },
        {
            "file": "tests.py",
            "path": "budget_control/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "views.py",
            "path": "budget_control/views.py",
            "code": "from django.shortcuts import render\n\n# Create your views here.\n"
        },
        {
            "file": "__init__.py",
            "path": "budget_control/__init__.py",
            "code": ""
        },
        {
            "file": "0001_initial.py",
            "path": "budget_control/migrations/0001_initial.py",
            "code": "# Generated by Django 5.1.7 on 2025-03-31 07:47\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Budget',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('expense_type', models.CharField(max_length=20)),\n                ('total_budget', models.DecimalField(decimal_places=2, max_digits=15)),\n                ('spent_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "budget_control/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "admin.py",
            "path": "claims/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\nfrom .models import Claim\n\n@admin.register(Claim)\nclass ClaimAdmin(admin.ModelAdmin):\n    list_display = ('employee_name', 'expense_type', 'amount', 'status', 'submission_date', 'approval_date')\n    list_filter = ('status', 'expense_type')\n    search_fields = ('employee_name',)\n"
        },
        {
            "file": "apps.py",
            "path": "claims/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass ClaimsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'claims'\n"
        },
        {
            "file": "models.py",
            "path": "claims/models.py",
            "code": "from django.db import models\n\n# Create your models here.\nclass Claim(models.Model):\n    EXPENSE_CHOICES = [\n        ('Travel', 'Travel expenses'),\n        ('Labor', 'Labor expenses'),\n        ('Management', 'Management expenses'),\n        ('Equipment', 'Equipment expenses'),\n    ]\n    STATUS_CHOICES = [\n        ('Pending', 'Pending'),\n        ('Approved', 'Approved'),\n        ('Rejected', 'Rejected'),\n    ]\n\n    employee_name = models.CharField(max_length=100)\n    expense_type = models.CharField(max_length=20, choices=EXPENSE_CHOICES)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n    status = models.CharField(max_length=10, choices=STATUS_CHOICES, default='Pending')\n    submission_date = models.DateTimeField(auto_now_add=True)\n    approval_date = models.DateTimeField(null=True, blank=True)\n\n    def __str__(self):\n        return f\"{self.employee_name} - {self.expense_type} - {self.status}\"\n"
        },
        {
            "file": "tests.py",
            "path": "claims/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "views.py",
            "path": "claims/views.py",
            "code": "from django.shortcuts import render\n\n# Create your views here.\n"
        },
        {
            "file": "__init__.py",
            "path": "claims/__init__.py",
            "code": ""
        },
        {
            "file": "0001_initial.py",
            "path": "claims/migrations/0001_initial.py",
            "code": "# Generated by Django 5.1.7 on 2025-03-31 07:47\n\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Claim',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('employee_name', models.CharField(max_length=100)),\n                ('expense_type', models.CharField(choices=[('Travel', 'Travel expenses'), ('Labor', 'Labor expenses'), ('Management', 'Management expenses'), ('Equipment', 'Equipment expenses')], max_length=20)),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('status', models.CharField(choices=[('Pending', 'Pending'), ('Approved', 'Approved'), ('Rejected', 'Rejected')], default='Pending', max_length=10)),\n                ('submission_date', models.DateTimeField(auto_now_add=True)),\n                ('approval_date', models.DateTimeField(blank=True, null=True)),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "claims/migrations/__init__.py",
            "code": ""
        }
    ],
    "13": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_system.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "asgi.py",
            "path": "crm_system/asgi.py",
            "code": "\"\"\"\nASGI config for crm_system project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_system.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "crm_system/settings.py",
            "code": "\"\"\"\nDjango settings for crm_system project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-qir*9hzoayk(w!wf==g9neeb2th7ce!t))6nryq^fpj#$n_w20'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'customers',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'crm_system.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'crm_system.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "crm_system/urls.py",
            "code": "\"\"\"\nURL configuration for crm_system project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "crm_system/wsgi.py",
            "code": "\"\"\"\nWSGI config for crm_system project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'crm_system.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "crm_system/__init__.py",
            "code": ""
        },
        {
            "file": "admin.py",
            "path": "customers/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "customers/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass CustomersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'customers'\n"
        },
        {
            "file": "models.py",
            "path": "customers/models.py",
            "code": "from django.db import models\n\nclass Product(models.Model):\n    name = models.CharField(max_length=255)\n    category = models.CharField(max_length=255)\n    recommended_price = models.DecimalField(max_digits=10, decimal_places=2)\n\nclass Customer(models.Model):\n    name = models.CharField(max_length=255)\n    birthday = models.DateField()\n    age = models.IntegerField()\n    sex = models.CharField(max_length=10)\n    company = models.CharField(max_length=255)\n    phone_number = models.CharField(max_length=20)\n    preferred_products = models.ManyToManyField(Product, related_name='preferred_by')\n\nclass PurchaseRecord(models.Model):\n    datetime = models.DateTimeField(auto_now_add=True)\n    product = models.ForeignKey(Product, on_delete=models.CASCADE)\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    quantity = models.IntegerField()\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n"
        },
        {
            "file": "tests.py",
            "path": "customers/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "views.py",
            "path": "customers/views.py",
            "code": "from django.shortcuts import render\n\n# Create your views here.\n"
        },
        {
            "file": "__init__.py",
            "path": "customers/__init__.py",
            "code": ""
        },
        {
            "file": "0001_initial.py",
            "path": "customers/migrations/0001_initial.py",
            "code": "# Generated by Django 5.1.7 on 2025-03-31 07:51\n\nimport django.db.models.deletion\nfrom django.db import migrations, models\n\n\nclass Migration(migrations.Migration):\n\n    initial = True\n\n    dependencies = [\n    ]\n\n    operations = [\n        migrations.CreateModel(\n            name='Product',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('category', models.CharField(max_length=255)),\n                ('recommended_price', models.DecimalField(decimal_places=2, max_digits=10)),\n            ],\n        ),\n        migrations.CreateModel(\n            name='Customer',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=255)),\n                ('birthday', models.DateField()),\n                ('age', models.IntegerField()),\n                ('sex', models.CharField(max_length=10)),\n                ('company', models.CharField(max_length=255)),\n                ('phone_number', models.CharField(max_length=20)),\n                ('preferred_products', models.ManyToManyField(related_name='preferred_by', to='customers.product')),\n            ],\n        ),\n        migrations.CreateModel(\n            name='PurchaseRecord',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('datetime', models.DateTimeField(auto_now_add=True)),\n                ('quantity', models.IntegerField()),\n                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),\n                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customers.customer')),\n                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='customers.product')),\n            ],\n        ),\n    ]\n"
        },
        {
            "file": "__init__.py",
            "path": "customers/migrations/__init__.py",
            "code": ""
        }
    ],
    "15": [
        {
            "file": "manage.py",
            "path": "manage.py",
            "code": "#!/usr/bin/env python\n\"\"\"Django's command-line utility for administrative tasks.\"\"\"\nimport os\nimport sys\n\n\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
            "file": "admin.py",
            "path": "myapp/admin.py",
            "code": "from django.contrib import admin\n\n# Register your models here.\n"
        },
        {
            "file": "apps.py",
            "path": "myapp/apps.py",
            "code": "from django.apps import AppConfig\n\n\nclass MyappConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'myapp'\n"
        },
        {
            "file": "models.py",
            "path": "myapp/models.py",
            "code": "from django.db import models\n\n# Create your models here.\n"
        },
        {
            "file": "tests.py",
            "path": "myapp/tests.py",
            "code": "from django.test import TestCase\n\n# Create your tests here.\n"
        },
        {
            "file": "urls.py",
            "path": "myapp/urls.py",
            "code": "from django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.index, name='index'),\n    path('helloword/', views.helloword, name='helloword'),\n]\n"
        },
        {
            "file": "views.py",
            "path": "myapp/views.py",
            "code": "from django.http import HttpResponse\n\ndef helloword(request):\n    return HttpResponse('<h1>Hello, World!</h1>')\n\ndef index(request):\n    return render(request, 'index.html')\n\nfrom django.shortcuts import render\n\n# Create your views here.\n"
        },
        {
            "file": "__init__.py",
            "path": "myapp/__init__.py",
            "code": ""
        },
        {
            "file": "__init__.py",
            "path": "myapp/migrations/__init__.py",
            "code": ""
        },
        {
            "file": "index.html",
            "path": "myapp/templates/index.html",
            "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Home</title>\n</head>\n<body>\n    <button onclick=\"location.href='/helloword/'\">Go to Hello World</button>\n</body>\n</html>\n"
        },
        {
            "file": "asgi.py",
            "path": "mysite/asgi.py",
            "code": "\"\"\"\nASGI config for mysite project.\n\nIt exposes the ASGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/asgi/\n\"\"\"\n\nimport os\n\nfrom django.core.asgi import get_asgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_asgi_application()\n"
        },
        {
            "file": "settings.py",
            "path": "mysite/settings.py",
            "code": "\"\"\"\nDjango settings for mysite project.\n\nGenerated by 'django-admin startproject' using Django 5.1.7.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/topics/settings/\n\nFor the full list of settings and their values, see\nhttps://docs.djangoproject.com/en/5.1/ref/settings/\n\"\"\"\n\nfrom pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-2-ktft*=0k39os!ufe*4uiu*1vlroz-jm_vr8l0-pa4!eb#&s^'\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n\n# Application definition\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'mysite.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'mysite.wsgi.application'\n\n\n# Database\n# https://docs.djangoproject.com/en/5.1/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n\n# Password validation\n# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\n\n# Internationalization\n# https://docs.djangoproject.com/en/5.1/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_TZ = True\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.1/howto/static-files/\n\nSTATIC_URL = 'static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"
        },
        {
            "file": "urls.py",
            "path": "mysite/urls.py",
            "code": "\"\"\"\nURL configuration for mysite project.\n\nThe `urlpatterns` list routes URLs to views. For more information please see:\n    https://docs.djangoproject.com/en/5.1/topics/http/urls/\nExamples:\nFunction views\n    1. Add an import:  from my_app import views\n    2. Add a URL to urlpatterns:  path('', views.home, name='home')\nClass-based views\n    1. Add an import:  from other_app.views import Home\n    2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')\nIncluding another URLconf\n    1. Import the include() function: from django.urls import include, path\n    2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))\n\"\"\"\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('myapp.urls')),\n]\n"
        },
        {
            "file": "wsgi.py",
            "path": "mysite/wsgi.py",
            "code": "\"\"\"\nWSGI config for mysite project.\n\nIt exposes the WSGI callable as a module-level variable named ``application``.\n\nFor more information on this file, see\nhttps://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/\n\"\"\"\n\nimport os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'mysite.settings')\n\napplication = get_wsgi_application()\n"
        },
        {
            "file": "__init__.py",
            "path": "mysite/__init__.py",
            "code": ""
        }
    ],
    "18": [
        {
            "file": "bashcrawl.py",
            "path": "bashcrawl.py",
            "code": "class Room:\n    def __init__(self, name, description, connections):\n        self.name = name\n        self.description = description\n        self.connections = connections\n\nclass Game:\n    def __init__(self):\n        self.rooms = self.create_rooms()\n        self.current_room = self.rooms['start']\n        self.inventory = []\n\n    def create_rooms(self):\n        return {\n            'start': Room('Start Room', 'You are in a small, dimly lit room. There is a door to the north.', {'north': 'hallway'}),\n            'hallway': Room('Hallway', 'A long, narrow hallway. There are doors to the south and east.', {'south': 'start', 'east': 'treasure'}),\n            'treasure': Room('Treasure Room', 'You see a room filled with gold and jewels!', {'west': 'hallway'})\n        }\n\n    def play(self):\n        while True:\n            print(f\"\\n{self.current_room.name}\")\n            print(self.current_room.description)\n            command = input(\"What do you want to do? \").strip().lower()\n\n            if command in self.current_room.connections:\n                self.current_room = self.rooms[self.current_room.connections[command]]\n            elif command == 'quit':\n                print(\"Thanks for playing!\")\n                break\n            else:\n                print(\"Invalid command. Try 'north', 'south', 'east', 'west', or 'quit'.\")\n\nif __name__ == \"__main__\":\n    game = Game()\n    game.play()"
        }
    ],
    "19": [
        {
            "file": "make_chart.py",
            "path": "make_chart.py",
            "code": "import pandas as pd\nimport matplotlib.pyplot as plt\nfrom datetime import datetime\n\n# Load the dataset\nfile_path = 'Deathlist.csv'\n\ndef plot_weekly_deaths(file_path):\n    # Read the CSV file\n    df = pd.read_csv(file_path)\n    \n    # Convert 'Date of death' to datetime\n    df['Date of death'] = pd.to_datetime(df['Date of death'], errors='coerce')\n    \n    # Drop rows with invalid dates\n    df = df.dropna(subset=['Date of death'])\n    \n    # Set the date as the index\n    df.set_index('Date of death', inplace=True)\n    \n    # Resample the data by week and count the number of deaths\n    weekly_deaths = df.resample('W').size()\n    \n    # Plot the histogram\n    plt.figure(figsize=(10, 6))\n    weekly_deaths.plot(kind='bar')\n    plt.title('Weekly Deaths')\n    plt.xlabel('Week')\n    plt.ylabel('Number of Deaths')\n    plt.xticks(rotation=45)\n    plt.tight_layout()\n    plt.show()\n\n# Call the function to plot\nplot_weekly_deaths(file_path)"
        }
    ]
}