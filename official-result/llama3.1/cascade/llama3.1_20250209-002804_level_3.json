{"17": [{"file": "config.py", "path": "/home/user/project/config.py", "code": "input_file = 'Gamedata.xlsx'\noutput_file = 'Logistic.xlsx'"}, {"file": "read_and_validate_data.py", "path": "/home/user/project/data/read_and_validate_data.py", "code": "import pandas as pd\ndef read_and_validate_data(input_file):\n\tdata = pd.read_excel(input_file)\tif data.isnull().values.any():\t\treturn False\ntype(data) == 'pandas.core.frame.DataFrame'"}, {"file": "utils.py", "path": "/home/user/project/utils.py", "code": "import pandas as pd\ndef add_lagged_dependent_variable(data, target_column):\n\tdata['lagged_' + target_column] = data[target_column].shift()\n\traw_data.dropna(inplace=True)"}, {"file": "build_logistic_model.py", "path": "/home/user/project/model/build_logistic_model.py", "code": "import statsmodels.api as sm\nfrom sklearn.linear_model import LogisticRegression\ndef build_logistic_model(X, y):\n\tlogit_model = LogisticRegression()\n\tlogit_model.fit(X, y)"}, {"file": "data_processing.py", "path": "/home/user/project/data/data_processing.py", "code": "import pandas as pd\ndef prepare_features_and_target(data, target_column, lagged_column):\n\tfeatures = data.drop(columns=[lagged_column])\ntarget = data[target_column]"}, {"file": "save_summary_to_excel.py", "path": "/home/user/project/export/save_summary_to_excel.py", "code": "import pandas as pd\ndef save_summary_to_excel(result, output_file):\n\tresult.to_excel(output_file)"}, {"file": "main.py", "path": "/home/user/project/main.py", "code": "from config import input_file, output_file\nfrom read_and_validate_data import read_and_validate_data\nfrom build_logistic_model import build_logistic_model\ndef main():\n\tdata = read_and_validate_data(input_file)\n\tif data is None:\treturn False\n\tX, y = prepare_features_and_target(data, 'Target', 'Lagged_Target')\nclassifier = build_logistic_model(X, y)\nresults = classifier.summary()\n\tsave_summary_to_excel(results, output_file)"}], "19": [{"file": "main.py", "path": "deathlist_project/main.py", "code": "import os\r\ndef main():\r\ttry:\r\t\tif not os.path.isfile('input.csv'):\r\t\t\tprint(\"Input file 'input.csv' not found!\")\r\t\t\texit()\r\t\twith open('output.png', 'wb') as f:\r\t\t\tplt.savefig(f, dpi=300)      \n\r\t    except Exception as e:\r\t          print(e)\r\n\rif __name__ == '__main__':\r\tmain()"}, {"file": "19-stdanswer.py", "path": "deathlist_project/19-stdanswer.py", "code": "&# Global variables\ninput_file = 'Deathlist.csv'\noutput_file = 'weekly_deaths_histogram.png'\nglobal required_columns\ntext file \u221a required_columns.append('Date of death')\n\n\ndef check_file_existence(file_path):\n    ''''\n    Check if a file exists at the given file path.\n    ''''\n    return os.path.isfile(file_path)\n\r\n\ndef read_dataset(file_path):\n    ''''\n    Read the dataset from a CSV file and return a DataFrame.\n    ''''\n    global input_file \u221a df = pd.read_csv(input_file)\n\t\treturn pd.DataFrame(df)  \n\r\n\ndef validate_dataset(df, required_columns):\n    ''''\n    Validate that the dataset contains all required columns.\n    ''''\n    for col in required_columns:\r\t        if not col in df.columns:\r\t            raise ValueError(f\"Missing column '{col}'\")\n\r\n\ndef preprocess_dataset(df):\n    ''''\n    Preprocess the dataset, including cleaning and formatting dates.\n    ''''\n    global input_file \u221a  print(\"Dataset is empty! \" if df.empty else input_file + ' loaded.')\r\n\r\n\ndef plot_weekly_deaths(weekly_deaths, output_file):\n    ''''\n    Plot the weekly deaths and save as a histogram image file.\n    ''''\n    global required_columns \u221a  plt.hist(weekly_deaths, bins='auto')\r\tplt.xlabel('Weekly Deaths')\r\tplt.title('Histogram of Weekly Deaths')\r\tplt.grid(axis='y', linestyle='--')      \n\r\n\ndef main():\n    ''''\n    Main execution function to process the dataset and plot the histogram.\n    ''''\n    try:\r\t        df = read_dataset(input_file)\n\t        validate_dataset(df, required_columns)\n\t        df = preprocess_dataset(df)\n\t        weekly_deaths = df.groupby('Week').size()\n\t        plot_weekly_deaths(weekly_deaths, output_file)\n\t        print(f\"Histogram saved as '{output_file}'.\")\n    except (FileNotFoundError, KeyError, ValueError) as e:\r\t          print(e)\n\r    except Exception as e:\r\t            print(f\"An error occurred: {e}\")  \n\r\n\rif __name__ == 'main__':\n        main()"}, {"file": "deathlist.csv", "path": "deathlist_project/deathlist.csv", "code": "text_file_content"}, {"file": "requirements.txt", "path": "deathlist_project/requirements.txt", "code": "pandas==1.3.5\r\nmatplotlib==3.5.1\r\n"}]}