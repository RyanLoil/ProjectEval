{"1": "[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"bmi_calculator/somedir/models.py\",\n    \"code\": \"\"\"\nfrom django.db import models\n\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    height = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)\n    weight = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)\n\nclass Measurement(models.Model):\n    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, related_name='measurements')\n    measurement_date = models.DateField(auto_now_add=True)\n    height = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)\n    weight = models.DecimalField(max_digits=5, decimal_places=2, blank=True, null=True)\n    \"\"\"\n  },\n  {\n    \"file\": \"/example_app/templates/bmi_calculator.html\",\n    \"description\": \"Template for BMI Calculator Page\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"bmi_calculator/somedir/views.py\",\n    \"code\": \"\"\"\nfrom django.shortcuts import render, redirect\nfrom .models import UserProfile\n\ndef index(request):\n    if request.method == 'POST':\n        user = request.user\n        height = request.POST.get('height')\n        weight = request.POST.get('weight')\n        # Save measurements and calculate BMI\n        measurement = Measurement.objects.create(\n          user=user,\n          height=height,\n          weight=weight,\n        )\n        bmi = calculate_bmi(height, weight)\n        return render(request, 'bmi_result.html', {'bmi': bmi})\n    else:\n        return render(request, 'template.html')\n\"\"\"\n  },\n  {\n    \"file\": \"/example_app/static/js/main.js\",\n    \"description\": \"JavaScript for Interactive Chart\"\n  }\n]", "2": "[\n    {\n        \"file\": \"models.py\",\n        \"path\": \"somepath/somedir/models.py\",\n        \"code\": \"\"\"\nfrom django.db import models\n\nclass Currency(models.Model):\n    name = models.CharField(max_length=255)\n    symbol = models.CharField(max_length=10)\n\nclass RateHistory(models.Model):\n    date = models.DateField()\n    rate = models.DecimalField(max_digits=20, decimal_places=10)\n    currency = models.ForeignKey(Currency, on_delete=models.CASCADE)\n\nclass FavoriteCurrency(models.Model):\n    user = models.ForeignKey('auth.User', on_delete=models.CASCADE)\n    currency = models.ForeignKey(Currency, on_delete=models.CASCADE)\n        \"\"\"\n    },\n    {\n        \"file\": \"/admin.py\",\n        \"description\": \"Configure site administration\"\n    },\n    {\n        \"file\": \"/views.py\",\n        \"path\": \"somepath/somedir/views.py\",\n        \"code\": \"\"\"\nfrom django.shortcuts import render\nfrom .models import Currency, RateHistory\n\ndef get_currency_rates(request):\n    currencies = Currency.objects.all()\n    return render(request, 'rates.html', {'currencies': currencies})\n\ndef convert_currency(request):\n    # implementation for conversion logic\n    pass\n\nclass RatesView(ListView):\n    model = RateHistory\n    template_name = 'rates_history.html'\n        \"\"\"\n    },\n    {\n        \"file\": \"/forms.py\",\n        \"path\": \"somepath/somedir/forms.py\",\n        \"code\": \"\"\"\nfrom django import forms\nfrom .models import FavoriteCurrency\n\nclass FavoriteCurrencyForm(forms.ModelForm):\n    class Meta:\n        model = FavoriteCurrency\n        fields = ('user', 'currency')\n        \"\"\"\n    },\n    {\n        \"file\": \"/templates/rates.html\",\n        \"description\": \"Template for displaying current rates\"\n    },\n    {\n        \"file\": \"/templates/rates_history.html\",\n        \"description\": \"Template for displaying rate history\"\n    },\n    {\n        \"file\": \"/static/css/styles.css\",\n        \"description\": \"Custom CSS styles\"\n    }\n]", "3": "[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"pages\\\\models.py\",\n    \"code\": \"from django.db import models\\\\n\\\\nclass Page(models.Model):\\\\n\\\\tname = models.CharField(max_length=255)\\\\n\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"passwords\\\\views.py\",\n    \"code\": \"from django.shortcuts import render, redirect\\\\nfrom .models import Password\\\\nfrom .forms import PasswordForm\\\\n\\\\ndef view_saved_passwords(request):\\\\n\\\\t...\"\n  },\n  {\n    \"file\": \"/example_app/settings.json\",\n    \"description\": \"Contains settings for the application like algorithm preference and password length limit\"\n  },\n  {\n    \"file\": \"templates/passwords/savedpassword_detail.html\",\n    \"path\": \"passwords\\\\templates=passwords\",\n    \"code\": \"{% extends 'base.html' %}\\\\n\\\\n{% block content %}\\\\n\\\\t<h1>View Saved Password {{ obj.name }}<\\\\\\\\h1>\\\\n\"\n  },\n  {\n    \"file\": \"/example_app/password_requirements.csv\",\n    \"description\": \"Contains various password requirements like minimum and maximum length, character set etc.\"\n  },\n  {\n    \"file\": \"serializers.py\",\n    \"path\": \"pages\\\\serializers.py\",\n    \"code\": \"from rest_framework import serializers\\\\nfrom .models import Page\\\\n\\\\nclassPageSerializer(serializers.ModelSerializer):\\\\n\\\\t...\"\n  }\n]", "4": [{"file": "models.py", "path": "/app/models.py", "code": "from django.db import models"}, {"file": "+settings.py", "path": "/app/settings.py", "code": "import os\nDEBUG = True"}, {"file": "views.py", "path": "/app/views.py", "code": "from django.shortcuts import render\nfrom .models import QRCode"}, {"file": "urls.py", "path": "/app/urls.py", "code": "from django.urls import path, include"}, {"file": "/app/templates/home.html", "description": "Home page template displaying generated QR codes"}, {"file": "/app/templates/settings.html", "description": "Settings page template for customizing QR code properties"}, {"file": "/app/templates/help.html", "description": "Help page template with FAQs and contact information"}, {"file": "/app/templates/gallery.html", "description": "Gallery page template showing previously generated QR codes"}, {"file": "admin.py", "path": "/app/admin.py", "code": ""}], "5": [{"file": "/home/user/project/templates/Home.html", "description": "Home Template"}, {"file": "/home/user/project/static/Home.js", "description": "Page Navigation"}, {"file": "utils.py", "path": "/home/user/project/utils.py", "code": "# template utils\n\ndef render_template(path):\n    # ..."}, {"file": "models.py", "path": "/home/user/project/models.py", "code": "# models definition\n\nclass Document(models.Model):\n    file = models.FileField(upload_to='documents/')"}, {"file": "views.py", "path": "/home/user/project/views.py", "code": "# views for Home and About Us page\n\ndef home(request):\n    # ..."}, {"file": "views.py", "path": "/home/user/project/views.py", "code": "# views for Upload File page\n\nclass UploadView(View):\n    def post(self, request):\n        # ..."}], "6": [{"file": "models.py", "path": "somepath/somedir/models.py", "code": "from django.db import models"}, {"file": "views.py", "path": "somepath/somedir/views.py", "code": "from django.shortcuts import render"}, {"file": "forms.py", "path": "somepath/somedir/forms.py", "code": "from django import forms"}, {"file": "/example_app/pages.py", "description": "Manage application pages, their URLs and templates"}, {"file": "/example_app/tasks/models.py", "description ": "Model that represents each task with fields for description, due date, priority, category, status"}, {"file": "/example_app/filter/tasks/queries.py", "description ": "Query manager for specific categories and filters"}, {"file": "/example_app/dashboard/templates/dashboard.html", "description": "Basic dashboard template displaying all tasks"}, {"file": "/example_app/task_management/models.py", "description ": "Model to handle task statuses, deletions, moving tasks between lists"}, {"file": "/example_app/timesheets/queries.py", "description ": "Fetch data for time spent on each task and categories"}, {"file": "/example_app/gantt-chart/views.py", "description": "Project Gantt chart creation views with timeline dependencies"}, {"file": "/example_app/settings.py", "description ": "Customizable application settings for layouts, reminders"}, {"file": "/example_app/__init__.py", "description": "Empty file initiating app directory"}], "7": [{"file": "models.py", "path": "app/models.py", "code": ""}, {"file": "/transaction/urls.py", "description": "Defines URL patterns for transaction management"}, {"file": "/budgetplanner/forms.py", "path": "app/budgetplanner/forms.py", "code": ""}, {"file": "/utils/settings.py", "description": "Contains app settings and configuration options"}, {"file": "/chart/views.py", "path": "app/chart/views.py", "code": ""}, {"file": "/transactions/models.py", "description": "Defines database schema for transactions"}, {"file": "/home/templates/dashboard.html", "description": "Default HTML template for dashboard page renders functions and operations of the system."}, {"file": "/users/profiles/models.py", "path": "app/users/profiles/models.py", "code": ""}, {"file": "/transaction/forms.py", "path": "app/transaction/forms.py", "code": ""}], "8": [{"file": "views.py", "path": "someapp/somedir/views.py", "code": "from django.shortcuts import render \n def home(request):\n     return render(request, 'home.html')\n"}, {"file": "/pages/home.html", "description": "Template for the home page showing a visual monthly calendar"}, {"file": "urls.py", "path": "someapp/somedir/urls.py", "code": "from django.urls import path\n from .views import home\nurlpatterns = [\n     path('', home, name='home'),\n]\n"}, {"file": "/templates/home.html", "description": "Template for displaying current month's calendar with functionality to switch months"}, {"file": "models.py", "path": "someapp/somedir/models.py", "code": "from django.db import models\n class Event(models.Model):\n     title = models.CharField(max_length=200)\n     date_time = models.DateTimeField()"}, {"file": "/pages/add-event.html", "description": "Template allowing users to create and set reminders for new events"}, {"file": "forms.py", "path": "someapp/somedir/forms.py", "code": "from django import forms\n class EventForm(forms.ModelForm):\n     class Meta:\n         model = Event\n         fields = ('title', 'date_time')\n"}, {"file": "/pages/search-events.html", "description": "Template allowing search by keyword and filter events within a date range"}, {"file": "utils.py", "path": "someapp/somedir/utils.py", "code": "from datetime import date\n def get_previous_next_months(month):\n     current_date = date.today()\n     if month == 'previous':\n         return get_previous_month(current_date)\n     elif month == 'next':\n         return get_next_month(current_date)"}, {"file": "/pages/edit-event.html", "description": "Template enabling users to edit or delete existing events"}, {"file": "/includes/flash_message.html", "description": "Reusable template fragment for displaying messages, e.g., for new event creation success or failure"}], "9": [{"file": "views.py", "path": "home/views.py", "code": "def home_page(request):"}, {"file": "urls.py", "path": "/example_app/urls.py", "description": "Contains URL routing configuration"}, {"file": "models.py", "path": "home/models.py", "code": "from django.db import models"}, {"file": "admin.py", "path": "home/admin.py", "code": "class UserAdmin(admin.ModelAdmin)"}, {"file": "/features/views.py", "path": "/example_app/features/views.py", "code": "from .models import FeatureModel"}, {"file": "/features/urls.py", "path": "/example_app/features/urls.py", "description": "Contains URL routing configuration for features page"}, {"file": "templates/home.html", "path": "/example_app/templates/home.html", "description": ""}, {"file": "/integrations/views.py", "path": "/example_app/integrations/views.py", "code": "from .models import IntegrationModel"}, {"file": "/integrations/urls.py", "path": "/example_app/integrations/urls.py", "description": "Contains URL routing configuration for integrations page"}, {"file": "/pricing/views.py", "path": "/example_app/pricing/views.py", "code": "from .models import PricingModel"}, {"file": "/pricing/urls.py", "path": "/example_app/pricing/urls.py", "description": "Contains URL routing configuration for pricing page"}, {"file": "templates/support.html", "path": "/example_app/templates/support.html", "description": ""}, {"file": "static/css/styles.css", "path": "/example_app/static/css/styles.css", "description": "Custom CSS styles for the application"}], "10": "[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"fitness_tracker/models.py\",\n    \"code\": \"\"\"\n      from django.db import models\n      # Define user model with custom fields \n      \n        \n        \"\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"fitness_tracker/views.py\",\n    \"code\": \"\"\"\n      from django.shortcuts import render, redirect\n      from .models import User\n \n        \n      \n      def login_view(request):        \n        if request.method == 'POST':\n          username = request.POST.get('username')\n          password = request.POST.get('password') \n          user = authenticate(username=username, password=password) \n          if user != None:\n            login(request, user)\n            return redirect(reverse('home'))     \n          else:\n            messages.error(request, 'Invalid username or Password.')           \n      \"\"\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"fitness_tracker/urls.py\",\n    \"code\": \"\"\"\n      from django.urls import path\n      from .views import login_view\n \n        \n      \n      urlpatterns = [\n        path('login/', login_view, name='login'),\n        \n      ]\n  \n        \n        \n        \n   \n     \n      \n      # Include the dashboard urls for tracking and analysis\n       url(r'',include('dashboard.urls')),\n     \"\"\"\n  },\n  {\n    \"file\": \"/templates/track_progress.html\",\n    \"path\": \"fitness_tracker/templates/track_progress.html\",\n    \"code\": \"<html><body>Track Progress</body></html>\"\n  }\n]", "11": [{"page": "core", "url": "core/", "views": [{"file": "/example_app/urls.py", "description": "URL Configuration"}, {"file": "/example_app/views.py", "description": "View Functions"}]}, {"page": "home", "url": "home/", "views": []}, {"page": "about", "url": "about/", "views": [{"file": "/example_app/templates/about.html", "description": "HTML Template"}, {"file": "/example_app/models.py", "description": "Data Models (non-relevant)"}]}], "12": "[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"expense_manager/models.py\",\n    \"code\": \"\"\"\nfrom django.db import models\n\nclass ExpenseClaim(models.Model):\n    # fields for expense claim\n    pass\n\nclass Receipt(models.Model):\n    # fields for receipt\n    pass\n\nclass AccountingSubject(models.Model):\n    # fields for accounting subject\n    pass\n\"\"\"\n  },\n  {\n    \"file\": \"/forms.py\",\n    \"description\": \"Contains forms for employee and administrator\"\n  },\n  {\n    \"file\": \"serializers.py\",\n    \"path\": \"expense_manager/serializers.py\",\n    \"code\": \"\"\"\nfrom rest_framework import serializers\n\nclass ExpenseClaimSerializer(serializers.ModelSerializer):\n    # fields for expense claim serializer\n    pass\n\nclass ReceiptSerializer(serializers.ModelSerializer):\n    # fields for receipt serializer\n    pass\n\"\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"expense_manager/views.py\",\n    \"code\": \"\"\"\nfrom django.http import HttpResponse\nfrom .models import ExpenseClaim\n\ndef submit_expense_claim(request):\n    # view function to handle employee submitting expense claim\n    pass\n\ndef approve_claim(request, pk):\n    # view function to handle administrator approving claim\n    pass\n\"\"\"\n  },\n  {\n    \"file\": \"/urls.py\",\n    \"description\": \"Contains URLs for views\"\n  },\n  {\n    \"file\": \"templates/expense_manager/index.html\",\n    \"path\": \"expense_manager/templates/expense_manager/\",\n    \"description\": \"Home page template\"\n  },\n  {\n    \"file\": \"admin.py\",\n    \"path\": \"expense_manager/admin.py\",\n    \"code\": \"\"\"\nfrom django.contrib import admin\nfrom .models import ExpenseClaim\n\nclass ExpenseClaimAdmin(admin.ModelAdmin):\n    # fields for expense claim admin interface\n    pass\n\"\"\"\n  }\n]", "13": {"models": [{"file": "customer/models.py", "path": "somepath/somedir/customer/models.py", "code": "from django.db import models\n# Django model for customer information management"}, {"file": "/example_app/db/tables_customers.sql", "description": "SQL schema for customers table in database"}], "views": [{"file": "customer/views.py", "path": "somepath/somedir/customer/views.py", "code": "from django.shortcuts import render, redirect\n# Views for customer information management"}, {"file": "/example_app/routes.py", "description": "Server-side routes for API"}], "templates": [{"file": "customer/templates/customer-info.html", "path": "somepath/somedir/customer/templates/customer-info.html", "code": "<h1>Customer Information</h1>\n# Template for customer information management page"}, {"file": "/example_app/error_pages/404.html", "description": "HTML template to display 'Nothing matches the specified pattern' error"}], "urls": [{"file": "customer/urls.py", "path": "somepath/somedir/customer/urls.py", "code": "from django.urls import path\n# URL configurations for customer information management"}, {"file": "/example_app/urls.py", "description": "Main application URLs configuration"}], "forms": [{"file": "customer/forms.py", "path": "somepath/somedir/customer/forms.py", "code": "from django import forms\n# Forms for customer information management"}, {"file": "/example_app/forms.py", "description": "Forms for other features and functionalities"}], "views_functions": [{"function": "search_by_name", "file": "customer/views.py", "path": "somepath/somedir/customer/views.py", "code": "from django.shortcuts import render\n# Function to search customers by name"}, {"function": "list_all_products", "file": "/example_app/product_info/views.py", "description": "Function in module 'product_info/views' to list all products"}], "models_fields": [{"field_name": "name", "model_file": "customer/models.py", "path": "somepath/somedir/customer/models.py", "code": "name = models.CharField(max_length=100)"}, {"field_name": "email", "file": "/example_app/db/tables_customers.sql", "description": "Email field in database schema"}]}, "14": [{"file": "/example_app/templates/hello.html", "description": "Template for Hello Word website"}, {"file": "/example_app/urls.py", "path": "./example_app/urls.py", "code": "{\n  path('', views.hello, name='hello'),\n}"}, {"file": "/example_app/views.py", "path": "./example_app/views.py", "code": "\nfrom django.shortcuts import HttpResponse\n\ndef hello(request):\n    return HttpResponse('Hello World!')\n"}, {"file": "/example_app/hello/templates/hello.html", "path": "./example_app/hello/templates/hello.html", "code": "<html><body>Hello {{ name }}!</body></html>"}], "15": "[\n    {\n      \"file\":\"/example_app/views.py\",\n      \"description\":\"View module for handling HTTP requests\"\n    },\n    {\n        \"file\":\"/example_app/urls.py\",\n        \"description\":\"Django URL configuration \"\n    },\n  {\n    \"file\":\"/example_app/models.py\",\n    \"description\":\"Defines database models schema\"\n   },\n   {\n     \"file\":\"/example_app/admin.py\",\n     \"description\":\"Admin interface for interacting with the Django Admin Interface.\"\n},\n{\n\"file\":\"/example_app/settings.py\",\n\"description\":\"Global project settings including path configurations\",\n},\n    {\n        \"file\": \"/example_app/urls.py\",\n  \"description \":\"Maps URLs to views in your app \",\n},\n   {\n     \"file\":\"/example_app__init__.py\",\n      \"description\":\"Indicator file for Python Package Structure\"\n },\n]", "16": [{"file": "batch_program.py", "path": "somepath/somedir/batch_program.py", "code": "import os, csv\n# Read excel function\ndef read_excel():\n    file_path = 'Spring_Semester_Subjects.xlsx'\n    with open(file_path, 'r') as file:\nsomething_else...\n"}, {"file": "/example_app/output.csv", "description": "Data output"}, {"file": "/example_app/Output.xlsx", "description": "Excel file output"}], "17": "[\n  {\n    \"file\": \"data_preprocessing.py\",\n    \"path\": \"src/preprocessing/\",\n    \"code\": \"\"\"\nimport pandas as pd\nimport numpy as np\nfrom statsmodels import logistic\n\ndef main():\n    # Import necessary libraries\n    from pandas import read_excel\n    \n    # Read dataset from Excel file\n    data = read_excel('Gamedata.xlsx')\n\n    return data\n\nif __name__ == \"__main__\":\n    main()\n\"\"\"\n  },\n  {\n    \"file\": \"/data_preprocessing/data_cleaning.xx\",\n    \"description\": \"Remove unnecessary columns or rows (if any)\"\n  },\n  {\n    \"file\": \"feature_preparation.py\",\n    \"path\": \"src/feature_extraction/\",\n    \"code\": \"\"\"\nimport pandas as pd\n\ndef main():\n    # Lag dependent variable by one period\n    data['result_lag'] = data['result'].shift(1)\n\n    return data\n    \nif __name__ == \"__main__\":\n    main()\n\"\"\"\n  },\n  {\n    \"file\": \"/feature_selection/x.x\",\n    \"description\": \"Select features for modeling\"\n  },\n  {\n    \"file\": \"model_creation_and_evaluation.py\",\n    \"path\": \"src/modeling/\",\n    \"code\": \"\"\"\nimport pandas as pd\nfrom statsmodels import logistic\n\ndef main():\n    # Create logistic regression model\n    model = logistic.Logit(data['result_lag'], data.drop('result_lag', axis=1))\n\n    # Fit the model to the data\n    model_fit = model.fit()\n\n    return model_fit\n    \nif __name__ == \"__main__\":\n    main()\n\"\"\"\n  },\n  {\n    \"file\": \"/model_evaluation/explanatory_plots.x\",\n    \"description\": \"Visualize how well your model fits with actual\"\n  }\n]", "18": [{"file": "/mainmenu/main_menu.py", "description": "Main Menu Controller"}, {"file": "/gameplay/gameplay_settings.py", "description": "Gameplay Settings Controller"}, {"file": "/gameworld/gameworld_controller.py", "description": "Game World Controller"}, {"file": "/inventory/inventoryManipulation.py", "description": "Inventory Manipulation Controller"}, {"file": "/game/equipment_actions.py", "description": "Equipment Actions Controller"}, {"file": "/combat/combat_control.py", "description": "Combat Control Controller"}, {"file": "/stats/character_stats.py", "description": "Character Stats Controller"}, {"file": "/save_n_load/save_n_load_controller.py", "description": "Save and Load Controller"}], "19": "[\n  {\n    \"file\": \"data_processing.py\",\n    \"path\": \"src/data_processing\\\\data_processing.py\",\n    \"code\": \"\"\"\nimport pandas as pd\nfrom datetime import date\nimport matplotlib.pyplot as plt\n\n# Read dataset from csv file\ndf = pd.read_csv('path_to_data/Deathlist.csv')\n\n# Process date field to extract week number\ndf['Date of death'] = pd.to_datetime(df['Date of death'], unit='s')\ndf['week'] = df['Date of death'].dt.week + 1\n\nprint(df.head())\n\"\"\"\n  },\n  {\n    \"file\": \"plotting.py\",\n    \"path\": \"src/plotting\\\\plotting.py\",\n    \"code\": \"\"\"\nimport pandas as pd\nfrom matplotlib import pyplot as plt\n\n# Load processed data from csv file\ndf = pd.read_csv('path_to_data/deathlist.txt')\n\n# Create histogram\nplt.figure(figsize=(8,6))\nplt.subplot(1,1,1)\ndf['week'].value_counts().plot(kind='bar')\nplt.xlabel('Week')\nplt.ylabel('Count of Deaths')\nplt.title('Weekly Deaths Distribution')\nplt.savefig('weekly_deaths.png', bbox_inches='tight')\n\nprint(\"Plot saved to weekly_deaths.png\")\n\"\"\"\n  },\n  {\n    \"file\": \"/example_app/Deathlist.csv\",\n    \"description\":\"This is the input data file\"\n  }\n]", "20": [{"file": "forms.py", "path": "somepath/somedir/forms.py"}, {"file": "/blog/urls.py", "description": "Configuration for Blog Entries page URLs"}, {"file": "views.py", "path": "somepath/somedir/views.py"}, {"file": "/admin.py", "description": "Admin Interface settings for User Profile page"}, {"file": "/accounts/urls.py", "description": "Configuration for Account Setup/Edit and Change Password URLs on User Profile page"}, {"file": "/templates/base.html", "description": "HTML template for layout of pages across all content"}]}