{"1": "{\n    \"models\": [\n        {\n            \"file\": \"./models/bmi.py\",\n            \"path\": \"app_name/models/\",\n            \"code\": \"from django.db import models\\\\n\\\\nclass BMI(models.Model):\\\\n    weight = models.DecimalField(max_digits=5, decimal_places=2)\\\\n    height = models.DecimalField(max_digits=4, decimal_places=1)\"\n        },\n        {\n            \"file\": \"./models/user_bmi_history.py\",\n            \"path\": \"app_name/models/\",\n            \"code\": \"from django.db import models\\\\n\\\\nclass UserBMICategory(models.Model):\\\\n    user_id = models.ForeignKey('auth.User', on_delete=models.CASCADE)\\\\n    bmi_value = models.DecimalField(max_digits=5, decimal_places=2)\"\n        }\n    ],\n    \"views.py\":\n        {\n            \"file\": \"./app_name/views.py\",\n            \"path\": \"app_name/\",\n            \"code\": \"\"\"\n                from django.shortcuts import render\n                from .models import BMI\n\n                def calculate_bmi(request):\n                    weight = float(request.POST['weight'])\n                    height = float(request.POST['height'])\n                    bmi_value = weight / (height ** 2)\n                    new_bmi = BMI.objects.create(weight=weight, height=height, bmi_value=bmi_value)\n                    return render(request, 'result.html', {'bmi': bmi_value})\n\n                def understand_bmi_categories(request):\n                    return render(request, 'categories.html')\n            \"\"\"\n        },\n    \"templates\":\n        {\n            \"file\": \"./templates/bmi_calculator.html\",\n            \"path\": \"app_name/templates/\",\n            \"description\": \"Template for BMI calculator\"\n        },\n        {\n            \"file\": \"./templates/result.html\",\n            \"path\": \"app_name/templates/\",\n            \"description\": \"Template to display the result of BMI calculation\"\n        },\n        {\n            \"file\": \"/static/css/styles.css\",\n            \"path\": \"\",\n            \"description\": \"Stylesheet for the application\"\n        }\n}", "2": "[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"app1/models.py\",\n    \"code\": \"\"\"\nCurrency(models.Model):\n    name = models.CharField(max_length=3)\n    symbol = models.CharField(max_length=10)\n\nExchangeRate(models.Model):\n    currency_from = models.ForeignKey(Currency, on_delete=models.CASCADE)\n    currency_to = models.ForeignKey(Currency, on_delete=models.CASCADE)\n    rate = models.DecimalField(max_digits=30, decimal_places=20)\n\nFavoriteCurrency(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    currency = models.ManyToManyField(Currency)\n    \"\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"app1/views.py\",\n    \"code\": \"\"\"\nfrom django.shortcuts import render\nfrom .models import Currency\n\ndef home(request):\n    currencies = Currency.objects.all()\n    return render(request, 'home.html', {'currencies': currencies'})\n\ndef currency_conversion(request, from_currency, to_currency):\n    rate = ExchangeRate.objects.get(currency_from=from_currency, currency_to=to_currency).rate\n    converted_amount = request.POST['amount'] * rate\n    return HttpResponse(converted_amount)\n\ndef search_currencies(request):\n    query = request.GET['query']\n    currencies = Currency.objects.filter(name__icontains=query) | Currency.objects.filter(symbol__icontains=query)\n    return render(request, 'search_results.html', {'currencies': currencies})\n\"\"\"\n  },\n  {\n    \"file\": \"/example_app/currency_conversion_form.html\",\n    \"description\": \"Form for currency conversion\"\n  },\n  {\n    \"file\": \"/app1/urls.py\",\n    \"description\": \"URLs configuration for app1\"\n  },\n  {\n    \"file\": \"/apps2/settings.py\",\n    \"description\": \"Settings configuration for all apps\"\n  },\n  {\n    \"file\": \"/example_app/help.html\",\n    \"description\": \"Help page content, using Frequently Asked Questions (FAQs)\"\n  }\n]", "3": "[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"somepath/somedir/password_generator/models.py\",\n    \"code\": \"\"\"\n      from django.db import models\n# Create your models here\n\"\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"somepath/somedir/password_generator/views.py\",\n    \"code\": \"\"\"\n      from django.shortcuts import render, redirect\nfrom .models import Password\n# Create your views here\n\"\"\"\n  },\n  {\n    \"file\": \"templates/index.html\",\n    \"path\": \"somepath/somedir/password_generator/templates/index.html\",\n    \"description\": 'Template for the /index page'\n  },\n  {\n    \"file\": \"/example_app/function_detail.html\",\n    \"description\": 'Template for displaying function details'\n  },\n  {\n    \"file\": \"forms.py\",\n    \"path\": \"somepath/somedir/password_generator/forms.py\",\n    \"code\": \"\"\"\n      from django import forms\n# Create your forms here\n\"\"\"\n  },\n  {\n    \"file\": \"admin.py\",\n    \"path\": \"somepath/somedir/password_generator/admin.py\",\n    \"code\": \"\"\"\n      from django.contrib import admin\nfrom .models import Password\n# Register your models here\n\"\"\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"somepath/somedir/password_generator/urls.py\",\n    \"code\": \"\"\"\n      from django.urls import path, include\nfrom django.conf import settings\nfrom django.views.generic.base import TemplateView\n\nurlpatterns = [\n    path('', views.IndexView.as_view(), name='password_index'),\n    # Add other URL patterns here\n]\n\"\"\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"somepath/somedir/password_generator/urls.py\",\n    \"code\": \"\"\"\n      from django.urls import path, include\nfrom django.conf import settings\nfrom django.views.generic.base import TemplateView\n\nurlpatterns = [\n    path('function_detail/<int:function_id>/', views.FunctionDetailView.as_view(), name='function_detail'),\n    # Add other URL patterns here\n]\n\"\"\"\n  },\n]", "4": "[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"QRCodeApp/models.py\",\n    \"code\": \"{\\\\\"Page\\\\\": \\\\\"CharField(20), max_length=50, unique=True)}\\\\n\\\\\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"QRCodeApp/views.py\",\n    \"code\": \"{\\\\\"def view_function(request):\\\\n    page_pk = request.POST['page']\\\\n    return render(request, 'page_template.html')}\\\\\"\n  },\n  {\n    \"file\": \"models/ModelPage.py\",\n    \"path\": \"QRCodeApp/models.py\",\n    \"code\": \"{\\\\\"from django.db import models\\\\n\\\\nclass Page(models.Model):\\\\n    page_name = models.CharField(max_length=50, unique=True)}\\\\\"\n  },\n  {\n    \"file\": \"/admin/templates/admin/change_list_results.html\",\n    \"description\": \"Admin Template for History page\"\n  },\n  {\n    \"file\": \"/help/templates/help/faq.html\",\n    \"description\": \"FAQ Page template\"\n  },\n  {\n    \"file\": \"/settings/templates/settings/size_adjustments.html\",\n    \"description\": \"Size Adjustments Page Template of Settings\"\n  }\n]", "5": "```\n[\n    {\n        \"page\": \"/convert\",\n        \"code\": [\n            {\"function\": \"Select Input Format\", \"description\": \"Choose between Markdown and HTML\"},\n            {\"function\": \"Upload File\", \"description\": \"Select a file to convert from your device or drag-and-drop it into the interface.\"},\n            {\"function\": \"Customize Output Settings\", \"description\": \"Choose from available output formats (e.g. PDF, Word, Text) and customize them as needed\"}\n        ]\n    },\n    {\n        \"page\": \"/help\",\n        \"codename\": \"wiki\",\n        \"code\": [\n            {\"function\": \"How to Use Section\", \"description\": \"Step-by-step guide on how to use the converter for various file types.\"},\n            {\"function\": \"Troubleshooting\", \"description\": \"Answers to common issues and errors users might encounter during the conversion process\"},\n            {\"function\": \"FAQs\", \"description\": \"Frequently Asked Questions section that addresses all general queries pertaining to the service\"}\n        ]\n    },\n    {\n        \"page\": \"/settings\",\n        \"code\": [\n            {\"function\": \"Account Information\", \"description\": \"View and edit user account details, including email address and password.\"}\n        ]\n    },\n    {\n        \"page\": \"/success/converted\",\n        \"codename\": \"share_converted_file\",\n        \"code\": [\n            {\"file\": \"/convert_file.py\", \"path\": \"templates/conversion_file/views.py\", \"code\": \"\"\"\n                from rest_framework.response import Response\n                def converted(request):\n                    # Return a JSON response containing the link to the saved file\n                    return Response({'link': \"https://example.com/file.jpg\"})\n            \"\"\"},\n            {\"file\": \"/share_link.html\", \"path\": \"templates/conversion_file/share_link.html\", \"code\": \"\"\"\n                <html>\n                  <body>\n                      <a href=\"{% url 'convert_share_page' %}\" \n                         title=\"Share a link to this file\">Click Here!</a>  \n                  </body>\n              </html>\n            \"\"\"},\n            {\"file\": \"/share_link.js\", \"path\": \"templates/conversion_file/share_link.js\", \"code\": \"\"\"\n                function openLink(name, url) {\n                    window.open(url.name, \"_blank\");\n                }\n                \n                document.addEventListener('DOMContentLoaded', () => {\n                  const a = document.createElement(\"a\"); \n                  a.href = \"\";\n                  if (navigator.userAgent.match(/Firefox/)) {\n                          a.download = '';\n                      }\n                \n                     // Set the click event of button to invoke openLink() when called\n                    a.onclick= function() {  \n                        openLink(this.text, this.url) ;   \n                    } ;\n                    \n                    var elem = document.getElementById( 'open' );\n                    if (elem) {     \n                       elem.setAttribute(\"href\", \"https://yourdomain.com/yourfile.txt\");\n                    }\n                    \n                    var link=document.createElement('link');  \n                    link.rel='stylesheet'; \n                    link.type='text/css';\n                    link.href = '/static/css/file_share.css';\n\n                    // Get the styles object and iterate over each property\n                    var stylesheet = document.styleSheets[document.styleSheets.length-1];\n                    \n                    if (stylesheet) {\n                        for(var j=0;typeof stylesheet.rules[j]!='undefined';j++)   \n                            if(document.styleSheets[document.styleSheets.length-1].rules[j].type=='text/css')   \n                               link.href=document.styleSheets[document.styleSheets.length-1].rules[j].cssText;\n                    }\n                    \n                      // Adding link to header...\n                    document.head.appendChild(link);  \n                    \n                    \n                    if (typeof window !== 'undefined' && window.document && navigator.userAgent.indexOf('Firefox/') > -16) {\n                        var downloadButton = document.getElementById(\"download\");\n                        downloadButton.classList.add(\"down_button_custom_1\");\n                    } \n                });\n                    \n            \"\"\"},\n        ]\n    },\n    {\"page\": \"/\", \"description\": \"root\"}\n]\n```", "6": "[\n  {\n    \"file\": \"app/models.py\",\n    \"path\": \"tasks/manage/migrations/initial_data\",\n    \"code\": \"from django.db import models\\\\n\\\\nclass Task(models.Model):\\\\n\\\\tname = models.CharField(max_length=200)\\\\n\\\\tdescription = models.TextField()\\\\n\\\\tpriority = models.IntegerField()\"\n  },\n  {\n    \"file\": \"app/views.py\",\n    \"path\": \"tasks/manage/templates/dashboard.html\",\n    \"code\": \"from django.shortcuts import render\\\\n\\\\ndef dashboard(request):\\\\n\\\\treturn render(request, 'dashboard.html')\"\n  },\n  {\"file\": \"/example_app/tasks/models.sql\", \"description\": \"CREATE TABLE tasks (name VARCHAR(200), description TEXT, priority INT);\"},\n  {\n    \"file\": \"app/utils.py\",\n    \"path\": \"tasks/manage/migrations/initial_data/utilities.py\",\n    \"code\": \"def get_task_status_update(task_id):\\\\n\\\\treturn Task.objects.get(id=task_id).status\\\\n\\\\ndef update_task_status_update(task_id, status):\\\\n\\\\tTask.objects.filter(id=task_id).update(status=status)\"\n  },\n  {\n    \"file\": \"app/serializers.py\",\n    \"path\": \"tasks/manage/templates/task_list_page.html\",\n    \"code\": \"from rest_framework import serializers\\\\n\\\\nclass TaskSerializer(serializers.ModelSerializer):\\\\n\\\\tclass Meta:\\\\n\\\\t\\\\tmodel = Task\\\\n\\\\t\\\\tfields = ('id', 'name', 'description', 'priority')\"\n  },\n  {\"file\": \"/example_app/tasks/database.py\", \"description\": \"db = sqlite3.connect('data.db')\"},\n  {\n    \"file\": \"app/views_forms.py\",\n    \"path\": \"tasks/manage/templates/analytics_page.html\",\n    \"code\": \"from django.http import HttpResponse\\\\n\\\\ndef analytics_page(request):\\\\n\\\\treturn HttpResponse('<chart code here>')\"\n  },\n  {\"file\": \"/example_app/tasks/settings.json\", \"description\": '{\"ALLOWED_HOSTS\": [\"localhost\"]}'},\n  {\n    \"file\": \"app/forms.py\",\n    \"path\": \"tasks/manage/templates/settings_page.html\",\n    \"code\": \"from django import forms\\\\n\\\\nclass ChangePasswordForm(forms.Form):\\\\n\\\\told_password = forms.CharField(max_length=255)\\\\n\\\\tnew_password = forms.CharField(max_length=255)\"\n  }\n]", "7": "[\n    {\n        \"file\": \"/example_app/models.py\",\n        \"description\": \"budget models such as BudgetCategory and Transaction\"\n    },\n    {\n        \"file\": \"/example_app/views.py\",\n        \"code\": \"\"\"\nfrom django.shortcuts import render\nfrom .models import BudgetCategory\n\ndef budget_breakdown(request):\n    categories = BudgetCategory.objects.all()\n    return render(request, 'templates/budget_breakdown.html', {'categories': categories})\n\"\"\",\n        \"path\": \"somepath/somedir/example_app/views.py\"\n    },\n    {\n        \"file\": \"/example_app/urls.py\",\n        \"code\": \"\"\"\nfrom django.urls import path\nfrom .views import budget_breakdown\n\nurlpatterns = [\n    path('budget-breakdown/', budget_breakdown, name='budget-breakdown'),\n]\n\"\"\",\n        \"path\": \"somepath/somedir/example_app/urls.py\"\n    },\n    {\n        \"file\": \"/example_app/templatetags/budget_tags.py\",\n        \"code\": \"\"\"\nfrom django import template\n\nregister = template.Library()\n\n@register.filter\ndef format_currency(value):\n    return f\"${value:.2f}\"\n\"\"\",\n        \"path\": \"somepath/somedir/example_app/templatetags/budget_tags.py\"\n    },\n    {\n        \"file\": \"/example_app/static/js/budget.js\",\n        \"description\": \"javascript for budget charts and dynamic updates\"\n    },\n    {\n        \"file\": \"/report/generate_pdf_report.py\",\n        \"code\": \"\"\"\nimport xhtml2pdf as pisa\n\ndef generate_budget_report(request):\n    # database query to get data for report\n    pdf = pisa.CreatePDF('HTML content', dest='hello.pdf')\n    return HttpResponse(pdf, mimetype='application/pdf')\n\"\"\",\n        \"path\": \"/example_app/report/generate_pdf_report.py\"\n    },\n]", "8": [{"file": "views.py", "path": "project/app/month/views.py"}, {"file": "urls.py", "path": "project/app/month/urls.py"}, {"file": "/month/templates/_base.html", "description": "Base monthly template containing date header, month switcher, and event list"}, {"file": "/month/templates/_functions.html", "description": "Reusable template for displaying individual calendar functions"}, {"file": "/month/views.py", "description": "Contains views for handling page navigation between monthly view, events table, settings, and add event form."}, {"file": "/month/forms.py", "description": "Module containing forms used for Add Event, Edit Event and Reminders setup."}, {"file": "/month/templates/month.html", "path": "project/app/month/templates/month.html"}], "9": "```\n[\n  {\n    \"page\": \"/app/config.py\",\n    \"description\": \"Configuration file for the project\"\n  },\n  {\n    \"page\": \"/app/models.py\",\n    \"description\": \"Model definitions for Django ORM\"\n  },\n  {\n    \"file\": \"/app/views.py\",\n    \"path\": \"somepath/somedir/app/views.py\",\n    \"code\": \"\"\"\nfrom django.shortcuts import render\nfrom .models import Page\n\ndef ask_general_knowledge_question(request):\n   # view function to implement the logic\n    return render(request, 'page.html')\n\"\"\"\n  },\n  {\n    \"page\": \"/app/urls.py\",\n    \"description\": \"Django URL routings\"\n  },\n  {\n    \"file\": \"/home/views.py\",\n    \"path\": \"somepath/somedir/home/views.py\",\n    \"code\": \"\"\"\nfrom .models import Page\n\ndef ask_general_knowledge_question(request):\n   # view function to implement the logic\n    return render(request, 'home.html')\n\"\"\"\n  },\n  {\n    \"page\": \"/support/urls.py\",\n    \"description\": \"Support page URL routings\"\n  },\n  {\n    \"file\": \"/support/views.py\",\n    \"path\": \"somepath/somedir/support/views.py\",\n    \"code\": \"\"\"\nfrom .models import Support\n\ndef request_support(request):\n   # view function to implement the logic\n    return render(request, 'support.html')\n\"\"\"\n  },\n  {\n    \"page\": \"{% url 'view_conversation_history' %}\",\n    \"description\": \"URL pattern for view conversation history\"\n  }\n]\n```", "10": {"templates": [{"file": "home.html", "path": "calorie_tracker/templates/home.html", "code": "{{ page_content }}\n{% block content %}{% endblock %}"}, {"file": "/example_app/charts.html", "description": "Chart of daily calorie intake"}, {"file": "history.html", "path": "calorie_tracker/templates/history.html", "code": "{{ page_content }}\n{% block content %}{% endblock %}"}], "views": [{"file": "view.py", "path": "calorie_tracker/views/view.py", "code": "from django.shortcuts import render\n...\ndef function_name(request):\n    data = ...\n    return render(request, 'home.html', {'page_content': data})"}, {"file": "/example_app/charts_view.py", "description": "View function for charts page"}, {"file": "history_view.py", "path": "calorie_tracker/views/history_view.py", "code": "from django.shortcuts import render\n...\ndef view_history(request):\n    data = ...\n    return render(request, 'history.html', {'page_content': data})"}]}, "11": [{"file": "views.py", "path": "apps/home/views.py", "code": "// Welcome views\n"}, {"file": "/home_app/templates/Home.html", "description": "<!-- Home template -->\n"}, {"file": "/about_app/templates/About.html", "description": "<!-- About template -->\n"}, {"file": "models.py", "path": "apps/home/models.py", "code": "// Model definitions\n"}], "12": "[\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"someapp/urls.py\",\n    \"code\": \"\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('', views.home, name='home'),\n]\"\n\n  },\n  {\n    \"file\": \"views.py\",\n    \"description\":\"This file defines the views for our application\"\n  },\n  {\n    \"file\": \"/example_app/templates/login.html\",\n    \"description\":\"Login Page Template\"\n  },\n  {\n    \"file\": \"/example_app/login/\",\n    \"path\":\"/logina_page.html\",\n    \"description\":\"Admin Login page\"\n  },\n   {\n    \"file\": \"models.py\",\n    \"path\": \"someapp/models.py\",\n    \"code\": \"\nfrom django.db import models\n\nclass User(models.Model):\n    name = models.CharField(max_length=255)\n    email = models.EmailField(unique=True)\n\nclass Claim(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    amount = models.DecimalField(max_digits=10, decimal_places=2)\n\"\n  },\n  {\n    \"file\": \"/example_app/admin.py\",\n    \"description\":\"Admin related settings\"\n  },\n   {\n    \"file\": \"templates/submit_form.html\",\n    \"path\":{\n        \"base_url\":\"/claim_list/\",\n        \"claim_list\":[{\n            \"claim_id\":1,\n            \"claimant_name\":\"XXX XXX.\",\n                            }\n\n    }\n    \"description\":\"Form for submitting new claim\"\n\n  },\n  {\n    \"file\": \"/example_app/management/commands/init.py\",\n    \"path\":\"/manage_py_scripts/\",\n    \"code\":\n  \"\"\"\nfrom django.core.management import ManagementUtility\n\nclass Command(ManagementUtilities):\n    def handle(self, *args, **kwargs):\n        # Run the database operations\n        run_command()\n  }\n    \"\"\n  },\n  {\n    \"file\": \"/example_app/forms.py\",\n    \"path\":\"/forms/\",\n    \"code\":\n\" from django  import forms \n class ClaimForm(forms.ModelForm):\n\n      model=Claim\"\n  },\n   {\n\n    \"file\":\"__init__.py\",\n     \"description\":\"'This is the init file.\",\n    \"path\":\"some_folder/some_subdir\"\n\n  \n  }\n]", "13": "[\n  {\n    \"file\": \"models.py\",\n    \"path\": \"example_app/customers/models.py\",\n    \"code\": \"\"\"\n      from django.db import models\n      class Customer(models.Model):\n          name = models.CharField(max_length=255)\n          company = models.CharField(max_length=255)\n    \"\"\"\n  },\n  {\n    \"file\": \"views.py\",\n    \"path\": \"example_app/customers/views.py\",\n    \"code\": \"\"\"\n      from django.shortcuts import render\n      from .models import Customer\n\n      def add_customer(request):\n          # ... view logic ...\n          return render(request, 'customer_form.html')\n\n      def edit_customer(request, pk):\n          # ... view logic ...\n          return render(request, 'customer_form.html')\n  },\n  {\n    \"file\": \"templates/page_base.html\",\n    \"path\": \"example_app/customers/templates/page_base.html\",\n    \"description\": \"Base template for customer pages\"\n  },\n  {\n    \"file\": \"customer_form.html\",\n    \"path\": \"example_app/customers/templates/customer_form.html\",\n    \"description\": \"Template for the add/edit customer form\"\n  },\n  {\n    \"file\": \"urls.py\",\n    \"path\": \"example_app/customers/urls.py\",\n    \"code\": \"\"\"\n      from django.urls import path\n      from . import views\n\n      urlpatterns = [\n          path('customer/', views.customer_list, name='customer_list'),\n          path('customer/<int:pk>/', views.customer_detail, name='customer_detail'),\n          ...\n      ]\n  },\n  {\n    \"file\": \"/example_app/product/models.py\",\n    \"description\": \"Customer and Product models\"\n  }\n]", "14": "[\n  {\n    \"file\": \"/core/models.py\",\n    \"description\": \"Project's Django models\"\n  },\n  {\n    \"file\": \"/core/views.py\",\n    \"code\": \"\"\"\nfrom .models import Page\nfrom django.shortcuts import render\nfrom django.views.generic import ListView\n\nclass HomePageView(ListView):\n    model = Page\n\"\"\"\n  },\n  {\n    \"file\": \"/templates/welcome.html\",\n    \"description\": \"Page template for the 'Welcome' page\"\n  },\n  {\n    \"file\": \"/core/urls.py\",\n    \"code\": \"\"\"\nfrom django.urls import path, include\nfrom . import views\n\nurlpatterns = [\n    path('', views.HomePageView.as_view(), name='homepage'),\n]\n\"\"\"\n  },\n  {\n    \"file\": \"/home/views.py\",\n    \"description\": \"Function that handles navigation\"\n  },\n  {\n    \"file\": \"/home/urls.py\",\n    \"code\": \"\"\"\nfrom django.urls import path\nfrom .views import navigate\n\nurlpatterns = [\n    path('link-to-move-forward/', navigate, name='navigate'),\n]\n\"\"\"\n  }\n]", "15": [{"file": "project/__init__.py", "path": "django_project/project/__init__.py", "code": ""}, {"file": "settings.py", "path": "django_project/project/settings.py", "code": "import os\n... settings.py content"}, {"file": "urls.py", "path": "django_project/project/urls.py", "code": "/\nurlpatterns = [\n\tpath('', views.index, name='index'),\n]"}, {"file": "templates/index.html", "path": "django_project/project/templates/index.html", "code": "<html>\n<head>\n\t<title>Index</title>\n</head>\n<body>\n\tClick <a href='{% url 'helloworld' %}'>here</a>\nto jump to helloworld page.\n</body>\n</html>"}, {"file": "views.py", "path": "django_project/project/views.py", "code": "from django.shortcuts import render\n\ndef index(request):\n\treturn render(request, 'index.html')\n"}, {"file": "/example_app/hello_button.xs", "description": "Transitional effect for button on helloworld page."}, {"file": "templates/helloworld.html", "path": "django_project/project/templates/helloworld.html", "code": "<html>\n<head>\n\t<title>Hello World</title>\n</head>\n<body>\n\t{{ hello_message }}\n</body>\n</html>"}], "16": {"templates": [{"name": "batch_program_structure.py", "path": "path/to/batch_program/batch_program_structure.py", "code": "template"}, {"file": "/example_app/excel2table.py", "description": "Transformation script for converting Excel table to two-dimensional subject table"}, {"file": "/example_app/transform_excel.py", "description": "Transform 'Spring Semester Subjects.xlsx' into 'Subject Table.xlsx'"}, {"description": "Create a two-dimensional subject table from Excel data"}]}, "17": "```\n[{\"file\":\"import_libraries.py\",\"path\":\"/app/src/main\",\"code\":\"\"},\n {\"file\":\"read_data.py\",\"path\":\"/app/src/main\",\"code\":\"df = pd.read_excel('Gamedata.xlsx')\"},\n {\"file\":\"preprocess_data.py\",\"path\":\"/app/src/main\",\"code\":\"\",\n  \"functions\":\n   [{\"function\":\"X = df[['column1', 'column2']]\", \"description\": \"select features\"},\n    {\"function\":\"y = df['result']\", \"description\": \"specify target variable\"}]},\n {\"file\":\"create_and_train_model.py\",\"path\":\"/app/src/main\",\"code\":\"\",\n  \"functions\":\n   [{\"function\":\"logreg = linear_model.LogisticRegression()\", \"description\": \"Create model instance\"},\n    {\"function\":\"logreg.fit(X, y)\", \"description\": \"Train the model\"}]},\n {\"file\":\"predict_and_evaluate.py\",\"path\":\"/app/src/main\",\"code\":\"\",\"functions\":[\"y_pred = logreg.predict(X)\"]},\n {\"file\":\"output_model_summary.py\",\"path\":\"/app/src/main\",\"code\":\"\",\n  \"functions\":\n   [{\"function\":\"logreg_summary = pd.DataFrame({'accuracy': [logreg.score(X,y)], 'f1-score': [], 'precision': []})\", \"description\": \"create dataframe\"},\n    {\"function\":\"logreg_summary.to_excel('Logistic.xlsx', index=False)\",\"path\":\"/app/src/main\",\"code\":\"\"}]\n },\n {\"file\":\"confusion_matrix.py\",\"path\":\"/app/src/main\",\"code\":\"\",\n  \"_confusion_matrix = pd.DataFrame(confusion_matrix(y, y_pred))\"}]\n```", "18": [{"file": "inventory_system.py", "path": "src/features/inventory/inventory_system.py", "code": "class InventorySystem:\n    def __init__(self):\n        pass\n\n    def check_inventory(self):\n        print('Inventory')\n\n    def use_item_from_inventory(self):\n        item_name = input()\n        quantity = int(input())"}, {"file": "/example_app/inventory_check.xx", "description": "This script contains user inputs for inventory checking and usage."}, {"file": "inventory_interactions.py", "path": "src/features/inventory/inventory_interactions.py", "code": "class InventoryInteractions:\n    def __init__(self):\n        pass\n\n    def check_inventory(self):\n        # TO DO: implement this function\n"}, {"file": "/example_app/use_item.xx", "description": "This script contains user inputs for inventory usage."}, {"file": "item_repository.py", "path": "src/models/item_repository.py", "code": "class ItemRepository:\n    def __init__(self):\n        pass\n"}], "19": "```json\n[\n    {\n        \"file\": \"death_statistics.py\",\n        \"path\": \"code/death_stats/\",\n        \"code\": `\nimport pandas as pd\nimport matplotlib.pyplot as plt\n# Read the CSV file into a DataFrame\ndf = pd.read_csv('Deathlist.csv')\n\n# Ensure date format is in datetime type\ndf['Date of death'] = pd.to_datetime(df['Date of death'])\n\n    `,\n        \"description\": \"\"\n     },\n    \n    {\n        \"file\": \"death_statistics.py\",\n        \"path\": \"code/death_stats/\",\n        \"code\": `\nweekly_deaths = df['Date of death'].dt.weekday // 3 \n# Create a histogram to show weekly deaths\nprint(weekly_deaths.value_counts().plot(kind=\"bar\"))\nplt.title(\"Weekly Deaths\")\nplt.xlabel(\"Day of Week\")\nplt.ylabel(\"Counts\")`,\n        \"description\": \"\"\n    },\n    \n    {\n        \"file\": \"/death_statistics.py\",\n        \"path\": \"code/death_stats/.\",\n        \"description\": \"Export weekly deaths plot to image\"\n     }\n\n]\n```", "20": [{"file": "/project/app/templates/home.html", "description": "Page to display Home content"}, {"file": "/project/app/templates/blog.html", "description": "Page to display Blog content with View All Posts, Filter by Category and Search Within Articles links"}, {"file": "/project/app/templates/about.html", "description": "Page to contact us with Author Information, Site Description, Contact Form etc."}, {"file": "/app/views/home_views.py", "code": "from django.shortcuts import render\nrender(request, 'home.html')"}, {"file": "/app/views/blog_views.py", "code": "from django.shortcuts import render\ndef latest_blogs(request):\n  return render(request, 'blog.html')\ndef home(request):\n  return render(request, 'index.html')"}, {"file": "/app/models.py", "description": "Define BlogPost model with fields title, content and date posted"}]}