{"13": [{"file": "manage.py", "path": "/project/manage.py", "code": "import os\n# ..."}, {"file": "settings.py", "path": "/project/project/settings.py", "description": "Project settings and configurations"}, {"file": "urls.py", "path": "/project/project/urls.py", "code": "from django.contrib import admin\n# ...\nclass MySite(urls.URLPattern):\n    # ...\n", "description": ""}, {"file": "wsgi.py", "path": "/project/wsgi.py", "description": "WSGI Entry"}, {"file": "customer/models.py", "path": "/api/v1/customer/models.py", "description": "Customer model definition"}, {"file": "customer/views.py", "path": "/api/v1/customer/views.py", "code": "from rest_framework.renderers import JSONRenderer\n# ...\nclass CustomerViewSet(ViewSet):\n    # ...\ndef create(self, request): customer = Customer() customer.name \"name\" request.data\n# ", "description": ""}, {"file": "customer/serializers.py", "path": "/api/v1/customer/serializers.py", "code": "from rest_framework import serializers\nclass CustomerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Customer\n        fields = '__all__'"}, {"file": "product/models.py", "path": "/api/v1/product/models.py", "description": "Product model definition"}, {"file": "product/views.py", "path": "/api/v1/product/views.py", "code": "from rest_framework.renderers import JSONRenderer\n# ...\nclass ProductViewSet(ViewSet):\n    # ...\ndef create(self, request): product = Product() product.name \"name\" request.data\n# ", "description": ""}, {"file": "product/serializers.py", "path": "/api/v1/product/serializers.py", "code": "from rest_framework import serializers\nclass ProductSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Product\n        fields = '__all__'"}, {"file": "purchase_records/views.py", "path": "/api/v1/purchase_records/views.py", "description": "View for analyzing sales data"}, {"file": "static/js/top_selling_products.js", "path": "/static/js/top_selling_products.min.js", "description": "JavaScript file for displaying top-selling products"}], "17": [{"file": "/dataset/Gamedata.xlsx", "path": "/data/datasets/Gamedata.xlsx", "code": "import pandas as pd\ndf = pd.read_excel('Gamedata.xlsx')"}, {"file": "", "path": "/pandas-datachecker.py", "code": "// Check for missing values and handle categorical variables\nimport pandas as pd\ndef check_data(df):\n    # YOUR CODE HERE\n    return df;"}, {"file": "", "path": "/logistic_regression.py", "code": "// Train a logistic regression model with one-period-lag process on 'result'\nfrom sklearn.linear_model import LogisticRegression\n# YOUR CODE HERE"}, {"file": "/prediction/Logistic.xlsx", "path": "/output/prediction/Logistic.xlsx", "code": "// Save model summary to 'Logistic.xlsx'\ndef save_summary(df):\n    # YOUR CODE HERE\n    df.to_excel('Logistic.xlsx', index=False);"}]}