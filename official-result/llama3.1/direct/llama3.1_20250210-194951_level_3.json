{"6": [{"file": "_env.py", "path": "project/_env.py", "code": ""}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "__init__.py", "path": "project/__init__.py", "code": ""}, {"file": "asgi.py", "path": "project/asgi.py", "code": ""}, {"file": "models.py", "path": "example_app/models.py", "code": "from django.db import models\n\nclass TodoList(models.Model):\n    name = models.CharField(max_length=255)\n\nclass Task(models.Model):\n    todo_list = models.ForeignKey(TodoList, on_delete=models.CASCADE)\n    name = models.CharField(max_length=255)\n"}, {"file": "settings.py", "path": "project/settings.py", "code": "from pathlib import Path\n\n# Build paths inside the project like this: BASE_DIR / 'subdir'.\nBASE_DIR = Path(__file__).resolve().parent.parent\n\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = ''\n\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\n\nALLOWED_HOSTS = []\n\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = ''\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = ''\n\n# Database\n# https://docs.djangoproject.com/en/3.2/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n\n# Password validation\n# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators\n\nAUTH_PASSWORD_VALIDATORS = [\n    { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },\n    { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', },\n]\n\n# Internationalization\n# https://docs.djangoproject.com/en/3.2/topics/i18n/\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = True\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/3.2/howto/static-files/\n\nSTATIC_URL = '/static/'\n\n# Default primary key field type\n# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field\n\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\n"}, {"file": "urls.py", "path": "project/urls.py", "code": "from django.urls import path, include\nfrom django.conf import settings\nfrom django.conf.urls.static import static\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include(''), namespace='example_app'),\n]\n"}, {"file": "__init__.py", "path": "example_app/templates/__init__.py", "code": ""}, {"file": "templates.html", "path": "example_app/templates/templates.html", "code": "<html>\n<head>\n    <title>{% block title %}Example Page{% endblock %}</title>\n</head>\n<body>\n    <div class=\"container\">\n        {% block content %}{% endblock %}\n    </div>\n</body>\n</html>"}], "14": [{"file": "manage.py", "path": "myproject/manage.py", "code": "import os\nimport sys\n\nif __name__ == '&;main&;':\n    os.environ.setdefault(''DJANGO_SETTINGS_MODULE', 'myproject.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it\u2019s installed and \u201c\n            \u201cavailable on your PYTHONPATH environment variable? Did you \u201c\n            \u201cforget to activate a virtual environment?\"\n        ) from exc\n    execute_from_command_line(sys.argv)\n"}, {"file": "views.py", "path": "myproject/example_app/views.py", "code": "\nfrom django.shortcuts import render\nfrom django.views import View\n\nclass HelloWorldView(View):\n    \u201c\"\u201c\n    Class-based view to render the Hello World page.\n    \u201c\"\u201c\n\n    def get(self, request):\n        \u201c\u201c\u201c\n        Handle GET request to display Hello World.\n        \u201c\u201c\u201c\n\n        # Render the template with a message and title\n        return render(request, 'hello_world.html', {'message': 'Hello World!', 'title': 'Welcome'})\n"}, {"file": "style.css", "path": "myproject/example_app/static/css/style.css", "code": "\ntl {\n    font-size: 24px;\n    color: #333;\n}\nclass content {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    margin: 0;\n}/*\nThis is a comment in the CSS file\n*/"}, {"file": "hello_world.html", "path": "myproject/example_app/templates/hello_world.html", "code": "\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>{% block title %}Hello World{% endblock %}</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"{'}{% static \u2018css/style.css\u2019 %}\"\u201d>\n</head>\n<body>\n    <!-- This section displays the Hello World message to the user. -->\n    <div class=\"content\">\n        <h1 id=\"title\">{% block content %}Hello{% endblock %}</h1>\n    </div>\n</body>\n</html>"}], "15": [{"file": "urls.py", "path": "example_project/urls.py", "code": "from django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('', include('example_app.urls')),\n]\n"}, {"file": "wsgi.py", "path": "example_project/wsgi.py", "code": "import os\n\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'example_project.settings')\n\napplication = get_wsgi_application()\n"}, {"file": "settings.py", "path": "example_project/settings.py", "code": "import os\n\nBASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))\n\nSECRET_KEY = 'your_secret_key_here'\n\nDEBUG = True\n\nALLOWED_HOSTS = []\n\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'example_app',\n]\n\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n\nROOT_URLCONF = 'example_project.urls'\n\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n                'django.contrib.messages.context_processors.messages',\n            ],\n        },\n    },\n]\n\nWSGI_APPLICATION = 'example_project.wsgi.application'\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',\n    },\n]\n\nLANGUAGE_CODE = 'en-us'\n\nTIME_ZONE = 'UTC'\n\nUSE_I18N = True\n\nUSE_L10N = True\n\nUSE_TZ = False\n\nSTATIC_URL = 'static/'\n STATICFILES_DIRS = [os.path.join(BASE_DIR, 'example_app/static')]\n"}, {"file": "management/commands/init_database.py", "path": "example_project/management/commands/init_database.py", "code": ""}, {"file": "__init__.py", "path": "example_project/__init__.py", "code": ""}, {"file": "models.py", "path": "example_app/models.py", "code": "// models module definition\nfrom django.db import models"}, {"file": "views.py", "path": "example_app/views.py", "code": "// view functions or decorators definition"}, {"file": "__init__.py", "path": "example_app/__init__.py", "code": ""}, {"file": "admin.py", "path": "example_app/admin.py", "code": "// admin interface actions and classes definition"}, {"file": "urls.py", "path": "example_app/urls.py", "code": "from django.urls import path, include\n\nurlpatterns = [\n    path('', include('homeapp.urls')),\n]\n"}, {"file": "templates/base.html", "path": "example_project/templates/base.html", "code": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <meta name=\"description\" content=\"Home page with a button to Hello World page.\">\n    <title>Base Template</title>\n</head>\n<body>\n    {% block content %}\n    {% endblock %}\n</body>\n</html>"}, {"file": "templates/home.html", "path": "example_project/templates/home.html", "code": "<h1>Home Page</h1><p>Welcome to your home page!</p>"}, {"file": "templates/about.html", "path": "example_project/templates/about.html", "code": "{}"}], "16": [{"file": "check_file_exists.py", "path": "processor/check_file_exists.py", "code": "def check_file_exists(file_path):\n    try:\n        os.path.isfile(file_path)\n        return True\n    except Exception as e:\n        logging.error(f'Error: {str(e)}')\n        return False"}, {"file": "check_file_format.py", "path": "processor/check_file_format.py", "code": "import pandas as pd\n\ndef check_file_format(file_path):\n    try:\n        df = pd.read_excel(file_path, sheet_name=None)\n        # Check if Excel file has at least one sheet\n        return len(df) > 0\n    except Exception as e:\n        logging.error(f'Error: {str(e)}')\n        return False"}, {"file": "validate_data.py", "path": "processor/validate_data.py", "code": "import pandas as pd\n\ndef validate_data(df):\n    # Check required columns\n    required_columns = ['column_name1', 'column_name2']\n    if not all(col in df.columns for col in required_columns):\n        logging.error(f'Missing required column(s)\n{str(required_columns)}')\n        return False"}, {"file": "process_subjects.py", "path": "processor/process_subjects.py", "code": "import pandas as pd\nfrom processor.check_file_exists import check_file_exists\nfrom processor.validate_data import validate_data\nfrom processor.check_file_format import check_file_format\n\ndef process_subjects(df):\n    # Process the DataFrame\n    processed_df = pd.DataFrame()\n    return processed_df"}, {"file": "main.py", "path": "main/main.py", "code": "import logging\nfrom processor.process_subjects import process_subjects\nfrom processor.check_file_exists import check_file_exists\nfrom processor.check_file_format import check_file_format\nfrom processor.validate_data import validate_data\n\ndef main():\n    try:\n        # Load input data from Excel file\n        df = pd.read_excel('Spring Semester Subjects.xlsx', sheet_name=None)\n\n        # Check if Excel file exists\n        if not check_file_exists('Spring Semester Subjects.xlsx'):\n            logging.error(f'File does not exist: Spring Semester Subjects.xlsx')\n            return False\n\n        # Check if file is in the required format (Excel sheet) and load it\n        process_subjects(df[\"Sheet1\"])\n    except Exception as e:\n        logging.error(f'Execution failed due to errors: {str(e)}')"}, {"file": "requirements.txt", "path": "venv/requirements.txt", "code": ""}, {"file": "setup.py", "path": "/project/setup.py", "code": "from setuptools import setup, find_packages\n\nversion = '0.1'\n\ndef install_dependencies():\n    requirements = {'name': 'processor'}\n    with open('requirements.txt', 'w') as file:\n        for requirement in requirements['name']: # Replace name: ['req1','req2''...']"}], "17": [{"file": "read_and_validate_data.py", "path": "src/data_validation/read_and_validate_data.py", "code": "import pandas as pd\n\ndef read_and_validate_data(input_file):\n    try:\n        data = pd.read_excel(input_file)\n        data.dropna(inplace=True, subset=None)\n        return data\n    except Exception as e:\n        print(f\"Error reading and validating data: {e}\")\n        return None\n"}, {"file": "add_lagged_dependent_variable.py", "path": "src/data_wrangling/add_lagged_dependent_variable.py", "code": "import pandas as pd\n\ndef add_lagged_dependent_variable(data, target_column):\n    data[target_column + '_lag'] = data[target_column].shift(1)\n    data.dropna(inplace=True)\n    return data"}, {"file": "prepare_features_and_target.py", "path": "src/data_wrangling/prepare_features_and_target.py", "code": "import pandas as pd\n\ndef prepare_features_and_target(data, target_column, lagged_column):\n    X = data.drop([target_column, lagged_column], axis=1)\n    y = data[target_column]\n    return X, y"}, {"file": "build_logistic_model.py", "path": "src/modeling/build_logistic_model.py", "code": "import statsmodels.api as sm\nfrom sklearn.model_selection import train_test_split\n\ndef build_logistic_model(X, y):\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)\n    logit_model = sm.Logit(y_train, X_train).fit()\n    return logit_model"}, {"file": "save_summary_to_excel.py", "path": "src/output/save_summary_to_excel.py", "code": "import pandas as pd\n\ndef save_summary_to_excel(result, output_file):\n    summary = pd.DataFrame({'coefficients': result.params, 'std_errors': result.bse})\n    summary.to_excel(output_file, index=False)"}, {"file": "main.py", "path": "src/main.py", "code": "from .read_and_validate_data import read_and_validate_data\nfrom .add_lagged_dependent_variable import add_lagged_dependent_variable\nfrom .prepare_features_and_target import prepare_features_and_target\nfrom .build_logistic_model import build_logistic_model\nfrom .save_summary_to_excel import save_summary_to_excel\n\ndef main(input_file, output_file):\n    data = read_and_validate_data(input_file)\n    if data is None:\n        print(\"Error reading and validating data\")\n        return\n    data_lagged = add_lagged_dependent_variable(data, 'target_column')\n    X, y = prepare_features_and_target(data_lagged, 'target_column', 'lagged_column')\n    logit_model = build_logistic_model(X, y)\n    save_summary_to_excel(logit_model, output_file)"}, {"file": "Gamedata.xlsx", "path": "data/Gamedata.xlsx", "code": ""}, {"file": "Logistic.xlsx", "path": "output/Logistic.xlsx", "code": ""}]}